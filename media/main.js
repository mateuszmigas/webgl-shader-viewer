!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);var r,o=function(){function e(e){this.context=e,this.buffer=e.createBuffer()}return e.prototype.setValue=function(e){this.context.bindBuffer(this.context.ELEMENT_ARRAY_BUFFER,this.buffer),this.context.bufferData(this.context.ELEMENT_ARRAY_BUFFER,new Uint16Array(e),this.context.STATIC_DRAW)},e.prototype.setIndexBuffer=function(){this.context.bindBuffer(this.context.ELEMENT_ARRAY_BUFFER,this.buffer)},e.prototype.deleteBuffer=function(){this.context.deleteBuffer(this.buffer),this.buffer=null},e}(),i="SHADERS",u=function(){return(u=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},a=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],u=0,a=i.length;u<a;u++,o++)r[o]=i[u];return r},c={emptyItem:!0},s=function(e,t,n){var r=u(u({},c),n),o=document.createElement("select");o.className="dropdown-base "+t;var i=null,s=[],f=function(t){e(i=t)};o.onchange=function(){var e=s.find((function(e){return e.item.id===o.value}));e.item.id?f(e.item):f(null)};var l=function(e){f(null),s.forEach((function(t){t.item.id===e?(t.element.selected=!0,f(t.item)):t.element.selected=!1}))};return[o,{setItems:function(e){o.innerHTML="",s.length=0,e.find((function(e){return e.id===(null==i?void 0:i.id)}))||f(null),(r.emptyItem?a([{id:"",display:""}],e):a(e)).forEach((function(e){var t=document.createElement("option");t.value=e.id,t.textContent=e.display,t.selected=e.id===(null==i?void 0:i.id),o.appendChild(t),s.push({element:t,item:e})}))},getItems:function(){return s.map((function(e){return e.item}))},setSelectedItemById:l,setSelectedItemByIndex:function(e){return l(s[e].item.id)},getSelectedItem:function(){return i},clearSelection:function(){s.forEach((function(e){return e.element.selected=!1})),f(null)}}]},f=function(e,t){var n=s((function(n){n?(e.forEach((function(e){return e.element.classList.add("hidden")})),e.find((function(e){return e.id===n.id})).element.classList.remove("hidden"),null==t||t(n.id)):null==t||t(null)}),"",{emptyItem:!1}),r=n[0],o=n[1];return o.setItems(e.map((function(e){return{id:e.id,display:e.display}}))),o.setSelectedItemByIndex(0),r},l=function(e){return{id:"custom",display:"Custom",element:e}},p=function(e,t,n){var r=document.createElement("button");return r.onclick=n,r.className=t,r.textContent=e,{element:r}},d=function(e,t,n){var r=document.createElement("div");r.className=(null!=n?n:"")+" options-wrapper";var o=document.createElement("label");return o.className="options-label",o.textContent=t,e.className=e.className+" options-content",r.appendChild(o),r.appendChild(e),r},h=function(e,t){var n=document.createElement("div");return n.className=e,null==t||t.forEach((function(e){return n.appendChild(e)})),n},m=function(e,t,n,r,o){var i=document.createElement("div");i.className="edit-input-grid";for(var u=[],a=function(){return u.map((function(e){return e.value}))},c=0;c<n;c++){var s=document.createElement("div");s.className="edit-input-row";for(var f=function(n){var i=c*r+n,f=e[i],l=document.createElement("input"),p={element:l,value:f};Object.assign(l,o),l.className="edit-input",l.type="number",l.value=null==f?void 0:f.toString(),l.oninput=function(){u[i].value=Number(l.value),null==t||t(a())},u.push(p),s.appendChild(l)},l=0;l<r;l++)f(l);i.appendChild(s)}return[i,{setValues:function(e){return u.forEach((function(t,n){t.value=e[n],t.element.value=t.value.toString()}))},getValues:a,setReadonly:function(e){return u.forEach((function(t){return t.element.readOnly=e}))}}]},v=function(e){return m([0,0,0],e,1,3)},y=function(){return(y=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},g={min:"0",max:"1",step:"0.1"},b=function(e,t){return e.hasOwnProperty(t)},x=function(e){throw new Error("Unhandled union member: "+JSON.stringify(e))},E=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],u=0,a=i.length;u<a;u++,o++)r[o]=i[u];return r};!function(e){e[e.FLOAT_VEC2=35664]="FLOAT_VEC2",e[e.FLOAT_VEC3=35665]="FLOAT_VEC3",e[e.FLOAT_VEC4=35666]="FLOAT_VEC4",e[e.SAMPLER_2D=35678]="SAMPLER_2D"}(r||(r={}));var A,T=function(){function e(e,t,n,r){this.context=e,this.name=n,this.type=r,this.attachToProgram(t)}return e.prototype.attachToProgram=function(e){var t=this.context.getUniformLocation(e,this.name);this.setter=w(this.type,this.context,t)},e.prototype.setValue=function(e){this.value=e},e.prototype.setUniform=function(){null!==this.value&&this.setter(this.value)},e.prototype.getUniformType=function(){return this.type},e.prototype.dispose=function(){},e}(),w=function(e,t,n){switch(e){case r.FLOAT_VEC2:return function(e){return t.uniform2f.apply(t,E([n],e))};case r.FLOAT_VEC3:return function(e){return t.uniform3f.apply(t,E([n],e))};case r.FLOAT_VEC4:return function(e){return t.uniform4f.apply(t,E([n],e))};case r.SAMPLER_2D:return function(e){};default:x(e)}},S=function(){function e(e){this.keySelector=e,this.map=new Map}return e.prototype.get=function(e){return this.map.get(this.keySelector(e))},e.prototype.set=function(e,t){this.map.set(this.keySelector(e),t)},e.prototype.has=function(e){return this.map.has(this.keySelector(e))},e.prototype.entriesStrKey=function(){return Array.from(this.map.entries())},e.prototype.deleteStrKey=function(e){this.map.delete(e)},e.prototype.delete=function(e){this.map.delete(this.keySelector(e))},e.prototype.clear=function(){this.map.clear()},e}(),C=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){var t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}))},V=function(){return(V=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},O=new S((function(e){return e.name+";"+e.type})),L=function(e){switch(e.getUniformType()){case r.FLOAT_VEC2:return I((function(t){return e.setValue(t)}));case r.FLOAT_VEC3:return F((function(t){return e.setValue(t)}));case r.FLOAT_VEC4:var t=[1,0,0,1];return e.setValue(t),N(t,(function(t){return e.setValue(t)}));case r.SAMPLER_2D:return B((function(t){C();e.setValue({slot:t.slot,textureData:!0})}));default:return _()}},_=function(){var e=document.createElement("div");return e.className="unsupported-error",e.innerText="Not supported uniform",e},I=function(e){var t=m([0,0],e,1,2),n=t[0];return t[1].setValues([0,0]),n},B=function(e){var t=v(),n=t[0];return t[1].setValues([0,0,0]),n},F=function(e){var t=v(e),n=t[0];t[1].setValues([0,0,0]);var r=function(e){var t=[.5,.5,.5],n=document.createElement("div");n.className="edit-input-color";var r=function(e){n.style.background="rgb("+255*e[0]+","+255*e[1]+","+255*e[2]+",1)"};r(t);var o=h("row-with-gap"),i=m(t,(function(t){r(t),null==e||e(t)}),1,3,g),u=i[0],a=i[1];return o.appendChild(u),o.appendChild(n),[o,y(y({},a),{setValues:function(e){a.setValues(e),r(e)}})]}(e),o=r[0];r[1].setValues([1,0,0]);var i=f([{id:"custom",display:"Custom",element:n},{id:"color",display:"Color",element:o}]);return h("column-with-gap",[i,n,o])},N=function(e,t){var n=m([0,0,0,0],t,1,4),r=n[0];n[1].setValues(e);var o=function(e){var t=[.5,.5,.5,1],n=document.createElement("div");n.className="edit-input-color";var r=function(e){n.style.background="rgb("+255*e[0]+","+255*e[1]+","+255*e[2]+","+e[3]+")"};r(t);var o=h("row-with-gap"),i=m(t,(function(t){r(t),null==e||e(t)}),1,4,g),u=i[0],a=i[1];return o.appendChild(u),o.appendChild(n),[o,y(y({},a),{setValues:function(e){a.setValues(e),r(e)}})]}(t),i=o[0];o[1].setValues(e);var u=f([{id:"custom",display:"Custom",element:r},{id:"color",display:"Color",element:i}]);return h("column-with-gap",[u,r,i])},R=function(e,t){var n=e.indexOf(t);n>-1&&e.splice(n,1)},P=function(e,t){return e.substring(0,e.length-t)},M=function(e,t,n){var r=e.createShader(t);if(e.shaderSource(r,n),e.compileShader(r),e.getShaderParameter(r,e.COMPILE_STATUS))return r;var o=e.getShaderInfoLog(r);return e.deleteShader(r),{error:o}},D=function(e,t,n){var r=e.createProgram();if(e.attachShader(r,t),e.attachShader(r,n),e.linkProgram(r),e.getProgramParameter(r,e.LINK_STATUS))return r;throw e.deleteProgram(r),new Error("Creating program failed: "+e.getProgramInfoLog(r))};!function(e){e[e.FLOAT_VEC3=35665]="FLOAT_VEC3",e[e.FLOAT_VEC4=35666]="FLOAT_VEC4"}(A||(A={}));var k=function(){function e(e,t,n,r){this.context=e,this.name=n,this.type=r,this.numElements=0,this.attachToProgram(t),this.buffer=e.createBuffer()}return e.prototype.attachToProgram=function(e){this.location=this.context.getAttribLocation(e,this.name)},e.prototype.setValue=function(e){this.numElements=e.length,this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffer);var t=[].concat.apply([],e);console.log("setting value",t),this.context.bufferData(this.context.ARRAY_BUFFER,new Float32Array(t),this.context.STATIC_DRAW)},e.prototype.setAttributeBuffer=function(){if(null!==this.buffer){this.context.enableVertexAttribArray(this.location),this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffer);var e=U(this.type),t=this.context.FLOAT;this.context.vertexAttribPointer(this.location,e,t,!1,0,0)}},e.prototype.getAttributeBufferType=function(){return this.type},e.prototype.getNumElements=function(){return this.numElements},e.prototype.deleteBuffer=function(){this.context.deleteBuffer(this.buffer),this.buffer=null},e}(),U=function(e){switch(e){case A.FLOAT_VEC3:return 3;case A.FLOAT_VEC4:return 4;default:x(e)}},j=function(){function e(e){this.value=e,this.observers=[]}return e.prototype.attach=function(e){this.observers.push(e)},e.prototype.detach=function(e){R(this.observers,e)},e.prototype.detachAll=function(){this.observers.length=0},e.prototype.setValue=function(e){this.value=e,this.notify()},e.prototype.getValue=function(){return this.value},e.prototype.forceNotify=function(){this.notify()},e.prototype.notify=function(){if(null!==this.value){var e=this.value;this.observers.forEach((function(t){return t(e)}))}},e}(),H=function(){return(H=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},Y=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],u=0,a=i.length;u<a;u++,o++)r[o]=i[u];return r},G=function(e){return e.name+";"+e.type},K=new S(G),J=function(e,t,n,r){var o,i,u=n.map((function(n){var o=H({},n),i=K.get(o);if(i)return i.attributeBufferInfo.attachToProgram(t),{key:o,value:i};var u=new k(e,t,n.name,n.type),a=r.filter((function(e){return e.type===u.getAttributeBufferType()})),c=a.length?z(u,a):X(u),s=c.element,f=c.dispose;return{key:o,value:{component:d(s,n.name),attributeBufferInfo:u,dispose:function(){u.deleteBuffer(),null==f||f()}}}}));return i=(o=u).map((function(e){return G(e.key)})),K.entriesStrKey().filter((function(e){return!i.includes(e[0])})).forEach((function(e){e[1].dispose(),K.deleteStrKey(e[0])})),o.forEach((function(e){K.has(e.key)||K.set(e.key,e.value)})),u.map((function(e){return e.value}))},q=function(e,t,n){switch(e){case A.FLOAT_VEC4:return Q(n,t);default:return W()}},W=function(){var e=document.createElement("div");return e.className="unsupported-error",e.innerText="Not supported attribute buffer",e},X=function(e){var t=new j((e.getAttributeBufferType(),[[0,0,0,1],[0,.5,0,1],[.9,0,0,1],[0,.5,0,1],[.7,0,0,1],[.7,.5,0,1]]));return t.attach((function(t){e.setValue(t)})),{element:q(e.getAttributeBufferType(),!0,t),dispose:function(){return t.detachAll()}}},z=function(e,t){var n=t.map((function(t){var n=q(e.getAttributeBufferType(),!1,t.value);return{id:C(),element:n,display:t.name,value:t.value}})),r=new j((e.getAttributeBufferType(),[[0,0,0,1],[0,.5,0,1],[.9,0,0,1],[0,.5,0,1],[.7,0,0,1],[.7,.5,0,1]]));r.attach((function(t){return e.setValue(t)}));var o=q(e.getAttributeBufferType(),!0,r),i=void 0;return{element:h("column-with-gap",Y([f(Y([l(o)],n),(function(t){null==i||i();var o=n.find((function(e){return e.id===t}));if(o){var u=function(t){return e.setValue(t)};o.value.attach(u),u(o.value.getValue()),i=function(){return o.value.detach(u)}}else r.forceNotify()})),o],n.map((function(e){return e.element})))),dispose:function(){null==i||i(),r.detachAll()}}},Q=function(e,t){var n=document.createElement("input");if(n.className="edit-input",n.disabled=!t,!t){e.attach((function(e){return n.value=JSON.stringify(e)}))}return n.value=JSON.stringify(e.getValue()),n.oninput=function(){try{var t=JSON.parse(n.value);if(Array.isArray(t))t.every((function(e){return!!Array.isArray(e)&&4===e.length}));else;e.setValue(t)}catch(e){console.log("this is not a json")}},n},Z=function(e){var t=document.createElement("canvas");t.className=e;var n,r,o=t.getContext("webgl");if(n=t,r=function(e){t.width=e.width,t.height=e.height},new ResizeObserver((function(e){var t=e.find((function(e){return e.target===n}));if(t){var o=t.target.getBoundingClientRect();r({x:o.x,y:o.y,width:o.width,height:o.height})}})).observe(n),!o)throw new Error("Unable to create webgl context");return[t,{context:o}]},$=acquireVsCodeApi(),ee=function(){function e(){var e=this;this.eventListeners=[],window.addEventListener("message",(function(t){e.eventListeners.forEach((function(e){return e(t.data)}))}))}return e.prototype.getShaderDocuments=function(){var e=this,t=C();return $.postMessage({type:"getShaderDocuments",id:t}),new Promise((function(n){var r=function(o){"getShaderDocuments"===o.type&&o.id===t&&(n(o.payload.files),e.removeListener(r))};e.eventListeners.push(r)}))},e.prototype.getDocumentText=function(e){var t=this,n=C();return $.postMessage({type:"getDocumentText",id:n,payload:{fileName:e}}),new Promise((function(e){var r=function(o){"getDocumentText"===o.type&&o.id===n&&(e(o.payload.text),t.removeListener(r))};t.eventListeners.push(r)}))},e.prototype.subscribeToDocumentSave=function(e,t){var n=this;$.postMessage({type:"subscribeToDocumentTextChange",payload:{fileName:e}});var r=function(n){"onDocumentTextChange"===n.type&&n.payload.filePath===e&&t(n.payload.text)};return this.eventListeners.push(r),function(){n.removeListener(r),$.postMessage({type:"unsubscribeToDocumentTextChange",payload:{fileName:e}})}},e.prototype.removeListener=function(e){R(this.eventListeners,e)},e}(),te=function(e){return[].concat(e,e,e,e)},ne=new Map([["cube",{display:"Cube",positions:[[-.5,-.5,.5,1],[.5,-.5,.5,1],[.5,.5,.5,1],[-.5,.5,.5,1],[-.5,-.5,-.5,1],[-.5,.5,-.5,1],[.5,.5,-.5,1],[.5,-.5,-.5,1],[-.5,.5,-.5,1],[-.5,.5,.5,1],[.5,.5,.5,1],[.5,.5,-.5,1],[-.5,-.5,-.5,1],[.5,-.5,-.5,1],[.5,-.5,.5,1],[-.5,-.5,.5,1],[.5,-.5,-.5,1],[.5,.5,-.5,1],[.5,.5,.5,1],[.5,-.5,.5,1],[-.5,-.5,-.5,1],[-.5,-.5,.5,1],[-.5,.5,.5,1],[-.5,.5,-.5,1]],colors:function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],u=0,a=i.length;u<a;u++,o++)r[o]=i[u];return r}(te([1,1,1,1]),te([1,0,0,1]),te([0,1,0,1]),te([0,0,1,1]),te([1,1,0,1]),te([1,0,1,1])),indices:[0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23]}]]);console.log(ne);var re=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function u(e){try{c(r.next(e))}catch(e){i(e)}}function a(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(u,a)}c((r=r.apply(e,t||[])).next())}))},oe=function(e,t){var n,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!(o=u.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=t.call(e,u)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};re(void 0,void 0,void 0,(function(){var e,t,n,r,u,a,c,f,l,m,v,y,g,x,E,w,S,C,_,I,B,F,N,R,k,U,H,Y,G,K;return oe(this,(function(q){var W,X,z;return e=new ee,t=document.getElementById("viewer"),n=h("viewer-options"),r=h("viewer-shader-options"),u=h("viewer-content shader-errors"),a=Z("viewer-content"),c=a[0],f=a[1],l=new Map([["positions",{name:"Binding - Mesh positions",type:A.FLOAT_VEC4,value:new j([])}],["normals",{name:"Binding - Mesh normals",type:A.FLOAT_VEC4,value:new j([])}]]),m={drawMode:"arrays"},t.appendChild(c),t.appendChild(u),t.appendChild(n),v=function(e){c.style.visibility="canvas"===e?"visible":"collapse",u.style.visibility="errors"===e?"visible":"collapse"},y=function(){e.getShaderDocuments().then((function(e){var t=e.map((function(e){return{id:e.filePath,display:e.fileName}}));F.setItems(t),k.setItems(t)}))},S=null,C=function(e){var t=ne.get(e).positions;l.get("positions").value.setValue(t)},_=function(){r.innerHTML="";var e=f.context;if(w&&E){var t=function(e,t,n){var r=M(e,e.VERTEX_SHADER,t),o=M(e,e.FRAGMENT_SHADER,n),i=void 0;b(r,"error")&&(i=P(r.error,1));var u=void 0;return b(o,"error")&&(u=P(o.error,1)),i||u?[i,u]:D(e,r,o)}(e,E,w);if(Array.isArray(t))v("errors"),u.innerText=function(e){var t=e[0],n=e[1],r=[];return t&&r.push("VERTEX SHADER:",t),n&&r.push("FRAGMENT SHADER:",n),r.join("\r\n")}(t);else{v("canvas");var n=t,i=function(e,t){for(var n=e.getProgramParameter(t,e.ACTIVE_UNIFORMS),r=[],o=0;o<n;++o){var i=e.getActiveUniform(t,o);r.push({name:i.name,type:i.type})}return r}(e,n),a=function(e,t){for(var n=e.getProgramParameter(t,e.ACTIVE_ATTRIBUTES),r=[],o=0;o<n;++o){var i=e.getActiveAttrib(t,o);r.push({name:i.name,type:i.type})}return r}(e,n),c=function(e,t,n){var r=n.map((function(n){var r=V({},n),o=O.get(r);if(o)return o.uniformInfo.attachToProgram(t),{key:r,value:o};var i=new T(e,t,n.name,n.type);return{key:r,value:{component:d(L(i),n.name),uniformInfo:i}}}));return O.clear(),r.forEach((function(e){return O.set(e.key,e.value)})),r.map((function(e){return e.value}))}(e,n,i);c.forEach((function(e){return r.appendChild(e.component)}));var s=J(e,n,a,Array.from(l.values()));s.forEach((function(e){return r.appendChild(e.component)}));var p=c.map((function(e){return e.uniformInfo})),h=s.map((function(e){return e.attributeBufferInfo})),y=new o(e);y.setValue([0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23]),null!==S&&cancelAnimationFrame(S);var g=function(){!function(e,t,n,r){e.useProgram(t),e.viewport(0,0,e.canvas.width,e.canvas.height),e.clearColor(0,0,0,0),e.clear(e.COLOR_BUFFER_BIT),n.uniformInfos.forEach((function(e){return e.setUniform()})),n.attributeBufferInfos.forEach((function(e){return e.setAttributeBuffer()}));var o=Math.min.apply(Math,n.attributeBufferInfos.map((function(e){return e.getNumElements()}))),i=e.TRIANGLES;console.log("drawing",o),"arrays"===r.drawMode?e.drawArrays(i,0,o):(n.indexBufferInfo.setIndexBuffer(),e.drawElements(i,o,e.UNSIGNED_SHORT,0))}(e,n,{uniformInfos:p,attributeBufferInfos:h,indexBufferInfo:y},m),S=requestAnimationFrame(g)};g()}}else v("none")},n.appendChild(h("viewer-shaders-title",[(W=i,X="",z=document.createElement("h3"),z.textContent=W,z.className=X+" section-title",{element:z}).element,p("Sync","viewer-refresh-button",y).element])),I=s((function(t){return re(void 0,void 0,void 0,(function(){var n;return oe(this,(function(r){switch(r.label){case 0:return null==g||g(),t&&(g=e.subscribeToDocumentSave(t.id,(function(e){E=e,_()}))),t?[4,e.getDocumentText(t.id)]:[3,2];case 1:return n=r.sent(),[3,3];case 2:n="",r.label=3;case 3:return E=n,_(),[2]}}))}))})),B=I[0],F=I[1],n.appendChild(d(B,"Vertex Shader")),N=s((function(t){return re(void 0,void 0,void 0,(function(){var n;return oe(this,(function(r){switch(r.label){case 0:return null==x||x(),t&&(x=e.subscribeToDocumentSave(t.id,(function(e){w=e,_()}))),t?[4,e.getDocumentText(t.id)]:[3,2];case 1:return n=r.sent(),[3,3];case 2:n="",r.label=3;case 3:return w=n,_(),[2]}}))}))})),R=N[0],k=N[1],n.appendChild(d(R,"Fragment Shader")),U=s((function(e){return e&&C(e.id)}),void 0,{emptyItem:!1}),H=U[0],(Y=U[1]).setItems(Array.from(ne.entries()).map((function(e){return{id:e[0],display:e[1].display}}))),Y.setSelectedItemByIndex(0),n.appendChild(d(H,"Mesh")),G=s((function(e){return e&&(m.drawMode=e.id)}),void 0,{emptyItem:!1}),K=G[0],G[1].setItems([{id:"arrays",display:"Arrays"},{id:"elements",display:"Elements"}]),n.appendChild(d(K,"Draw mode")),n.appendChild(r),y(),[2]}))}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,