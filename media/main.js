!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t),n.d(t,"createUniformBindings",(function(){return de}));var r,o=function(){return(o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},i=function(e){return Math.min(Math.max(e,1),10)},u=function(){function e(e,t,n){var r=this;this.element=e,this.positionProvider=t,this.onPositionChange=n,this.pointerPosition={x:0,y:0},this.eventListeners=new Map,this.isMoving=!1,this.dispatchAction=function(e){var t=function(e,t){switch(t.type){case"orbitRotate":return o(o({},e),{latitude:(r=e.latitude+t.deltaLatitude,Math.min(Math.max(r,-Math.PI/2+.1),Math.PI/2-.1)),longitude:(n=e.longitude+t.deltaLongitude,n>Math.PI?n-2*Math.PI:n<-Math.PI?n+2*Math.PI:n)});case"zoomInAt":return o(o({},e),{radius:i(e.radius-.1)});case"zoomOutAt":return o(o({},e),{radius:i(e.radius+.1)});default:return e}var n,r}(r.positionProvider(),e);r.onPositionChange(t)},this.onMouseDown=function(e){0===e.button&&(r.pointerPosition={x:e.offsetX,y:e.offsetY},r.isMoving=!0)},this.onMouseMove=function(e){if(r.isMoving){r.dispatchAction({type:"orbitRotate",deltaLongitude:.01*-(e.offsetX-r.pointerPosition.x),deltaLatitude:.01*(e.offsetY-r.pointerPosition.y)})}r.pointerPosition={x:e.offsetX,y:e.offsetY}},this.onMouseUp=function(){r.isMoving=!1},this.onMouseLeave=function(){r.isMoving=!1},this.onWheel=function(e){var t=e.deltaY<0?"zoomInAt":"zoomOutAt";r.dispatchAction({type:t})},this.registerEvent("mousedown",this.onMouseDown),this.registerEvent("mousemove",this.onMouseMove),this.registerEvent("mouseup",this.onMouseUp),this.registerEvent("mouseleave",this.onMouseLeave),this.registerEvent("wheel",this.onWheel)}return e.prototype.dispose=function(){var e=this;this.eventListeners.forEach((function(t,n){return e.element.removeEventListener(n,t)}))},e.prototype.registerEvent=function(e,t){this.element.addEventListener(e,t),this.eventListeners.set(e,t)},e}(),a=acquireVsCodeApi(),c={vertexFilePath:null,fragmentFilePath:null,drawMode:"elements"},s=function(){var e;return null!==(e=a.getState())&&void 0!==e?e:c},f=function(e){return a.setState(Object.assign(s(),e))},l=function(){function e(e){this.context=e,this.count=0,this.buffer=e.createBuffer()}return e.prototype.setValue=function(e){this.count=e.length,this.context.bindBuffer(this.context.ELEMENT_ARRAY_BUFFER,this.buffer),this.context.bufferData(this.context.ELEMENT_ARRAY_BUFFER,new Uint16Array(e),this.context.STATIC_DRAW)},e.prototype.setIndexBuffer=function(){this.context.bindBuffer(this.context.ELEMENT_ARRAY_BUFFER,this.buffer)},e.prototype.getCount=function(){return this.count},e.prototype.deleteBuffer=function(){this.context.deleteBuffer(this.buffer),this.buffer=null},e}(),h="SHADERS",p=function(){return(p=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},d=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],u=0,a=i.length;u<a;u++,o++)r[o]=i[u];return r},v={emptyItem:!0},m=function(e,t,n){var r=p(p({},v),n),o=document.createElement("select");o.className="dropdown-base "+t;var i=null,u=[],a=function(t){e(i=t)};o.onchange=function(){var e=u.find((function(e){return e.item.id===o.value}));e.item.id?a(e.item):a(null)};var c=function(e){u.forEach((function(t){t.item.id===e?(t.element.selected=!0,a(t.item)):t.element.selected=!1}))};return[o,{setItems:function(e){o.innerHTML="",u.length=0,(r.emptyItem?d([{id:"",display:""}],e):d(e)).forEach((function(e){var t=document.createElement("option");t.value=e.id,t.textContent=e.display,t.selected=e.id===(null==i?void 0:i.id),o.appendChild(t),u.push({element:t,item:e})}))},getItems:function(){return u.map((function(e){return e.item}))},setSelectedItemById:c,setSelectedItemByIndex:function(e){return c(u[e].item.id)},getSelectedItem:function(){return i},clearSelection:function(){u.forEach((function(e){return e.element.selected=!1})),a(null)}}]},y=function(e,t){var n=m((function(n){n?(e.forEach((function(e){return e.element.classList.add("hidden")})),e.find((function(e){return e.id===n.id})).element.classList.remove("hidden"),null==t||t(n.id)):null==t||t(null)}),"",{emptyItem:!1}),r=n[0],o=n[1];return o.setItems(e.map((function(e){return{id:e.id,display:e.display}}))),o.setSelectedItemByIndex(0),r},g=function(e,t,n){var r=document.createElement("button");return r.onclick=n,r.className=t,r.textContent=e,{element:r}},b=function(e,t,n){var r=document.createElement("div");r.className=(null!=n?n:"")+" options-wrapper";var o=document.createElement("label");return o.className="options-label",o.textContent=t,e.className=e.className+" options-content",r.appendChild(o),r.appendChild(e),r},x=function(e,t){var n=document.createElement("div");return n.className=e,null==t||t.forEach((function(e){return n.appendChild(e)})),n},A=function(e,t){return e.hasOwnProperty(t)},E=function(e){throw new Error("Unhandled union member: "+JSON.stringify(e))},T=function(e,t,n){var r=document.createElement("div");r.className="edit-input-grid";for(var o=[],i=function(){return o.map((function(e){return e.value}))},u=0;u<e;u++){var a=document.createElement("div");a.className="edit-input-row";for(var c=function(e){var r=u*t+e,c=document.createElement("input"),s={element:c,value:0};c.className="edit-input",c.type="number",c.value=(0).toString(),c.disabled=!n,c.oninput=function(){o[r].value=Number(c.value),console.log("calling on change"),null==n||n(i())},o.push(s),a.appendChild(c)},s=0;s<t;s++)c(s);r.appendChild(a)}return[r,{setValues:function(e){return o.forEach((function(t,n){t.value=e[n],t.element.value=t.value.toString()}))},getValues:i,setReadonly:function(e){return o.forEach((function(t){return t.element.readOnly=e}))}}]},w=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],u=0,a=i.length;u<a;u++,o++)r[o]=i[u];return r};!function(e){e[e.FLOAT_VEC2=35664]="FLOAT_VEC2",e[e.FLOAT_VEC3=35665]="FLOAT_VEC3",e[e.FLOAT_VEC4=35666]="FLOAT_VEC4",e[e.FLOAT_MAT4=35676]="FLOAT_MAT4"}(r||(r={}));var M,S=function(){function e(e,t,n,r){this.context=e,this.name=n,this.type=r,this.attachToProgram(t)}return e.prototype.attachToProgram=function(e){var t=this.context.getUniformLocation(e,this.name);this.setter=I(this.type,this.context,t)},e.prototype.setValue=function(e){this.value=e},e.prototype.setUniform=function(){null!==this.value&&this.setter(this.value)},e.prototype.getUniformType=function(){return this.type},e.prototype.getUniformName=function(){return this.name},e.prototype.dispose=function(){},e}(),I=function(e,t,n){switch(e){case r.FLOAT_VEC2:return function(e){return t.uniform2f.apply(t,w([n],e))};case r.FLOAT_VEC3:return function(e){return t.uniform3f.apply(t,w([n],e))};case r.FLOAT_VEC4:return function(e){return t.uniform4f.apply(t,w([n],e))};case r.FLOAT_MAT4:return function(e){return t.uniformMatrix4fv(n,!1,e)};default:E(e)}},L=function(){function e(e){this.keySelector=e,this.map=new Map}return e.prototype.get=function(e){return this.map.get(this.keySelector(e))},e.prototype.set=function(e,t){this.map.set(this.keySelector(e),t)},e.prototype.has=function(e){return this.map.has(this.keySelector(e))},e.prototype.entriesStrKey=function(){return Array.from(this.map.entries())},e.prototype.deleteStrKey=function(e){this.map.delete(e)},e.prototype.delete=function(e){this.map.delete(this.keySelector(e))},e.prototype.clear=function(){this.map.clear()},e}(),C=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){var t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}))},F=function(e,t){var n=e.indexOf(t);n>-1&&e.splice(n,1)},P=function(e,t){return e.substring(0,e.length-t)},O=function(){function e(e){this.value=e,this.observers=[]}return e.prototype.attach=function(e){this.observers.push(e)},e.prototype.detach=function(e){F(this.observers,e)},e.prototype.detachAll=function(){this.observers.length=0},e.prototype.setValue=function(e){this.value=e,this.notify()},e.prototype.getValue=function(){return this.value},e.prototype.forceNotify=function(){this.notify()},e.prototype.notify=function(){if(null!==this.value){var e=this.value;this.observers.forEach((function(t){return t(e)}))}},e}(),_=function(){var e=document.createElement("div");return e.className="unsupported-error",e.innerText="Not supported uniform",e},V=function(){return(V=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},B=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],u=0,a=i.length;u<a;u++,o++)r[o]=i[u];return r},R=function(e){return e.name+";"+e.type},N=new L(R),D=function(e,t,n,r){var o,i,u=n.map((function(n){var o=V({},n),i=N.get(o);if(i)return i.uniformInfo.attachToProgram(t),{key:o,value:i};var u=new S(e,t,n.name,n.type),a=r.filter((function(e){return e.type===u.getUniformType()})),c=function(e){return u.setValue(e)},s=a.length?j(B([U(u)],k(a,u)),c):H(u,c),f=s.element,l=s.dispose;return{key:o,value:{component:b(f,n.name),uniformInfo:u,dispose:function(){null==l||l()}}}}));return i=(o=u).map((function(e){return R(e.key)})),N.entriesStrKey().filter((function(e){return!i.includes(e[0])})).forEach((function(e){N.deleteStrKey(e[0])})),o.forEach((function(e){N.has(e.key)||N.set(e.key,e.value)})),u.map((function(e){return e.value}))},U=function(e){return V({id:"custom",display:"Custom"},H(e))},k=function(e,t){return e.map((function(e){var n=Y(t.getUniformType(),!1,e.value);return{id:C(),element:n,display:e.name,value:e.value}}))},j=function(e,t){var n=null;return{element:x("column-with-gap",B([y(e,(function(r){null==n||n();var o=e.find((function(e){return e.id===r})),i=function(e){return t(e)};o.value.attach(i),i(o.value.getValue()),n=function(){return o.value.detach(i)}}))],e.map((function(e){return e.element})))),dispose:function(){return null==n?void 0:n()}}},H=function(e,t){var n=function(e){switch(e){case r.FLOAT_VEC2:return[1,1];case r.FLOAT_VEC3:return[1,1,1];case r.FLOAT_VEC4:return[1,1,1,1];case r.FLOAT_MAT4:return[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];default:E(e)}}(e.getUniformType()),o=new O(n);return t&&(o.attach((function(e){return t(e)})),t(n)),{element:Y(e.getUniformType(),!0,o),value:o,dispose:function(){return o.detachAll()}}},Y=function(e,t,n){switch(e){case r.FLOAT_VEC2:return z(2,n,t);case r.FLOAT_VEC3:return z(3,n,t);case r.FLOAT_VEC4:return z(4,n,t);case r.FLOAT_MAT4:return K(4,n,t);default:return _()}},z=function(e,t,n){var r=T(1,e,(function(e){t.setValue(e)})),o=r[0],i=r[1];if(i.setValues(t.getValue()),!n){t.attach((function(e){return i.setValues(e)}))}return o},K=function(e,t,n){var r=function(e,t){return T(e,e,t)}(e,n?function(e){t.setValue(e)}:void 0),o=r[0],i=r[1];if(i.setValues(t.getValue()),!n){t.attach((function(e){return i.setValues(e)}))}return o},G=function(e,t,n){var r=e.createShader(t);if(e.shaderSource(r,n),e.compileShader(r),e.getShaderParameter(r,e.COMPILE_STATUS))return r;var o=e.getShaderInfoLog(r);return e.deleteShader(r),{error:o}},W=function(e,t,n){var r=e.createProgram();if(e.attachShader(r,t),e.attachShader(r,n),e.linkProgram(r),e.getProgramParameter(r,e.LINK_STATUS))return r;throw e.deleteProgram(r),new Error("Creating program failed: "+e.getProgramInfoLog(r))};!function(e){e[e.FLOAT_VEC3=35665]="FLOAT_VEC3",e[e.FLOAT_VEC4=35666]="FLOAT_VEC4"}(M||(M={}));var X=function(){function e(e,t,n,r){this.context=e,this.name=n,this.type=r,this.count=0,this.attachToProgram(t),this.buffer=e.createBuffer()}return e.prototype.attachToProgram=function(e){this.location=this.context.getAttribLocation(e,this.name)},e.prototype.setValue=function(e){this.count=e.length,this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffer);var t=[].concat.apply([],e);this.context.bufferData(this.context.ARRAY_BUFFER,new Float32Array(t),this.context.STATIC_DRAW)},e.prototype.setAttributeBuffer=function(){if(null!==this.buffer){this.context.enableVertexAttribArray(this.location),this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffer);var e=J(this.type),t=this.context.FLOAT;this.context.vertexAttribPointer(this.location,e,t,!1,0,0)}},e.prototype.getAttributeBufferType=function(){return this.type},e.prototype.getCount=function(){return this.count},e.prototype.deleteBuffer=function(){this.context.deleteBuffer(this.buffer),this.buffer=null},e}(),J=function(e){switch(e){case M.FLOAT_VEC3:return 3;case M.FLOAT_VEC4:return 4;default:E(e)}},q=function(){return(q=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},Q=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],u=0,a=i.length;u<a;u++,o++)r[o]=i[u];return r},Z=function(e){return e.name+";"+e.type},$=new L(Z),ee=function(e,t,n,r){var o,i,u=n.map((function(n){var o=q({},n),i=$.get(o);if(i)return i.attributeBufferInfo.attachToProgram(t),{key:o,value:i};var u=new X(e,t,n.name,n.type),a=r.filter((function(e){return e.type===u.getAttributeBufferType()})),c=function(e){return u.setValue(e)},s=a.length?re(Q([te(u)],ne(a,u)),c):oe(u,c),f=s.element,l=s.dispose;return{key:o,value:{component:b(f,n.name),attributeBufferInfo:u,dispose:function(){u.deleteBuffer(),null==l||l()}}}}));return i=(o=u).map((function(e){return Z(e.key)})),$.entriesStrKey().filter((function(e){return!i.includes(e[0])})).forEach((function(e){e[1].dispose(),$.deleteStrKey(e[0])})),o.forEach((function(e){$.has(e.key)||$.set(e.key,e.value)})),u.map((function(e){return e.value}))},te=function(e){return q({id:"custom",display:"Custom"},oe(e))},ne=function(e,t){return e.map((function(e){var n=ie(t.getAttributeBufferType(),!1,e.value);return{id:C(),element:n,display:e.name,value:e.value}}))},re=function(e,t){var n=null;return{element:x("column-with-gap",Q([y(e,(function(r){null==n||n();var o=e.find((function(e){return e.id===r})),i=function(e){return t(e)};o.value.attach(i),i(o.value.getValue()),n=function(){return o.value.detach(i)}}))],e.map((function(e){return e.element})))),dispose:function(){return null==n?void 0:n()}}},oe=function(e,t){var n=(e.getAttributeBufferType(),[[0,0,0,1],[0,.5,0,1],[.9,0,0,1],[0,.5,0,1],[.7,0,0,1],[.7,.5,0,1]]),r=new O(n);return t&&(r.attach((function(e){return t(e)})),t(n)),{element:ie(e.getAttributeBufferType(),!0,r),value:r,dispose:function(){return r.detachAll()}}},ie=function(e,t,n){switch(e){case M.FLOAT_VEC4:return ue(4,n,t);default:return _()}},ue=function(e,t,n){var r=document.createElement("input");if(r.className="edit-input",r.disabled=!n,!n){t.attach((function(e){return r.value=JSON.stringify(e)}))}return r.value=JSON.stringify(t.getValue()),r.oninput=function(){try{var e=JSON.parse(r.value);if(Array.isArray(e))e.every((function(e){return!!Array.isArray(e)&&4===e.length}));else;t.setValue(e)}catch(e){console.log("this is not a json")}},r},ae=function(e){var t=document.createElement("canvas");t.className=e;var n,r,o=t.getContext("webgl");if(n=t,r=function(e){t.width=e.width,t.height=e.height},new ResizeObserver((function(e){var t=e.find((function(e){return e.target===n}));if(t){var o=t.target.getBoundingClientRect();r({x:o.x,y:o.y,width:o.width,height:o.height})}})).observe(n),!o)throw new Error("Unable to create webgl context");return[t,{context:o}]},ce=function(){function e(){var e=this;this.eventListeners=[],window.addEventListener("message",(function(t){e.eventListeners.forEach((function(e){return e(t.data)}))}))}return e.prototype.getShaderDocuments=function(){var e=this,t=C();return a.postMessage({type:"getShaderDocuments",id:t}),new Promise((function(n){var r=function(o){"getShaderDocuments"===o.type&&o.id===t&&(n(o.payload.files),e.removeListener(r))};e.eventListeners.push(r)}))},e.prototype.getDocumentText=function(e){var t=this,n=C();return a.postMessage({type:"getDocumentText",id:n,payload:{fileName:e}}),new Promise((function(e){var r=function(o){"getDocumentText"===o.type&&o.id===n&&(e(o.payload.text),t.removeListener(r))};t.eventListeners.push(r)}))},e.prototype.subscribeToDocumentSave=function(e,t){var n=this;a.postMessage({type:"subscribeToDocumentTextChange",payload:{fileName:e}});var r=function(n){"onDocumentTextChange"===n.type&&n.payload.filePath===e&&t(n.payload.text)};return this.eventListeners.push(r),function(){n.removeListener(r),a.postMessage({type:"unsubscribeToDocumentTextChange",payload:{fileName:e}})}},e.prototype.removeListener=function(e){F(this.eventListeners,e)},e}(),se=function(e){return[].concat(e,e,e,e)},fe=new Map([["cube",{display:"Cube",positions:[[-.5,-.5,.5,1],[.5,-.5,.5,1],[.5,.5,.5,1],[-.5,.5,.5,1],[-.5,-.5,-.5,1],[-.5,.5,-.5,1],[.5,.5,-.5,1],[.5,-.5,-.5,1],[-.5,.5,-.5,1],[-.5,.5,.5,1],[.5,.5,.5,1],[.5,.5,-.5,1],[-.5,-.5,-.5,1],[.5,-.5,-.5,1],[.5,-.5,.5,1],[-.5,-.5,.5,1],[.5,-.5,-.5,1],[.5,.5,-.5,1],[.5,.5,.5,1],[.5,-.5,.5,1],[-.5,-.5,-.5,1],[-.5,-.5,.5,1],[-.5,.5,.5,1],[-.5,.5,-.5,1]],colors:function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],u=0,a=i.length;u<a;u++,o++)r[o]=i[u];return r}(se([1,1,1,1]),se([1,0,0,1]),se([0,1,0,1]),se([0,0,1,1]),se([1,1,0,1]),se([1,0,1,1])),indices:[0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23]}]]);console.log(fe);var le;!function(e){e.create=function(){var e=new Float32Array(16);return e[0]=1,e[5]=1,e[10]=1,e[15]=1,e},e.perspective=function(e,t,n,r,o){var i,u=1/Math.tan(t/2);return e[0]=u/n,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=u,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,null!=o&&o!==1/0?(i=1/(r-o),e[10]=(o+r)*i,e[14]=2*o*r*i):(e[10]=-1,e[14]=-2*r),e},e.lookAt=function(e,t,n,r){var o,i,u,a,c,s,f,l,h,p,d=t[0],v=t[1],m=t[2],y=r[0],g=r[1],b=r[2],x=n[0],A=n[1],E=n[2];return Math.abs(d-x)<1e-6&&Math.abs(v-A)<1e-6&&Math.abs(m-E)<1e-6?function(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}(e):(f=d-x,l=v-A,h=m-E,o=g*(h*=p=1/Math.hypot(f,l,h))-b*(l*=p),i=b*(f*=p)-y*h,u=y*l-g*f,(p=Math.hypot(o,i,u))?(o*=p=1/p,i*=p,u*=p):(o=0,i=0,u=0),a=l*u-h*i,c=h*o-f*u,s=f*i-l*o,(p=Math.hypot(a,c,s))?(a*=p=1/p,c*=p,s*=p):(a=0,c=0,s=0),e[0]=o,e[1]=a,e[2]=f,e[3]=0,e[4]=i,e[5]=c,e[6]=l,e[7]=0,e[8]=u,e[9]=s,e[10]=h,e[11]=0,e[12]=-(o*d+i*v+u*m),e[13]=-(a*d+c*v+s*m),e[14]=-(f*d+l*v+h*m),e[15]=1,e)},e.multiply=function(e,t,n){var r=t[0],o=t[1],i=t[2],u=t[3],a=t[4],c=t[5],s=t[6],f=t[7],l=t[8],h=t[9],p=t[10],d=t[11],v=t[12],m=t[13],y=t[14],g=t[15],b=n[0],x=n[1],A=n[2],E=n[3];return e[0]=b*r+x*a+A*l+E*v,e[1]=b*o+x*c+A*h+E*m,e[2]=b*i+x*s+A*p+E*y,e[3]=b*u+x*f+A*d+E*g,b=n[4],x=n[5],A=n[6],E=n[7],e[4]=b*r+x*a+A*l+E*v,e[5]=b*o+x*c+A*h+E*m,e[6]=b*i+x*s+A*p+E*y,e[7]=b*u+x*f+A*d+E*g,b=n[8],x=n[9],A=n[10],E=n[11],e[8]=b*r+x*a+A*l+E*v,e[9]=b*o+x*c+A*h+E*m,e[10]=b*i+x*s+A*p+E*y,e[11]=b*u+x*f+A*d+E*g,b=n[12],x=n[13],A=n[14],E=n[15],e[12]=b*r+x*a+A*l+E*v,e[13]=b*o+x*c+A*h+E*m,e[14]=b*i+x*s+A*p+E*y,e[15]=b*u+x*f+A*d+E*g,e}}(le||(le={}));var he=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function u(e){try{c(r.next(e))}catch(e){i(e)}}function a(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(u,a)}c((r=r.apply(e,t||[])).next())}))},pe=function(e,t){var n,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!(o=u.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=t.call(e,u)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},de=function(){return new Map([["localToProjected",{name:"Binding - LocalToProjected",type:r.FLOAT_MAT4,value:new O([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1])}]])};he(void 0,void 0,void 0,(function(){var e,t,n,r,o,i,a,c,p,d,v,y,E,T,w,S,I,L,C,F,_,V,B,R,N,U,k,j,H,Y,z,K,X,J;return pe(this,(function(q){var Q,Z,$;return e=new ce,t=s(),n=document.getElementById("viewer"),r=x("viewer-options"),o=x("viewer-shader-options"),i=x("viewer-content shader-errors"),a=ae("viewer-content"),c=a[0],p=a[1],d=new Map([["positions",{name:"Binding - Mesh positions",type:M.FLOAT_VEC4,value:new O([])}],["colors",{name:"Binding - Mesh colors",type:M.FLOAT_VEC4,value:new O([])}]]),v=de(),y={drawMode:"arrays"},E={longitude:1,latitude:1,radius:2},new u(c,(function(){return E}),(function(e){E=e;var t=45*Math.PI/180,n=c.clientWidth/c.clientHeight,r=le.create();le.perspective(r,t,n,.1,100);var o=le.create(),i=function(e){var t=e.radius*Math.sin(e.latitude),n=e.radius*Math.cos(e.latitude),r=n*Math.cos(e.longitude);return{x:n*Math.sin(e.longitude),y:t,z:r}}(E);le.lookAt(o,[i.x,i.y,i.z],[0,0,0],[0,1,0]);var u=le.create();le.multiply(u,r,o),v.get("localToProjected").value.setValue(u)})),n.appendChild(c),n.appendChild(i),n.appendChild(r),T=function(e){c.style.visibility="canvas"===e?"visible":"collapse",i.style.visibility="errors"===e?"visible":"collapse"},w=function(){e.getShaderDocuments().then((function(e){var n=e.map((function(e){return{id:e.filePath,display:e.fileName}}));N.setItems(n),t.vertexFilePath&&n.some((function(e){return e.id===t.vertexFilePath}))&&N.setSelectedItemById(t.vertexFilePath),j.setItems(n),t.fragmentFilePath&&n.some((function(e){return e.id===t.fragmentFilePath}))&&j.setSelectedItemById(t.fragmentFilePath)}))},F=null,_=function(e){var t=fe.get(e),n=t.positions,r=t.colors;d.get("positions").value.setValue(n),d.get("colors").value.setValue(r)},V=function(){o.innerHTML="";var e=p.context;if(C&&L){var t=function(e,t,n){var r=G(e,e.VERTEX_SHADER,t),o=G(e,e.FRAGMENT_SHADER,n),i=void 0;A(r,"error")&&(i=P(r.error,1));var u=void 0;return A(o,"error")&&(u=P(o.error,1)),i||u?[i,u]:W(e,r,o)}(e,L,C);if(Array.isArray(t))T("errors"),i.innerText=function(e){var t=e[0],n=e[1],r=[];return t&&r.push("VERTEX SHADER:",t),n&&r.push("FRAGMENT SHADER:",n),r.join("\r\n")}(t);else{T("canvas");var n=t,r=function(e,t){for(var n=e.getProgramParameter(t,e.ACTIVE_UNIFORMS),r=[],o=0;o<n;++o){var i=e.getActiveUniform(t,o);r.push({name:i.name,type:i.type})}return r}(e,n),u=function(e,t){for(var n=e.getProgramParameter(t,e.ACTIVE_ATTRIBUTES),r=[],o=0;o<n;++o){var i=e.getActiveAttrib(t,o);r.push({name:i.name,type:i.type})}return r}(e,n),a=D(e,n,r,Array.from(v.values()));a.forEach((function(e){return o.appendChild(e.component)}));var c=ee(e,n,u,Array.from(d.values()));c.forEach((function(e){return o.appendChild(e.component)}));var s=a.map((function(e){return e.uniformInfo})),f=c.map((function(e){return e.attributeBufferInfo})),h=new l(e);h.setValue([0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23]),null!==F&&cancelAnimationFrame(F);var m=function(){!function(e,t,n,r){e.useProgram(t),e.viewport(0,0,e.canvas.width,e.canvas.height),e.clearColor(0,0,0,1),e.clearDepth(1),e.enable(e.DEPTH_TEST),e.depthFunc(e.LEQUAL),e.clear(e.COLOR_BUFFER_BIT|e.DEPTH_BUFFER_BIT),n.uniformInfos.forEach((function(e){return e.setUniform()})),n.attributeBufferInfos.forEach((function(e){return e.setAttributeBuffer()}));var o=e.TRIANGLES;if("arrays"===r.drawMode){var i=Math.min.apply(Math,n.attributeBufferInfos.map((function(e){return e.getCount()})));e.drawArrays(o,0,i)}else n.indexBufferInfo.setIndexBuffer(),e.drawElements(o,n.indexBufferInfo.getCount(),e.UNSIGNED_SHORT,0)}(e,n,{uniformInfos:s,attributeBufferInfos:f,indexBufferInfo:h},y),F=requestAnimationFrame(m)};m()}}else T("none")},r.appendChild(x("viewer-shaders-title",[(Q=h,Z="",$=document.createElement("h3"),$.textContent=Q,$.className=Z+" section-title",{element:$}).element,g("Sync","viewer-refresh-button",w).element])),B=m((function(t){return he(void 0,void 0,void 0,(function(){var n;return pe(this,(function(r){switch(r.label){case 0:return null==S||S(),t&&(S=e.subscribeToDocumentSave(t.id,(function(e){L=e,V()}))),t?[4,e.getDocumentText(t.id)]:[3,2];case 1:return n=r.sent(),[3,3];case 2:n="",r.label=3;case 3:return L=n,f({vertexFilePath:t?t.id:null}),V(),[2]}}))}))})),R=B[0],(N=B[1]).setSelectedItemById(t.vertexFilePath),r.appendChild(b(R,"Vertex Shader")),U=m((function(t){return he(void 0,void 0,void 0,(function(){var n;return pe(this,(function(r){switch(r.label){case 0:return null==I||I(),t&&(I=e.subscribeToDocumentSave(t.id,(function(e){C=e,V()}))),t?[4,e.getDocumentText(t.id)]:[3,2];case 1:return n=r.sent(),[3,3];case 2:n="",r.label=3;case 3:return C=n,f({fragmentFilePath:t?t.id:null}),V(),[2]}}))}))})),k=U[0],(j=U[1]).setSelectedItemById(t.fragmentFilePath),r.appendChild(b(k,"Fragment Shader")),H=m((function(e){return e&&_(e.id)}),void 0,{emptyItem:!1}),Y=H[0],(z=H[1]).setItems(Array.from(fe.entries()).map((function(e){return{id:e[0],display:e[1].display}}))),z.setSelectedItemByIndex(0),r.appendChild(b(Y,"Mesh")),K=m((function(e){e&&(y.drawMode=e.id,f({drawMode:e.id}))}),void 0,{emptyItem:!1}),X=K[0],(J=K[1]).setItems([{id:"arrays",display:"Arrays"},{id:"elements",display:"Elements"}]),J.setSelectedItemById(t.drawMode),r.appendChild(b(X,"Draw mode")),r.appendChild(o),w(),[2]}))}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,