!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=34)}([function(e,t,n){"use strict";e.exports=n(35)},function(e,t,n){"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";n.r(t),n.d(t,"Provider",(function(){return c})),n.d(t,"connectAdvanced",(function(){return E})),n.d(t,"ReactReduxContext",(function(){return a})),n.d(t,"connect",(function(){return B})),n.d(t,"batch",(function(){return G.unstable_batchedUpdates})),n.d(t,"useDispatch",(function(){return q})),n.d(t,"createDispatchHook",(function(){return $})),n.d(t,"useSelector",(function(){return X})),n.d(t,"createSelectorHook",(function(){return K})),n.d(t,"useStore",(function(){return H})),n.d(t,"createStoreHook",(function(){return W})),n.d(t,"shallowEqual",(function(){return k}));var r=n(0),o=n.n(r),a=(n(41),o.a.createContext(null));var i=function(e){e()},u={notify:function(){}};function l(){var e=i,t=null,n=null;return{clear:function(){t=null,n=null},notify:function(){e((function(){for(var e=t;e;)e.callback(),e=e.next}))},get:function(){for(var e=[],n=t;n;)e.push(n),n=n.next;return e},subscribe:function(e){var r=!0,o=n={callback:e,next:null,prev:n};return o.prev?o.prev.next=o:t=o,function(){r&&null!==t&&(r=!1,o.next?o.next.prev=o.prev:n=o.prev,o.prev?o.prev.next=o.next:t=o.next)}}}}var s=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=u,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=l())},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=u)},e}();var c=function(e){var t=e.store,n=e.context,i=e.children,u=Object(r.useMemo)((function(){var e=new s(t);return e.onStateChange=e.notifyNestedSubs,{store:t,subscription:e}}),[t]),l=Object(r.useMemo)((function(){return t.getState()}),[t]);Object(r.useEffect)((function(){var e=u.subscription;return e.trySubscribe(),l!==t.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[u,l]);var c=n||a;return o.a.createElement(c.Provider,{value:u},i)},f=n(1),d=n(2),p=n(18),h=n.n(p),m=n(16),v="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?r.useLayoutEffect:r.useEffect,g=[],y=[null,null];function b(e,t){var n=e[1];return[t.payload,n+1]}function w(e,t,n){v((function(){return e.apply(void 0,t)}),n)}function _(e,t,n,r,o,a,i){e.current=r,t.current=o,n.current=!1,a.current&&(a.current=null,i())}function S(e,t,n,r,o,a,i,u,l,s){if(e){var c=!1,f=null,d=function(){if(!c){var e,n,d=t.getState();try{e=r(d,o.current)}catch(e){n=e,f=e}n||(f=null),e===a.current?i.current||l():(a.current=e,u.current=e,i.current=!0,s({type:"STORE_UPDATED",payload:{error:n}}))}};n.onStateChange=d,n.trySubscribe(),d();return function(){if(c=!0,n.tryUnsubscribe(),n.onStateChange=null,f)throw f}}}var x=function(){return[null,0]};function E(e,t){void 0===t&&(t={});var n=t,i=n.getDisplayName,u=void 0===i?function(e){return"ConnectAdvanced("+e+")"}:i,l=n.methodName,c=void 0===l?"connectAdvanced":l,p=n.renderCountProp,v=void 0===p?void 0:p,E=n.shouldHandleStateChanges,O=void 0===E||E,k=n.storeKey,C=void 0===k?"store":k,P=(n.withRef,n.forwardRef),M=void 0!==P&&P,I=n.context,T=void 0===I?a:I,R=Object(d.a)(n,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"]),N=T;return function(t){var n=t.displayName||t.name||"Component",a=u(n),i=Object(f.a)({},R,{getDisplayName:u,methodName:c,renderCountProp:v,shouldHandleStateChanges:O,storeKey:C,displayName:a,wrappedComponentName:n,WrappedComponent:t}),l=R.pure;var p=l?r.useMemo:function(e){return e()};function E(n){var a=Object(r.useMemo)((function(){var e=n.reactReduxForwardedRef,t=Object(d.a)(n,["reactReduxForwardedRef"]);return[n.context,e,t]}),[n]),u=a[0],l=a[1],c=a[2],h=Object(r.useMemo)((function(){return u&&u.Consumer&&Object(m.isContextConsumer)(o.a.createElement(u.Consumer,null))?u:N}),[u,N]),v=Object(r.useContext)(h),E=Boolean(n.store)&&Boolean(n.store.getState)&&Boolean(n.store.dispatch);Boolean(v)&&Boolean(v.store);var k=E?n.store:v.store,C=Object(r.useMemo)((function(){return function(t){return e(t.dispatch,i)}(k)}),[k]),P=Object(r.useMemo)((function(){if(!O)return y;var e=new s(k,E?null:v.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]}),[k,E,v]),M=P[0],I=P[1],T=Object(r.useMemo)((function(){return E?v:Object(f.a)({},v,{subscription:M})}),[E,v,M]),R=Object(r.useReducer)(b,g,x),L=R[0][0],j=R[1];if(L&&L.error)throw L.error;var F=Object(r.useRef)(),A=Object(r.useRef)(c),D=Object(r.useRef)(),z=Object(r.useRef)(!1),U=p((function(){return D.current&&c===A.current?D.current:C(k.getState(),c)}),[k,L,c]);w(_,[A,F,z,c,U,D,I]),w(S,[O,k,M,C,A,F,z,D,I,j],[k,M,C]);var B=Object(r.useMemo)((function(){return o.a.createElement(t,Object(f.a)({},U,{ref:l}))}),[l,t,U]);return Object(r.useMemo)((function(){return O?o.a.createElement(h.Provider,{value:T},B):B}),[h,B,T])}var k=l?o.a.memo(E):E;if(k.WrappedComponent=t,k.displayName=a,M){var P=o.a.forwardRef((function(e,t){return o.a.createElement(k,Object(f.a)({},e,{reactReduxForwardedRef:t}))}));return P.displayName=a,P.WrappedComponent=t,h()(P,t)}return h()(k,t)}}function O(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function k(e,t){if(O(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!Object.prototype.hasOwnProperty.call(t,n[o])||!O(e[n[o]],t[n[o]]))return!1;return!0}var C=n(15);function P(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function M(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function I(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=M(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=M(o),o=r(t,n)),o},r}}var T=[function(e){return"function"==typeof e?I(e):void 0},function(e){return e?void 0:P((function(e){return{dispatch:e}}))},function(e){return e&&"object"==typeof e?P((function(t){return Object(C.bindActionCreators)(e,t)})):void 0}];var R=[function(e){return"function"==typeof e?I(e):void 0},function(e){return e?void 0:P((function(){return{}}))}];function N(e,t,n){return Object(f.a)({},n,e,t)}var L=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,o=n.pure,a=n.areMergedPropsEqual,i=!1;return function(t,n,u){var l=e(t,n,u);return i?o&&a(l,r)||(r=l):(i=!0,r=l),r}}}(e):void 0},function(e){return e?void 0:function(){return N}}];function j(e,t,n,r){return function(o,a){return n(e(o,a),t(r,a),a)}}function F(e,t,n,r,o){var a,i,u,l,s,c=o.areStatesEqual,f=o.areOwnPropsEqual,d=o.areStatePropsEqual,p=!1;function h(o,p){var h,m,v=!f(p,i),g=!c(o,a);return a=o,i=p,v&&g?(u=e(a,i),t.dependsOnOwnProps&&(l=t(r,i)),s=n(u,l,i)):v?(e.dependsOnOwnProps&&(u=e(a,i)),t.dependsOnOwnProps&&(l=t(r,i)),s=n(u,l,i)):g?(h=e(a,i),m=!d(h,u),u=h,m&&(s=n(u,l,i)),s):s}return function(o,c){return p?h(o,c):(u=e(a=o,i=c),l=t(r,i),s=n(u,l,i),p=!0,s)}}function A(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,a=Object(d.a)(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),i=n(e,a),u=r(e,a),l=o(e,a);return(a.pure?F:j)(i,u,l,e,a)}function D(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function z(e,t){return e===t}function U(e){var t=void 0===e?{}:e,n=t.connectHOC,r=void 0===n?E:n,o=t.mapStateToPropsFactories,a=void 0===o?R:o,i=t.mapDispatchToPropsFactories,u=void 0===i?T:i,l=t.mergePropsFactories,s=void 0===l?L:l,c=t.selectorFactory,p=void 0===c?A:c;return function(e,t,n,o){void 0===o&&(o={});var i=o,l=i.pure,c=void 0===l||l,h=i.areStatesEqual,m=void 0===h?z:h,v=i.areOwnPropsEqual,g=void 0===v?k:v,y=i.areStatePropsEqual,b=void 0===y?k:y,w=i.areMergedPropsEqual,_=void 0===w?k:w,S=Object(d.a)(i,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),x=D(e,a,"mapStateToProps"),E=D(t,u,"mapDispatchToProps"),O=D(n,s,"mergeProps");return r(p,Object(f.a)({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:x,initMapDispatchToProps:E,initMergeProps:O,pure:c,areStatesEqual:m,areOwnPropsEqual:g,areStatePropsEqual:b,areMergedPropsEqual:_},S))}}var B=U();function V(){return Object(r.useContext)(a)}function W(e){void 0===e&&(e=a);var t=e===a?V:function(){return Object(r.useContext)(e)};return function(){return t().store}}var H=W();function $(e){void 0===e&&(e=a);var t=e===a?H:W(e);return function(){return t().dispatch}}var q=$(),Q=function(e,t){return e===t};function K(e){void 0===e&&(e=a);var t=e===a?V:function(){return Object(r.useContext)(e)};return function(e,n){void 0===n&&(n=Q);var o=t(),a=function(e,t,n,o){var a,i=Object(r.useReducer)((function(e){return e+1}),0)[1],u=Object(r.useMemo)((function(){return new s(n,o)}),[n,o]),l=Object(r.useRef)(),c=Object(r.useRef)(),f=Object(r.useRef)(),d=Object(r.useRef)(),p=n.getState();try{a=e!==c.current||p!==f.current||l.current?e(p):d.current}catch(e){throw l.current&&(e.message+="\nThe error may be correlated with this previous error:\n"+l.current.stack+"\n\n"),e}return v((function(){c.current=e,f.current=p,d.current=a,l.current=void 0})),v((function(){function e(){try{var e=c.current(n.getState());if(t(e,d.current))return;d.current=e}catch(e){l.current=e}i()}return u.onStateChange=e,u.trySubscribe(),e(),function(){return u.tryUnsubscribe()}}),[n,u]),a}(e,n,o.store,o.subscription);return Object(r.useDebugValue)(a),a}}var Y,X=K(),G=n(10);Y=G.unstable_batchedUpdates,i=Y},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.repeat=t.range=t.removeLast=t.remove=void 0;t.remove=function(e,t){var n=e.indexOf(t);n>-1&&e.splice(n,1)};t.removeLast=function(e,t){return e.substring(0,e.length-t)};t.range=function(e){return Array.isArray(e)?Array(e[1]-e[0]).fill({}).map((function(t,n){return e[0]+n})):Array(e).fill({}).map((function(e,t){return t}))};t.repeat=function(e,t){return Array(e).fill(t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.translations=void 0,t.translations={shaders:"Shaders",vertexShader:"Vertex Shader",fragmentShader:"Fragment Shader",drawOptions:"Draw options",textures:"Textures",uniforms:"Uniforms",attributeBuffers:"Attribute Buffers",custom:"Custom"}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.SectionTitle=void 0;var o=r(n(0));t.SectionTitle=o.default.memo((function(e){var t;return o.default.createElement("div",{className:"viewer-options-section-title"},o.default.createElement("h3",null,e.text),null!==(t=e.children)&&void 0!==t?t:null)}))},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.SectionField=void 0;var o=r(n(0));t.SectionField=o.default.memo((function(e){return o.default.createElement("div",{className:"viewer-options-section-field"},o.default.createElement("label",null,e.text),e.children)}))},function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||t.hasOwnProperty(n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),o(n(26),t),o(n(59),t),o(n(60),t),o(n(61),t),o(n(62),t),o(n(63),t),o(n(64),t),o(n(65),t),o(n(29),t),o(n(66),t),o(n(30),t)},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.MultiNumberInput=void 0;var o=r(n(0)),a=n(4);t.MultiNumberInput=o.default.memo((function(e){var t=e.rows,n=e.columns,r=e.value,i=void 0===r?[]:r,u=e.onChange,l=e.readonly,s=void 0!==l&&l;return o.default.createElement("div",{className:"edit-input-grid"},a.range(t).map((function(e){return o.default.createElement("div",{className:"edit-input-row"},a.range(n).map((function(t){var r=e*n+t;return o.default.createElement("input",{className:"edit-input",type:"number",disabled:s,value:i[r],onChange:function(e){return u(i.map((function(t,n){return n===r?Number(e.target.value):t})))}})})))})))}))},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(36)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.assertNever=t.hasProperty=void 0;t.hasProperty=function(e,t){return e.hasOwnProperty(t)};t.assertNever=function(e){throw new Error("Unhandled union member: "+JSON.stringify(e))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.viewerEndpoint=void 0;var r=n(4),o=n(47),a=n(21),i=function(){function e(){var e=this;this.eventListeners=[],window.addEventListener("message",(function(t){e.eventListeners.forEach((function(e){return e(t.data)}))}))}return e.prototype.getWorkspaceFilesOfTypes=function(e){var t=this,n=o.uuidv4();return a.vscodeApi.postMessage({type:"getWorkspaceFilesOfTypes",id:n,payload:{extensions:e}}),new Promise((function(e){var r=function(o){"getWorkspaceFilesOfTypes"===o.type&&o.id===n&&(e(o.payload.files),t.removeListener(r))};t.eventListeners.push(r)}))},e.prototype.getDocumentText=function(e){var t=this,n=o.uuidv4();return a.vscodeApi.postMessage({type:"getDocumentText",id:n,payload:{fileName:e}}),new Promise((function(e){var r=function(o){"getDocumentText"===o.type&&o.id===n&&(e(o.payload.text),t.removeListener(r))};t.eventListeners.push(r)}))},e.prototype.getExtensionFileUri=function(e){var t=this,n=o.uuidv4();return a.vscodeApi.postMessage({type:"getExtensionFileUri",id:n,payload:{fileName:e}}),new Promise((function(e){var r=function(o){"getExtensionFileUri"===o.type&&o.id===n&&(e(o.payload.uri),t.removeListener(r))};t.eventListeners.push(r)}))},e.prototype.subscribeToDocumentSave=function(e,t){var n=this;a.vscodeApi.postMessage({type:"subscribeToDocumentTextChange",payload:{fileName:e}});var r=function(n){"onDocumentTextChange"===n.type&&n.payload.filePath===e&&t(n.payload.text)};return this.eventListeners.push(r),function(){n.removeListener(r),a.vscodeApi.postMessage({type:"unsubscribeToDocumentTextChange",payload:{fileName:e}})}},e.prototype.showWebViewDevTools=function(){a.vscodeApi.postMessage({type:"showWebViewDevTools"})},e.prototype.removeListener=function(e){r.remove(this.eventListeners,e)},e}();t.viewerEndpoint=new i},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Dropdown=void 0;var a=o(n(0)),i=n(56);t.Dropdown=a.default.memo((function(e){var t=e.selectedItemId,n=e.onChange,o=e.options,s=i.useDropdownState(o.length,{selectedIndexes:[]},{},(function(e){void 0!==e.selectedIndexes&&n(e.selectedIndexes.length>0?o[e.selectedIndexes[0]].id:null)})),c=s[0],f=s[1],d=o.findIndex((function(e){return e.id===t})),p=d>=0?d:null,h=a.default.useRef(null),m=a.default.useRef(null);i.useDropdownCloseWhenClickedOutside(h,f),i.useFocusOnStateChange(m,c.isOpen,!0);var v=i.useDropdownListKeyboardNavigator(f);return a.default.createElement("div",{ref:h,className:"dropdown-container"},a.default.createElement(u,r({},c,{dispatch:f,showClearButton:!1,itemRenderer:function(){return a.default.createElement("div",null,null!==p?o[p].display:"")}})),c.isOpen&&a.default.createElement("div",{className:"dropdown-list",onKeyDown:v,ref:m,tabIndex:0},a.default.createElement(i.VirtualizedList,{itemCount:o.length,itemHeight:25,highlightedIndex:c.highlightedIndex,maxHeight:200,itemRenderer:function(e){return a.default.createElement(l,{text:o[e].display,index:e,isSelected:p===e,isHighlighted:c.highlightedIndex===e,dispatch:f})}})))}));var u=function(e){var t=e.isOpen,n=e.itemRenderer,r=e.showClearButton,o=void 0===r||r,u=e.dispatch,l=a.default.useRef(null),s=a.default.useCallback((function(){return u([t?"CloseList":"OpenList"])}),[t,u]),c=a.default.useCallback((function(){return u(["ClearSelection"])}),[u]);return i.useFocusOnStateChange(l,t,!1),a.default.createElement("div",{className:"dropdown-main"},a.default.createElement("button",{ref:l,className:"dropdown-select",onClick:s},n(),a.default.createElement("i",{className:"fa "+(t?"fa-caret-up":"fa-caret-down")})),o&&a.default.createElement("button",{className:"dropdown-clear",onClick:c},a.default.createElement("i",{className:"fa fa-times"})))},l=function(e){var t=e.text,n=e.index,r=e.isSelected,o=e.isHighlighted,i=e.dispatch,u="dropdown-list-item "+(r?"selected":"")+"  "+(o?"highlighted":"");return a.default.createElement("div",{key:n,onClick:function(){return i([{type:"SelectIndex",index:n},"CloseList"])},className:u},a.default.createElement("div",{className:"dropdown-list-item-text"},t))}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var a=arguments[t],i=0,u=a.length;i<u;i++,o++)r[o]=a[i];return r};Object.defineProperty(t,"__esModule",{value:!0}),t.clamp=t.areShallowEqual=t.overriddenProps=t.omitKeys=t.overrideDefinedPropsOnly=void 0,t.overrideDefinedPropsOnly=function(e,t){for(var n=r({},e),o=0,a=Object.keys(t);o<a.length;o++){var i=a[o],u=t[i];void 0!==u&&(n[i]=u)}return n},t.omitKeys=function(e,t){return Object.keys(e).filter((function(e){return!t.includes(e)})).reduce((function(t,n){var r;return Object.assign(t,((r={})[n]=e[n],r)),t}),{})},t.overriddenProps=function(e,t){return o(Object.keys(e),Object.keys(t)).reduce((function(n,r){var o=r;return e[o]!==t[o]&&(n[o]=t[o]),n}),{})},t.areShallowEqual=function(e,t){var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0,a=n;o<a.length;o++){var i=a[o];if(e[i]!==t[i])return!1}return!0},t.clamp=function(e,t,n){return e<t?t:e>n?n:e}},function(e,t,n){"use strict";n.r(t),n.d(t,"__DO_NOT_USE__ActionTypes",(function(){return a})),n.d(t,"applyMiddleware",(function(){return v})),n.d(t,"bindActionCreators",(function(){return f})),n.d(t,"combineReducers",(function(){return s})),n.d(t,"compose",(function(){return m})),n.d(t,"createStore",(function(){return u}));var r=n(17),o=function(){return Math.random().toString(36).substring(7).split("").join(".")},a={INIT:"@@redux/INIT"+o(),REPLACE:"@@redux/REPLACE"+o(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+o()}};function i(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function u(e,t,n){var o;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(u)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var l=e,s=t,c=[],f=c,d=!1;function p(){f===c&&(f=c.slice())}function h(){if(d)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return s}function m(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(d)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var t=!0;return p(),f.push(e),function(){if(t){if(d)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");t=!1,p();var n=f.indexOf(e);f.splice(n,1),c=null}}}function v(e){if(!i(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(d)throw new Error("Reducers may not dispatch actions.");try{d=!0,s=l(s,e)}finally{d=!1}for(var t=c=f,n=0;n<t.length;n++){(0,t[n])()}return e}function g(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");l=e,v({type:a.REPLACE})}function y(){var e,t=m;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(h())}return n(),{unsubscribe:t(n)}}})[r.a]=function(){return this},e}return v({type:a.INIT}),(o={dispatch:v,subscribe:m,getState:h,replaceReducer:g})[r.a]=y,o}function l(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function s(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];0,"function"==typeof e[o]&&(n[o]=e[o])}var i,u=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:a.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:a.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+a.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(n)}catch(e){i=e}return function(e,t){if(void 0===e&&(e={}),i)throw i;for(var r=!1,o={},a=0;a<u.length;a++){var s=u[a],c=n[s],f=e[s],d=c(f,t);if(void 0===d){var p=l(s,t);throw new Error(p)}o[s]=d,r=r||d!==f}return(r=r||u.length!==Object.keys(e).length)?o:e}}function c(e,t){return function(){return t(e.apply(this,arguments))}}function f(e,t){if("function"==typeof e)return c(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var n={};for(var r in e){var o=e[r];"function"==typeof o&&(n[r]=c(o,t))}return n}function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){var n=Object.keys(e);return Object.getOwnPropertySymbols&&n.push.apply(n,Object.getOwnPropertySymbols(e)),t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n}function h(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(n,!0).forEach((function(t){d(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function v(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},a=t.map((function(e){return e(o)}));return h({},n,{dispatch:r=m.apply(void 0,a)(n.dispatch)})}}}},function(e,t,n){"use strict";e.exports=n(44)},function(e,t,n){"use strict";(function(e,r){var o,a=n(33);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var i=Object(a.a)(o);t.a=i}).call(this,n(39),n(40)(e))},function(e,t,n){"use strict";var r=n(16),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},u={};function l(e){return r.isMemo(e)?i:u[e.$$typeof]||o}u[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},u[r.Memo]=i;var s=Object.defineProperty,c=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var i=c(n);f&&(i=i.concat(f(n)));for(var u=l(t),m=l(n),v=0;v<i.length;++v){var g=i[v];if(!(a[g]||r&&r[g]||m&&m[g]||u&&u[g])){var y=d(n,g);try{s(t,g,y)}catch(e){}}}}return t}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;function i(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,u,l=i(e),s=1;s<arguments.length;s++){for(var c in n=Object(arguments[s]))o.call(n,c)&&(l[c]=n[c]);if(r){u=r(n);for(var f=0;f<u.length;f++)a.call(n,u[f])&&(l[u[f]]=n[u[f]])}}return l}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.setExtensionState=t.getExtensionState=void 0;var o=n(4),a=n(21),i={vertexFilePath:null,fragmentFilePath:null,uniformValues:{},attributeBufferValues:{},textureValues:{},cameraPosition:o.repeat(16,0)};t.getExtensionState=function(){return r({},i)};t.setExtensionState=function(e){return a.vscodeApi.setState(void 0)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.vscodeApi=void 0,t.vscodeApi=acquireVsCodeApi()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getBindingOptions=t.getBindingValue=t.bindingNames=t.uniformBindings=void 0;var r=n(23);t.uniformBindings=new Map([[r.UniformType.FLOAT_VEC2,{binding1:{display:"binding 1",value:[1,2,3]},binding2:{display:"binding 22",value:[1444,2,3]}}]]),t.bindingNames=new Set(Array.from(t.uniformBindings.values()).flatMap(Object.keys));t.getBindingValue=function(e,n){return t.uniformBindings.get(n)[e].value};t.getBindingOptions=function(e){var n=t.uniformBindings.get(e);return n?Object.entries(n).map((function(e){return{id:e[0],display:e[1].display}})):[]}},function(e,t,n){"use strict";var r=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var a=arguments[t],i=0,u=a.length;i<u;i++,o++)r[o]=a[i];return r};Object.defineProperty(t,"__esModule",{value:!0}),t.UniformInfo=t.UniformType=void 0;var o,a=n(11);!function(e){e[e.FLOAT_VEC2=35664]="FLOAT_VEC2",e[e.FLOAT_VEC3=35665]="FLOAT_VEC3",e[e.FLOAT_VEC4=35666]="FLOAT_VEC4",e[e.FLOAT_MAT4=35676]="FLOAT_MAT4"}(o=t.UniformType||(t.UniformType={}));var i=function(){function e(e,t,n,r){this.context=e,this.name=n,this.type=r,this.attachToProgram(t)}return e.prototype.attachToProgram=function(e){var t=this.context.getUniformLocation(e,this.name);this.setter=u(this.type,this.context,t)},e.prototype.setValue=function(e){this.value=e},e.prototype.prepareForRender=function(){null!==this.value&&this.setter(this.value)},e.prototype.getUniformType=function(){return this.type},e.prototype.getUniformName=function(){return this.name},e.prototype.dispose=function(){},e}();t.UniformInfo=i;var u=function(e,t,n){switch(e){case o.FLOAT_VEC2:return function(e){return t.uniform2f.apply(t,r([n],e))};case o.FLOAT_VEC3:return function(e){return t.uniform3f.apply(t,r([n],e))};case o.FLOAT_VEC4:return function(e){return t.uniform4f.apply(t,r([n],e))};case o.FLOAT_MAT4:return function(e){return t.uniformMatrix4fv(n,!1,e)};default:a.assertNever(e)}}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.getFromCacheOrCreate=t.getByName=void 0;var o=n(50),a=n(51),i=function(e){return e.name+";"+e.type},u=new o.CompositeKeyMap(i);t.getByName=function(e,t){return u.get({name:e,type:t})};t.getFromCacheOrCreate=function(e,t,n){var o,l,s=n.map((function(n){var o=r({},n),i=u.get(o);if(i)return i.attributeBufferInfo.attachToProgram(t),{key:o,value:i};var l=new a.AttributeBufferInfo(e,t,n.name,n.type);return{key:o,value:{attributeBufferInfo:l,dispose:function(){return l.deleteBuffer()}}}}));return l=(o=s).map((function(e){return i(e.key)})),u.entriesStrKey().filter((function(e){return!l.includes(e[0])})).forEach((function(e){e[1].dispose(),u.deleteStrKey(e[0])})),o.forEach((function(e){u.has(e.key)||u.set(e.key,e.value)})),s.map((function(e){return e.value.attributeBufferInfo}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.defaultTextureUrl=t.customOptionId=t.extensionTextures=t.imageExtensions=t.shaderExtensions=void 0,t.shaderExtensions=["glsl"],t.imageExtensions=["jpg","bmp"],t.extensionTextures=["texture1.jpg","texture2.jpg"],t.customOptionId="custom",t.defaultTextureUrl="https://raw.githubusercontent.com/mateuszmigas/webgl-shader-viewer/main/docs/images/screenshot1.jpg"},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var a=arguments[t],i=0,u=a.length;i<u;i++,o++)r[o]=a[i];return r},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useUnionState=void 0;var i=a(n(0)),u=n(14);t.useUnionState=function(e,t,n,a){var l=i.default.useState(u.omitKeys(e,Object.keys(t))),s=l[0],c=l[1],f=i.default.useRef(s);return[s,i.default.useCallback((function(e){var o=u.overrideDefinedPropsOnly(f.current,t),i=e.reduce((function(e,t){return n(e,t)}),r({},o)),l=u.overriddenProps(o,i),s=u.omitKeys(i,Object.keys(t));u.areShallowEqual(f.current,s)||(f.current=s,c(f.current)),null==a||a(l)}),o(Object.values(t),[n,a]))]}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.reducer=void 0;var o=n(14),a=n(28),i=function(e,t,n){return n>0?o.clamp(e+t,0,n-1):null};t.reducer=function(e,t,n){if("string"==typeof n)switch(n){case"CloseList":return r(r({},e),{isOpen:!1});case"OpenList":return r(r({},e),{isOpen:!0});case"HighlightFirstIndex":return r(r({},e),{highlightedIndex:t>0?0:null});case"HighlightPreviousIndex":return r(r({},e),{highlightedIndex:null!=e.highlightedIndex?i(e.highlightedIndex,-1,t):0});case"HighlightNextIndex":return r(r({},e),{highlightedIndex:null!=e.highlightedIndex?i(e.highlightedIndex,1,t):0});case"HighlightLastIndex":return r(r({},e),{highlightedIndex:t>0?t-1:null});case"SelectHighlightedIndex":return r(r({},e),{selectedIndexes:null!=e.highlightedIndex&&null!=e.highlightedIndex?[e.highlightedIndex]:[]});case"ClearSelection":return r(r({},e),{selectedIndexes:[],highlightedIndex:t>0?0:null});default:return a.assertNever(n)}else switch(n.type){case"SelectIndex":return r(r({},e),{selectedIndexes:[n.index],highlightedIndex:n.index});case"ToggleSelectedIndex":return r(r({},e),{selectedIndexes:e.selectedIndexes.filter((function(e){return e!==n.index})).concat(e.selectedIndexes.includes(n.index)?[]:[n.index]),highlightedIndex:n.index});case"HighlightIndex":return r(r({},e),{highlightedIndex:null===n.index?n.index:o.clamp(n.index,0,t-1)});default:return a.assertNever(n)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.hasProperty=t.assertNever=void 0,t.assertNever=function(e){throw new Error("Unexpected object: "+e)},t.hasProperty=function(e,t){return e.hasOwnProperty(t)}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useFocusOutHandler=void 0;var o=r(n(0));t.useFocusOutHandler=function(e,t){o.default.useEffect((function(){var n;function r(n){var r;(null===(r=e.current)||void 0===r?void 0:r.contains(n.relatedTarget))||t()}return null===(n=e.current)||void 0===n||n.addEventListener("focusout",r),function(){var t;null===(t=e.current)||void 0===t||t.removeEventListener("focusout",r)}}),[t])}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.usePreviousValue=void 0;var o=r(n(0));t.usePreviousValue=function(e){var t=o.default.useRef();return o.default.useEffect((function(){t.current=e})),t.current}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createListKeyboardNavigator=void 0,t.createListKeyboardNavigator=function(e){return function(t){switch(t.key){case" ":break;case"Enter":e(["SelectHighlightedIndex","CloseList"]);break;case"Esc":case"Escape":case"Tab":e(["CloseList"]);break;case"Down":case"ArrowDown":t.preventDefault(),e(["HighlightNextIndex"]);break;case"Up":case"ArrowUp":t.preventDefault(),e(["HighlightPreviousIndex"]);break;case"Home":e(["HighlightFirstIndex"]);break;case"End":e(["HighlightLastIndex"]);break;default:return}}}},function(e,t,n){"use strict";n.r(t),n.d(t,"VariableSizeGrid",(function(){return C})),n.d(t,"VariableSizeList",(function(){return j})),n.d(t,"FixedSizeGrid",(function(){return F})),n.d(t,"FixedSizeList",(function(){return A})),n.d(t,"areEqual",(function(){return z})),n.d(t,"shouldComponentUpdate",(function(){return U}));var r=n(1);function o(e,t){return(o=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function a(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,o(e,t)}function i(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function u(e,t){if(e.length!==t.length)return!1;for(var n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}var l=function(e,t){var n;void 0===t&&(t=u);var r,o=[],a=!1;return function(){for(var i=[],u=0;u<arguments.length;u++)i[u]=arguments[u];return a&&n===this&&t(i,o)||(r=e.apply(this,i),a=!0,n=this,o=i),r}},s=n(0),c=n(2),f="object"==typeof performance&&"function"==typeof performance.now?function(){return performance.now()}:function(){return Date.now()};function d(e){cancelAnimationFrame(e.id)}function p(e,t){var n=f();var r={id:requestAnimationFrame((function o(){f()-n>=t?e.call(null):r.id=requestAnimationFrame(o)}))};return r}var h=-1;var m=null;function v(e){if(void 0===e&&(e=!1),null===m||e){var t=document.createElement("div"),n=t.style;n.width="50px",n.height="50px",n.overflow="scroll",n.direction="rtl";var r=document.createElement("div"),o=r.style;return o.width="100px",o.height="100px",t.appendChild(r),document.body.appendChild(t),t.scrollLeft>0?m="positive-descending":(t.scrollLeft=1,m=0===t.scrollLeft?"negative":"positive-ascending"),document.body.removeChild(t),m}return m}var g=function(e){var t=e.columnIndex;e.data;return e.rowIndex+":"+t};function y(e){var t,n,o=e.getColumnOffset,u=e.getColumnStartIndexForOffset,c=e.getColumnStopIndexForStartIndex,f=e.getColumnWidth,m=e.getEstimatedTotalHeight,y=e.getEstimatedTotalWidth,w=e.getOffsetForColumnAndAlignment,_=e.getOffsetForRowAndAlignment,S=e.getRowHeight,x=e.getRowOffset,E=e.getRowStartIndexForOffset,O=e.getRowStopIndexForStartIndex,k=e.initInstanceProps,C=e.shouldResetStyleCacheOnItemSizeChange,P=e.validateProps;return n=t=function(e){function t(t){var n;return(n=e.call(this,t)||this)._instanceProps=k(n.props,i(i(n))),n._resetIsScrollingTimeoutId=null,n._outerRef=void 0,n.state={instance:i(i(n)),isScrolling:!1,horizontalScrollDirection:"forward",scrollLeft:"number"==typeof n.props.initialScrollLeft?n.props.initialScrollLeft:0,scrollTop:"number"==typeof n.props.initialScrollTop?n.props.initialScrollTop:0,scrollUpdateWasRequested:!1,verticalScrollDirection:"forward"},n._callOnItemsRendered=void 0,n._callOnItemsRendered=l((function(e,t,r,o,a,i,u,l){return n.props.onItemsRendered({overscanColumnStartIndex:e,overscanColumnStopIndex:t,overscanRowStartIndex:r,overscanRowStopIndex:o,visibleColumnStartIndex:a,visibleColumnStopIndex:i,visibleRowStartIndex:u,visibleRowStopIndex:l})})),n._callOnScroll=void 0,n._callOnScroll=l((function(e,t,r,o,a){return n.props.onScroll({horizontalScrollDirection:r,scrollLeft:e,scrollTop:t,verticalScrollDirection:o,scrollUpdateWasRequested:a})})),n._getItemStyle=void 0,n._getItemStyle=function(e,t){var r,a=n.props,i=a.columnWidth,u=a.direction,l=a.rowHeight,s=n._getItemStyleCache(C&&i,C&&u,C&&l),c=e+":"+t;if(s.hasOwnProperty(c))r=s[c];else{var d=o(n.props,t,n._instanceProps),p="rtl"===u;s[c]=r={position:"absolute",left:p?void 0:d,right:p?d:void 0,top:x(n.props,e,n._instanceProps),height:S(n.props,e,n._instanceProps),width:f(n.props,t,n._instanceProps)}}return r},n._getItemStyleCache=void 0,n._getItemStyleCache=l((function(e,t,n){return{}})),n._onScroll=function(e){var t=e.currentTarget,r=t.clientHeight,o=t.clientWidth,a=t.scrollLeft,i=t.scrollTop,u=t.scrollHeight,l=t.scrollWidth;n.setState((function(e){if(e.scrollLeft===a&&e.scrollTop===i)return null;var t=n.props.direction,s=a;if("rtl"===t)switch(v()){case"negative":s=-a;break;case"positive-descending":s=l-o-a}s=Math.max(0,Math.min(s,l-o));var c=Math.max(0,Math.min(i,u-r));return{isScrolling:!0,horizontalScrollDirection:e.scrollLeft<a?"forward":"backward",scrollLeft:s,scrollTop:c,verticalScrollDirection:e.scrollTop<i?"forward":"backward",scrollUpdateWasRequested:!1}}),n._resetIsScrollingDebounced)},n._outerRefSetter=function(e){var t=n.props.outerRef;n._outerRef=e,"function"==typeof t?t(e):null!=t&&"object"==typeof t&&t.hasOwnProperty("current")&&(t.current=e)},n._resetIsScrollingDebounced=function(){null!==n._resetIsScrollingTimeoutId&&d(n._resetIsScrollingTimeoutId),n._resetIsScrollingTimeoutId=p(n._resetIsScrolling,150)},n._resetIsScrolling=function(){n._resetIsScrollingTimeoutId=null,n.setState({isScrolling:!1},(function(){n._getItemStyleCache(-1)}))},n}a(t,e),t.getDerivedStateFromProps=function(e,t){return b(e,t),P(e),null};var n=t.prototype;return n.scrollTo=function(e){var t=e.scrollLeft,n=e.scrollTop;void 0!==t&&(t=Math.max(0,t)),void 0!==n&&(n=Math.max(0,n)),this.setState((function(e){return void 0===t&&(t=e.scrollLeft),void 0===n&&(n=e.scrollTop),e.scrollLeft===t&&e.scrollTop===n?null:{horizontalScrollDirection:e.scrollLeft<t?"forward":"backward",scrollLeft:t,scrollTop:n,scrollUpdateWasRequested:!0,verticalScrollDirection:e.scrollTop<n?"forward":"backward"}}),this._resetIsScrollingDebounced)},n.scrollToItem=function(e){var t=e.align,n=void 0===t?"auto":t,r=e.columnIndex,o=e.rowIndex,a=this.props,i=a.columnCount,u=a.height,l=a.rowCount,s=a.width,c=this.state,f=c.scrollLeft,d=c.scrollTop,p=function(e){if(void 0===e&&(e=!1),-1===h||e){var t=document.createElement("div"),n=t.style;n.width="50px",n.height="50px",n.overflow="scroll",document.body.appendChild(t),h=t.offsetWidth-t.clientWidth,document.body.removeChild(t)}return h}();void 0!==r&&(r=Math.max(0,Math.min(r,i-1))),void 0!==o&&(o=Math.max(0,Math.min(o,l-1)));var v=m(this.props,this._instanceProps),g=y(this.props,this._instanceProps)>s?p:0,b=v>u?p:0;this.scrollTo({scrollLeft:void 0!==r?w(this.props,r,n,f,this._instanceProps,b):f,scrollTop:void 0!==o?_(this.props,o,n,d,this._instanceProps,g):d})},n.componentDidMount=function(){var e=this.props,t=e.initialScrollLeft,n=e.initialScrollTop;if(null!=this._outerRef){var r=this._outerRef;"number"==typeof t&&(r.scrollLeft=t),"number"==typeof n&&(r.scrollTop=n)}this._callPropsCallbacks()},n.componentDidUpdate=function(){var e=this.props.direction,t=this.state,n=t.scrollLeft,r=t.scrollTop;if(t.scrollUpdateWasRequested&&null!=this._outerRef){var o=this._outerRef;if("rtl"===e)switch(v()){case"negative":o.scrollLeft=-n;break;case"positive-ascending":o.scrollLeft=n;break;default:var a=o.clientWidth,i=o.scrollWidth;o.scrollLeft=i-a-n}else o.scrollLeft=Math.max(0,n);o.scrollTop=Math.max(0,r)}this._callPropsCallbacks()},n.componentWillUnmount=function(){null!==this._resetIsScrollingTimeoutId&&d(this._resetIsScrollingTimeoutId)},n.render=function(){var e=this.props,t=e.children,n=e.className,o=e.columnCount,a=e.direction,i=e.height,u=e.innerRef,l=e.innerElementType,c=e.innerTagName,f=e.itemData,d=e.itemKey,p=void 0===d?g:d,h=e.outerElementType,v=e.outerTagName,b=e.rowCount,w=e.style,_=e.useIsScrolling,S=e.width,x=this.state.isScrolling,E=this._getHorizontalRangeToRender(),O=E[0],k=E[1],C=this._getVerticalRangeToRender(),P=C[0],M=C[1],I=[];if(o>0&&b)for(var T=P;T<=M;T++)for(var R=O;R<=k;R++)I.push(Object(s.createElement)(t,{columnIndex:R,data:f,isScrolling:_?x:void 0,key:p({columnIndex:R,data:f,rowIndex:T}),rowIndex:T,style:this._getItemStyle(T,R)}));var N=m(this.props,this._instanceProps),L=y(this.props,this._instanceProps);return Object(s.createElement)(h||v||"div",{className:n,onScroll:this._onScroll,ref:this._outerRefSetter,style:Object(r.a)({position:"relative",height:i,width:S,overflow:"auto",WebkitOverflowScrolling:"touch",willChange:"transform",direction:a},w)},Object(s.createElement)(l||c||"div",{children:I,ref:u,style:{height:N,pointerEvents:x?"none":void 0,width:L}}))},n._callPropsCallbacks=function(){var e=this.props,t=e.columnCount,n=e.onItemsRendered,r=e.onScroll,o=e.rowCount;if("function"==typeof n&&t>0&&o>0){var a=this._getHorizontalRangeToRender(),i=a[0],u=a[1],l=a[2],s=a[3],c=this._getVerticalRangeToRender(),f=c[0],d=c[1],p=c[2],h=c[3];this._callOnItemsRendered(i,u,f,d,l,s,p,h)}if("function"==typeof r){var m=this.state,v=m.horizontalScrollDirection,g=m.scrollLeft,y=m.scrollTop,b=m.scrollUpdateWasRequested,w=m.verticalScrollDirection;this._callOnScroll(g,y,v,w,b)}},n._getHorizontalRangeToRender=function(){var e=this.props,t=e.columnCount,n=e.overscanColumnCount,r=e.overscanColumnsCount,o=e.overscanCount,a=e.rowCount,i=this.state,l=i.horizontalScrollDirection,s=i.isScrolling,f=i.scrollLeft,d=n||r||o||1;if(0===t||0===a)return[0,0,0,0];var p=u(this.props,f,this._instanceProps),h=c(this.props,p,f,this._instanceProps),m=s&&"backward"!==l?1:Math.max(1,d),v=s&&"forward"!==l?1:Math.max(1,d);return[Math.max(0,p-m),Math.max(0,Math.min(t-1,h+v)),p,h]},n._getVerticalRangeToRender=function(){var e=this.props,t=e.columnCount,n=e.overscanCount,r=e.overscanRowCount,o=e.overscanRowsCount,a=e.rowCount,i=this.state,u=i.isScrolling,l=i.verticalScrollDirection,s=i.scrollTop,c=r||o||n||1;if(0===t||0===a)return[0,0,0,0];var f=E(this.props,s,this._instanceProps),d=O(this.props,f,s,this._instanceProps),p=u&&"backward"!==l?1:Math.max(1,c),h=u&&"forward"!==l?1:Math.max(1,c);return[Math.max(0,f-p),Math.max(0,Math.min(a-1,d+h)),f,d]},t}(s.PureComponent),t.defaultProps={direction:"ltr",itemData:void 0,useIsScrolling:!1},n}var b=function(e,t){e.children,e.direction,e.height,e.innerTagName,e.outerTagName,e.overscanColumnsCount,e.overscanCount,e.overscanRowsCount,e.width,t.instance},w=function(e,t){var n=e.rowCount,r=t.rowMetadataMap,o=t.estimatedRowHeight,a=t.lastMeasuredRowIndex,i=0;if(a>=n&&(a=n-1),a>=0){var u=r[a];i=u.offset+u.size}return i+(n-a-1)*o},_=function(e,t){var n=e.columnCount,r=t.columnMetadataMap,o=t.estimatedColumnWidth,a=t.lastMeasuredColumnIndex,i=0;if(a>=n&&(a=n-1),a>=0){var u=r[a];i=u.offset+u.size}return i+(n-a-1)*o},S=function(e,t,n,r){var o,a,i;if("column"===e?(o=r.columnMetadataMap,a=t.columnWidth,i=r.lastMeasuredColumnIndex):(o=r.rowMetadataMap,a=t.rowHeight,i=r.lastMeasuredRowIndex),n>i){var u=0;if(i>=0){var l=o[i];u=l.offset+l.size}for(var s=i+1;s<=n;s++){var c=a(s);o[s]={offset:u,size:c},u+=c}"column"===e?r.lastMeasuredColumnIndex=n:r.lastMeasuredRowIndex=n}return o[n]},x=function(e,t,n,r){var o,a;return"column"===e?(o=n.columnMetadataMap,a=n.lastMeasuredColumnIndex):(o=n.rowMetadataMap,a=n.lastMeasuredRowIndex),(a>0?o[a].offset:0)>=r?E(e,t,n,a,0,r):O(e,t,n,Math.max(0,a),r)},E=function(e,t,n,r,o,a){for(;o<=r;){var i=o+Math.floor((r-o)/2),u=S(e,t,i,n).offset;if(u===a)return i;u<a?o=i+1:u>a&&(r=i-1)}return o>0?o-1:0},O=function(e,t,n,r,o){for(var a="column"===e?t.columnCount:t.rowCount,i=1;r<a&&S(e,t,r,n).offset<o;)r+=i,i*=2;return E(e,t,n,Math.min(r,a-1),Math.floor(r/2),o)},k=function(e,t,n,r,o,a,i){var u="column"===e?t.width:t.height,l=S(e,t,n,a),s="column"===e?_(t,a):w(t,a),c=Math.max(0,Math.min(s-u,l.offset)),f=Math.max(0,l.offset-u+i+l.size);switch("smart"===r&&(r=o>=f-u&&o<=c+u?"auto":"center"),r){case"start":return c;case"end":return f;case"center":return Math.round(f+(c-f)/2);case"auto":default:return o>=f&&o<=c?o:f>c||o<f?f:c}},C=y({getColumnOffset:function(e,t,n){return S("column",e,t,n).offset},getColumnStartIndexForOffset:function(e,t,n){return x("column",e,n,t)},getColumnStopIndexForStartIndex:function(e,t,n,r){for(var o=e.columnCount,a=e.width,i=S("column",e,t,r),u=n+a,l=i.offset+i.size,s=t;s<o-1&&l<u;)s++,l+=S("column",e,s,r).size;return s},getColumnWidth:function(e,t,n){return n.columnMetadataMap[t].size},getEstimatedTotalHeight:w,getEstimatedTotalWidth:_,getOffsetForColumnAndAlignment:function(e,t,n,r,o,a){return k("column",e,t,n,r,o,a)},getOffsetForRowAndAlignment:function(e,t,n,r,o,a){return k("row",e,t,n,r,o,a)},getRowOffset:function(e,t,n){return S("row",e,t,n).offset},getRowHeight:function(e,t,n){return n.rowMetadataMap[t].size},getRowStartIndexForOffset:function(e,t,n){return x("row",e,n,t)},getRowStopIndexForStartIndex:function(e,t,n,r){for(var o=e.rowCount,a=e.height,i=S("row",e,t,r),u=n+a,l=i.offset+i.size,s=t;s<o-1&&l<u;)s++,l+=S("row",e,s,r).size;return s},initInstanceProps:function(e,t){var n=e,r={columnMetadataMap:{},estimatedColumnWidth:n.estimatedColumnWidth||50,estimatedRowHeight:n.estimatedRowHeight||50,lastMeasuredColumnIndex:-1,lastMeasuredRowIndex:-1,rowMetadataMap:{}};return t.resetAfterColumnIndex=function(e,n){void 0===n&&(n=!0),t.resetAfterIndices({columnIndex:e,shouldForceUpdate:n})},t.resetAfterRowIndex=function(e,n){void 0===n&&(n=!0),t.resetAfterIndices({rowIndex:e,shouldForceUpdate:n})},t.resetAfterIndices=function(e){var n=e.columnIndex,o=e.rowIndex,a=e.shouldForceUpdate,i=void 0===a||a;"number"==typeof n&&(r.lastMeasuredColumnIndex=Math.min(r.lastMeasuredColumnIndex,n-1)),"number"==typeof o&&(r.lastMeasuredRowIndex=Math.min(r.lastMeasuredRowIndex,o-1)),t._getItemStyleCache(-1),i&&t.forceUpdate()},r},shouldResetStyleCacheOnItemSizeChange:!1,validateProps:function(e){e.columnWidth,e.rowHeight}}),P=function(e,t){return e};function M(e){var t,n,o=e.getItemOffset,u=e.getEstimatedTotalSize,c=e.getItemSize,f=e.getOffsetForIndexAndAlignment,h=e.getStartIndexForOffset,m=e.getStopIndexForStartIndex,g=e.initInstanceProps,y=e.shouldResetStyleCacheOnItemSizeChange,b=e.validateProps;return n=t=function(e){function t(t){var n;return(n=e.call(this,t)||this)._instanceProps=g(n.props,i(i(n))),n._outerRef=void 0,n._resetIsScrollingTimeoutId=null,n.state={instance:i(i(n)),isScrolling:!1,scrollDirection:"forward",scrollOffset:"number"==typeof n.props.initialScrollOffset?n.props.initialScrollOffset:0,scrollUpdateWasRequested:!1},n._callOnItemsRendered=void 0,n._callOnItemsRendered=l((function(e,t,r,o){return n.props.onItemsRendered({overscanStartIndex:e,overscanStopIndex:t,visibleStartIndex:r,visibleStopIndex:o})})),n._callOnScroll=void 0,n._callOnScroll=l((function(e,t,r){return n.props.onScroll({scrollDirection:e,scrollOffset:t,scrollUpdateWasRequested:r})})),n._getItemStyle=void 0,n._getItemStyle=function(e){var t,r=n.props,a=r.direction,i=r.itemSize,u=r.layout,l=n._getItemStyleCache(y&&i,y&&u,y&&a);if(l.hasOwnProperty(e))t=l[e];else{var s=o(n.props,e,n._instanceProps),f=c(n.props,e,n._instanceProps),d="horizontal"===a||"horizontal"===u,p="rtl"===a,h=d?s:0;l[e]=t={position:"absolute",left:p?void 0:h,right:p?h:void 0,top:d?0:s,height:d?"100%":f,width:d?f:"100%"}}return t},n._getItemStyleCache=void 0,n._getItemStyleCache=l((function(e,t,n){return{}})),n._onScrollHorizontal=function(e){var t=e.currentTarget,r=t.clientWidth,o=t.scrollLeft,a=t.scrollWidth;n.setState((function(e){if(e.scrollOffset===o)return null;var t=n.props.direction,i=o;if("rtl"===t)switch(v()){case"negative":i=-o;break;case"positive-descending":i=a-r-o}return i=Math.max(0,Math.min(i,a-r)),{isScrolling:!0,scrollDirection:e.scrollOffset<o?"forward":"backward",scrollOffset:i,scrollUpdateWasRequested:!1}}),n._resetIsScrollingDebounced)},n._onScrollVertical=function(e){var t=e.currentTarget,r=t.clientHeight,o=t.scrollHeight,a=t.scrollTop;n.setState((function(e){if(e.scrollOffset===a)return null;var t=Math.max(0,Math.min(a,o-r));return{isScrolling:!0,scrollDirection:e.scrollOffset<t?"forward":"backward",scrollOffset:t,scrollUpdateWasRequested:!1}}),n._resetIsScrollingDebounced)},n._outerRefSetter=function(e){var t=n.props.outerRef;n._outerRef=e,"function"==typeof t?t(e):null!=t&&"object"==typeof t&&t.hasOwnProperty("current")&&(t.current=e)},n._resetIsScrollingDebounced=function(){null!==n._resetIsScrollingTimeoutId&&d(n._resetIsScrollingTimeoutId),n._resetIsScrollingTimeoutId=p(n._resetIsScrolling,150)},n._resetIsScrolling=function(){n._resetIsScrollingTimeoutId=null,n.setState({isScrolling:!1},(function(){n._getItemStyleCache(-1,null)}))},n}a(t,e),t.getDerivedStateFromProps=function(e,t){return I(e,t),b(e),null};var n=t.prototype;return n.scrollTo=function(e){e=Math.max(0,e),this.setState((function(t){return t.scrollOffset===e?null:{scrollDirection:t.scrollOffset<e?"forward":"backward",scrollOffset:e,scrollUpdateWasRequested:!0}}),this._resetIsScrollingDebounced)},n.scrollToItem=function(e,t){void 0===t&&(t="auto");var n=this.props.itemCount,r=this.state.scrollOffset;e=Math.max(0,Math.min(e,n-1)),this.scrollTo(f(this.props,e,t,r,this._instanceProps))},n.componentDidMount=function(){var e=this.props,t=e.direction,n=e.initialScrollOffset,r=e.layout;if("number"==typeof n&&null!=this._outerRef){var o=this._outerRef;"horizontal"===t||"horizontal"===r?o.scrollLeft=n:o.scrollTop=n}this._callPropsCallbacks()},n.componentDidUpdate=function(){var e=this.props,t=e.direction,n=e.layout,r=this.state,o=r.scrollOffset;if(r.scrollUpdateWasRequested&&null!=this._outerRef){var a=this._outerRef;if("horizontal"===t||"horizontal"===n)if("rtl"===t)switch(v()){case"negative":a.scrollLeft=-o;break;case"positive-ascending":a.scrollLeft=o;break;default:var i=a.clientWidth,u=a.scrollWidth;a.scrollLeft=u-i-o}else a.scrollLeft=o;else a.scrollTop=o}this._callPropsCallbacks()},n.componentWillUnmount=function(){null!==this._resetIsScrollingTimeoutId&&d(this._resetIsScrollingTimeoutId)},n.render=function(){var e=this.props,t=e.children,n=e.className,o=e.direction,a=e.height,i=e.innerRef,l=e.innerElementType,c=e.innerTagName,f=e.itemCount,d=e.itemData,p=e.itemKey,h=void 0===p?P:p,m=e.layout,v=e.outerElementType,g=e.outerTagName,y=e.style,b=e.useIsScrolling,w=e.width,_=this.state.isScrolling,S="horizontal"===o||"horizontal"===m,x=S?this._onScrollHorizontal:this._onScrollVertical,E=this._getRangeToRender(),O=E[0],k=E[1],C=[];if(f>0)for(var M=O;M<=k;M++)C.push(Object(s.createElement)(t,{data:d,key:h(M,d),index:M,isScrolling:b?_:void 0,style:this._getItemStyle(M)}));var I=u(this.props,this._instanceProps);return Object(s.createElement)(v||g||"div",{className:n,onScroll:x,ref:this._outerRefSetter,style:Object(r.a)({position:"relative",height:a,width:w,overflow:"auto",WebkitOverflowScrolling:"touch",willChange:"transform",direction:o},y)},Object(s.createElement)(l||c||"div",{children:C,ref:i,style:{height:S?"100%":I,pointerEvents:_?"none":void 0,width:S?I:"100%"}}))},n._callPropsCallbacks=function(){if("function"==typeof this.props.onItemsRendered&&this.props.itemCount>0){var e=this._getRangeToRender(),t=e[0],n=e[1],r=e[2],o=e[3];this._callOnItemsRendered(t,n,r,o)}if("function"==typeof this.props.onScroll){var a=this.state,i=a.scrollDirection,u=a.scrollOffset,l=a.scrollUpdateWasRequested;this._callOnScroll(i,u,l)}},n._getRangeToRender=function(){var e=this.props,t=e.itemCount,n=e.overscanCount,r=this.state,o=r.isScrolling,a=r.scrollDirection,i=r.scrollOffset;if(0===t)return[0,0,0,0];var u=h(this.props,i,this._instanceProps),l=m(this.props,u,i,this._instanceProps),s=o&&"backward"!==a?1:Math.max(1,n),c=o&&"forward"!==a?1:Math.max(1,n);return[Math.max(0,u-s),Math.max(0,Math.min(t-1,l+c)),u,l]},t}(s.PureComponent),t.defaultProps={direction:"ltr",itemData:void 0,layout:"vertical",overscanCount:2,useIsScrolling:!1},n}var I=function(e,t){e.children,e.direction,e.height,e.layout,e.innerTagName,e.outerTagName,e.width,t.instance},T=function(e,t,n){var r=e.itemSize,o=n.itemMetadataMap,a=n.lastMeasuredIndex;if(t>a){var i=0;if(a>=0){var u=o[a];i=u.offset+u.size}for(var l=a+1;l<=t;l++){var s=r(l);o[l]={offset:i,size:s},i+=s}n.lastMeasuredIndex=t}return o[t]},R=function(e,t,n,r,o){for(;r<=n;){var a=r+Math.floor((n-r)/2),i=T(e,a,t).offset;if(i===o)return a;i<o?r=a+1:i>o&&(n=a-1)}return r>0?r-1:0},N=function(e,t,n,r){for(var o=e.itemCount,a=1;n<o&&T(e,n,t).offset<r;)n+=a,a*=2;return R(e,t,Math.min(n,o-1),Math.floor(n/2),r)},L=function(e,t){var n=e.itemCount,r=t.itemMetadataMap,o=t.estimatedItemSize,a=t.lastMeasuredIndex,i=0;if(a>=n&&(a=n-1),a>=0){var u=r[a];i=u.offset+u.size}return i+(n-a-1)*o},j=M({getItemOffset:function(e,t,n){return T(e,t,n).offset},getItemSize:function(e,t,n){return n.itemMetadataMap[t].size},getEstimatedTotalSize:L,getOffsetForIndexAndAlignment:function(e,t,n,r,o){var a=e.direction,i=e.height,u=e.layout,l=e.width,s="horizontal"===a||"horizontal"===u?l:i,c=T(e,t,o),f=L(e,o),d=Math.max(0,Math.min(f-s,c.offset)),p=Math.max(0,c.offset-s+c.size);switch("smart"===n&&(n=r>=p-s&&r<=d+s?"auto":"center"),n){case"start":return d;case"end":return p;case"center":return Math.round(p+(d-p)/2);case"auto":default:return r>=p&&r<=d?r:r<p?p:d}},getStartIndexForOffset:function(e,t,n){return function(e,t,n){var r=t.itemMetadataMap,o=t.lastMeasuredIndex;return(o>0?r[o].offset:0)>=n?R(e,t,o,0,n):N(e,t,Math.max(0,o),n)}(e,n,t)},getStopIndexForStartIndex:function(e,t,n,r){for(var o=e.direction,a=e.height,i=e.itemCount,u=e.layout,l=e.width,s="horizontal"===o||"horizontal"===u?l:a,c=T(e,t,r),f=n+s,d=c.offset+c.size,p=t;p<i-1&&d<f;)p++,d+=T(e,p,r).size;return p},initInstanceProps:function(e,t){var n={itemMetadataMap:{},estimatedItemSize:e.estimatedItemSize||50,lastMeasuredIndex:-1};return t.resetAfterIndex=function(e,r){void 0===r&&(r=!0),n.lastMeasuredIndex=Math.min(n.lastMeasuredIndex,e-1),t._getItemStyleCache(-1),r&&t.forceUpdate()},n},shouldResetStyleCacheOnItemSizeChange:!1,validateProps:function(e){e.itemSize}}),F=y({getColumnOffset:function(e,t){return t*e.columnWidth},getColumnWidth:function(e,t){return e.columnWidth},getRowOffset:function(e,t){return t*e.rowHeight},getRowHeight:function(e,t){return e.rowHeight},getEstimatedTotalHeight:function(e){var t=e.rowCount;return e.rowHeight*t},getEstimatedTotalWidth:function(e){var t=e.columnCount;return e.columnWidth*t},getOffsetForColumnAndAlignment:function(e,t,n,r,o,a){var i=e.columnCount,u=e.columnWidth,l=e.width,s=Math.max(0,i*u-l),c=Math.min(s,t*u),f=Math.max(0,t*u-l+a+u);switch("smart"===n&&(n=r>=f-l&&r<=c+l?"auto":"center"),n){case"start":return c;case"end":return f;case"center":var d=Math.round(f+(c-f)/2);return d<Math.ceil(l/2)?0:d>s+Math.floor(l/2)?s:d;case"auto":default:return r>=f&&r<=c?r:f>c||r<f?f:c}},getOffsetForRowAndAlignment:function(e,t,n,r,o,a){var i=e.rowHeight,u=e.height,l=e.rowCount,s=Math.max(0,l*i-u),c=Math.min(s,t*i),f=Math.max(0,t*i-u+a+i);switch("smart"===n&&(n=r>=f-u&&r<=c+u?"auto":"center"),n){case"start":return c;case"end":return f;case"center":var d=Math.round(f+(c-f)/2);return d<Math.ceil(u/2)?0:d>s+Math.floor(u/2)?s:d;case"auto":default:return r>=f&&r<=c?r:f>c||r<f?f:c}},getColumnStartIndexForOffset:function(e,t){var n=e.columnWidth,r=e.columnCount;return Math.max(0,Math.min(r-1,Math.floor(t/n)))},getColumnStopIndexForStartIndex:function(e,t,n){var r=e.columnWidth,o=e.columnCount,a=e.width,i=t*r,u=Math.ceil((a+n-i)/r);return Math.max(0,Math.min(o-1,t+u-1))},getRowStartIndexForOffset:function(e,t){var n=e.rowHeight,r=e.rowCount;return Math.max(0,Math.min(r-1,Math.floor(t/n)))},getRowStopIndexForStartIndex:function(e,t,n){var r=e.rowHeight,o=e.rowCount,a=e.height,i=t*r,u=Math.ceil((a+n-i)/r);return Math.max(0,Math.min(o-1,t+u-1))},initInstanceProps:function(e){},shouldResetStyleCacheOnItemSizeChange:!0,validateProps:function(e){e.columnWidth,e.rowHeight}}),A=M({getItemOffset:function(e,t){return t*e.itemSize},getItemSize:function(e,t){return e.itemSize},getEstimatedTotalSize:function(e){var t=e.itemCount;return e.itemSize*t},getOffsetForIndexAndAlignment:function(e,t,n,r){var o=e.direction,a=e.height,i=e.itemCount,u=e.itemSize,l=e.layout,s=e.width,c="horizontal"===o||"horizontal"===l?s:a,f=Math.max(0,i*u-c),d=Math.min(f,t*u),p=Math.max(0,t*u-c+u);switch("smart"===n&&(n=r>=p-c&&r<=d+c?"auto":"center"),n){case"start":return d;case"end":return p;case"center":var h=Math.round(p+(d-p)/2);return h<Math.ceil(c/2)?0:h>f+Math.floor(c/2)?f:h;case"auto":default:return r>=p&&r<=d?r:r<p?p:d}},getStartIndexForOffset:function(e,t){var n=e.itemCount,r=e.itemSize;return Math.max(0,Math.min(n-1,Math.floor(t/r)))},getStopIndexForStartIndex:function(e,t,n){var r=e.direction,o=e.height,a=e.itemCount,i=e.itemSize,u=e.layout,l=e.width,s=t*i,c="horizontal"===r||"horizontal"===u?l:o,f=Math.ceil((c+n-s)/i);return Math.max(0,Math.min(a-1,t+f-1))},initInstanceProps:function(e){},shouldResetStyleCacheOnItemSizeChange:!0,validateProps:function(e){e.itemSize}});function D(e,t){for(var n in e)if(!(n in t))return!0;for(var r in t)if(e[r]!==t[r])return!0;return!1}function z(e,t){var n=e.style,r=Object(c.a)(e,["style"]),o=t.style,a=Object(c.a)(t,["style"]);return!D(n,o)&&!D(r,a)}function U(e,t){return!z(this.props,e)||D(this.state,t)}},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";var r=this&&this.__rest||function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=o(n(0)),i=o(n(10)),u=n(20),l=n(15),s=n(3),c=n(45),f=n(46),d=l.createStore((function(e,t){console.log("state before",e),console.log("action",t);var n=c.reducer(e,t);return console.log("state after",n),n}));d.subscribe((function(){var e=d.getState(),t=(e.counter,r(e,["counter"]));u.setExtensionState(t)})),i.default.render(a.default.createElement(s.Provider,{store:d},a.default.createElement(f.Viewer,null)),document.getElementById("viewer"))},function(e,t,n){"use strict";
/** @license React v17.0.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(19),o=60103,a=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var i=60109,u=60110,l=60112;t.Suspense=60113;var s=60115,c=60116;if("function"==typeof Symbol&&Symbol.for){var f=Symbol.for;o=f("react.element"),a=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),i=f("react.provider"),u=f("react.context"),l=f("react.forward_ref"),t.Suspense=f("react.suspense"),s=f("react.memo"),c=f("react.lazy")}var d="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m={};function v(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}function g(){}function y(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=v.prototype;var b=y.prototype=new g;b.constructor=y,r(b,v.prototype),b.isPureReactComponent=!0;var w={current:null},_=Object.prototype.hasOwnProperty,S={key:!0,ref:!0,__self:!0,__source:!0};function x(e,t,n){var r,a={},i=null,u=null;if(null!=t)for(r in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(i=""+t.key),t)_.call(t,r)&&!S.hasOwnProperty(r)&&(a[r]=t[r]);var l=arguments.length-2;if(1===l)a.children=n;else if(1<l){for(var s=Array(l),c=0;c<l;c++)s[c]=arguments[c+2];a.children=s}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===a[r]&&(a[r]=l[r]);return{$$typeof:o,type:e,key:i,ref:u,props:a,_owner:w.current}}function E(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var O=/\/+/g;function k(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function C(e,t,n,r,i){var u=typeof e;"undefined"!==u&&"boolean"!==u||(e=null);var l=!1;if(null===e)l=!0;else switch(u){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case o:case a:l=!0}}if(l)return i=i(l=e),e=""===r?"."+k(l,0):r,Array.isArray(i)?(n="",null!=e&&(n=e.replace(O,"$&/")+"/"),C(i,t,n,"",(function(e){return e}))):null!=i&&(E(i)&&(i=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,n+(!i.key||l&&l.key===i.key?"":(""+i.key).replace(O,"$&/")+"/")+e)),t.push(i)),1;if(l=0,r=""===r?".":r+":",Array.isArray(e))for(var s=0;s<e.length;s++){var c=r+k(u=e[s],s);l+=C(u,t,n,c,i)}else if("function"==typeof(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e)))for(e=c.call(e),s=0;!(u=e.next()).done;)l+=C(u=u.value,t,n,c=r+k(u,s++),i);else if("object"===u)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return l}function P(e,t,n){if(null==e)return e;var r=[],o=0;return C(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function M(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var I={current:null};function T(){var e=I.current;if(null===e)throw Error(p(321));return e}var R={ReactCurrentDispatcher:I,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:P,forEach:function(e,t,n){P(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return P(e,(function(){t++})),t},toArray:function(e){return P(e,(function(e){return e}))||[]},only:function(e){if(!E(e))throw Error(p(143));return e}},t.Component=v,t.PureComponent=y,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=R,t.cloneElement=function(e,t,n){if(null==e)throw Error(p(267,e));var a=r({},e.props),i=e.key,u=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(u=t.ref,l=w.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(c in t)_.call(t,c)&&!S.hasOwnProperty(c)&&(a[c]=void 0===t[c]&&void 0!==s?s[c]:t[c])}var c=arguments.length-2;if(1===c)a.children=n;else if(1<c){s=Array(c);for(var f=0;f<c;f++)s[f]=arguments[f+2];a.children=s}return{$$typeof:o,type:e.type,key:i,ref:u,props:a,_owner:l}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:u,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},t.createElement=x,t.createFactory=function(e){var t=x.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:l,render:e}},t.isValidElement=E,t.lazy=function(e){return{$$typeof:c,_payload:{_status:-1,_result:e},_init:M}},t.memo=function(e,t){return{$$typeof:s,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return T().useCallback(e,t)},t.useContext=function(e,t){return T().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return T().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return T().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return T().useLayoutEffect(e,t)},t.useMemo=function(e,t){return T().useMemo(e,t)},t.useReducer=function(e,t,n){return T().useReducer(e,t,n)},t.useRef=function(e){return T().useRef(e)},t.useState=function(e){return T().useState(e)},t.version="17.0.1"},function(e,t,n){"use strict";
/** @license React v17.0.1
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),o=n(19),a=n(37);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(i(227));var u=new Set,l={};function s(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(l[e]=t,e=0;e<t.length;e++)u.add(t[e])}var f=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,h={},m={};function v(e,t,n,r,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new v(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new v(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new v(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new v(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new v(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new v(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new v(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new v(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new v(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function w(e,t,n,r){var o=g.hasOwnProperty(t)?g[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!p.call(m,e)||!p.call(h,e)&&(d.test(e)?m[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,b);g[t]=new v(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,b);g[t]=new v(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,b);g[t]=new v(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new v(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new v(e,1,!1,e.toLowerCase(),null,!0,!0)}));var _=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,S=60103,x=60106,E=60107,O=60108,k=60114,C=60109,P=60110,M=60112,I=60113,T=60120,R=60115,N=60116,L=60121,j=60128,F=60129,A=60130,D=60131;if("function"==typeof Symbol&&Symbol.for){var z=Symbol.for;S=z("react.element"),x=z("react.portal"),E=z("react.fragment"),O=z("react.strict_mode"),k=z("react.profiler"),C=z("react.provider"),P=z("react.context"),M=z("react.forward_ref"),I=z("react.suspense"),T=z("react.suspense_list"),R=z("react.memo"),N=z("react.lazy"),L=z("react.block"),z("react.scope"),j=z("react.opaque.id"),F=z("react.debug_trace_mode"),A=z("react.offscreen"),D=z("react.legacy_hidden")}var U,B="function"==typeof Symbol&&Symbol.iterator;function V(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=B&&e[B]||e["@@iterator"])?e:null}function W(e){if(void 0===U)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);U=t&&t[1]||""}return"\n"+U+e}var H=!1;function $(e,t){if(!e||H)return"";H=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var o=e.stack.split("\n"),a=r.stack.split("\n"),i=o.length-1,u=a.length-1;1<=i&&0<=u&&o[i]!==a[u];)u--;for(;1<=i&&0<=u;i--,u--)if(o[i]!==a[u]){if(1!==i||1!==u)do{if(i--,0>--u||o[i]!==a[u])return"\n"+o[i].replace(" at new "," at ")}while(1<=i&&0<=u);break}}}finally{H=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?W(e):""}function q(e){switch(e.tag){case 5:return W(e.type);case 16:return W("Lazy");case 13:return W("Suspense");case 19:return W("SuspenseList");case 0:case 2:case 15:return e=$(e.type,!1);case 11:return e=$(e.type.render,!1);case 22:return e=$(e.type._render,!1);case 1:return e=$(e.type,!0);default:return""}}function Q(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case E:return"Fragment";case x:return"Portal";case k:return"Profiler";case O:return"StrictMode";case I:return"Suspense";case T:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case P:return(e.displayName||"Context")+".Consumer";case C:return(e._context.displayName||"Context")+".Provider";case M:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case R:return Q(e.type);case L:return Q(e._render);case N:t=e._payload,e=e._init;try{return Q(e(t))}catch(e){}}return null}function K(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Y(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function X(e){e._valueTracker||(e._valueTracker=function(e){var t=Y(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function G(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Y(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Z(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function J(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=K(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&w(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=K(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?oe(e,t.type,n):t.hasOwnProperty("defaultValue")&&oe(e,t.type,K(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function oe(e,t,n){"number"===t&&Z(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function ae(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ie(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+K(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function ue(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function le(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(i(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(i(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:K(n)}}function se(e,t){var n=K(t.value),r=K(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ce(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var fe="http://www.w3.org/1999/xhtml",de="http://www.w3.org/2000/svg";function pe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function he(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?pe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var me,ve=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==de||"innerHTML"in e)e.innerHTML=t;else{for((me=me||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=me.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function ge(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ye={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},be=["Webkit","ms","Moz","O"];function we(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ye.hasOwnProperty(e)&&ye[e]?(""+t).trim():t+"px"}function _e(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=we(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ye).forEach((function(e){be.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ye[t]=ye[e]}))}));var Se=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function xe(e,t){if(t){if(Se[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62))}}function Ee(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Oe(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var ke=null,Ce=null,Pe=null;function Me(e){if(e=Zr(e)){if("function"!=typeof ke)throw Error(i(280));var t=e.stateNode;t&&(t=eo(t),ke(e.stateNode,e.type,t))}}function Ie(e){Ce?Pe?Pe.push(e):Pe=[e]:Ce=e}function Te(){if(Ce){var e=Ce,t=Pe;if(Pe=Ce=null,Me(e),t)for(e=0;e<t.length;e++)Me(t[e])}}function Re(e,t){return e(t)}function Ne(e,t,n,r,o){return e(t,n,r,o)}function Le(){}var je=Re,Fe=!1,Ae=!1;function De(){null===Ce&&null===Pe||(Le(),Te())}function ze(e,t){var n=e.stateNode;if(null===n)return null;var r=eo(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var Ue=!1;if(f)try{var Be={};Object.defineProperty(Be,"passive",{get:function(){Ue=!0}}),window.addEventListener("test",Be,Be),window.removeEventListener("test",Be,Be)}catch(e){Ue=!1}function Ve(e,t,n,r,o,a,i,u,l){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var We=!1,He=null,$e=!1,qe=null,Qe={onError:function(e){We=!0,He=e}};function Ke(e,t,n,r,o,a,i,u,l){We=!1,He=null,Ve.apply(Qe,arguments)}function Ye(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Xe(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function Ge(e){if(Ye(e)!==e)throw Error(i(188))}function Ze(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ye(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){n=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===n)return Ge(o),e;if(a===r)return Ge(o),t;a=a.sibling}throw Error(i(188))}if(n.return!==r.return)n=o,r=a;else{for(var u=!1,l=o.child;l;){if(l===n){u=!0,n=o,r=a;break}if(l===r){u=!0,r=o,n=a;break}l=l.sibling}if(!u){for(l=a.child;l;){if(l===n){u=!0,n=a,r=o;break}if(l===r){u=!0,r=a,n=o;break}l=l.sibling}if(!u)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Je(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var et,tt,nt,rt,ot=!1,at=[],it=null,ut=null,lt=null,st=new Map,ct=new Map,ft=[],dt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function pt(e,t,n,r,o){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:o,targetContainers:[r]}}function ht(e,t){switch(e){case"focusin":case"focusout":it=null;break;case"dragenter":case"dragleave":ut=null;break;case"mouseover":case"mouseout":lt=null;break;case"pointerover":case"pointerout":st.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ct.delete(t.pointerId)}}function mt(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e=pt(t,n,r,o,a),null!==t&&(null!==(t=Zr(t))&&tt(t)),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function vt(e){var t=Gr(e.target);if(null!==t){var n=Ye(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Xe(n)))return e.blockedOn=t,void rt(e.lanePriority,(function(){a.unstable_runWithPriority(e.priority,(function(){nt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function gt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Zt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=Zr(n))&&tt(t),e.blockedOn=n,!1;t.shift()}return!0}function yt(e,t,n){gt(e)&&n.delete(t)}function bt(){for(ot=!1;0<at.length;){var e=at[0];if(null!==e.blockedOn){null!==(e=Zr(e.blockedOn))&&et(e);break}for(var t=e.targetContainers;0<t.length;){var n=Zt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&at.shift()}null!==it&&gt(it)&&(it=null),null!==ut&&gt(ut)&&(ut=null),null!==lt&&gt(lt)&&(lt=null),st.forEach(yt),ct.forEach(yt)}function wt(e,t){e.blockedOn===t&&(e.blockedOn=null,ot||(ot=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,bt)))}function _t(e){function t(t){return wt(t,e)}if(0<at.length){wt(at[0],e);for(var n=1;n<at.length;n++){var r=at[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==it&&wt(it,e),null!==ut&&wt(ut,e),null!==lt&&wt(lt,e),st.forEach(t),ct.forEach(t),n=0;n<ft.length;n++)(r=ft[n]).blockedOn===e&&(r.blockedOn=null);for(;0<ft.length&&null===(n=ft[0]).blockedOn;)vt(n),null===n.blockedOn&&ft.shift()}function St(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var xt={animationend:St("Animation","AnimationEnd"),animationiteration:St("Animation","AnimationIteration"),animationstart:St("Animation","AnimationStart"),transitionend:St("Transition","TransitionEnd")},Et={},Ot={};function kt(e){if(Et[e])return Et[e];if(!xt[e])return e;var t,n=xt[e];for(t in n)if(n.hasOwnProperty(t)&&t in Ot)return Et[e]=n[t];return e}f&&(Ot=document.createElement("div").style,"AnimationEvent"in window||(delete xt.animationend.animation,delete xt.animationiteration.animation,delete xt.animationstart.animation),"TransitionEvent"in window||delete xt.transitionend.transition);var Ct=kt("animationend"),Pt=kt("animationiteration"),Mt=kt("animationstart"),It=kt("transitionend"),Tt=new Map,Rt=new Map,Nt=["abort","abort",Ct,"animationEnd",Pt,"animationIteration",Mt,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",It,"transitionEnd","waiting","waiting"];function Lt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1];o="on"+(o[0].toUpperCase()+o.slice(1)),Rt.set(r,t),Tt.set(r,o),s(o,[r])}}(0,a.unstable_now)();var jt=8;function Ft(e){if(0!=(1&e))return jt=15,1;if(0!=(2&e))return jt=14,2;if(0!=(4&e))return jt=13,4;var t=24&e;return 0!==t?(jt=12,t):0!=(32&e)?(jt=11,32):0!==(t=192&e)?(jt=10,t):0!=(256&e)?(jt=9,256):0!==(t=3584&e)?(jt=8,t):0!=(4096&e)?(jt=7,4096):0!==(t=4186112&e)?(jt=6,t):0!==(t=62914560&e)?(jt=5,t):67108864&e?(jt=4,67108864):0!=(134217728&e)?(jt=3,134217728):0!==(t=805306368&e)?(jt=2,t):0!=(1073741824&e)?(jt=1,1073741824):(jt=8,e)}function At(e,t){var n=e.pendingLanes;if(0===n)return jt=0;var r=0,o=0,a=e.expiredLanes,i=e.suspendedLanes,u=e.pingedLanes;if(0!==a)r=a,o=jt=15;else if(0!==(a=134217727&n)){var l=a&~i;0!==l?(r=Ft(l),o=jt):0!==(u&=a)&&(r=Ft(u),o=jt)}else 0!==(a=n&~i)?(r=Ft(a),o=jt):0!==u&&(r=Ft(u),o=jt);if(0===r)return 0;if(r=n&((0>(r=31-Wt(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&i)){if(Ft(t),o<=jt)return t;jt=o}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-Wt(t)),r|=e[n],t&=~o;return r}function Dt(e){return 0!==(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function zt(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Ut(24&~t))?zt(10,t):e;case 10:return 0===(e=Ut(192&~t))?zt(8,t):e;case 8:return 0===(e=Ut(3584&~t))&&(0===(e=Ut(4186112&~t))&&(e=512)),e;case 2:return 0===(t=Ut(805306368&~t))&&(t=268435456),t}throw Error(i(358,e))}function Ut(e){return e&-e}function Bt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Vt(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-Wt(t)]=n}var Wt=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Ht(e)/$t|0)|0},Ht=Math.log,$t=Math.LN2;var qt=a.unstable_UserBlockingPriority,Qt=a.unstable_runWithPriority,Kt=!0;function Yt(e,t,n,r){Fe||Le();var o=Gt,a=Fe;Fe=!0;try{Ne(o,e,t,n,r)}finally{(Fe=a)||De()}}function Xt(e,t,n,r){Qt(qt,Gt.bind(null,e,t,n,r))}function Gt(e,t,n,r){var o;if(Kt)if((o=0==(4&t))&&0<at.length&&-1<dt.indexOf(e))e=pt(null,e,t,n,r),at.push(e);else{var a=Zt(e,t,n,r);if(null===a)o&&ht(e,r);else{if(o){if(-1<dt.indexOf(e))return e=pt(a,e,t,n,r),void at.push(e);if(function(e,t,n,r,o){switch(t){case"focusin":return it=mt(it,e,t,n,r,o),!0;case"dragenter":return ut=mt(ut,e,t,n,r,o),!0;case"mouseover":return lt=mt(lt,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return st.set(a,mt(st.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,ct.set(a,mt(ct.get(a)||null,e,t,n,r,o)),!0}return!1}(a,e,t,n,r))return;ht(e,r)}Ir(e,t,r,null,n)}}}function Zt(e,t,n,r){var o=Oe(r);if(null!==(o=Gr(o))){var a=Ye(o);if(null===a)o=null;else{var i=a.tag;if(13===i){if(null!==(o=Xe(a)))return o;o=null}else if(3===i){if(a.stateNode.hydrate)return 3===a.tag?a.stateNode.containerInfo:null;o=null}else a!==o&&(o=null)}}return Ir(e,t,r,o,n),null}var Jt=null,en=null,tn=null;function nn(){if(tn)return tn;var e,t,n=en,r=n.length,o="value"in Jt?Jt.value:Jt.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return tn=o.slice(e,1<t?1-t:void 0)}function rn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function on(){return!0}function an(){return!1}function un(e){function t(t,n,r,o,a){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?on:an,this.isPropagationStopped=an,this}return o(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=on)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=on)},persist:function(){},isPersistent:on}),t}var ln,sn,cn,fn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},dn=un(fn),pn=o({},fn,{view:0,detail:0}),hn=un(pn),mn=o({},pn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:kn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==cn&&(cn&&"mousemove"===e.type?(ln=e.screenX-cn.screenX,sn=e.screenY-cn.screenY):sn=ln=0,cn=e),ln)},movementY:function(e){return"movementY"in e?e.movementY:sn}}),vn=un(mn),gn=un(o({},mn,{dataTransfer:0})),yn=un(o({},pn,{relatedTarget:0})),bn=un(o({},fn,{animationName:0,elapsedTime:0,pseudoElement:0})),wn=un(o({},fn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),_n=un(o({},fn,{data:0})),Sn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},xn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},En={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function On(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=En[e])&&!!t[e]}function kn(){return On}var Cn=un(o({},pn,{key:function(e){if(e.key){var t=Sn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=rn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?xn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:kn,charCode:function(e){return"keypress"===e.type?rn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?rn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),Pn=un(o({},mn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Mn=un(o({},pn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:kn})),In=un(o({},fn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Tn=un(o({},mn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),Rn=[9,13,27,32],Nn=f&&"CompositionEvent"in window,Ln=null;f&&"documentMode"in document&&(Ln=document.documentMode);var jn=f&&"TextEvent"in window&&!Ln,Fn=f&&(!Nn||Ln&&8<Ln&&11>=Ln),An=String.fromCharCode(32),Dn=!1;function zn(e,t){switch(e){case"keyup":return-1!==Rn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Un(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Bn=!1;var Vn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Wn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Vn[e.type]:"textarea"===t}function Hn(e,t,n,r){Ie(r),0<(t=Rr(t,"onChange")).length&&(n=new dn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var $n=null,qn=null;function Qn(e){Er(e,0)}function Kn(e){if(G(Jr(e)))return e}function Yn(e,t){if("change"===e)return t}var Xn=!1;if(f){var Gn;if(f){var Zn="oninput"in document;if(!Zn){var Jn=document.createElement("div");Jn.setAttribute("oninput","return;"),Zn="function"==typeof Jn.oninput}Gn=Zn}else Gn=!1;Xn=Gn&&(!document.documentMode||9<document.documentMode)}function er(){$n&&($n.detachEvent("onpropertychange",tr),qn=$n=null)}function tr(e){if("value"===e.propertyName&&Kn(qn)){var t=[];if(Hn(t,qn,e,Oe(e)),e=Qn,Fe)e(t);else{Fe=!0;try{Re(e,t)}finally{Fe=!1,De()}}}}function nr(e,t,n){"focusin"===e?(er(),qn=n,($n=t).attachEvent("onpropertychange",tr)):"focusout"===e&&er()}function rr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Kn(qn)}function or(e,t){if("click"===e)return Kn(t)}function ar(e,t){if("input"===e||"change"===e)return Kn(t)}var ir="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},ur=Object.prototype.hasOwnProperty;function lr(e,t){if(ir(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!ur.call(t,n[r])||!ir(e[n[r]],t[n[r]]))return!1;return!0}function sr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=sr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=sr(r)}}function fr(){for(var e=window,t=Z();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Z((e=t.contentWindow).document)}return t}function dr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var pr=f&&"documentMode"in document&&11>=document.documentMode,hr=null,mr=null,vr=null,gr=!1;function yr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;gr||null==hr||hr!==Z(r)||("selectionStart"in(r=hr)&&dr(r)?r={start:r.selectionStart,end:r.selectionEnd}:r={anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},vr&&lr(vr,r)||(vr=r,0<(r=Rr(mr,"onSelect")).length&&(t=new dn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=hr)))}Lt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Lt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Lt(Nt,2);for(var br="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),wr=0;wr<br.length;wr++)Rt.set(br[wr],0);c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),s("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),s("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),s("onBeforeInput",["compositionend","keypress","textInput","paste"]),s("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var _r="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Sr=new Set("cancel close invalid load scroll toggle".split(" ").concat(_r));function xr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,a,u,l,s){if(Ke.apply(this,arguments),We){if(!We)throw Error(i(198));var c=He;We=!1,He=null,$e||($e=!0,qe=c)}}(r,t,void 0,e),e.currentTarget=null}function Er(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var i=r.length-1;0<=i;i--){var u=r[i],l=u.instance,s=u.currentTarget;if(u=u.listener,l!==a&&o.isPropagationStopped())break e;xr(o,u,s),a=l}else for(i=0;i<r.length;i++){if(l=(u=r[i]).instance,s=u.currentTarget,u=u.listener,l!==a&&o.isPropagationStopped())break e;xr(o,u,s),a=l}}}if($e)throw e=qe,$e=!1,qe=null,e}function Or(e,t){var n=to(t),r=e+"__bubble";n.has(r)||(Mr(t,e,2,!1),n.add(r))}var kr="_reactListening"+Math.random().toString(36).slice(2);function Cr(e){e[kr]||(e[kr]=!0,u.forEach((function(t){Sr.has(t)||Pr(t,!1,e,null),Pr(t,!0,e,null)})))}function Pr(e,t,n,r){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,a=n;if("selectionchange"===e&&9!==n.nodeType&&(a=n.ownerDocument),null!==r&&!t&&Sr.has(e)){if("scroll"!==e)return;o|=2,a=r}var i=to(a),u=e+"__"+(t?"capture":"bubble");i.has(u)||(t&&(o|=4),Mr(a,e,o,t),i.add(u))}function Mr(e,t,n,r){var o=Rt.get(t);switch(void 0===o?2:o){case 0:o=Yt;break;case 1:o=Xt;break;default:o=Gt}n=o.bind(null,t,n,e),o=void 0,!Ue||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Ir(e,t,n,r,o){var a=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var u=r.stateNode.containerInfo;if(u===o||8===u.nodeType&&u.parentNode===o)break;if(4===i)for(i=r.return;null!==i;){var l=i.tag;if((3===l||4===l)&&((l=i.stateNode.containerInfo)===o||8===l.nodeType&&l.parentNode===o))return;i=i.return}for(;null!==u;){if(null===(i=Gr(u)))return;if(5===(l=i.tag)||6===l){r=a=i;continue e}u=u.parentNode}}r=r.return}!function(e,t,n){if(Ae)return e(t,n);Ae=!0;try{je(e,t,n)}finally{Ae=!1,De()}}((function(){var r=a,o=Oe(n),i=[];e:{var u=Tt.get(e);if(void 0!==u){var l=dn,s=e;switch(e){case"keypress":if(0===rn(n))break e;case"keydown":case"keyup":l=Cn;break;case"focusin":s="focus",l=yn;break;case"focusout":s="blur",l=yn;break;case"beforeblur":case"afterblur":l=yn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=vn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=gn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=Mn;break;case Ct:case Pt:case Mt:l=bn;break;case It:l=In;break;case"scroll":l=hn;break;case"wheel":l=Tn;break;case"copy":case"cut":case"paste":l=wn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=Pn}var c=0!=(4&t),f=!c&&"scroll"===e,d=c?null!==u?u+"Capture":null:u;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&(null!=(m=ze(h,d))&&c.push(Tr(h,m,p)))),f)break;h=h.return}0<c.length&&(u=new l(u,s,null,n,o),i.push({event:u,listeners:c}))}}if(0==(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(u="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(s=n.relatedTarget||n.fromElement)||!Gr(s)&&!s[Yr])&&(l||u)&&(u=o.window===o?o:(u=o.ownerDocument)?u.defaultView||u.parentWindow:window,l?(l=r,null!==(s=(s=n.relatedTarget||n.toElement)?Gr(s):null)&&(s!==(f=Ye(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(l=null,s=r),l!==s)){if(c=vn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Pn,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==l?u:Jr(l),p=null==s?u:Jr(s),(u=new c(m,h+"leave",l,n,o)).target=f,u.relatedTarget=p,m=null,Gr(o)===r&&((c=new c(d,h+"enter",s,n,o)).target=p,c.relatedTarget=f,m=c),f=m,l&&s)e:{for(d=s,h=0,p=c=l;p;p=Nr(p))h++;for(p=0,m=d;m;m=Nr(m))p++;for(;0<h-p;)c=Nr(c),h--;for(;0<p-h;)d=Nr(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=Nr(c),d=Nr(d)}c=null}else c=null;null!==l&&Lr(i,u,l,c,!1),null!==s&&null!==f&&Lr(i,f,s,c,!0)}if("select"===(l=(u=r?Jr(r):window).nodeName&&u.nodeName.toLowerCase())||"input"===l&&"file"===u.type)var v=Yn;else if(Wn(u))if(Xn)v=ar;else{v=rr;var g=nr}else(l=u.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===u.type||"radio"===u.type)&&(v=or);switch(v&&(v=v(e,r))?Hn(i,v,n,o):(g&&g(e,u,r),"focusout"===e&&(g=u._wrapperState)&&g.controlled&&"number"===u.type&&oe(u,"number",u.value)),g=r?Jr(r):window,e){case"focusin":(Wn(g)||"true"===g.contentEditable)&&(hr=g,mr=r,vr=null);break;case"focusout":vr=mr=hr=null;break;case"mousedown":gr=!0;break;case"contextmenu":case"mouseup":case"dragend":gr=!1,yr(i,n,o);break;case"selectionchange":if(pr)break;case"keydown":case"keyup":yr(i,n,o)}var y;if(Nn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Bn?zn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Fn&&"ko"!==n.locale&&(Bn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Bn&&(y=nn()):(en="value"in(Jt=o)?Jt.value:Jt.textContent,Bn=!0)),0<(g=Rr(r,b)).length&&(b=new _n(b,e,null,n,o),i.push({event:b,listeners:g}),y?b.data=y:null!==(y=Un(n))&&(b.data=y))),(y=jn?function(e,t){switch(e){case"compositionend":return Un(t);case"keypress":return 32!==t.which?null:(Dn=!0,An);case"textInput":return(e=t.data)===An&&Dn?null:e;default:return null}}(e,n):function(e,t){if(Bn)return"compositionend"===e||!Nn&&zn(e,t)?(e=nn(),tn=en=Jt=null,Bn=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Fn&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))&&(0<(r=Rr(r,"onBeforeInput")).length&&(o=new _n("onBeforeInput","beforeinput",null,n,o),i.push({event:o,listeners:r}),o.data=y))}Er(i,t)}))}function Tr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Rr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,a=o.stateNode;5===o.tag&&null!==a&&(o=a,null!=(a=ze(e,n))&&r.unshift(Tr(e,a,o)),null!=(a=ze(e,t))&&r.push(Tr(e,a,o))),e=e.return}return r}function Nr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Lr(e,t,n,r,o){for(var a=t._reactName,i=[];null!==n&&n!==r;){var u=n,l=u.alternate,s=u.stateNode;if(null!==l&&l===r)break;5===u.tag&&null!==s&&(u=s,o?null!=(l=ze(n,a))&&i.unshift(Tr(n,l,u)):o||null!=(l=ze(n,a))&&i.push(Tr(n,l,u))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}function jr(){}var Fr=null,Ar=null;function Dr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function zr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Ur="function"==typeof setTimeout?setTimeout:void 0,Br="function"==typeof clearTimeout?clearTimeout:void 0;function Vr(e){1===e.nodeType?e.textContent="":9===e.nodeType&&(null!=(e=e.body)&&(e.textContent=""))}function Wr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Hr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var $r=0;var qr=Math.random().toString(36).slice(2),Qr="__reactFiber$"+qr,Kr="__reactProps$"+qr,Yr="__reactContainer$"+qr,Xr="__reactEvents$"+qr;function Gr(e){var t=e[Qr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Yr]||n[Qr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Hr(e);null!==e;){if(n=e[Qr])return n;e=Hr(e)}return t}n=(e=n).parentNode}return null}function Zr(e){return!(e=e[Qr]||e[Yr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Jr(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function eo(e){return e[Kr]||null}function to(e){var t=e[Xr];return void 0===t&&(t=e[Xr]=new Set),t}var no=[],ro=-1;function oo(e){return{current:e}}function ao(e){0>ro||(e.current=no[ro],no[ro]=null,ro--)}function io(e,t){ro++,no[ro]=e.current,e.current=t}var uo={},lo=oo(uo),so=oo(!1),co=uo;function fo(e,t){var n=e.type.contextTypes;if(!n)return uo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function po(e){return null!=(e=e.childContextTypes)}function ho(){ao(so),ao(lo)}function mo(e,t,n){if(lo.current!==uo)throw Error(i(168));io(lo,t),io(so,n)}function vo(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in e))throw Error(i(108,Q(t)||"Unknown",a));return o({},n,r)}function go(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||uo,co=lo.current,io(lo,e),io(so,so.current),!0}function yo(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(e=vo(e,t,co),r.__reactInternalMemoizedMergedChildContext=e,ao(so),ao(lo),io(lo,e)):ao(so),io(so,n)}var bo=null,wo=null,_o=a.unstable_runWithPriority,So=a.unstable_scheduleCallback,xo=a.unstable_cancelCallback,Eo=a.unstable_shouldYield,Oo=a.unstable_requestPaint,ko=a.unstable_now,Co=a.unstable_getCurrentPriorityLevel,Po=a.unstable_ImmediatePriority,Mo=a.unstable_UserBlockingPriority,Io=a.unstable_NormalPriority,To=a.unstable_LowPriority,Ro=a.unstable_IdlePriority,No={},Lo=void 0!==Oo?Oo:function(){},jo=null,Fo=null,Ao=!1,Do=ko(),zo=1e4>Do?ko:function(){return ko()-Do};function Uo(){switch(Co()){case Po:return 99;case Mo:return 98;case Io:return 97;case To:return 96;case Ro:return 95;default:throw Error(i(332))}}function Bo(e){switch(e){case 99:return Po;case 98:return Mo;case 97:return Io;case 96:return To;case 95:return Ro;default:throw Error(i(332))}}function Vo(e,t){return e=Bo(e),_o(e,t)}function Wo(e,t,n){return e=Bo(e),So(e,t,n)}function Ho(){if(null!==Fo){var e=Fo;Fo=null,xo(e)}$o()}function $o(){if(!Ao&&null!==jo){Ao=!0;var e=0;try{var t=jo;Vo(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),jo=null}catch(t){throw null!==jo&&(jo=jo.slice(e+1)),So(Po,Ho),t}finally{Ao=!1}}}var qo=_.ReactCurrentBatchConfig;function Qo(e,t){if(e&&e.defaultProps){for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Ko=oo(null),Yo=null,Xo=null,Go=null;function Zo(){Go=Xo=Yo=null}function Jo(e){var t=Ko.current;ao(Ko),e.type._context._currentValue=t}function ea(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function ta(e,t){Yo=e,Go=Xo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Ri=!0),e.firstContext=null)}function na(e,t){if(Go!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Go=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Xo){if(null===Yo)throw Error(i(308));Xo=t,Yo.dependencies={lanes:0,firstContext:t,responders:null}}else Xo=Xo.next=t;return e._currentValue}var ra=!1;function oa(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function aa(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ia(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function ua(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function la(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===a?o=a=i:a=a.next=i,n=n.next}while(null!==n);null===a?o=a=t:a=a.next=t}else o=a=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function sa(e,t,n,r){var a=e.updateQueue;ra=!1;var i=a.firstBaseUpdate,u=a.lastBaseUpdate,l=a.shared.pending;if(null!==l){a.shared.pending=null;var s=l,c=s.next;s.next=null,null===u?i=c:u.next=c,u=s;var f=e.alternate;if(null!==f){var d=(f=f.updateQueue).lastBaseUpdate;d!==u&&(null===d?f.firstBaseUpdate=c:d.next=c,f.lastBaseUpdate=s)}}if(null!==i){for(d=a.baseState,u=0,f=c=s=null;;){l=i.lane;var p=i.eventTime;if((r&l)===l){null!==f&&(f=f.next={eventTime:p,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var h=e,m=i;switch(l=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){d=h.call(p,d,l);break e}d=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null==(l="function"==typeof(h=m.payload)?h.call(p,d,l):h))break e;d=o({},d,l);break e;case 2:ra=!0}}null!==i.callback&&(e.flags|=32,null===(l=a.effects)?a.effects=[i]:l.push(i))}else p={eventTime:p,lane:l,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===f?(c=f=p,s=d):f=f.next=p,u|=l;if(null===(i=i.next)){if(null===(l=a.shared.pending))break;i=l.next,l.next=null,a.lastBaseUpdate=l,a.shared.pending=null}}null===f&&(s=d),a.baseState=s,a.firstBaseUpdate=c,a.lastBaseUpdate=f,Lu|=u,e.lanes=u,e.memoizedState=d}}function ca(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(i(191,o));o.call(r)}}}var fa=(new r.Component).refs;function da(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var pa={isMounted:function(e){return!!(e=e._reactInternals)&&Ye(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=al(),o=il(e),a=ia(r,o);a.payload=t,null!=n&&(a.callback=n),ua(e,a),ul(e,o,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=al(),o=il(e),a=ia(r,o);a.tag=1,a.payload=t,null!=n&&(a.callback=n),ua(e,a),ul(e,o,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=al(),r=il(e),o=ia(n,r);o.tag=2,null!=t&&(o.callback=t),ua(e,o),ul(e,r,n)}};function ha(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!t.prototype||!t.prototype.isPureReactComponent||(!lr(n,r)||!lr(o,a))}function ma(e,t,n){var r=!1,o=uo,a=t.contextType;return"object"==typeof a&&null!==a?a=na(a):(o=po(t)?co:lo.current,a=(r=null!=(r=t.contextTypes))?fo(e,o):uo),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=pa,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function va(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&pa.enqueueReplaceState(t,t.state,null)}function ga(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=fa,oa(e);var a=t.contextType;"object"==typeof a&&null!==a?o.context=na(a):(a=po(t)?co:lo.current,o.context=fo(e,a)),sa(e,n,o,r),o.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(da(e,t,a,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&pa.enqueueReplaceState(o,o.state,null),sa(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4)}var ya=Array.isArray;function ba(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===fa&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function wa(e,t){if("textarea"!==e.type)throw Error(i(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function _a(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=zl(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function u(t){return e&&null===t.alternate&&(t.flags=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Wl(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function s(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=ba(e,t,n),r.return=e,r):((r=Ul(n.type,n.key,n.props,null,e.mode,r)).ref=ba(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Hl(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,a){return null===t||7!==t.tag?((t=Bl(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Wl(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case S:return(n=Ul(t.type,t.key,t.props,null,e.mode,n)).ref=ba(e,null,t),n.return=e,n;case x:return(t=Hl(t,e.mode,n)).return=e,t}if(ya(t)||V(t))return(t=Bl(t,e.mode,n,null)).return=e,t;wa(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case S:return n.key===o?n.type===E?f(e,t,n.props.children,r,o):s(e,t,n,r):null;case x:return n.key===o?c(e,t,n,r):null}if(ya(n)||V(n))return null!==o?null:f(e,t,n,r,null);wa(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case S:return e=e.get(null===r.key?n:r.key)||null,r.type===E?f(t,e,r.props.children,o,r.key):s(t,e,r,o);case x:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(ya(r)||V(r))return f(t,e=e.get(n)||null,r,o,null);wa(t,r)}return null}function m(o,i,u,l){for(var s=null,c=null,f=i,m=i=0,v=null;null!==f&&m<u.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var g=p(o,f,u[m],l);if(null===g){null===f&&(f=v);break}e&&f&&null===g.alternate&&t(o,f),i=a(g,i,m),null===c?s=g:c.sibling=g,c=g,f=v}if(m===u.length)return n(o,f),s;if(null===f){for(;m<u.length;m++)null!==(f=d(o,u[m],l))&&(i=a(f,i,m),null===c?s=f:c.sibling=f,c=f);return s}for(f=r(o,f);m<u.length;m++)null!==(v=h(f,o,m,u[m],l))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),i=a(v,i,m),null===c?s=v:c.sibling=v,c=v);return e&&f.forEach((function(e){return t(o,e)})),s}function v(o,u,l,s){var c=V(l);if("function"!=typeof c)throw Error(i(150));if(null==(l=c.call(l)))throw Error(i(151));for(var f=c=null,m=u,v=u=0,g=null,y=l.next();null!==m&&!y.done;v++,y=l.next()){m.index>v?(g=m,m=null):g=m.sibling;var b=p(o,m,y.value,s);if(null===b){null===m&&(m=g);break}e&&m&&null===b.alternate&&t(o,m),u=a(b,u,v),null===f?c=b:f.sibling=b,f=b,m=g}if(y.done)return n(o,m),c;if(null===m){for(;!y.done;v++,y=l.next())null!==(y=d(o,y.value,s))&&(u=a(y,u,v),null===f?c=y:f.sibling=y,f=y);return c}for(m=r(o,m);!y.done;v++,y=l.next())null!==(y=h(m,o,v,y.value,s))&&(e&&null!==y.alternate&&m.delete(null===y.key?v:y.key),u=a(y,u,v),null===f?c=y:f.sibling=y,f=y);return e&&m.forEach((function(e){return t(o,e)})),c}return function(e,r,a,l){var s="object"==typeof a&&null!==a&&a.type===E&&null===a.key;s&&(a=a.props.children);var c="object"==typeof a&&null!==a;if(c)switch(a.$$typeof){case S:e:{for(c=a.key,s=r;null!==s;){if(s.key===c){switch(s.tag){case 7:if(a.type===E){n(e,s.sibling),(r=o(s,a.props.children)).return=e,e=r;break e}break;default:if(s.elementType===a.type){n(e,s.sibling),(r=o(s,a.props)).ref=ba(e,s,a),r.return=e,e=r;break e}}n(e,s);break}t(e,s),s=s.sibling}a.type===E?((r=Bl(a.props.children,e.mode,l,a.key)).return=e,e=r):((l=Ul(a.type,a.key,a.props,null,e.mode,l)).ref=ba(e,r,a),l.return=e,e=l)}return u(e);case x:e:{for(s=a.key;null!==r;){if(r.key===s){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){n(e,r.sibling),(r=o(r,a.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Hl(a,e.mode,l)).return=e,e=r}return u(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,a)).return=e,e=r):(n(e,r),(r=Wl(a,e.mode,l)).return=e,e=r),u(e);if(ya(a))return m(e,r,a,l);if(V(a))return v(e,r,a,l);if(c&&wa(e,a),void 0===a&&!s)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(i(152,Q(e.type)||"Component"))}return n(e,r)}}var Sa=_a(!0),xa=_a(!1),Ea={},Oa=oo(Ea),ka=oo(Ea),Ca=oo(Ea);function Pa(e){if(e===Ea)throw Error(i(174));return e}function Ma(e,t){switch(io(Ca,t),io(ka,e),io(Oa,Ea),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:he(null,"");break;default:t=he(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}ao(Oa),io(Oa,t)}function Ia(){ao(Oa),ao(ka),ao(Ca)}function Ta(e){Pa(Ca.current);var t=Pa(Oa.current),n=he(t,e.type);t!==n&&(io(ka,e),io(Oa,n))}function Ra(e){ka.current===e&&(ao(Oa),ao(ka))}var Na=oo(0);function La(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ja=null,Fa=null,Aa=!1;function Da(e,t){var n=Al(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function za(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Ua(e){if(Aa){var t=Fa;if(t){var n=t;if(!za(e,t)){if(!(t=Wr(n.nextSibling))||!za(e,t))return e.flags=-1025&e.flags|2,Aa=!1,void(ja=e);Da(ja,n)}ja=e,Fa=Wr(t.firstChild)}else e.flags=-1025&e.flags|2,Aa=!1,ja=e}}function Ba(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ja=e}function Va(e){if(e!==ja)return!1;if(!Aa)return Ba(e),Aa=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!zr(t,e.memoizedProps))for(t=Fa;t;)Da(e,t),t=Wr(t.nextSibling);if(Ba(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Fa=Wr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Fa=null}}else Fa=ja?Wr(e.stateNode.nextSibling):null;return!0}function Wa(){Fa=ja=null,Aa=!1}var Ha=[];function $a(){for(var e=0;e<Ha.length;e++)Ha[e]._workInProgressVersionPrimary=null;Ha.length=0}var qa=_.ReactCurrentDispatcher,Qa=_.ReactCurrentBatchConfig,Ka=0,Ya=null,Xa=null,Ga=null,Za=!1,Ja=!1;function ei(){throw Error(i(321))}function ti(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ir(e[n],t[n]))return!1;return!0}function ni(e,t,n,r,o,a){if(Ka=a,Ya=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,qa.current=null===e||null===e.memoizedState?Pi:Mi,e=n(r,o),Ja){a=0;do{if(Ja=!1,!(25>a))throw Error(i(301));a+=1,Ga=Xa=null,t.updateQueue=null,qa.current=Ii,e=n(r,o)}while(Ja)}if(qa.current=Ci,t=null!==Xa&&null!==Xa.next,Ka=0,Ga=Xa=Ya=null,Za=!1,t)throw Error(i(300));return e}function ri(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Ga?Ya.memoizedState=Ga=e:Ga=Ga.next=e,Ga}function oi(){if(null===Xa){var e=Ya.alternate;e=null!==e?e.memoizedState:null}else e=Xa.next;var t=null===Ga?Ya.memoizedState:Ga.next;if(null!==t)Ga=t,Xa=e;else{if(null===e)throw Error(i(310));e={memoizedState:(Xa=e).memoizedState,baseState:Xa.baseState,baseQueue:Xa.baseQueue,queue:Xa.queue,next:null},null===Ga?Ya.memoizedState=Ga=e:Ga=Ga.next=e}return Ga}function ai(e,t){return"function"==typeof t?t(e):t}function ii(e){var t=oi(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=Xa,o=r.baseQueue,a=n.pending;if(null!==a){if(null!==o){var u=o.next;o.next=a.next,a.next=u}r.baseQueue=o=a,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var l=u=a=null,s=o;do{var c=s.lane;if((Ka&c)===c)null!==l&&(l=l.next={lane:0,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null}),r=s.eagerReducer===e?s.eagerState:e(r,s.action);else{var f={lane:c,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null};null===l?(u=l=f,a=r):l=l.next=f,Ya.lanes|=c,Lu|=c}s=s.next}while(null!==s&&s!==o);null===l?a=r:l.next=u,ir(r,t.memoizedState)||(Ri=!0),t.memoizedState=r,t.baseState=a,t.baseQueue=l,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function ui(e){var t=oi(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,a=t.memoizedState;if(null!==o){n.pending=null;var u=o=o.next;do{a=e(a,u.action),u=u.next}while(u!==o);ir(a,t.memoizedState)||(Ri=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function li(e,t,n){var r=t._getVersion;r=r(t._source);var o=t._workInProgressVersionPrimary;if(null!==o?e=o===r:(e=e.mutableReadLanes,(e=(Ka&e)===e)&&(t._workInProgressVersionPrimary=r,Ha.push(t))),e)return n(t._source);throw Ha.push(t),Error(i(350))}function si(e,t,n,r){var o=ku;if(null===o)throw Error(i(349));var a=t._getVersion,u=a(t._source),l=qa.current,s=l.useState((function(){return li(o,t,n)})),c=s[1],f=s[0];s=Ga;var d=e.memoizedState,p=d.refs,h=p.getSnapshot,m=d.source;d=d.subscribe;var v=Ya;return e.memoizedState={refs:p,source:t,subscribe:r},l.useEffect((function(){p.getSnapshot=n,p.setSnapshot=c;var e=a(t._source);if(!ir(u,e)){e=n(t._source),ir(f,e)||(c(e),e=il(v),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var r=o.entanglements,i=e;0<i;){var l=31-Wt(i),s=1<<l;r[l]|=e,i&=~s}}}),[n,t,r]),l.useEffect((function(){return r(t._source,(function(){var e=p.getSnapshot,n=p.setSnapshot;try{n(e(t._source));var r=il(v);o.mutableReadLanes|=r&o.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),ir(h,n)&&ir(m,t)&&ir(d,r)||((e={pending:null,dispatch:null,lastRenderedReducer:ai,lastRenderedState:f}).dispatch=c=ki.bind(null,Ya,e),s.queue=e,s.baseQueue=null,f=li(o,t,n),s.memoizedState=s.baseState=f),f}function ci(e,t,n){return si(oi(),e,t,n)}function fi(e){var t=ri();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:ai,lastRenderedState:e}).dispatch=ki.bind(null,Ya,e),[t.memoizedState,e]}function di(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Ya.updateQueue)?(t={lastEffect:null},Ya.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function pi(e){return e={current:e},ri().memoizedState=e}function hi(){return oi().memoizedState}function mi(e,t,n,r){var o=ri();Ya.flags|=e,o.memoizedState=di(1|t,n,void 0,void 0===r?null:r)}function vi(e,t,n,r){var o=oi();r=void 0===r?null:r;var a=void 0;if(null!==Xa){var i=Xa.memoizedState;if(a=i.destroy,null!==r&&ti(r,i.deps))return void di(t,n,a,r)}Ya.flags|=e,o.memoizedState=di(1|t,n,a,r)}function gi(e,t){return mi(516,4,e,t)}function yi(e,t){return vi(516,4,e,t)}function bi(e,t){return vi(4,2,e,t)}function wi(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function _i(e,t,n){return n=null!=n?n.concat([e]):null,vi(4,2,wi.bind(null,t,e),n)}function Si(){}function xi(e,t){var n=oi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ti(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Ei(e,t){var n=oi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ti(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Oi(e,t){var n=Uo();Vo(98>n?98:n,(function(){e(!0)})),Vo(97<n?97:n,(function(){var n=Qa.transition;Qa.transition=1;try{e(!1),t()}finally{Qa.transition=n}}))}function ki(e,t,n){var r=al(),o=il(e),a={lane:o,action:n,eagerReducer:null,eagerState:null,next:null},i=t.pending;if(null===i?a.next=a:(a.next=i.next,i.next=a),t.pending=a,i=e.alternate,e===Ya||null!==i&&i===Ya)Ja=Za=!0;else{if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var u=t.lastRenderedState,l=i(u,n);if(a.eagerReducer=i,a.eagerState=l,ir(l,u))return}catch(e){}ul(e,o,r)}}var Ci={readContext:na,useCallback:ei,useContext:ei,useEffect:ei,useImperativeHandle:ei,useLayoutEffect:ei,useMemo:ei,useReducer:ei,useRef:ei,useState:ei,useDebugValue:ei,useDeferredValue:ei,useTransition:ei,useMutableSource:ei,useOpaqueIdentifier:ei,unstable_isNewReconciler:!1},Pi={readContext:na,useCallback:function(e,t){return ri().memoizedState=[e,void 0===t?null:t],e},useContext:na,useEffect:gi,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,mi(4,2,wi.bind(null,t,e),n)},useLayoutEffect:function(e,t){return mi(4,2,e,t)},useMemo:function(e,t){var n=ri();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=ri();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=ki.bind(null,Ya,e),[r.memoizedState,e]},useRef:pi,useState:fi,useDebugValue:Si,useDeferredValue:function(e){var t=fi(e),n=t[0],r=t[1];return gi((function(){var t=Qa.transition;Qa.transition=1;try{r(e)}finally{Qa.transition=t}}),[e]),n},useTransition:function(){var e=fi(!1),t=e[0];return pi(e=Oi.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=ri();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},si(r,e,t,n)},useOpaqueIdentifier:function(){if(Aa){var e=!1,t=function(e){return{$$typeof:j,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+($r++).toString(36))),Error(i(355))})),n=fi(t)[1];return 0==(2&Ya.mode)&&(Ya.flags|=516,di(5,(function(){n("r:"+($r++).toString(36))}),void 0,null)),t}return fi(t="r:"+($r++).toString(36)),t},unstable_isNewReconciler:!1},Mi={readContext:na,useCallback:xi,useContext:na,useEffect:yi,useImperativeHandle:_i,useLayoutEffect:bi,useMemo:Ei,useReducer:ii,useRef:hi,useState:function(){return ii(ai)},useDebugValue:Si,useDeferredValue:function(e){var t=ii(ai),n=t[0],r=t[1];return yi((function(){var t=Qa.transition;Qa.transition=1;try{r(e)}finally{Qa.transition=t}}),[e]),n},useTransition:function(){var e=ii(ai)[0];return[hi().current,e]},useMutableSource:ci,useOpaqueIdentifier:function(){return ii(ai)[0]},unstable_isNewReconciler:!1},Ii={readContext:na,useCallback:xi,useContext:na,useEffect:yi,useImperativeHandle:_i,useLayoutEffect:bi,useMemo:Ei,useReducer:ui,useRef:hi,useState:function(){return ui(ai)},useDebugValue:Si,useDeferredValue:function(e){var t=ui(ai),n=t[0],r=t[1];return yi((function(){var t=Qa.transition;Qa.transition=1;try{r(e)}finally{Qa.transition=t}}),[e]),n},useTransition:function(){var e=ui(ai)[0];return[hi().current,e]},useMutableSource:ci,useOpaqueIdentifier:function(){return ui(ai)[0]},unstable_isNewReconciler:!1},Ti=_.ReactCurrentOwner,Ri=!1;function Ni(e,t,n,r){t.child=null===e?xa(t,null,n,r):Sa(t,e.child,n,r)}function Li(e,t,n,r,o){n=n.render;var a=t.ref;return ta(t,o),r=ni(e,t,n,r,a,o),null===e||Ri?(t.flags|=1,Ni(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,eu(e,t,o))}function ji(e,t,n,r,o,a){if(null===e){var i=n.type;return"function"!=typeof i||Dl(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ul(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,Fi(e,t,i,r,o,a))}return i=e.child,0==(o&a)&&(o=i.memoizedProps,(n=null!==(n=n.compare)?n:lr)(o,r)&&e.ref===t.ref)?eu(e,t,a):(t.flags|=1,(e=zl(i,r)).ref=t.ref,e.return=t,t.child=e)}function Fi(e,t,n,r,o,a){if(null!==e&&lr(e.memoizedProps,r)&&e.ref===t.ref){if(Ri=!1,0==(a&o))return t.lanes=e.lanes,eu(e,t,a);0!=(16384&e.flags)&&(Ri=!0)}return zi(e,t,n,r,a)}function Ai(e,t,n){var r=t.pendingProps,o=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},ml(t,n);else{if(0==(1073741824&n))return e=null!==a?a.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},ml(t,e),null;t.memoizedState={baseLanes:0},ml(t,null!==a?a.baseLanes:n)}else null!==a?(r=a.baseLanes|n,t.memoizedState=null):r=n,ml(t,r);return Ni(e,t,o,n),t.child}function Di(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function zi(e,t,n,r,o){var a=po(n)?co:lo.current;return a=fo(t,a),ta(t,o),n=ni(e,t,n,r,a,o),null===e||Ri?(t.flags|=1,Ni(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,eu(e,t,o))}function Ui(e,t,n,r,o){if(po(n)){var a=!0;go(t)}else a=!1;if(ta(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),ma(t,n,r),ga(t,n,r,o),r=!0;else if(null===e){var i=t.stateNode,u=t.memoizedProps;i.props=u;var l=i.context,s=n.contextType;"object"==typeof s&&null!==s?s=na(s):s=fo(t,s=po(n)?co:lo.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(u!==r||l!==s)&&va(t,i,r,s),ra=!1;var d=t.memoizedState;i.state=d,sa(t,r,i,o),l=t.memoizedState,u!==r||d!==l||so.current||ra?("function"==typeof c&&(da(t,n,c,r),l=t.memoizedState),(u=ra||ha(t,n,u,r,d,l,s))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4)):("function"==typeof i.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=l),i.props=r,i.state=l,i.context=s,r=u):("function"==typeof i.componentDidMount&&(t.flags|=4),r=!1)}else{i=t.stateNode,aa(e,t),u=t.memoizedProps,s=t.type===t.elementType?u:Qo(t.type,u),i.props=s,f=t.pendingProps,d=i.context,"object"==typeof(l=n.contextType)&&null!==l?l=na(l):l=fo(t,l=po(n)?co:lo.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(u!==f||d!==l)&&va(t,i,r,l),ra=!1,d=t.memoizedState,i.state=d,sa(t,r,i,o);var h=t.memoizedState;u!==f||d!==h||so.current||ra?("function"==typeof p&&(da(t,n,p,r),h=t.memoizedState),(s=ra||ha(t,n,s,r,d,h,l))?(c||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,h,l),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,h,l)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof i.componentDidUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=h),i.props=r,i.state=h,i.context=l,r=s):("function"!=typeof i.componentDidUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),r=!1)}return Bi(e,t,n,r,a,o)}function Bi(e,t,n,r,o,a){Di(e,t);var i=0!=(64&t.flags);if(!r&&!i)return o&&yo(t,n,!1),eu(e,t,a);r=t.stateNode,Ti.current=t;var u=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=Sa(t,e.child,null,a),t.child=Sa(t,null,u,a)):Ni(e,t,u,a),t.memoizedState=r.state,o&&yo(t,n,!0),t.child}function Vi(e){var t=e.stateNode;t.pendingContext?mo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&mo(0,t.context,!1),Ma(e,t.containerInfo)}var Wi,Hi,$i,qi={dehydrated:null,retryLane:0};function Qi(e,t,n){var r,o=t.pendingProps,a=Na.current,i=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&a)),r?(i=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(a|=1),io(Na,1&a),null===e?(void 0!==o.fallback&&Ua(t),e=o.children,a=o.fallback,i?(e=Ki(t,e,a,n),t.child.memoizedState={baseLanes:n},t.memoizedState=qi,e):"number"==typeof o.unstable_expectedLoadTime?(e=Ki(t,e,a,n),t.child.memoizedState={baseLanes:n},t.memoizedState=qi,t.lanes=33554432,e):((n=Vl({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,i?(o=Xi(e,t,o.children,o.fallback,n),i=t.child,a=e.child.memoizedState,i.memoizedState=null===a?{baseLanes:n}:{baseLanes:a.baseLanes|n},i.childLanes=e.childLanes&~n,t.memoizedState=qi,o):(n=Yi(e,t,o.children,n),t.memoizedState=null,n))}function Ki(e,t,n,r){var o=e.mode,a=e.child;return t={mode:"hidden",children:t},0==(2&o)&&null!==a?(a.childLanes=0,a.pendingProps=t):a=Vl(t,o,0,null),n=Bl(n,o,r,null),a.return=e,n.return=e,a.sibling=n,e.child=a,n}function Yi(e,t,n,r){var o=e.child;return e=o.sibling,n=zl(o,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}function Xi(e,t,n,r,o){var a=t.mode,i=e.child;e=i.sibling;var u={mode:"hidden",children:n};return 0==(2&a)&&t.child!==i?((n=t.child).childLanes=0,n.pendingProps=u,null!==(i=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=i,i.nextEffect=null):t.firstEffect=t.lastEffect=null):n=zl(i,u),null!==e?r=zl(e,r):(r=Bl(r,a,o,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}function Gi(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),ea(e.return,t)}function Zi(e,t,n,r,o,a){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o,lastEffect:a}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=o,i.lastEffect=a)}function Ji(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(Ni(e,t,r.children,n),0!=(2&(r=Na.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Gi(e,n);else if(19===e.tag)Gi(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(io(Na,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===La(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Zi(t,!1,o,n,a,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===La(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Zi(t,!0,n,null,a,t.lastEffect);break;case"together":Zi(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function eu(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Lu|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=zl(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=zl(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function tu(e,t){if(!Aa)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function nu(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return po(t.type)&&ho(),null;case 3:return Ia(),ao(so),ao(lo),$a(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Va(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:Ra(t);var a=Pa(Ca.current);if(n=t.type,null!==e&&null!=t.stateNode)Hi(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(i(166));return null}if(e=Pa(Oa.current),Va(t)){r=t.stateNode,n=t.type;var u=t.memoizedProps;switch(r[Qr]=t,r[Kr]=u,n){case"dialog":Or("cancel",r),Or("close",r);break;case"iframe":case"object":case"embed":Or("load",r);break;case"video":case"audio":for(e=0;e<_r.length;e++)Or(_r[e],r);break;case"source":Or("error",r);break;case"img":case"image":case"link":Or("error",r),Or("load",r);break;case"details":Or("toggle",r);break;case"input":ee(r,u),Or("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!u.multiple},Or("invalid",r);break;case"textarea":le(r,u),Or("invalid",r)}for(var s in xe(n,u),e=null,u)u.hasOwnProperty(s)&&(a=u[s],"children"===s?"string"==typeof a?r.textContent!==a&&(e=["children",a]):"number"==typeof a&&r.textContent!==""+a&&(e=["children",""+a]):l.hasOwnProperty(s)&&null!=a&&"onScroll"===s&&Or("scroll",r));switch(n){case"input":X(r),re(r,u,!0);break;case"textarea":X(r),ce(r);break;case"select":case"option":break;default:"function"==typeof u.onClick&&(r.onclick=jr)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(s=9===a.nodeType?a:a.ownerDocument,e===fe&&(e=pe(n)),e===fe?"script"===n?((e=s.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=s.createElement(n,{is:r.is}):(e=s.createElement(n),"select"===n&&(s=e,r.multiple?s.multiple=!0:r.size&&(s.size=r.size))):e=s.createElementNS(e,n),e[Qr]=t,e[Kr]=r,Wi(e,t),t.stateNode=e,s=Ee(n,r),n){case"dialog":Or("cancel",e),Or("close",e),a=r;break;case"iframe":case"object":case"embed":Or("load",e),a=r;break;case"video":case"audio":for(a=0;a<_r.length;a++)Or(_r[a],e);a=r;break;case"source":Or("error",e),a=r;break;case"img":case"image":case"link":Or("error",e),Or("load",e),a=r;break;case"details":Or("toggle",e),a=r;break;case"input":ee(e,r),a=J(e,r),Or("invalid",e);break;case"option":a=ae(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=o({},r,{value:void 0}),Or("invalid",e);break;case"textarea":le(e,r),a=ue(e,r),Or("invalid",e);break;default:a=r}xe(n,a);var c=a;for(u in c)if(c.hasOwnProperty(u)){var f=c[u];"style"===u?_e(e,f):"dangerouslySetInnerHTML"===u?null!=(f=f?f.__html:void 0)&&ve(e,f):"children"===u?"string"==typeof f?("textarea"!==n||""!==f)&&ge(e,f):"number"==typeof f&&ge(e,""+f):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(l.hasOwnProperty(u)?null!=f&&"onScroll"===u&&Or("scroll",e):null!=f&&w(e,u,f,s))}switch(n){case"input":X(e),re(e,r,!1);break;case"textarea":X(e),ce(e);break;case"option":null!=r.value&&e.setAttribute("value",""+K(r.value));break;case"select":e.multiple=!!r.multiple,null!=(u=r.value)?ie(e,!!r.multiple,u,!1):null!=r.defaultValue&&ie(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=jr)}Dr(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)$i(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));n=Pa(Ca.current),Pa(Oa.current),Va(t)?(r=t.stateNode,n=t.memoizedProps,r[Qr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Qr]=t,t.stateNode=r)}return null;case 13:return ao(Na),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Va(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Na.current)?0===Tu&&(Tu=3):(0!==Tu&&3!==Tu||(Tu=4),null===ku||0==(134217727&Lu)&&0==(134217727&ju)||fl(ku,Pu))),(r||n)&&(t.flags|=4),null);case 4:return Ia(),null===e&&Cr(t.stateNode.containerInfo),null;case 10:return Jo(t),null;case 17:return po(t.type)&&ho(),null;case 19:if(ao(Na),null===(r=t.memoizedState))return null;if(u=0!=(64&t.flags),null===(s=r.rendering))if(u)tu(r,!1);else{if(0!==Tu||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(s=La(e))){for(t.flags|=64,tu(r,!1),null!==(u=s.updateQueue)&&(t.updateQueue=u,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(u=n).flags&=2,u.nextEffect=null,u.firstEffect=null,u.lastEffect=null,null===(s=u.alternate)?(u.childLanes=0,u.lanes=e,u.child=null,u.memoizedProps=null,u.memoizedState=null,u.updateQueue=null,u.dependencies=null,u.stateNode=null):(u.childLanes=s.childLanes,u.lanes=s.lanes,u.child=s.child,u.memoizedProps=s.memoizedProps,u.memoizedState=s.memoizedState,u.updateQueue=s.updateQueue,u.type=s.type,e=s.dependencies,u.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return io(Na,1&Na.current|2),t.child}e=e.sibling}null!==r.tail&&zo()>zu&&(t.flags|=64,u=!0,tu(r,!1),t.lanes=33554432)}else{if(!u)if(null!==(e=La(s))){if(t.flags|=64,u=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),tu(r,!0),null===r.tail&&"hidden"===r.tailMode&&!s.alternate&&!Aa)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*zo()-r.renderingStartTime>zu&&1073741824!==n&&(t.flags|=64,u=!0,tu(r,!1),t.lanes=33554432);r.isBackwards?(s.sibling=t.child,t.child=s):(null!==(n=r.last)?n.sibling=s:t.child=s,r.last=s)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=zo(),n.sibling=null,t=Na.current,io(Na,u?1&t|2:1&t),n):null;case 23:case 24:return vl(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(i(156,t.tag))}function ru(e){switch(e.tag){case 1:po(e.type)&&ho();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Ia(),ao(so),ao(lo),$a(),0!=(64&(t=e.flags)))throw Error(i(285));return e.flags=-4097&t|64,e;case 5:return Ra(e),null;case 13:return ao(Na),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return ao(Na),null;case 4:return Ia(),null;case 10:return Jo(e),null;case 23:case 24:return vl(),null;default:return null}}function ou(e,t){try{var n="",r=t;do{n+=q(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o}}function au(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Wi=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Hi=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,Pa(Oa.current);var i,u=null;switch(n){case"input":a=J(e,a),r=J(e,r),u=[];break;case"option":a=ae(e,a),r=ae(e,r),u=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),u=[];break;case"textarea":a=ue(e,a),r=ue(e,r),u=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=jr)}for(f in xe(n,r),n=null,a)if(!r.hasOwnProperty(f)&&a.hasOwnProperty(f)&&null!=a[f])if("style"===f){var s=a[f];for(i in s)s.hasOwnProperty(i)&&(n||(n={}),n[i]="")}else"dangerouslySetInnerHTML"!==f&&"children"!==f&&"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(l.hasOwnProperty(f)?u||(u=[]):(u=u||[]).push(f,null));for(f in r){var c=r[f];if(s=null!=a?a[f]:void 0,r.hasOwnProperty(f)&&c!==s&&(null!=c||null!=s))if("style"===f)if(s){for(i in s)!s.hasOwnProperty(i)||c&&c.hasOwnProperty(i)||(n||(n={}),n[i]="");for(i in c)c.hasOwnProperty(i)&&s[i]!==c[i]&&(n||(n={}),n[i]=c[i])}else n||(u||(u=[]),u.push(f,n)),n=c;else"dangerouslySetInnerHTML"===f?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(u=u||[]).push(f,c)):"children"===f?"string"!=typeof c&&"number"!=typeof c||(u=u||[]).push(f,""+c):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&(l.hasOwnProperty(f)?(null!=c&&"onScroll"===f&&Or("scroll",e),u||s===c||(u=[])):"object"==typeof c&&null!==c&&c.$$typeof===j?c.toString():(u=u||[]).push(f,c))}n&&(u=u||[]).push("style",n);var f=u;(t.updateQueue=f)&&(t.flags|=4)}},$i=function(e,t,n,r){n!==r&&(t.flags|=4)};var iu="function"==typeof WeakMap?WeakMap:Map;function uu(e,t,n){(n=ia(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Wu||(Wu=!0,Hu=r),au(0,t)},n}function lu(e,t,n){(n=ia(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return au(0,t),r(o)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===$u?$u=new Set([this]):$u.add(this),au(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var su="function"==typeof WeakSet?WeakSet:Set;function cu(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Nl(e,t)}else t.current=null}function fu(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Qo(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Vr(t.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(i(163))}function du(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var o=e;r=o.next,0!=(4&(o=o.tag))&&0!=(1&o)&&(Il(n,e),Ml(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Qo(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&ca(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}ca(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Dr(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&_t(n)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(i(163))}function pu(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=we("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function hu(e,t){if(wo&&"function"==typeof wo.onCommitFiberUnmount)try{wo.onCommitFiberUnmount(bo,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,o=r.destroy;if(r=r.tag,void 0!==o)if(0!=(4&r))Il(t,n);else{r=t;try{o()}catch(e){Nl(r,e)}}n=n.next}while(n!==e)}break;case 1:if(cu(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Nl(t,e)}break;case 5:cu(t);break;case 4:yu(e,t)}}function mu(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function vu(e){return 5===e.tag||3===e.tag||4===e.tag}function gu(e){e:{for(var t=e.return;null!==t;){if(vu(t))break e;t=t.return}throw Error(i(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(i(161))}16&n.flags&&(ge(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||vu(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?function e(t,n,r){var o=t.tag,a=5===o||6===o;if(a)t=a?t.stateNode:t.stateNode.instance,n?8===r.nodeType?r.parentNode.insertBefore(t,n):r.insertBefore(t,n):(8===r.nodeType?(n=r.parentNode).insertBefore(t,r):(n=r).appendChild(t),null!==(r=r._reactRootContainer)&&void 0!==r||null!==n.onclick||(n.onclick=jr));else if(4!==o&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t):function e(t,n,r){var o=t.tag,a=5===o||6===o;if(a)t=a?t.stateNode:t.stateNode.instance,n?r.insertBefore(t,n):r.appendChild(t);else if(4!==o&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t)}function yu(e,t){for(var n,r,o=t,a=!1;;){if(!a){a=o.return;e:for(;;){if(null===a)throw Error(i(160));switch(n=a.stateNode,a.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}a=a.return}a=!0}if(5===o.tag||6===o.tag){e:for(var u=e,l=o,s=l;;)if(hu(u,s),null!==s.child&&4!==s.tag)s.child.return=s,s=s.child;else{if(s===l)break e;for(;null===s.sibling;){if(null===s.return||s.return===l)break e;s=s.return}s.sibling.return=s.return,s=s.sibling}r?(u=n,l=o.stateNode,8===u.nodeType?u.parentNode.removeChild(l):u.removeChild(l)):n.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){n=o.stateNode.containerInfo,r=!0,o.child.return=o,o=o.child;continue}}else if(hu(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(a=!1)}o.sibling.return=o.return,o=o.sibling}}function bu(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var o=null!==e?e.memoizedProps:r;e=t.type;var a=t.updateQueue;if(t.updateQueue=null,null!==a){for(n[Kr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),Ee(e,o),t=Ee(e,r),o=0;o<a.length;o+=2){var u=a[o],l=a[o+1];"style"===u?_e(n,l):"dangerouslySetInnerHTML"===u?ve(n,l):"children"===u?ge(n,l):w(n,u,l,t)}switch(e){case"input":ne(n,r);break;case"textarea":se(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(a=r.value)?ie(n,!!r.multiple,a,!1):e!==!!r.multiple&&(null!=r.defaultValue?ie(n,!!r.multiple,r.defaultValue,!0):ie(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(i(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,_t(n.containerInfo)));case 12:return;case 13:return null!==t.memoizedState&&(Du=zo(),pu(t.child,!0)),void wu(t);case 19:return void wu(t);case 17:return;case 23:case 24:return void pu(t,null!==t.memoizedState)}throw Error(i(163))}function wu(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new su),t.forEach((function(t){var r=jl.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function _u(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&(null!==(t=t.memoizedState)&&null===t.dehydrated)}var Su=Math.ceil,xu=_.ReactCurrentDispatcher,Eu=_.ReactCurrentOwner,Ou=0,ku=null,Cu=null,Pu=0,Mu=0,Iu=oo(0),Tu=0,Ru=null,Nu=0,Lu=0,ju=0,Fu=0,Au=null,Du=0,zu=1/0;function Uu(){zu=zo()+500}var Bu,Vu=null,Wu=!1,Hu=null,$u=null,qu=!1,Qu=null,Ku=90,Yu=[],Xu=[],Gu=null,Zu=0,Ju=null,el=-1,tl=0,nl=0,rl=null,ol=!1;function al(){return 0!=(48&Ou)?zo():-1!==el?el:el=zo()}function il(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Uo()?1:2;if(0===tl&&(tl=Nu),0!==qo.transition){0!==nl&&(nl=null!==Au?Au.pendingLanes:0),e=tl;var t=4186112&~nl;return 0===(t&=-t)&&(0===(t=(e=4186112&~e)&-e)&&(t=8192)),t}return e=Uo(),0!=(4&Ou)&&98===e?e=zt(12,tl):e=zt(e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),tl),e}function ul(e,t,n){if(50<Zu)throw Zu=0,Ju=null,Error(i(185));if(null===(e=ll(e,t)))return null;Vt(e,t,n),e===ku&&(ju|=t,4===Tu&&fl(e,Pu));var r=Uo();1===t?0!=(8&Ou)&&0==(48&Ou)?dl(e):(sl(e,n),0===Ou&&(Uu(),Ho())):(0==(4&Ou)||98!==r&&99!==r||(null===Gu?Gu=new Set([e]):Gu.add(e)),sl(e,n)),Au=e}function ll(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function sl(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,o=e.pingedLanes,a=e.expirationTimes,u=e.pendingLanes;0<u;){var l=31-Wt(u),s=1<<l,c=a[l];if(-1===c){if(0==(s&r)||0!=(s&o)){c=t,Ft(s);var f=jt;a[l]=10<=f?c+250:6<=f?c+5e3:-1}}else c<=t&&(e.expiredLanes|=s);u&=~s}if(r=At(e,e===ku?Pu:0),t=jt,0===r)null!==n&&(n!==No&&xo(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==No&&xo(n)}15===t?(n=dl.bind(null,e),null===jo?(jo=[n],Fo=So(Po,$o)):jo.push(n),n=No):14===t?n=Wo(99,dl.bind(null,e)):n=Wo(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(i(358,e))}}(t),cl.bind(null,e)),e.callbackPriority=t,e.callbackNode=n}}function cl(e){if(el=-1,nl=tl=0,0!=(48&Ou))throw Error(i(327));var t=e.callbackNode;if(Pl()&&e.callbackNode!==t)return null;var n=At(e,e===ku?Pu:0);if(0===n)return null;var r=n,o=Ou;Ou|=16;var a=bl();for(ku===e&&Pu===r||(Uu(),gl(e,r));;)try{Sl();break}catch(t){yl(e,t)}if(Zo(),xu.current=a,Ou=o,null!==Cu?r=0:(ku=null,Pu=0,r=Tu),0!=(Nu&ju))gl(e,0);else if(0!==r){if(2===r&&(Ou|=64,e.hydrate&&(e.hydrate=!1,Vr(e.containerInfo)),0!==(n=Dt(e))&&(r=wl(e,n))),1===r)throw t=Ru,gl(e,0),fl(e,n),sl(e,zo()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(i(345));case 2:Ol(e);break;case 3:if(fl(e,n),(62914560&n)===n&&10<(r=Du+500-zo())){if(0!==At(e,0))break;if(((o=e.suspendedLanes)&n)!==n){al(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=Ur(Ol.bind(null,e),r);break}Ol(e);break;case 4:if(fl(e,n),(4186112&n)===n)break;for(r=e.eventTimes,o=-1;0<n;){var u=31-Wt(n);a=1<<u,(u=r[u])>o&&(o=u),n&=~a}if(n=o,10<(n=(120>(n=zo()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Su(n/1960))-n)){e.timeoutHandle=Ur(Ol.bind(null,e),n);break}Ol(e);break;case 5:Ol(e);break;default:throw Error(i(329))}}return sl(e,zo()),e.callbackNode===t?cl.bind(null,e):null}function fl(e,t){for(t&=~Fu,t&=~ju,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Wt(t),r=1<<n;e[n]=-1,t&=~r}}function dl(e){if(0!=(48&Ou))throw Error(i(327));if(Pl(),e===ku&&0!=(e.expiredLanes&Pu)){var t=Pu,n=wl(e,t);0!=(Nu&ju)&&(n=wl(e,t=At(e,t)))}else n=wl(e,t=At(e,0));if(0!==e.tag&&2===n&&(Ou|=64,e.hydrate&&(e.hydrate=!1,Vr(e.containerInfo)),0!==(t=Dt(e))&&(n=wl(e,t))),1===n)throw n=Ru,gl(e,0),fl(e,t),sl(e,zo()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Ol(e),sl(e,zo()),null}function pl(e,t){var n=Ou;Ou|=1;try{return e(t)}finally{0===(Ou=n)&&(Uu(),Ho())}}function hl(e,t){var n=Ou;Ou&=-2,Ou|=8;try{return e(t)}finally{0===(Ou=n)&&(Uu(),Ho())}}function ml(e,t){io(Iu,Mu),Mu|=t,Nu|=t}function vl(){Mu=Iu.current,ao(Iu)}function gl(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Br(n)),null!==Cu)for(n=Cu.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&ho();break;case 3:Ia(),ao(so),ao(lo),$a();break;case 5:Ra(r);break;case 4:Ia();break;case 13:case 19:ao(Na);break;case 10:Jo(r);break;case 23:case 24:vl()}n=n.return}ku=e,Cu=zl(e.current,null),Pu=Mu=Nu=t,Tu=0,Ru=null,Fu=ju=Lu=0}function yl(e,t){for(;;){var n=Cu;try{if(Zo(),qa.current=Ci,Za){for(var r=Ya.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}Za=!1}if(Ka=0,Ga=Xa=Ya=null,Ja=!1,Eu.current=null,null===n||null===n.return){Tu=1,Ru=t,Cu=null;break}e:{var a=e,i=n.return,u=n,l=t;if(t=Pu,u.flags|=2048,u.firstEffect=u.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var s=l;if(0==(2&u.mode)){var c=u.alternate;c?(u.updateQueue=c.updateQueue,u.memoizedState=c.memoizedState,u.lanes=c.lanes):(u.updateQueue=null,u.memoizedState=null)}var f=0!=(1&Na.current),d=i;do{var p;if(p=13===d.tag){var h=d.memoizedState;if(null!==h)p=null!==h.dehydrated;else{var m=d.memoizedProps;p=void 0!==m.fallback&&(!0!==m.unstable_avoidThisFallback||!f)}}if(p){var v=d.updateQueue;if(null===v){var g=new Set;g.add(s),d.updateQueue=g}else v.add(s);if(0==(2&d.mode)){if(d.flags|=64,u.flags|=16384,u.flags&=-2981,1===u.tag)if(null===u.alternate)u.tag=17;else{var y=ia(-1,1);y.tag=2,ua(u,y)}u.lanes|=1;break e}l=void 0,u=t;var b=a.pingCache;if(null===b?(b=a.pingCache=new iu,l=new Set,b.set(s,l)):void 0===(l=b.get(s))&&(l=new Set,b.set(s,l)),!l.has(u)){l.add(u);var w=Ll.bind(null,a,s,u);s.then(w,w)}d.flags|=4096,d.lanes=t;break e}d=d.return}while(null!==d);l=Error((Q(u.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Tu&&(Tu=2),l=ou(l,u),d=i;do{switch(d.tag){case 3:a=l,d.flags|=4096,t&=-t,d.lanes|=t,la(d,uu(0,a,t));break e;case 1:a=l;var _=d.type,S=d.stateNode;if(0==(64&d.flags)&&("function"==typeof _.getDerivedStateFromError||null!==S&&"function"==typeof S.componentDidCatch&&(null===$u||!$u.has(S)))){d.flags|=4096,t&=-t,d.lanes|=t,la(d,lu(d,a,t));break e}}d=d.return}while(null!==d)}El(n)}catch(e){t=e,Cu===n&&null!==n&&(Cu=n=n.return);continue}break}}function bl(){var e=xu.current;return xu.current=Ci,null===e?Ci:e}function wl(e,t){var n=Ou;Ou|=16;var r=bl();for(ku===e&&Pu===t||gl(e,t);;)try{_l();break}catch(t){yl(e,t)}if(Zo(),Ou=n,xu.current=r,null!==Cu)throw Error(i(261));return ku=null,Pu=0,Tu}function _l(){for(;null!==Cu;)xl(Cu)}function Sl(){for(;null!==Cu&&!Eo();)xl(Cu)}function xl(e){var t=Bu(e.alternate,e,Mu);e.memoizedProps=e.pendingProps,null===t?El(e):Cu=t,Eu.current=null}function El(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=nu(n,t,Mu)))return void(Cu=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Mu)||0==(4&n.mode)){for(var r=0,o=n.child;null!==o;)r|=o.lanes|o.childLanes,o=o.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=ru(t)))return n.flags&=2047,void(Cu=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Cu=t);Cu=t=e}while(null!==t);0===Tu&&(Tu=5)}function Ol(e){var t=Uo();return Vo(99,kl.bind(null,e,t)),null}function kl(e,t){do{Pl()}while(null!==Qu);if(0!=(48&Ou))throw Error(i(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(i(177));e.callbackNode=null;var r=n.lanes|n.childLanes,o=r,a=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var u=e.eventTimes,l=e.expirationTimes;0<a;){var s=31-Wt(a),c=1<<s;o[s]=0,u[s]=-1,l[s]=-1,a&=~c}if(null!==Gu&&0==(24&r)&&Gu.has(e)&&Gu.delete(e),e===ku&&(Cu=ku=null,Pu=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(o=Ou,Ou|=32,Eu.current=null,Fr=Kt,dr(u=fr())){if("selectionStart"in u)l={start:u.selectionStart,end:u.selectionEnd};else e:if(l=(l=u.ownerDocument)&&l.defaultView||window,(c=l.getSelection&&l.getSelection())&&0!==c.rangeCount){l=c.anchorNode,a=c.anchorOffset,s=c.focusNode,c=c.focusOffset;try{l.nodeType,s.nodeType}catch(e){l=null;break e}var f=0,d=-1,p=-1,h=0,m=0,v=u,g=null;t:for(;;){for(var y;v!==l||0!==a&&3!==v.nodeType||(d=f+a),v!==s||0!==c&&3!==v.nodeType||(p=f+c),3===v.nodeType&&(f+=v.nodeValue.length),null!==(y=v.firstChild);)g=v,v=y;for(;;){if(v===u)break t;if(g===l&&++h===a&&(d=f),g===s&&++m===c&&(p=f),null!==(y=v.nextSibling))break;g=(v=g).parentNode}v=y}l=-1===d||-1===p?null:{start:d,end:p}}else l=null;l=l||{start:0,end:0}}else l=null;Ar={focusedElem:u,selectionRange:l},Kt=!1,rl=null,ol=!1,Vu=r;do{try{Cl()}catch(e){if(null===Vu)throw Error(i(330));Nl(Vu,e),Vu=Vu.nextEffect}}while(null!==Vu);rl=null,Vu=r;do{try{for(u=e;null!==Vu;){var b=Vu.flags;if(16&b&&ge(Vu.stateNode,""),128&b){var w=Vu.alternate;if(null!==w){var _=w.ref;null!==_&&("function"==typeof _?_(null):_.current=null)}}switch(1038&b){case 2:gu(Vu),Vu.flags&=-3;break;case 6:gu(Vu),Vu.flags&=-3,bu(Vu.alternate,Vu);break;case 1024:Vu.flags&=-1025;break;case 1028:Vu.flags&=-1025,bu(Vu.alternate,Vu);break;case 4:bu(Vu.alternate,Vu);break;case 8:yu(u,l=Vu);var S=l.alternate;mu(l),null!==S&&mu(S)}Vu=Vu.nextEffect}}catch(e){if(null===Vu)throw Error(i(330));Nl(Vu,e),Vu=Vu.nextEffect}}while(null!==Vu);if(_=Ar,w=fr(),b=_.focusedElem,u=_.selectionRange,w!==b&&b&&b.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(b.ownerDocument.documentElement,b)){null!==u&&dr(b)&&(w=u.start,void 0===(_=u.end)&&(_=w),"selectionStart"in b?(b.selectionStart=w,b.selectionEnd=Math.min(_,b.value.length)):(_=(w=b.ownerDocument||document)&&w.defaultView||window).getSelection&&(_=_.getSelection(),l=b.textContent.length,S=Math.min(u.start,l),u=void 0===u.end?S:Math.min(u.end,l),!_.extend&&S>u&&(l=u,u=S,S=l),l=cr(b,S),a=cr(b,u),l&&a&&(1!==_.rangeCount||_.anchorNode!==l.node||_.anchorOffset!==l.offset||_.focusNode!==a.node||_.focusOffset!==a.offset)&&((w=w.createRange()).setStart(l.node,l.offset),_.removeAllRanges(),S>u?(_.addRange(w),_.extend(a.node,a.offset)):(w.setEnd(a.node,a.offset),_.addRange(w))))),w=[];for(_=b;_=_.parentNode;)1===_.nodeType&&w.push({element:_,left:_.scrollLeft,top:_.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<w.length;b++)(_=w[b]).element.scrollLeft=_.left,_.element.scrollTop=_.top}Kt=!!Fr,Ar=Fr=null,e.current=n,Vu=r;do{try{for(b=e;null!==Vu;){var x=Vu.flags;if(36&x&&du(b,Vu.alternate,Vu),128&x){w=void 0;var E=Vu.ref;if(null!==E){var O=Vu.stateNode;switch(Vu.tag){case 5:w=O;break;default:w=O}"function"==typeof E?E(w):E.current=w}}Vu=Vu.nextEffect}}catch(e){if(null===Vu)throw Error(i(330));Nl(Vu,e),Vu=Vu.nextEffect}}while(null!==Vu);Vu=null,Lo(),Ou=o}else e.current=n;if(qu)qu=!1,Qu=e,Ku=t;else for(Vu=r;null!==Vu;)t=Vu.nextEffect,Vu.nextEffect=null,8&Vu.flags&&((x=Vu).sibling=null,x.stateNode=null),Vu=t;if(0===(r=e.pendingLanes)&&($u=null),1===r?e===Ju?Zu++:(Zu=0,Ju=e):Zu=0,n=n.stateNode,wo&&"function"==typeof wo.onCommitFiberRoot)try{wo.onCommitFiberRoot(bo,n,void 0,64==(64&n.current.flags))}catch(e){}if(sl(e,zo()),Wu)throw Wu=!1,e=Hu,Hu=null,e;return 0!=(8&Ou)||Ho(),null}function Cl(){for(;null!==Vu;){var e=Vu.alternate;ol||null===rl||(0!=(8&Vu.flags)?Je(Vu,rl)&&(ol=!0):13===Vu.tag&&_u(e,Vu)&&Je(Vu,rl)&&(ol=!0));var t=Vu.flags;0!=(256&t)&&fu(e,Vu),0==(512&t)||qu||(qu=!0,Wo(97,(function(){return Pl(),null}))),Vu=Vu.nextEffect}}function Pl(){if(90!==Ku){var e=97<Ku?97:Ku;return Ku=90,Vo(e,Tl)}return!1}function Ml(e,t){Yu.push(t,e),qu||(qu=!0,Wo(97,(function(){return Pl(),null})))}function Il(e,t){Xu.push(t,e),qu||(qu=!0,Wo(97,(function(){return Pl(),null})))}function Tl(){if(null===Qu)return!1;var e=Qu;if(Qu=null,0!=(48&Ou))throw Error(i(331));var t=Ou;Ou|=32;var n=Xu;Xu=[];for(var r=0;r<n.length;r+=2){var o=n[r],a=n[r+1],u=o.destroy;if(o.destroy=void 0,"function"==typeof u)try{u()}catch(e){if(null===a)throw Error(i(330));Nl(a,e)}}for(n=Yu,Yu=[],r=0;r<n.length;r+=2){o=n[r],a=n[r+1];try{var l=o.create;o.destroy=l()}catch(e){if(null===a)throw Error(i(330));Nl(a,e)}}for(l=e.current.firstEffect;null!==l;)e=l.nextEffect,l.nextEffect=null,8&l.flags&&(l.sibling=null,l.stateNode=null),l=e;return Ou=t,Ho(),!0}function Rl(e,t,n){ua(e,t=uu(0,t=ou(n,t),1)),t=al(),null!==(e=ll(e,1))&&(Vt(e,1,t),sl(e,t))}function Nl(e,t){if(3===e.tag)Rl(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Rl(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===$u||!$u.has(r))){var o=lu(n,e=ou(t,e),1);if(ua(n,o),o=al(),null!==(n=ll(n,1)))Vt(n,1,o),sl(n,o);else if("function"==typeof r.componentDidCatch&&(null===$u||!$u.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function Ll(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=al(),e.pingedLanes|=e.suspendedLanes&n,ku===e&&(Pu&n)===n&&(4===Tu||3===Tu&&(62914560&Pu)===Pu&&500>zo()-Du?gl(e,0):Fu|=n),sl(e,t)}function jl(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Uo()?1:2:(0===tl&&(tl=Nu),0===(t=Ut(62914560&~tl))&&(t=4194304))),n=al(),null!==(e=ll(e,t))&&(Vt(e,t,n),sl(e,n))}function Fl(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Al(e,t,n,r){return new Fl(e,t,n,r)}function Dl(e){return!(!(e=e.prototype)||!e.isReactComponent)}function zl(e,t){var n=e.alternate;return null===n?((n=Al(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ul(e,t,n,r,o,a){var u=2;if(r=e,"function"==typeof e)Dl(e)&&(u=1);else if("string"==typeof e)u=5;else e:switch(e){case E:return Bl(n.children,o,a,t);case F:u=8,o|=16;break;case O:u=8,o|=1;break;case k:return(e=Al(12,n,t,8|o)).elementType=k,e.type=k,e.lanes=a,e;case I:return(e=Al(13,n,t,o)).type=I,e.elementType=I,e.lanes=a,e;case T:return(e=Al(19,n,t,o)).elementType=T,e.lanes=a,e;case A:return Vl(n,o,a,t);case D:return(e=Al(24,n,t,o)).elementType=D,e.lanes=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case C:u=10;break e;case P:u=9;break e;case M:u=11;break e;case R:u=14;break e;case N:u=16,r=null;break e;case L:u=22;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Al(u,n,t,o)).elementType=e,t.type=r,t.lanes=a,t}function Bl(e,t,n,r){return(e=Al(7,e,r,t)).lanes=n,e}function Vl(e,t,n,r){return(e=Al(23,e,r,t)).elementType=A,e.lanes=n,e}function Wl(e,t,n){return(e=Al(6,e,null,t)).lanes=n,e}function Hl(e,t,n){return(t=Al(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function $l(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Bt(0),this.expirationTimes=Bt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Bt(0),this.mutableSourceEagerHydrationData=null}function ql(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:x,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Ql(e,t,n,r){var o=t.current,a=al(),u=il(o);e:if(n){t:{if(Ye(n=n._reactInternals)!==n||1!==n.tag)throw Error(i(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(po(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);throw Error(i(171))}if(1===n.tag){var s=n.type;if(po(s)){n=vo(n,s,l);break e}}n=l}else n=uo;return null===t.context?t.context=n:t.pendingContext=n,(t=ia(a,u)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),ua(o,t),ul(o,u,a),u}function Kl(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Yl(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Xl(e,t){Yl(e,t),(e=e.alternate)&&Yl(e,t)}function Gl(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new $l(e,t,null!=n&&!0===n.hydrate),t=Al(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,oa(t),e[Yr]=n.current,Cr(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var o=(t=r[e])._getVersion;o=o(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,o]:n.mutableSourceEagerHydrationData.push(t,o)}this._internalRoot=n}function Zl(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Jl(e,t,n,r,o){var a=n._reactRootContainer;if(a){var i=a._internalRoot;if("function"==typeof o){var u=o;o=function(){var e=Kl(i);u.call(e)}}Ql(t,i,e,o)}else{if(a=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Gl(e,0,t?{hydrate:!0}:void 0)}(n,r),i=a._internalRoot,"function"==typeof o){var l=o;o=function(){var e=Kl(i);l.call(e)}}hl((function(){Ql(t,i,e,o)}))}return Kl(i)}function es(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Zl(t))throw Error(i(200));return ql(e,t,null,n)}Bu=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||so.current)Ri=!0;else{if(0==(n&r)){switch(Ri=!1,t.tag){case 3:Vi(t),Wa();break;case 5:Ta(t);break;case 1:po(t.type)&&go(t);break;case 4:Ma(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var o=t.type._context;io(Ko,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Qi(e,t,n):(io(Na,1&Na.current),null!==(t=eu(e,t,n))?t.sibling:null);io(Na,1&Na.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return Ji(e,t,n);t.flags|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),io(Na,Na.current),r)break;return null;case 23:case 24:return t.lanes=0,Ai(e,t,n)}return eu(e,t,n)}Ri=0!=(16384&e.flags)}else Ri=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=fo(t,lo.current),ta(t,n),o=ni(null,t,r,e,o,n),t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,po(r)){var a=!0;go(t)}else a=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,oa(t);var u=r.getDerivedStateFromProps;"function"==typeof u&&da(t,r,u,e),o.updater=pa,t.stateNode=o,o._reactInternals=t,ga(t,r,e,n),t=Bi(null,t,r,!0,a,n)}else t.tag=0,Ni(null,t,o,n),t=t.child;return t;case 16:o=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=(a=o._init)(o._payload),t.type=o,a=t.tag=function(e){if("function"==typeof e)return Dl(e)?1:0;if(null!=e){if((e=e.$$typeof)===M)return 11;if(e===R)return 14}return 2}(o),e=Qo(o,e),a){case 0:t=zi(null,t,o,e,n);break e;case 1:t=Ui(null,t,o,e,n);break e;case 11:t=Li(null,t,o,e,n);break e;case 14:t=ji(null,t,o,Qo(o.type,e),r,n);break e}throw Error(i(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,zi(e,t,r,o=t.elementType===r?o:Qo(r,o),n);case 1:return r=t.type,o=t.pendingProps,Ui(e,t,r,o=t.elementType===r?o:Qo(r,o),n);case 3:if(Vi(t),r=t.updateQueue,null===e||null===r)throw Error(i(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,aa(e,t),sa(t,r,null,n),(r=t.memoizedState.element)===o)Wa(),t=eu(e,t,n);else{if((a=(o=t.stateNode).hydrate)&&(Fa=Wr(t.stateNode.containerInfo.firstChild),ja=t,a=Aa=!0),a){if(null!=(e=o.mutableSourceEagerHydrationData))for(o=0;o<e.length;o+=2)(a=e[o])._workInProgressVersionPrimary=e[o+1],Ha.push(a);for(n=xa(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Ni(e,t,r,n),Wa();t=t.child}return t;case 5:return Ta(t),null===e&&Ua(t),r=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,u=o.children,zr(r,o)?u=null:null!==a&&zr(r,a)&&(t.flags|=16),Di(e,t),Ni(e,t,u,n),t.child;case 6:return null===e&&Ua(t),null;case 13:return Qi(e,t,n);case 4:return Ma(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Sa(t,null,r,n):Ni(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Li(e,t,r,o=t.elementType===r?o:Qo(r,o),n);case 7:return Ni(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ni(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,u=t.memoizedProps,a=o.value;var l=t.type._context;if(io(Ko,l._currentValue),l._currentValue=a,null!==u)if(l=u.value,0===(a=ir(l,a)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,a):1073741823))){if(u.children===o.children&&!so.current){t=eu(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var s=l.dependencies;if(null!==s){u=l.child;for(var c=s.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&a)){1===l.tag&&((c=ia(-1,n&-n)).tag=2,ua(l,c)),l.lanes|=n,null!==(c=l.alternate)&&(c.lanes|=n),ea(l.return,n),s.lanes|=n;break}c=c.next}}else u=10===l.tag&&l.type===t.type?null:l.child;if(null!==u)u.return=l;else for(u=l;null!==u;){if(u===t){u=null;break}if(null!==(l=u.sibling)){l.return=u.return,u=l;break}u=u.return}l=u}Ni(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(a=t.pendingProps).children,ta(t,n),r=r(o=na(o,a.unstable_observedBits)),t.flags|=1,Ni(e,t,r,n),t.child;case 14:return a=Qo(o=t.type,t.pendingProps),ji(e,t,o,a=Qo(o.type,a),r,n);case 15:return Fi(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Qo(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,po(r)?(e=!0,go(t)):e=!1,ta(t,n),ma(t,r,o),ga(t,r,o,n),Bi(null,t,r,!0,e,n);case 19:return Ji(e,t,n);case 23:case 24:return Ai(e,t,n)}throw Error(i(156,t.tag))},Gl.prototype.render=function(e){Ql(e,this._internalRoot,null,null)},Gl.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Ql(null,e,null,(function(){t[Yr]=null}))},et=function(e){13===e.tag&&(ul(e,4,al()),Xl(e,4))},tt=function(e){13===e.tag&&(ul(e,67108864,al()),Xl(e,67108864))},nt=function(e){if(13===e.tag){var t=al(),n=il(e);ul(e,n,t),Xl(e,n)}},rt=function(e,t){return t()},ke=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=eo(r);if(!o)throw Error(i(90));G(r),ne(r,o)}}}break;case"textarea":se(e,n);break;case"select":null!=(t=n.value)&&ie(e,!!n.multiple,t,!1)}},Re=pl,Ne=function(e,t,n,r,o){var a=Ou;Ou|=4;try{return Vo(98,e.bind(null,t,n,r,o))}finally{0===(Ou=a)&&(Uu(),Ho())}},Le=function(){0==(49&Ou)&&(function(){if(null!==Gu){var e=Gu;Gu=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,sl(e,zo())}))}Ho()}(),Pl())},je=function(e,t){var n=Ou;Ou|=2;try{return e(t)}finally{0===(Ou=n)&&(Uu(),Ho())}};var ts={Events:[Zr,Jr,eo,Ie,Te,Pl,{current:!1}]},ns={findFiberByHostInstance:Gr,bundleType:0,version:"17.0.1",rendererPackageName:"react-dom"},rs={bundleType:ns.bundleType,version:ns.version,rendererPackageName:ns.rendererPackageName,rendererConfig:ns.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:_.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ze(e))?null:e.stateNode},findFiberByHostInstance:ns.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var os=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!os.isDisabled&&os.supportsFiber)try{bo=os.inject(rs),wo=os}catch(e){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ts,t.createPortal=es,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw Error(i(268,Object.keys(e)))}return e=null===(e=Ze(t))?null:e.stateNode},t.flushSync=function(e,t){var n=Ou;if(0!=(48&n))return e(t);Ou|=1;try{if(e)return Vo(99,e.bind(null,t))}finally{Ou=n,Ho()}},t.hydrate=function(e,t,n){if(!Zl(t))throw Error(i(200));return Jl(null,e,t,!0,n)},t.render=function(e,t,n){if(!Zl(t))throw Error(i(200));return Jl(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Zl(e))throw Error(i(40));return!!e._reactRootContainer&&(hl((function(){Jl(null,null,e,!1,(function(){e._reactRootContainer=null,e[Yr]=null}))})),!0)},t.unstable_batchedUpdates=pl,t.unstable_createPortal=function(e,t){return es(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Zl(n))throw Error(i(200));if(null==e||void 0===e._reactInternals)throw Error(i(38));return Jl(e,t,n,!1,r)},t.version="17.0.1"},function(e,t,n){"use strict";e.exports=n(38)},function(e,t,n){"use strict";
/** @license React v0.20.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,o,a,i;if("object"==typeof performance&&"function"==typeof performance.now){var u=performance;t.unstable_now=function(){return u.now()}}else{var l=Date,s=l.now();t.unstable_now=function(){return l.now()-s}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var c=null,f=null,d=function(){if(null!==c)try{var e=t.unstable_now();c(!0,e),c=null}catch(e){throw setTimeout(d,0),e}};r=function(e){null!==c?setTimeout(r,0,e):(c=e,setTimeout(d,0))},o=function(e,t){f=setTimeout(e,t)},a=function(){clearTimeout(f)},t.unstable_shouldYield=function(){return!1},i=t.unstable_forceFrameRate=function(){}}else{var p=window.setTimeout,h=window.clearTimeout;if("undefined"!=typeof console){var m=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof m&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var v=!1,g=null,y=-1,b=5,w=0;t.unstable_shouldYield=function(){return t.unstable_now()>=w},i=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):b=0<e?Math.floor(1e3/e):5};var _=new MessageChannel,S=_.port2;_.port1.onmessage=function(){if(null!==g){var e=t.unstable_now();w=e+b;try{g(!0,e)?S.postMessage(null):(v=!1,g=null)}catch(e){throw S.postMessage(null),e}}else v=!1},r=function(e){g=e,v||(v=!0,S.postMessage(null))},o=function(e,n){y=p((function(){e(t.unstable_now())}),n)},a=function(){h(y),y=-1}}function x(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<k(o,t)))break e;e[r]=t,e[n]=o,n=r}}function E(e){return void 0===(e=e[0])?null:e}function O(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var a=2*(r+1)-1,i=e[a],u=a+1,l=e[u];if(void 0!==i&&0>k(i,n))void 0!==l&&0>k(l,i)?(e[r]=l,e[u]=n,r=u):(e[r]=i,e[a]=n,r=a);else{if(!(void 0!==l&&0>k(l,n)))break e;e[r]=l,e[u]=n,r=u}}}return t}return null}function k(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var C=[],P=[],M=1,I=null,T=3,R=!1,N=!1,L=!1;function j(e){for(var t=E(P);null!==t;){if(null===t.callback)O(P);else{if(!(t.startTime<=e))break;O(P),t.sortIndex=t.expirationTime,x(C,t)}t=E(P)}}function F(e){if(L=!1,j(e),!N)if(null!==E(C))N=!0,r(A);else{var t=E(P);null!==t&&o(F,t.startTime-e)}}function A(e,n){N=!1,L&&(L=!1,a()),R=!0;var r=T;try{for(j(n),I=E(C);null!==I&&(!(I.expirationTime>n)||e&&!t.unstable_shouldYield());){var i=I.callback;if("function"==typeof i){I.callback=null,T=I.priorityLevel;var u=i(I.expirationTime<=n);n=t.unstable_now(),"function"==typeof u?I.callback=u:I===E(C)&&O(C),j(n)}else O(C);I=E(C)}if(null!==I)var l=!0;else{var s=E(P);null!==s&&o(F,s.startTime-n),l=!1}return l}finally{I=null,T=r,R=!1}}var D=i;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){N||R||(N=!0,r(A))},t.unstable_getCurrentPriorityLevel=function(){return T},t.unstable_getFirstCallbackNode=function(){return E(C)},t.unstable_next=function(e){switch(T){case 1:case 2:case 3:var t=3;break;default:t=T}var n=T;T=t;try{return e()}finally{T=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=D,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=T;T=e;try{return t()}finally{T=n}},t.unstable_scheduleCallback=function(e,n,i){var u=t.unstable_now();switch("object"==typeof i&&null!==i?i="number"==typeof(i=i.delay)&&0<i?u+i:u:i=u,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:M++,callback:n,priorityLevel:e,startTime:i,expirationTime:l=i+l,sortIndex:-1},i>u?(e.sortIndex=i,x(P,e),null===E(C)&&e===E(P)&&(L?a():L=!0,o(F,i-u))):(e.sortIndex=l,x(C,e),N||R||(N=!0,r(A))),e},t.unstable_wrapCallback=function(e){var t=T;return function(){var n=T;T=t;try{return e.apply(this,arguments)}finally{T=n}}}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){e.exports=n(42)()},function(e,t,n){"use strict";var r=n(43);function o(){}function a(){}a.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,a,i){if(i!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:a,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,a=r?Symbol.for("react.portal"):60106,i=r?Symbol.for("react.fragment"):60107,u=r?Symbol.for("react.strict_mode"):60108,l=r?Symbol.for("react.profiler"):60114,s=r?Symbol.for("react.provider"):60109,c=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,d=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,m=r?Symbol.for("react.suspense_list"):60120,v=r?Symbol.for("react.memo"):60115,g=r?Symbol.for("react.lazy"):60116,y=r?Symbol.for("react.block"):60121,b=r?Symbol.for("react.fundamental"):60117,w=r?Symbol.for("react.responder"):60118,_=r?Symbol.for("react.scope"):60119;function S(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case f:case d:case i:case l:case u:case h:return e;default:switch(e=e&&e.$$typeof){case c:case p:case g:case v:case s:return e;default:return t}}case a:return t}}}function x(e){return S(e)===d}t.AsyncMode=f,t.ConcurrentMode=d,t.ContextConsumer=c,t.ContextProvider=s,t.Element=o,t.ForwardRef=p,t.Fragment=i,t.Lazy=g,t.Memo=v,t.Portal=a,t.Profiler=l,t.StrictMode=u,t.Suspense=h,t.isAsyncMode=function(e){return x(e)||S(e)===f},t.isConcurrentMode=x,t.isContextConsumer=function(e){return S(e)===c},t.isContextProvider=function(e){return S(e)===s},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return S(e)===p},t.isFragment=function(e){return S(e)===i},t.isLazy=function(e){return S(e)===g},t.isMemo=function(e){return S(e)===v},t.isPortal=function(e){return S(e)===a},t.isProfiler=function(e){return S(e)===l},t.isStrictMode=function(e){return S(e)===u},t.isSuspense=function(e){return S(e)===h},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===d||e===l||e===u||e===h||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===v||e.$$typeof===s||e.$$typeof===c||e.$$typeof===p||e.$$typeof===b||e.$$typeof===w||e.$$typeof===_||e.$$typeof===y)},t.typeOf=S},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__rest||function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n};Object.defineProperty(t,"__esModule",{value:!0}),t.reducer=void 0;var a=n(20),i=r(r({},a.getExtensionState()),{counter:0});t.reducer=function(e,t){var n,a,u;switch(void 0===e&&(e=i),t.type){case"SET_VERTEX_FILE_PATH":return r(r({},e),{vertexFilePath:t.payload.path});case"SET_FRAGMENT_FILE_PATH":return r(r({},e),{fragmentFilePath:t.payload.path});case"SET_UNIFORM":var l=t.payload,s=l.name,c=o(l,["name"]);return r(r({},e),{uniformValues:r(r({},e.uniformValues),(n={},n[s]=r(r({},e.uniformValues[s]),c),n))});case"SET_ATTRIBUTE_BUFFER":var f=t.payload,d=f.name;c=o(f,["name"]);return r(r({},e),{attributeBufferValues:r(r({},e.attributeBufferValues),(a={},a[d]=r(r({},e.attributeBufferValues[d]),c),a))});case"SET_TEXTURE":var p=t.payload,h=p.name;c=o(p,["name"]);return r(r({},e),{textureValues:r(r({},e.textureValues),(u={},u[h]=r(r({},e.textureValues[h]),c),u))});case"SET_CAMERA_POSITION":return r({},e);case"UPADTE_COUNTER":return r(r({},e),{counter:t.payload.value});default:return e}}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Viewer=void 0;var a=o(n(0)),i=n(3),u=n(12),l=n(48),s=n(49),c=n(24),f=n(52),d=n(54),p=n(55),h=n(53),m=n(74),v=n(81),g=n(82),y=n(85),b=n(89);t.Viewer=i.connect((function(e){return{selectedVertexFileId:e.vertexFilePath,selectedFragmentFileId:e.fragmentFilePath}}),(function(e){return{updateCameraPosition:function(t){return e({type:"SET_CAMERA_POSITION",payload:{position:t}})}}}))((function(e){var t=e.selectedVertexFileId,n=e.selectedFragmentFileId,o=e.updateCameraPosition,i=a.default.useState(""),w=i[0],_=i[1],S=a.default.useState(""),x=S[0],E=S[1],O=a.default.useState(""),k=O[0],C=O[1],P=a.default.useState([]),M=P[0],I=P[1],T=a.default.useState([]),R=T[0],N=T[1],L=a.default.useState([]),j=L[0],F=L[1],A=a.default.useState({width:0,height:0}),D=A[0],z=A[1],U=a.default.useRef(null),B=a.default.useRef(null),V=a.default.useRef(null),W=a.default.useRef(null),H=a.default.useRef(null);return a.default.useEffect((function(){if(V.current=B.current.getContext("webgl"),!V.current)throw new Error("Unable to create webgl context");W.current=new f.IndexBufferInfo(V.current),l.observeElementBoundingRect(U.current,(function(e){B.current.width=e.width,B.current.height=e.height,z(r({},e))})),u.viewerEndpoint.showWebViewDevTools()}),[]),a.default.useEffect((function(){if(x&&k){var e=s.compileShadersFromSource(V.current,x,k);if(!Array.isArray(e)){_("");var t=e,n=s.getProgramUniforms(V.current,t),r=s.getProgramAttributeBuffers(V.current,t);N(n.dataUniforms),F(n.textureUniforms),I(r);var o=c.getFromCacheOrCreate(V.current,t,r),a=function(){s.renderProgram(V.current,t,{uniformInfos:[],textureInfos:[],attributeBufferInfos:o,indexBufferInfo:W.current},{drawMode:"arrays"}),H.current=requestAnimationFrame(a)};return a(),function(){console.log("deleting prog"),cancelAnimationFrame(H.current),V.current.deleteProgram(e)}}_(s.formatShaderCompileErrors(e))}}),[x,k]),g.usePerspectiveCamera(U.current,D,o),y.useDocumentWatcher(t,E),y.useDocumentWatcher(n,C),a.default.createElement("div",{className:"viewer-grid"},a.default.createElement("div",{className:"viewer-options"},a.default.createElement(p.ShadersSelectorSection,null),a.default.createElement(d.DrawOptionsSection,null),R.length>0&&a.default.createElement(m.UniformSection,{uniformFields:R}),M.length>0&&a.default.createElement(b.AttributeBuffersSection,{attributeBufferFields:M}),j.length>0&&a.default.createElement(h.TextureSection,{textureFields:j})),a.default.createElement("div",{ref:U,className:"viewer-content"},w&&a.default.createElement(v.ShadersCompileResultArea,{errors:w}),a.default.createElement("canvas",{className:"viewer-canvas",ref:B})))}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.uuidv4=void 0;t.uuidv4=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){var t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.observeElementBoundingRect=void 0;t.observeElementBoundingRect=function(e,t){var n=new ResizeObserver((function(n){var r=n.find((function(t){return t.target===e}));if(r){var o=r.target.getBoundingClientRect();t({x:o.x,y:o.y,width:o.width,height:o.height})}}));return n.observe(e),function(){return n.disconnect()}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.formatShaderCompileErrors=t.renderProgram=t.getProgramAttributeBuffers=t.getProgramUniforms=t.createProgram=t.compileShadersFromSource=t.compileShader=void 0;var r=n(4),o=n(11);t.compileShader=function(e,t,n){var r=e.createShader(t);if(e.shaderSource(r,n),e.compileShader(r),e.getShaderParameter(r,e.COMPILE_STATUS))return r;var o=e.getShaderInfoLog(r);return e.deleteShader(r),{error:o}};t.compileShadersFromSource=function(e,n,a){var i=t.compileShader(e,e.VERTEX_SHADER,n),u=t.compileShader(e,e.FRAGMENT_SHADER,a),l=void 0;o.hasProperty(i,"error")&&(l=r.removeLast(i.error,1));var s=void 0;return o.hasProperty(u,"error")&&(s=r.removeLast(u.error,1)),l||s?[l,s]:t.createProgram(e,i,u)};t.createProgram=function(e,t,n){var r=e.createProgram();if(e.attachShader(r,t),e.attachShader(r,n),e.linkProgram(r),e.getProgramParameter(r,e.LINK_STATUS))return r;var o=e.getProgramInfoLog(r);throw e.deleteProgram(r),new Error("Creating program failed: "+o)};t.getProgramUniforms=function(e,t){for(var n=e.getProgramParameter(t,e.ACTIVE_UNIFORMS),r=[],o=[],a=0;a<n;++a){var i=e.getActiveUniform(t,a);35678===i.type?o.push({name:i.name,unit:o.length}):r.push({name:i.name,type:i.type})}return{dataUniforms:r,textureUniforms:o}};t.getProgramAttributeBuffers=function(e,t){for(var n=e.getProgramParameter(t,e.ACTIVE_ATTRIBUTES),r=[],o=0;o<n;++o){var a=e.getActiveAttrib(t,o);r.push({name:a.name,type:a.type})}return r};t.renderProgram=function(e,t,n,r){e.useProgram(t),e.viewport(0,0,e.canvas.width,e.canvas.height),e.clearColor(0,0,0,1),e.clearDepth(1),e.enable(e.DEPTH_TEST),e.depthFunc(e.LEQUAL),e.clear(e.COLOR_BUFFER_BIT|e.DEPTH_BUFFER_BIT),n.uniformInfos.forEach((function(e){return e.prepareForRender()})),n.textureInfos.forEach((function(e){return e.prepareForRender()})),n.attributeBufferInfos.forEach((function(e){return e.setAttributeBuffer()}));var o=e.TRIANGLES;if("arrays"===r.drawMode){var a=Math.min.apply(Math,n.attributeBufferInfos.map((function(e){return e.getCount()})));e.drawArrays(o,0,a)}else n.indexBufferInfo.setIndexBuffer(),e.drawElements(o,n.indexBufferInfo.getCount(),e.UNSIGNED_SHORT,0)};t.formatShaderCompileErrors=function(e){var t=e[0],n=e[1],r=[];return t&&r.push("VERTEX SHADER:",t),n&&r.push("FRAGMENT SHADER:",n),r.join("\r\n")}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CompositeKeyMap=void 0;var r=function(){function e(e){this.keySelector=e,this.map=new Map}return e.prototype.get=function(e){return this.map.get(this.keySelector(e))},e.prototype.set=function(e,t){this.map.set(this.keySelector(e),t)},e.prototype.has=function(e){return this.map.has(this.keySelector(e))},e.prototype.entriesStrKey=function(){return Array.from(this.map.entries())},e.prototype.deleteStrKey=function(e){this.map.delete(e)},e.prototype.delete=function(e){this.map.delete(this.keySelector(e))},e.prototype.clear=function(){this.map.clear()},e}();t.CompositeKeyMap=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AttributeBufferInfo=t.AttributeBufferType=void 0;var r,o=n(11);!function(e){e[e.FLOAT_VEC2=35664]="FLOAT_VEC2",e[e.FLOAT_VEC3=35665]="FLOAT_VEC3",e[e.FLOAT_VEC4=35666]="FLOAT_VEC4"}(r=t.AttributeBufferType||(t.AttributeBufferType={}));var a=function(){function e(e,t,n,r){this.context=e,this.name=n,this.type=r,this.count=0,this.attachToProgram(t),this.buffer=e.createBuffer()}return e.prototype.attachToProgram=function(e){this.location=this.context.getAttribLocation(e,this.name)},e.prototype.setValue=function(e){this.count=e.length,this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffer);var t=[].concat.apply([],e);console.log("setting",e,t),this.context.bufferData(this.context.ARRAY_BUFFER,new Float32Array(t),this.context.STATIC_DRAW)},e.prototype.setAttributeBuffer=function(){if(null!==this.buffer){this.context.enableVertexAttribArray(this.location),this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffer);var e=i(this.type),t=this.context.FLOAT;this.context.vertexAttribPointer(this.location,e,t,!1,0,0)}},e.prototype.getAttributeBufferType=function(){return this.type},e.prototype.getCount=function(){return this.count},e.prototype.deleteBuffer=function(){this.context.deleteBuffer(this.buffer),this.buffer=null},e}();t.AttributeBufferInfo=a;var i=function(e){switch(e){case r.FLOAT_VEC2:return 2;case r.FLOAT_VEC3:return 3;case r.FLOAT_VEC4:return 4;default:o.assertNever(e)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.IndexBufferInfo=void 0;var r=function(){function e(e){this.context=e,this.count=0,this.buffer=e.createBuffer()}return e.prototype.setValue=function(e){this.count=e.length,this.context.bindBuffer(this.context.ELEMENT_ARRAY_BUFFER,this.buffer),this.context.bufferData(this.context.ELEMENT_ARRAY_BUFFER,new Uint16Array(e),this.context.STATIC_DRAW)},e.prototype.setIndexBuffer=function(){this.context.bindBuffer(this.context.ELEMENT_ARRAY_BUFFER,this.buffer)},e.prototype.getCount=function(){return this.count},e.prototype.deleteBuffer=function(){this.context.deleteBuffer(this.buffer),this.buffer=null},e}();t.IndexBufferInfo=r},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.TextureSection=void 0;var a=o(n(0)),i=n(3),u=n(5),l=n(7),s=n(6),c=n(73);t.TextureSection=a.default.memo(i.connect((function(e){return{values:e.textureValues}}))((function(e){var t=e.textureFields;return a.default.createElement("div",{className:"viewer-options-section"},a.default.createElement(s.SectionTitle,{text:u.translations.textures}),t.map((function(e){return a.default.createElement(l.SectionField,{text:e.name},a.default.createElement(c.TextureField,r({},e)))})))})))},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.DrawOptionsSection=void 0;var o=r(n(0)),a=n(5),i=n(6);t.DrawOptionsSection=o.default.memo((function(){return o.default.createElement("div",{className:"viewer-options-section"},o.default.createElement(i.SectionTitle,{text:a.translations.drawOptions}))}))},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ShadersSelectorSection=void 0;var o=r(n(0)),a=n(3),i=n(12),u=n(25),l=n(5),s=n(13),c=n(7),f=n(6);t.ShadersSelectorSection=o.default.memo(a.connect((function(e){return{selectedVertexFileId:e.vertexFilePath,selectedFragmentFileId:e.fragmentFilePath}}),(function(e){return{setSelectedVertexFileId:function(t){return e({type:"SET_VERTEX_FILE_PATH",payload:{path:t}})},setSelectedFragmentFileId:function(t){return e({type:"SET_FRAGMENT_FILE_PATH",payload:{path:t}})}}}))((function(e){var t=e.selectedVertexFileId,n=e.selectedFragmentFileId,r=e.setSelectedVertexFileId,a=e.setSelectedFragmentFileId,d=o.default.useState([]),p=d[0],h=d[1],m=o.default.useCallback((function(){i.viewerEndpoint.getWorkspaceFilesOfTypes(u.shaderExtensions).then((function(e){h(e.map((function(e){return{id:e.filePath,display:e.fileName}})))}))}),[]);return o.default.useEffect((function(){return m()}),[]),o.default.createElement("div",{className:"viewer-options-section"},o.default.createElement(f.SectionTitle,{text:l.translations.shaders},o.default.createElement("button",{onClick:m},"Sync")),o.default.createElement(c.SectionField,{text:l.translations.vertexShader},o.default.createElement(s.Dropdown,{selectedItemId:t,onChange:r,options:p})),o.default.createElement(c.SectionField,{text:l.translations.fragmentShader},o.default.createElement(s.Dropdown,{selectedItemId:n,onChange:a,options:p})))})))},function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||t.hasOwnProperty(n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),o(n(57),t),o(n(8),t),o(n(69),t)},function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||t.hasOwnProperty(n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),o(n(58),t),o(n(67),t)},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.VirtualizedList=void 0;var o=r(n(0)),a=n(32),i=n(8),u=o.default.memo((function(e){var t=e.index,n=e.style,r=e.data.itemRenderer;return o.default.createElement("div",{style:n},r(t))}));t.VirtualizedList=function(e){var t=e.itemCount,n=e.itemHeight,r=e.maxHeight,l=e.itemRenderer,s=e.width,c=void 0===s?"100%":s,f=e.className,d=Math.min(t*n,r),p=o.default.useMemo((function(){return{itemRenderer:l}}),[l]),h=o.default.useRef(null);return i.useScrollListToIndex(h,e.highlightedIndex),o.default.createElement(a.FixedSizeList,{className:f,ref:h,height:d,itemCount:t,itemSize:n,width:c,itemData:p},u)}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useDropdownState=void 0;var o=r(n(0)),a=n(27),i=n(14),u=n(26),l={selectedIndexes:[],highlightedIndex:null,isOpen:!1},s=function(e,t,n){return a.reducer(e,t,n)};t.useDropdownState=function(e,t,n,r,a){void 0===a&&(a=s);var c=o.default.useCallback((function(t,n){return a(t,e,n)}),[e,a]),f=n?i.overrideDefinedPropsOnly(l,n):l;return u.useUnionState(f,t,c,r)}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useScrollListToIndex=void 0;var o=r(n(0)),a=n(28);t.useScrollListToIndex=function(e,t){o.default.useEffect((function(){if(null!==t&&e.current){var n=e.current;(a.hasProperty(n,"_listRef")?n._listRef:n).scrollToItem(t,"smart")}}),[t])}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useDropdownCloseWhenClickedOutside=void 0;var o=r(n(0)),a=n(8);t.useDropdownCloseWhenClickedOutside=function(e,t){var n=o.default.useCallback((function(){return t(["CloseList"])}),[t]);a.useClickedOutsideHandler(e,n)}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useDropdownCloseWhenFocusOut=void 0;var o=r(n(0)),a=n(29);t.useDropdownCloseWhenFocusOut=function(e,t){var n=o.default.useCallback((function(){return t(["CloseList"])}),[t]);a.useFocusOutHandler(e,n)}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useFocusOnStateChange=void 0;var o=r(n(0)),a=n(30);t.useFocusOnStateChange=function(e,t,n){var r=o.default.useRef(!0),i=a.usePreviousValue(t);o.default.useEffect((function(){t===i||t!==n||r.current||null!==e.current&&e.current.focus(),r.current=!1}),[t])}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useClickedOutsideHandler=void 0;var o=r(n(0));t.useClickedOutsideHandler=function(e,t){o.default.useEffect((function(){function n(n){var r;(null===(r=e.current)||void 0===r?void 0:r.contains(n.target))||t()}return document.addEventListener("mousedown",n),function(){document.removeEventListener("mousedown",n)}}),[t])}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useChunkLoader=void 0;var o=r(n(0));t.useChunkLoader=function(e,t){var n=o.default.useMemo((function(){return Array(e).fill({value:null,isLoaded:!1})}),[e]),r=o.default.useCallback((function(e){return n[e].isLoaded}),[n]),a=o.default.useCallback((function(e,r){return t(e,r).then((function(t){for(var o=e,a=0;o<=r;o++,a++)n[o]={value:t[a],isLoaded:!0}}))}),[n]);return{items:n,isItemLoaded:r,loadMoreItems:a}}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useDropdownListKeyboardNavigator=void 0;var o=r(n(0)),a=n(31);t.useDropdownListKeyboardNavigator=function(e){return o.default.useMemo((function(){return a.createListKeyboardNavigator(e)}),[e])}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.VirtualizedLazyLoadingList=void 0;var o=r(n(0)),a=n(32),i=n(8),u=r(n(68)),l=o.default.memo((function(e){var t=e.index,n=e.style,r=e.data,a=r.itemRenderer,i=r.isItemLoaded;return o.default.createElement("div",{style:n},a(t,i(t)))}));t.VirtualizedLazyLoadingList=function(e){var t=e.itemCount,n=e.itemHeight,r=e.maxHeight,s=e.itemRenderer,c=e.width,f=void 0===c?"100%":c,d=e.isItemLoaded,p=e.loadMoreItems,h=e.highlightedIndex,m=e.className,v=Math.min(t*n,r),g=o.default.useMemo((function(){return{itemRenderer:s,isItemLoaded:d}}),[s,d]),y=o.default.useRef(null);return i.useScrollListToIndex(y,h),o.default.createElement(u.default,{ref:y,isItemLoaded:d,itemCount:t,loadMoreItems:p},(function(e){var r=e.onItemsRendered,i=e.ref;return o.default.createElement(a.FixedSizeList,{className:m,ref:i,height:v,itemCount:t,itemSize:n,onItemsRendered:r,width:f,itemData:g},l)}))}},function(e,t,n){"use strict";n.r(t);var r=n(0);var o=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t},u=function(e){function t(){var e,n,r;o(this,t);for(var a=arguments.length,u=Array(a),l=0;l<a;l++)u[l]=arguments[l];return n=r=i(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(u))),r._lastRenderedStartIndex=-1,r._lastRenderedStopIndex=-1,r._memoizedUnloadedRanges=[],r._onItemsRendered=function(e){var t=e.visibleStartIndex,n=e.visibleStopIndex;r._lastRenderedStartIndex=t,r._lastRenderedStopIndex=n,r._ensureRowsLoaded(t,n)},r._setRef=function(e){r._listRef=e},i(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"resetloadMoreItemsCache",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];this._memoizedUnloadedRanges=[],e&&this._ensureRowsLoaded(this._lastRenderedStartIndex,this._lastRenderedStopIndex)}},{key:"componentDidMount",value:function(){0}},{key:"render",value:function(){return(0,this.props.children)({onItemsRendered:this._onItemsRendered,ref:this._setRef})}},{key:"_ensureRowsLoaded",value:function(e,t){var n=this.props,r=n.isItemLoaded,o=n.itemCount,a=n.minimumBatchSize,i=void 0===a?10:a,u=n.threshold,l=void 0===u?15:u,s=function(e){for(var t=e.isItemLoaded,n=e.itemCount,r=e.minimumBatchSize,o=e.startIndex,a=e.stopIndex,i=[],u=null,l=null,s=o;s<=a;s++){t(s)?null!==l&&(i.push(u,l),u=l=null):(l=s,null===u&&(u=s))}if(null!==l){for(var c=Math.min(Math.max(l,u+r-1),n-1),f=l+1;f<=c&&!t(f);f++)l=f;i.push(u,l)}if(i.length)for(;i[1]-i[0]+1<r&&i[0]>0;){var d=i[0]-1;if(t(d))break;i[0]=d}return i}({isItemLoaded:r,itemCount:o,minimumBatchSize:i,startIndex:Math.max(0,e-l),stopIndex:Math.min(o-1,t+l)});(this._memoizedUnloadedRanges.length!==s.length||this._memoizedUnloadedRanges.some((function(e,t){return s[t]!==e})))&&(this._memoizedUnloadedRanges=s,this._loadUnloadedRanges(s))}},{key:"_loadUnloadedRanges",value:function(e){for(var t=this,n=this.props.loadMoreItems||this.props.loadMoreRows,r=function(r){var o=e[r],a=e[r+1],i=n(o,a);null!=i&&i.then((function(){if(function(e){var t=e.lastRenderedStartIndex,n=e.lastRenderedStopIndex,r=e.startIndex,o=e.stopIndex;return!(r>n||o<t)}({lastRenderedStartIndex:t._lastRenderedStartIndex,lastRenderedStopIndex:t._lastRenderedStopIndex,startIndex:o,stopIndex:a})){if(null==t._listRef)return;"function"==typeof t._listRef.resetAfterIndex?t._listRef.resetAfterIndex(o,!0):("function"==typeof t._listRef._getItemStyleCache&&t._listRef._getItemStyleCache(-1),t._listRef.forceUpdate())}}))},o=0;o<e.length;o+=2)r(o)}}]),t}(r.PureComponent);t.default=u},function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||t.hasOwnProperty(n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),o(n(70),t),o(n(71),t),o(n(31),t),o(n(27),t),o(n(72),t)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,n){"use strict";var r=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var a=arguments[t],i=0,u=a.length;i<u;i++,o++)r[o]=a[i];return r},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.TextureField=void 0;var a=o(n(0)),i=n(3),u=n(86),l=n(13),s=n(88);t.TextureField=a.default.memo(i.connect((function(e,t){return e.textureValues[t.name]}),(function(e,t){return{setOptionAndValue:function(e,t){}}}))((function(e){var t=e.optionId,n=e.value,o=e.setOptionAndValue,i=a.default.useMemo((function(){return r([u.customOption],s.getBindingOptions())}),[]);u.customOption.id;return a.default.createElement("div",null,i.length>1&&a.default.createElement(l.Dropdown,{selectedItemId:t,onChange:function(e){return o(e,n)},options:i}),a.default.createElement("div",null,"dupa"))})))},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.UniformSection=void 0;var a=o(n(0)),i=n(3),u=n(5),l=n(7),s=n(6),c=n(75);t.UniformSection=a.default.memo(i.connect((function(e){return{values:e.uniformValues}}))((function(e){var t=e.uniformFields;return a.default.createElement("div",{className:"viewer-options-section"},a.default.createElement(s.SectionTitle,{text:u.translations.uniforms}),t.map((function(e){return a.default.createElement(l.SectionField,{text:e.name},a.default.createElement(c.UniformField,r({},e)))})))})))},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var a=arguments[t],i=0,u=a.length;i<u;i++,o++)r[o]=a[i];return r},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.UniformField=void 0;var i=a(n(0)),u=n(3),l=n(23),s=n(76),c=n(86),f=n(13),d=n(22),p=n(87);t.UniformField=i.default.memo(u.connect((function(e,t){var n=e.uniformValues[t.name];return(null==n?void 0:n.type)===t.type?n:p.getDefaultProps(t.type)}),(function(e,t){return{setOptionAndValue:function(n,o){e({type:"SET_UNIFORM",payload:r(r({},t),{optionId:n,value:d.bindingNames.has(n)?d.getBindingValue(n,t.type):o})})}}}))((function(e){var t=e.type,n=e.optionId,a=e.value,u=e.setOptionAndValue,p=i.default.useMemo((function(){return o([c.customOption],d.getBindingOptions(t))}),[t]),h=n===c.customOption.id;return i.default.createElement("div",null,p.length>1&&i.default.createElement(f.Dropdown,{selectedItemId:n,onChange:function(e){return u(e,a)},options:p}),function(e,t){switch(e){case l.UniformType.FLOAT_VEC2:return i.default.createElement(s.Vector2NumberInput,r({},t));case l.UniformType.FLOAT_VEC3:return i.default.createElement(s.Vector3NumberInput,r({},t));case l.UniformType.FLOAT_VEC4:return i.default.createElement(s.Vector4NumberInput,r({},t));case l.UniformType.FLOAT_MAT4:return i.default.createElement(s.Matrix4x4NumberInput,r({},t));default:return i.default.createElement("div",null,"Uniform not supported")}}(t,{value:a,onChange:h?function(e){return u(n,e)}:void 0,readonly:!h}))})))},function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),o(n(77),t),o(n(78),t),o(n(79),t),o(n(80),t)},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Matrix4x4NumberInput=void 0;var a=o(n(0)),i=n(4),u=n(9),l=i.repeat(16,0);t.Matrix4x4NumberInput=function(e){var t;return a.default.createElement(u.MultiNumberInput,r({},e,{rows:4,columns:4,value:null!==(t=e.value)&&void 0!==t?t:l}))}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Vector2NumberInput=void 0;var a=o(n(0)),i=n(9),u=[0,0];t.Vector2NumberInput=function(e){var t;return a.default.createElement(i.MultiNumberInput,r({},e,{rows:1,columns:2,value:null!==(t=e.value)&&void 0!==t?t:u}))}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Vector3NumberInput=void 0;var a=o(n(0)),i=n(9),u=[0,0,0];t.Vector3NumberInput=function(e){var t;return a.default.createElement(i.MultiNumberInput,r({},e,{rows:1,columns:3,value:null!==(t=e.value)&&void 0!==t?t:u}))}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Vector4NumberInput=void 0;var a=o(n(0)),i=n(9),u=[0,0,0,0];t.Vector4NumberInput=function(e){var t;return a.default.createElement(i.MultiNumberInput,r({},e,{rows:1,columns:4,value:null!==(t=e.value)&&void 0!==t?t:u}))}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ShadersCompileResultArea=void 0;var o=r(n(0));t.ShadersCompileResultArea=function(e){return o.default.createElement("div",{className:"shader-compile-errors-area"},e.errors)}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.usePerspectiveCamera=void 0;var o=r(n(0)),a=n(83),i=n(84);t.usePerspectiveCamera=function(e,t,n){o.default.useEffect((function(){if(e){var r={longitude:1,latitude:1,radius:2};new a.CameraPositionManipulator(e,(function(){return r}),(function(e){r=e;var o=45*Math.PI/180,u=t.width/t.height,l=i.mat4.create();i.mat4.perspective(l,o,u,.1,100);var s=i.mat4.create(),c=a.cameraPositionToVector3(r);i.mat4.lookAt(s,[c.x,c.y,c.z],[0,0,0],[0,1,0]);var f=i.mat4.create();i.mat4.multiply(f,l,s),n(Array.from(f))}))}}),[e])}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.CameraPositionManipulator=t.cameraPositionToVector3=void 0;t.cameraPositionToVector3=function(e){var t=e.radius*Math.sin(e.latitude),n=e.radius*Math.cos(e.latitude),r=n*Math.cos(e.longitude);return{x:n*Math.sin(e.longitude),y:t,z:r}};var o=function(e){return Math.min(Math.max(e,1),10)},a=function(){function e(e,t,n){var a=this;this.element=e,this.positionProvider=t,this.onPositionChange=n,this.pointerPosition={x:0,y:0},this.eventListeners=new Map,this.isMoving=!1,this.dispatchAction=function(e){var t=function(e,t){switch(t.type){case"orbitRotate":return r(r({},e),{latitude:(a=e.latitude+t.deltaLatitude,Math.min(Math.max(a,-Math.PI/2+.1),Math.PI/2-.1)),longitude:(n=e.longitude+t.deltaLongitude,n>Math.PI?n-2*Math.PI:n<-Math.PI?n+2*Math.PI:n)});case"zoomInAt":return r(r({},e),{radius:o(e.radius-.1)});case"zoomOutAt":return r(r({},e),{radius:o(e.radius+.1)});default:return e}var n,a}(a.positionProvider(),e);a.onPositionChange(t)},this.onMouseDown=function(e){0===e.button&&(a.pointerPosition={x:e.offsetX,y:e.offsetY},a.isMoving=!0)},this.onMouseMove=function(e){if(a.isMoving){a.dispatchAction({type:"orbitRotate",deltaLongitude:.01*-(e.offsetX-a.pointerPosition.x),deltaLatitude:.01*(e.offsetY-a.pointerPosition.y)})}a.pointerPosition={x:e.offsetX,y:e.offsetY}},this.onMouseUp=function(){a.isMoving=!1},this.onMouseLeave=function(){a.isMoving=!1},this.onWheel=function(e){var t=e.deltaY<0?"zoomInAt":"zoomOutAt";a.dispatchAction({type:t})},this.registerEvent("mousedown",this.onMouseDown),this.registerEvent("mousemove",this.onMouseMove),this.registerEvent("mouseup",this.onMouseUp),this.registerEvent("mouseleave",this.onMouseLeave),this.registerEvent("wheel",this.onWheel)}return e.prototype.dispose=function(){var e=this;this.eventListeners.forEach((function(t,n){return e.element.removeEventListener(n,t)}))},e.prototype.registerEvent=function(e,t){this.element.addEventListener(e,t),this.eventListeners.set(e,t)},e}();t.CameraPositionManipulator=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.mat4=t.isPowerOf2=void 0;t.isPowerOf2=function(e){return 0==(e&e-1)},function(e){e.create=function(){var e=new Float32Array(16);return e[0]=1,e[5]=1,e[10]=1,e[15]=1,e},e.perspective=function(e,t,n,r,o){var a,i=1/Math.tan(t/2);return e[0]=i/n,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=i,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,null!=o&&o!==1/0?(a=1/(r-o),e[10]=(o+r)*a,e[14]=2*o*r*a):(e[10]=-1,e[14]=-2*r),e},e.lookAt=function(e,t,n,r){var o,a,i,u,l,s,c,f,d,p,h=t[0],m=t[1],v=t[2],g=r[0],y=r[1],b=r[2],w=n[0],_=n[1],S=n[2];return Math.abs(h-w)<1e-6&&Math.abs(m-_)<1e-6&&Math.abs(v-S)<1e-6?function(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}(e):(c=h-w,f=m-_,d=v-S,o=y*(d*=p=1/Math.hypot(c,f,d))-b*(f*=p),a=b*(c*=p)-g*d,i=g*f-y*c,(p=Math.hypot(o,a,i))?(o*=p=1/p,a*=p,i*=p):(o=0,a=0,i=0),u=f*i-d*a,l=d*o-c*i,s=c*a-f*o,(p=Math.hypot(u,l,s))?(u*=p=1/p,l*=p,s*=p):(u=0,l=0,s=0),e[0]=o,e[1]=u,e[2]=c,e[3]=0,e[4]=a,e[5]=l,e[6]=f,e[7]=0,e[8]=i,e[9]=s,e[10]=d,e[11]=0,e[12]=-(o*h+a*m+i*v),e[13]=-(u*h+l*m+s*v),e[14]=-(c*h+f*m+d*v),e[15]=1,e)},e.multiply=function(e,t,n){var r=t[0],o=t[1],a=t[2],i=t[3],u=t[4],l=t[5],s=t[6],c=t[7],f=t[8],d=t[9],p=t[10],h=t[11],m=t[12],v=t[13],g=t[14],y=t[15],b=n[0],w=n[1],_=n[2],S=n[3];return e[0]=b*r+w*u+_*f+S*m,e[1]=b*o+w*l+_*d+S*v,e[2]=b*a+w*s+_*p+S*g,e[3]=b*i+w*c+_*h+S*y,b=n[4],w=n[5],_=n[6],S=n[7],e[4]=b*r+w*u+_*f+S*m,e[5]=b*o+w*l+_*d+S*v,e[6]=b*a+w*s+_*p+S*g,e[7]=b*i+w*c+_*h+S*y,b=n[8],w=n[9],_=n[10],S=n[11],e[8]=b*r+w*u+_*f+S*m,e[9]=b*o+w*l+_*d+S*v,e[10]=b*a+w*s+_*p+S*g,e[11]=b*i+w*c+_*h+S*y,b=n[12],w=n[13],_=n[14],S=n[15],e[12]=b*r+w*u+_*f+S*m,e[13]=b*o+w*l+_*d+S*v,e[14]=b*a+w*s+_*p+S*g,e[15]=b*i+w*c+_*h+S*y,e}}(t.mat4||(t.mat4={}))},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useDocumentWatcher=void 0;var o=r(n(0)),a=n(12);t.useDocumentWatcher=function(e,t){o.default.useEffect((function(){var n=a.viewerEndpoint.subscribeToDocumentSave(e,t);return a.viewerEndpoint.getDocumentText(e).then(t),function(){return n()}}),[e])}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.customOption=void 0,t.customOption={id:"custom",display:"Custom"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getDefaultProps=void 0;var r=n(4),o=n(11),a=n(23),i=n(86),u=function(e){switch(e){case a.UniformType.FLOAT_VEC2:return r.repeat(2,0);case a.UniformType.FLOAT_VEC3:return r.repeat(3,0);case a.UniformType.FLOAT_VEC4:return r.repeat(4,0);case a.UniformType.FLOAT_MAT4:return r.repeat(16,0);default:o.assertNever(e)}};t.getDefaultProps=function(e){return{optionId:i.customOption.id,value:u(e)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getBindingOptions=t.getBindingValue=t.bindingNames=t.textureBindings=void 0,t.textureBindings={texture1:{display:"tes 1",value:"fsefsfs"},texture2:{display:"tex 22",value:"aefaef"}},t.bindingNames=new Set(Object.keys(t.textureBindings));t.getBindingValue=function(e){return t.textureBindings[e].value};t.getBindingOptions=function(){return Object.entries(t.textureBindings).map((function(e){return{id:e[0],display:e[1].display}}))}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.AttributeBuffersSection=void 0;var a=o(n(0)),i=n(3),u=n(5),l=n(7),s=n(6),c=n(90);t.AttributeBuffersSection=a.default.memo(i.connect((function(e){return{values:e.attributeBufferValues}}))((function(e){var t=e.attributeBufferFields;return a.default.createElement("div",{className:"viewer-options-section"},a.default.createElement(s.SectionTitle,{text:u.translations.attributeBuffers}),t.map((function(e){return a.default.createElement(l.SectionField,{text:e.name},a.default.createElement(c.AttributeBufferField,r({},e)))})))})))},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var a=arguments[t],i=0,u=a.length;i<u;i++,o++)r[o]=a[i];return r},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.AttributeBufferField=void 0;var i=a(n(0)),u=n(3),l=n(51),s=n(76),c=n(86),f=n(13),d=n(91),p=n(92);t.AttributeBufferField=i.default.memo(u.connect((function(e,t){var n=e.attributeBufferValues[t.name];return(null==n?void 0:n.type)===t.type?n:p.getDefaultProps(t.type)}),(function(e,t){return{setOptionAndValue:function(n,o){e({type:"SET_ATTRIBUTE_BUFFER",payload:r(r({},t),{optionId:n,value:d.bindingNames.has(n)?d.getBindingValue(n,t.type):o})})}}}))((function(e){var t=e.type,n=e.optionId,a=e.value,u=e.setOptionAndValue,p=i.default.useMemo((function(){return o([c.customOption],d.getBindingOptions(t))}),[t]),h=n===c.customOption.id;return i.default.createElement("div",null,p.length>1&&i.default.createElement(f.Dropdown,{selectedItemId:n,onChange:function(e){return u(e,a)},options:p}),function(e,t){switch(e){case l.AttributeBufferType.FLOAT_VEC2:return i.default.createElement(s.Vector2NumberInput,r({},t));case l.AttributeBufferType.FLOAT_VEC3:return i.default.createElement(s.Vector3NumberInput,r({},t));case l.AttributeBufferType.FLOAT_VEC4:return i.default.createElement(s.Vector4NumberInput,r({},t));default:return i.default.createElement("div",null,"Uniform not supported")}}(t,{value:a,onChange:h?function(e){return u(n,e)}:void 0,readonly:!h}))})))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getBindingOptions=t.getBindingValue=t.bindingNames=t.attributeBufferBindings=void 0;var r=n(51);t.attributeBufferBindings=new Map([[r.AttributeBufferType.FLOAT_VEC2,{bindingab:{display:"binding ab1",value:[1,2,3]}}]]),t.bindingNames=new Set(Array.from(t.attributeBufferBindings.values()).flatMap(Object.keys));t.getBindingValue=function(e,n){return t.attributeBufferBindings.get(n)[e].value};t.getBindingOptions=function(e){var n=t.attributeBufferBindings.get(e);return n?Object.entries(n).map((function(e){return{id:e[0],display:e[1].display}})):[]}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getDefaultProps=void 0;var r=n(51),o=n(4),a=n(11),i=n(86),u=function(e){switch(e){case r.AttributeBufferType.FLOAT_VEC2:return o.repeat(2,0);case r.AttributeBufferType.FLOAT_VEC3:return o.repeat(3,0);case r.AttributeBufferType.FLOAT_VEC4:return o.repeat(4,0);default:a.assertNever(e)}};t.getDefaultProps=function(e){return{optionId:i.customOption.id,value:u(e)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,