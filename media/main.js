!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t),n.d(t,"createUniformBindings",(function(){return Oe}));var r,o=function(e,t){var n=e.indexOf(t);n>-1&&e.splice(n,1)},i=function(e,t){return e.substring(0,e.length-t)},u=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){var t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}))},a=acquireVsCodeApi(),s=new(function(){function e(){var e=this;this.eventListeners=[],window.addEventListener("message",(function(t){e.eventListeners.forEach((function(e){return e(t.data)}))}))}return e.prototype.getWorkspaceFilesOfTypes=function(e){var t=this,n=u();return a.postMessage({type:"getWorkspaceFilesOfTypes",id:n,payload:{extensions:e}}),new Promise((function(e){var r=function(o){"getWorkspaceFilesOfTypes"===o.type&&o.id===n&&(e(o.payload.files),t.removeListener(r))};t.eventListeners.push(r)}))},e.prototype.getDocumentText=function(e){var t=this,n=u();return a.postMessage({type:"getDocumentText",id:n,payload:{fileName:e}}),new Promise((function(e){var r=function(o){"getDocumentText"===o.type&&o.id===n&&(e(o.payload.text),t.removeListener(r))};t.eventListeners.push(r)}))},e.prototype.getExtensionFileUri=function(e){var t=this,n=u();return a.postMessage({type:"getExtensionFileUri",id:n,payload:{fileName:e}}),new Promise((function(e){var r=function(o){"getExtensionFileUri"===o.type&&o.id===n&&(e(o.payload.uri),t.removeListener(r))};t.eventListeners.push(r)}))},e.prototype.subscribeToDocumentSave=function(e,t){var n=this;a.postMessage({type:"subscribeToDocumentTextChange",payload:{fileName:e}});var r=function(n){"onDocumentTextChange"===n.type&&n.payload.filePath===e&&t(n.payload.text)};return this.eventListeners.push(r),function(){n.removeListener(r),a.postMessage({type:"unsubscribeToDocumentTextChange",payload:{fileName:e}})}},e.prototype.showWebViewDevTools=function(){a.postMessage({type:"showWebViewDevTools"})},e.prototype.removeListener=function(e){o(this.eventListeners,e)},e}()),c=function(){return(c=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},f=function(e){return Math.min(Math.max(e,1),10)},l=function(){function e(e,t,n){var r=this;this.element=e,this.positionProvider=t,this.onPositionChange=n,this.pointerPosition={x:0,y:0},this.eventListeners=new Map,this.isMoving=!1,this.dispatchAction=function(e){var t=function(e,t){switch(t.type){case"orbitRotate":return c(c({},e),{latitude:(r=e.latitude+t.deltaLatitude,Math.min(Math.max(r,-Math.PI/2+.1),Math.PI/2-.1)),longitude:(n=e.longitude+t.deltaLongitude,n>Math.PI?n-2*Math.PI:n<-Math.PI?n+2*Math.PI:n)});case"zoomInAt":return c(c({},e),{radius:f(e.radius-.1)});case"zoomOutAt":return c(c({},e),{radius:f(e.radius+.1)});default:return e}var n,r}(r.positionProvider(),e);r.onPositionChange(t)},this.onMouseDown=function(e){0===e.button&&(r.pointerPosition={x:e.offsetX,y:e.offsetY},r.isMoving=!0)},this.onMouseMove=function(e){if(r.isMoving){r.dispatchAction({type:"orbitRotate",deltaLongitude:.01*-(e.offsetX-r.pointerPosition.x),deltaLatitude:.01*(e.offsetY-r.pointerPosition.y)})}r.pointerPosition={x:e.offsetX,y:e.offsetY}},this.onMouseUp=function(){r.isMoving=!1},this.onMouseLeave=function(){r.isMoving=!1},this.onWheel=function(e){var t=e.deltaY<0?"zoomInAt":"zoomOutAt";r.dispatchAction({type:t})},this.registerEvent("mousedown",this.onMouseDown),this.registerEvent("mousemove",this.onMouseMove),this.registerEvent("mouseup",this.onMouseUp),this.registerEvent("mouseleave",this.onMouseLeave),this.registerEvent("wheel",this.onWheel)}return e.prototype.dispose=function(){var e=this;this.eventListeners.forEach((function(t,n){return e.element.removeEventListener(n,t)}))},e.prototype.registerEvent=function(e,t){this.element.addEventListener(e,t),this.eventListeners.set(e,t)},e}(),h={vertexFilePath:null,fragmentFilePath:null,drawMode:"elements",meshId:"cube"},p=function(){var e;return null!==(e=a.getState())&&void 0!==e?e:h},d=function(e){return a.setState(Object.assign(p(),e))},m=function(){function e(e){this.context=e,this.count=0,this.buffer=e.createBuffer()}return e.prototype.setValue=function(e){this.count=e.length,this.context.bindBuffer(this.context.ELEMENT_ARRAY_BUFFER,this.buffer),this.context.bufferData(this.context.ELEMENT_ARRAY_BUFFER,new Uint16Array(e),this.context.STATIC_DRAW)},e.prototype.setIndexBuffer=function(){this.context.bindBuffer(this.context.ELEMENT_ARRAY_BUFFER,this.buffer)},e.prototype.getCount=function(){return this.count},e.prototype.deleteBuffer=function(){this.context.deleteBuffer(this.buffer),this.buffer=null},e}(),v="SHADERS",y=function(){return(y=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},g=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],u=0,a=i.length;u<a;u++,o++)r[o]=i[u];return r},x={emptyItem:!1},T=function(e,t,n){var r=y(y({},x),n),o=document.createElement("select");o.className="dropdown-base "+t;var i=null,u=[],a=function(t){e(i=t)};o.onchange=function(){var e=u.find((function(e){return e.item.id===o.value}));e.item.id?a(e.item):a(null)};var s=function(e){u.forEach((function(t){t.item.id===e?(t.element.selected=!0,a(t.item)):t.element.selected=!1}))};return[o,{setItems:function(e){o.innerHTML="",u.length=0,(r.emptyItem?g([{id:"",display:""}],e):g(e)).forEach((function(e){var t=document.createElement("option");t.value=e.id,t.textContent=e.display,t.selected=e.id===(null==i?void 0:i.id),o.appendChild(t),u.push({element:t,item:e})}))},getItems:function(){return u.map((function(e){return e.item}))},setSelectedItemById:s,setSelectedItemByIndex:function(e){return s(u[e].item.id)},getSelectedItem:function(){return i},clearSelection:function(){u.forEach((function(e){return e.element.selected=!1})),a(null)}}]},E=function(e,t){var n=T((function(n){n?(e.forEach((function(e){return e.element.classList.add("hidden")})),e.find((function(e){return e.id===n.id})).element.classList.remove("hidden"),null==t||t(n.id)):null==t||t(null)})),r=n[0],o=n[1];return o.setItems(e.map((function(e){return{id:e.id,display:e.display}}))),o.setSelectedItemByIndex(0),r},b=function(e,t){var n=document.createElement("h3");return n.textContent=e,n.className=t+" section-title",{element:n}},A=function(e,t,n){var r=document.createElement("button");return r.onclick=n,r.className=t,r.textContent=e,{element:r}},w=function(e,t,n){var r=document.createElement("div");r.className=(null!=n?n:"")+" options-wrapper";var o=document.createElement("label");return o.className="options-label",o.textContent=t,e.className=e.className+" options-content",r.appendChild(o),r.appendChild(e),r},C=function(e,t){var n=document.createElement("div");return n.className=e,null==t||t.forEach((function(e){return n.appendChild(e)})),n},F=function(e,t){return e.hasOwnProperty(t)},I=function(e){throw new Error("Unhandled union member: "+JSON.stringify(e))},M=function(){function e(e){this.value=e,this.observers=[]}return e.prototype.attach=function(e){this.observers.push(e)},e.prototype.detach=function(e){o(this.observers,e)},e.prototype.detachAll=function(){this.observers.length=0},e.prototype.setValue=function(e){this.value=e,this.notify()},e.prototype.getValue=function(){return this.value},e.prototype.forceNotify=function(){this.notify()},e.prototype.notify=function(){if(null!==this.value){var e=this.value;this.observers.forEach((function(t){return t(e)}))}},e}(),O=function(){function e(e){this.keySelector=e,this.map=new Map}return e.prototype.get=function(e){return this.map.get(this.keySelector(e))},e.prototype.set=function(e,t){this.map.set(this.keySelector(e),t)},e.prototype.has=function(e){return this.map.has(this.keySelector(e))},e.prototype.entriesStrKey=function(){return Array.from(this.map.entries())},e.prototype.deleteStrKey=function(e){this.map.delete(e)},e.prototype.delete=function(e){this.map.delete(this.keySelector(e))},e.prototype.clear=function(){this.map.clear()},e}();!function(e){e[e.FLOAT_VEC2=35664]="FLOAT_VEC2",e[e.FLOAT_VEC3=35665]="FLOAT_VEC3",e[e.FLOAT_VEC4=35666]="FLOAT_VEC4"}(r||(r={}));var _,P=function(){function e(e,t,n,r){this.context=e,this.name=n,this.type=r,this.count=0,this.attachToProgram(t),this.buffer=e.createBuffer()}return e.prototype.attachToProgram=function(e){this.location=this.context.getAttribLocation(e,this.name)},e.prototype.setValue=function(e){this.count=e.length,this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffer);var t=[].concat.apply([],e);this.context.bufferData(this.context.ARRAY_BUFFER,new Float32Array(t),this.context.STATIC_DRAW)},e.prototype.setAttributeBuffer=function(){if(null!==this.buffer){this.context.enableVertexAttribArray(this.location),this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffer);var e=S(this.type),t=this.context.FLOAT;this.context.vertexAttribPointer(this.location,e,t,!1,0,0)}},e.prototype.getAttributeBufferType=function(){return this.type},e.prototype.getCount=function(){return this.count},e.prototype.deleteBuffer=function(){this.context.deleteBuffer(this.buffer),this.buffer=null},e}(),S=function(e){switch(e){case r.FLOAT_VEC2:return 2;case r.FLOAT_VEC3:return 3;case r.FLOAT_VEC4:return 4;default:I(e)}},L=function(e,t,n){var r=document.createElement("div");r.className="edit-input-grid";for(var o=[],i=function(){return o.map((function(e){return e.value}))},u=0;u<e;u++){var a=document.createElement("div");a.className="edit-input-row";for(var s=function(e){var r=u*t+e,s=document.createElement("input"),c={element:s,value:0};s.className="edit-input",s.type="number",s.value=(0).toString(),s.disabled=!n,s.oninput=function(){o[r].value=Number(s.value),null==n||n(i())},o.push(c),a.appendChild(s)},c=0;c<t;c++)s(c);r.appendChild(a)}return[r,{setValues:function(e){return o.forEach((function(t,n){t.value=e[n],t.element.value=t.value.toString()}))},getValues:i,setReadonly:function(e){return o.forEach((function(t){return t.element.readOnly=e}))}}]},R=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],u=0,a=i.length;u<a;u++,o++)r[o]=i[u];return r},V=function(){var e=document.createElement("div");return e.className="unsupported-error",e.innerText="Not supported uniform",e},B=function(e,t){var n=null;return{element:C("column-with-gap",R([E(e,(function(r){null==n||n();var o=e.find((function(e){return e.id===r})),i=function(e){return t(e)};o.value.attach(i),i(o.value.getValue()),n=function(){return o.value.detach(i)}}))],e.filter((function(e){return!!e.element})).map((function(e){return e.element})))),dispose:function(){return null==n?void 0:n()}}},U=function(e,t,n){var r=new M(t);return n&&(r.attach((function(e){return n(e)})),n(t)),{element:e(r),value:r,dispose:function(){return r.detachAll()}}},D=function(e,t,n){var r=L(1,e,(function(e){t.setValue(e)})),o=r[0],i=r[1];if(i.setValues(t.getValue()),!n){t.attach((function(e){return i.setValues(e)}))}return o},N=function(e,t,n){var r=function(e,t){return L(e,e,t)}(e,n?function(e){t.setValue(e)}:void 0),o=r[0],i=r[1];if(i.setValues(t.getValue()),!n){t.attach((function(e){return i.setValues(e)}))}return o},k=function(e,t,n){var r=document.createElement("input");r.className="edit-input",r.disabled=!n;return t.attach((function(e){return r.value=JSON.stringify(e)})),r.value=JSON.stringify(t.getValue()),r.oninput=function(){try{var n=JSON.parse(r.value);if(Array.isArray(n))n.every((function(t){return!!Array.isArray(t)&&t.length===e}))||console.log("not every element id the arra is same size");else 1!==e&&console.log("this is not an array type");t.setValue(n)}catch(e){console.log("this is not a json")}},r},j=function(){return(j=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},X=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],u=0,a=i.length;u<a;u++,o++)r[o]=i[u];return r},W=function(e){return e.name+";"+e.type},G=new O(W),Y=function(e,t,n,r){var o,i,u=n.map((function(n){var o=j({},n),i=G.get(o);if(i)return i.attributeBufferInfo.attachToProgram(t),{key:o,value:i};var u=new P(e,t,n.name,n.type),a=r.filter((function(e){return e.type===u.getAttributeBufferType()})),s=function(e){return u.setValue(e)},c=a.length?B(X([z(u)],H(a,u)),s):K(u,s),f=c.element,l=c.dispose;return{key:o,value:{component:w(f,n.name),attributeBufferInfo:u,dispose:function(){u.deleteBuffer(),null==l||l()}}}}));return i=(o=u).map((function(e){return W(e.key)})),G.entriesStrKey().filter((function(e){return!i.includes(e[0])})).forEach((function(e){e[1].dispose(),G.deleteStrKey(e[0])})),o.forEach((function(e){G.has(e.key)||G.set(e.key,e.value)})),u.map((function(e){return e.value}))},z=function(e){return j({id:"custom",display:"Custom"},K(e))},H=function(e,t){return e.map((function(e){var n=J(t.getAttributeBufferType(),!1,e.value);return{id:u(),element:n,display:e.name,value:e.value}}))},K=function(e,t){var n=(e.getAttributeBufferType(),[[0,0,0,1],[0,.5,0,1],[.9,0,0,1],[0,.5,0,1],[.7,0,0,1],[.7,.5,0,1]]),r=new M(n);return t&&(r.attach((function(e){return t(e)})),t(n)),{element:J(e.getAttributeBufferType(),!0,r),value:r,dispose:function(){return r.detachAll()}}},J=function(e,t,n){switch(e){case r.FLOAT_VEC2:return k(2,n,t);case r.FLOAT_VEC3:return k(3,n,t);case r.FLOAT_VEC4:return k(4,n,t);default:return V()}},q=["glsl"],Q=["jpg","bmp"],Z=["texture1.jpg","texture2.jpg"],$=function(e){return 0==(e&e-1)};!function(e){e.create=function(){var e=new Float32Array(16);return e[0]=1,e[5]=1,e[10]=1,e[15]=1,e},e.perspective=function(e,t,n,r,o){var i,u=1/Math.tan(t/2);return e[0]=u/n,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=u,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,null!=o&&o!==1/0?(i=1/(r-o),e[10]=(o+r)*i,e[14]=2*o*r*i):(e[10]=-1,e[14]=-2*r),e},e.lookAt=function(e,t,n,r){var o,i,u,a,s,c,f,l,h,p,d=t[0],m=t[1],v=t[2],y=r[0],g=r[1],x=r[2],T=n[0],E=n[1],b=n[2];return Math.abs(d-T)<1e-6&&Math.abs(m-E)<1e-6&&Math.abs(v-b)<1e-6?function(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}(e):(f=d-T,l=m-E,h=v-b,o=g*(h*=p=1/Math.hypot(f,l,h))-x*(l*=p),i=x*(f*=p)-y*h,u=y*l-g*f,(p=Math.hypot(o,i,u))?(o*=p=1/p,i*=p,u*=p):(o=0,i=0,u=0),a=l*u-h*i,s=h*o-f*u,c=f*i-l*o,(p=Math.hypot(a,s,c))?(a*=p=1/p,s*=p,c*=p):(a=0,s=0,c=0),e[0]=o,e[1]=a,e[2]=f,e[3]=0,e[4]=i,e[5]=s,e[6]=l,e[7]=0,e[8]=u,e[9]=c,e[10]=h,e[11]=0,e[12]=-(o*d+i*m+u*v),e[13]=-(a*d+s*m+c*v),e[14]=-(f*d+l*m+h*v),e[15]=1,e)},e.multiply=function(e,t,n){var r=t[0],o=t[1],i=t[2],u=t[3],a=t[4],s=t[5],c=t[6],f=t[7],l=t[8],h=t[9],p=t[10],d=t[11],m=t[12],v=t[13],y=t[14],g=t[15],x=n[0],T=n[1],E=n[2],b=n[3];return e[0]=x*r+T*a+E*l+b*m,e[1]=x*o+T*s+E*h+b*v,e[2]=x*i+T*c+E*p+b*y,e[3]=x*u+T*f+E*d+b*g,x=n[4],T=n[5],E=n[6],b=n[7],e[4]=x*r+T*a+E*l+b*m,e[5]=x*o+T*s+E*h+b*v,e[6]=x*i+T*c+E*p+b*y,e[7]=x*u+T*f+E*d+b*g,x=n[8],T=n[9],E=n[10],b=n[11],e[8]=x*r+T*a+E*l+b*m,e[9]=x*o+T*s+E*h+b*v,e[10]=x*i+T*c+E*p+b*y,e[11]=x*u+T*f+E*d+b*g,x=n[12],T=n[13],E=n[14],b=n[15],e[12]=x*r+T*a+E*l+b*m,e[13]=x*o+T*s+E*h+b*v,e[14]=x*i+T*c+E*p+b*y,e[15]=x*u+T*f+E*d+b*g,e}}(_||(_={}));var ee,te=function(){function e(e,t,n,r){this.context=e,this.name=n,this.unit=r,this.attachToProgram(t),this.texture=e.createTexture(),this.context.bindTexture(this.context.TEXTURE_2D,this.texture),this.setPlaceholderTexture()}return e.prototype.attachToProgram=function(e){this.location=this.context.getUniformLocation(e,this.name)},e.prototype.setUnit=function(e){this.unit=e},e.prototype.setSource=function(e){var t=this.context.RGBA,n=this.context.RGBA,r=this.context.UNSIGNED_BYTE;this.context.bindTexture(this.context.TEXTURE_2D,this.texture),this.context.texImage2D(this.context.TEXTURE_2D,0,t,n,r,e),$(e.width)&&$(e.height)?this.context.generateMipmap(this.context.TEXTURE_2D):(this.context.texParameteri(this.context.TEXTURE_2D,this.context.TEXTURE_WRAP_S,this.context.CLAMP_TO_EDGE),this.context.texParameteri(this.context.TEXTURE_2D,this.context.TEXTURE_WRAP_T,this.context.CLAMP_TO_EDGE),this.context.texParameteri(this.context.TEXTURE_2D,this.context.TEXTURE_MIN_FILTER,this.context.LINEAR))},e.prototype.prepareForRender=function(){null!==this.texture&&(this.context.activeTexture(this.context.TEXTURE0+this.unit),this.context.bindTexture(this.context.TEXTURE_2D,this.texture),this.context.uniform1i(this.location,this.unit))},e.prototype.deleteTexture=function(){this.context.deleteTexture(this.texture),this.texture=null},e.prototype.setPlaceholderTexture=function(){var e=this.context.RGBA,t=this.context.RGBA,n=this.context.UNSIGNED_BYTE,r=new Uint8Array([0,0,0,0]);this.context.texImage2D(this.context.TEXTURE_2D,0,e,1,1,0,t,n,r)},e}(),ne=function(e){return new Promise((function(t,n){var r=new Image;r.crossOrigin="",r.src=e,r.onload=function(){return t(r)},r.onerror=function(e){return n(e)}}))},re=function(){return(re=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},oe=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],u=0,a=i.length;u<a;u++,o++)r[o]=i[u];return r},ie=function(e){return e.name},ue=new O(ie),ae=function(e,t,n){var r,o,i=n.map((function(n,r){var o=re({},n),i=ue.get(o);if(i)return i.textureInfo.attachToProgram(t),i.textureInfo.setUnit(r),{key:o,value:i};var u=new te(e,t,n.name,r);s.getWorkspaceFilesOfTypes(Q).then((function(e){console.log(e)}));var a=B(oe([se()],Z.map(ce)),(function(e){"string"==typeof e?ne(e).then((function(e){return u.setSource(e)})):"extension-image"===e.type&&s.getExtensionFileUri(e.value).then((function(e){ne(e).then((function(e){return u.setSource(e)}))}))})),c=a.element,f=a.dispose;return{key:o,value:{component:w(c,n.name),textureInfo:u,dispose:function(){u.deleteTexture(),null==f||f()}}}}));return o=(r=i).map((function(e){return ie(e.key)})),ue.entriesStrKey().filter((function(e){return!o.includes(e[0])})).forEach((function(e){e[1].dispose(),ue.deleteStrKey(e[0])})),r.forEach((function(e){ue.has(e.key)||ue.set(e.key,e.value)})),i.map((function(e){return e.value}))},se=function(){return re({id:"custom",display:"Custom"},U((function(e){return function(e,t){var n=document.createElement("input");n.className="edit-input",n.disabled=t;return e.attach((function(e){return n.value=e})),n.value=e.getValue(),n.onblur=function(){return e.setValue(n.value)},n}(e,!1)}),"https://raw.githubusercontent.com/mateuszmigas/webgl-shader-viewer/main/docs/images/screenshot1.jpg"))},ce=function(e){return{id:e,display:e,value:new M({type:"extension-image",value:e}),element:document.createElement("div")}},fe=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],u=0,a=i.length;u<a;u++,o++)r[o]=i[u];return r};!function(e){e[e.FLOAT_VEC2=35664]="FLOAT_VEC2",e[e.FLOAT_VEC3=35665]="FLOAT_VEC3",e[e.FLOAT_VEC4=35666]="FLOAT_VEC4",e[e.FLOAT_MAT4=35676]="FLOAT_MAT4"}(ee||(ee={}));var le=function(){function e(e,t,n,r){this.context=e,this.name=n,this.type=r,this.attachToProgram(t)}return e.prototype.attachToProgram=function(e){var t=this.context.getUniformLocation(e,this.name);this.setter=he(this.type,this.context,t)},e.prototype.setValue=function(e){this.value=e},e.prototype.prepareForRender=function(){null!==this.value&&this.setter(this.value)},e.prototype.getUniformType=function(){return this.type},e.prototype.getUniformName=function(){return this.name},e.prototype.dispose=function(){},e}(),he=function(e,t,n){switch(e){case ee.FLOAT_VEC2:return function(e){return t.uniform2f.apply(t,fe([n],e))};case ee.FLOAT_VEC3:return function(e){return t.uniform3f.apply(t,fe([n],e))};case ee.FLOAT_VEC4:return function(e){return t.uniform4f.apply(t,fe([n],e))};case ee.FLOAT_MAT4:return function(e){return t.uniformMatrix4fv(n,!1,e)};default:I(e)}},pe=function(){return(pe=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},de=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],u=0,a=i.length;u<a;u++,o++)r[o]=i[u];return r},me=function(e){return e.name+";"+e.type},ve=new O(me),ye=function(e){switch(e){case ee.FLOAT_VEC2:return[1,1];case ee.FLOAT_VEC3:return[1,1,1];case ee.FLOAT_VEC4:return[1,1,1,1];case ee.FLOAT_MAT4:return[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];default:I(e)}},ge=function(e,t,n,r){var o,i,u=n.map((function(n){var o=pe({},n),i=ve.get(o);if(i)return i.uniformInfo.attachToProgram(t),{key:o,value:i};var u=new le(e,t,n.name,n.type),a=r.filter((function(e){return e.type===u.getUniformType()})),s=function(e){return u.setValue(e)},c=a.length?B(de([xe(u)],Te(a,u)),s):U((function(e){return Ee(u.getUniformType(),!0,e)}),ye(u.getUniformType()),s),f=c.element,l=c.dispose;return{key:o,value:{component:w(f,n.name),uniformInfo:u,dispose:function(){null==l||l()}}}}));return i=(o=u).map((function(e){return me(e.key)})),ve.entriesStrKey().filter((function(e){return!i.includes(e[0])})).forEach((function(e){ve.deleteStrKey(e[0])})),o.forEach((function(e){ve.has(e.key)||ve.set(e.key,e.value)})),u.map((function(e){return e.value}))},xe=function(e){return pe({id:"custom",display:"Custom"},U((function(t){return Ee(e.getUniformType(),!0,t)}),ye(e.getUniformType())))},Te=function(e,t){return e.map((function(e){var n=Ee(t.getUniformType(),!1,e.value);return{id:u(),element:n,display:e.name,value:e.value}}))},Ee=function(e,t,n){switch(e){case ee.FLOAT_VEC2:return D(2,n,t);case ee.FLOAT_VEC3:return D(3,n,t);case ee.FLOAT_VEC4:return D(4,n,t);case ee.FLOAT_MAT4:return N(4,n,t);default:return V()}},be=function(e,t,n){var r=e.createShader(t);if(e.shaderSource(r,n),e.compileShader(r),e.getShaderParameter(r,e.COMPILE_STATUS))return r;var o=e.getShaderInfoLog(r);return e.deleteShader(r),{error:o}},Ae=function(e,t,n){var r=e.createProgram();if(e.attachShader(r,t),e.attachShader(r,n),e.linkProgram(r),e.getProgramParameter(r,e.LINK_STATUS))return r;var o=e.getProgramInfoLog(r);throw e.deleteProgram(r),new Error("Creating program failed: "+o)},we=function(e){var t=document.createElement("canvas");t.className=e;var n,r,o=t.getContext("webgl"),i=0,u=0;if(n=t,r=function(e){t.width=e.width,t.height=e.height,i=e.width,u=e.height},new ResizeObserver((function(e){var t=e.find((function(e){return e.target===n}));if(t){var o=t.target.getBoundingClientRect();r({x:o.x,y:o.y,width:o.width,height:o.height})}})).observe(n),!o)throw new Error("Unable to create webgl context");return[t,{context:o,getSize:function(){return{width:i,height:u}}}]},Ce=function(e){return[].concat(e,e,e,e)},Fe=new Map([["cube",{display:"Cube",positions:[[-.5,-.5,.5,1],[.5,-.5,.5,1],[.5,.5,.5,1],[-.5,.5,.5,1],[-.5,-.5,-.5,1],[-.5,.5,-.5,1],[.5,.5,-.5,1],[.5,-.5,-.5,1],[-.5,.5,-.5,1],[-.5,.5,.5,1],[.5,.5,.5,1],[.5,.5,-.5,1],[-.5,-.5,-.5,1],[.5,-.5,-.5,1],[.5,-.5,.5,1],[-.5,-.5,.5,1],[.5,-.5,-.5,1],[.5,.5,-.5,1],[.5,.5,.5,1],[.5,-.5,.5,1],[-.5,-.5,-.5,1],[-.5,-.5,.5,1],[-.5,.5,.5,1],[-.5,.5,-.5,1]],colors:function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],u=0,a=i.length;u<a;u++,o++)r[o]=i[u];return r}(Ce([1,1,1,1]),Ce([1,0,0,1]),Ce([0,1,0,1]),Ce([0,0,1,1]),Ce([1,1,0,1]),Ce([1,0,1,1])),textureCoordinates:[[0,0],[1,0],[1,1],[0,1],[0,0],[1,0],[1,1],[0,1],[0,0],[1,0],[1,1],[0,1],[0,0],[1,0],[1,1],[0,1],[0,0],[1,0],[1,1],[0,1],[0,0],[1,0],[1,1],[0,1]],indices:[0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23]}],["plane",{display:"Plane",positions:[[-.5,-.5,0,1],[.5,-.5,0,1],[.5,.5,0,1],[-.5,.5,0,1]],colors:Ce([1,1,1,1]),textureCoordinates:[[0,0],[1,0],[1,1],[0,1]],indices:[0,1,2,0,2,3]}]]),Ie=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function u(e){try{s(r.next(e))}catch(e){i(e)}}function a(e){try{s(r.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(u,a)}s((r=r.apply(e,t||[])).next())}))},Me=function(e,t){var n,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!(o=u.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=t.call(e,u)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},Oe=function(){return new Map([["localToProjected",{name:"Binding - Camera LocalToProjected",type:ee.FLOAT_MAT4,value:new M([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1])}]])};Ie(void 0,void 0,void 0,(function(){var e,t,n,o,u,a,c,f,h,y,g,x,E,I,O,P,S,L,R,V,U,D,N,j,X,W,G,z,H,K,J,Q,Z,$,ee,te,ne,re;return Me(this,(function(oe){var ie,ue,se;return e=p(),t=document.getElementById("viewer"),n=C("viewer-options"),o=C("viewer-shader-options"),u=C("viewer-content shader-errors"),a=we("viewer-content"),c=a[0],f=a[1],h=new Map([["positions",{name:"Binding - Mesh positions",type:r.FLOAT_VEC4,value:new M([])}],["textureCoordinates",{name:"Binding - Mesh texture coords",type:r.FLOAT_VEC2,value:new M([])}],["colors",{name:"Binding - Mesh colors",type:r.FLOAT_VEC4,value:new M([])}]]),y=Oe(),g=new m(f.context),x=new M([]),E={drawMode:"arrays"},I={longitude:1,latitude:1,radius:2},new l(c,(function(){return I}),(function(e){I=e;var t=45*Math.PI/180,n=f.getSize(),r=n.width/n.height,o=_.create();_.perspective(o,t,r,.1,100);var i=_.create(),u=function(e){var t=e.radius*Math.sin(e.latitude),n=e.radius*Math.cos(e.latitude),r=n*Math.cos(e.longitude);return{x:n*Math.sin(e.longitude),y:t,z:r}}(I);_.lookAt(i,[u.x,u.y,u.z],[0,0,0],[0,1,0]);var a=_.create();_.multiply(a,o,i),y.get("localToProjected").value.setValue(a)})),t.appendChild(c),t.appendChild(u),t.appendChild(n),O=function(e,t,n){var r=[b(t,"").element];n&&r.push(A("Sync","viewer-refresh-button",n).element),o.appendChild(C("viewer-shaders-title",r)),e.forEach((function(e){return o.appendChild(e)}))},P=function(e){c.style.visibility="canvas"===e?"visible":"collapse",u.style.visibility="errors"===e?"visible":"collapse"},S=function(){s.getWorkspaceFilesOfTypes(q).then((function(t){var n=t.map((function(e){return{id:e.filePath,display:e.fileName}}));G.setItems(n),e.vertexFilePath&&n.some((function(t){return t.id===e.vertexFilePath}))&&G.setSelectedItemById(e.vertexFilePath),K.setItems(n),e.fragmentFilePath&&n.some((function(t){return t.id===e.fragmentFilePath}))&&K.setSelectedItemById(e.fragmentFilePath)}))},D=null,N=function(e){var t=Fe.get(e),n=t.positions,r=t.colors,o=t.textureCoordinates,i=t.indices;h.get("positions").value.setValue(n),h.get("colors").value.setValue(r),h.get("textureCoordinates").value.setValue(o),x.setValue(i)},j=function(){o.innerHTML="";var e=f.context;if(U&&V){var t=function(e,t,n){var r=be(e,e.VERTEX_SHADER,t),o=be(e,e.FRAGMENT_SHADER,n),u=void 0;F(r,"error")&&(u=i(r.error,1));var a=void 0;return F(o,"error")&&(a=i(o.error,1)),u||a?[u,a]:Ae(e,r,o)}(e,V,U);if(Array.isArray(t))P("errors"),u.innerText=function(e){var t=e[0],n=e[1],r=[];return t&&r.push("VERTEX SHADER:",t),n&&r.push("FRAGMENT SHADER:",n),r.join("\r\n")}(t);else{P("canvas");var n=t,r=function(e,t,n){var r=function(e,t){for(var n=e.getProgramParameter(t,e.ACTIVE_UNIFORMS),r=[],o=[],i=0;i<n;++i){var u=e.getActiveUniform(t,i);35678===u.type?o.push({name:u.name,unit:o.length}):r.push({name:u.name,type:u.type})}return{dataUniforms:r,textureUniforms:o}}(e,t),o=function(e,t){for(var n=e.getProgramParameter(t,e.ACTIVE_ATTRIBUTES),r=[],o=0;o<n;++o){var i=e.getActiveAttrib(t,o);r.push({name:i.name,type:i.type})}return r}(e,t);return{uniformComponents:ge(e,t,r.dataUniforms,Array.from(n.uniform.values())),textureComponents:ae(e,t,r.textureUniforms),attributeBufferComponents:Y(e,t,o,Array.from(n.mesh.values()))}}(e,n,{uniform:y,mesh:h}),a=r.uniformComponents,s=r.textureComponents,c=r.attributeBufferComponents;a.length>0&&O(a.map((function(e){return e.component})),"UNIFORMS"),s.length>0&&O(s.map((function(e){return e.component})),"TEXTURES",(function(){})),c.length>0&&O(c.map((function(e){return e.component})),"ATTRIBUTE BUFFERS");var l=a.map((function(e){return e.uniformInfo})),p=s.map((function(e){return e.textureInfo})),d=c.map((function(e){return e.attributeBufferInfo}));null!==D&&cancelAnimationFrame(D);var m=function(){!function(e,t,n,r){e.useProgram(t),e.viewport(0,0,e.canvas.width,e.canvas.height),e.clearColor(0,0,0,1),e.clearDepth(1),e.enable(e.DEPTH_TEST),e.depthFunc(e.LEQUAL),e.clear(e.COLOR_BUFFER_BIT|e.DEPTH_BUFFER_BIT),n.uniformInfos.forEach((function(e){return e.prepareForRender()})),n.textureInfos.forEach((function(e){return e.prepareForRender()})),n.attributeBufferInfos.forEach((function(e){return e.setAttributeBuffer()}));var o=e.TRIANGLES;if("arrays"===r.drawMode){var i=Math.min.apply(Math,n.attributeBufferInfos.map((function(e){return e.getCount()})));e.drawArrays(o,0,i)}else n.indexBufferInfo.setIndexBuffer(),e.drawElements(o,n.indexBufferInfo.getCount(),e.UNSIGNED_SHORT,0)}(e,n,{uniformInfos:l,textureInfos:p,attributeBufferInfos:d,indexBufferInfo:g},E),D=requestAnimationFrame(m)};m()}}else P("none")},n.appendChild(C("viewer-shaders-title",[b(v,"").element,A("Sync","viewer-refresh-button",S).element])),X=T((function(e){return Ie(void 0,void 0,void 0,(function(){var t;return Me(this,(function(n){switch(n.label){case 0:return null==L||L(),e&&(L=s.subscribeToDocumentSave(e.id,(function(e){V=e,j()}))),e?[4,s.getDocumentText(e.id)]:[3,2];case 1:return t=n.sent(),[3,3];case 2:t="",n.label=3;case 3:return V=t,d({vertexFilePath:e?e.id:null}),j(),[2]}}))}))})),W=X[0],(G=X[1]).setSelectedItemById(e.vertexFilePath),n.appendChild(w(W,"Vertex Shader")),z=T((function(e){return Ie(void 0,void 0,void 0,(function(){var t;return Me(this,(function(n){switch(n.label){case 0:return null==R||R(),e&&(R=s.subscribeToDocumentSave(e.id,(function(e){U=e,j()}))),e?[4,s.getDocumentText(e.id)]:[3,2];case 1:return t=n.sent(),[3,3];case 2:t="",n.label=3;case 3:return U=t,d({fragmentFilePath:e?e.id:null}),j(),[2]}}))}))})),H=z[0],(K=z[1]).setSelectedItemById(e.fragmentFilePath),n.appendChild(w(H,"Fragment Shader")),n.appendChild(C("viewer-shaders-title",[b("DRAW OPTIONS","").element])),J=T((function(e){e&&(N(e.id),d({meshId:e.id}))})),Q=J[0],(Z=J[1]).setItems(Array.from(Fe.entries()).map((function(e){return{id:e[0],display:e[1].display}}))),Z.setSelectedItemById(e.meshId),n.appendChild(w(Q,"Mesh")),$=(ie=x,ue=function(e){return g.setValue(e)},se=new M([0,1,2]),B([{id:"custom",display:"Custom",value:se,element:k(1,se,!0)},{id:"binding",display:"Binding - Mesh indices",value:ie,element:k(1,ie,!1)}],ue)).element,ee=w($,"Indices"),te=T((function(e){var t,n;e&&(E.drawMode=e.id,t=ee,n="elements"===E.drawMode,t.style.display=n?"inherit":"none",d({drawMode:e.id}))})),ne=te[0],(re=te[1]).setItems([{id:"arrays",display:"Arrays"},{id:"elements",display:"Elements"}]),re.setSelectedItemById(e.drawMode),n.appendChild(w(ne,"Draw mode")),n.appendChild(ee),n.appendChild(o),S(),s.showWebViewDevTools(),[2]}))}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,