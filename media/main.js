!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);var r,o=function(e,t){var n=e.indexOf(t);n>-1&&e.splice(n,1)},i=function(e,t){return e.substring(0,e.length-t)},u=function(){function e(e){this.value=e,this.observers=[]}return e.prototype.attach=function(e){this.observers.push(e)},e.prototype.detach=function(e){o(this.observers,e)},e.prototype.setValue=function(e){this.value=e,this.notify()},e.prototype.getValue=function(){return this.value},e.prototype.notify=function(){if(null!==this.value){var e=this.value;this.observers.forEach((function(t){return t(e)}))}},e}(),a="SHADERS",c=function(){return(c=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},s=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],u=0,a=i.length;u<a;u++,o++)r[o]=i[u];return r},l={emptyItem:!0},f=function(e,t,n){var r=c(c({},l),n),o=document.createElement("select");o.className="dropdown-base "+t;var i=null,u=[],a=function(t){e(i=t)};o.onchange=function(){var e=u.find((function(e){return e.item.id===o.value}));e.item.id?a(e.item):a(null)};var f=function(e){a(null),u.forEach((function(t){t.item.id===e?(t.element.selected=!0,a(t.item)):t.element.selected=!1}))};return[o,{setItems:function(e){o.innerHTML="",u.length=0,e.find((function(e){return e.id===(null==i?void 0:i.id)}))||a(null),(r.emptyItem?s([{id:"",display:""}],e):s(e)).forEach((function(e){var t=document.createElement("option");t.value=e.id,t.textContent=e.display,t.selected=e.id===(null==i?void 0:i.id),o.appendChild(t),u.push({element:t,item:e})}))},getItems:function(){return u.map((function(e){return e.item}))},setSelectedItemById:f,setSelectedItemByIndex:function(e){return f(u[e].item.id)},getSelectedItem:function(){return i},clearSelection:function(){u.forEach((function(e){return e.element.selected=!1})),a(null)}}]},p=function(e){var t=f((function(t){t&&(e.forEach((function(e){return e.element.classList.add("hidden")})),e.find((function(e){return e.id===t.id})).element.classList.remove("hidden"))}),"",{emptyItem:!1}),n=t[0],r=t[1];return r.setItems(e.map((function(e){return{id:e.id,display:e.display}}))),r.setSelectedItemByIndex(0),n},d=function(e){return{id:"custom",display:"Custom",element:e}},h=function(e,t,n){var r=document.createElement("button");return r.onclick=n,r.className=t,r.textContent=e,{element:r}},m=function(e,t,n){var r=document.createElement("div");r.className=(null!=n?n:"")+" options-wrapper";var o=document.createElement("label");return o.className="options-label",o.textContent=t,e.className=e.className+" options-content",r.appendChild(o),r.appendChild(e),r},v=function(e,t){var n=document.createElement("div");return n.className=e,null==t||t.forEach((function(e){return n.appendChild(e)})),n},y=function(e,t,n,r,o){var i=document.createElement("div");i.className="edit-input-grid";for(var u=[],a=function(){return u.map((function(e){return e.value}))},c=0;c<n;c++){var s=document.createElement("div");s.className="edit-input-row";for(var l=function(n){var i=c*r+n,l=e[i],f=document.createElement("input"),p={element:f,value:l};Object.assign(f,o),f.className="edit-input",f.type="number",f.value=null==l?void 0:l.toString(),f.oninput=function(){u[i].value=Number(f.value),null==t||t(a())},u.push(p),s.appendChild(f)},f=0;f<r;f++)l(f);i.appendChild(s)}return[i,{setValues:function(e){return u.forEach((function(t,n){t.value=e[n],t.element.value=t.value.toString()}))},getValues:a,setReadonly:function(e){return u.forEach((function(t){return t.element.readOnly=e}))}}]},g=function(e){return y([0,0,0],e,1,3)},b=function(){return(b=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},x={min:"0",max:"1",step:"0.1"},E=function(e,t){return e.hasOwnProperty(t)},A=function(e){throw new Error("Unhandled union member: "+JSON.stringify(e))},T=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],u=0,a=i.length;u<a;u++,o++)r[o]=i[u];return r};!function(e){e[e.FLOAT_VEC2=35664]="FLOAT_VEC2",e[e.FLOAT_VEC3=35665]="FLOAT_VEC3",e[e.FLOAT_VEC4=35666]="FLOAT_VEC4",e[e.SAMPLER_2D=35678]="SAMPLER_2D"}(r||(r={}));var w,C=function(){function e(e,t,n,r){this.context=e,this.name=n,this.type=r,this.attachToProgram(t)}return e.prototype.attachToProgram=function(e){var t=this.context.getUniformLocation(e,this.name);this.setter=S(this.type,this.context,t)},e.prototype.setValue=function(e){this.value=e},e.prototype.setUniform=function(){null!==this.value&&this.setter(this.value)},e.prototype.getUniformType=function(){return this.type},e.prototype.dispose=function(){},e}(),S=function(e,t,n){switch(e){case r.FLOAT_VEC2:return function(e){return t.uniform2f.apply(t,T([n],e))};case r.FLOAT_VEC3:return function(e){return t.uniform3f.apply(t,T([n],e))};case r.FLOAT_VEC4:return function(e){return t.uniform4f.apply(t,T([n],e))};case r.SAMPLER_2D:return function(e){};default:A(e)}},O=function(){function e(e){this.keySelector=e,this.map=new Map}return e.prototype.get=function(e){return this.map.get(this.keySelector(e))},e.prototype.set=function(e,t){this.map.set(this.keySelector(e),t)},e.prototype.has=function(e){return this.map.has(this.keySelector(e))},e.prototype.entriesStrKey=function(){return Array.from(this.map.entries())},e.prototype.deleteStrKey=function(e){this.map.delete(e)},e.prototype.delete=function(e){this.map.delete(this.keySelector(e))},e.prototype.clear=function(){this.map.clear()},e}(),V=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){var t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}))},L=function(){return(L=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},_=new O((function(e){return e.name+";"+e.type})),F=function(e){switch(e.getUniformType()){case r.FLOAT_VEC2:return I((function(t){return e.setValue(t)}));case r.FLOAT_VEC3:return B((function(t){return e.setValue(t)}));case r.FLOAT_VEC4:var t=[1,0,0,1];return e.setValue(t),R(t,(function(t){return e.setValue(t)}));case r.SAMPLER_2D:return N((function(t){V();e.setValue({slot:t.slot,textureData:!0})}));default:return P()}},P=function(){var e=document.createElement("div");return e.className="unsupported-error",e.innerText="Not supported uniform",e},I=function(e){var t=y([0,0],e,1,2),n=t[0];return t[1].setValues([0,0]),n},N=function(e){var t=g(),n=t[0];return t[1].setValues([0,0,0]),n},B=function(e){var t=g(e),n=t[0];t[1].setValues([0,0,0]);var r=function(e){var t=[.5,.5,.5],n=document.createElement("div");n.className="edit-input-color";var r=function(e){n.style.background="rgb("+255*e[0]+","+255*e[1]+","+255*e[2]+",1)"};r(t);var o=v("row-with-gap"),i=y(t,(function(t){r(t),null==e||e(t)}),1,3,x),u=i[0],a=i[1];return o.appendChild(u),o.appendChild(n),[o,b(b({},a),{setValues:function(e){a.setValues(e),r(e)}})]}(e),o=r[0];r[1].setValues([1,0,0]);var i=p([{id:"custom",display:"Custom",element:n},{id:"color",display:"Color",element:o}]);return v("column-with-gap",[i,n,o])},R=function(e,t){var n=y([0,0,0,0],t,1,4),r=n[0];n[1].setValues(e);var o=function(e){var t=[.5,.5,.5,1],n=document.createElement("div");n.className="edit-input-color";var r=function(e){n.style.background="rgb("+255*e[0]+","+255*e[1]+","+255*e[2]+","+e[3]+")"};r(t);var o=v("row-with-gap"),i=y(t,(function(t){r(t),null==e||e(t)}),1,4,x),u=i[0],a=i[1];return o.appendChild(u),o.appendChild(n),[o,b(b({},a),{setValues:function(e){a.setValues(e),r(e)}})]}(t),i=o[0];o[1].setValues(e);var u=p([{id:"custom",display:"Custom",element:r},{id:"color",display:"Color",element:i}]);return v("column-with-gap",[u,r,i])},D=function(e,t,n){var r=e.createShader(t);if(e.shaderSource(r,n),e.compileShader(r),e.getShaderParameter(r,e.COMPILE_STATUS))return r;var o=e.getShaderInfoLog(r);return e.deleteShader(r),{error:o}},M=function(e,t,n){var r=e.createProgram();if(e.attachShader(r,t),e.attachShader(r,n),e.linkProgram(r),e.getProgramParameter(r,e.LINK_STATUS))return r;throw e.deleteProgram(r),new Error("Creating program failed: "+e.getProgramInfoLog(r))};!function(e){e[e.FLOAT_VEC3=35665]="FLOAT_VEC3",e[e.FLOAT_VEC4=35666]="FLOAT_VEC4"}(w||(w={}));var k=function(){function e(e,t,n,r){this.context=e,this.name=n,this.type=r,this.attachToProgram(t),this.buffer=e.createBuffer()}return e.prototype.attachToProgram=function(e){this.location=this.context.getAttribLocation(e,this.name)},e.prototype.setValue=function(e){this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffer);var t=[].concat.apply([],e);this.context.bufferData(this.context.ARRAY_BUFFER,new Float32Array(t),this.context.STATIC_DRAW)},e.prototype.setAttributeBuffer=function(){if(null!==this.buffer){this.context.enableVertexAttribArray(this.location),this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffer);var e=j(this.type),t=this.context.FLOAT;this.context.vertexAttribPointer(this.location,e,t,!1,0,0)}},e.prototype.getAttributeBufferType=function(){return this.type},e.prototype.deleteBuffer=function(){this.context.deleteBuffer(this.buffer),this.buffer=null},e}(),j=function(e){switch(e){case w.FLOAT_VEC3:return 3;case w.FLOAT_VEC4:return 4;default:A(e)}},U=function(){return(U=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},H=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],u=0,a=i.length;u<a;u++,o++)r[o]=i[u];return r},K=function(e){return e.name+";"+e.type},G=new O(K),J=function(e,t,n,r){var o,i,u=n.map((function(n){var o=U({},n),i=G.get(o);if(i)return i.attributeBufferInfo.attachToProgram(t),{key:o,value:i};var u=new k(e,t,n.name,n.type),a=Y(u,!0),c=z(u,r.filter((function(e){return e.type===u.getAttributeBufferType()})),(function(){return Y(u,!1)})),s=c.options,l=c.unsubscribe,f=s.length?v("column-with-gap",H([p(H([d(a)],s)),a],s.map((function(e){return e.element})))):a;return{key:o,value:{component:m(f,n.name),attributeBufferInfo:u,dispose:function(){u.deleteBuffer(),l()}}}}));return i=(o=u).map((function(e){return K(e.key)})),G.entriesStrKey().filter((function(e){return!i.includes(e[0])})).forEach((function(e){e[1].dispose(),G.deleteStrKey(e[0])})),o.forEach((function(e){G.has(e.key)||G.set(e.key,e.value)})),u.map((function(e){return e.value}))},Y=function(e,t){switch(e.getAttributeBufferType()){case w.FLOAT_VEC3:return X((function(t){e.setValue(t)}),t);case w.FLOAT_VEC4:var n=[[0,0,0,1],[0,.5,0,1],[.7,0,0,1]];return e.setValue(n),W(n,(function(t){e.setValue(t)}),t);default:return q()}},q=function(){var e=document.createElement("div");return e.className="unsupported-error",e.innerText="Not supported attribute buffer",e},z=function(e,t,n){var r=t.map((function(t){var r=n(),o=function(t){return e.setValue(t)};t.value.attach(o),o(t.value.getValue());return{id:V(),unsubscribe:function(){return t.value.detach(o)},element:r,display:t.name}}));return{options:r,unsubscribe:function(){return r.forEach((function(e){return e.unsubscribe()}))}}},X=function(e,t){var n=document.createElement("input");return n.className="edit-input",n.disabled=!t,n.oninput=function(){try{var t=JSON.parse(n.value);if(console.log("result",t),Array.isArray(t))t.every((function(e){return!!Array.isArray(e)&&3===e.length}))||console.log("not every element id the arra is same size");else console.log("this is not an array type");e(t)}catch(e){console.log("this is not a json")}},n},W=function(e,t,n){var r=document.createElement("input");return r.className="edit-input",r.disabled=!n,r.value=JSON.stringify(e),r.oninput=function(){try{var e=JSON.parse(r.value);if(Array.isArray(e))e.every((function(e){return!!Array.isArray(e)&&4===e.length}));else;t(e)}catch(e){console.log("this is not a json")}},r},Q=function(e){var t=document.createElement("canvas");t.className=e;var n,r,o=t.getContext("webgl");if(n=t,r=function(e){t.width=e.width,t.height=e.height},new ResizeObserver((function(e){var t=e.find((function(e){return e.target===n}));if(t){var o=t.target.getBoundingClientRect();r({x:o.x,y:o.y,width:o.width,height:o.height})}})).observe(n),!o)throw new Error("Unable to create webgl context");return[t,{context:o}]},Z=acquireVsCodeApi(),$=function(){function e(){var e=this;this.eventListeners=[],window.addEventListener("message",(function(t){e.eventListeners.forEach((function(e){return e(t.data)}))}))}return e.prototype.getShaderDocuments=function(){var e=this,t=V();return Z.postMessage({type:"getShaderDocuments",id:t}),new Promise((function(n){var r=function(o){"getShaderDocuments"===o.type&&o.id===t&&(n(o.payload.files),e.removeListener(r))};e.eventListeners.push(r)}))},e.prototype.getDocumentText=function(e){var t=this,n=V();return Z.postMessage({type:"getDocumentText",id:n,payload:{fileName:e}}),new Promise((function(e){var r=function(o){"getDocumentText"===o.type&&o.id===n&&(e(o.payload.text),t.removeListener(r))};t.eventListeners.push(r)}))},e.prototype.subscribeToDocumentSave=function(e,t){var n=this;Z.postMessage({type:"subscribeToDocumentTextChange",payload:{fileName:e}});var r=function(n){"onDocumentTextChange"===n.type&&n.payload.filePath===e&&t(n.payload.text)};return this.eventListeners.push(r),function(){n.removeListener(r),Z.postMessage({type:"unsubscribeToDocumentTextChange",payload:{fileName:e}})}},e.prototype.removeListener=function(e){o(this.eventListeners,e)},e}(),ee=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function u(e){try{c(r.next(e))}catch(e){i(e)}}function a(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(u,a)}c((r=r.apply(e,t||[])).next())}))},te=function(e,t){var n,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!(o=u.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=t.call(e,u)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};ee(void 0,void 0,void 0,(function(){var e,t,n,r,o,c,s,l,p,d,y,g,b,x,A,T,S,O,V,P,I,N,B,R,k,j,U;return te(this,(function(H){var K,G,Y;return w.FLOAT_VEC4,e=new Map([["cube",{display:"Cube",attributeBufferBindings:[{name:"Binding - Cube normals",type:w.FLOAT_VEC4,value:new u([1,2,3,4])},{name:"Binding - Cube tangents",type:w.FLOAT_VEC4,value:new u([1,2,3,4])}]}]]),t=new $,n=document.getElementById("viewer"),r=v("viewer-options"),o=v("viewer-shader-options"),c=v("viewer-content shader-errors"),s=Q("viewer-content"),l=s[0],p=s[1],n.appendChild(l),n.appendChild(c),n.appendChild(r),d=function(e){l.style.visibility="canvas"===e?"visible":"collapse",c.style.visibility="errors"===e?"visible":"collapse"},y=function(){t.getShaderDocuments().then((function(e){var t=e.map((function(e){return{id:e.filePath,display:e.fileName}}));I.setItems(t),R.setItems(t)}))},T=null,S=[],O=function(){o.innerHTML="";var t,n,r,u,a=p.context;if(A&&x){var s=function(e,t,n){var r=D(e,e.VERTEX_SHADER,t),o=D(e,e.FRAGMENT_SHADER,n),u=void 0;E(r,"error")&&(u=i(r.error,1));var a=void 0;return E(o,"error")&&(a=i(o.error,1)),u||a?[u,a]:M(e,r,o)}(a,x,A);if(Array.isArray(s))d("errors"),c.innerText=(n=(t=s)[0],r=t[1],u=[],n&&u.push("VERTEX SHADER:",n),r&&u.push("FRAGMENT SHADER:",r),u.join("\r\n"));else{d("canvas");var l=U.getSelectedItem(),f=s,h=function(e,t){for(var n=e.getProgramParameter(t,e.ACTIVE_UNIFORMS),r=[],o=0;o<n;++o){var i=e.getActiveUniform(t,o);r.push({name:i.name,type:i.type})}return r}(a,f),v=function(e,t){for(var n=e.getProgramParameter(t,e.ACTIVE_ATTRIBUTES),r=[],o=0;o<n;++o){var i=e.getActiveAttrib(t,o);r.push({name:i.name,type:i.type})}return r}(a,f),y=function(e,t,n){var r=n.map((function(n){var r=L({},n),o=_.get(r);if(o)return o.uniformInfo.attachToProgram(t),{key:r,value:o};var i=new C(e,t,n.name,n.type);return{key:r,value:{component:m(F(i),n.name),uniformInfo:i}}}));return _.clear(),r.forEach((function(e){return _.set(e.key,e.value)})),r.map((function(e){return e.value}))}(a,f,h);y.forEach((function(e){return o.appendChild(e.component)}));var g=J(a,f,v,l?e.get(l.id).attributeBufferBindings:[]);g.forEach((function(e){return o.appendChild(e.component)}));var b=y.map((function(e){return e.uniformInfo}));S=g.map((function(e){return e.attributeBufferInfo})),null!==T&&cancelAnimationFrame(T);var w=function(){!function(e,t,n){e.useProgram(t),e.viewport(0,0,e.canvas.width,e.canvas.height),e.clearColor(0,0,0,0),e.clear(e.COLOR_BUFFER_BIT),n.uniforms.forEach((function(e){return e.setUniform()})),n.attributeBuffers.forEach((function(e){return e.setAttributeBuffer()}));var r=e.TRIANGLES;e.drawArrays(r,0,3)}(p.context,s,{uniforms:b,attributeBuffers:S}),T=requestAnimationFrame(w)};w()}}else d("none")},r.appendChild(v("viewer-shaders-title",[(K=a,G="",Y=document.createElement("h3"),Y.textContent=K,Y.className=G+" section-title",{element:Y}).element,h("Sync","viewer-refresh-button",y).element])),V=f((function(e){return ee(void 0,void 0,void 0,(function(){var n;return te(this,(function(r){switch(r.label){case 0:return null==g||g(),e&&(g=t.subscribeToDocumentSave(e.id,(function(e){x=e,O()}))),e?[4,t.getDocumentText(e.id)]:[3,2];case 1:return n=r.sent(),[3,3];case 2:n="",r.label=3;case 3:return x=n,O(),[2]}}))}))})),P=V[0],I=V[1],r.appendChild(m(P,"Vertex Shader")),N=f((function(e){return ee(void 0,void 0,void 0,(function(){var n;return te(this,(function(r){switch(r.label){case 0:return null==b||b(),e&&(b=t.subscribeToDocumentSave(e.id,(function(e){A=e,O()}))),e?[4,t.getDocumentText(e.id)]:[3,2];case 1:return n=r.sent(),[3,3];case 2:n="",r.label=3;case 3:return A=n,O(),[2]}}))}))})),B=N[0],R=N[1],r.appendChild(m(B,"Fragment Shader")),k=f((function(){return O()})),j=k[0],(U=k[1]).setItems(Array.from(e.entries()).map((function(e){return{id:e[0],display:e[1].display}}))),r.appendChild(m(j,"Mesh")),r.appendChild(o),y(),[2]}))}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,