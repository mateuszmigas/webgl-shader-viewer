!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);var r,o="SHADERS",i=function(){return(i=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},u=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],u=0,a=i.length;u<a;u++,o++)r[o]=i[u];return r},a={emptyItem:!0},c=function(e,t,n){var r=i(i({},a),n),o=document.createElement("select");o.className="dropdown-base "+t;var c=null,s=[],l=function(t){e(c=t)};o.onchange=function(){var e=s.find((function(e){return e.item.id===o.value}));e.item.id?l(e.item):l(null)};var f=function(e){l(null),s.forEach((function(t){t.item.id===e?(t.element.selected=!0,l(t.item)):t.element.selected=!1}))};return[o,{setItems:function(e){o.innerHTML="",s.length=0,e.find((function(e){return e.id===(null==c?void 0:c.id)}))||l(null),(r.emptyItem?u([{id:"",display:""}],e):u(e)).forEach((function(e){var t=document.createElement("option");t.value=e.id,t.textContent=e.display,t.selected=e.id===(null==c?void 0:c.id),o.appendChild(t),s.push({element:t,item:e})}))},getItems:function(){return s.map((function(e){return e.item}))},setSelectedItemById:f,setSelectedItemByIndex:function(e){return f(s[e].item.id)},getSelectedItem:function(){return c},clearSelection:function(){s.forEach((function(e){return e.element.selected=!1})),l(null)}}]},s=function(e,t){var n=c((function(n){n?(e.forEach((function(e){return e.element.classList.add("hidden")})),e.find((function(e){return e.id===n.id})).element.classList.remove("hidden"),null==t||t(n.id)):null==t||t(null)}),"",{emptyItem:!1}),r=n[0],o=n[1];return o.setItems(e.map((function(e){return{id:e.id,display:e.display}}))),o.setSelectedItemByIndex(0),r},l=function(e){return{id:"custom",display:"Custom",element:e}},f=function(e,t,n){var r=document.createElement("button");return r.onclick=n,r.className=t,r.textContent=e,{element:r}},p=function(e,t,n){var r=document.createElement("div");r.className=(null!=n?n:"")+" options-wrapper";var o=document.createElement("label");return o.className="options-label",o.textContent=t,e.className=e.className+" options-content",r.appendChild(o),r.appendChild(e),r},d=function(e,t){var n=document.createElement("div");return n.className=e,null==t||t.forEach((function(e){return n.appendChild(e)})),n},h=function(e,t,n,r,o){var i=document.createElement("div");i.className="edit-input-grid";for(var u=[],a=function(){return u.map((function(e){return e.value}))},c=0;c<n;c++){var s=document.createElement("div");s.className="edit-input-row";for(var l=function(n){var i=c*r+n,l=e[i],f=document.createElement("input"),p={element:f,value:l};Object.assign(f,o),f.className="edit-input",f.type="number",f.value=null==l?void 0:l.toString(),f.oninput=function(){u[i].value=Number(f.value),null==t||t(a())},u.push(p),s.appendChild(f)},f=0;f<r;f++)l(f);i.appendChild(s)}return[i,{setValues:function(e){return u.forEach((function(t,n){t.value=e[n],t.element.value=t.value.toString()}))},getValues:a,setReadonly:function(e){return u.forEach((function(t){return t.element.readOnly=e}))}}]},m=function(e){return h([0,0,0],e,1,3)},v=function(){return(v=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},y={min:"0",max:"1",step:"0.1"},g=function(e,t){return e.hasOwnProperty(t)},b=function(e){throw new Error("Unhandled union member: "+JSON.stringify(e))},E=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],u=0,a=i.length;u<a;u++,o++)r[o]=i[u];return r};!function(e){e[e.FLOAT_VEC2=35664]="FLOAT_VEC2",e[e.FLOAT_VEC3=35665]="FLOAT_VEC3",e[e.FLOAT_VEC4=35666]="FLOAT_VEC4",e[e.SAMPLER_2D=35678]="SAMPLER_2D"}(r||(r={}));var x,A=function(){function e(e,t,n,r){this.context=e,this.name=n,this.type=r,this.attachToProgram(t)}return e.prototype.attachToProgram=function(e){var t=this.context.getUniformLocation(e,this.name);this.setter=w(this.type,this.context,t)},e.prototype.setValue=function(e){this.value=e},e.prototype.setUniform=function(){null!==this.value&&this.setter(this.value)},e.prototype.getUniformType=function(){return this.type},e.prototype.dispose=function(){},e}(),w=function(e,t,n){switch(e){case r.FLOAT_VEC2:return function(e){return t.uniform2f.apply(t,E([n],e))};case r.FLOAT_VEC3:return function(e){return t.uniform3f.apply(t,E([n],e))};case r.FLOAT_VEC4:return function(e){return t.uniform4f.apply(t,E([n],e))};case r.SAMPLER_2D:return function(e){};default:b(e)}},T=function(){function e(e){this.keySelector=e,this.map=new Map}return e.prototype.get=function(e){return this.map.get(this.keySelector(e))},e.prototype.set=function(e,t){this.map.set(this.keySelector(e),t)},e.prototype.has=function(e){return this.map.has(this.keySelector(e))},e.prototype.entriesStrKey=function(){return Array.from(this.map.entries())},e.prototype.deleteStrKey=function(e){this.map.delete(e)},e.prototype.delete=function(e){this.map.delete(this.keySelector(e))},e.prototype.clear=function(){this.map.clear()},e}(),S=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){var t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}))},C=function(){return(C=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},V=new T((function(e){return e.name+";"+e.type})),O=function(e){switch(e.getUniformType()){case r.FLOAT_VEC2:return I((function(t){return e.setValue(t)}));case r.FLOAT_VEC3:return N((function(t){return e.setValue(t)}));case r.FLOAT_VEC4:var t=[1,0,0,1];return e.setValue(t),P(t,(function(t){return e.setValue(t)}));case r.SAMPLER_2D:return _((function(t){S();e.setValue({slot:t.slot,textureData:!0})}));default:return L()}},L=function(){var e=document.createElement("div");return e.className="unsupported-error",e.innerText="Not supported uniform",e},I=function(e){var t=h([0,0],e,1,2),n=t[0];return t[1].setValues([0,0]),n},_=function(e){var t=m(),n=t[0];return t[1].setValues([0,0,0]),n},N=function(e){var t=m(e),n=t[0];t[1].setValues([0,0,0]);var r=function(e){var t=[.5,.5,.5],n=document.createElement("div");n.className="edit-input-color";var r=function(e){n.style.background="rgb("+255*e[0]+","+255*e[1]+","+255*e[2]+",1)"};r(t);var o=d("row-with-gap"),i=h(t,(function(t){r(t),null==e||e(t)}),1,3,y),u=i[0],a=i[1];return o.appendChild(u),o.appendChild(n),[o,v(v({},a),{setValues:function(e){a.setValues(e),r(e)}})]}(e),o=r[0];r[1].setValues([1,0,0]);var i=s([{id:"custom",display:"Custom",element:n},{id:"color",display:"Color",element:o}]);return d("column-with-gap",[i,n,o])},P=function(e,t){var n=h([0,0,0,0],t,1,4),r=n[0];n[1].setValues(e);var o=function(e){var t=[.5,.5,.5,1],n=document.createElement("div");n.className="edit-input-color";var r=function(e){n.style.background="rgb("+255*e[0]+","+255*e[1]+","+255*e[2]+","+e[3]+")"};r(t);var o=d("row-with-gap"),i=h(t,(function(t){r(t),null==e||e(t)}),1,4,y),u=i[0],a=i[1];return o.appendChild(u),o.appendChild(n),[o,v(v({},a),{setValues:function(e){a.setValues(e),r(e)}})]}(t),i=o[0];o[1].setValues(e);var u=s([{id:"custom",display:"Custom",element:r},{id:"color",display:"Color",element:i}]);return d("column-with-gap",[u,r,i])},F=function(e,t){var n=e.indexOf(t);n>-1&&e.splice(n,1)},B=function(e,t){return e.substring(0,e.length-t)},R=function(e,t,n){var r=e.createShader(t);if(e.shaderSource(r,n),e.compileShader(r),e.getShaderParameter(r,e.COMPILE_STATUS))return r;var o=e.getShaderInfoLog(r);return e.deleteShader(r),{error:o}},M=function(e,t,n){var r=e.createProgram();if(e.attachShader(r,t),e.attachShader(r,n),e.linkProgram(r),e.getProgramParameter(r,e.LINK_STATUS))return r;throw e.deleteProgram(r),new Error("Creating program failed: "+e.getProgramInfoLog(r))};!function(e){e[e.FLOAT_VEC3=35665]="FLOAT_VEC3",e[e.FLOAT_VEC4=35666]="FLOAT_VEC4"}(x||(x={}));var D=function(){function e(e,t,n,r){this.context=e,this.name=n,this.type=r,this.numElements=0,this.attachToProgram(t),this.buffer=e.createBuffer()}return e.prototype.attachToProgram=function(e){this.location=this.context.getAttribLocation(e,this.name)},e.prototype.setValue=function(e){this.numElements=e.length,this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffer);var t=[].concat.apply([],e);console.log("setting value",t),this.context.bufferData(this.context.ARRAY_BUFFER,new Float32Array(t),this.context.STATIC_DRAW)},e.prototype.setAttributeBuffer=function(){if(null!==this.buffer){this.context.enableVertexAttribArray(this.location),this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffer);var e=k(this.type),t=this.context.FLOAT;this.context.vertexAttribPointer(this.location,e,t,!1,0,0)}},e.prototype.getAttributeBufferType=function(){return this.type},e.prototype.getNumElements=function(){return this.numElements},e.prototype.deleteBuffer=function(){this.context.deleteBuffer(this.buffer),this.buffer=null},e}(),k=function(e){switch(e){case x.FLOAT_VEC3:return 3;case x.FLOAT_VEC4:return 4;default:b(e)}},j=function(){function e(e){this.value=e,this.observers=[]}return e.prototype.attach=function(e){this.observers.push(e)},e.prototype.detach=function(e){F(this.observers,e)},e.prototype.detachAll=function(){this.observers.length=0},e.prototype.setValue=function(e){this.value=e,this.notify()},e.prototype.getValue=function(){return this.value},e.prototype.forceNotify=function(){this.notify()},e.prototype.notify=function(){if(null!==this.value){var e=this.value;this.observers.forEach((function(t){return t(e)}))}},e}(),U=function(){return(U=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},H=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],u=0,a=i.length;u<a;u++,o++)r[o]=i[u];return r},G=function(e){return e.name+";"+e.type},K=new T(G),J=function(e,t,n,r){var o,i,u=n.map((function(n){var o=U({},n),i=K.get(o);if(i)return i.attributeBufferInfo.attachToProgram(t),{key:o,value:i};var u=new D(e,t,n.name,n.type),a=r.filter((function(e){return e.type===u.getAttributeBufferType()})),c=a.length?z(u,a):X(u),s=c.element,l=c.dispose;return{key:o,value:{component:p(s,n.name),attributeBufferInfo:u,dispose:function(){u.deleteBuffer(),null==l||l()}}}}));return i=(o=u).map((function(e){return G(e.key)})),K.entriesStrKey().filter((function(e){return!i.includes(e[0])})).forEach((function(e){e[1].dispose(),K.deleteStrKey(e[0])})),o.forEach((function(e){K.has(e.key)||K.set(e.key,e.value)})),u.map((function(e){return e.value}))},Y=function(e,t,n){switch(e){case x.FLOAT_VEC4:return W(n,t);default:return q()}},q=function(){var e=document.createElement("div");return e.className="unsupported-error",e.innerText="Not supported attribute buffer",e},X=function(e){var t=new j((e.getAttributeBufferType(),[[0,0,0,1],[0,.5,0,1],[.9,0,0,1],[0,.5,0,1],[.7,0,0,1],[.7,.5,0,1]]));return t.attach((function(t){e.setValue(t)})),{element:Y(e.getAttributeBufferType(),!0,t),dispose:function(){return t.detachAll()}}},z=function(e,t){var n=t.map((function(t){var n=Y(e.getAttributeBufferType(),!1,t.value);return{id:S(),element:n,display:t.name,value:t.value}})),r=new j((e.getAttributeBufferType(),[[0,0,0,1],[0,.5,0,1],[.9,0,0,1],[0,.5,0,1],[.7,0,0,1],[.7,.5,0,1]]));r.attach((function(t){return e.setValue(t)}));var o=Y(e.getAttributeBufferType(),!0,r),i=void 0;return{element:d("column-with-gap",H([s(H([l(o)],n),(function(t){null==i||i();var o=n.find((function(e){return e.id===t}));if(o){var u=function(t){return e.setValue(t)};o.value.attach(u),u(o.value.getValue()),i=function(){return o.value.detach(u)}}else r.forceNotify()})),o],n.map((function(e){return e.element})))),dispose:function(){null==i||i(),r.detachAll()}}},W=function(e,t){var n=document.createElement("input");if(n.className="edit-input",n.disabled=!t,!t){e.attach((function(e){return n.value=JSON.stringify(e)}))}return n.value=JSON.stringify(e.getValue()),n.oninput=function(){try{var t=JSON.parse(n.value);if(Array.isArray(t))t.every((function(e){return!!Array.isArray(e)&&4===e.length}));else;e.setValue(t)}catch(e){console.log("this is not a json")}},n},Q=function(e){var t=document.createElement("canvas");t.className=e;var n,r,o=t.getContext("webgl");if(n=t,r=function(e){t.width=e.width,t.height=e.height},new ResizeObserver((function(e){var t=e.find((function(e){return e.target===n}));if(t){var o=t.target.getBoundingClientRect();r({x:o.x,y:o.y,width:o.width,height:o.height})}})).observe(n),!o)throw new Error("Unable to create webgl context");return[t,{context:o}]},Z=acquireVsCodeApi(),$=function(){function e(){var e=this;this.eventListeners=[],window.addEventListener("message",(function(t){e.eventListeners.forEach((function(e){return e(t.data)}))}))}return e.prototype.getShaderDocuments=function(){var e=this,t=S();return Z.postMessage({type:"getShaderDocuments",id:t}),new Promise((function(n){var r=function(o){"getShaderDocuments"===o.type&&o.id===t&&(n(o.payload.files),e.removeListener(r))};e.eventListeners.push(r)}))},e.prototype.getDocumentText=function(e){var t=this,n=S();return Z.postMessage({type:"getDocumentText",id:n,payload:{fileName:e}}),new Promise((function(e){var r=function(o){"getDocumentText"===o.type&&o.id===n&&(e(o.payload.text),t.removeListener(r))};t.eventListeners.push(r)}))},e.prototype.subscribeToDocumentSave=function(e,t){var n=this;Z.postMessage({type:"subscribeToDocumentTextChange",payload:{fileName:e}});var r=function(n){"onDocumentTextChange"===n.type&&n.payload.filePath===e&&t(n.payload.text)};return this.eventListeners.push(r),function(){n.removeListener(r),Z.postMessage({type:"unsubscribeToDocumentTextChange",payload:{fileName:e}})}},e.prototype.removeListener=function(e){F(this.eventListeners,e)},e}(),ee=function(e){return[].concat(e,e,e,e)},te=new Map([["cube",{display:"Cube",positions:[[-.5,-.5,.5,1],[.5,-.5,.5,1],[.5,.5,.5,1],[-.5,.5,.5,1],[-.5,-.5,-.5,1],[-.5,.5,-.5,1],[.5,.5,-.5,1],[.5,-.5,-.5,1],[-.5,.5,-.5,1],[-.5,.5,.5,1],[.5,.5,.5,1],[.5,.5,-.5,1],[-.5,-.5,-.5,1],[.5,-.5,-.5,1],[.5,-.5,.5,1],[-.5,-.5,.5,1],[.5,-.5,-.5,1],[.5,.5,-.5,1],[.5,.5,.5,1],[.5,-.5,.5,1],[-.5,-.5,-.5,1],[-.5,-.5,.5,1],[-.5,.5,.5,1],[-.5,.5,-.5,1]],colors:function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],u=0,a=i.length;u<a;u++,o++)r[o]=i[u];return r}(ee([1,1,1,1]),ee([1,0,0,1]),ee([0,1,0,1]),ee([0,0,1,1]),ee([1,1,0,1]),ee([1,0,1,1])),indices:[0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23]}]]);console.log(te);var ne=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function u(e){try{c(r.next(e))}catch(e){i(e)}}function a(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(u,a)}c((r=r.apply(e,t||[])).next())}))},re=function(e,t){var n,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!(o=u.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=t.call(e,u)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};ne(void 0,void 0,void 0,(function(){var e,t,n,r,i,u,a,s,l,h,m,v,y,b,E,w,T,S,L,I,_,N,P,F,D,k,U,H,G,K;return re(this,(function(Y){var q,X,z;return e=new $,t=document.getElementById("viewer"),n=d("viewer-options"),r=d("viewer-shader-options"),i=d("viewer-content shader-errors"),u=Q("viewer-content"),a=u[0],s=u[1],l=new Map([["positions",{name:"Binding - Mesh positions",type:x.FLOAT_VEC4,value:new j([])}],["normals",{name:"Binding - Mesh normals",type:x.FLOAT_VEC4,value:new j([])}]]),h={drawMode:"arrays"},t.appendChild(a),t.appendChild(i),t.appendChild(n),m=function(e){a.style.visibility="canvas"===e?"visible":"collapse",i.style.visibility="errors"===e?"visible":"collapse"},v=function(){e.getShaderDocuments().then((function(e){var t=e.map((function(e){return{id:e.filePath,display:e.fileName}}));N.setItems(t),D.setItems(t)}))},T=null,S=function(e){var t=te.get(e).positions;l.get("positions").value.setValue(t)},L=function(){r.innerHTML="";var e=s.context;if(w&&E){var t=function(e,t,n){var r=R(e,e.VERTEX_SHADER,t),o=R(e,e.FRAGMENT_SHADER,n),i=void 0;g(r,"error")&&(i=B(r.error,1));var u=void 0;return g(o,"error")&&(u=B(o.error,1)),i||u?[i,u]:M(e,r,o)}(e,E,w);if(Array.isArray(t))m("errors"),i.innerText=function(e){var t=e[0],n=e[1],r=[];return t&&r.push("VERTEX SHADER:",t),n&&r.push("FRAGMENT SHADER:",n),r.join("\r\n")}(t);else{m("canvas");var n=t,o=function(e,t){for(var n=e.getProgramParameter(t,e.ACTIVE_UNIFORMS),r=[],o=0;o<n;++o){var i=e.getActiveUniform(t,o);r.push({name:i.name,type:i.type})}return r}(e,n),u=function(e,t){for(var n=e.getProgramParameter(t,e.ACTIVE_ATTRIBUTES),r=[],o=0;o<n;++o){var i=e.getActiveAttrib(t,o);r.push({name:i.name,type:i.type})}return r}(e,n),a=function(e,t,n){var r=n.map((function(n){var r=C({},n),o=V.get(r);if(o)return o.uniformInfo.attachToProgram(t),{key:r,value:o};var i=new A(e,t,n.name,n.type);return{key:r,value:{component:p(O(i),n.name),uniformInfo:i}}}));return V.clear(),r.forEach((function(e){return V.set(e.key,e.value)})),r.map((function(e){return e.value}))}(e,n,o);a.forEach((function(e){return r.appendChild(e.component)}));var c=J(e,n,u,Array.from(l.values()));c.forEach((function(e){return r.appendChild(e.component)}));var f=a.map((function(e){return e.uniformInfo})),d=c.map((function(e){return e.attributeBufferInfo}));null!==T&&cancelAnimationFrame(T);var v=function(){!function(e,t,n,r){e.useProgram(t),e.viewport(0,0,e.canvas.width,e.canvas.height),e.clearColor(0,0,0,0),e.clear(e.COLOR_BUFFER_BIT),n.uniformInfos.forEach((function(e){return e.setUniform()})),n.attributeBufferInfos.forEach((function(e){return e.setAttributeBuffer()}));var o=Math.min.apply(Math,n.attributeBufferInfos.map((function(e){return e.getNumElements()}))),i=e.TRIANGLES;console.log("drawing",o),"arrays"===r.drawMode?e.drawArrays(i,0,o):e.drawElements(i,o,e.UNSIGNED_SHORT,0)}(e,n,{uniformInfos:f,attributeBufferInfos:d},h),T=requestAnimationFrame(v)};v()}}else m("none")},n.appendChild(d("viewer-shaders-title",[(q=o,X="",z=document.createElement("h3"),z.textContent=q,z.className=X+" section-title",{element:z}).element,f("Sync","viewer-refresh-button",v).element])),I=c((function(t){return ne(void 0,void 0,void 0,(function(){var n;return re(this,(function(r){switch(r.label){case 0:return null==y||y(),t&&(y=e.subscribeToDocumentSave(t.id,(function(e){E=e,L()}))),t?[4,e.getDocumentText(t.id)]:[3,2];case 1:return n=r.sent(),[3,3];case 2:n="",r.label=3;case 3:return E=n,L(),[2]}}))}))})),_=I[0],N=I[1],n.appendChild(p(_,"Vertex Shader")),P=c((function(t){return ne(void 0,void 0,void 0,(function(){var n;return re(this,(function(r){switch(r.label){case 0:return null==b||b(),t&&(b=e.subscribeToDocumentSave(t.id,(function(e){w=e,L()}))),t?[4,e.getDocumentText(t.id)]:[3,2];case 1:return n=r.sent(),[3,3];case 2:n="",r.label=3;case 3:return w=n,L(),[2]}}))}))})),F=P[0],D=P[1],n.appendChild(p(F,"Fragment Shader")),k=c((function(e){return e&&S(e.id)}),void 0,{emptyItem:!1}),U=k[0],(H=k[1]).setItems(Array.from(te.entries()).map((function(e){return{id:e[0],display:e[1].display}}))),H.setSelectedItemByIndex(0),n.appendChild(p(U,"Mesh")),G=c((function(e){return e&&(h.drawMode=e.id)}),void 0,{emptyItem:!1}),K=G[0],G[1].setItems([{id:"arrays",display:"Arrays"},{id:"elements",display:"Elements"}]),n.appendChild(p(K,"Draw mode")),n.appendChild(r),v(),[2]}))}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,