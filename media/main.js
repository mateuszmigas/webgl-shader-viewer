!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);var r="SHADERS",o=function(){return(o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},i=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],u=0,a=i.length;u<a;u++,o++)r[o]=i[u];return r},u={emptyItem:!0},a=function(e,t,n){var r=o(o({},u),n),a=document.createElement("select");a.className="dropdown-base "+t;var c=null,l=[],s=function(t){e(c=t)};a.onchange=function(){var e=l.find((function(e){return e.item.id===a.value}));e.item.id?s(e.item):s(null)};return[a,{setItems:function(e){a.innerHTML="",l.length=0,e.find((function(e){return e.id===(null==c?void 0:c.id)}))||s(null),(r.emptyItem?i([{id:"",display:""}],e):i(e)).forEach((function(e){var t=document.createElement("option");t.value=e.id,t.textContent=e.display,t.selected=e.id===(null==c?void 0:c.id),a.appendChild(t),l.push({element:t,item:e})}))},getItems:function(){return l.map((function(e){return e.item}))},setSelectedItemById:function(e){s(null),l.forEach((function(t){t.item.id===e?(t.element.selected=!0,s(t.item)):t.element.selected=!1}))},getSelectedItem:function(){return c},clearSelection:function(){l.forEach((function(e){return e.element.selected=!1})),s(null)}}]},c=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){var t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}))},l=acquireVsCodeApi(),s=function(){function e(){var e=this;this.eventListeners=[],window.addEventListener("message",(function(t){e.eventListeners.forEach((function(e){return e(t.data)}))}))}return e.prototype.getShaderDocuments=function(){var e=this,t=c();return l.postMessage({type:"getShaderDocuments",id:t}),new Promise((function(n){var r=function(o){"getShaderDocuments"===o.type&&o.id===t&&(n(o.payload.files),e.removeListener(r))};e.eventListeners.push(r)}))},e.prototype.getDocumentText=function(e){var t=this,n=c();return l.postMessage({type:"getDocumentText",id:n,payload:{fileName:e}}),new Promise((function(e){var r=function(o){"getDocumentText"===o.type&&o.id===n&&(e(o.payload.text),t.removeListener(r))};t.eventListeners.push(r)}))},e.prototype.subscribeToDocumentSave=function(e,t){var n=this;l.postMessage({type:"subscribeToDocumentTextChange",payload:{fileName:e}});var r=function(n){"onDocumentTextChange"===n.type&&n.payload.filePath===e&&t(n.payload.text)};return this.eventListeners.push(r),function(){n.removeListener(r),l.postMessage({type:"unsubscribeToDocumentTextChange",payload:{fileName:e}})}},e.prototype.removeListener=function(e){var t,n,r;t=this.eventListeners,n=e,(r=t.indexOf(n))>-1&&t.splice(r,1)},e}(),d=function(e,t){var n=document.createElement("h3");return n.textContent=e,n.className=t+" section-title",{element:n}},f=function(e,t,n){var r=document.createElement("button");return r.onclick=n,r.className=t,r.textContent=e,{element:r}},p=function(e,t,n){var r=document.createElement("div");r.className=t+" options-wrapper";var o=document.createElement("label");return o.className="options-label",o.textContent=n,e.className=e.className+" options-content",r.appendChild(o),r.appendChild(e),r},m=function(e,t){var n=document.createElement("div");return n.className=e,null==t||t.forEach((function(e){return n.appendChild(e)})),n},v=function(e,t,n,r,o){var i=document.createElement("div");i.className="edit-input-grid";for(var u=[],a=function(){return u.map((function(e){return e.value}))},c=0;c<n;c++){var l=document.createElement("div");l.className="edit-input-row";for(var s=function(n){var i=c*r+n,s=e[i],d=document.createElement("input"),f={element:d,value:s};Object.assign(d,o),d.className="edit-input",d.type="number",d.value=null==s?void 0:s.toString(),d.oninput=function(){u[i].value=Number(d.value),null==t||t(a())},u.push(f),l.appendChild(d)},d=0;d<r;d++)s(d);i.appendChild(l)}return[i,{setValues:function(e){return u.forEach((function(t,n){return t.value=e[n]}))},getValues:a,setReadonly:function(e){return u.forEach((function(t){return t.element.readOnly=e}))}}]},h=function(e){return v([0,0,0,0,0,0,0,0,0],e,3,3)},y={min:"0",max:"1",step:"0.1"},x=function(e){var t;e.appendChild(p(function(e){var t=[.5,.5,.5,1],n=document.createElement("div");n.className="edit-input-color";var r=function(e){n.style.background="rgb("+255*e[0]+","+255*e[1]+","+255*e[2]+","+e[3]+")"};r(t);var o=m("row-with-gap"),i=v(t,(function(t){r(t),null==e||e(t)}),1,4,y),u=i[0],a=i[1];return o.appendChild(u),o.appendChild(n),[o,a]}()[0],"","u_color")),e.appendChild(p(v([0,0,0,0],t,1,4)[0],"","u_diffuse"));var n=h((function(e){return console.log(e)})),r=n[0],o=n[1],i=a((function(e){e&&("0"===e.id&&o.setReadonly(!1),"1"===e.id&&o.setReadonly(!0))}),"",{emptyItem:!1}),u=i[0],c=i[1];c.setItems([{id:"0",display:"Color picker"},{id:"1",display:"Custom2"}]),c.setSelectedItemById("0"),e.appendChild(p(m("column-with-gap",[u,r]),"","dobre diffuse")),e.appendChild(p(m("column-with-gap",[a((function(e){}))[0],h((function(e){return console.log(e)}))[0]]),"","u_diffuse2")),e.appendChild(p(m("column-with-gap",[a((function(e){}))[0],h((function(e){return console.log(e)}))[0]]),"","u_diffuse2"))},g=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function u(e){try{c(r.next(e))}catch(e){i(e)}}function a(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(u,a)}c((r=r.apply(e,t||[])).next())}))},b=function(e,t){var n,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!(o=u.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=t.call(e,u)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};g(void 0,void 0,void 0,(function(){var e,t,n,o,i,u,c,l,v,h,y,w,C,S,E,N;return b(this,(function(T){var D,I,L;return e=new s,t=document.getElementById("viewer"),n=m("viewer-options"),o=m("viewer-shader-options"),D="viewer-content",I=document.createElement("canvas"),L=I.getContext("2d"),I.className=D,I.width=500,I.height=500,L.fillStyle="green",L.fillRect(150,150,200,450),i=I,t.appendChild(i),t.appendChild(n),h=function(){o.innerHTML="",console.log({fragment:v,vertex:l}),x(o)},n.appendChild(m("viewer-shaders-title",[d(r,"").element,f("Sync","viewer-refresh-button",(function(){e.getShaderDocuments().then((function(e){var t=e.map((function(e){return{id:e.filePath,display:e.fileName}}));C.setItems(t),N.setItems(t)}))})).element])),y=a((function(t){return g(void 0,void 0,void 0,(function(){var n;return b(this,(function(r){switch(r.label){case 0:return null==u||u(),t&&(u=e.subscribeToDocumentSave(t.id,(function(e){l=e,h()}))),t?[4,e.getDocumentText(t.id)]:[3,2];case 1:return n=r.sent(),[3,3];case 2:n="",r.label=3;case 3:return l=n,h(),[2]}}))}))})),w=y[0],C=y[1],n.appendChild(p(w,"viewer-vertex-shader-selector","Vertex Shader")),S=a((function(t){return g(void 0,void 0,void 0,(function(){var n;return b(this,(function(r){switch(r.label){case 0:return null==c||c(),t&&(c=e.subscribeToDocumentSave(t.id,(function(e){v=e,h()}))),t?[4,e.getDocumentText(t.id)]:[3,2];case 1:return n=r.sent(),[3,3];case 2:n="",r.label=3;case 3:return v=n,h(),[2]}}))}))})),E=S[0],N=S[1],n.appendChild(p(E,"viewer-fragment-shader-selector","Fragment Shader")),n.appendChild(o),[2]}))}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,