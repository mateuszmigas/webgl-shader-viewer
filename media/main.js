!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t),n.d(t,"createUniformBindings",(function(){return pe}));var r,i=function(){return(i=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)},o=function(e){return Math.min(Math.max(e,1),10)},u=function(){function e(e,t,n){var r=this;this.element=e,this.positionProvider=t,this.onPositionChange=n,this.pointerPosition={x:0,y:0},this.eventListeners=new Map,this.isMoving=!1,this.dispatchAction=function(e){var t=function(e,t){switch(t.type){case"orbitRotate":return i(i({},e),{latitude:(r=e.latitude+t.deltaLatitude,Math.min(Math.max(r,-Math.PI/2+.1),Math.PI/2-.1)),longitude:(n=e.longitude+t.deltaLongitude,n>Math.PI?n-2*Math.PI:n<-Math.PI?n+2*Math.PI:n)});case"zoomInAt":return i(i({},e),{radius:o(e.radius-.1)});case"zoomOutAt":return i(i({},e),{radius:o(e.radius+.1)});default:return e}var n,r}(r.positionProvider(),e);r.onPositionChange(t)},this.onMouseDown=function(e){0===e.button&&(r.pointerPosition={x:e.offsetX,y:e.offsetY},r.isMoving=!0)},this.onMouseMove=function(e){if(r.isMoving){r.dispatchAction({type:"orbitRotate",deltaLongitude:.01*-(e.offsetX-r.pointerPosition.x),deltaLatitude:.01*(e.offsetY-r.pointerPosition.y)})}r.pointerPosition={x:e.offsetX,y:e.offsetY}},this.onMouseUp=function(){r.isMoving=!1},this.onMouseLeave=function(){r.isMoving=!1},this.onWheel=function(e){var t=e.deltaY<0?"zoomInAt":"zoomOutAt";r.dispatchAction({type:t})},this.registerEvent("mousedown",this.onMouseDown),this.registerEvent("mousemove",this.onMouseMove),this.registerEvent("mouseup",this.onMouseUp),this.registerEvent("mouseleave",this.onMouseLeave),this.registerEvent("wheel",this.onWheel)}return e.prototype.dispose=function(){var e=this;this.eventListeners.forEach((function(t,n){return e.element.removeEventListener(n,t)}))},e.prototype.registerEvent=function(e,t){this.element.addEventListener(e,t),this.eventListeners.set(e,t)},e}(),a=acquireVsCodeApi(),s={vertexFilePath:null,fragmentFilePath:null,drawMode:"elements",meshId:"cube"},c=function(){var e;return null!==(e=a.getState())&&void 0!==e?e:s},l=function(e){return a.setState(Object.assign(c(),e))},f=function(){function e(e){this.context=e,this.count=0,this.buffer=e.createBuffer()}return e.prototype.setValue=function(e){this.count=e.length,this.context.bindBuffer(this.context.ELEMENT_ARRAY_BUFFER,this.buffer),this.context.bufferData(this.context.ELEMENT_ARRAY_BUFFER,new Uint16Array(e),this.context.STATIC_DRAW)},e.prototype.setIndexBuffer=function(){this.context.bindBuffer(this.context.ELEMENT_ARRAY_BUFFER,this.buffer)},e.prototype.getCount=function(){return this.count},e.prototype.deleteBuffer=function(){this.context.deleteBuffer(this.buffer),this.buffer=null},e}(),h="SHADERS",d=function(){return(d=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)},p=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),i=0;for(t=0;t<n;t++)for(var o=arguments[t],u=0,a=o.length;u<a;u++,i++)r[i]=o[u];return r},m={emptyItem:!1},v=function(e,t,n){var r=d(d({},m),n),i=document.createElement("select");i.className="dropdown-base "+t;var o=null,u=[],a=function(t){e(o=t)};i.onchange=function(){var e=u.find((function(e){return e.item.id===i.value}));e.item.id?a(e.item):a(null)};var s=function(e){u.forEach((function(t){t.item.id===e?(t.element.selected=!0,a(t.item)):t.element.selected=!1}))};return[i,{setItems:function(e){i.innerHTML="",u.length=0,(r.emptyItem?p([{id:"",display:""}],e):p(e)).forEach((function(e){var t=document.createElement("option");t.value=e.id,t.textContent=e.display,t.selected=e.id===(null==o?void 0:o.id),i.appendChild(t),u.push({element:t,item:e})}))},getItems:function(){return u.map((function(e){return e.item}))},setSelectedItemById:s,setSelectedItemByIndex:function(e){return s(u[e].item.id)},getSelectedItem:function(){return o},clearSelection:function(){u.forEach((function(e){return e.element.selected=!1})),a(null)}}]},y=function(e,t){var n=v((function(n){n?(e.forEach((function(e){return e.element.classList.add("hidden")})),e.find((function(e){return e.id===n.id})).element.classList.remove("hidden"),null==t||t(n.id)):null==t||t(null)})),r=n[0],i=n[1];return i.setItems(e.map((function(e){return{id:e.id,display:e.display}}))),i.setSelectedItemByIndex(0),r},g=function(e,t){var n=document.createElement("h3");return n.textContent=e,n.className=t+" section-title",{element:n}},b=function(e,t,n){var r=document.createElement("div");r.className=(null!=n?n:"")+" options-wrapper";var i=document.createElement("label");return i.className="options-label",i.textContent=t,e.className=e.className+" options-content",r.appendChild(i),r.appendChild(e),r},A=function(e,t){var n=document.createElement("div");return n.className=e,null==t||t.forEach((function(e){return n.appendChild(e)})),n},x=function(e,t){return e.hasOwnProperty(t)},E=function(e){throw new Error("Unhandled union member: "+JSON.stringify(e))},T=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),i=0;for(t=0;t<n;t++)for(var o=arguments[t],u=0,a=o.length;u<a;u++,i++)r[i]=o[u];return r};!function(e){e[e.FLOAT_VEC2=35664]="FLOAT_VEC2",e[e.FLOAT_VEC3=35665]="FLOAT_VEC3",e[e.FLOAT_VEC4=35666]="FLOAT_VEC4",e[e.FLOAT_MAT4=35676]="FLOAT_MAT4"}(r||(r={}));var w,M=function(){function e(e,t,n,r){this.context=e,this.name=n,this.type=r,this.attachToProgram(t)}return e.prototype.attachToProgram=function(e){var t=this.context.getUniformLocation(e,this.name);this.setter=S(this.type,this.context,t)},e.prototype.setValue=function(e){this.value=e},e.prototype.setUniform=function(){null!==this.value&&this.setter(this.value)},e.prototype.getUniformType=function(){return this.type},e.prototype.getUniformName=function(){return this.name},e.prototype.dispose=function(){},e}(),S=function(e,t,n){switch(e){case r.FLOAT_VEC2:return function(e){return t.uniform2f.apply(t,T([n],e))};case r.FLOAT_VEC3:return function(e){return t.uniform3f.apply(t,T([n],e))};case r.FLOAT_VEC4:return function(e){return t.uniform4f.apply(t,T([n],e))};case r.FLOAT_MAT4:return function(e){return t.uniformMatrix4fv(n,!1,e)};default:E(e)}},I=function(){function e(e){this.keySelector=e,this.map=new Map}return e.prototype.get=function(e){return this.map.get(this.keySelector(e))},e.prototype.set=function(e,t){this.map.set(this.keySelector(e),t)},e.prototype.has=function(e){return this.map.has(this.keySelector(e))},e.prototype.entriesStrKey=function(){return Array.from(this.map.entries())},e.prototype.deleteStrKey=function(e){this.map.delete(e)},e.prototype.delete=function(e){this.map.delete(this.keySelector(e))},e.prototype.clear=function(){this.map.clear()},e}(),C=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){var t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}))},F=function(e,t){var n=e.indexOf(t);n>-1&&e.splice(n,1)},L=function(e,t){return e.substring(0,e.length-t)},P=function(){function e(e){this.value=e,this.observers=[]}return e.prototype.attach=function(e){this.observers.push(e)},e.prototype.detach=function(e){F(this.observers,e)},e.prototype.detachAll=function(){this.observers.length=0},e.prototype.setValue=function(e){this.value=e,this.notify()},e.prototype.getValue=function(){return this.value},e.prototype.forceNotify=function(){this.notify()},e.prototype.notify=function(){if(null!==this.value){var e=this.value;this.observers.forEach((function(t){return t(e)}))}},e}(),O=function(e,t,n){var r=document.createElement("div");r.className="edit-input-grid";for(var i=[],o=function(){return i.map((function(e){return e.value}))},u=0;u<e;u++){var a=document.createElement("div");a.className="edit-input-row";for(var s=function(e){var r=u*t+e,s=document.createElement("input"),c={element:s,value:0};s.className="edit-input",s.type="number",s.value=(0).toString(),s.disabled=!n,s.oninput=function(){i[r].value=Number(s.value),console.log("calling on change"),null==n||n(o())},i.push(c),a.appendChild(s)},c=0;c<t;c++)s(c);r.appendChild(a)}return[r,{setValues:function(e){return i.forEach((function(t,n){t.value=e[n],t.element.value=t.value.toString()}))},getValues:o,setReadonly:function(e){return i.forEach((function(t){return t.element.readOnly=e}))}}]},_=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),i=0;for(t=0;t<n;t++)for(var o=arguments[t],u=0,a=o.length;u<a;u++,i++)r[i]=o[u];return r},B=function(){var e=document.createElement("div");return e.className="unsupported-error",e.innerText="Not supported uniform",e},V=function(e,t){var n=null;return{element:A("column-with-gap",_([y(e,(function(r){null==n||n();var i=e.find((function(e){return e.id===r})),o=function(e){return t(e)};i.value.attach(o),o(i.value.getValue()),n=function(){return i.value.detach(o)}}))],e.map((function(e){return e.element})))),dispose:function(){return null==n?void 0:n()}}},R=function(e,t,n){var r=O(1,e,(function(e){t.setValue(e)})),i=r[0],o=r[1];if(o.setValues(t.getValue()),!n){t.attach((function(e){return o.setValues(e)}))}return i},N=function(e,t,n){var r=function(e,t){return O(e,e,t)}(e,n?function(e){t.setValue(e)}:void 0),i=r[0],o=r[1];if(o.setValues(t.getValue()),!n){t.attach((function(e){return o.setValues(e)}))}return i},U=function(e,t,n){var r=document.createElement("input");if(r.className="edit-input",r.disabled=!n,!n){t.attach((function(e){return r.value=JSON.stringify(e)}))}return r.value=JSON.stringify(t.getValue()),r.oninput=function(){try{var n=JSON.parse(r.value);if(Array.isArray(n))n.every((function(t){return!!Array.isArray(t)&&t.length===e}))||console.log("not every element id the arra is same size");else 1!==e&&console.log("this is not an array type");t.setValue(n)}catch(e){console.log("this is not a json")}},r},D=function(){return(D=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)},k=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),i=0;for(t=0;t<n;t++)for(var o=arguments[t],u=0,a=o.length;u<a;u++,i++)r[i]=o[u];return r},j=function(e){return e.name+";"+e.type},z=new I(j),H=function(e,t,n,r){var i,o,u=n.map((function(n){var i=D({},n),o=z.get(i);if(o)return o.uniformInfo.attachToProgram(t),{key:i,value:o};var u=new M(e,t,n.name,n.type),a=r.filter((function(e){return e.type===u.getUniformType()})),s=function(e){return u.setValue(e)},c=a.length?V(k([Y(u)],K(a,u)),s):G(u,s),l=c.element,f=c.dispose;return{key:i,value:{component:b(l,n.name),uniformInfo:u,dispose:function(){null==f||f()}}}}));return o=(i=u).map((function(e){return j(e.key)})),z.entriesStrKey().filter((function(e){return!o.includes(e[0])})).forEach((function(e){z.deleteStrKey(e[0])})),i.forEach((function(e){z.has(e.key)||z.set(e.key,e.value)})),u.map((function(e){return e.value}))},Y=function(e){return D({id:"custom",display:"Custom"},G(e))},K=function(e,t){return e.map((function(e){var n=W(t.getUniformType(),!1,e.value);return{id:C(),element:n,display:e.name,value:e.value}}))},G=function(e,t){var n=function(e){switch(e){case r.FLOAT_VEC2:return[1,1];case r.FLOAT_VEC3:return[1,1,1];case r.FLOAT_VEC4:return[1,1,1,1];case r.FLOAT_MAT4:return[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];default:E(e)}}(e.getUniformType()),i=new P(n);return t&&(i.attach((function(e){return t(e)})),t(n)),{element:W(e.getUniformType(),!0,i),value:i,dispose:function(){return i.detachAll()}}},W=function(e,t,n){switch(e){case r.FLOAT_VEC2:return R(2,n,t);case r.FLOAT_VEC3:return R(3,n,t);case r.FLOAT_VEC4:return R(4,n,t);case r.FLOAT_MAT4:return N(4,n,t);default:return B()}},X=function(e,t,n){var r=e.createShader(t);if(e.shaderSource(r,n),e.compileShader(r),e.getShaderParameter(r,e.COMPILE_STATUS))return r;var i=e.getShaderInfoLog(r);return e.deleteShader(r),{error:i}},J=function(e,t,n){var r=e.createProgram();if(e.attachShader(r,t),e.attachShader(r,n),e.linkProgram(r),e.getProgramParameter(r,e.LINK_STATUS))return r;throw e.deleteProgram(r),new Error("Creating program failed: "+e.getProgramInfoLog(r))};!function(e){e[e.FLOAT_VEC3=35665]="FLOAT_VEC3",e[e.FLOAT_VEC4=35666]="FLOAT_VEC4"}(w||(w={}));var q=function(){function e(e,t,n,r){this.context=e,this.name=n,this.type=r,this.count=0,this.attachToProgram(t),this.buffer=e.createBuffer()}return e.prototype.attachToProgram=function(e){this.location=this.context.getAttribLocation(e,this.name)},e.prototype.setValue=function(e){this.count=e.length,this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffer);var t=[].concat.apply([],e);this.context.bufferData(this.context.ARRAY_BUFFER,new Float32Array(t),this.context.STATIC_DRAW)},e.prototype.setAttributeBuffer=function(){if(null!==this.buffer){this.context.enableVertexAttribArray(this.location),this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffer);var e=Q(this.type),t=this.context.FLOAT;this.context.vertexAttribPointer(this.location,e,t,!1,0,0)}},e.prototype.getAttributeBufferType=function(){return this.type},e.prototype.getCount=function(){return this.count},e.prototype.deleteBuffer=function(){this.context.deleteBuffer(this.buffer),this.buffer=null},e}(),Q=function(e){switch(e){case w.FLOAT_VEC3:return 3;case w.FLOAT_VEC4:return 4;default:E(e)}},Z=function(){return(Z=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)},$=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),i=0;for(t=0;t<n;t++)for(var o=arguments[t],u=0,a=o.length;u<a;u++,i++)r[i]=o[u];return r},ee=function(e){return e.name+";"+e.type},te=new I(ee),ne=function(e,t,n,r){var i,o,u=n.map((function(n){var i=Z({},n),o=te.get(i);if(o)return o.attributeBufferInfo.attachToProgram(t),{key:i,value:o};var u=new q(e,t,n.name,n.type),a=r.filter((function(e){return e.type===u.getAttributeBufferType()})),s=function(e){return u.setValue(e)},c=a.length?V($([re(u)],ie(a,u)),s):oe(u,s),l=c.element,f=c.dispose;return{key:i,value:{component:b(l,n.name),attributeBufferInfo:u,dispose:function(){u.deleteBuffer(),null==f||f()}}}}));return o=(i=u).map((function(e){return ee(e.key)})),te.entriesStrKey().filter((function(e){return!o.includes(e[0])})).forEach((function(e){e[1].dispose(),te.deleteStrKey(e[0])})),i.forEach((function(e){te.has(e.key)||te.set(e.key,e.value)})),u.map((function(e){return e.value}))},re=function(e){return Z({id:"custom",display:"Custom"},oe(e))},ie=function(e,t){return e.map((function(e){var n=ue(t.getAttributeBufferType(),!1,e.value);return{id:C(),element:n,display:e.name,value:e.value}}))},oe=function(e,t){var n=(e.getAttributeBufferType(),[[0,0,0,1],[0,.5,0,1],[.9,0,0,1],[0,.5,0,1],[.7,0,0,1],[.7,.5,0,1]]),r=new P(n);return t&&(r.attach((function(e){return t(e)})),t(n)),{element:ue(e.getAttributeBufferType(),!0,r),value:r,dispose:function(){return r.detachAll()}}},ue=function(e,t,n){switch(e){case w.FLOAT_VEC4:return U(4,n,t);default:return B()}},ae=function(e){var t=document.createElement("canvas");t.className=e;var n,r,i=t.getContext("webgl"),o=0,u=0;if(n=t,r=function(e){t.width=e.width,t.height=e.height,o=e.width,u=e.height},new ResizeObserver((function(e){var t=e.find((function(e){return e.target===n}));if(t){var i=t.target.getBoundingClientRect();r({x:i.x,y:i.y,width:i.width,height:i.height})}})).observe(n),!i)throw new Error("Unable to create webgl context");return[t,{context:i,getSize:function(){return{width:o,height:u}}}]},se=function(){function e(){var e=this;this.eventListeners=[],window.addEventListener("message",(function(t){e.eventListeners.forEach((function(e){return e(t.data)}))}))}return e.prototype.getShaderDocuments=function(){var e=this,t=C();return a.postMessage({type:"getShaderDocuments",id:t}),new Promise((function(n){var r=function(i){"getShaderDocuments"===i.type&&i.id===t&&(n(i.payload.files),e.removeListener(r))};e.eventListeners.push(r)}))},e.prototype.getDocumentText=function(e){var t=this,n=C();return a.postMessage({type:"getDocumentText",id:n,payload:{fileName:e}}),new Promise((function(e){var r=function(i){"getDocumentText"===i.type&&i.id===n&&(e(i.payload.text),t.removeListener(r))};t.eventListeners.push(r)}))},e.prototype.subscribeToDocumentSave=function(e,t){var n=this;a.postMessage({type:"subscribeToDocumentTextChange",payload:{fileName:e}});var r=function(n){"onDocumentTextChange"===n.type&&n.payload.filePath===e&&t(n.payload.text)};return this.eventListeners.push(r),function(){n.removeListener(r),a.postMessage({type:"unsubscribeToDocumentTextChange",payload:{fileName:e}})}},e.prototype.removeListener=function(e){F(this.eventListeners,e)},e}(),ce=function(e){return[].concat(e,e,e,e)},le=new Map([["cube",{display:"Cube",positions:[[-.5,-.5,.5,1],[.5,-.5,.5,1],[.5,.5,.5,1],[-.5,.5,.5,1],[-.5,-.5,-.5,1],[-.5,.5,-.5,1],[.5,.5,-.5,1],[.5,-.5,-.5,1],[-.5,.5,-.5,1],[-.5,.5,.5,1],[.5,.5,.5,1],[.5,.5,-.5,1],[-.5,-.5,-.5,1],[.5,-.5,-.5,1],[.5,-.5,.5,1],[-.5,-.5,.5,1],[.5,-.5,-.5,1],[.5,.5,-.5,1],[.5,.5,.5,1],[.5,-.5,.5,1],[-.5,-.5,-.5,1],[-.5,-.5,.5,1],[-.5,.5,.5,1],[-.5,.5,-.5,1]],colors:function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),i=0;for(t=0;t<n;t++)for(var o=arguments[t],u=0,a=o.length;u<a;u++,i++)r[i]=o[u];return r}(ce([1,1,1,1]),ce([1,0,0,1]),ce([0,1,0,1]),ce([0,0,1,1]),ce([1,1,0,1]),ce([1,0,1,1])),indices:[0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23]}],["plane",{display:"Plane",positions:[[-.5,-.5,0,1],[.5,-.5,0,1],[.5,.5,0,1],[-.5,.5,0,1]],colors:ce([1,1,1,1]),indices:[0,1,2,0,2,3]}]]);console.log(le);var fe;!function(e){e.create=function(){var e=new Float32Array(16);return e[0]=1,e[5]=1,e[10]=1,e[15]=1,e},e.perspective=function(e,t,n,r,i){var o,u=1/Math.tan(t/2);return e[0]=u/n,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=u,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,null!=i&&i!==1/0?(o=1/(r-i),e[10]=(i+r)*o,e[14]=2*i*r*o):(e[10]=-1,e[14]=-2*r),e},e.lookAt=function(e,t,n,r){var i,o,u,a,s,c,l,f,h,d,p=t[0],m=t[1],v=t[2],y=r[0],g=r[1],b=r[2],A=n[0],x=n[1],E=n[2];return Math.abs(p-A)<1e-6&&Math.abs(m-x)<1e-6&&Math.abs(v-E)<1e-6?function(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}(e):(l=p-A,f=m-x,h=v-E,i=g*(h*=d=1/Math.hypot(l,f,h))-b*(f*=d),o=b*(l*=d)-y*h,u=y*f-g*l,(d=Math.hypot(i,o,u))?(i*=d=1/d,o*=d,u*=d):(i=0,o=0,u=0),a=f*u-h*o,s=h*i-l*u,c=l*o-f*i,(d=Math.hypot(a,s,c))?(a*=d=1/d,s*=d,c*=d):(a=0,s=0,c=0),e[0]=i,e[1]=a,e[2]=l,e[3]=0,e[4]=o,e[5]=s,e[6]=f,e[7]=0,e[8]=u,e[9]=c,e[10]=h,e[11]=0,e[12]=-(i*p+o*m+u*v),e[13]=-(a*p+s*m+c*v),e[14]=-(l*p+f*m+h*v),e[15]=1,e)},e.multiply=function(e,t,n){var r=t[0],i=t[1],o=t[2],u=t[3],a=t[4],s=t[5],c=t[6],l=t[7],f=t[8],h=t[9],d=t[10],p=t[11],m=t[12],v=t[13],y=t[14],g=t[15],b=n[0],A=n[1],x=n[2],E=n[3];return e[0]=b*r+A*a+x*f+E*m,e[1]=b*i+A*s+x*h+E*v,e[2]=b*o+A*c+x*d+E*y,e[3]=b*u+A*l+x*p+E*g,b=n[4],A=n[5],x=n[6],E=n[7],e[4]=b*r+A*a+x*f+E*m,e[5]=b*i+A*s+x*h+E*v,e[6]=b*o+A*c+x*d+E*y,e[7]=b*u+A*l+x*p+E*g,b=n[8],A=n[9],x=n[10],E=n[11],e[8]=b*r+A*a+x*f+E*m,e[9]=b*i+A*s+x*h+E*v,e[10]=b*o+A*c+x*d+E*y,e[11]=b*u+A*l+x*p+E*g,b=n[12],A=n[13],x=n[14],E=n[15],e[12]=b*r+A*a+x*f+E*m,e[13]=b*i+A*s+x*h+E*v,e[14]=b*o+A*c+x*d+E*y,e[15]=b*u+A*l+x*p+E*g,e}}(fe||(fe={}));var he=function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function u(e){try{s(r.next(e))}catch(e){o(e)}}function a(e){try{s(r.throw(e))}catch(e){o(e)}}function s(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(u,a)}s((r=r.apply(e,t||[])).next())}))},de=function(e,t){var n,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!(i=u.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=t.call(e,u)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}},pe=function(){return new Map([["localToProjected",{name:"Binding - Camera LocalToProjected",type:r.FLOAT_MAT4,value:new P([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1])}]])};he(void 0,void 0,void 0,(function(){var e,t,n,r,i,o,a,s,d,p,m,y,E,T,M,S,I,C,F,O,_,B,R,N,D,k,j,z,Y,K,G,W,q,Q,Z,$,ee,te;return de(this,(function(re){var ie,oe,ue,ce,me,ve,ye;return e=new se,t=c(),n=document.getElementById("viewer"),r=A("viewer-options"),i=A("viewer-shader-options"),o=A("viewer-content shader-errors"),a=ae("viewer-content"),s=a[0],d=a[1],p=new Map([["positions",{name:"Binding - Mesh positions",type:w.FLOAT_VEC4,value:new P([])}],["colors",{name:"Binding - Mesh colors",type:w.FLOAT_VEC4,value:new P([])}]]),m=pe(),y=new f(d.context),E=new P([]),T={drawMode:"arrays"},M={longitude:1,latitude:1,radius:2},new u(s,(function(){return M}),(function(e){M=e;var t=45*Math.PI/180,n=d.getSize(),r=n.width/n.height,i=fe.create();fe.perspective(i,t,r,.1,100);var o=fe.create(),u=function(e){var t=e.radius*Math.sin(e.latitude),n=e.radius*Math.cos(e.latitude),r=n*Math.cos(e.longitude);return{x:n*Math.sin(e.longitude),y:t,z:r}}(M);fe.lookAt(o,[u.x,u.y,u.z],[0,0,0],[0,1,0]);var a=fe.create();fe.multiply(a,i,o),m.get("localToProjected").value.setValue(a)})),n.appendChild(s),n.appendChild(o),n.appendChild(r),S=function(e){s.style.visibility="canvas"===e?"visible":"collapse",o.style.visibility="errors"===e?"visible":"collapse"},I=function(){e.getShaderDocuments().then((function(e){var n=e.map((function(e){return{id:e.filePath,display:e.fileName}}));j.setItems(n),t.vertexFilePath&&n.some((function(e){return e.id===t.vertexFilePath}))&&j.setSelectedItemById(t.vertexFilePath),K.setItems(n),t.fragmentFilePath&&n.some((function(e){return e.id===t.fragmentFilePath}))&&K.setSelectedItemById(t.fragmentFilePath)}))},B=null,R=function(e){var t=le.get(e),n=t.positions,r=t.colors,i=t.indices;p.get("positions").value.setValue(n),p.get("colors").value.setValue(r),E.setValue(i)},N=function(){i.innerHTML="";var e=d.context;if(_&&O){var t=function(e,t,n){var r=X(e,e.VERTEX_SHADER,t),i=X(e,e.FRAGMENT_SHADER,n),o=void 0;x(r,"error")&&(o=L(r.error,1));var u=void 0;return x(i,"error")&&(u=L(i.error,1)),o||u?[o,u]:J(e,r,i)}(e,O,_);if(Array.isArray(t))S("errors"),o.innerText=function(e){var t=e[0],n=e[1],r=[];return t&&r.push("VERTEX SHADER:",t),n&&r.push("FRAGMENT SHADER:",n),r.join("\r\n")}(t);else{S("canvas");var n=t,r=function(e,t){for(var n=e.getProgramParameter(t,e.ACTIVE_UNIFORMS),r=[],i=0;i<n;++i){var o=e.getActiveUniform(t,i);r.push({name:o.name,type:o.type})}return r}(e,n),u=function(e,t){for(var n=e.getProgramParameter(t,e.ACTIVE_ATTRIBUTES),r=[],i=0;i<n;++i){var o=e.getActiveAttrib(t,i);r.push({name:o.name,type:o.type})}return r}(e,n),a=H(e,n,r,Array.from(m.values()));a.length>0&&i.appendChild(A("viewer-shaders-title",[g("UNIFORMS","").element])),a.forEach((function(e){return i.appendChild(e.component)}));var s=ne(e,n,u,Array.from(p.values()));s.length>0&&i.appendChild(A("viewer-shaders-title",[g("ATTRIBUTE BUFFERS","").element])),s.forEach((function(e){return i.appendChild(e.component)}));var c=a.map((function(e){return e.uniformInfo})),l=s.map((function(e){return e.attributeBufferInfo}));null!==B&&cancelAnimationFrame(B);var f=function(){!function(e,t,n,r){e.useProgram(t),e.viewport(0,0,e.canvas.width,e.canvas.height),e.clearColor(0,0,0,1),e.clearDepth(1),e.enable(e.DEPTH_TEST),e.depthFunc(e.LEQUAL),e.clear(e.COLOR_BUFFER_BIT|e.DEPTH_BUFFER_BIT),n.uniformInfos.forEach((function(e){return e.setUniform()})),n.attributeBufferInfos.forEach((function(e){return e.setAttributeBuffer()}));var i=e.TRIANGLES;if("arrays"===r.drawMode){var o=Math.min.apply(Math,n.attributeBufferInfos.map((function(e){return e.getCount()})));e.drawArrays(i,0,o)}else n.indexBufferInfo.setIndexBuffer(),e.drawElements(i,n.indexBufferInfo.getCount(),e.UNSIGNED_SHORT,0)}(e,n,{uniformInfos:c,attributeBufferInfos:l,indexBufferInfo:y},T),B=requestAnimationFrame(f)};f()}}else S("none")},r.appendChild(A("viewer-shaders-title",[g(h,"").element,(ie="Sync",oe="viewer-refresh-button",ue=I,ce=document.createElement("button"),ce.onclick=ue,ce.className=oe,ce.textContent=ie,{element:ce}).element])),D=v((function(t){return he(void 0,void 0,void 0,(function(){var n;return de(this,(function(r){switch(r.label){case 0:return null==C||C(),t&&(C=e.subscribeToDocumentSave(t.id,(function(e){O=e,N()}))),t?[4,e.getDocumentText(t.id)]:[3,2];case 1:return n=r.sent(),[3,3];case 2:n="",r.label=3;case 3:return O=n,l({vertexFilePath:t?t.id:null}),N(),[2]}}))}))})),k=D[0],(j=D[1]).setSelectedItemById(t.vertexFilePath),r.appendChild(b(k,"Vertex Shader")),z=v((function(t){return he(void 0,void 0,void 0,(function(){var n;return de(this,(function(r){switch(r.label){case 0:return null==F||F(),t&&(F=e.subscribeToDocumentSave(t.id,(function(e){_=e,N()}))),t?[4,e.getDocumentText(t.id)]:[3,2];case 1:return n=r.sent(),[3,3];case 2:n="",r.label=3;case 3:return _=n,l({fragmentFilePath:t?t.id:null}),N(),[2]}}))}))})),Y=z[0],(K=z[1]).setSelectedItemById(t.fragmentFilePath),r.appendChild(b(Y,"Fragment Shader")),r.appendChild(A("viewer-shaders-title",[g("DRAW OPTIONS","").element])),G=v((function(e){e&&(R(e.id),l({meshId:e.id}))})),W=G[0],(q=G[1]).setItems(Array.from(le.entries()).map((function(e){return{id:e[0],display:e[1].display}}))),q.setSelectedItemById(t.meshId),r.appendChild(b(W,"Mesh")),Q=(me=E,ve=function(e){return y.setValue(e)},ye=new P([0,1,2]),V([{id:"custom",display:"Custom",value:ye,element:U(1,ye,!0)},{id:"binding",display:"Binding - Mesh indices",value:me,element:U(1,me,!1)}],ve)).element,Z=b(Q,"Indices"),$=v((function(e){var t,n;e&&(T.drawMode=e.id,t=Z,n="elements"===T.drawMode,t.style.display=n?"inherit":"none",l({drawMode:e.id}))})),ee=$[0],(te=$[1]).setItems([{id:"arrays",display:"Arrays"},{id:"elements",display:"Elements"}]),te.setSelectedItemById(t.drawMode),r.appendChild(b(ee,"Draw mode")),r.appendChild(Z),r.appendChild(i),I(),[2]}))}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvdXRpbHMvd2ViZ2wvdW5pZm9ybS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL3NyYy91dGlscy9jYW1lcmFNYW5pcHVsYXRvci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2NvbW11bmljYXRpb24vdnNjb2RlQXBpLnRzIiwid2VicGFjazovLy8uL3NyYy9jb21tb24vc3RhdGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvdXRpbHMvd2ViZ2wvaW5kZXhCdWZmZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbW1vbi90cmFuc2xhdGlvbnMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvY29tcG9uZW50cy9kcm9wZG93bi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL3NyYy9jb21wb25lbnRzL2hlYWRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL3NyYy9jb21wb25lbnRzL3dyYXBwZXJzLnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvc3JjL3V0aWxzL3R5cGVHdWFyZHMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvdXRpbHMvd2ViZ2wvYXR0cmlidXRlQnVmZmVyLnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvc3JjL3V0aWxzL2NvbXBvc2l0ZUtleU1hcC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL3V1aWQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbW1vbi9hcnJheS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL3NyYy91dGlscy9vYnNlcnZhYmxlLnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvc3JjL2NvbXBvbmVudHMvaGVscGVycy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL3NyYy91dGlscy93ZWJnbC9jb21tb24udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvY29tcG9uZW50cy9pbnB1dFZlY3Rvci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL3NyYy9jb21wb25lbnRzL2lucHV0TWF0cml4LnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvc3JjL3V0aWxzL3dlYmdsL3VuaWZvcm1Db21wb25lbnQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvdXRpbHMvd2ViZ2wvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvdXRpbHMvd2ViZ2wvYXR0cmlidXRlQnVmZmVyQ29tcG9uZW50LnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvc3JjL2NvbXBvbmVudHMvd2ViZ2xDYW52YXMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvdXRpbHMvaHRtbC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2NvbW11bmljYXRpb24vdmlld2VyRW5kcG9pbnQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvbWVzaGVzLnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvc3JjL3V0aWxzL21hdGgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvdXRpbHMvd2ViZ2wvaW5kZXhCdWZmZXJDb21wb25lbnQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvY29tcG9uZW50cy9idXR0b24udHMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJVbmlmb3JtVHlwZSIsImNsYW1wUmFkaXVzIiwicmFkaXVzIiwiTWF0aCIsIm1pbiIsIm1heCIsImVsZW1lbnQiLCJwb3NpdGlvblByb3ZpZGVyIiwib25Qb3NpdGlvbkNoYW5nZSIsInBvaW50ZXJQb3NpdGlvbiIsIngiLCJ5IiwiZXZlbnRMaXN0ZW5lcnMiLCJNYXAiLCJpc01vdmluZyIsImRpc3BhdGNoQWN0aW9uIiwiYWN0aW9uIiwibmV3Vmlld3BvcnQiLCJwb3NpdGlvbiIsInR5cGUiLCJsYXRpdHVkZSIsImRlbHRhTGF0aXR1ZGUiLCJQSSIsImxvbmdpdHVkZSIsImRlbHRhTG9uZ2l0dWRlIiwicmVkdWNlciIsIm9uTW91c2VEb3duIiwiZSIsImJ1dHRvbiIsIm9mZnNldFgiLCJvZmZzZXRZIiwib25Nb3VzZU1vdmUiLCJvbk1vdXNlVXAiLCJvbk1vdXNlTGVhdmUiLCJvbldoZWVsIiwiZGVsdGFZIiwidGhpcyIsInJlZ2lzdGVyRXZlbnQiLCJkaXNwb3NlIiwiZm9yRWFjaCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJoYW5kbGVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsInNldCIsInZzY29kZUFwaSIsImFjcXVpcmVWc0NvZGVBcGkiLCJkZWZhdWx0U3RhdGUiLCJ2ZXJ0ZXhGaWxlUGF0aCIsImZyYWdtZW50RmlsZVBhdGgiLCJkcmF3TW9kZSIsIm1lc2hJZCIsImdldFN0YXRlIiwic2V0U3RhdGUiLCJuZXdTdGF0ZSIsImFzc2lnbiIsImNvbnRleHQiLCJjb3VudCIsImJ1ZmZlciIsImNyZWF0ZUJ1ZmZlciIsInNldFZhbHVlIiwibmV3VmFsdWUiLCJsZW5ndGgiLCJiaW5kQnVmZmVyIiwiRUxFTUVOVF9BUlJBWV9CVUZGRVIiLCJidWZmZXJEYXRhIiwiVWludDE2QXJyYXkiLCJTVEFUSUNfRFJBVyIsInNldEluZGV4QnVmZmVyIiwiZ2V0Q291bnQiLCJkZWxldGVCdWZmZXIiLCJ0cmFuc2xhdGlvbnMiLCJkZWZhdWx0T3B0aW9ucyIsImVtcHR5SXRlbSIsImNyZWF0ZURyb3Bkb3duIiwib25DaGFuZ2UiLCJjbGFzc05hbWUiLCJvcHRpb25zIiwiY29tYmluZWRPcHRpb25zIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2VsZWN0ZWRJdGVtIiwiaXRlbUVsZW1lbnRzIiwic2V0U2VsZWN0ZWRJdGVtIiwiaXRlbSIsIm9uY2hhbmdlIiwiZm91bmRFbGVtZW50IiwiZmluZCIsImlkIiwic2V0U2VsZWN0ZWRJdGVtQnlJZCIsImllIiwic2VsZWN0ZWQiLCJzZXRJdGVtcyIsIml0ZW1zIiwiaW5uZXJIVE1MIiwiZGlzcGxheSIsIm9wdGlvbiIsInRleHRDb250ZW50IiwiYXBwZW5kQ2hpbGQiLCJwdXNoIiwiZ2V0SXRlbXMiLCJtYXAiLCJzZXRTZWxlY3RlZEl0ZW1CeUluZGV4IiwiaW5kZXgiLCJnZXRTZWxlY3RlZEl0ZW0iLCJjbGVhclNlbGVjdGlvbiIsImNyZWF0ZUVsZW1lbnRzRHJvcGRvd24iLCJlbGVtZW50cyIsIm9lIiwiY2xhc3NMaXN0IiwiYWRkIiwicmVtb3ZlIiwib3B0aW9uc0VsZW1lbnQiLCJvcHRpb25zQ29udHJvbGxlciIsImNyZWF0ZVNlY3Rpb25UaXRsZSIsInRleHQiLCJ3aXRoTGFiZWwiLCJ3cmFwcGVyIiwibGFiZWwiLCJjcmVhdGVEaXYiLCJjaGlsZHJlbiIsImRpdiIsImhhc1Byb3BlcnR5Iiwib2JqIiwicHJvcCIsImFzc2VydE5ldmVyIiwiRXJyb3IiLCJKU09OIiwic3RyaW5naWZ5IiwiQXR0cmlidXRlQnVmZmVyVHlwZSIsInByb2dyYW0iLCJhdHRhY2hUb1Byb2dyYW0iLCJsb2NhdGlvbiIsImdldFVuaWZvcm1Mb2NhdGlvbiIsInNldHRlciIsImNyZWF0ZVVuaWZvcm1TZXR0ZXIiLCJzZXRVbmlmb3JtIiwiZ2V0VW5pZm9ybVR5cGUiLCJnZXRVbmlmb3JtTmFtZSIsIkZMT0FUX1ZFQzIiLCJ1bmlmb3JtMmYiLCJGTE9BVF9WRUMzIiwidW5pZm9ybTNmIiwiRkxPQVRfVkVDNCIsInVuaWZvcm00ZiIsIkZMT0FUX01BVDQiLCJ1bmlmb3JtTWF0cml4NGZ2Iiwia2V5U2VsZWN0b3IiLCJoYXMiLCJlbnRyaWVzU3RyS2V5IiwiQXJyYXkiLCJmcm9tIiwiZW50cmllcyIsImRlbGV0ZVN0cktleSIsImRlbGV0ZSIsImNsZWFyIiwidXVpZHY0IiwicmVwbGFjZSIsInJhbmRvbSIsInRvU3RyaW5nIiwiYXJyYXkiLCJpbmRleE9mIiwic3BsaWNlIiwicmVtb3ZlTGFzdCIsInN1YnN0cmluZyIsIm9ic2VydmVycyIsImF0dGFjaCIsIm9ic2VydmVyIiwiZGV0YWNoIiwiZGV0YWNoQWxsIiwibm90aWZ5IiwiZ2V0VmFsdWUiLCJmb3JjZU5vdGlmeSIsImNyZWF0ZU11bHRpTnVtYmVySW5wdXQiLCJyb3dzIiwiY29sdW1ucyIsImlucHV0R3JpZCIsImdldFZhbHVlcyIsInJvdyIsImlucHV0Um93IiwiY29sdW1uIiwiaW5wdXQiLCJpdGVtRWxlbWVudCIsImRpc2FibGVkIiwib25pbnB1dCIsIk51bWJlciIsImNvbnNvbGUiLCJsb2ciLCJzZXRWYWx1ZXMiLCJuZXdWYWx1ZXMiLCJzZXRSZWFkb25seSIsInJlYWRvbmx5IiwicmVhZE9ubHkiLCJjcmVhdGVFbGVtZW50Tm90U3VwcG9ydGVkIiwiaW5uZXJUZXh0IiwiY3JlYXRlU2VsZWN0aW9uQ29tcG9uZW50IiwiY2FsbGJhY2siLCJjcmVhdGVFbGVtZW50VmVjdG9yIiwic2l6ZSIsImVkaXRhYmxlIiwidiIsImN1c3RvbUVsZW1lbnQiLCJjdXN0b21Db250cm9sbGVyIiwiY3JlYXRlRWxlbWVudE1hdHJpeCIsImNyZWF0ZU1hdHJpeCIsInVuZGVmaW5lZCIsImNyZWF0ZUVsZW1lbnRBcnJheSIsIml0ZW1TaXplIiwicmVzdWx0IiwicGFyc2UiLCJpc0FycmF5IiwiZXZlcnkiLCJlcnJvciIsInVuaWZvcm1Db21wb25lbnRDYWNoZSIsIkNvbXBvc2l0ZUtleU1hcCIsImNyZWF0ZVVuaWZvcm1Db21wb25lbnRzIiwidW5pZm9ybXMiLCJ1bmlmb3JtQmluZGluZ3MiLCJuZXdWYWx1ZXNTdHJLZXlzIiwiY29tcG9uZW50cyIsInVuaWZvcm0iLCJmcm9tQ2FjaGUiLCJ1bmlmb3JtSW5mbyIsIlVuaWZvcm1JbmZvIiwiYXBwbGljYWJsZUJpbmRpbmdzIiwiZmlsdGVyIiwiYiIsInVwZGF0ZVVuaWZvcm0iLCJjcmVhdGVDdXN0b21PcHRpb24iLCJjcmVhdGVCaW5kaW5nT3B0aW9ucyIsImNyZWF0ZUVkaXRhYmxlQ29tcG9uZW50IiwiY29tcG9uZW50IiwiaW5jbHVkZXMiLCJudyIsInVjIiwiYmluZGluZyIsImNyZWF0ZUVsZW1lbnRGb3JUeXBlIiwiaW5pdGlhbFZhbHVlIiwiZ2V0RGVmYXVsdFZhbHVlIiwiY3VzdG9tVmFsdWUiLCJ1bmlmb3JtVHlwZSIsImN1cnJlbnRWYWx1ZSIsImNvbXBpbGVTaGFkZXIiLCJyZW5kZXJpbmdDb250ZXh0Iiwic291cmNlIiwic2hhZGVyIiwiY3JlYXRlU2hhZGVyIiwic2hhZGVyU291cmNlIiwiZ2V0U2hhZGVyUGFyYW1ldGVyIiwiQ09NUElMRV9TVEFUVVMiLCJnZXRTaGFkZXJJbmZvTG9nIiwiZGVsZXRlU2hhZGVyIiwiY3JlYXRlUHJvZ3JhbSIsInZlcnRleFNoYWRlciIsImZyYWdtZW50U2hhZGVyIiwiYXR0YWNoU2hhZGVyIiwibGlua1Byb2dyYW0iLCJnZXRQcm9ncmFtUGFyYW1ldGVyIiwiTElOS19TVEFUVVMiLCJkZWxldGVQcm9ncmFtIiwiZ2V0UHJvZ3JhbUluZm9Mb2ciLCJnZXRBdHRyaWJMb2NhdGlvbiIsIkFSUkFZX0JVRkZFUiIsImZsYXR0ZW4iLCJjb25jYXQiLCJGbG9hdDMyQXJyYXkiLCJzZXRBdHRyaWJ1dGVCdWZmZXIiLCJlbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSIsImdldE51bUNvbXBvbmVudHMiLCJGTE9BVCIsInZlcnRleEF0dHJpYlBvaW50ZXIiLCJnZXRBdHRyaWJ1dGVCdWZmZXJUeXBlIiwiYnVmZmVyVHlwZSIsImNvbXBvbmVudENhY2hlIiwiY3JlYXRlQXR0cmlidXRlQnVmZmVyQ29tcG9uZW50cyIsImF0dHJpYnV0ZUJ1ZmZlcnMiLCJhdHRyaWJ1dGVCdWZmZXJCaW5kaW5ncyIsImF0dHJpYnV0ZUJ1ZmZlciIsImF0dHJpYnV0ZUJ1ZmZlckluZm8iLCJBdHRyaWJ1dGVCdWZmZXJJbmZvIiwidXBkYXRlQnVmZmVyIiwiYXR0cmlidXRlQnVmZmVyVHlwZSIsImNyZWF0ZVdlYkdMQ2FudmFzIiwiY2FudmFzIiwiZ2V0Q29udGV4dCIsIndpZHRoIiwiaGVpZ2h0IiwicmVjdCIsIlJlc2l6ZU9ic2VydmVyIiwib2JzZXJ2ZXJFbnRyeSIsInRhcmdldCIsImRvbVJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJvYnNlcnZlIiwiZ2V0U2l6ZSIsIndpbmRvdyIsImV2ZW50IiwibGlzdGVuZXIiLCJkYXRhIiwiZ2V0U2hhZGVyRG9jdW1lbnRzIiwibWVzc2FnZUlkIiwicG9zdE1lc3NhZ2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsIm1lc3NhZ2UiLCJwYXlsb2FkIiwiZmlsZXMiLCJyZW1vdmVMaXN0ZW5lciIsImdldERvY3VtZW50VGV4dCIsImZpbGVOYW1lIiwic3Vic2NyaWJlVG9Eb2N1bWVudFNhdmUiLCJmaWxlUGF0aCIsInJlcGVhdDRUaW1lcyIsIm1lc2hlcyIsInBvc2l0aW9ucyIsImNvbG9ycyIsImluZGljZXMiLCJtYXQ0Iiwib3V0IiwicGVyc3BlY3RpdmUiLCJmb3Z5IiwiYXNwZWN0IiwibmVhciIsImZhciIsIm5mIiwiZiIsInRhbiIsIkluZmluaXR5IiwibG9va0F0IiwiZXllIiwiY2VudGVyIiwidXAiLCJ4MCIsIngxIiwieDIiLCJ5MCIsInkxIiwieTIiLCJ6MCIsInoxIiwiejIiLCJsZW4iLCJleWV4IiwiZXlleSIsImV5ZXoiLCJ1cHgiLCJ1cHkiLCJ1cHoiLCJjZW50ZXJ4IiwiY2VudGVyeSIsImNlbnRlcnoiLCJhYnMiLCJpZGVudGl0eTMiLCJoeXBvdCIsIm11bHRpcGx5IiwiYSIsImEwMCIsImEwMSIsImEwMiIsImEwMyIsImExMCIsImExMSIsImExMiIsImExMyIsImEyMCIsImEyMSIsImEyMiIsImEyMyIsImEzMCIsImEzMSIsImEzMiIsImEzMyIsImIwIiwiYjEiLCJiMiIsImIzIiwiY3JlYXRlVW5pZm9ybUJpbmRpbmdzIiwib25DbGljayIsImluZGV4QnVmZmVyQmluZGluZyIsImN1c3RvbUluZGljZXNWYWx1ZSIsInZpZXdlckVuZHBvaW50Iiwidmlld2VyU3RhdGUiLCJ2aWV3ZXIiLCJnZXRFbGVtZW50QnlJZCIsInZpZXdlck9wdGlvbnMiLCJzaGFkZXJPcHRpb25zIiwic2hhZGVyQ29tcGlsYXRpb25FcnJvcnMiLCJ3ZWJHTENhbnZhcyIsIndlYkdMQ29udHJvbGxlciIsIm1lc2hCaW5kaW5ncyIsImluZGV4QnVmZmVySW5mbyIsIkluZGV4QnVmZmVySW5mbyIsImluZGV4QnVmZmVyQmluZGluZ1ZhbHVlIiwiZHJhd09wdGlvbnMiLCJjYW1lcmFQb3NpdGlvbiIsIkNhbWVyYVBvc2l0aW9uTWFuaXB1bGF0b3IiLCJuZXdQb3NpdGlvbiIsImZpZWxkT2ZWaWV3IiwicHJvamVjdGlvbk1hdHJpeCIsIm1vZGVsVmlld01hdHJpeCIsInZlYyIsInNpbiIsImNvcyIsInoiLCJjYW1lcmFQb3NpdGlvblRvVmVjdG9yMyIsInJlcyIsInNob3dDb250ZW50IiwiY29udGVudCIsInN0eWxlIiwidmlzaWJpbGl0eSIsInN5bmNTaGFkZXJEb2N1bWVudHMiLCJ0aGVuIiwic2QiLCJ2ZXJ0ZXhEcm9wZG93bkNvbnRyb2xsZXIiLCJzb21lIiwiZnJhZ21lbnREcm9wZG93bkNvbnRyb2xsZXIiLCJhbmltYXRpb25GcmFtZUhhbmRsZSIsIm9uTWVzaENoYW5nZWQiLCJvblNoYWRlckNvbnRlbnRDaGFuZ2VkIiwic2VsZWN0ZWRGcmFnbWVudENvbnRlbnQiLCJzZWxlY3RlZFZlcnRleENvbnRlbnQiLCJ2ZXJ0ZXhTaGFkZXJDb250ZW50IiwiZnJhZ21lbnRTaGFkZXJDb250ZW50IiwiVkVSVEVYX1NIQURFUiIsIkZSQUdNRU5UX1NIQURFUiIsInZlcnRleEVycm9yIiwiZnJhZ21lbnRFcnJvciIsImNvbXBpbGVTaGFkZXJzRnJvbVNvdXJjZSIsInZlcnRleFNoYWRlckVycm9ycyIsImZyYWdtZW50U2hhZGVyRXJyb3JzIiwiZXJyb3JzIiwiam9pbiIsImZvcm1hdFNoYWRlckNvbXBpbGVFcnJvcnMiLCJwcm9ncmFtVW5pZm9ybXMiLCJudW1Vbmlmb3JtcyIsIkFDVElWRV9VTklGT1JNUyIsImdldEFjdGl2ZVVuaWZvcm0iLCJnZXRQcm9ncmFtVW5pZm9ybXMiLCJwcm9ncmFtQXR0cmlidXRlQnVmZmVycyIsIm51bUF0dHJpYnV0ZUJ1ZmZlcnMiLCJBQ1RJVkVfQVRUUklCVVRFUyIsImdldEFjdGl2ZUF0dHJpYiIsImdldFByb2dyYW1BdHRyaWJ1dGVCdWZmZXJzIiwidW5pZm9ybUNvbXBvbmVudHMiLCJ2YWx1ZXMiLCJhdHRyaWJ1dGVCdWZmZXJDb21wb25lbnRzIiwiYWIiLCJhYmMiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInJlbmRlckluZm8iLCJ1c2VQcm9ncmFtIiwidmlld3BvcnQiLCJjbGVhckNvbG9yIiwiY2xlYXJEZXB0aCIsImVuYWJsZSIsIkRFUFRIX1RFU1QiLCJkZXB0aEZ1bmMiLCJMRVFVQUwiLCJDT0xPUl9CVUZGRVJfQklUIiwiREVQVEhfQlVGRkVSX0JJVCIsInVuaWZvcm1JbmZvcyIsInUiLCJhdHRyaWJ1dGVCdWZmZXJJbmZvcyIsInByaW1pdGl2ZVR5cGUiLCJUUklBTkdMRVMiLCJudW1FbGVtZW50cyIsImRyYXdBcnJheXMiLCJkcmF3RWxlbWVudHMiLCJVTlNJR05FRF9TSE9SVCIsInJlbmRlclByb2dyYW0iLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJvbmNsaWNrIiwibmV3VmVydGV4Iiwic2VsZWN0ZWRWZXJ0ZXhGaWxlV2F0Y2hlclVuc3Vic2NyaWJlIiwibmV3Q29udGVudCIsInZlcnRleERyb3Bkb3duRWxlbWVudCIsIm5ld0ZyYWdtZW50Iiwic2VsZWN0ZWRGcmFnbWVudEZpbGVXYXRjaGVyVW5zdWJzY3JpYmUiLCJmcmFnbWVudERyb3Bkb3duRWxlbWVudCIsIm1lc2hEcm9wZG93bkVsZW1lbnQiLCJtZXNoRHJvcGRvd25Db250cm9sbGVyIiwiaW5kZXhCdWZmZXJFbGVtZW50IiwiaW5kZXhCdWZmZXJDb21wb25lbnQiLCJ2aXNpYmxlIiwiZHJhd01vZGVFbGVtZW50IiwiZHJhd01vZGVDb250cm9sbGVyIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlYixFQUFTaUIsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEUCxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sS0FRdkRyQixFQUFvQnNCLEVBQUksU0FBU0QsRUFBT0UsR0FFdkMsR0FEVSxFQUFQQSxJQUFVRixFQUFRckIsRUFBb0JxQixJQUMvQixFQUFQRSxFQUFVLE9BQU9GLEVBQ3BCLEdBQVcsRUFBUEUs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Y0FFckRwRyxFQUFjOVIsWUFBWWdZLEdBRTFCbEcsRUFBYzlSLFlBQVkrUixHQUUxQnlCLEkiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsImltcG9ydCB7XHJcbiAgTWF0cml4NEFycmF5LFxyXG4gIFZlY3RvcjJBcnJheSxcclxuICBWZWN0b3IzQXJyYXksXHJcbiAgVmVjdG9yNEFycmF5LFxyXG59IGZyb20gXCIuLi8uLi90eXBlc1wiO1xyXG5pbXBvcnQgeyBhc3NlcnROZXZlciB9IGZyb20gXCIuLi90eXBlR3VhcmRzXCI7XHJcblxyXG5leHBvcnQgZW51bSBVbmlmb3JtVHlwZSB7XHJcbiAgRkxPQVRfVkVDMiA9IDM1NjY0LFxyXG4gIEZMT0FUX1ZFQzMgPSAzNTY2NSxcclxuICBGTE9BVF9WRUM0ID0gMzU2NjYsXHJcbiAgRkxPQVRfTUFUNCA9IDM1Njc2LFxyXG4gIC8vU0FNUExFUl8yRCA9IDM1Njc4LFxyXG59XHJcblxyXG4vLzUxMjAgKEJZVEUpLCA1MTIxIChVTlNJR05FRF9CWVRFKSwgNTEyMiAoU0hPUlQpLCA1MTIzIChVTlNJR05FRF9TSE9SVCksIDUxMjQgKElOVCksXHJcbi8vIDUxMjUgKFVOU0lHTkVEX0lOVCksIDUxMjYgKEZMT0FUKSwgMzU2NjQgKEZMT0FUX1ZFQzIpLFxyXG4vLyAsIDM1NjY3IChJTlRfVkVDMiksIDM1NjY4IChJTlRfVkVDMyksIDM1NjY5IChJTlRfVkVDNCksIDM1NjcwIChCT09MKSwgMzU2NzEgKEJPT0xfVkVDMiksIDM1NjcyIChCT09MX1ZFQzMpLCAzNTY3MyAoQk9PTF9WRUM0KSwgMzU2NzQgKEZMT0FUX01BVDIpLCAzNTY3NSAoRkxPQVRfTUFUMyksXHJcblxyXG5leHBvcnQgY2xhc3MgVW5pZm9ybUluZm88VCA9IGFueT4ge1xyXG4gIHByaXZhdGUgdmFsdWU6IFQgfCBudWxsO1xyXG4gIHByaXZhdGUgc2V0dGVyOiAodmFsdWU6IFQpID0+IHZvaWQ7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBjb250ZXh0OiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsXHJcbiAgICBwcm9ncmFtOiBXZWJHTFByb2dyYW0sXHJcbiAgICBwcml2YXRlIG5hbWU6IHN0cmluZyxcclxuICAgIHByaXZhdGUgdHlwZTogVW5pZm9ybVR5cGVcclxuICApIHtcclxuICAgIHRoaXMuYXR0YWNoVG9Qcm9ncmFtKHByb2dyYW0pO1xyXG4gIH1cclxuXHJcbiAgYXR0YWNoVG9Qcm9ncmFtKHByb2dyYW06IFdlYkdMUHJvZ3JhbSkge1xyXG4gICAgY29uc3QgbG9jYXRpb24gPSB0aGlzLmNvbnRleHQuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sIHRoaXMubmFtZSk7XHJcbiAgICB0aGlzLnNldHRlciA9IGNyZWF0ZVVuaWZvcm1TZXR0ZXIodGhpcy50eXBlLCB0aGlzLmNvbnRleHQsIGxvY2F0aW9uKTtcclxuICB9XHJcblxyXG4gIHNldFZhbHVlKG5ld1ZhbHVlOiBUKSB7XHJcbiAgICB0aGlzLnZhbHVlID0gbmV3VmFsdWU7XHJcbiAgfVxyXG5cclxuICBzZXRVbmlmb3JtKCkge1xyXG4gICAgaWYgKHRoaXMudmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgdGhpcy5zZXR0ZXIodGhpcy52YWx1ZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXRVbmlmb3JtVHlwZSgpIHtcclxuICAgIHJldHVybiB0aGlzLnR5cGU7XHJcbiAgfVxyXG5cclxuICBnZXRVbmlmb3JtTmFtZSgpIHtcclxuICAgIHJldHVybiB0aGlzLm5hbWU7XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge31cclxufVxyXG5cclxuY29uc3QgY3JlYXRlVW5pZm9ybVNldHRlciA9IChcclxuICB0eXBlOiBVbmlmb3JtVHlwZSxcclxuICBjb250ZXh0OiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsXHJcbiAgbG9jYXRpb246IFdlYkdMVW5pZm9ybUxvY2F0aW9uXHJcbik6ICgodmFsdWU6IGFueSkgPT4gdm9pZCkgPT4ge1xyXG4gIHN3aXRjaCAodHlwZSkge1xyXG4gICAgY2FzZSBVbmlmb3JtVHlwZS5GTE9BVF9WRUMyOlxyXG4gICAgICByZXR1cm4gKHZhbHVlOiBWZWN0b3IyQXJyYXkpID0+IGNvbnRleHQudW5pZm9ybTJmKGxvY2F0aW9uLCAuLi52YWx1ZSk7XHJcbiAgICBjYXNlIFVuaWZvcm1UeXBlLkZMT0FUX1ZFQzM6XHJcbiAgICAgIHJldHVybiAodmFsdWU6IFZlY3RvcjNBcnJheSkgPT4gY29udGV4dC51bmlmb3JtM2YobG9jYXRpb24sIC4uLnZhbHVlKTtcclxuICAgIGNhc2UgVW5pZm9ybVR5cGUuRkxPQVRfVkVDNDpcclxuICAgICAgcmV0dXJuICh2YWx1ZTogVmVjdG9yNEFycmF5KSA9PiBjb250ZXh0LnVuaWZvcm00Zihsb2NhdGlvbiwgLi4udmFsdWUpO1xyXG4gICAgY2FzZSBVbmlmb3JtVHlwZS5GTE9BVF9NQVQ0OlxyXG4gICAgICByZXR1cm4gKHZhbHVlOiBNYXRyaXg0QXJyYXkpID0+XHJcbiAgICAgICAgY29udGV4dC51bmlmb3JtTWF0cml4NGZ2KGxvY2F0aW9uLCBmYWxzZSwgdmFsdWUpO1xyXG4gICAgLy9jYXNlIFVuaWZvcm1UeXBlLlNBTVBMRVJfMkQ6XHJcbiAgICAvLyAgICAgIHJldHVybiAodmFsdWU6IHsgc2xvdDogbnVtYmVyOyB0ZXh0dXJlRGF0YTogYm9vbGVhbiB9KSA9PiB7XHJcbiAgICAvL2NvbnRleHQudGV4aSh2YWx1ZS5zbG90KTtcclxuICAgIC8vICAgIH07XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICBhc3NlcnROZXZlcih0eXBlKTtcclxuICB9XHJcbn07XHJcbiIsImltcG9ydCB7IFZlY3RvcjMgfSBmcm9tIFwiLi4vdHlwZXNcIjtcclxuXHJcbnR5cGUgRXZlbnRUeXBlID0ga2V5b2YgSFRNTEVsZW1lbnRFdmVudE1hcDtcclxudHlwZSBFdmVudEhhbmRsZXI8VCBleHRlbmRzIEV2ZW50PiA9IChldmVudDogVCkgPT4gdm9pZDtcclxuXHJcbmV4cG9ydCBjb25zdCBjYW1lcmFQb3NpdGlvblRvVmVjdG9yMyA9IChcclxuICBjYW1lcmFQb3NpdGlvbjogQ2FtZXJhUG9zaXRpb25cclxuKTogVmVjdG9yMyA9PiB7XHJcbiAgY29uc3QgeSA9IGNhbWVyYVBvc2l0aW9uLnJhZGl1cyAqIE1hdGguc2luKGNhbWVyYVBvc2l0aW9uLmxhdGl0dWRlKTtcclxuICBjb25zdCByID0gY2FtZXJhUG9zaXRpb24ucmFkaXVzICogTWF0aC5jb3MoY2FtZXJhUG9zaXRpb24ubGF0aXR1ZGUpO1xyXG4gIGNvbnN0IHogPSByICogTWF0aC5jb3MoY2FtZXJhUG9zaXRpb24ubG9uZ2l0dWRlKTtcclxuICBjb25zdCB4ID0gciAqIE1hdGguc2luKGNhbWVyYVBvc2l0aW9uLmxvbmdpdHVkZSk7XHJcbiAgcmV0dXJuIHsgeCwgeSwgeiB9O1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgQ2FtZXJhUG9zaXRpb24gPSB7XHJcbiAgbGF0aXR1ZGU6IG51bWJlcjtcclxuICBsb25naXR1ZGU6IG51bWJlcjtcclxuICByYWRpdXM6IG51bWJlcjtcclxufTtcclxuXHJcbnR5cGUgQWN0aW9uID1cclxuICB8IHtcclxuICAgICAgdHlwZTogXCJvcmJpdFJvdGF0ZVwiO1xyXG4gICAgICBkZWx0YUxhdGl0dWRlOiBudW1iZXI7XHJcbiAgICAgIGRlbHRhTG9uZ2l0dWRlOiBudW1iZXI7XHJcbiAgICB9XHJcbiAgfCB7IHR5cGU6IFwiem9vbUluQXRcIiB9XHJcbiAgfCB7IHR5cGU6IFwiem9vbU91dEF0XCIgfTtcclxuXHJcbmNvbnN0IGNsYW1wTGF0aXR1ZGUgPSAobGF0aXR1ZGU6IG51bWJlcikgPT4ge1xyXG4gIHJldHVybiBNYXRoLm1pbihcclxuICAgIE1hdGgubWF4KGxhdGl0dWRlLCAtTWF0aC5QSSAvIDIuMCArIDAuMSksXHJcbiAgICBNYXRoLlBJIC8gMi4wIC0gMC4xXHJcbiAgKTtcclxufTtcclxuXHJcbmNvbnN0IGNsYW1wTG9uZ2l0dWRlID0gKGxvbmdpdHVkZTogbnVtYmVyKSA9PiB7XHJcbiAgaWYgKGxvbmdpdHVkZSA+IE1hdGguUEkpIHJldHVybiBsb25naXR1ZGUgLSBNYXRoLlBJICogMi4wO1xyXG4gIGVsc2UgaWYgKGxvbmdpdHVkZSA8IC1NYXRoLlBJKSByZXR1cm4gbG9uZ2l0dWRlICsgTWF0aC5QSSAqIDIuMDtcclxuICBlbHNlIHJldHVybiBsb25naXR1ZGU7XHJcbn07XHJcblxyXG5jb25zdCBjbGFtcFJhZGl1cyA9IChyYWRpdXM6IG51bWJlcikgPT4ge1xyXG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChyYWRpdXMsIDEpLCAxMCk7XHJcbn07XHJcblxyXG5jb25zdCByZWR1Y2VyID0gKHBvc2l0aW9uOiBDYW1lcmFQb3NpdGlvbiwgYWN0aW9uOiBBY3Rpb24pOiBDYW1lcmFQb3NpdGlvbiA9PiB7XHJcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xyXG4gICAgY2FzZSBcIm9yYml0Um90YXRlXCI6IHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICAuLi5wb3NpdGlvbixcclxuICAgICAgICBsYXRpdHVkZTogY2xhbXBMYXRpdHVkZShwb3NpdGlvbi5sYXRpdHVkZSArIGFjdGlvbi5kZWx0YUxhdGl0dWRlKSxcclxuICAgICAgICBsb25naXR1ZGU6IGNsYW1wTG9uZ2l0dWRlKHBvc2l0aW9uLmxvbmdpdHVkZSArIGFjdGlvbi5kZWx0YUxvbmdpdHVkZSksXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgICBjYXNlIFwiem9vbUluQXRcIjoge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIC4uLnBvc2l0aW9uLFxyXG4gICAgICAgIHJhZGl1czogY2xhbXBSYWRpdXMocG9zaXRpb24ucmFkaXVzIC0gMC4xKSxcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIGNhc2UgXCJ6b29tT3V0QXRcIjoge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIC4uLnBvc2l0aW9uLFxyXG4gICAgICAgIHJhZGl1czogY2xhbXBSYWRpdXMocG9zaXRpb24ucmFkaXVzICsgMC4xKSxcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJldHVybiBwb3NpdGlvbjtcclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgY2xhc3MgQ2FtZXJhUG9zaXRpb25NYW5pcHVsYXRvciB7XHJcbiAgcHJpdmF0ZSBwb2ludGVyUG9zaXRpb24gPSB7IHg6IDAsIHk6IDAgfTtcclxuICBldmVudExpc3RlbmVycyA9IG5ldyBNYXA8c3RyaW5nLCBFdmVudEhhbmRsZXI8RXZlbnQ+PigpO1xyXG4gIHByaXZhdGUgaXNNb3ZpbmcgPSBmYWxzZTtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcm90ZWN0ZWQgZWxlbWVudDogSFRNTEVsZW1lbnQsXHJcbiAgICBwcml2YXRlIHBvc2l0aW9uUHJvdmlkZXI6ICgpID0+IENhbWVyYVBvc2l0aW9uLFxyXG4gICAgcHJpdmF0ZSBvblBvc2l0aW9uQ2hhbmdlOiAobmV3UG9zaXRpb246IENhbWVyYVBvc2l0aW9uKSA9PiB2b2lkXHJcbiAgKSB7XHJcbiAgICB0aGlzLnJlZ2lzdGVyRXZlbnQoXCJtb3VzZWRvd25cIiwgdGhpcy5vbk1vdXNlRG93bik7XHJcbiAgICB0aGlzLnJlZ2lzdGVyRXZlbnQoXCJtb3VzZW1vdmVcIiwgdGhpcy5vbk1vdXNlTW92ZSk7XHJcbiAgICB0aGlzLnJlZ2lzdGVyRXZlbnQoXCJtb3VzZXVwXCIsIHRoaXMub25Nb3VzZVVwKTtcclxuICAgIHRoaXMucmVnaXN0ZXJFdmVudChcIm1vdXNlbGVhdmVcIiwgdGhpcy5vbk1vdXNlTGVhdmUpO1xyXG4gICAgdGhpcy5yZWdpc3RlckV2ZW50KFwid2hlZWxcIiwgdGhpcy5vbldoZWVsKTtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICB0aGlzLmV2ZW50TGlzdGVuZXJzLmZvckVhY2goKHZhbHVlLCBrZXkpID0+XHJcbiAgICAgIHRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGtleSwgdmFsdWUpXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSByZWdpc3RlckV2ZW50PFQgZXh0ZW5kcyBFdmVudD4oXHJcbiAgICB0eXBlOiBFdmVudFR5cGUsXHJcbiAgICBoYW5kbGVyOiBFdmVudEhhbmRsZXI8VD5cclxuICApIHtcclxuICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGhhbmRsZXIpO1xyXG4gICAgdGhpcy5ldmVudExpc3RlbmVycy5zZXQodHlwZSwgaGFuZGxlciBhcyBFdmVudEhhbmRsZXI8RXZlbnQ+KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZGlzcGF0Y2hBY3Rpb24gPSAoYWN0aW9uOiBBY3Rpb24pID0+IHtcclxuICAgIGNvbnN0IG5ld1ZpZXdwb3J0ID0gcmVkdWNlcih0aGlzLnBvc2l0aW9uUHJvdmlkZXIoKSwgYWN0aW9uKTtcclxuICAgIHRoaXMub25Qb3NpdGlvbkNoYW5nZShuZXdWaWV3cG9ydCk7XHJcbiAgfTtcclxuXHJcbiAgcHJpdmF0ZSBvbk1vdXNlRG93biA9IChlOiBNb3VzZUV2ZW50KSA9PiB7XHJcbiAgICBpZiAoZS5idXR0b24gPT09IDApIHtcclxuICAgICAgdGhpcy5wb2ludGVyUG9zaXRpb24gPSB7IHg6IGUub2Zmc2V0WCwgeTogZS5vZmZzZXRZIH07XHJcbiAgICAgIHRoaXMuaXNNb3ZpbmcgPSB0cnVlO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHByaXZhdGUgb25Nb3VzZU1vdmUgPSAoZTogTW91c2VFdmVudCkgPT4ge1xyXG4gICAgaWYgKHRoaXMuaXNNb3ZpbmcpIHtcclxuICAgICAgY29uc3QgbXVsdGlwbGllciA9IDAuMDE7XHJcbiAgICAgIHRoaXMuZGlzcGF0Y2hBY3Rpb24oe1xyXG4gICAgICAgIHR5cGU6IFwib3JiaXRSb3RhdGVcIixcclxuICAgICAgICBkZWx0YUxvbmdpdHVkZTogLShlLm9mZnNldFggLSB0aGlzLnBvaW50ZXJQb3NpdGlvbi54KSAqIG11bHRpcGxpZXIsXHJcbiAgICAgICAgZGVsdGFMYXRpdHVkZTogKGUub2Zmc2V0WSAtIHRoaXMucG9pbnRlclBvc2l0aW9uLnkpICogbXVsdGlwbGllcixcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5wb2ludGVyUG9zaXRpb24gPSB7IHg6IGUub2Zmc2V0WCwgeTogZS5vZmZzZXRZIH07XHJcbiAgfTtcclxuXHJcbiAgcHJpdmF0ZSBvbk1vdXNlVXAgPSAoKSA9PiB7XHJcbiAgICB0aGlzLmlzTW92aW5nID0gZmFsc2U7XHJcbiAgfTtcclxuXHJcbiAgcHJpdmF0ZSBvbk1vdXNlTGVhdmUgPSAoKSA9PiB7XHJcbiAgICB0aGlzLmlzTW92aW5nID0gZmFsc2U7XHJcbiAgfTtcclxuXHJcbiAgcHJpdmF0ZSBvbldoZWVsID0gKGU6IFdoZWVsRXZlbnQpID0+IHtcclxuICAgIGNvbnN0IGFjdGlvbiA9IGUuZGVsdGFZIDwgMCA/IFwiem9vbUluQXRcIiA6IFwiem9vbU91dEF0XCI7XHJcblxyXG4gICAgdGhpcy5kaXNwYXRjaEFjdGlvbih7XHJcbiAgICAgIHR5cGU6IGFjdGlvbixcclxuICAgIH0pO1xyXG4gIH07XHJcbn1cclxuIiwiaW1wb3J0IHsgTWVzc2FnZVJlcXVlc3QgfSBmcm9tIFwiLi9tZXNzYWdlc1wiO1xyXG5cclxuZGVjbGFyZSBjb25zdCBhY3F1aXJlVnNDb2RlQXBpOiAoKSA9PiB7XHJcbiAgZ2V0U3RhdGU6ICgpID0+IGFueTtcclxuICBzZXRTdGF0ZTogKHN0YXRlOiBhbnkpID0+IHZvaWQ7XHJcbiAgcG9zdE1lc3NhZ2U6IChtZXNzYWdlOiBNZXNzYWdlUmVxdWVzdCkgPT4gdm9pZDtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCB2c2NvZGVBcGkgPSBhY3F1aXJlVnNDb2RlQXBpKCk7XHJcbiIsImltcG9ydCB7IHZzY29kZUFwaSB9IGZyb20gXCIuL2NvbW11bmljYXRpb24vdnNjb2RlQXBpXCI7XHJcblxyXG50eXBlIFN0YXRlID0ge1xyXG4gIHZlcnRleEZpbGVQYXRoOiBzdHJpbmcgfCBudWxsO1xyXG4gIGZyYWdtZW50RmlsZVBhdGg6IHN0cmluZyB8IG51bGw7XHJcbiAgZHJhd01vZGU6IHN0cmluZztcclxuICBtZXNoSWQ6IHN0cmluZztcclxufTtcclxuXHJcbmNvbnN0IGRlZmF1bHRTdGF0ZTogU3RhdGUgPSB7XHJcbiAgdmVydGV4RmlsZVBhdGg6IG51bGwsXHJcbiAgZnJhZ21lbnRGaWxlUGF0aDogbnVsbCxcclxuICBkcmF3TW9kZTogXCJlbGVtZW50c1wiLFxyXG4gIG1lc2hJZDogXCJjdWJlXCIsXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0U3RhdGUgPSAoKTogU3RhdGUgPT4gdnNjb2RlQXBpLmdldFN0YXRlKCkgPz8gZGVmYXVsdFN0YXRlO1xyXG5leHBvcnQgY29uc3Qgc2V0U3RhdGUgPSAobmV3U3RhdGU6IFBhcnRpYWw8U3RhdGU+KSA9PlxyXG4gIHZzY29kZUFwaS5zZXRTdGF0ZShPYmplY3QuYXNzaWduKGdldFN0YXRlKCksIG5ld1N0YXRlKSk7XHJcbiIsImV4cG9ydCBjbGFzcyBJbmRleEJ1ZmZlckluZm8ge1xyXG4gIHByaXZhdGUgYnVmZmVyOiBXZWJHTEJ1ZmZlciB8IG51bGw7XHJcbiAgcHJpdmF0ZSBjb3VudDogbnVtYmVyID0gMDtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjb250ZXh0OiBXZWJHTFJlbmRlcmluZ0NvbnRleHQpIHtcclxuICAgIHRoaXMuYnVmZmVyID0gY29udGV4dC5jcmVhdGVCdWZmZXIoKTtcclxuICB9XHJcblxyXG4gIHNldFZhbHVlKG5ld1ZhbHVlOiBudW1iZXJbXSkge1xyXG4gICAgdGhpcy5jb3VudCA9IG5ld1ZhbHVlLmxlbmd0aDtcclxuICAgIHRoaXMuY29udGV4dC5iaW5kQnVmZmVyKHRoaXMuY29udGV4dC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgdGhpcy5idWZmZXIpO1xyXG4gICAgdGhpcy5jb250ZXh0LmJ1ZmZlckRhdGEoXHJcbiAgICAgIHRoaXMuY29udGV4dC5FTEVNRU5UX0FSUkFZX0JVRkZFUixcclxuICAgICAgbmV3IFVpbnQxNkFycmF5KG5ld1ZhbHVlKSxcclxuICAgICAgdGhpcy5jb250ZXh0LlNUQVRJQ19EUkFXXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgc2V0SW5kZXhCdWZmZXIoKSB7XHJcbiAgICB0aGlzLmNvbnRleHQuYmluZEJ1ZmZlcih0aGlzLmNvbnRleHQuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIHRoaXMuYnVmZmVyKTtcclxuICB9XHJcblxyXG4gIGdldENvdW50KCkge1xyXG4gICAgcmV0dXJuIHRoaXMuY291bnQ7XHJcbiAgfVxyXG5cclxuICBkZWxldGVCdWZmZXIoKSB7XHJcbiAgICB0aGlzLmNvbnRleHQuZGVsZXRlQnVmZmVyKHRoaXMuYnVmZmVyKTtcclxuICAgIHRoaXMuYnVmZmVyID0gbnVsbDtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGNvbnN0IHRyYW5zbGF0aW9ucyA9IHtcclxuICAgIHNoYWRlcnM6IFwiU0hBREVSU1wiXHJcbn0iLCJleHBvcnQgdHlwZSBEcm9wZG93bkl0ZW0gPSB7XHJcbiAgaWQ6IHN0cmluZztcclxuICBkaXNwbGF5OiBzdHJpbmc7XHJcbn07XHJcblxyXG5jb25zdCBkZWZhdWx0T3B0aW9ucyA9IHtcclxuICBlbXB0eUl0ZW06IGZhbHNlLFxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGNyZWF0ZURyb3Bkb3duID0gKFxyXG4gIG9uQ2hhbmdlOiAoaXRlbTogRHJvcGRvd25JdGVtIHwgbnVsbCkgPT4gdm9pZCxcclxuICBjbGFzc05hbWU/OiBzdHJpbmcsXHJcbiAgb3B0aW9ucz86IHsgZW1wdHlJdGVtOiBib29sZWFuIH1cclxuKTogW1xyXG4gIEhUTUxTZWxlY3RFbGVtZW50LFxyXG4gIHtcclxuICAgIHNldEl0ZW1zOiAoaXRlbXM6IERyb3Bkb3duSXRlbVtdKSA9PiB2b2lkO1xyXG4gICAgZ2V0SXRlbXM6ICgpID0+IERyb3Bkb3duSXRlbVtdO1xyXG4gICAgc2V0U2VsZWN0ZWRJdGVtQnlJZDogKGlkOiBzdHJpbmcpID0+IHZvaWQ7XHJcbiAgICBzZXRTZWxlY3RlZEl0ZW1CeUluZGV4OiAoaW5kZXg6IG51bWJlcikgPT4gdm9pZDtcclxuICAgIGdldFNlbGVjdGVkSXRlbTogKCkgPT4gRHJvcGRvd25JdGVtIHwgbnVsbDtcclxuICAgIGNsZWFyU2VsZWN0aW9uOiAoKSA9PiB2b2lkO1xyXG4gIH1cclxuXSA9PiB7XHJcbiAgY29uc3QgY29tYmluZWRPcHRpb25zID0geyAuLi5kZWZhdWx0T3B0aW9ucywgLi4ub3B0aW9ucyB9O1xyXG4gIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2VsZWN0XCIpO1xyXG4gIGVsZW1lbnQuY2xhc3NOYW1lID0gYGRyb3Bkb3duLWJhc2UgJHtjbGFzc05hbWV9YDtcclxuXHJcbiAgbGV0IHNlbGVjdGVkSXRlbTogRHJvcGRvd25JdGVtIHwgbnVsbCA9IG51bGw7XHJcbiAgbGV0IGl0ZW1FbGVtZW50czogeyBlbGVtZW50OiBIVE1MT3B0aW9uRWxlbWVudDsgaXRlbTogRHJvcGRvd25JdGVtIH1bXSA9IFtdO1xyXG4gIGNvbnN0IHNldFNlbGVjdGVkSXRlbSA9IChpdGVtOiBEcm9wZG93bkl0ZW0gfCBudWxsKSA9PiB7XHJcbiAgICBzZWxlY3RlZEl0ZW0gPSBpdGVtO1xyXG4gICAgb25DaGFuZ2Uoc2VsZWN0ZWRJdGVtKTtcclxuICB9O1xyXG5cclxuICBlbGVtZW50Lm9uY2hhbmdlID0gKCkgPT4ge1xyXG4gICAgY29uc3QgZm91bmRFbGVtZW50ID0gaXRlbUVsZW1lbnRzLmZpbmQoZSA9PiBlLml0ZW0uaWQgPT09IGVsZW1lbnQudmFsdWUpO1xyXG5cclxuICAgIGlmIChmb3VuZEVsZW1lbnQuaXRlbS5pZCkgc2V0U2VsZWN0ZWRJdGVtKGZvdW5kRWxlbWVudC5pdGVtKTtcclxuICAgIGVsc2Ugc2V0U2VsZWN0ZWRJdGVtKG51bGwpO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IHNldEl0ZW1zID0gKGl0ZW1zOiBEcm9wZG93bkl0ZW1bXSkgPT4ge1xyXG4gICAgZWxlbWVudC5pbm5lckhUTUwgPSBcIlwiO1xyXG4gICAgaXRlbUVsZW1lbnRzLmxlbmd0aCA9IDA7XHJcblxyXG4gICAgY29uc3QgbmV3SXRlbXMgPSBjb21iaW5lZE9wdGlvbnMuZW1wdHlJdGVtXHJcbiAgICAgID8gW3sgaWQ6IFwiXCIsIGRpc3BsYXk6IFwiXCIgfSwgLi4uaXRlbXNdXHJcbiAgICAgIDogWy4uLml0ZW1zXTtcclxuICAgIG5ld0l0ZW1zLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgIGNvbnN0IG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIik7XHJcbiAgICAgIG9wdGlvbi52YWx1ZSA9IGl0ZW0uaWQ7XHJcbiAgICAgIG9wdGlvbi50ZXh0Q29udGVudCA9IGl0ZW0uZGlzcGxheTtcclxuICAgICAgb3B0aW9uLnNlbGVjdGVkID0gaXRlbS5pZCA9PT0gc2VsZWN0ZWRJdGVtPy5pZDtcclxuICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChvcHRpb24pO1xyXG4gICAgICBpdGVtRWxlbWVudHMucHVzaCh7IGVsZW1lbnQ6IG9wdGlvbiwgaXRlbSB9KTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IGdldEl0ZW1zID0gKCkgPT4gaXRlbUVsZW1lbnRzLm1hcChpZSA9PiBpZS5pdGVtKTtcclxuICBjb25zdCBzZXRTZWxlY3RlZEl0ZW1CeUlkID0gKGlkOiBzdHJpbmcpID0+IHtcclxuICAgIGl0ZW1FbGVtZW50cy5mb3JFYWNoKGllID0+IHtcclxuICAgICAgaWYgKGllLml0ZW0uaWQgPT09IGlkKSB7XHJcbiAgICAgICAgaWUuZWxlbWVudC5zZWxlY3RlZCA9IHRydWU7XHJcbiAgICAgICAgc2V0U2VsZWN0ZWRJdGVtKGllLml0ZW0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGllLmVsZW1lbnQuc2VsZWN0ZWQgPSBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgY29uc3Qgc2V0U2VsZWN0ZWRJdGVtQnlJbmRleCA9IChpbmRleDogbnVtYmVyKSA9PlxyXG4gICAgc2V0U2VsZWN0ZWRJdGVtQnlJZChpdGVtRWxlbWVudHNbaW5kZXhdLml0ZW0uaWQpO1xyXG5cclxuICBjb25zdCBnZXRTZWxlY3RlZEl0ZW0gPSAoKSA9PiBzZWxlY3RlZEl0ZW07XHJcbiAgY29uc3QgY2xlYXJTZWxlY3Rpb24gPSAoKSA9PiB7XHJcbiAgICBpdGVtRWxlbWVudHMuZm9yRWFjaChpZSA9PiAoaWUuZWxlbWVudC5zZWxlY3RlZCA9IGZhbHNlKSk7XHJcbiAgICBzZXRTZWxlY3RlZEl0ZW0obnVsbCk7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIFtcclxuICAgIGVsZW1lbnQsXHJcbiAgICB7XHJcbiAgICAgIHNldEl0ZW1zLFxyXG4gICAgICBnZXRJdGVtcyxcclxuICAgICAgc2V0U2VsZWN0ZWRJdGVtQnlJZCxcclxuICAgICAgc2V0U2VsZWN0ZWRJdGVtQnlJbmRleCxcclxuICAgICAgZ2V0U2VsZWN0ZWRJdGVtLFxyXG4gICAgICBjbGVhclNlbGVjdGlvbixcclxuICAgIH0sXHJcbiAgXTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVFbGVtZW50c0Ryb3Bkb3duID0gKFxyXG4gIGVsZW1lbnRzOiB7IGlkOiBzdHJpbmc7IGRpc3BsYXk6IHN0cmluZzsgZWxlbWVudDogSFRNTEVsZW1lbnQgfVtdLFxyXG4gIG9uQ2hhbmdlPzogKGlkOiBzdHJpbmcgfCBudWxsKSA9PiB2b2lkXHJcbikgPT4ge1xyXG4gIGNvbnN0IFtvcHRpb25zRWxlbWVudCwgb3B0aW9uc0NvbnRyb2xsZXJdID0gY3JlYXRlRHJvcGRvd24oaXRlbSA9PiB7XHJcbiAgICBpZiAoIWl0ZW0pIHtcclxuICAgICAgb25DaGFuZ2U/LihudWxsKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGVsZW1lbnRzLmZvckVhY2gob2UgPT4gb2UuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiaGlkZGVuXCIpKTtcclxuICAgIGVsZW1lbnRzLmZpbmQoaSA9PiBpLmlkID09PSBpdGVtLmlkKS5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRkZW5cIik7XHJcbiAgICBvbkNoYW5nZT8uKGl0ZW0uaWQpO1xyXG4gIH0pO1xyXG4gIG9wdGlvbnNDb250cm9sbGVyLnNldEl0ZW1zKFxyXG4gICAgZWxlbWVudHMubWFwKGUgPT4gKHtcclxuICAgICAgaWQ6IGUuaWQsXHJcbiAgICAgIGRpc3BsYXk6IGUuZGlzcGxheSxcclxuICAgIH0pKVxyXG4gICk7XHJcbiAgb3B0aW9uc0NvbnRyb2xsZXIuc2V0U2VsZWN0ZWRJdGVtQnlJbmRleCgwKTtcclxuICByZXR1cm4gb3B0aW9uc0VsZW1lbnQ7XHJcbn07XHJcbiIsImV4cG9ydCBjb25zdCBjcmVhdGVTZWN0aW9uVGl0bGUgPSAodGV4dDogc3RyaW5nLCBjbGFzc05hbWU6IHN0cmluZykgPT4ge1xyXG4gIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaDNcIik7XHJcbiAgZWxlbWVudC50ZXh0Q29udGVudCA9IHRleHQ7XHJcbiAgZWxlbWVudC5jbGFzc05hbWUgPSBgJHtjbGFzc05hbWV9IHNlY3Rpb24tdGl0bGVgO1xyXG4gIC8vZWxlbWVudC50aXRsZSA9ICcxIDIxMjMnLCwgYDxzdmcgd2lkdGg9XCIxNlwiIGhlaWdodD1cIjE2XCIgdmlld0JveD1cIjAgMCAxNiAxNlwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBmaWxsPVwiY3VycmVudENvbG9yXCI+PHBhdGggZmlsbC1ydWxlPVwiZXZlbm9kZFwiIGNsaXAtcnVsZT1cImV2ZW5vZGRcIiBkPVwiTTcuNTYgMWguODhsNi41NCAxMi4yNi0uNDQuNzRIMS40NEwxIDEzLjI2IDcuNTYgMXpNOCAyLjI4TDIuMjggMTNIMTMuN0w4IDIuMjh6TTguNjI1IDEydi0xaC0xLjI1djFoMS4yNXptLTEuMjUtMlY2aDEuMjV2NGgtMS4yNXpcIi8+PC9zdmc+YDtcclxuICByZXR1cm4geyBlbGVtZW50IH07XHJcbn07XHJcbiIsImV4cG9ydCBjb25zdCB3aXRoTGFiZWwgPSAoXHJcbiAgZWxlbWVudDogSFRNTEVsZW1lbnQsXHJcbiAgdGV4dDogc3RyaW5nLFxyXG4gIGNsYXNzTmFtZT86IHN0cmluZ1xyXG4pID0+IHtcclxuICBjb25zdCB3cmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICB3cmFwcGVyLmNsYXNzTmFtZSA9IGAke2NsYXNzTmFtZSA/PyBcIlwifSBvcHRpb25zLXdyYXBwZXJgO1xyXG4gIGNvbnN0IGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xyXG4gIGxhYmVsLmNsYXNzTmFtZSA9IFwib3B0aW9ucy1sYWJlbFwiO1xyXG4gIGxhYmVsLnRleHRDb250ZW50ID0gdGV4dDtcclxuICBlbGVtZW50LmNsYXNzTmFtZSA9IGAke2VsZW1lbnQuY2xhc3NOYW1lfSBvcHRpb25zLWNvbnRlbnRgO1xyXG4gIHdyYXBwZXIuYXBwZW5kQ2hpbGQobGFiZWwpO1xyXG4gIHdyYXBwZXIuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XHJcbiAgcmV0dXJuIHdyYXBwZXI7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgY3JlYXRlRGl2ID0gKGNsYXNzTmFtZTogc3RyaW5nLCBjaGlsZHJlbj86IEhUTUxFbGVtZW50W10pID0+IHtcclxuICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gIGRpdi5jbGFzc05hbWUgPSBjbGFzc05hbWU7XHJcbiAgY2hpbGRyZW4/LmZvckVhY2goYyA9PiBkaXYuYXBwZW5kQ2hpbGQoYykpO1xyXG4gIHJldHVybiBkaXY7XHJcbn07XHJcbiIsImV4cG9ydCBjb25zdCBoYXNQcm9wZXJ0eSA9IDxUIGV4dGVuZHMge30sIFAgZXh0ZW5kcyBQcm9wZXJ0eUtleT4oXHJcbiAgb2JqOiBULFxyXG4gIHByb3A6IFBcclxuKTogb2JqIGlzIFQgJiBSZWNvcmQ8UCwgdW5rbm93bj4gPT4ge1xyXG4gIHJldHVybiBvYmouaGFzT3duUHJvcGVydHkocHJvcCk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgYXNzZXJ0TmV2ZXIgPSAodmFsdWU6IG5ldmVyKTogbmV2ZXIgPT4ge1xyXG4gIHRocm93IG5ldyBFcnJvcihgVW5oYW5kbGVkIHVuaW9uIG1lbWJlcjogJHtKU09OLnN0cmluZ2lmeSh2YWx1ZSl9YCk7XHJcbn07XHJcbiIsImltcG9ydCB7IGFzc2VydE5ldmVyIH0gZnJvbSBcIi4uL3R5cGVHdWFyZHNcIjtcclxuXHJcbmV4cG9ydCBlbnVtIEF0dHJpYnV0ZUJ1ZmZlclR5cGUge1xyXG4gIEZMT0FUX1ZFQzMgPSAzNTY2NSxcclxuICBGTE9BVF9WRUM0ID0gMzU2NjYsXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBBdHRyaWJ1dGVCdWZmZXJJbmZvIHtcclxuICBwcml2YXRlIGJ1ZmZlcjogV2ViR0xCdWZmZXIgfCBudWxsO1xyXG4gIHByaXZhdGUgbG9jYXRpb246IG51bWJlcjtcclxuICBwcml2YXRlIGNvdW50OiBudW1iZXIgPSAwO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgY29udGV4dDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LFxyXG4gICAgcHJvZ3JhbTogV2ViR0xQcm9ncmFtLFxyXG4gICAgcHJpdmF0ZSBuYW1lOiBzdHJpbmcsXHJcbiAgICBwcml2YXRlIHR5cGU6IEF0dHJpYnV0ZUJ1ZmZlclR5cGVcclxuICApIHtcclxuICAgIHRoaXMuYXR0YWNoVG9Qcm9ncmFtKHByb2dyYW0pO1xyXG4gICAgdGhpcy5idWZmZXIgPSBjb250ZXh0LmNyZWF0ZUJ1ZmZlcigpO1xyXG4gIH1cclxuXHJcbiAgYXR0YWNoVG9Qcm9ncmFtKHByb2dyYW06IFdlYkdMUHJvZ3JhbSkge1xyXG4gICAgdGhpcy5sb2NhdGlvbiA9IHRoaXMuY29udGV4dC5nZXRBdHRyaWJMb2NhdGlvbihwcm9ncmFtLCB0aGlzLm5hbWUpO1xyXG4gIH1cclxuXHJcbiAgc2V0VmFsdWUobmV3VmFsdWU6IG51bWJlcltdW10pIHtcclxuICAgIHRoaXMuY291bnQgPSBuZXdWYWx1ZS5sZW5ndGg7XHJcbiAgICB0aGlzLmNvbnRleHQuYmluZEJ1ZmZlcih0aGlzLmNvbnRleHQuQVJSQVlfQlVGRkVSLCB0aGlzLmJ1ZmZlcik7XHJcbiAgICBjb25zdCBmbGF0dGVuID0gW10uY29uY2F0KC4uLm5ld1ZhbHVlKTtcclxuICAgIHRoaXMuY29udGV4dC5idWZmZXJEYXRhKFxyXG4gICAgICB0aGlzLmNvbnRleHQuQVJSQVlfQlVGRkVSLFxyXG4gICAgICBuZXcgRmxvYXQzMkFycmF5KGZsYXR0ZW4pLFxyXG4gICAgICB0aGlzLmNvbnRleHQuU1RBVElDX0RSQVdcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBzZXRBdHRyaWJ1dGVCdWZmZXIoKSB7XHJcbiAgICBpZiAodGhpcy5idWZmZXIgIT09IG51bGwpIHtcclxuICAgICAgdGhpcy5jb250ZXh0LmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHRoaXMubG9jYXRpb24pO1xyXG4gICAgICB0aGlzLmNvbnRleHQuYmluZEJ1ZmZlcih0aGlzLmNvbnRleHQuQVJSQVlfQlVGRkVSLCB0aGlzLmJ1ZmZlcik7XHJcbiAgICAgIGNvbnN0IHNpemUgPSBnZXROdW1Db21wb25lbnRzKHRoaXMudHlwZSk7IC8vIDIgY29tcG9uZW50cyBwZXIgaXRlcmF0aW9uXHJcbiAgICAgIGNvbnN0IHR5cGUgPSB0aGlzLmNvbnRleHQuRkxPQVQ7IC8vIHRoZSBkYXRhIGlzIDMyYml0IGZsb2F0c1xyXG4gICAgICBjb25zdCBub3JtYWxpemUgPSBmYWxzZTsgLy8gZG9uJ3Qgbm9ybWFsaXplIHRoZSBkYXRhXHJcbiAgICAgIGNvbnN0IHN0cmlkZSA9IDA7IC8vIDAgPSBtb3ZlIGZvcndhcmQgc2l6ZSAqIHNpemVvZih0eXBlKSBlYWNoIGl0ZXJhdGlvbiB0byBnZXQgdGhlIG5leHQgcG9zaXRpb25cclxuICAgICAgY29uc3Qgb2Zmc2V0ID0gMDsgLy8gc3RhcnQgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgYnVmZmVyXHJcbiAgICAgIHRoaXMuY29udGV4dC52ZXJ0ZXhBdHRyaWJQb2ludGVyKFxyXG4gICAgICAgIHRoaXMubG9jYXRpb24sXHJcbiAgICAgICAgc2l6ZSxcclxuICAgICAgICB0eXBlLFxyXG4gICAgICAgIG5vcm1hbGl6ZSxcclxuICAgICAgICBzdHJpZGUsXHJcbiAgICAgICAgb2Zmc2V0XHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXRBdHRyaWJ1dGVCdWZmZXJUeXBlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMudHlwZTtcclxuICB9XHJcblxyXG4gIGdldENvdW50KCkge1xyXG4gICAgcmV0dXJuIHRoaXMuY291bnQ7XHJcbiAgfVxyXG5cclxuICBkZWxldGVCdWZmZXIoKSB7XHJcbiAgICB0aGlzLmNvbnRleHQuZGVsZXRlQnVmZmVyKHRoaXMuYnVmZmVyKTtcclxuICAgIHRoaXMuYnVmZmVyID0gbnVsbDtcclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IGdldE51bUNvbXBvbmVudHMgPSAoYnVmZmVyVHlwZTogQXR0cmlidXRlQnVmZmVyVHlwZSkgPT4ge1xyXG4gIHN3aXRjaCAoYnVmZmVyVHlwZSkge1xyXG4gICAgY2FzZSBBdHRyaWJ1dGVCdWZmZXJUeXBlLkZMT0FUX1ZFQzM6XHJcbiAgICAgIHJldHVybiAzO1xyXG4gICAgY2FzZSBBdHRyaWJ1dGVCdWZmZXJUeXBlLkZMT0FUX1ZFQzQ6XHJcbiAgICAgIHJldHVybiA0O1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgYXNzZXJ0TmV2ZXIoYnVmZmVyVHlwZSk7XHJcbiAgfVxyXG59O1xyXG4iLCJleHBvcnQgY2xhc3MgQ29tcG9zaXRlS2V5TWFwPFRLZXksIFRWYWx1ZT4ge1xyXG4gIHByaXZhdGUgbWFwID0gbmV3IE1hcDxzdHJpbmcsIFRWYWx1ZT4oKTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBrZXlTZWxlY3RvcjogKGNvbXBvc2l0ZUtleTogVEtleSkgPT4gc3RyaW5nKSB7fVxyXG5cclxuICBnZXQoa2V5OiBUS2V5KSB7XHJcbiAgICByZXR1cm4gdGhpcy5tYXAuZ2V0KHRoaXMua2V5U2VsZWN0b3Ioa2V5KSk7XHJcbiAgfVxyXG5cclxuICBzZXQoa2V5OiBUS2V5LCB2YWx1ZTogVFZhbHVlKSB7XHJcbiAgICB0aGlzLm1hcC5zZXQodGhpcy5rZXlTZWxlY3RvcihrZXkpLCB2YWx1ZSk7XHJcbiAgfVxyXG5cclxuICBoYXMoa2V5OiBUS2V5KSB7XHJcbiAgICByZXR1cm4gdGhpcy5tYXAuaGFzKHRoaXMua2V5U2VsZWN0b3Ioa2V5KSk7XHJcbiAgfVxyXG5cclxuICBlbnRyaWVzU3RyS2V5KCkge1xyXG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5tYXAuZW50cmllcygpKTtcclxuICB9XHJcblxyXG4gIGRlbGV0ZVN0cktleShrZXk6IHN0cmluZykge1xyXG4gICAgdGhpcy5tYXAuZGVsZXRlKGtleSk7XHJcbiAgfVxyXG5cclxuICBkZWxldGUoa2V5OiBUS2V5KSB7XHJcbiAgICB0aGlzLm1hcC5kZWxldGUodGhpcy5rZXlTZWxlY3RvcihrZXkpKTtcclxuICB9XHJcblxyXG4gIGNsZWFyKCkge1xyXG4gICAgdGhpcy5tYXAuY2xlYXIoKTtcclxuICB9XHJcbn1cclxuIiwiLy9odHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjExNzUyM1xyXG5leHBvcnQgY29uc3QgdXVpZHY0ID0gKCkgPT4ge1xyXG4gIHJldHVybiBcInh4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eFwiLnJlcGxhY2UoL1t4eV0vZywgZnVuY3Rpb24gKGMpIHtcclxuICAgIHZhciByID0gKE1hdGgucmFuZG9tKCkgKiAxNikgfCAwLFxyXG4gICAgICB2ID0gYyA9PSBcInhcIiA/IHIgOiAociAmIDB4MykgfCAweDg7XHJcbiAgICByZXR1cm4gdi50b1N0cmluZygxNik7XHJcbiAgfSk7XHJcbn07XHJcbiIsImV4cG9ydCBjb25zdCByZW1vdmUgPSA8VD4oYXJyYXk6IFRbXSwgaXRlbTogVCkgPT4ge1xyXG4gIGNvbnN0IGluZGV4ID0gYXJyYXkuaW5kZXhPZihpdGVtKTtcclxuXHJcbiAgaWYgKGluZGV4ID4gLTEpIHtcclxuICAgIGFycmF5LnNwbGljZShpbmRleCwgMSk7XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHJlbW92ZUxhc3QgPSAodGV4dDogc3RyaW5nLCBjb3VudDogbnVtYmVyKSA9PiB7XHJcbiAgcmV0dXJuIHRleHQuc3Vic3RyaW5nKDAsIHRleHQubGVuZ3RoIC0gY291bnQpO1xyXG59O1xyXG4iLCJpbXBvcnQgKiBhcyBBcnJheVV0aWxzIGZyb20gXCIuLi8uLi8uLi9jb21tb24vYXJyYXlcIjtcclxuZXhwb3J0IHR5cGUgT2JzZXJ2ZXI8VD4gPSAodmFsdWU6IFQpID0+IHZvaWQ7XHJcblxyXG5leHBvcnQgY2xhc3MgT2JzZXJ2YWJsZTxUPiB7XHJcbiAgb2JzZXJ2ZXJzOiBPYnNlcnZlcjxUPltdID0gW107XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdmFsdWU6IFQgfCBudWxsKSB7fVxyXG5cclxuICBhdHRhY2gob2JzZXJ2ZXI6IE9ic2VydmVyPFQ+KSB7XHJcbiAgICB0aGlzLm9ic2VydmVycy5wdXNoKG9ic2VydmVyKTtcclxuICB9XHJcblxyXG4gIGRldGFjaChvYnNlcnZlcjogT2JzZXJ2ZXI8VD4pIHtcclxuICAgIEFycmF5VXRpbHMucmVtb3ZlKHRoaXMub2JzZXJ2ZXJzLCBvYnNlcnZlcik7XHJcbiAgfVxyXG5cclxuICBkZXRhY2hBbGwoKSB7XHJcbiAgICB0aGlzLm9ic2VydmVycy5sZW5ndGggPSAwO1xyXG4gIH1cclxuXHJcbiAgc2V0VmFsdWUobmV3VmFsdWU6IFQpIHtcclxuICAgIHRoaXMudmFsdWUgPSBuZXdWYWx1ZTtcclxuICAgIHRoaXMubm90aWZ5KCk7XHJcbiAgfVxyXG5cclxuICBnZXRWYWx1ZSgpIHtcclxuICAgIHJldHVybiB0aGlzLnZhbHVlO1xyXG4gIH1cclxuXHJcbiAgZm9yY2VOb3RpZnkoKSB7XHJcbiAgICB0aGlzLm5vdGlmeSgpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBub3RpZnkoKSB7XHJcbiAgICBpZiAodGhpcy52YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICBjb25zdCB2YWx1ZSA9IHRoaXMudmFsdWU7XHJcbiAgICAgIHRoaXMub2JzZXJ2ZXJzLmZvckVhY2gobyA9PiBvKHZhbHVlKSk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBjb25zdCBjcmVhdGVNdWx0aU51bWJlcklucHV0ID0gPFQgZXh0ZW5kcyBudW1iZXJbXT4oXHJcbiAgcm93czogbnVtYmVyLFxyXG4gIGNvbHVtbnM6IG51bWJlcixcclxuICBvbkNoYW5nZT86IChuZXdWYWx1ZTogVCkgPT4gdm9pZFxyXG4pOiBbXHJcbiAgSFRNTERpdkVsZW1lbnQsXHJcbiAge1xyXG4gICAgc2V0VmFsdWVzOiAodmFsdWU6IFQpID0+IHZvaWQ7XHJcbiAgICBzZXRSZWFkb25seTogKHJlYWRvbmx5OiBib29sZWFuKSA9PiB2b2lkO1xyXG4gICAgZ2V0VmFsdWVzOiAoKSA9PiBUO1xyXG4gIH1cclxuXSA9PiB7XHJcbiAgY29uc3QgaW5wdXRHcmlkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICBpbnB1dEdyaWQuY2xhc3NOYW1lID0gXCJlZGl0LWlucHV0LWdyaWRcIjtcclxuXHJcbiAgY29uc3QgaXRlbUVsZW1lbnRzOiB7IGVsZW1lbnQ6IEhUTUxJbnB1dEVsZW1lbnQ7IHZhbHVlOiBudW1iZXIgfVtdID0gW107XHJcbiAgY29uc3Qgc2V0VmFsdWVzID0gKG5ld1ZhbHVlczogVCkgPT5cclxuICAgIGl0ZW1FbGVtZW50cy5mb3JFYWNoKChpZSwgaW5kZXgpID0+IHtcclxuICAgICAgaWUudmFsdWUgPSBuZXdWYWx1ZXNbaW5kZXhdO1xyXG4gICAgICBpZS5lbGVtZW50LnZhbHVlID0gaWUudmFsdWUudG9TdHJpbmcoKTtcclxuICAgIH0pO1xyXG4gIGNvbnN0IGdldFZhbHVlcyA9ICgpID0+IGl0ZW1FbGVtZW50cy5tYXAoaWUgPT4gaWUudmFsdWUpIGFzIFQ7XHJcbiAgY29uc3Qgc2V0UmVhZG9ubHkgPSAocmVhZG9ubHk6IGJvb2xlYW4pID0+XHJcbiAgICBpdGVtRWxlbWVudHMuZm9yRWFjaChpZSA9PiAoaWUuZWxlbWVudC5yZWFkT25seSA9IHJlYWRvbmx5KSk7XHJcblxyXG4gIGZvciAobGV0IHJvdyA9IDA7IHJvdyA8IHJvd3M7IHJvdysrKSB7XHJcbiAgICBjb25zdCBpbnB1dFJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICBpbnB1dFJvdy5jbGFzc05hbWUgPSBcImVkaXQtaW5wdXQtcm93XCI7XHJcblxyXG4gICAgZm9yIChsZXQgY29sdW1uID0gMDsgY29sdW1uIDwgY29sdW1uczsgY29sdW1uKyspIHtcclxuICAgICAgY29uc3QgaW5kZXggPSByb3cgKiBjb2x1bW5zICsgY29sdW1uO1xyXG4gICAgICBjb25zdCB2YWx1ZSA9IDA7XHJcbiAgICAgIGNvbnN0IGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xyXG4gICAgICBjb25zdCBpdGVtRWxlbWVudCA9IHsgZWxlbWVudDogaW5wdXQsIHZhbHVlIH07XHJcbiAgICAgIC8vT2JqZWN0LmFzc2lnbihpbnB1dCwgaW5wdXRPcHRpb25zKTtcclxuICAgICAgaW5wdXQuY2xhc3NOYW1lID0gXCJlZGl0LWlucHV0XCI7XHJcbiAgICAgIGlucHV0LnR5cGUgPSBcIm51bWJlclwiO1xyXG4gICAgICBpbnB1dC52YWx1ZSA9IHZhbHVlPy50b1N0cmluZygpO1xyXG4gICAgICBpbnB1dC5kaXNhYmxlZCA9ICFvbkNoYW5nZTtcclxuICAgICAgaW5wdXQub25pbnB1dCA9ICgpID0+IHtcclxuICAgICAgICBpdGVtRWxlbWVudHNbaW5kZXhdLnZhbHVlID0gTnVtYmVyKGlucHV0LnZhbHVlKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhcImNhbGxpbmcgb24gY2hhbmdlXCIpO1xyXG5cclxuICAgICAgICBvbkNoYW5nZT8uKGdldFZhbHVlcygpKTtcclxuICAgICAgfTtcclxuICAgICAgaXRlbUVsZW1lbnRzLnB1c2goaXRlbUVsZW1lbnQpO1xyXG4gICAgICBpbnB1dFJvdy5hcHBlbmRDaGlsZChpbnB1dCk7XHJcbiAgICB9XHJcblxyXG4gICAgaW5wdXRHcmlkLmFwcGVuZENoaWxkKGlucHV0Um93KTtcclxuICB9XHJcblxyXG4gIHJldHVybiBbXHJcbiAgICBpbnB1dEdyaWQsXHJcbiAgICB7XHJcbiAgICAgIHNldFZhbHVlcyxcclxuICAgICAgZ2V0VmFsdWVzLFxyXG4gICAgICBzZXRSZWFkb25seSxcclxuICAgIH0sXHJcbiAgXTtcclxufTtcclxuIiwiaW1wb3J0IHsgY3JlYXRlRWxlbWVudHNEcm9wZG93biB9IGZyb20gXCIuLi8uLi9jb21wb25lbnRzL2Ryb3Bkb3duXCI7XHJcbmltcG9ydCB7IGNyZWF0ZU1hdHJpeCB9IGZyb20gXCIuLi8uLi9jb21wb25lbnRzL2lucHV0TWF0cml4XCI7XHJcbmltcG9ydCB7IGNyZWF0ZVZlY3RvciB9IGZyb20gXCIuLi8uLi9jb21wb25lbnRzL2lucHV0VmVjdG9yXCI7XHJcbmltcG9ydCB7IGNyZWF0ZURpdiB9IGZyb20gXCIuLi8uLi9jb21wb25lbnRzL3dyYXBwZXJzXCI7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwiLi4vb2JzZXJ2YWJsZVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGNyZWF0ZUVsZW1lbnROb3RTdXBwb3J0ZWQgPSAoKSA9PiB7XHJcbiAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICBkaXYuY2xhc3NOYW1lID0gXCJ1bnN1cHBvcnRlZC1lcnJvclwiO1xyXG4gIGRpdi5pbm5lclRleHQgPSBcIk5vdCBzdXBwb3J0ZWQgdW5pZm9ybVwiO1xyXG4gIHJldHVybiBkaXY7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgY3JlYXRlU2VsZWN0aW9uQ29tcG9uZW50ID0gKFxyXG4gIG9wdGlvbnM6IHtcclxuICAgIGlkOiBzdHJpbmc7XHJcbiAgICBkaXNwbGF5OiBzdHJpbmc7XHJcbiAgICB2YWx1ZTogT2JzZXJ2YWJsZTxhbnk+O1xyXG4gICAgZWxlbWVudDogSFRNTEVsZW1lbnQ7XHJcbiAgfVtdLFxyXG4gIG9uQ2hhbmdlOiAodmFsdWU6IGFueSkgPT4gdm9pZFxyXG4pID0+IHtcclxuICBsZXQgZGV0YWNoOiAoKSA9PiB2b2lkID0gbnVsbDtcclxuICBjb25zdCBlbGVtZW50ID0gY3JlYXRlRGl2KFwiY29sdW1uLXdpdGgtZ2FwXCIsIFtcclxuICAgIGNyZWF0ZUVsZW1lbnRzRHJvcGRvd24ob3B0aW9ucywgaWQgPT4ge1xyXG4gICAgICBkZXRhY2g/LigpO1xyXG4gICAgICBjb25zdCBvcHRpb24gPSBvcHRpb25zLmZpbmQobyA9PiBvLmlkID09PSBpZCk7XHJcbiAgICAgIGNvbnN0IGNhbGxiYWNrID0gKHZhbHVlOiBhbnkpID0+IG9uQ2hhbmdlKHZhbHVlKTtcclxuICAgICAgb3B0aW9uLnZhbHVlLmF0dGFjaChjYWxsYmFjayk7XHJcbiAgICAgIGNhbGxiYWNrKG9wdGlvbi52YWx1ZS5nZXRWYWx1ZSgpKTtcclxuICAgICAgZGV0YWNoID0gKCkgPT4gb3B0aW9uLnZhbHVlLmRldGFjaChjYWxsYmFjayk7XHJcbiAgICB9KSxcclxuICAgIC4uLm9wdGlvbnMubWFwKG8gPT4gby5lbGVtZW50KSxcclxuICBdKTtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGVsZW1lbnQsXHJcbiAgICBkaXNwb3NlOiAoKSA9PiBkZXRhY2g/LigpLFxyXG4gIH07XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgY3JlYXRlRWxlbWVudFZlY3RvciA9IDxUIGV4dGVuZHMgbnVtYmVyW10+KFxyXG4gIHNpemU6IG51bWJlcixcclxuICB2YWx1ZTogT2JzZXJ2YWJsZTxUPixcclxuICBlZGl0YWJsZTogYm9vbGVhblxyXG4pID0+IHtcclxuICBjb25zdCBbY3VzdG9tRWxlbWVudCwgY3VzdG9tQ29udHJvbGxlcl0gPSBjcmVhdGVWZWN0b3Ioc2l6ZSwgdiA9PiB7XHJcbiAgICB2YWx1ZS5zZXRWYWx1ZSh2IGFzIFQpO1xyXG4gIH0pO1xyXG4gIGN1c3RvbUNvbnRyb2xsZXIuc2V0VmFsdWVzKHZhbHVlLmdldFZhbHVlKCkpO1xyXG5cclxuICBpZiAoIWVkaXRhYmxlKSB7XHJcbiAgICBjb25zdCBsaXN0ZW5lciA9ICh2YWx1ZTogVCkgPT4gY3VzdG9tQ29udHJvbGxlci5zZXRWYWx1ZXModmFsdWUpO1xyXG4gICAgdmFsdWUuYXR0YWNoKGxpc3RlbmVyKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBjdXN0b21FbGVtZW50O1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGNyZWF0ZUVsZW1lbnRNYXRyaXggPSA8VCBleHRlbmRzIG51bWJlcltdPihcclxuICBzaXplOiBudW1iZXIsXHJcbiAgdmFsdWU6IE9ic2VydmFibGU8VD4sXHJcbiAgZWRpdGFibGU6IGJvb2xlYW5cclxuKSA9PiB7XHJcbiAgY29uc3Qgb25DaGFuZ2UgPSBlZGl0YWJsZVxyXG4gICAgPyAodjogVCkgPT4ge1xyXG4gICAgICAgIHZhbHVlLnNldFZhbHVlKHYgYXMgVCk7XHJcbiAgICAgIH1cclxuICAgIDogdW5kZWZpbmVkO1xyXG4gIGNvbnN0IFtjdXN0b21FbGVtZW50LCBjdXN0b21Db250cm9sbGVyXSA9IGNyZWF0ZU1hdHJpeChzaXplLCBvbkNoYW5nZSk7XHJcbiAgY3VzdG9tQ29udHJvbGxlci5zZXRWYWx1ZXModmFsdWUuZ2V0VmFsdWUoKSk7XHJcblxyXG4gIGlmICghZWRpdGFibGUpIHtcclxuICAgIGNvbnN0IGxpc3RlbmVyID0gKHZhbHVlOiBUKSA9PiBjdXN0b21Db250cm9sbGVyLnNldFZhbHVlcyh2YWx1ZSk7XHJcbiAgICB2YWx1ZS5hdHRhY2gobGlzdGVuZXIpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGN1c3RvbUVsZW1lbnQ7XHJcbn07XHJcblxyXG4vL3RvZG8gYmV0dGVyIHBhcnNlclxyXG5leHBvcnQgY29uc3QgY3JlYXRlRWxlbWVudEFycmF5ID0gPFQgZXh0ZW5kcyBudW1iZXJbXT4oXHJcbiAgaXRlbVNpemU6IG51bWJlcixcclxuICB2YWx1ZTogT2JzZXJ2YWJsZTxUPixcclxuICBlZGl0YWJsZTogYm9vbGVhblxyXG4pID0+IHtcclxuICBjb25zdCBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcclxuICBpbnB1dC5jbGFzc05hbWUgPSBcImVkaXQtaW5wdXRcIjtcclxuICBpbnB1dC5kaXNhYmxlZCA9ICFlZGl0YWJsZTtcclxuXHJcbiAgaWYgKCFlZGl0YWJsZSkge1xyXG4gICAgY29uc3QgbGlzdGVuZXIgPSAodmFsdWU6IFQpID0+IChpbnB1dC52YWx1ZSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKSk7XHJcbiAgICB2YWx1ZS5hdHRhY2gobGlzdGVuZXIpO1xyXG4gIH1cclxuXHJcbiAgaW5wdXQudmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZS5nZXRWYWx1ZSgpKTtcclxuICBpbnB1dC5vbmlucHV0ID0gKCkgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgcmVzdWx0ID0gSlNPTi5wYXJzZShpbnB1dC52YWx1ZSk7XHJcbiAgICAgIC8vY29uc29sZS5sb2coXCJyZXN1bHRcIiwgcmVzdWx0KTtcclxuXHJcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShyZXN1bHQpKSB7XHJcbiAgICAgICAgaWYgKGl0ZW1TaXplICE9PSAxKSBjb25zb2xlLmxvZyhcInRoaXMgaXMgbm90IGFuIGFycmF5IHR5cGVcIik7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc3QgeHh4ID0gcmVzdWx0LmV2ZXJ5KGUgPT5cclxuICAgICAgICAgIEFycmF5LmlzQXJyYXkoZSkgPyBlLmxlbmd0aCA9PT0gaXRlbVNpemUgOiBmYWxzZVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgaWYgKCF4eHgpIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKFwibm90IGV2ZXJ5IGVsZW1lbnQgaWQgdGhlIGFycmEgaXMgc2FtZSBzaXplXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICB2YWx1ZS5zZXRWYWx1ZShyZXN1bHQpO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5sb2coXCJ0aGlzIGlzIG5vdCBhIGpzb25cIik7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgLy9Xcm9uZyBmb3JtYXQhIFNob3VsZCBiZSBbW3gxLHkxXSwgW3gyLHkyXSwgLi4uXVxyXG4gIHJldHVybiBpbnB1dDtcclxufTtcclxuIiwiaW1wb3J0IHsgVmVjdG9yMkFycmF5LCBWZWN0b3IzQXJyYXksIFZlY3RvcjRBcnJheSB9IGZyb20gXCIuLi90eXBlc1wiO1xyXG5pbXBvcnQgeyBjcmVhdGVNdWx0aU51bWJlcklucHV0IH0gZnJvbSBcIi4vaGVscGVyc1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGNyZWF0ZVZlY3RvciA9IDxUIGV4dGVuZHMgbnVtYmVyW10+KFxyXG4gIGVsZW1lbnRzOiBudW1iZXIsXHJcbiAgb25DaGFuZ2U/OiAobmV3VmFsdWU6IFQpID0+IHZvaWRcclxuKSA9PiBjcmVhdGVNdWx0aU51bWJlcklucHV0PFQ+KDEsIGVsZW1lbnRzLCBvbkNoYW5nZSk7XHJcblxyXG4vLyBleHBvcnQgY29uc3QgY3JlYXRlVmVjdG9yMiA9IChvbkNoYW5nZT86IChuZXdWYWx1ZTogVmVjdG9yMkFycmF5KSA9PiB2b2lkKSA9PlxyXG4vLyAgIGNyZWF0ZU11bHRpTnVtYmVySW5wdXQ8VmVjdG9yMkFycmF5PihvbkNoYW5nZSwgMSwgMik7XHJcblxyXG4vLyBleHBvcnQgY29uc3QgY3JlYXRlVmVjdG9yMyA9IChvbkNoYW5nZT86IChuZXdWYWx1ZTogVmVjdG9yM0FycmF5KSA9PiB2b2lkKSA9PlxyXG4vLyAgIGNyZWF0ZU11bHRpTnVtYmVySW5wdXQ8VmVjdG9yM0FycmF5PihvbkNoYW5nZSwgMSwgMyk7XHJcblxyXG4vLyBleHBvcnQgY29uc3QgY3JlYXRlVmVjdG9yNCA9IChvbkNoYW5nZT86IChuZXdWYWx1ZTogVmVjdG9yNEFycmF5KSA9PiB2b2lkKSA9PlxyXG4vLyAgIGNyZWF0ZU11bHRpTnVtYmVySW5wdXQ8VmVjdG9yNEFycmF5PihvbkNoYW5nZSwgMSwgNCk7XHJcbiIsImltcG9ydCB7IGNyZWF0ZU11bHRpTnVtYmVySW5wdXQgfSBmcm9tIFwiLi9oZWxwZXJzXCI7XHJcblxyXG5leHBvcnQgY29uc3QgY3JlYXRlTWF0cml4ID0gPFQgZXh0ZW5kcyBudW1iZXJbXT4oXHJcbiAgc2l6ZTogbnVtYmVyLFxyXG4gIG9uQ2hhbmdlPzogKG5ld1ZhbHVlOiBUKSA9PiB2b2lkXHJcbikgPT4gY3JlYXRlTXVsdGlOdW1iZXJJbnB1dDxUPihzaXplLCBzaXplLCBvbkNoYW5nZSk7XHJcbiIsIi8vaW1wb3J0IHsgY3JlYXRlTWF0cml4MyB9IGZyb20gXCIuLy4uLy4uL2NvbXBvbmVudHMvaW5wdXRNYXRyaXhcIjtcclxuaW1wb3J0IHsgYXNzZXJ0TmV2ZXIgfSBmcm9tIFwiLi8uLi90eXBlR3VhcmRzXCI7XHJcbmltcG9ydCB7IGNyZWF0ZVZlY3RvciB9IGZyb20gXCIuLi8uLi9jb21wb25lbnRzL2lucHV0VmVjdG9yXCI7XHJcbmltcG9ydCB7IGNyZWF0ZUVsZW1lbnRzRHJvcGRvd24gfSBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9kcm9wZG93blwiO1xyXG5pbXBvcnQgeyBVbmlmb3JtSW5mbywgVW5pZm9ybVR5cGUgfSBmcm9tIFwiLi91bmlmb3JtXCI7XHJcbmltcG9ydCB7IENvbXBvc2l0ZUtleU1hcCB9IGZyb20gXCIuLi9jb21wb3NpdGVLZXlNYXBcIjtcclxuaW1wb3J0IHsgY3JlYXRlRGl2LCB3aXRoTGFiZWwgfSBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy93cmFwcGVyc1wiO1xyXG5pbXBvcnQgeyB1dWlkdjQgfSBmcm9tIFwiLi4vLi4vLi4vLi4vY29tbW9uL3V1aWRcIjtcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCIuLi9vYnNlcnZhYmxlXCI7XHJcbmltcG9ydCB7XHJcbiAgY3JlYXRlRWxlbWVudE1hdHJpeCxcclxuICBjcmVhdGVFbGVtZW50Tm90U3VwcG9ydGVkLFxyXG4gIGNyZWF0ZUVsZW1lbnRWZWN0b3IsXHJcbiAgY3JlYXRlU2VsZWN0aW9uQ29tcG9uZW50LFxyXG59IGZyb20gXCIuL2NvbW1vblwiO1xyXG5pbXBvcnQgeyBjcmVhdGVNYXRyaXggfSBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9pbnB1dE1hdHJpeFwiO1xyXG5cclxudHlwZSBDYWNoZUtleSA9IHtcclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgdHlwZTogVW5pZm9ybVR5cGU7XHJcbn07XHJcblxyXG50eXBlIENhY2hlVmFsdWUgPSB7XHJcbiAgY29tcG9uZW50OiBIVE1MRWxlbWVudDtcclxuICB1bmlmb3JtSW5mbzogVW5pZm9ybUluZm87XHJcbn07XHJcblxyXG5jb25zdCBrZXlTZWxlY3RvciA9IChrZXk6IENhY2hlS2V5KTogc3RyaW5nID0+IGAke2tleS5uYW1lfTske2tleS50eXBlfWA7XHJcbmNvbnN0IHVuaWZvcm1Db21wb25lbnRDYWNoZSA9IG5ldyBDb21wb3NpdGVLZXlNYXA8Q2FjaGVLZXksIENhY2hlVmFsdWU+KFxyXG4gIGtleVNlbGVjdG9yXHJcbik7XHJcblxyXG5jb25zdCByZWJ1aWxkQ2FjaGUgPSAobmV3VmFsdWVzOiB7IGtleTogQ2FjaGVLZXk7IHZhbHVlOiBDYWNoZVZhbHVlIH1bXSkgPT4ge1xyXG4gIGNvbnN0IG5ld1ZhbHVlc1N0cktleXMgPSBuZXdWYWx1ZXMubWFwKHYgPT4ga2V5U2VsZWN0b3Iodi5rZXkpKTtcclxuICBjb25zdCBjb21wb25lbnRzVG9SZW1vdmUgPSB1bmlmb3JtQ29tcG9uZW50Q2FjaGVcclxuICAgIC5lbnRyaWVzU3RyS2V5KClcclxuICAgIC5maWx0ZXIoZSA9PiAhbmV3VmFsdWVzU3RyS2V5cy5pbmNsdWRlcyhlWzBdKSk7XHJcblxyXG4gIGNvbXBvbmVudHNUb1JlbW92ZS5mb3JFYWNoKGMgPT4ge1xyXG4gICAgdW5pZm9ybUNvbXBvbmVudENhY2hlLmRlbGV0ZVN0cktleShjWzBdKTtcclxuICB9KTtcclxuXHJcbiAgbmV3VmFsdWVzLmZvckVhY2gobncgPT4ge1xyXG4gICAgaWYgKCF1bmlmb3JtQ29tcG9uZW50Q2FjaGUuaGFzKG53LmtleSkpXHJcbiAgICAgIHVuaWZvcm1Db21wb25lbnRDYWNoZS5zZXQobncua2V5LCBudy52YWx1ZSk7XHJcbiAgfSk7XHJcbn07XHJcblxyXG4vL3RvZG9cclxuY29uc3QgZ2V0RGVmYXVsdFZhbHVlID0gKHR5cGU6IFVuaWZvcm1UeXBlKSA9PiB7XHJcbiAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICBjYXNlIFVuaWZvcm1UeXBlLkZMT0FUX1ZFQzI6XHJcbiAgICAgIHJldHVybiBbMSwgMV07XHJcbiAgICBjYXNlIFVuaWZvcm1UeXBlLkZMT0FUX1ZFQzM6XHJcbiAgICAgIHJldHVybiBbMSwgMSwgMV07XHJcbiAgICBjYXNlIFVuaWZvcm1UeXBlLkZMT0FUX1ZFQzQ6XHJcbiAgICAgIHJldHVybiBbMSwgMSwgMSwgMV07XHJcbiAgICBjYXNlIFVuaWZvcm1UeXBlLkZMT0FUX01BVDQ6XHJcbiAgICAgIHJldHVybiBbMSwgMCwgMCwgMCwgMCwgMSwgMCwgMCwgMCwgMCwgMSwgMCwgMCwgMCwgMCwgMV07XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICBhc3NlcnROZXZlcih0eXBlKTtcclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBVbmlmb3JtQmluZGluZyA9IHtcclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgdHlwZTogVW5pZm9ybVR5cGU7XHJcbiAgdmFsdWU6IE9ic2VydmFibGU8YW55PjtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVVbmlmb3JtQ29tcG9uZW50cyA9IChcclxuICBjb250ZXh0OiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsXHJcbiAgcHJvZ3JhbTogV2ViR0xQcm9ncmFtLFxyXG4gIHVuaWZvcm1zOiB7IG5hbWU6IHN0cmluZzsgdHlwZTogVW5pZm9ybVR5cGUgfVtdLFxyXG4gIHVuaWZvcm1CaW5kaW5nczogVW5pZm9ybUJpbmRpbmdbXVxyXG4pID0+IHtcclxuICBjb25zdCBjb21wb25lbnRzID0gdW5pZm9ybXMubWFwKHVuaWZvcm0gPT4ge1xyXG4gICAgY29uc3Qga2V5ID0ge1xyXG4gICAgICAuLi51bmlmb3JtLFxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBmcm9tQ2FjaGUgPSB1bmlmb3JtQ29tcG9uZW50Q2FjaGUuZ2V0KGtleSk7XHJcblxyXG4gICAgaWYgKGZyb21DYWNoZSkge1xyXG4gICAgICBmcm9tQ2FjaGUudW5pZm9ybUluZm8uYXR0YWNoVG9Qcm9ncmFtKHByb2dyYW0pO1xyXG4gICAgICByZXR1cm4geyBrZXksIHZhbHVlOiBmcm9tQ2FjaGUgfTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnN0IHVuaWZvcm1JbmZvID0gbmV3IFVuaWZvcm1JbmZvKFxyXG4gICAgICAgIGNvbnRleHQsXHJcbiAgICAgICAgcHJvZ3JhbSxcclxuICAgICAgICB1bmlmb3JtLm5hbWUsXHJcbiAgICAgICAgdW5pZm9ybS50eXBlXHJcbiAgICAgICk7XHJcblxyXG4gICAgICBjb25zdCBhcHBsaWNhYmxlQmluZGluZ3MgPSB1bmlmb3JtQmluZGluZ3MuZmlsdGVyKFxyXG4gICAgICAgIGIgPT4gYi50eXBlID09PSB1bmlmb3JtSW5mby5nZXRVbmlmb3JtVHlwZSgpXHJcbiAgICAgICk7XHJcblxyXG4gICAgICBjb25zdCB1cGRhdGVVbmlmb3JtID0gKHZhbHVlOiBhbnkpID0+IHVuaWZvcm1JbmZvLnNldFZhbHVlKHZhbHVlKTtcclxuXHJcbiAgICAgIGNvbnN0IHsgZWxlbWVudCwgZGlzcG9zZSB9ID0gYXBwbGljYWJsZUJpbmRpbmdzLmxlbmd0aFxyXG4gICAgICAgID8gY3JlYXRlU2VsZWN0aW9uQ29tcG9uZW50KFxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgY3JlYXRlQ3VzdG9tT3B0aW9uKHVuaWZvcm1JbmZvKSxcclxuICAgICAgICAgICAgICAuLi5jcmVhdGVCaW5kaW5nT3B0aW9ucyhhcHBsaWNhYmxlQmluZGluZ3MsIHVuaWZvcm1JbmZvKSxcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgdXBkYXRlVW5pZm9ybVxyXG4gICAgICAgICAgKVxyXG4gICAgICAgIDogY3JlYXRlRWRpdGFibGVDb21wb25lbnQodW5pZm9ybUluZm8sIHVwZGF0ZVVuaWZvcm0pO1xyXG5cclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBrZXksXHJcbiAgICAgICAgdmFsdWU6IHtcclxuICAgICAgICAgIGNvbXBvbmVudDogd2l0aExhYmVsKGVsZW1lbnQsIHVuaWZvcm0ubmFtZSksXHJcbiAgICAgICAgICB1bmlmb3JtSW5mbyxcclxuICAgICAgICAgIGRpc3Bvc2U6ICgpID0+IHtcclxuICAgICAgICAgICAgZGlzcG9zZT8uKCk7XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIHJlYnVpbGRDYWNoZShjb21wb25lbnRzKTtcclxuICByZXR1cm4gY29tcG9uZW50cy5tYXAodWMgPT4gdWMudmFsdWUpO1xyXG59O1xyXG5cclxuY29uc3QgY3JlYXRlQ3VzdG9tT3B0aW9uID0gKHVuaWZvcm1JbmZvOiBVbmlmb3JtSW5mbykgPT4ge1xyXG4gIHJldHVybiB7XHJcbiAgICBpZDogXCJjdXN0b21cIixcclxuICAgIGRpc3BsYXk6IFwiQ3VzdG9tXCIsXHJcbiAgICAuLi5jcmVhdGVFZGl0YWJsZUNvbXBvbmVudCh1bmlmb3JtSW5mbyksXHJcbiAgfTtcclxufTtcclxuXHJcbmNvbnN0IGNyZWF0ZUJpbmRpbmdPcHRpb25zID0gKFxyXG4gIHVuaWZvcm1CaW5kaW5nczogVW5pZm9ybUJpbmRpbmdbXSxcclxuICB1bmlmb3JtSW5mbzogVW5pZm9ybUluZm9cclxuKSA9PiB7XHJcbiAgcmV0dXJuIHVuaWZvcm1CaW5kaW5ncy5tYXAoYmluZGluZyA9PiB7XHJcbiAgICBjb25zdCBlbGVtZW50ID0gY3JlYXRlRWxlbWVudEZvclR5cGUoXHJcbiAgICAgIHVuaWZvcm1JbmZvLmdldFVuaWZvcm1UeXBlKCksXHJcbiAgICAgIGZhbHNlLFxyXG4gICAgICBiaW5kaW5nLnZhbHVlXHJcbiAgICApO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIGlkOiB1dWlkdjQoKSxcclxuICAgICAgZWxlbWVudCxcclxuICAgICAgZGlzcGxheTogYmluZGluZy5uYW1lLFxyXG4gICAgICB2YWx1ZTogYmluZGluZy52YWx1ZSxcclxuICAgIH07XHJcbiAgfSk7XHJcbn07XHJcblxyXG5jb25zdCBjcmVhdGVFZGl0YWJsZUNvbXBvbmVudCA9IChcclxuICB1bmlmb3JtSW5mbzogVW5pZm9ybUluZm8sXHJcbiAgb25DaGFuZ2U/OiAodmFsdWU6IGFueSkgPT4gdm9pZFxyXG4pID0+IHtcclxuICBjb25zdCBpbml0aWFsVmFsdWUgPSBnZXREZWZhdWx0VmFsdWUodW5pZm9ybUluZm8uZ2V0VW5pZm9ybVR5cGUoKSk7XHJcbiAgY29uc3QgY3VzdG9tVmFsdWUgPSBuZXcgT2JzZXJ2YWJsZTxhbnk+KGluaXRpYWxWYWx1ZSk7XHJcblxyXG4gIGlmIChvbkNoYW5nZSkge1xyXG4gICAgY3VzdG9tVmFsdWUuYXR0YWNoKCh2YWx1ZTogYW55KSA9PiBvbkNoYW5nZSh2YWx1ZSkpO1xyXG4gICAgb25DaGFuZ2UoaW5pdGlhbFZhbHVlKTtcclxuICB9XHJcblxyXG4gIGNvbnN0IGVsZW1lbnQgPSBjcmVhdGVFbGVtZW50Rm9yVHlwZShcclxuICAgIHVuaWZvcm1JbmZvLmdldFVuaWZvcm1UeXBlKCksXHJcbiAgICB0cnVlLFxyXG4gICAgY3VzdG9tVmFsdWVcclxuICApO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgZWxlbWVudCxcclxuICAgIHZhbHVlOiBjdXN0b21WYWx1ZSxcclxuICAgIGRpc3Bvc2U6ICgpID0+IGN1c3RvbVZhbHVlLmRldGFjaEFsbCgpLFxyXG4gIH07XHJcbn07XHJcblxyXG5jb25zdCBjcmVhdGVFbGVtZW50Rm9yVHlwZSA9IChcclxuICB1bmlmb3JtVHlwZTogVW5pZm9ybVR5cGUsXHJcbiAgZWRpdGFibGU6IGJvb2xlYW4sXHJcbiAgY3VycmVudFZhbHVlOiBPYnNlcnZhYmxlPGFueT5cclxuKSA9PiB7XHJcbiAgc3dpdGNoICh1bmlmb3JtVHlwZSkge1xyXG4gICAgY2FzZSBVbmlmb3JtVHlwZS5GTE9BVF9WRUMyOlxyXG4gICAgICByZXR1cm4gY3JlYXRlRWxlbWVudFZlY3RvcigyLCBjdXJyZW50VmFsdWUsIGVkaXRhYmxlKTtcclxuICAgIGNhc2UgVW5pZm9ybVR5cGUuRkxPQVRfVkVDMzpcclxuICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnRWZWN0b3IoMywgY3VycmVudFZhbHVlLCBlZGl0YWJsZSk7XHJcbiAgICBjYXNlIFVuaWZvcm1UeXBlLkZMT0FUX1ZFQzQ6XHJcbiAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50VmVjdG9yKDQsIGN1cnJlbnRWYWx1ZSwgZWRpdGFibGUpO1xyXG4gICAgY2FzZSBVbmlmb3JtVHlwZS5GTE9BVF9NQVQ0OlxyXG4gICAgICByZXR1cm4gY3JlYXRlRWxlbWVudE1hdHJpeCg0LCBjdXJyZW50VmFsdWUsIGVkaXRhYmxlKTtcclxuICAgIC8vY2FzZSBVbmlmb3JtVHlwZS5TQU1QTEVSXzJEOlxyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnROb3RTdXBwb3J0ZWQoKTtcclxuICB9XHJcbn07XHJcbiIsImltcG9ydCB7IEluZGV4QnVmZmVySW5mbyB9IGZyb20gXCIuL2luZGV4QnVmZmVyXCI7XHJcbmltcG9ydCB7IHJlbW92ZUxhc3QgfSBmcm9tIFwiLi4vLi4vLi4vLi4vY29tbW9uL2FycmF5XCI7XHJcbmltcG9ydCB7IGhhc1Byb3BlcnR5IH0gZnJvbSBcIi4uL3R5cGVHdWFyZHNcIjtcclxuaW1wb3J0IHsgQXR0cmlidXRlQnVmZmVySW5mbywgQXR0cmlidXRlQnVmZmVyVHlwZSB9IGZyb20gXCIuL2F0dHJpYnV0ZUJ1ZmZlclwiO1xyXG5pbXBvcnQgeyBVbmlmb3JtSW5mbywgVW5pZm9ybVR5cGUgfSBmcm9tIFwiLi91bmlmb3JtXCI7XHJcblxyXG5leHBvcnQgdHlwZSBEcmF3T3B0aW9ucyA9IHtcclxuICBkcmF3TW9kZTogXCJlbGVtZW50c1wiIHwgXCJhcnJheXNcIjtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBjb21waWxlU2hhZGVyID0gKFxyXG4gIHJlbmRlcmluZ0NvbnRleHQ6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCxcclxuICB0eXBlOiBHTGVudW0sXHJcbiAgc291cmNlOiBzdHJpbmdcclxuKTogV2ViR0xTaGFkZXIgfCB7IGVycm9yOiBzdHJpbmcgfSA9PiB7XHJcbiAgY29uc3Qgc2hhZGVyID0gcmVuZGVyaW5nQ29udGV4dC5jcmVhdGVTaGFkZXIodHlwZSk7XHJcbiAgcmVuZGVyaW5nQ29udGV4dC5zaGFkZXJTb3VyY2Uoc2hhZGVyLCBzb3VyY2UpO1xyXG4gIHJlbmRlcmluZ0NvbnRleHQuY29tcGlsZVNoYWRlcihzaGFkZXIpO1xyXG5cclxuICBjb25zdCByZXN1bHQgPSByZW5kZXJpbmdDb250ZXh0LmdldFNoYWRlclBhcmFtZXRlcihcclxuICAgIHNoYWRlcixcclxuICAgIHJlbmRlcmluZ0NvbnRleHQuQ09NUElMRV9TVEFUVVNcclxuICApO1xyXG5cclxuICBpZiAocmVzdWx0KSB7XHJcbiAgICByZXR1cm4gc2hhZGVyO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBjb25zdCBlcnJvciA9IHJlbmRlcmluZ0NvbnRleHQuZ2V0U2hhZGVySW5mb0xvZyhzaGFkZXIpO1xyXG4gICAgcmVuZGVyaW5nQ29udGV4dC5kZWxldGVTaGFkZXIoc2hhZGVyKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGVycm9yLFxyXG4gICAgfTtcclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgY29tcGlsZVNoYWRlcnNGcm9tU291cmNlID0gKFxyXG4gIGNvbnRleHQ6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCxcclxuICB2ZXJ0ZXhTaGFkZXJDb250ZW50OiBzdHJpbmcsXHJcbiAgZnJhZ21lbnRTaGFkZXJDb250ZW50OiBzdHJpbmdcclxuKSA9PiB7XHJcbiAgY29uc3QgdmVydGV4U2hhZGVyID0gY29tcGlsZVNoYWRlcihcclxuICAgIGNvbnRleHQsXHJcbiAgICBjb250ZXh0LlZFUlRFWF9TSEFERVIsXHJcbiAgICB2ZXJ0ZXhTaGFkZXJDb250ZW50XHJcbiAgKTtcclxuXHJcbiAgY29uc3QgZnJhZ21lbnRTaGFkZXIgPSBjb21waWxlU2hhZGVyKFxyXG4gICAgY29udGV4dCxcclxuICAgIGNvbnRleHQuRlJBR01FTlRfU0hBREVSLFxyXG4gICAgZnJhZ21lbnRTaGFkZXJDb250ZW50XHJcbiAgKTtcclxuXHJcbiAgbGV0IHZlcnRleEVycm9yOiBzdHJpbmcgPSB1bmRlZmluZWQ7XHJcbiAgaWYgKGhhc1Byb3BlcnR5KHZlcnRleFNoYWRlciwgXCJlcnJvclwiKSkge1xyXG4gICAgdmVydGV4RXJyb3IgPSByZW1vdmVMYXN0KHZlcnRleFNoYWRlci5lcnJvciwgMSk7XHJcbiAgfVxyXG5cclxuICBsZXQgZnJhZ21lbnRFcnJvcjogc3RyaW5nID0gdW5kZWZpbmVkO1xyXG4gIGlmIChoYXNQcm9wZXJ0eShmcmFnbWVudFNoYWRlciwgXCJlcnJvclwiKSkge1xyXG4gICAgZnJhZ21lbnRFcnJvciA9IHJlbW92ZUxhc3QoZnJhZ21lbnRTaGFkZXIuZXJyb3IsIDEpO1xyXG4gIH1cclxuXHJcbiAgaWYgKHZlcnRleEVycm9yIHx8IGZyYWdtZW50RXJyb3IpIHtcclxuICAgIC8vdG9kbyBjbGVhbnVwXHJcbiAgICByZXR1cm4gW3ZlcnRleEVycm9yLCBmcmFnbWVudEVycm9yXSBhcyBTaGFkZXJDb21waWxlRXJyb3JzO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGNyZWF0ZVByb2dyYW0oY29udGV4dCwgdmVydGV4U2hhZGVyLCBmcmFnbWVudFNoYWRlcik7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgY3JlYXRlUHJvZ3JhbSA9IChcclxuICByZW5kZXJpbmdDb250ZXh0OiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsXHJcbiAgdmVydGV4U2hhZGVyOiBXZWJHTFNoYWRlcixcclxuICBmcmFnbWVudFNoYWRlcjogV2ViR0xTaGFkZXJcclxuKSA9PiB7XHJcbiAgY29uc3QgcHJvZ3JhbSA9IHJlbmRlcmluZ0NvbnRleHQuY3JlYXRlUHJvZ3JhbSgpO1xyXG4gIHJlbmRlcmluZ0NvbnRleHQuYXR0YWNoU2hhZGVyKHByb2dyYW0sIHZlcnRleFNoYWRlcik7XHJcbiAgcmVuZGVyaW5nQ29udGV4dC5hdHRhY2hTaGFkZXIocHJvZ3JhbSwgZnJhZ21lbnRTaGFkZXIpO1xyXG4gIHJlbmRlcmluZ0NvbnRleHQubGlua1Byb2dyYW0ocHJvZ3JhbSk7XHJcblxyXG4gIGNvbnN0IHJlc3VsdCA9IHJlbmRlcmluZ0NvbnRleHQuZ2V0UHJvZ3JhbVBhcmFtZXRlcihcclxuICAgIHByb2dyYW0sXHJcbiAgICByZW5kZXJpbmdDb250ZXh0LkxJTktfU1RBVFVTXHJcbiAgKTtcclxuXHJcbiAgaWYgKHJlc3VsdCkge1xyXG4gICAgcmV0dXJuIHByb2dyYW07XHJcbiAgfSBlbHNlIHtcclxuICAgIHJlbmRlcmluZ0NvbnRleHQuZGVsZXRlUHJvZ3JhbShwcm9ncmFtKTtcclxuXHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoXHJcbiAgICAgIGBDcmVhdGluZyBwcm9ncmFtIGZhaWxlZDogJHtyZW5kZXJpbmdDb250ZXh0LmdldFByb2dyYW1JbmZvTG9nKHByb2dyYW0pfWBcclxuICAgICk7XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldFByb2dyYW1Vbmlmb3JtcyA9IChcclxuICBjb250ZXh0OiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsXHJcbiAgcHJvZ3JhbTogV2ViR0xQcm9ncmFtXHJcbikgPT4ge1xyXG4gIGNvbnN0IG51bVVuaWZvcm1zID0gY29udGV4dC5nZXRQcm9ncmFtUGFyYW1ldGVyKFxyXG4gICAgcHJvZ3JhbSxcclxuICAgIGNvbnRleHQuQUNUSVZFX1VOSUZPUk1TXHJcbiAgKTtcclxuICBjb25zdCByZXN1bHQ6IHsgbmFtZTogc3RyaW5nOyB0eXBlOiBVbmlmb3JtVHlwZSB9W10gPSBbXTtcclxuXHJcbiAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IG51bVVuaWZvcm1zOyArK2luZGV4KSB7XHJcbiAgICBjb25zdCB1bmlmb3JtID0gY29udGV4dC5nZXRBY3RpdmVVbmlmb3JtKHByb2dyYW0sIGluZGV4KTtcclxuICAgIHJlc3VsdC5wdXNoKHsgbmFtZTogdW5pZm9ybS5uYW1lLCB0eXBlOiB1bmlmb3JtLnR5cGUgfSk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gcmVzdWx0O1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldFByb2dyYW1BdHRyaWJ1dGVCdWZmZXJzID0gKFxyXG4gIGNvbnRleHQ6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCxcclxuICBwcm9ncmFtOiBXZWJHTFByb2dyYW1cclxuKSA9PiB7XHJcbiAgY29uc3QgbnVtQXR0cmlidXRlQnVmZmVycyA9IGNvbnRleHQuZ2V0UHJvZ3JhbVBhcmFtZXRlcihcclxuICAgIHByb2dyYW0sXHJcbiAgICBjb250ZXh0LkFDVElWRV9BVFRSSUJVVEVTXHJcbiAgKTtcclxuXHJcbiAgY29uc3QgcmVzdWx0OiB7IG5hbWU6IHN0cmluZzsgdHlwZTogQXR0cmlidXRlQnVmZmVyVHlwZSB9W10gPSBbXTtcclxuXHJcbiAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IG51bUF0dHJpYnV0ZUJ1ZmZlcnM7ICsraW5kZXgpIHtcclxuICAgIGNvbnN0IGF0dHJpYnV0ZUJ1ZmZlciA9IGNvbnRleHQuZ2V0QWN0aXZlQXR0cmliKHByb2dyYW0sIGluZGV4KTtcclxuICAgIHJlc3VsdC5wdXNoKHsgbmFtZTogYXR0cmlidXRlQnVmZmVyLm5hbWUsIHR5cGU6IGF0dHJpYnV0ZUJ1ZmZlci50eXBlIH0pO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHJlc3VsdDtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCByZW5kZXJQcm9ncmFtID0gKFxyXG4gIGNvbnRleHQ6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCxcclxuICBwcm9ncmFtOiBXZWJHTFByb2dyYW0sXHJcbiAgcmVuZGVySW5mbzoge1xyXG4gICAgdW5pZm9ybUluZm9zOiBVbmlmb3JtSW5mb1tdO1xyXG4gICAgYXR0cmlidXRlQnVmZmVySW5mb3M6IEF0dHJpYnV0ZUJ1ZmZlckluZm9bXTtcclxuICAgIGluZGV4QnVmZmVySW5mbzogSW5kZXhCdWZmZXJJbmZvO1xyXG4gICAgLy90ZXh0dXJlc1xyXG4gIH0sXHJcbiAgZHJhd09wdGlvbnM6IERyYXdPcHRpb25zXHJcbikgPT4ge1xyXG4gIC8vdG9kb1xyXG4gIGNvbnRleHQudXNlUHJvZ3JhbShwcm9ncmFtKTtcclxuICBjb250ZXh0LnZpZXdwb3J0KDAsIDAsIGNvbnRleHQuY2FudmFzLndpZHRoLCBjb250ZXh0LmNhbnZhcy5oZWlnaHQpO1xyXG4gIC8vY29udGV4dC5jbGVhckNvbG9yKDAsIDAsIDAsIDApO1xyXG4gIGNvbnRleHQuY2xlYXJDb2xvcigwLjAsIDAuMCwgMC4wLCAxLjApOyAvLyBDbGVhciB0byBibGFjaywgZnVsbHkgb3BhcXVlXHJcbiAgY29udGV4dC5jbGVhckRlcHRoKDEuMCk7IC8vIENsZWFyIGV2ZXJ5dGhpbmdcclxuICAvLyBnbC5lbmFibGUoZ2wuREVQVEhfVEVTVCk7ICAgICAgICAgICAvLyBFbmFibGUgZGVwdGggdGVzdGluZ1xyXG4gIGNvbnRleHQuZW5hYmxlKGNvbnRleHQuREVQVEhfVEVTVCk7XHJcblxyXG4gIGNvbnRleHQuZGVwdGhGdW5jKGNvbnRleHQuTEVRVUFMKTsgLy8gTmVhciB0aGluZ3Mgb2JzY3VyZSBmYXIgdGhpbmdzXHJcbiAgY29udGV4dC5jbGVhcihjb250ZXh0LkNPTE9SX0JVRkZFUl9CSVQgfCBjb250ZXh0LkRFUFRIX0JVRkZFUl9CSVQpO1xyXG4gIC8vY29udGV4dC5lbmFibGUoY29udGV4dC5DVUxMX0ZBQ0UpO1xyXG5cclxuICByZW5kZXJJbmZvLnVuaWZvcm1JbmZvcy5mb3JFYWNoKHUgPT4gdS5zZXRVbmlmb3JtKCkpO1xyXG4gIHJlbmRlckluZm8uYXR0cmlidXRlQnVmZmVySW5mb3MuZm9yRWFjaChhYiA9PiBhYi5zZXRBdHRyaWJ1dGVCdWZmZXIoKSk7XHJcblxyXG4gIGNvbnN0IHByaW1pdGl2ZVR5cGUgPSBjb250ZXh0LlRSSUFOR0xFUztcclxuICBjb25zdCBvZmZzZXQgPSAwO1xyXG5cclxuICBpZiAoZHJhd09wdGlvbnMuZHJhd01vZGUgPT09IFwiYXJyYXlzXCIpIHtcclxuICAgIGNvbnN0IG51bUVsZW1lbnRzID0gTWF0aC5taW4oXHJcbiAgICAgIC4uLnJlbmRlckluZm8uYXR0cmlidXRlQnVmZmVySW5mb3MubWFwKGFiID0+IGFiLmdldENvdW50KCkpXHJcbiAgICApO1xyXG4gICAgY29udGV4dC5kcmF3QXJyYXlzKHByaW1pdGl2ZVR5cGUsIG9mZnNldCwgbnVtRWxlbWVudHMpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZW5kZXJJbmZvLmluZGV4QnVmZmVySW5mby5zZXRJbmRleEJ1ZmZlcigpO1xyXG4gICAgY29udGV4dC5kcmF3RWxlbWVudHMoXHJcbiAgICAgIHByaW1pdGl2ZVR5cGUsXHJcbiAgICAgIHJlbmRlckluZm8uaW5kZXhCdWZmZXJJbmZvLmdldENvdW50KCksIC8vbnVtRWxlbWVudHMsXHJcbiAgICAgIGNvbnRleHQuVU5TSUdORURfU0hPUlQsXHJcbiAgICAgIG9mZnNldFxyXG4gICAgKTtcclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBTaGFkZXJDb21waWxlRXJyb3JzID0gW1xyXG4gIHZlcnRleFNoYWRlckVycm9yczogc3RyaW5nLFxyXG4gIGZyYWdtZW50U2hhZGVyRXJyb3JzOiBzdHJpbmdcclxuXTtcclxuZXhwb3J0IGNvbnN0IGZvcm1hdFNoYWRlckNvbXBpbGVFcnJvcnMgPSAocmVzdWx0OiBTaGFkZXJDb21waWxlRXJyb3JzKSA9PiB7XHJcbiAgY29uc3QgW3ZlcnRleFNoYWRlckVycm9ycywgZnJhZ21lbnRTaGFkZXJFcnJvcnNdID0gcmVzdWx0O1xyXG5cclxuICBjb25zdCBlcnJvcnM6IHN0cmluZ1tdID0gW107XHJcblxyXG4gIGlmICh2ZXJ0ZXhTaGFkZXJFcnJvcnMpIHtcclxuICAgIGVycm9ycy5wdXNoKFwiVkVSVEVYIFNIQURFUjpcIiwgdmVydGV4U2hhZGVyRXJyb3JzKTtcclxuICB9XHJcblxyXG4gIGlmIChmcmFnbWVudFNoYWRlckVycm9ycykge1xyXG4gICAgZXJyb3JzLnB1c2goXCJGUkFHTUVOVCBTSEFERVI6XCIsIGZyYWdtZW50U2hhZGVyRXJyb3JzKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBlcnJvcnMuam9pbihcIlxcclxcblwiKTtcclxufTtcclxuIiwiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCIuLy4uL29ic2VydmFibGVcIjtcclxuaW1wb3J0IHsgdXVpZHY0IH0gZnJvbSBcIi4uLy4uLy4uLy4uL2NvbW1vbi91dWlkXCI7XHJcbmltcG9ydCB7IGNyZWF0ZUVsZW1lbnRzRHJvcGRvd24gfSBmcm9tIFwiLi8uLi8uLi9jb21wb25lbnRzL2Ryb3Bkb3duXCI7XHJcbmltcG9ydCB7IENvbXBvc2l0ZUtleU1hcCB9IGZyb20gXCIuLi8uLi91dGlscy9jb21wb3NpdGVLZXlNYXBcIjtcclxuaW1wb3J0IHsgY3JlYXRlRGl2LCB3aXRoTGFiZWwgfSBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy93cmFwcGVyc1wiO1xyXG5pbXBvcnQgeyBBdHRyaWJ1dGVCdWZmZXJJbmZvLCBBdHRyaWJ1dGVCdWZmZXJUeXBlIH0gZnJvbSBcIi4vYXR0cmlidXRlQnVmZmVyXCI7XHJcbmltcG9ydCB7IFZlY3RvcjRBcnJheSB9IGZyb20gXCIuLi8uLi90eXBlc1wiO1xyXG5pbXBvcnQge1xyXG4gIGNyZWF0ZUVsZW1lbnRBcnJheSxcclxuICBjcmVhdGVFbGVtZW50Tm90U3VwcG9ydGVkLFxyXG4gIGNyZWF0ZVNlbGVjdGlvbkNvbXBvbmVudCxcclxufSBmcm9tIFwiLi9jb21tb25cIjtcclxuXHJcbnR5cGUgQ2FjaGVLZXkgPSB7XHJcbiAgbmFtZTogc3RyaW5nO1xyXG4gIHR5cGU6IEF0dHJpYnV0ZUJ1ZmZlclR5cGU7XHJcbn07XHJcblxyXG50eXBlIENhY2hlVmFsdWUgPSB7XHJcbiAgY29tcG9uZW50OiBIVE1MRWxlbWVudDtcclxuICBhdHRyaWJ1dGVCdWZmZXJJbmZvOiBBdHRyaWJ1dGVCdWZmZXJJbmZvO1xyXG4gIGRpc3Bvc2U6ICgpID0+IHZvaWQ7XHJcbn07XHJcblxyXG5jb25zdCBrZXlTZWxlY3RvciA9IChrZXk6IENhY2hlS2V5KTogc3RyaW5nID0+IGAke2tleS5uYW1lfTske2tleS50eXBlfWA7XHJcbmNvbnN0IGNvbXBvbmVudENhY2hlID0gbmV3IENvbXBvc2l0ZUtleU1hcDxDYWNoZUtleSwgQ2FjaGVWYWx1ZT4oa2V5U2VsZWN0b3IpO1xyXG5cclxuY29uc3QgcmVidWlsZENhY2hlID0gKG5ld1ZhbHVlczogeyBrZXk6IENhY2hlS2V5OyB2YWx1ZTogQ2FjaGVWYWx1ZSB9W10pID0+IHtcclxuICBjb25zdCBuZXdWYWx1ZXNTdHJLZXlzID0gbmV3VmFsdWVzLm1hcCh2ID0+IGtleVNlbGVjdG9yKHYua2V5KSk7XHJcbiAgY29uc3QgY29tcG9uZW50c1RvUmVtb3ZlID0gY29tcG9uZW50Q2FjaGVcclxuICAgIC5lbnRyaWVzU3RyS2V5KClcclxuICAgIC5maWx0ZXIoZSA9PiAhbmV3VmFsdWVzU3RyS2V5cy5pbmNsdWRlcyhlWzBdKSk7XHJcblxyXG4gIGNvbXBvbmVudHNUb1JlbW92ZS5mb3JFYWNoKGMgPT4ge1xyXG4gICAgY1sxXS5kaXNwb3NlKCk7XHJcbiAgICBjb21wb25lbnRDYWNoZS5kZWxldGVTdHJLZXkoY1swXSk7XHJcbiAgfSk7XHJcblxyXG4gIG5ld1ZhbHVlcy5mb3JFYWNoKG53ID0+IHtcclxuICAgIGlmICghY29tcG9uZW50Q2FjaGUuaGFzKG53LmtleSkpIGNvbXBvbmVudENhY2hlLnNldChudy5rZXksIG53LnZhbHVlKTtcclxuICB9KTtcclxufTtcclxuXHJcbmNvbnN0IGdldERlZmF1bHRWYWx1ZSA9ICh0eXBlOiBBdHRyaWJ1dGVCdWZmZXJUeXBlKSA9PiB7XHJcbiAgcmV0dXJuIFtcclxuICAgIFswLCAwLCAwLCAxXSxcclxuICAgIFswLCAwLjUsIDAsIDFdLFxyXG4gICAgWzAuOSwgMCwgMCwgMV0sXHJcbiAgICBbMCwgMC41LCAwLCAxXSxcclxuICAgIFswLjcsIDAsIDAsIDFdLFxyXG4gICAgWzAuNywgMC41LCAwLCAxXSxcclxuICBdO1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgQXR0cmlidXRlQnVmZmVyQmluZGluZyA9IHtcclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgdHlwZTogQXR0cmlidXRlQnVmZmVyVHlwZTtcclxuICB2YWx1ZTogT2JzZXJ2YWJsZTxhbnk+O1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGNyZWF0ZUF0dHJpYnV0ZUJ1ZmZlckNvbXBvbmVudHMgPSAoXHJcbiAgY29udGV4dDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LFxyXG4gIHByb2dyYW06IFdlYkdMUHJvZ3JhbSxcclxuICBhdHRyaWJ1dGVCdWZmZXJzOiB7IG5hbWU6IHN0cmluZzsgdHlwZTogQXR0cmlidXRlQnVmZmVyVHlwZSB9W10sXHJcbiAgYXR0cmlidXRlQnVmZmVyQmluZGluZ3M6IEF0dHJpYnV0ZUJ1ZmZlckJpbmRpbmdbXVxyXG4pID0+IHtcclxuICBjb25zdCBjb21wb25lbnRzID0gYXR0cmlidXRlQnVmZmVycy5tYXAoYXR0cmlidXRlQnVmZmVyID0+IHtcclxuICAgIGNvbnN0IGtleSA9IHtcclxuICAgICAgLi4uYXR0cmlidXRlQnVmZmVyLFxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBmcm9tQ2FjaGUgPSBjb21wb25lbnRDYWNoZS5nZXQoa2V5KTtcclxuXHJcbiAgICBpZiAoZnJvbUNhY2hlKSB7XHJcbiAgICAgIGZyb21DYWNoZS5hdHRyaWJ1dGVCdWZmZXJJbmZvLmF0dGFjaFRvUHJvZ3JhbShwcm9ncmFtKTtcclxuICAgICAgcmV0dXJuIHsga2V5LCB2YWx1ZTogZnJvbUNhY2hlIH07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zdCBhdHRyaWJ1dGVCdWZmZXJJbmZvID0gbmV3IEF0dHJpYnV0ZUJ1ZmZlckluZm8oXHJcbiAgICAgICAgY29udGV4dCxcclxuICAgICAgICBwcm9ncmFtLFxyXG4gICAgICAgIGF0dHJpYnV0ZUJ1ZmZlci5uYW1lLFxyXG4gICAgICAgIGF0dHJpYnV0ZUJ1ZmZlci50eXBlXHJcbiAgICAgICk7XHJcblxyXG4gICAgICBjb25zdCBhcHBsaWNhYmxlQmluZGluZ3MgPSBhdHRyaWJ1dGVCdWZmZXJCaW5kaW5ncy5maWx0ZXIoXHJcbiAgICAgICAgYiA9PiBiLnR5cGUgPT09IGF0dHJpYnV0ZUJ1ZmZlckluZm8uZ2V0QXR0cmlidXRlQnVmZmVyVHlwZSgpXHJcbiAgICAgICk7XHJcblxyXG4gICAgICBjb25zdCB1cGRhdGVCdWZmZXIgPSAodmFsdWU6IG51bWJlcltdW10pID0+XHJcbiAgICAgICAgYXR0cmlidXRlQnVmZmVySW5mby5zZXRWYWx1ZSh2YWx1ZSk7XHJcblxyXG4gICAgICBjb25zdCB7IGVsZW1lbnQsIGRpc3Bvc2UgfSA9IGFwcGxpY2FibGVCaW5kaW5ncy5sZW5ndGhcclxuICAgICAgICA/IGNyZWF0ZVNlbGVjdGlvbkNvbXBvbmVudChcclxuICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgIGNyZWF0ZUN1c3RvbU9wdGlvbihhdHRyaWJ1dGVCdWZmZXJJbmZvKSxcclxuICAgICAgICAgICAgICAuLi5jcmVhdGVCaW5kaW5nT3B0aW9ucyhhcHBsaWNhYmxlQmluZGluZ3MsIGF0dHJpYnV0ZUJ1ZmZlckluZm8pLFxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICB1cGRhdGVCdWZmZXJcclxuICAgICAgICAgIClcclxuICAgICAgICA6IGNyZWF0ZUVkaXRhYmxlQ29tcG9uZW50KGF0dHJpYnV0ZUJ1ZmZlckluZm8sIHVwZGF0ZUJ1ZmZlcik7XHJcblxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIGtleSxcclxuICAgICAgICB2YWx1ZToge1xyXG4gICAgICAgICAgY29tcG9uZW50OiB3aXRoTGFiZWwoZWxlbWVudCwgYXR0cmlidXRlQnVmZmVyLm5hbWUpLFxyXG4gICAgICAgICAgYXR0cmlidXRlQnVmZmVySW5mbyxcclxuICAgICAgICAgIGRpc3Bvc2U6ICgpID0+IHtcclxuICAgICAgICAgICAgYXR0cmlidXRlQnVmZmVySW5mby5kZWxldGVCdWZmZXIoKTtcclxuICAgICAgICAgICAgZGlzcG9zZT8uKCk7XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIHJlYnVpbGRDYWNoZShjb21wb25lbnRzKTtcclxuICByZXR1cm4gY29tcG9uZW50cy5tYXAoYyA9PiBjLnZhbHVlKTtcclxufTtcclxuXHJcbmNvbnN0IGNyZWF0ZUN1c3RvbU9wdGlvbiA9IChhdHRyaWJ1dGVCdWZmZXJJbmZvOiBBdHRyaWJ1dGVCdWZmZXJJbmZvKSA9PiB7XHJcbiAgcmV0dXJuIHtcclxuICAgIGlkOiBcImN1c3RvbVwiLFxyXG4gICAgZGlzcGxheTogXCJDdXN0b21cIixcclxuICAgIC4uLmNyZWF0ZUVkaXRhYmxlQ29tcG9uZW50KGF0dHJpYnV0ZUJ1ZmZlckluZm8pLFxyXG4gIH07XHJcbn07XHJcblxyXG5jb25zdCBjcmVhdGVCaW5kaW5nT3B0aW9ucyA9IChcclxuICBhdHRyaWJ1dGVCdWZmZXJCaW5kaW5nczogQXR0cmlidXRlQnVmZmVyQmluZGluZ1tdLFxyXG4gIGF0dHJpYnV0ZUJ1ZmZlckluZm86IEF0dHJpYnV0ZUJ1ZmZlckluZm9cclxuKSA9PiB7XHJcbiAgcmV0dXJuIGF0dHJpYnV0ZUJ1ZmZlckJpbmRpbmdzLm1hcChiaW5kaW5nID0+IHtcclxuICAgIGNvbnN0IGVsZW1lbnQgPSBjcmVhdGVFbGVtZW50Rm9yVHlwZShcclxuICAgICAgYXR0cmlidXRlQnVmZmVySW5mby5nZXRBdHRyaWJ1dGVCdWZmZXJUeXBlKCksXHJcbiAgICAgIGZhbHNlLFxyXG4gICAgICBiaW5kaW5nLnZhbHVlXHJcbiAgICApO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIGlkOiB1dWlkdjQoKSxcclxuICAgICAgZWxlbWVudCxcclxuICAgICAgZGlzcGxheTogYmluZGluZy5uYW1lLFxyXG4gICAgICB2YWx1ZTogYmluZGluZy52YWx1ZSxcclxuICAgIH07XHJcbiAgfSk7XHJcbn07XHJcblxyXG5jb25zdCBjcmVhdGVFZGl0YWJsZUNvbXBvbmVudCA9IChcclxuICBhdHRyaWJ1dGVCdWZmZXJJbmZvOiBBdHRyaWJ1dGVCdWZmZXJJbmZvLFxyXG4gIG9uQ2hhbmdlPzogKHZhbHVlOiBhbnkpID0+IHZvaWRcclxuKSA9PiB7XHJcbiAgY29uc3QgaW5pdGlhbFZhbHVlID0gZ2V0RGVmYXVsdFZhbHVlKFxyXG4gICAgYXR0cmlidXRlQnVmZmVySW5mby5nZXRBdHRyaWJ1dGVCdWZmZXJUeXBlKClcclxuICApO1xyXG4gIGNvbnN0IGN1c3RvbVZhbHVlID0gbmV3IE9ic2VydmFibGU8YW55Pihpbml0aWFsVmFsdWUpO1xyXG5cclxuICBpZiAob25DaGFuZ2UpIHtcclxuICAgIGN1c3RvbVZhbHVlLmF0dGFjaCgodmFsdWU6IGFueSkgPT4gb25DaGFuZ2UodmFsdWUpKTtcclxuICAgIG9uQ2hhbmdlKGluaXRpYWxWYWx1ZSk7XHJcbiAgfVxyXG5cclxuICBjb25zdCBlbGVtZW50ID0gY3JlYXRlRWxlbWVudEZvclR5cGUoXHJcbiAgICBhdHRyaWJ1dGVCdWZmZXJJbmZvLmdldEF0dHJpYnV0ZUJ1ZmZlclR5cGUoKSxcclxuICAgIHRydWUsXHJcbiAgICBjdXN0b21WYWx1ZVxyXG4gICk7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBlbGVtZW50LFxyXG4gICAgdmFsdWU6IGN1c3RvbVZhbHVlLFxyXG4gICAgZGlzcG9zZTogKCkgPT4gY3VzdG9tVmFsdWUuZGV0YWNoQWxsKCksXHJcbiAgfTtcclxufTtcclxuXHJcbmNvbnN0IGNyZWF0ZUVsZW1lbnRGb3JUeXBlID0gKFxyXG4gIGF0dHJpYnV0ZUJ1ZmZlclR5cGU6IEF0dHJpYnV0ZUJ1ZmZlclR5cGUsXHJcbiAgZWRpdGFibGU6IGJvb2xlYW4sXHJcbiAgY3VycmVudFZhbHVlOiBPYnNlcnZhYmxlPGFueT5cclxuKSA9PiB7XHJcbiAgc3dpdGNoIChhdHRyaWJ1dGVCdWZmZXJUeXBlKSB7XHJcbiAgICBjYXNlIEF0dHJpYnV0ZUJ1ZmZlclR5cGUuRkxPQVRfVkVDNDpcclxuICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnRBcnJheSg0LCBjdXJyZW50VmFsdWUsIGVkaXRhYmxlKTtcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50Tm90U3VwcG9ydGVkKCk7XHJcbiAgfVxyXG59O1xyXG4iLCJpbXBvcnQgeyBvYnNlcnZlRWxlbWVudEJvdW5kaW5nUmVjdCB9IGZyb20gXCIuLi91dGlscy9odG1sXCI7XHJcbmV4cG9ydCBjb25zdCBjcmVhdGVXZWJHTENhbnZhcyA9IChcclxuICBjbGFzc05hbWU6IHN0cmluZ1xyXG4pOiBbXHJcbiAgSFRNTENhbnZhc0VsZW1lbnQsXHJcbiAge1xyXG4gICAgY29udGV4dDogV2ViR0xSZW5kZXJpbmdDb250ZXh0O1xyXG4gICAgZ2V0U2l6ZTogKCkgPT4geyB3aWR0aDogbnVtYmVyOyBoZWlnaHQ6IG51bWJlciB9O1xyXG4gIH1cclxuXSA9PiB7XHJcbiAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcclxuICBjYW52YXMuY2xhc3NOYW1lID0gY2xhc3NOYW1lO1xyXG4gIGNvbnN0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dChcIndlYmdsXCIpO1xyXG4gIGxldCB3aWR0aCA9IDA7XHJcbiAgbGV0IGhlaWdodCA9IDA7XHJcblxyXG4gIG9ic2VydmVFbGVtZW50Qm91bmRpbmdSZWN0KGNhbnZhcywgcmVjdCA9PiB7XHJcbiAgICBjYW52YXMud2lkdGggPSByZWN0LndpZHRoO1xyXG4gICAgY2FudmFzLmhlaWdodCA9IHJlY3QuaGVpZ2h0O1xyXG4gICAgd2lkdGggPSByZWN0LndpZHRoO1xyXG4gICAgaGVpZ2h0ID0gcmVjdC5oZWlnaHQ7XHJcbiAgfSk7XHJcblxyXG4gIGlmICghY29udGV4dCkge1xyXG4gICAgLy90b2RvIG1vdmUgdG8gZXJyb3JzXHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmFibGUgdG8gY3JlYXRlIHdlYmdsIGNvbnRleHRcIik7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gW1xyXG4gICAgY2FudmFzLFxyXG4gICAge1xyXG4gICAgICBjb250ZXh0LFxyXG4gICAgICBnZXRTaXplOiAoKSA9PiAoeyB3aWR0aCwgaGVpZ2h0IH0pLFxyXG4gICAgfSxcclxuICBdO1xyXG59O1xyXG4iLCJleHBvcnQgY29uc3Qgb2JzZXJ2ZUVsZW1lbnRCb3VuZGluZ1JlY3QgPSAoXHJcbiAgZWxlbWVudDogRWxlbWVudCxcclxuICBjYWxsYmFjazogKHJlY3RhbmdsZToge1xyXG4gICAgeDogbnVtYmVyO1xyXG4gICAgeTogbnVtYmVyO1xyXG4gICAgd2lkdGg6IG51bWJlcjtcclxuICAgIGhlaWdodDogbnVtYmVyO1xyXG4gIH0pID0+IHZvaWRcclxuKTogKCgpID0+IHZvaWQpID0+IHtcclxuICBjb25zdCByZXNpemVPYnNlcnZlciA9IG5ldyBSZXNpemVPYnNlcnZlcihlbGVtZW50cyA9PiB7XHJcbiAgICBjb25zdCBvYnNlcnZlckVudHJ5ID0gZWxlbWVudHMuZmluZChlID0+IGUudGFyZ2V0ID09PSBlbGVtZW50KTtcclxuXHJcbiAgICBpZiAob2JzZXJ2ZXJFbnRyeSkge1xyXG4gICAgICBjb25zdCBkb21SZWN0ID0gb2JzZXJ2ZXJFbnRyeS50YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgIGNhbGxiYWNrKHtcclxuICAgICAgICB4OiBkb21SZWN0LngsXHJcbiAgICAgICAgeTogZG9tUmVjdC55LFxyXG4gICAgICAgIHdpZHRoOiBkb21SZWN0LndpZHRoLFxyXG4gICAgICAgIGhlaWdodDogZG9tUmVjdC5oZWlnaHQsXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICByZXNpemVPYnNlcnZlci5vYnNlcnZlKGVsZW1lbnQpO1xyXG4gIHJldHVybiAoKSA9PiByZXNpemVPYnNlcnZlci5kaXNjb25uZWN0KCk7XHJcbn07XHJcbiIsImltcG9ydCB7IHJlbW92ZSB9IGZyb20gXCIuLi9hcnJheVwiO1xyXG5pbXBvcnQgeyB1dWlkdjQgfSBmcm9tIFwiLi4vdXVpZFwiO1xyXG5pbXBvcnQgeyBNZXNzYWdlUmVzcG9uc2UgfSBmcm9tIFwiLi9tZXNzYWdlc1wiO1xyXG5pbXBvcnQgeyB2c2NvZGVBcGkgfSBmcm9tIFwiLi92c2NvZGVBcGlcIjtcclxuXHJcbnR5cGUgUmVzcG9uc2VMaXN0ZW5lciA9IChtZXNzYWdlOiBNZXNzYWdlUmVzcG9uc2UpID0+IHZvaWQ7XHJcblxyXG5leHBvcnQgY2xhc3MgVmlld2VyRW5kcG9pbnQge1xyXG4gIGV2ZW50TGlzdGVuZXJzOiBSZXNwb25zZUxpc3RlbmVyW10gPSBbXTtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgZXZlbnQgPT4ge1xyXG4gICAgICB0aGlzLmV2ZW50TGlzdGVuZXJzLmZvckVhY2gobGlzdGVuZXIgPT4gbGlzdGVuZXIoZXZlbnQuZGF0YSkpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBnZXRTaGFkZXJEb2N1bWVudHMoKSB7XHJcbiAgICBjb25zdCBtZXNzYWdlSWQgPSB1dWlkdjQoKTtcclxuXHJcbiAgICB2c2NvZGVBcGkucG9zdE1lc3NhZ2Uoe1xyXG4gICAgICB0eXBlOiBcImdldFNoYWRlckRvY3VtZW50c1wiLFxyXG4gICAgICBpZDogbWVzc2FnZUlkLFxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPHsgZmlsZVBhdGg6IHN0cmluZzsgZmlsZU5hbWU6IHN0cmluZyB9W10+KHJlc29sdmUgPT4ge1xyXG4gICAgICBjb25zdCBsaXN0ZW5lciA9IChtZXNzYWdlOiBNZXNzYWdlUmVzcG9uc2UpID0+IHtcclxuICAgICAgICBpZiAobWVzc2FnZS50eXBlID09PSBcImdldFNoYWRlckRvY3VtZW50c1wiICYmIG1lc3NhZ2UuaWQgPT09IG1lc3NhZ2VJZCkge1xyXG4gICAgICAgICAgcmVzb2x2ZShtZXNzYWdlLnBheWxvYWQuZmlsZXMpO1xyXG4gICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcihsaXN0ZW5lcik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgdGhpcy5ldmVudExpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZ2V0RG9jdW1lbnRUZXh0KGZpbGVOYW1lOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IG1lc3NhZ2VJZCA9IHV1aWR2NCgpO1xyXG5cclxuICAgIHZzY29kZUFwaS5wb3N0TWVzc2FnZSh7XHJcbiAgICAgIHR5cGU6IFwiZ2V0RG9jdW1lbnRUZXh0XCIsXHJcbiAgICAgIGlkOiBtZXNzYWdlSWQsXHJcbiAgICAgIHBheWxvYWQ6IHsgZmlsZU5hbWUgfSxcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZTxzdHJpbmc+KHJlc29sdmUgPT4ge1xyXG4gICAgICBjb25zdCBsaXN0ZW5lciA9IChtZXNzYWdlOiBNZXNzYWdlUmVzcG9uc2UpID0+IHtcclxuICAgICAgICBpZiAobWVzc2FnZS50eXBlID09PSBcImdldERvY3VtZW50VGV4dFwiICYmIG1lc3NhZ2UuaWQgPT09IG1lc3NhZ2VJZCkge1xyXG4gICAgICAgICAgcmVzb2x2ZShtZXNzYWdlLnBheWxvYWQudGV4dCk7XHJcbiAgICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKGxpc3RlbmVyKTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcblxyXG4gICAgICB0aGlzLmV2ZW50TGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBzdWJzY3JpYmVUb0RvY3VtZW50U2F2ZShcclxuICAgIGZpbGVQYXRoOiBzdHJpbmcsXHJcbiAgICBjYWxsYmFjazogKG5ld0NvbnRlbnQ6IHN0cmluZykgPT4gdm9pZFxyXG4gICk6ICgpID0+IHZvaWQge1xyXG4gICAgdnNjb2RlQXBpLnBvc3RNZXNzYWdlKHtcclxuICAgICAgdHlwZTogXCJzdWJzY3JpYmVUb0RvY3VtZW50VGV4dENoYW5nZVwiLFxyXG4gICAgICBwYXlsb2FkOiB7IGZpbGVOYW1lOiBmaWxlUGF0aCB9LFxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgbGlzdGVuZXIgPSAobWVzc2FnZTogTWVzc2FnZVJlc3BvbnNlKSA9PiB7XHJcbiAgICAgIGlmIChcclxuICAgICAgICBtZXNzYWdlLnR5cGUgPT09IFwib25Eb2N1bWVudFRleHRDaGFuZ2VcIiAmJlxyXG4gICAgICAgIG1lc3NhZ2UucGF5bG9hZC5maWxlUGF0aCA9PT0gZmlsZVBhdGhcclxuICAgICAgKSB7XHJcbiAgICAgICAgY2FsbGJhY2sobWVzc2FnZS5wYXlsb2FkLnRleHQpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuZXZlbnRMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XHJcbiAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKGxpc3RlbmVyKTtcclxuICAgICAgdnNjb2RlQXBpLnBvc3RNZXNzYWdlKHtcclxuICAgICAgICB0eXBlOiBcInVuc3Vic2NyaWJlVG9Eb2N1bWVudFRleHRDaGFuZ2VcIixcclxuICAgICAgICBwYXlsb2FkOiB7IGZpbGVOYW1lOiBmaWxlUGF0aCB9LFxyXG4gICAgICB9KTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHJlbW92ZUxpc3RlbmVyKGxpc3RlbmVyOiBSZXNwb25zZUxpc3RlbmVyKSB7XHJcbiAgICByZW1vdmUodGhpcy5ldmVudExpc3RlbmVycywgbGlzdGVuZXIpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBWZWN0b3I0QXJyYXkgfSBmcm9tIFwiLi90eXBlc1wiO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcIi4vdXRpbHMvb2JzZXJ2YWJsZVwiO1xyXG5pbXBvcnQgeyBBdHRyaWJ1dGVCdWZmZXJUeXBlIH0gZnJvbSBcIi4vdXRpbHMvd2ViZ2wvYXR0cmlidXRlQnVmZmVyXCI7XHJcblxyXG50eXBlIE1lc2hJbmZvID0ge1xyXG4gIGRpc3BsYXk6IHN0cmluZztcclxuICBwb3NpdGlvbnM6IFZlY3RvcjRBcnJheVtdO1xyXG4gIGNvbG9yczogVmVjdG9yNEFycmF5W107XHJcbiAgaW5kaWNlczogbnVtYmVyW107XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgcmVwZWF0NFRpbWVzID0gPFQ+KGFycmF5OiBUW10pID0+IHtcclxuICByZXR1cm4gW10uY29uY2F0KGFycmF5LCBhcnJheSwgYXJyYXksIGFycmF5KTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBtZXNoZXMgPSBuZXcgTWFwPHN0cmluZywgTWVzaEluZm8+KFtcclxuICBbXHJcbiAgICBcImN1YmVcIixcclxuICAgIHtcclxuICAgICAgZGlzcGxheTogXCJDdWJlXCIsXHJcbiAgICAgIHBvc2l0aW9uczogW1xyXG4gICAgICAgIC8vIEZyb250IGZhY2VcclxuICAgICAgICBbLTAuNSwgLTAuNSwgMC41LCAxXSxcclxuICAgICAgICBbMC41LCAtMC41LCAwLjUsIDFdLFxyXG4gICAgICAgIFswLjUsIDAuNSwgMC41LCAxXSxcclxuICAgICAgICBbLTAuNSwgMC41LCAwLjUsIDFdLFxyXG5cclxuICAgICAgICAvLyBCYWNrIGZhY2VcclxuICAgICAgICBbLTAuNSwgLTAuNSwgLTAuNSwgMV0sXHJcbiAgICAgICAgWy0wLjUsIDAuNSwgLTAuNSwgMV0sXHJcbiAgICAgICAgWzAuNSwgMC41LCAtMC41LCAxXSxcclxuICAgICAgICBbMC41LCAtMC41LCAtMC41LCAxXSxcclxuXHJcbiAgICAgICAgLy8gVG9wIGZhY2VcclxuICAgICAgICBbLTAuNSwgMC41LCAtMC41LCAxXSxcclxuICAgICAgICBbLTAuNSwgMC41LCAwLjUsIDFdLFxyXG4gICAgICAgIFswLjUsIDAuNSwgMC41LCAxXSxcclxuICAgICAgICBbMC41LCAwLjUsIC0wLjUsIDFdLFxyXG5cclxuICAgICAgICAvLyBCb3R0b20gZmFjZVxyXG4gICAgICAgIFstMC41LCAtMC41LCAtMC41LCAxXSxcclxuICAgICAgICBbMC41LCAtMC41LCAtMC41LCAxXSxcclxuICAgICAgICBbMC41LCAtMC41LCAwLjUsIDFdLFxyXG4gICAgICAgIFstMC41LCAtMC41LCAwLjUsIDFdLFxyXG5cclxuICAgICAgICAvLyBSaWdodCBmYWNlXHJcbiAgICAgICAgWzAuNSwgLTAuNSwgLTAuNSwgMV0sXHJcbiAgICAgICAgWzAuNSwgMC41LCAtMC41LCAxXSxcclxuICAgICAgICBbMC41LCAwLjUsIDAuNSwgMV0sXHJcbiAgICAgICAgWzAuNSwgLTAuNSwgMC41LCAxXSxcclxuXHJcbiAgICAgICAgLy8gTGVmdCBmYWNlXHJcbiAgICAgICAgWy0wLjUsIC0wLjUsIC0wLjUsIDFdLFxyXG4gICAgICAgIFstMC41LCAtMC41LCAwLjUsIDFdLFxyXG4gICAgICAgIFstMC41LCAwLjUsIDAuNSwgMV0sXHJcbiAgICAgICAgWy0wLjUsIDAuNSwgLTAuNSwgMV0sXHJcbiAgICAgIF0sXHJcbiAgICAgIGNvbG9yczogW1xyXG4gICAgICAgIC4uLnJlcGVhdDRUaW1lcyhbMS4wLCAxLjAsIDEuMCwgMS4wXSksIC8vIEZyb250IGZhY2U6IHdoaXRlXHJcbiAgICAgICAgLi4ucmVwZWF0NFRpbWVzKFsxLjAsIDAuMCwgMC4wLCAxLjBdKSwgLy8gQmFjayBmYWNlOiByZWRcclxuICAgICAgICAuLi5yZXBlYXQ0VGltZXMoWzAuMCwgMS4wLCAwLjAsIDEuMF0pLCAvLyBUb3AgZmFjZTogZ3JlZW5cclxuICAgICAgICAuLi5yZXBlYXQ0VGltZXMoWzAuMCwgMC4wLCAxLjAsIDEuMF0pLCAvLyBCb3R0b20gZmFjZTogYmx1ZVxyXG4gICAgICAgIC4uLnJlcGVhdDRUaW1lcyhbMS4wLCAxLjAsIDAuMCwgMS4wXSksIC8vIFJpZ2h0IGZhY2U6IHllbGxvd1xyXG4gICAgICAgIC4uLnJlcGVhdDRUaW1lcyhbMS4wLCAwLjAsIDEuMCwgMS4wXSksIC8vIExlZnQgZmFjZTogcHVycGxlXHJcbiAgICAgIF0sXHJcbiAgICAgIGluZGljZXM6IFtcclxuICAgICAgICAwLFxyXG4gICAgICAgIDEsXHJcbiAgICAgICAgMixcclxuICAgICAgICAwLFxyXG4gICAgICAgIDIsXHJcbiAgICAgICAgMywgLy8gZnJvbnRcclxuICAgICAgICA0LFxyXG4gICAgICAgIDUsXHJcbiAgICAgICAgNixcclxuICAgICAgICA0LFxyXG4gICAgICAgIDYsXHJcbiAgICAgICAgNywgLy8gYmFja1xyXG4gICAgICAgIDgsXHJcbiAgICAgICAgOSxcclxuICAgICAgICAxMCxcclxuICAgICAgICA4LFxyXG4gICAgICAgIDEwLFxyXG4gICAgICAgIDExLCAvLyB0b3BcclxuICAgICAgICAxMixcclxuICAgICAgICAxMyxcclxuICAgICAgICAxNCxcclxuICAgICAgICAxMixcclxuICAgICAgICAxNCxcclxuICAgICAgICAxNSwgLy8gYm90dG9tXHJcbiAgICAgICAgMTYsXHJcbiAgICAgICAgMTcsXHJcbiAgICAgICAgMTgsXHJcbiAgICAgICAgMTYsXHJcbiAgICAgICAgMTgsXHJcbiAgICAgICAgMTksIC8vIHJpZ2h0XHJcbiAgICAgICAgMjAsXHJcbiAgICAgICAgMjEsXHJcbiAgICAgICAgMjIsXHJcbiAgICAgICAgMjAsXHJcbiAgICAgICAgMjIsXHJcbiAgICAgICAgMjMsIC8vIGxlZnRcclxuICAgICAgXSxcclxuICAgIH0sXHJcbiAgXSxcclxuICBbXHJcbiAgICBcInBsYW5lXCIsXHJcbiAgICB7XHJcbiAgICAgIGRpc3BsYXk6IFwiUGxhbmVcIixcclxuICAgICAgcG9zaXRpb25zOiBbXHJcbiAgICAgICAgWy0wLjUsIC0wLjUsIDAsIDFdLFxyXG4gICAgICAgIFswLjUsIC0wLjUsIDAsIDFdLFxyXG4gICAgICAgIFswLjUsIDAuNSwgMCwgMV0sXHJcbiAgICAgICAgWy0wLjUsIDAuNSwgMCwgMV0sXHJcbiAgICAgIF0sXHJcbiAgICAgIGNvbG9yczogcmVwZWF0NFRpbWVzKFsxLjAsIDEuMCwgMS4wLCAxLjBdKSxcclxuICAgICAgaW5kaWNlczogWzAsIDEsIDIsIDAsIDIsIDNdLFxyXG4gICAgfSxcclxuICBdLFxyXG5dKTtcclxuXHJcbmNvbnNvbGUubG9nKG1lc2hlcyk7XHJcblxyXG5leHBvcnQgY29uc3QgY3JlYXRlTWVzaEJpbmRpbmdzID0gKCkgPT5cclxuICBuZXcgTWFwKFtcclxuICAgIFtcclxuICAgICAgXCJwb3NpdGlvbnNcIixcclxuICAgICAge1xyXG4gICAgICAgIG5hbWU6IFwiQmluZGluZyAtIE1lc2ggcG9zaXRpb25zXCIsXHJcbiAgICAgICAgdHlwZTogQXR0cmlidXRlQnVmZmVyVHlwZS5GTE9BVF9WRUM0LFxyXG4gICAgICAgIHZhbHVlOiBuZXcgT2JzZXJ2YWJsZShbXSksXHJcbiAgICAgIH0sXHJcbiAgICBdLFxyXG4gICAgW1xyXG4gICAgICBcImNvbG9yc1wiLFxyXG4gICAgICB7XHJcbiAgICAgICAgbmFtZTogXCJCaW5kaW5nIC0gTWVzaCBjb2xvcnNcIixcclxuICAgICAgICB0eXBlOiBBdHRyaWJ1dGVCdWZmZXJUeXBlLkZMT0FUX1ZFQzQsXHJcbiAgICAgICAgdmFsdWU6IG5ldyBPYnNlcnZhYmxlKFtdKSxcclxuICAgICAgfSxcclxuICAgIF0sXHJcbiAgXSk7XHJcbiIsIi8vZ2wtbWF0cml4IGZ1bmN0aW9uc1xyXG5leHBvcnQgbmFtZXNwYWNlIG1hdDQge1xyXG4gIGNvbnN0IEVQU0lMT04gPSAwLjAwMDAwMTtcclxuICBleHBvcnQgZnVuY3Rpb24gY3JlYXRlKCkge1xyXG4gICAgY29uc3Qgb3V0ID0gbmV3IEZsb2F0MzJBcnJheSgxNik7XHJcbiAgICBvdXRbMF0gPSAxO1xyXG4gICAgb3V0WzVdID0gMTtcclxuICAgIG91dFsxMF0gPSAxO1xyXG4gICAgb3V0WzE1XSA9IDE7XHJcbiAgICByZXR1cm4gb3V0O1xyXG4gIH1cclxuICBleHBvcnQgZnVuY3Rpb24gcGVyc3BlY3RpdmUoXHJcbiAgICBvdXQ6IGFueSxcclxuICAgIGZvdnk6IGFueSxcclxuICAgIGFzcGVjdDogYW55LFxyXG4gICAgbmVhcjogYW55LFxyXG4gICAgZmFyOiBhbnlcclxuICApIHtcclxuICAgIGxldCBmID0gMS4wIC8gTWF0aC50YW4oZm92eSAvIDIpLFxyXG4gICAgICBuZjtcclxuICAgIG91dFswXSA9IGYgLyBhc3BlY3Q7XHJcbiAgICBvdXRbMV0gPSAwO1xyXG4gICAgb3V0WzJdID0gMDtcclxuICAgIG91dFszXSA9IDA7XHJcbiAgICBvdXRbNF0gPSAwO1xyXG4gICAgb3V0WzVdID0gZjtcclxuICAgIG91dFs2XSA9IDA7XHJcbiAgICBvdXRbN10gPSAwO1xyXG4gICAgb3V0WzhdID0gMDtcclxuICAgIG91dFs5XSA9IDA7XHJcbiAgICBvdXRbMTFdID0gLTE7XHJcbiAgICBvdXRbMTJdID0gMDtcclxuICAgIG91dFsxM10gPSAwO1xyXG4gICAgb3V0WzE1XSA9IDA7XHJcblxyXG4gICAgaWYgKGZhciAhPSBudWxsICYmIGZhciAhPT0gSW5maW5pdHkpIHtcclxuICAgICAgbmYgPSAxIC8gKG5lYXIgLSBmYXIpO1xyXG4gICAgICBvdXRbMTBdID0gKGZhciArIG5lYXIpICogbmY7XHJcbiAgICAgIG91dFsxNF0gPSAyICogZmFyICogbmVhciAqIG5mO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgb3V0WzEwXSA9IC0xO1xyXG4gICAgICBvdXRbMTRdID0gLTIgKiBuZWFyO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBvdXQ7XHJcbiAgfVxyXG4gIGZ1bmN0aW9uIGlkZW50aXR5MyhvdXQ6IGFueSkge1xyXG4gICAgb3V0WzBdID0gMTtcclxuICAgIG91dFsxXSA9IDA7XHJcbiAgICBvdXRbMl0gPSAwO1xyXG4gICAgb3V0WzNdID0gMDtcclxuICAgIG91dFs0XSA9IDA7XHJcbiAgICBvdXRbNV0gPSAxO1xyXG4gICAgb3V0WzZdID0gMDtcclxuICAgIG91dFs3XSA9IDA7XHJcbiAgICBvdXRbOF0gPSAwO1xyXG4gICAgb3V0WzldID0gMDtcclxuICAgIG91dFsxMF0gPSAxO1xyXG4gICAgb3V0WzExXSA9IDA7XHJcbiAgICBvdXRbMTJdID0gMDtcclxuICAgIG91dFsxM10gPSAwO1xyXG4gICAgb3V0WzE0XSA9IDA7XHJcbiAgICBvdXRbMTVdID0gMTtcclxuICAgIHJldHVybiBvdXQ7XHJcbiAgfVxyXG4gIGV4cG9ydCBmdW5jdGlvbiBsb29rQXQob3V0OiBhbnksIGV5ZTogYW55LCBjZW50ZXI6IGFueSwgdXA6IGFueSkge1xyXG4gICAgdmFyIHgwLCB4MSwgeDIsIHkwLCB5MSwgeTIsIHowLCB6MSwgejIsIGxlbjtcclxuICAgIHZhciBleWV4ID0gZXllWzBdO1xyXG4gICAgdmFyIGV5ZXkgPSBleWVbMV07XHJcbiAgICB2YXIgZXlleiA9IGV5ZVsyXTtcclxuICAgIHZhciB1cHggPSB1cFswXTtcclxuICAgIHZhciB1cHkgPSB1cFsxXTtcclxuICAgIHZhciB1cHogPSB1cFsyXTtcclxuICAgIHZhciBjZW50ZXJ4ID0gY2VudGVyWzBdO1xyXG4gICAgdmFyIGNlbnRlcnkgPSBjZW50ZXJbMV07XHJcbiAgICB2YXIgY2VudGVyeiA9IGNlbnRlclsyXTtcclxuXHJcbiAgICBpZiAoXHJcbiAgICAgIE1hdGguYWJzKGV5ZXggLSBjZW50ZXJ4KSA8IEVQU0lMT04gJiZcclxuICAgICAgTWF0aC5hYnMoZXlleSAtIGNlbnRlcnkpIDwgRVBTSUxPTiAmJlxyXG4gICAgICBNYXRoLmFicyhleWV6IC0gY2VudGVyeikgPCBFUFNJTE9OXHJcbiAgICApIHtcclxuICAgICAgcmV0dXJuIGlkZW50aXR5MyhvdXQpO1xyXG4gICAgfVxyXG5cclxuICAgIHowID0gZXlleCAtIGNlbnRlcng7XHJcbiAgICB6MSA9IGV5ZXkgLSBjZW50ZXJ5O1xyXG4gICAgejIgPSBleWV6IC0gY2VudGVyejtcclxuICAgIGxlbiA9IDEgLyBNYXRoLmh5cG90KHowLCB6MSwgejIpO1xyXG4gICAgejAgKj0gbGVuO1xyXG4gICAgejEgKj0gbGVuO1xyXG4gICAgejIgKj0gbGVuO1xyXG4gICAgeDAgPSB1cHkgKiB6MiAtIHVweiAqIHoxO1xyXG4gICAgeDEgPSB1cHogKiB6MCAtIHVweCAqIHoyO1xyXG4gICAgeDIgPSB1cHggKiB6MSAtIHVweSAqIHowO1xyXG4gICAgbGVuID0gTWF0aC5oeXBvdCh4MCwgeDEsIHgyKTtcclxuXHJcbiAgICBpZiAoIWxlbikge1xyXG4gICAgICB4MCA9IDA7XHJcbiAgICAgIHgxID0gMDtcclxuICAgICAgeDIgPSAwO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbGVuID0gMSAvIGxlbjtcclxuICAgICAgeDAgKj0gbGVuO1xyXG4gICAgICB4MSAqPSBsZW47XHJcbiAgICAgIHgyICo9IGxlbjtcclxuICAgIH1cclxuXHJcbiAgICB5MCA9IHoxICogeDIgLSB6MiAqIHgxO1xyXG4gICAgeTEgPSB6MiAqIHgwIC0gejAgKiB4MjtcclxuICAgIHkyID0gejAgKiB4MSAtIHoxICogeDA7XHJcbiAgICBsZW4gPSBNYXRoLmh5cG90KHkwLCB5MSwgeTIpO1xyXG5cclxuICAgIGlmICghbGVuKSB7XHJcbiAgICAgIHkwID0gMDtcclxuICAgICAgeTEgPSAwO1xyXG4gICAgICB5MiA9IDA7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBsZW4gPSAxIC8gbGVuO1xyXG4gICAgICB5MCAqPSBsZW47XHJcbiAgICAgIHkxICo9IGxlbjtcclxuICAgICAgeTIgKj0gbGVuO1xyXG4gICAgfVxyXG5cclxuICAgIG91dFswXSA9IHgwO1xyXG4gICAgb3V0WzFdID0geTA7XHJcbiAgICBvdXRbMl0gPSB6MDtcclxuICAgIG91dFszXSA9IDA7XHJcbiAgICBvdXRbNF0gPSB4MTtcclxuICAgIG91dFs1XSA9IHkxO1xyXG4gICAgb3V0WzZdID0gejE7XHJcbiAgICBvdXRbN10gPSAwO1xyXG4gICAgb3V0WzhdID0geDI7XHJcbiAgICBvdXRbOV0gPSB5MjtcclxuICAgIG91dFsxMF0gPSB6MjtcclxuICAgIG91dFsxMV0gPSAwO1xyXG4gICAgb3V0WzEyXSA9IC0oeDAgKiBleWV4ICsgeDEgKiBleWV5ICsgeDIgKiBleWV6KTtcclxuICAgIG91dFsxM10gPSAtKHkwICogZXlleCArIHkxICogZXlleSArIHkyICogZXlleik7XHJcbiAgICBvdXRbMTRdID0gLSh6MCAqIGV5ZXggKyB6MSAqIGV5ZXkgKyB6MiAqIGV5ZXopO1xyXG4gICAgb3V0WzE1XSA9IDE7XHJcbiAgICByZXR1cm4gb3V0O1xyXG4gIH1cclxuXHJcbiAgZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5KG91dDogYW55LCBhOiBhbnksIGI6IGFueSkge1xyXG4gICAgbGV0IGEwMCA9IGFbMF0sXHJcbiAgICAgIGEwMSA9IGFbMV0sXHJcbiAgICAgIGEwMiA9IGFbMl0sXHJcbiAgICAgIGEwMyA9IGFbM107XHJcbiAgICBsZXQgYTEwID0gYVs0XSxcclxuICAgICAgYTExID0gYVs1XSxcclxuICAgICAgYTEyID0gYVs2XSxcclxuICAgICAgYTEzID0gYVs3XTtcclxuICAgIGxldCBhMjAgPSBhWzhdLFxyXG4gICAgICBhMjEgPSBhWzldLFxyXG4gICAgICBhMjIgPSBhWzEwXSxcclxuICAgICAgYTIzID0gYVsxMV07XHJcbiAgICBsZXQgYTMwID0gYVsxMl0sXHJcbiAgICAgIGEzMSA9IGFbMTNdLFxyXG4gICAgICBhMzIgPSBhWzE0XSxcclxuICAgICAgYTMzID0gYVsxNV07XHJcblxyXG4gICAgLy8gQ2FjaGUgb25seSB0aGUgY3VycmVudCBsaW5lIG9mIHRoZSBzZWNvbmQgbWF0cml4XHJcbiAgICBsZXQgYjAgPSBiWzBdLFxyXG4gICAgICBiMSA9IGJbMV0sXHJcbiAgICAgIGIyID0gYlsyXSxcclxuICAgICAgYjMgPSBiWzNdO1xyXG4gICAgb3V0WzBdID0gYjAgKiBhMDAgKyBiMSAqIGExMCArIGIyICogYTIwICsgYjMgKiBhMzA7XHJcbiAgICBvdXRbMV0gPSBiMCAqIGEwMSArIGIxICogYTExICsgYjIgKiBhMjEgKyBiMyAqIGEzMTtcclxuICAgIG91dFsyXSA9IGIwICogYTAyICsgYjEgKiBhMTIgKyBiMiAqIGEyMiArIGIzICogYTMyO1xyXG4gICAgb3V0WzNdID0gYjAgKiBhMDMgKyBiMSAqIGExMyArIGIyICogYTIzICsgYjMgKiBhMzM7XHJcblxyXG4gICAgYjAgPSBiWzRdO1xyXG4gICAgYjEgPSBiWzVdO1xyXG4gICAgYjIgPSBiWzZdO1xyXG4gICAgYjMgPSBiWzddO1xyXG4gICAgb3V0WzRdID0gYjAgKiBhMDAgKyBiMSAqIGExMCArIGIyICogYTIwICsgYjMgKiBhMzA7XHJcbiAgICBvdXRbNV0gPSBiMCAqIGEwMSArIGIxICogYTExICsgYjIgKiBhMjEgKyBiMyAqIGEzMTtcclxuICAgIG91dFs2XSA9IGIwICogYTAyICsgYjEgKiBhMTIgKyBiMiAqIGEyMiArIGIzICogYTMyO1xyXG4gICAgb3V0WzddID0gYjAgKiBhMDMgKyBiMSAqIGExMyArIGIyICogYTIzICsgYjMgKiBhMzM7XHJcblxyXG4gICAgYjAgPSBiWzhdO1xyXG4gICAgYjEgPSBiWzldO1xyXG4gICAgYjIgPSBiWzEwXTtcclxuICAgIGIzID0gYlsxMV07XHJcbiAgICBvdXRbOF0gPSBiMCAqIGEwMCArIGIxICogYTEwICsgYjIgKiBhMjAgKyBiMyAqIGEzMDtcclxuICAgIG91dFs5XSA9IGIwICogYTAxICsgYjEgKiBhMTEgKyBiMiAqIGEyMSArIGIzICogYTMxO1xyXG4gICAgb3V0WzEwXSA9IGIwICogYTAyICsgYjEgKiBhMTIgKyBiMiAqIGEyMiArIGIzICogYTMyO1xyXG4gICAgb3V0WzExXSA9IGIwICogYTAzICsgYjEgKiBhMTMgKyBiMiAqIGEyMyArIGIzICogYTMzO1xyXG5cclxuICAgIGIwID0gYlsxMl07XHJcbiAgICBiMSA9IGJbMTNdO1xyXG4gICAgYjIgPSBiWzE0XTtcclxuICAgIGIzID0gYlsxNV07XHJcbiAgICBvdXRbMTJdID0gYjAgKiBhMDAgKyBiMSAqIGExMCArIGIyICogYTIwICsgYjMgKiBhMzA7XHJcbiAgICBvdXRbMTNdID0gYjAgKiBhMDEgKyBiMSAqIGExMSArIGIyICogYTIxICsgYjMgKiBhMzE7XHJcbiAgICBvdXRbMTRdID0gYjAgKiBhMDIgKyBiMSAqIGExMiArIGIyICogYTIyICsgYjMgKiBhMzI7XHJcbiAgICBvdXRbMTVdID0gYjAgKiBhMDMgKyBiMSAqIGExMyArIGIyICogYTIzICsgYjMgKiBhMzM7XHJcbiAgICByZXR1cm4gb3V0O1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcIi4uL29ic2VydmFibGVcIjtcclxuaW1wb3J0IHsgY3JlYXRlU2VsZWN0aW9uQ29tcG9uZW50LCBjcmVhdGVFbGVtZW50QXJyYXkgfSBmcm9tIFwiLi9jb21tb25cIjtcclxuXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVJbmRleEJ1ZmZlckNvbXBvbmVudCA9IChcclxuICBpbmRleEJ1ZmZlckJpbmRpbmc6IE9ic2VydmFibGU8bnVtYmVyW10+LFxyXG4gIG9uQ2hhbmdlOiAobmV3VmFsdWU6IG51bWJlcltdKSA9PiB2b2lkXHJcbikgPT4ge1xyXG4gIGNvbnN0IGN1c3RvbUluZGljZXNWYWx1ZSA9IG5ldyBPYnNlcnZhYmxlPG51bWJlcltdPihbMCwgMSwgMl0pO1xyXG4gIHJldHVybiBjcmVhdGVTZWxlY3Rpb25Db21wb25lbnQoXHJcbiAgICBbXHJcbiAgICAgIHtcclxuICAgICAgICBpZDogXCJjdXN0b21cIixcclxuICAgICAgICBkaXNwbGF5OiBcIkN1c3RvbVwiLFxyXG4gICAgICAgIHZhbHVlOiBjdXN0b21JbmRpY2VzVmFsdWUsXHJcbiAgICAgICAgZWxlbWVudDogY3JlYXRlRWxlbWVudEFycmF5KDEsIGN1c3RvbUluZGljZXNWYWx1ZSwgdHJ1ZSksXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBpZDogXCJiaW5kaW5nXCIsXHJcbiAgICAgICAgZGlzcGxheTogXCJCaW5kaW5nIC0gTWVzaCBpbmRpY2VzXCIsXHJcbiAgICAgICAgdmFsdWU6IGluZGV4QnVmZmVyQmluZGluZyxcclxuICAgICAgICBlbGVtZW50OiBjcmVhdGVFbGVtZW50QXJyYXkoMSwgaW5kZXhCdWZmZXJCaW5kaW5nLCBmYWxzZSksXHJcbiAgICAgIH0sXHJcbiAgICBdLFxyXG4gICAgb25DaGFuZ2VcclxuICApO1xyXG59O1xyXG4iLCJpbXBvcnQge1xyXG4gIENhbWVyYVBvc2l0aW9uLFxyXG4gIENhbWVyYVBvc2l0aW9uTWFuaXB1bGF0b3IsXHJcbiAgY2FtZXJhUG9zaXRpb25Ub1ZlY3RvcjMsXHJcbn0gZnJvbSBcIi4vdXRpbHMvY2FtZXJhTWFuaXB1bGF0b3JcIjtcclxuaW1wb3J0IHsgZ2V0U3RhdGUsIHNldFN0YXRlIH0gZnJvbSBcIi4vLi4vLi4vY29tbW9uL3N0YXRlXCI7XHJcbmltcG9ydCB7IEluZGV4QnVmZmVySW5mbyB9IGZyb20gXCIuL3V0aWxzL3dlYmdsL2luZGV4QnVmZmVyXCI7XHJcbmltcG9ydCB7IHRyYW5zbGF0aW9ucyB9IGZyb20gXCIuLi8uLi9jb21tb24vdHJhbnNsYXRpb25zXCI7XHJcbmltcG9ydCB7IGNyZWF0ZURyb3Bkb3duIH0gZnJvbSBcIi4vY29tcG9uZW50cy9kcm9wZG93blwiO1xyXG5pbXBvcnQgeyBjcmVhdGVTZWN0aW9uVGl0bGUgfSBmcm9tIFwiLi9jb21wb25lbnRzL2hlYWRlclwiO1xyXG5pbXBvcnQgeyBjcmVhdGVCdXR0b24gYXMgY3JlYXRlQnV0dG9uIH0gZnJvbSBcIi4vY29tcG9uZW50cy9idXR0b25cIjtcclxuaW1wb3J0IHsgY3JlYXRlRGl2LCB3aXRoTGFiZWwgfSBmcm9tIFwiLi9jb21wb25lbnRzL3dyYXBwZXJzXCI7XHJcbmltcG9ydCB7XHJcbiAgY3JlYXRlVW5pZm9ybUNvbXBvbmVudHMsXHJcbiAgVW5pZm9ybUJpbmRpbmcsXHJcbn0gZnJvbSBcIi4vdXRpbHMvd2ViZ2wvdW5pZm9ybUNvbXBvbmVudFwiO1xyXG5pbXBvcnQge1xyXG4gIGNvbXBpbGVTaGFkZXJzRnJvbVNvdXJjZSxcclxuICBEcmF3T3B0aW9ucyxcclxuICBmb3JtYXRTaGFkZXJDb21waWxlRXJyb3JzLFxyXG4gIGdldFByb2dyYW1BdHRyaWJ1dGVCdWZmZXJzLFxyXG4gIGdldFByb2dyYW1Vbmlmb3JtcyxcclxuICByZW5kZXJQcm9ncmFtLFxyXG4gIFNoYWRlckNvbXBpbGVFcnJvcnMsXHJcbn0gZnJvbSBcIi4vdXRpbHMvd2ViZ2wvaW5kZXhcIjtcclxuaW1wb3J0IHsgY3JlYXRlQXR0cmlidXRlQnVmZmVyQ29tcG9uZW50cyB9IGZyb20gXCIuL3V0aWxzL3dlYmdsL2F0dHJpYnV0ZUJ1ZmZlckNvbXBvbmVudFwiO1xyXG5pbXBvcnQgeyBjcmVhdGVXZWJHTENhbnZhcyB9IGZyb20gXCIuL2NvbXBvbmVudHMvd2ViZ2xDYW52YXNcIjtcclxuaW1wb3J0IHsgVmlld2VyRW5kcG9pbnQgfSBmcm9tIFwiLi4vLi4vY29tbW9uL2NvbW11bmljYXRpb24vdmlld2VyRW5kcG9pbnRcIjtcclxuaW1wb3J0IHsgY3JlYXRlTWVzaEJpbmRpbmdzLCBtZXNoZXMgfSBmcm9tIFwiLi9tZXNoZXNcIjtcclxuaW1wb3J0IHsgbWF0NCB9IGZyb20gXCIuL3V0aWxzL21hdGhcIjtcclxuaW1wb3J0IHsgVW5pZm9ybVR5cGUgfSBmcm9tIFwiLi91dGlscy93ZWJnbC91bmlmb3JtXCI7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwiLi91dGlscy9vYnNlcnZhYmxlXCI7XHJcbmltcG9ydCB7IGNyZWF0ZUluZGV4QnVmZmVyQ29tcG9uZW50IH0gZnJvbSBcIi4vdXRpbHMvd2ViZ2wvaW5kZXhCdWZmZXJDb21wb25lbnRcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVVbmlmb3JtQmluZGluZ3MgPSAoKSA9PlxyXG4gIG5ldyBNYXA8c3RyaW5nLCBVbmlmb3JtQmluZGluZz4oW1xyXG4gICAgW1xyXG4gICAgICBcImxvY2FsVG9Qcm9qZWN0ZWRcIixcclxuICAgICAge1xyXG4gICAgICAgIG5hbWU6IFwiQmluZGluZyAtIENhbWVyYSBMb2NhbFRvUHJvamVjdGVkXCIsXHJcbiAgICAgICAgdHlwZTogVW5pZm9ybVR5cGUuRkxPQVRfTUFUNCxcclxuICAgICAgICB2YWx1ZTogbmV3IE9ic2VydmFibGUoWzEsIDAsIDAsIDAsIDAsIDEsIDAsIDAsIDAsIDAsIDEsIDAsIDAsIDAsIDAsIDFdKSxcclxuICAgICAgfSxcclxuICAgIF0sXHJcbiAgXSk7XHJcblxyXG5jb25zdCBzZXRFbGVtZW50VmlzaWJpbGl0eSA9IChlbGVtZW50OiBIVE1MRWxlbWVudCwgdmlzaWJsZTogYm9vbGVhbikgPT5cclxuICAoZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gdmlzaWJsZSA/IFwiaW5oZXJpdFwiIDogXCJub25lXCIpO1xyXG5cclxuY29uc3QgY3JlYXRlVmlld2VyID0gYXN5bmMgKCkgPT4ge1xyXG4gIGNvbnN0IHZpZXdlckVuZHBvaW50ID0gbmV3IFZpZXdlckVuZHBvaW50KCk7XHJcbiAgY29uc3Qgdmlld2VyU3RhdGUgPSBnZXRTdGF0ZSgpO1xyXG4gIGNvbnN0IHZpZXdlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidmlld2VyXCIpO1xyXG4gIGNvbnN0IHZpZXdlck9wdGlvbnMgPSBjcmVhdGVEaXYoXCJ2aWV3ZXItb3B0aW9uc1wiKTtcclxuICBjb25zdCBzaGFkZXJPcHRpb25zID0gY3JlYXRlRGl2KFwidmlld2VyLXNoYWRlci1vcHRpb25zXCIpO1xyXG4gIGNvbnN0IHNoYWRlckNvbXBpbGF0aW9uRXJyb3JzID0gY3JlYXRlRGl2KFwidmlld2VyLWNvbnRlbnQgc2hhZGVyLWVycm9yc1wiKTtcclxuICBjb25zdCBbd2ViR0xDYW52YXMsIHdlYkdMQ29udHJvbGxlcl0gPSBjcmVhdGVXZWJHTENhbnZhcyhcInZpZXdlci1jb250ZW50XCIpO1xyXG4gIGNvbnN0IG1lc2hCaW5kaW5ncyA9IGNyZWF0ZU1lc2hCaW5kaW5ncygpO1xyXG4gIGNvbnN0IHVuaWZvcm1CaW5kaW5ncyA9IGNyZWF0ZVVuaWZvcm1CaW5kaW5ncygpO1xyXG4gIGNvbnN0IGluZGV4QnVmZmVySW5mbyA9IG5ldyBJbmRleEJ1ZmZlckluZm8od2ViR0xDb250cm9sbGVyLmNvbnRleHQpO1xyXG4gIGNvbnN0IGluZGV4QnVmZmVyQmluZGluZ1ZhbHVlID0gbmV3IE9ic2VydmFibGU8bnVtYmVyW10+KFtdKTtcclxuICBjb25zdCBkcmF3T3B0aW9uczogRHJhd09wdGlvbnMgPSB7IGRyYXdNb2RlOiBcImFycmF5c1wiIH07XHJcbiAgbGV0IGNhbWVyYVBvc2l0aW9uOiBDYW1lcmFQb3NpdGlvbiA9IHsgbG9uZ2l0dWRlOiAxLCBsYXRpdHVkZTogMSwgcmFkaXVzOiAyIH07XHJcbiAgY29uc3QgY2FtZXJhUG9zaXRpb25NYW5pcHVsYXRvciA9IG5ldyBDYW1lcmFQb3NpdGlvbk1hbmlwdWxhdG9yKFxyXG4gICAgd2ViR0xDYW52YXMsXHJcbiAgICAoKSA9PiBjYW1lcmFQb3NpdGlvbixcclxuICAgIG5ld1Bvc2l0aW9uID0+IHtcclxuICAgICAgY2FtZXJhUG9zaXRpb24gPSBuZXdQb3NpdGlvbjtcclxuXHJcbiAgICAgIGNvbnN0IGZpZWxkT2ZWaWV3ID0gKDQ1ICogTWF0aC5QSSkgLyAxODA7IC8vIGluIHJhZGlhbnNcclxuICAgICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSB3ZWJHTENvbnRyb2xsZXIuZ2V0U2l6ZSgpO1xyXG4gICAgICBjb25zdCBhc3BlY3QgPSB3aWR0aCAvIGhlaWdodDtcclxuICAgICAgY29uc3Qgek5lYXIgPSAwLjE7XHJcbiAgICAgIGNvbnN0IHpGYXIgPSAxMDAuMDtcclxuICAgICAgY29uc3QgcHJvamVjdGlvbk1hdHJpeCA9IG1hdDQuY3JlYXRlKCk7XHJcbiAgICAgIG1hdDQucGVyc3BlY3RpdmUocHJvamVjdGlvbk1hdHJpeCwgZmllbGRPZlZpZXcsIGFzcGVjdCwgek5lYXIsIHpGYXIpO1xyXG5cclxuICAgICAgY29uc3QgbW9kZWxWaWV3TWF0cml4ID0gbWF0NC5jcmVhdGUoKTtcclxuICAgICAgY29uc3QgdmVjID0gY2FtZXJhUG9zaXRpb25Ub1ZlY3RvcjMoY2FtZXJhUG9zaXRpb24pO1xyXG5cclxuICAgICAgbWF0NC5sb29rQXQobW9kZWxWaWV3TWF0cml4LCBbdmVjLngsIHZlYy55LCB2ZWMuel0sIFswLCAwLCAwXSwgWzAsIDEsIDBdKTtcclxuXHJcbiAgICAgIGNvbnN0IHJlcyA9IG1hdDQuY3JlYXRlKCk7XHJcbiAgICAgIG1hdDQubXVsdGlwbHkocmVzLCBwcm9qZWN0aW9uTWF0cml4LCBtb2RlbFZpZXdNYXRyaXgpO1xyXG5cclxuICAgICAgdW5pZm9ybUJpbmRpbmdzLmdldChcImxvY2FsVG9Qcm9qZWN0ZWRcIikudmFsdWUuc2V0VmFsdWUocmVzKTtcclxuICAgIH1cclxuICApO1xyXG5cclxuICB2aWV3ZXIuYXBwZW5kQ2hpbGQod2ViR0xDYW52YXMpO1xyXG4gIHZpZXdlci5hcHBlbmRDaGlsZChzaGFkZXJDb21waWxhdGlvbkVycm9ycyk7XHJcbiAgdmlld2VyLmFwcGVuZENoaWxkKHZpZXdlck9wdGlvbnMpO1xyXG5cclxuICBjb25zdCBzaG93Q29udGVudCA9IChjb250ZW50OiBcImNhbnZhc1wiIHwgXCJlcnJvcnNcIiB8IFwibm9uZVwiKSA9PiB7XHJcbiAgICB3ZWJHTENhbnZhcy5zdHlsZS52aXNpYmlsaXR5ID1cclxuICAgICAgY29udGVudCA9PT0gXCJjYW52YXNcIiA/IFwidmlzaWJsZVwiIDogXCJjb2xsYXBzZVwiO1xyXG4gICAgc2hhZGVyQ29tcGlsYXRpb25FcnJvcnMuc3R5bGUudmlzaWJpbGl0eSA9XHJcbiAgICAgIGNvbnRlbnQgPT09IFwiZXJyb3JzXCIgPyBcInZpc2libGVcIiA6IFwiY29sbGFwc2VcIjtcclxuXHJcbiAgICAvL3NldEVsZW1lbnRWaXNpYmlsaXR5KHdlYkdMQ2FudmFzLCBjb250ZW50ID09PSBcImNhbnZhc1wiKTtcclxuICAgIC8vc2V0RWxlbWVudFZpc2liaWxpdHkoc2hhZGVyQ29tcGlsYXRpb25FcnJvcnMsIGNvbnRlbnQgPT09IFwiZXJyb3JzXCIpO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IHN5bmNTaGFkZXJEb2N1bWVudHMgPSAoKSA9PiB7XHJcbiAgICB2aWV3ZXJFbmRwb2ludC5nZXRTaGFkZXJEb2N1bWVudHMoKS50aGVuKHNkID0+IHtcclxuICAgICAgY29uc3QgZmlsZXMgPSBzZC5tYXAoZiA9PiAoe1xyXG4gICAgICAgIGlkOiBmLmZpbGVQYXRoLFxyXG4gICAgICAgIGRpc3BsYXk6IGYuZmlsZU5hbWUsXHJcbiAgICAgIH0pKTtcclxuXHJcbiAgICAgIHZlcnRleERyb3Bkb3duQ29udHJvbGxlci5zZXRJdGVtcyhmaWxlcyk7XHJcblxyXG4gICAgICBpZiAoXHJcbiAgICAgICAgdmlld2VyU3RhdGUudmVydGV4RmlsZVBhdGggJiZcclxuICAgICAgICBmaWxlcy5zb21lKGYgPT4gZi5pZCA9PT0gdmlld2VyU3RhdGUudmVydGV4RmlsZVBhdGgpXHJcbiAgICAgIClcclxuICAgICAgICB2ZXJ0ZXhEcm9wZG93bkNvbnRyb2xsZXIuc2V0U2VsZWN0ZWRJdGVtQnlJZChcclxuICAgICAgICAgIHZpZXdlclN0YXRlLnZlcnRleEZpbGVQYXRoXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgIGZyYWdtZW50RHJvcGRvd25Db250cm9sbGVyLnNldEl0ZW1zKGZpbGVzKTtcclxuXHJcbiAgICAgIGlmIChcclxuICAgICAgICB2aWV3ZXJTdGF0ZS5mcmFnbWVudEZpbGVQYXRoICYmXHJcbiAgICAgICAgZmlsZXMuc29tZShmID0+IGYuaWQgPT09IHZpZXdlclN0YXRlLmZyYWdtZW50RmlsZVBhdGgpXHJcbiAgICAgIClcclxuICAgICAgICBmcmFnbWVudERyb3Bkb3duQ29udHJvbGxlci5zZXRTZWxlY3RlZEl0ZW1CeUlkKFxyXG4gICAgICAgICAgdmlld2VyU3RhdGUuZnJhZ21lbnRGaWxlUGF0aFxyXG4gICAgICAgICk7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICBsZXQgc2VsZWN0ZWRWZXJ0ZXhGaWxlV2F0Y2hlclVuc3Vic2NyaWJlOiAoKSA9PiB2b2lkIHwgdW5kZWZpbmVkO1xyXG4gIGxldCBzZWxlY3RlZEZyYWdtZW50RmlsZVdhdGNoZXJVbnN1YnNjcmliZTogKCkgPT4gdm9pZCB8IHVuZGVmaW5lZDtcclxuICBsZXQgc2VsZWN0ZWRWZXJ0ZXhDb250ZW50OiBzdHJpbmcgfCBudWxsO1xyXG4gIGxldCBzZWxlY3RlZEZyYWdtZW50Q29udGVudDogc3RyaW5nIHwgbnVsbDtcclxuICBsZXQgYW5pbWF0aW9uRnJhbWVIYW5kbGU6IG51bWJlciA9IG51bGw7XHJcblxyXG4gIGNvbnN0IG9uTWVzaENoYW5nZWQgPSAoaWQ6IHN0cmluZykgPT4ge1xyXG4gICAgY29uc3QgeyBwb3NpdGlvbnMsIGNvbG9ycywgaW5kaWNlcyB9ID0gbWVzaGVzLmdldChpZCk7XHJcbiAgICBtZXNoQmluZGluZ3MuZ2V0KFwicG9zaXRpb25zXCIpLnZhbHVlLnNldFZhbHVlKHBvc2l0aW9ucyk7XHJcbiAgICBtZXNoQmluZGluZ3MuZ2V0KFwiY29sb3JzXCIpLnZhbHVlLnNldFZhbHVlKGNvbG9ycyk7XHJcbiAgICBpbmRleEJ1ZmZlckJpbmRpbmdWYWx1ZS5zZXRWYWx1ZShpbmRpY2VzKTtcclxuICB9O1xyXG5cclxuICBjb25zdCBvblNoYWRlckNvbnRlbnRDaGFuZ2VkID0gKCkgPT4ge1xyXG4gICAgc2hhZGVyT3B0aW9ucy5pbm5lckhUTUwgPSBcIlwiO1xyXG4gICAgY29uc3QgY29udGV4dCA9IHdlYkdMQ29udHJvbGxlci5jb250ZXh0O1xyXG5cclxuICAgIGlmIChzZWxlY3RlZEZyYWdtZW50Q29udGVudCAmJiBzZWxlY3RlZFZlcnRleENvbnRlbnQpIHtcclxuICAgICAgY29uc3QgcmVzdWx0ID0gY29tcGlsZVNoYWRlcnNGcm9tU291cmNlKFxyXG4gICAgICAgIGNvbnRleHQsXHJcbiAgICAgICAgc2VsZWN0ZWRWZXJ0ZXhDb250ZW50LFxyXG4gICAgICAgIHNlbGVjdGVkRnJhZ21lbnRDb250ZW50XHJcbiAgICAgICk7XHJcblxyXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShyZXN1bHQpKSB7XHJcbiAgICAgICAgc2hvd0NvbnRlbnQoXCJlcnJvcnNcIik7XHJcbiAgICAgICAgc2hhZGVyQ29tcGlsYXRpb25FcnJvcnMuaW5uZXJUZXh0ID0gZm9ybWF0U2hhZGVyQ29tcGlsZUVycm9ycyhcclxuICAgICAgICAgIHJlc3VsdCBhcyBTaGFkZXJDb21waWxlRXJyb3JzXHJcbiAgICAgICAgKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBzaG93Q29udGVudChcImNhbnZhc1wiKTtcclxuICAgICAgICBjb25zdCBwcm9ncmFtID0gcmVzdWx0IGFzIFdlYkdMUHJvZ3JhbTtcclxuICAgICAgICBjb25zdCBwcm9ncmFtVW5pZm9ybXMgPSBnZXRQcm9ncmFtVW5pZm9ybXMoY29udGV4dCwgcHJvZ3JhbSk7XHJcbiAgICAgICAgY29uc3QgcHJvZ3JhbUF0dHJpYnV0ZUJ1ZmZlcnMgPSBnZXRQcm9ncmFtQXR0cmlidXRlQnVmZmVycyhcclxuICAgICAgICAgIGNvbnRleHQsXHJcbiAgICAgICAgICBwcm9ncmFtXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgY29uc3QgdW5pZm9ybUNvbXBvbmVudHMgPSBjcmVhdGVVbmlmb3JtQ29tcG9uZW50cyhcclxuICAgICAgICAgIGNvbnRleHQsXHJcbiAgICAgICAgICBwcm9ncmFtLFxyXG4gICAgICAgICAgcHJvZ3JhbVVuaWZvcm1zLFxyXG4gICAgICAgICAgQXJyYXkuZnJvbSh1bmlmb3JtQmluZGluZ3MudmFsdWVzKCkpXHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAodW5pZm9ybUNvbXBvbmVudHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgc2hhZGVyT3B0aW9ucy5hcHBlbmRDaGlsZChcclxuICAgICAgICAgICAgY3JlYXRlRGl2KFwidmlld2VyLXNoYWRlcnMtdGl0bGVcIiwgW1xyXG4gICAgICAgICAgICAgIGNyZWF0ZVNlY3Rpb25UaXRsZShcIlVOSUZPUk1TXCIsIFwiXCIpLmVsZW1lbnQsXHJcbiAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgICB1bmlmb3JtQ29tcG9uZW50cy5mb3JFYWNoKHVjID0+XHJcbiAgICAgICAgICBzaGFkZXJPcHRpb25zLmFwcGVuZENoaWxkKHVjLmNvbXBvbmVudClcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBjb25zdCBhdHRyaWJ1dGVCdWZmZXJDb21wb25lbnRzID0gY3JlYXRlQXR0cmlidXRlQnVmZmVyQ29tcG9uZW50cyhcclxuICAgICAgICAgIGNvbnRleHQsXHJcbiAgICAgICAgICBwcm9ncmFtLFxyXG4gICAgICAgICAgcHJvZ3JhbUF0dHJpYnV0ZUJ1ZmZlcnMsXHJcbiAgICAgICAgICBBcnJheS5mcm9tKG1lc2hCaW5kaW5ncy52YWx1ZXMoKSlcclxuICAgICAgICApO1xyXG4gICAgICAgIGlmIChhdHRyaWJ1dGVCdWZmZXJDb21wb25lbnRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgIHNoYWRlck9wdGlvbnMuYXBwZW5kQ2hpbGQoXHJcbiAgICAgICAgICAgIGNyZWF0ZURpdihcInZpZXdlci1zaGFkZXJzLXRpdGxlXCIsIFtcclxuICAgICAgICAgICAgICBjcmVhdGVTZWN0aW9uVGl0bGUoXCJBVFRSSUJVVEUgQlVGRkVSU1wiLCBcIlwiKS5lbGVtZW50LFxyXG4gICAgICAgICAgICBdKVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYXR0cmlidXRlQnVmZmVyQ29tcG9uZW50cy5mb3JFYWNoKGFiID0+XHJcbiAgICAgICAgICBzaGFkZXJPcHRpb25zLmFwcGVuZENoaWxkKGFiLmNvbXBvbmVudClcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBjb25zdCB1bmlmb3JtSW5mb3MgPSB1bmlmb3JtQ29tcG9uZW50cy5tYXAodWMgPT4gdWMudW5pZm9ybUluZm8pO1xyXG4gICAgICAgIGNvbnN0IGF0dHJpYnV0ZUJ1ZmZlckluZm9zID0gYXR0cmlidXRlQnVmZmVyQ29tcG9uZW50cy5tYXAoXHJcbiAgICAgICAgICBhYmMgPT4gYWJjLmF0dHJpYnV0ZUJ1ZmZlckluZm9cclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBpZiAoYW5pbWF0aW9uRnJhbWVIYW5kbGUgIT09IG51bGwpXHJcbiAgICAgICAgICBjYW5jZWxBbmltYXRpb25GcmFtZShhbmltYXRpb25GcmFtZUhhbmRsZSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHJlbmRlciA9ICgpID0+IHtcclxuICAgICAgICAgIHJlbmRlclByb2dyYW0oXHJcbiAgICAgICAgICAgIGNvbnRleHQsXHJcbiAgICAgICAgICAgIHByb2dyYW0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICB1bmlmb3JtSW5mb3MsXHJcbiAgICAgICAgICAgICAgYXR0cmlidXRlQnVmZmVySW5mb3MsXHJcbiAgICAgICAgICAgICAgaW5kZXhCdWZmZXJJbmZvLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkcmF3T3B0aW9uc1xyXG4gICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICBhbmltYXRpb25GcmFtZUhhbmRsZSA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShyZW5kZXIpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJlbmRlcigpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBzaG93Q29udGVudChcIm5vbmVcIik7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgdmlld2VyT3B0aW9ucy5hcHBlbmRDaGlsZChcclxuICAgIGNyZWF0ZURpdihcInZpZXdlci1zaGFkZXJzLXRpdGxlXCIsIFtcclxuICAgICAgY3JlYXRlU2VjdGlvblRpdGxlKHRyYW5zbGF0aW9ucy5zaGFkZXJzLCBcIlwiKS5lbGVtZW50LFxyXG4gICAgICBjcmVhdGVCdXR0b24oXCJTeW5jXCIsIFwidmlld2VyLXJlZnJlc2gtYnV0dG9uXCIsIHN5bmNTaGFkZXJEb2N1bWVudHMpXHJcbiAgICAgICAgLmVsZW1lbnQsXHJcbiAgICBdKVxyXG4gICk7XHJcblxyXG4gIGNvbnN0IFt2ZXJ0ZXhEcm9wZG93bkVsZW1lbnQsIHZlcnRleERyb3Bkb3duQ29udHJvbGxlcl0gPSBjcmVhdGVEcm9wZG93bihcclxuICAgIGFzeW5jIG5ld1ZlcnRleCA9PiB7XHJcbiAgICAgIHNlbGVjdGVkVmVydGV4RmlsZVdhdGNoZXJVbnN1YnNjcmliZT8uKCk7XHJcblxyXG4gICAgICBpZiAobmV3VmVydGV4KSB7XHJcbiAgICAgICAgc2VsZWN0ZWRWZXJ0ZXhGaWxlV2F0Y2hlclVuc3Vic2NyaWJlID0gdmlld2VyRW5kcG9pbnQuc3Vic2NyaWJlVG9Eb2N1bWVudFNhdmUoXHJcbiAgICAgICAgICBuZXdWZXJ0ZXguaWQsXHJcbiAgICAgICAgICBuZXdDb250ZW50ID0+IHtcclxuICAgICAgICAgICAgc2VsZWN0ZWRWZXJ0ZXhDb250ZW50ID0gbmV3Q29udGVudDtcclxuICAgICAgICAgICAgb25TaGFkZXJDb250ZW50Q2hhbmdlZCgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHNlbGVjdGVkVmVydGV4Q29udGVudCA9IG5ld1ZlcnRleFxyXG4gICAgICAgID8gYXdhaXQgdmlld2VyRW5kcG9pbnQuZ2V0RG9jdW1lbnRUZXh0KG5ld1ZlcnRleC5pZClcclxuICAgICAgICA6IFwiXCI7XHJcblxyXG4gICAgICBzZXRTdGF0ZSh7IHZlcnRleEZpbGVQYXRoOiBuZXdWZXJ0ZXggPyBuZXdWZXJ0ZXguaWQgOiBudWxsIH0pO1xyXG4gICAgICBvblNoYWRlckNvbnRlbnRDaGFuZ2VkKCk7XHJcbiAgICB9XHJcbiAgKTtcclxuICB2ZXJ0ZXhEcm9wZG93bkNvbnRyb2xsZXIuc2V0U2VsZWN0ZWRJdGVtQnlJZCh2aWV3ZXJTdGF0ZS52ZXJ0ZXhGaWxlUGF0aCk7XHJcbiAgdmlld2VyT3B0aW9ucy5hcHBlbmRDaGlsZCh3aXRoTGFiZWwodmVydGV4RHJvcGRvd25FbGVtZW50LCBcIlZlcnRleCBTaGFkZXJcIikpO1xyXG5cclxuICBjb25zdCBbZnJhZ21lbnREcm9wZG93bkVsZW1lbnQsIGZyYWdtZW50RHJvcGRvd25Db250cm9sbGVyXSA9IGNyZWF0ZURyb3Bkb3duKFxyXG4gICAgYXN5bmMgbmV3RnJhZ21lbnQgPT4ge1xyXG4gICAgICBzZWxlY3RlZEZyYWdtZW50RmlsZVdhdGNoZXJVbnN1YnNjcmliZT8uKCk7XHJcblxyXG4gICAgICBpZiAobmV3RnJhZ21lbnQpIHtcclxuICAgICAgICBzZWxlY3RlZEZyYWdtZW50RmlsZVdhdGNoZXJVbnN1YnNjcmliZSA9IHZpZXdlckVuZHBvaW50LnN1YnNjcmliZVRvRG9jdW1lbnRTYXZlKFxyXG4gICAgICAgICAgbmV3RnJhZ21lbnQuaWQsXHJcbiAgICAgICAgICBuZXdDb250ZW50ID0+IHtcclxuICAgICAgICAgICAgc2VsZWN0ZWRGcmFnbWVudENvbnRlbnQgPSBuZXdDb250ZW50O1xyXG4gICAgICAgICAgICBvblNoYWRlckNvbnRlbnRDaGFuZ2VkKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgc2VsZWN0ZWRGcmFnbWVudENvbnRlbnQgPSBuZXdGcmFnbWVudFxyXG4gICAgICAgID8gYXdhaXQgdmlld2VyRW5kcG9pbnQuZ2V0RG9jdW1lbnRUZXh0KG5ld0ZyYWdtZW50LmlkKVxyXG4gICAgICAgIDogXCJcIjtcclxuXHJcbiAgICAgIHNldFN0YXRlKHsgZnJhZ21lbnRGaWxlUGF0aDogbmV3RnJhZ21lbnQgPyBuZXdGcmFnbWVudC5pZCA6IG51bGwgfSk7XHJcbiAgICAgIG9uU2hhZGVyQ29udGVudENoYW5nZWQoKTtcclxuICAgIH1cclxuICApO1xyXG4gIGZyYWdtZW50RHJvcGRvd25Db250cm9sbGVyLnNldFNlbGVjdGVkSXRlbUJ5SWQodmlld2VyU3RhdGUuZnJhZ21lbnRGaWxlUGF0aCk7XHJcbiAgdmlld2VyT3B0aW9ucy5hcHBlbmRDaGlsZChcclxuICAgIHdpdGhMYWJlbChmcmFnbWVudERyb3Bkb3duRWxlbWVudCwgXCJGcmFnbWVudCBTaGFkZXJcIilcclxuICApO1xyXG5cclxuICB2aWV3ZXJPcHRpb25zLmFwcGVuZENoaWxkKFxyXG4gICAgY3JlYXRlRGl2KFwidmlld2VyLXNoYWRlcnMtdGl0bGVcIiwgW1xyXG4gICAgICBjcmVhdGVTZWN0aW9uVGl0bGUoXCJEUkFXIE9QVElPTlNcIiwgXCJcIikuZWxlbWVudCxcclxuICAgIF0pXHJcbiAgKTtcclxuXHJcbiAgY29uc3QgW21lc2hEcm9wZG93bkVsZW1lbnQsIG1lc2hEcm9wZG93bkNvbnRyb2xsZXJdID0gY3JlYXRlRHJvcGRvd24oaXRlbSA9PiB7XHJcbiAgICBpZiAoIWl0ZW0pIHJldHVybjtcclxuXHJcbiAgICBvbk1lc2hDaGFuZ2VkKGl0ZW0uaWQpO1xyXG4gICAgc2V0U3RhdGUoeyBtZXNoSWQ6IGl0ZW0uaWQgfSk7XHJcbiAgfSk7XHJcbiAgbWVzaERyb3Bkb3duQ29udHJvbGxlci5zZXRJdGVtcyhcclxuICAgIEFycmF5LmZyb20obWVzaGVzLmVudHJpZXMoKSkubWFwKChba2V5LCB2YWx1ZV0pID0+ICh7XHJcbiAgICAgIGlkOiBrZXksXHJcbiAgICAgIGRpc3BsYXk6IHZhbHVlLmRpc3BsYXksXHJcbiAgICB9KSlcclxuICApO1xyXG4gIG1lc2hEcm9wZG93bkNvbnRyb2xsZXIuc2V0U2VsZWN0ZWRJdGVtQnlJZCh2aWV3ZXJTdGF0ZS5tZXNoSWQpO1xyXG4gIHZpZXdlck9wdGlvbnMuYXBwZW5kQ2hpbGQod2l0aExhYmVsKG1lc2hEcm9wZG93bkVsZW1lbnQsIFwiTWVzaFwiKSk7XHJcblxyXG4gIGNvbnN0IHtcclxuICAgIGVsZW1lbnQ6IGluZGV4QnVmZmVyRWxlbWVudCxcclxuICB9ID0gY3JlYXRlSW5kZXhCdWZmZXJDb21wb25lbnQoaW5kZXhCdWZmZXJCaW5kaW5nVmFsdWUsIG5ld1ZhbHVlID0+XHJcbiAgICBpbmRleEJ1ZmZlckluZm8uc2V0VmFsdWUobmV3VmFsdWUpXHJcbiAgKTtcclxuICBjb25zdCBpbmRleEJ1ZmZlckNvbXBvbmVudCA9IHdpdGhMYWJlbChpbmRleEJ1ZmZlckVsZW1lbnQsIFwiSW5kaWNlc1wiKTtcclxuXHJcbiAgY29uc3QgW2RyYXdNb2RlRWxlbWVudCwgZHJhd01vZGVDb250cm9sbGVyXSA9IGNyZWF0ZURyb3Bkb3duKGl0ZW0gPT4ge1xyXG4gICAgaWYgKCFpdGVtKSByZXR1cm47XHJcbiAgICBkcmF3T3B0aW9ucy5kcmF3TW9kZSA9IGl0ZW0uaWQgYXMgXCJhcnJheXNcIiB8IFwiZWxlbWVudHNcIjtcclxuICAgIHNldEVsZW1lbnRWaXNpYmlsaXR5KFxyXG4gICAgICBpbmRleEJ1ZmZlckNvbXBvbmVudCxcclxuICAgICAgZHJhd09wdGlvbnMuZHJhd01vZGUgPT09IFwiZWxlbWVudHNcIlxyXG4gICAgKTtcclxuICAgIHNldFN0YXRlKHsgZHJhd01vZGU6IGl0ZW0uaWQgfSk7XHJcbiAgfSk7XHJcbiAgZHJhd01vZGVDb250cm9sbGVyLnNldEl0ZW1zKFtcclxuICAgIHsgaWQ6IFwiYXJyYXlzXCIsIGRpc3BsYXk6IFwiQXJyYXlzXCIgfSxcclxuICAgIHsgaWQ6IFwiZWxlbWVudHNcIiwgZGlzcGxheTogXCJFbGVtZW50c1wiIH0sXHJcbiAgXSk7XHJcbiAgZHJhd01vZGVDb250cm9sbGVyLnNldFNlbGVjdGVkSXRlbUJ5SWQodmlld2VyU3RhdGUuZHJhd01vZGUpO1xyXG4gIHZpZXdlck9wdGlvbnMuYXBwZW5kQ2hpbGQod2l0aExhYmVsKGRyYXdNb2RlRWxlbWVudCwgXCJEcmF3IG1vZGVcIikpO1xyXG5cclxuICB2aWV3ZXJPcHRpb25zLmFwcGVuZENoaWxkKGluZGV4QnVmZmVyQ29tcG9uZW50KTtcclxuXHJcbiAgdmlld2VyT3B0aW9ucy5hcHBlbmRDaGlsZChzaGFkZXJPcHRpb25zKTtcclxuXHJcbiAgc3luY1NoYWRlckRvY3VtZW50cygpO1xyXG59O1xyXG5cclxuY3JlYXRlVmlld2VyKCk7XHJcbiIsImV4cG9ydCBjb25zdCBjcmVhdGVCdXR0b24gPSAoXHJcbiAgdGV4dDogc3RyaW5nLFxyXG4gIGNsYXNzTmFtZTogc3RyaW5nLFxyXG4gIG9uQ2xpY2s6ICgpID0+IHZvaWRcclxuKSA9PiB7XHJcbiAgY29uc3QgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcclxuICBidXR0b24ub25jbGljayA9IG9uQ2xpY2s7XHJcbiAgYnV0dG9uLmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcclxuICBidXR0b24udGV4dENvbnRlbnQgPSB0ZXh0O1xyXG4gIHJldHVybiB7IGVsZW1lbnQ6IGJ1dHRvbiB9O1xyXG59O1xyXG4iXSwic291cmNlUm9vdCI6IiJ9