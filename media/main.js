!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t),n.d(t,"createUniformBindings",(function(){return Ee}));var r,o=function(){return(o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},i=function(e){return Math.min(Math.max(e,1),10)},u=function(){function e(e,t,n){var r=this;this.element=e,this.positionProvider=t,this.onPositionChange=n,this.pointerPosition={x:0,y:0},this.eventListeners=new Map,this.isMoving=!1,this.dispatchAction=function(e){var t=function(e,t){switch(t.type){case"orbitRotate":return o(o({},e),{latitude:(r=e.latitude+t.deltaLatitude,Math.min(Math.max(r,-Math.PI/2+.1),Math.PI/2-.1)),longitude:(n=e.longitude+t.deltaLongitude,n>Math.PI?n-2*Math.PI:n<-Math.PI?n+2*Math.PI:n)});case"zoomInAt":return o(o({},e),{radius:i(e.radius-.1)});case"zoomOutAt":return o(o({},e),{radius:i(e.radius+.1)});default:return e}var n,r}(r.positionProvider(),e);r.onPositionChange(t)},this.onMouseDown=function(e){0===e.button&&(r.pointerPosition={x:e.offsetX,y:e.offsetY},r.isMoving=!0)},this.onMouseMove=function(e){if(r.isMoving){r.dispatchAction({type:"orbitRotate",deltaLongitude:.01*-(e.offsetX-r.pointerPosition.x),deltaLatitude:.01*(e.offsetY-r.pointerPosition.y)})}r.pointerPosition={x:e.offsetX,y:e.offsetY}},this.onMouseUp=function(){r.isMoving=!1},this.onMouseLeave=function(){r.isMoving=!1},this.onWheel=function(e){var t=e.deltaY<0?"zoomInAt":"zoomOutAt";r.dispatchAction({type:t})},this.registerEvent("mousedown",this.onMouseDown),this.registerEvent("mousemove",this.onMouseMove),this.registerEvent("mouseup",this.onMouseUp),this.registerEvent("mouseleave",this.onMouseLeave),this.registerEvent("wheel",this.onWheel)}return e.prototype.dispose=function(){var e=this;this.eventListeners.forEach((function(t,n){return e.element.removeEventListener(n,t)}))},e.prototype.registerEvent=function(e,t){this.element.addEventListener(e,t),this.eventListeners.set(e,t)},e}(),a=acquireVsCodeApi(),s={vertexFilePath:null,fragmentFilePath:null,drawMode:"elements",meshId:"cube"},c=function(){var e;return null!==(e=a.getState())&&void 0!==e?e:s},f=function(e){return a.setState(Object.assign(c(),e))},l=function(){function e(e){this.context=e,this.count=0,this.buffer=e.createBuffer()}return e.prototype.setValue=function(e){this.count=e.length,this.context.bindBuffer(this.context.ELEMENT_ARRAY_BUFFER,this.buffer),this.context.bufferData(this.context.ELEMENT_ARRAY_BUFFER,new Uint16Array(e),this.context.STATIC_DRAW)},e.prototype.setIndexBuffer=function(){this.context.bindBuffer(this.context.ELEMENT_ARRAY_BUFFER,this.buffer)},e.prototype.getCount=function(){return this.count},e.prototype.deleteBuffer=function(){this.context.deleteBuffer(this.buffer),this.buffer=null},e}(),h="SHADERS",p=function(){return(p=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},d=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],u=0,a=i.length;u<a;u++,o++)r[o]=i[u];return r},m={emptyItem:!1},v=function(e,t,n){var r=p(p({},m),n),o=document.createElement("select");o.className="dropdown-base "+t;var i=null,u=[],a=function(t){e(i=t)};o.onchange=function(){var e=u.find((function(e){return e.item.id===o.value}));e.item.id?a(e.item):a(null)};var s=function(e){u.forEach((function(t){t.item.id===e?(t.element.selected=!0,a(t.item)):t.element.selected=!1}))};return[o,{setItems:function(e){o.innerHTML="",u.length=0,(r.emptyItem?d([{id:"",display:""}],e):d(e)).forEach((function(e){var t=document.createElement("option");t.value=e.id,t.textContent=e.display,t.selected=e.id===(null==i?void 0:i.id),o.appendChild(t),u.push({element:t,item:e})}))},getItems:function(){return u.map((function(e){return e.item}))},setSelectedItemById:s,setSelectedItemByIndex:function(e){return s(u[e].item.id)},getSelectedItem:function(){return i},clearSelection:function(){u.forEach((function(e){return e.element.selected=!1})),a(null)}}]},y=function(e,t){var n=v((function(n){n?(e.forEach((function(e){return e.element.classList.add("hidden")})),e.find((function(e){return e.id===n.id})).element.classList.remove("hidden"),null==t||t(n.id)):null==t||t(null)})),r=n[0],o=n[1];return o.setItems(e.map((function(e){return{id:e.id,display:e.display}}))),o.setSelectedItemByIndex(0),r},g=function(e,t){var n=document.createElement("h3");return n.textContent=e,n.className=t+" section-title",{element:n}},x=function(e,t,n){var r=document.createElement("div");r.className=(null!=n?n:"")+" options-wrapper";var o=document.createElement("label");return o.className="options-label",o.textContent=t,e.className=e.className+" options-content",r.appendChild(o),r.appendChild(e),r},E=function(e,t){var n=document.createElement("div");return n.className=e,null==t||t.forEach((function(e){return n.appendChild(e)})),n},T=function(e,t){return e.hasOwnProperty(t)},A=function(e){throw new Error("Unhandled union member: "+JSON.stringify(e))},b=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],u=0,a=i.length;u<a;u++,o++)r[o]=i[u];return r};!function(e){e[e.FLOAT_VEC2=35664]="FLOAT_VEC2",e[e.FLOAT_VEC3=35665]="FLOAT_VEC3",e[e.FLOAT_VEC4=35666]="FLOAT_VEC4",e[e.FLOAT_MAT4=35676]="FLOAT_MAT4"}(r||(r={}));var w,C=function(){function e(e,t,n,r){this.context=e,this.name=n,this.type=r,this.attachToProgram(t)}return e.prototype.attachToProgram=function(e){var t=this.context.getUniformLocation(e,this.name);this.setter=I(this.type,this.context,t)},e.prototype.setValue=function(e){this.value=e},e.prototype.prepareForRender=function(){null!==this.value&&this.setter(this.value)},e.prototype.getUniformType=function(){return this.type},e.prototype.getUniformName=function(){return this.name},e.prototype.dispose=function(){},e}(),I=function(e,t,n){switch(e){case r.FLOAT_VEC2:return function(e){return t.uniform2f.apply(t,b([n],e))};case r.FLOAT_VEC3:return function(e){return t.uniform3f.apply(t,b([n],e))};case r.FLOAT_VEC4:return function(e){return t.uniform4f.apply(t,b([n],e))};case r.FLOAT_MAT4:return function(e){return t.uniformMatrix4fv(n,!1,e)};default:A(e)}},M=function(){function e(e){this.keySelector=e,this.map=new Map}return e.prototype.get=function(e){return this.map.get(this.keySelector(e))},e.prototype.set=function(e,t){this.map.set(this.keySelector(e),t)},e.prototype.has=function(e){return this.map.has(this.keySelector(e))},e.prototype.entriesStrKey=function(){return Array.from(this.map.entries())},e.prototype.deleteStrKey=function(e){this.map.delete(e)},e.prototype.delete=function(e){this.map.delete(this.keySelector(e))},e.prototype.clear=function(){this.map.clear()},e}(),_=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){var t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}))},O=function(e,t){var n=e.indexOf(t);n>-1&&e.splice(n,1)},P=function(e,t){return e.substring(0,e.length-t)},S=function(){function e(e){this.value=e,this.observers=[]}return e.prototype.attach=function(e){this.observers.push(e)},e.prototype.detach=function(e){O(this.observers,e)},e.prototype.detachAll=function(){this.observers.length=0},e.prototype.setValue=function(e){this.value=e,this.notify()},e.prototype.getValue=function(){return this.value},e.prototype.forceNotify=function(){this.notify()},e.prototype.notify=function(){if(null!==this.value){var e=this.value;this.observers.forEach((function(t){return t(e)}))}},e}(),F=function(e,t,n){var r=document.createElement("div");r.className="edit-input-grid";for(var o=[],i=function(){return o.map((function(e){return e.value}))},u=0;u<e;u++){var a=document.createElement("div");a.className="edit-input-row";for(var s=function(e){var r=u*t+e,s=document.createElement("input"),c={element:s,value:0};s.className="edit-input",s.type="number",s.value=(0).toString(),s.disabled=!n,s.oninput=function(){o[r].value=Number(s.value),console.log("calling on change"),null==n||n(i())},o.push(c),a.appendChild(s)},c=0;c<t;c++)s(c);r.appendChild(a)}return[r,{setValues:function(e){return o.forEach((function(t,n){t.value=e[n],t.element.value=t.value.toString()}))},getValues:i,setReadonly:function(e){return o.forEach((function(t){return t.element.readOnly=e}))}}]},L=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],u=0,a=i.length;u<a;u++,o++)r[o]=i[u];return r},R=function(){var e=document.createElement("div");return e.className="unsupported-error",e.innerText="Not supported uniform",e},V=function(e,t){var n=null;return{element:E("column-with-gap",L([y(e,(function(r){null==n||n();var o=e.find((function(e){return e.id===r})),i=function(e){return t(e)};o.value.attach(i),i(o.value.getValue()),n=function(){return o.value.detach(i)}}))],e.map((function(e){return e.element})))),dispose:function(){return null==n?void 0:n()}}},B=function(e,t,n){var r=F(1,e,(function(e){t.setValue(e)})),o=r[0],i=r[1];if(i.setValues(t.getValue()),!n){t.attach((function(e){return i.setValues(e)}))}return o},U=function(e,t,n){var r=function(e,t){return F(e,e,t)}(e,n?function(e){t.setValue(e)}:void 0),o=r[0],i=r[1];if(i.setValues(t.getValue()),!n){t.attach((function(e){return i.setValues(e)}))}return o},D=function(e,t,n){var r=document.createElement("input");if(r.className="edit-input",r.disabled=!n,!n){t.attach((function(e){return r.value=JSON.stringify(e)}))}return r.value=JSON.stringify(t.getValue()),r.oninput=function(){try{var n=JSON.parse(r.value);if(Array.isArray(n))n.every((function(t){return!!Array.isArray(t)&&t.length===e}))||console.log("not every element id the arra is same size");else 1!==e&&console.log("this is not an array type");t.setValue(n)}catch(e){console.log("this is not a json")}},r},N=function(){return(N=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},k=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],u=0,a=i.length;u<a;u++,o++)r[o]=i[u];return r},j=function(e){return e.name+";"+e.type},X=new M(j),H=function(e,t,n,r){var o,i,u=n.map((function(n){var o=N({},n),i=X.get(o);if(i)return i.uniformInfo.attachToProgram(t),{key:o,value:i};var u=new C(e,t,n.name,n.type),a=r.filter((function(e){return e.type===u.getUniformType()})),s=function(e){return u.setValue(e)},c=a.length?V(k([Y(u)],z(a,u)),s):G(u,s),f=c.element,l=c.dispose;return{key:o,value:{component:x(f,n.name),uniformInfo:u,dispose:function(){null==l||l()}}}}));return i=(o=u).map((function(e){return j(e.key)})),X.entriesStrKey().filter((function(e){return!i.includes(e[0])})).forEach((function(e){X.deleteStrKey(e[0])})),o.forEach((function(e){X.has(e.key)||X.set(e.key,e.value)})),u.map((function(e){return e.value}))},Y=function(e){return N({id:"custom",display:"Custom"},G(e))},z=function(e,t){return e.map((function(e){var n=K(t.getUniformType(),!1,e.value);return{id:_(),element:n,display:e.name,value:e.value}}))},G=function(e,t){var n=function(e){switch(e){case r.FLOAT_VEC2:return[1,1];case r.FLOAT_VEC3:return[1,1,1];case r.FLOAT_VEC4:return[1,1,1,1];case r.FLOAT_MAT4:return[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];default:A(e)}}(e.getUniformType()),o=new S(n);return t&&(o.attach((function(e){return t(e)})),t(n)),{element:K(e.getUniformType(),!0,o),value:o,dispose:function(){return o.detachAll()}}},K=function(e,t,n){switch(e){case r.FLOAT_VEC2:return B(2,n,t);case r.FLOAT_VEC3:return B(3,n,t);case r.FLOAT_VEC4:return B(4,n,t);case r.FLOAT_MAT4:return U(4,n,t);default:return R()}},W=function(e,t,n){var r=e.createShader(t);if(e.shaderSource(r,n),e.compileShader(r),e.getShaderParameter(r,e.COMPILE_STATUS))return r;var o=e.getShaderInfoLog(r);return e.deleteShader(r),{error:o}},J=function(e,t,n){var r=e.createProgram();if(e.attachShader(r,t),e.attachShader(r,n),e.linkProgram(r),e.getProgramParameter(r,e.LINK_STATUS))return r;var o=e.getProgramInfoLog(r);throw e.deleteProgram(r),new Error("Creating program failed: "+o)};!function(e){e[e.FLOAT_VEC2=35664]="FLOAT_VEC2",e[e.FLOAT_VEC3=35665]="FLOAT_VEC3",e[e.FLOAT_VEC4=35666]="FLOAT_VEC4"}(w||(w={}));var q=function(){function e(e,t,n,r){this.context=e,this.name=n,this.type=r,this.count=0,this.attachToProgram(t),this.buffer=e.createBuffer()}return e.prototype.attachToProgram=function(e){this.location=this.context.getAttribLocation(e,this.name)},e.prototype.setValue=function(e){this.count=e.length,this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffer);var t=[].concat.apply([],e);this.context.bufferData(this.context.ARRAY_BUFFER,new Float32Array(t),this.context.STATIC_DRAW)},e.prototype.setAttributeBuffer=function(){if(null!==this.buffer){this.context.enableVertexAttribArray(this.location),this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffer);var e=Q(this.type),t=this.context.FLOAT;this.context.vertexAttribPointer(this.location,e,t,!1,0,0)}},e.prototype.getAttributeBufferType=function(){return this.type},e.prototype.getCount=function(){return this.count},e.prototype.deleteBuffer=function(){this.context.deleteBuffer(this.buffer),this.buffer=null},e}(),Q=function(e){switch(e){case w.FLOAT_VEC2:return 2;case w.FLOAT_VEC3:return 3;case w.FLOAT_VEC4:return 4;default:A(e)}},Z=function(){return(Z=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},$=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],u=0,a=i.length;u<a;u++,o++)r[o]=i[u];return r},ee=function(e){return e.name+";"+e.type},te=new M(ee),ne=function(e,t,n,r){var o,i,u=n.map((function(n){var o=Z({},n),i=te.get(o);if(i)return i.attributeBufferInfo.attachToProgram(t),{key:o,value:i};var u=new q(e,t,n.name,n.type),a=r.filter((function(e){return e.type===u.getAttributeBufferType()})),s=function(e){return u.setValue(e)},c=a.length?V($([re(u)],oe(a,u)),s):ie(u,s),f=c.element,l=c.dispose;return{key:o,value:{component:x(f,n.name),attributeBufferInfo:u,dispose:function(){u.deleteBuffer(),null==l||l()}}}}));return i=(o=u).map((function(e){return ee(e.key)})),te.entriesStrKey().filter((function(e){return!i.includes(e[0])})).forEach((function(e){e[1].dispose(),te.deleteStrKey(e[0])})),o.forEach((function(e){te.has(e.key)||te.set(e.key,e.value)})),u.map((function(e){return e.value}))},re=function(e){return Z({id:"custom",display:"Custom"},ie(e))},oe=function(e,t){return e.map((function(e){var n=ue(t.getAttributeBufferType(),!1,e.value);return{id:_(),element:n,display:e.name,value:e.value}}))},ie=function(e,t){var n=(e.getAttributeBufferType(),[[0,0,0,1],[0,.5,0,1],[.9,0,0,1],[0,.5,0,1],[.7,0,0,1],[.7,.5,0,1]]),r=new S(n);return t&&(r.attach((function(e){return t(e)})),t(n)),{element:ue(e.getAttributeBufferType(),!0,r),value:r,dispose:function(){return r.detachAll()}}},ue=function(e,t,n){switch(e){case w.FLOAT_VEC2:return D(2,n,t);case w.FLOAT_VEC3:return D(3,n,t);case w.FLOAT_VEC4:return D(4,n,t);default:return R()}},ae=function(e){var t=document.createElement("canvas");t.className=e;var n,r,o=t.getContext("webgl"),i=0,u=0;if(n=t,r=function(e){t.width=e.width,t.height=e.height,i=e.width,u=e.height},new ResizeObserver((function(e){var t=e.find((function(e){return e.target===n}));if(t){var o=t.target.getBoundingClientRect();r({x:o.x,y:o.y,width:o.width,height:o.height})}})).observe(n),!o)throw new Error("Unable to create webgl context");return[t,{context:o,getSize:function(){return{width:i,height:u}}}]},se=function(){function e(){var e=this;this.eventListeners=[],window.addEventListener("message",(function(t){e.eventListeners.forEach((function(e){return e(t.data)}))}))}return e.prototype.getShaderDocuments=function(){var e=this,t=_();return a.postMessage({type:"getShaderDocuments",id:t}),new Promise((function(n){var r=function(o){"getShaderDocuments"===o.type&&o.id===t&&(n(o.payload.files),e.removeListener(r))};e.eventListeners.push(r)}))},e.prototype.getDocumentText=function(e){var t=this,n=_();return a.postMessage({type:"getDocumentText",id:n,payload:{fileName:e}}),new Promise((function(e){var r=function(o){"getDocumentText"===o.type&&o.id===n&&(e(o.payload.text),t.removeListener(r))};t.eventListeners.push(r)}))},e.prototype.subscribeToDocumentSave=function(e,t){var n=this;a.postMessage({type:"subscribeToDocumentTextChange",payload:{fileName:e}});var r=function(n){"onDocumentTextChange"===n.type&&n.payload.filePath===e&&t(n.payload.text)};return this.eventListeners.push(r),function(){n.removeListener(r),a.postMessage({type:"unsubscribeToDocumentTextChange",payload:{fileName:e}})}},e.prototype.removeListener=function(e){O(this.eventListeners,e)},e}(),ce=function(e){return[].concat(e,e,e,e)},fe=new Map([["cube",{display:"Cube",positions:[[-.5,-.5,.5,1],[.5,-.5,.5,1],[.5,.5,.5,1],[-.5,.5,.5,1],[-.5,-.5,-.5,1],[-.5,.5,-.5,1],[.5,.5,-.5,1],[.5,-.5,-.5,1],[-.5,.5,-.5,1],[-.5,.5,.5,1],[.5,.5,.5,1],[.5,.5,-.5,1],[-.5,-.5,-.5,1],[.5,-.5,-.5,1],[.5,-.5,.5,1],[-.5,-.5,.5,1],[.5,-.5,-.5,1],[.5,.5,-.5,1],[.5,.5,.5,1],[.5,-.5,.5,1],[-.5,-.5,-.5,1],[-.5,-.5,.5,1],[-.5,.5,.5,1],[-.5,.5,-.5,1]],colors:function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],u=0,a=i.length;u<a;u++,o++)r[o]=i[u];return r}(ce([1,1,1,1]),ce([1,0,0,1]),ce([0,1,0,1]),ce([0,0,1,1]),ce([1,1,0,1]),ce([1,0,1,1])),textureCoordinates:[[0,0],[1,0],[1,1],[0,1],[0,0],[1,0],[1,1],[0,1],[0,0],[1,0],[1,1],[0,1],[0,0],[1,0],[1,1],[0,1],[0,0],[1,0],[1,1],[0,1],[0,0],[1,0],[1,1],[0,1]],indices:[0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23]}],["plane",{display:"Plane",positions:[[-.5,-.5,0,1],[.5,-.5,0,1],[.5,.5,0,1],[-.5,.5,0,1]],colors:ce([1,1,1,1]),textureCoordinates:[[0,0],[1,0],[1,1],[0,1]],indices:[0,1,2,0,2,3]}]]);console.log(fe);var le;!function(e){e.create=function(){var e=new Float32Array(16);return e[0]=1,e[5]=1,e[10]=1,e[15]=1,e},e.perspective=function(e,t,n,r,o){var i,u=1/Math.tan(t/2);return e[0]=u/n,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=u,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,null!=o&&o!==1/0?(i=1/(r-o),e[10]=(o+r)*i,e[14]=2*o*r*i):(e[10]=-1,e[14]=-2*r),e},e.lookAt=function(e,t,n,r){var o,i,u,a,s,c,f,l,h,p,d=t[0],m=t[1],v=t[2],y=r[0],g=r[1],x=r[2],E=n[0],T=n[1],A=n[2];return Math.abs(d-E)<1e-6&&Math.abs(m-T)<1e-6&&Math.abs(v-A)<1e-6?function(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}(e):(f=d-E,l=m-T,h=v-A,o=g*(h*=p=1/Math.hypot(f,l,h))-x*(l*=p),i=x*(f*=p)-y*h,u=y*l-g*f,(p=Math.hypot(o,i,u))?(o*=p=1/p,i*=p,u*=p):(o=0,i=0,u=0),a=l*u-h*i,s=h*o-f*u,c=f*i-l*o,(p=Math.hypot(a,s,c))?(a*=p=1/p,s*=p,c*=p):(a=0,s=0,c=0),e[0]=o,e[1]=a,e[2]=f,e[3]=0,e[4]=i,e[5]=s,e[6]=l,e[7]=0,e[8]=u,e[9]=c,e[10]=h,e[11]=0,e[12]=-(o*d+i*m+u*v),e[13]=-(a*d+s*m+c*v),e[14]=-(f*d+l*m+h*v),e[15]=1,e)},e.multiply=function(e,t,n){var r=t[0],o=t[1],i=t[2],u=t[3],a=t[4],s=t[5],c=t[6],f=t[7],l=t[8],h=t[9],p=t[10],d=t[11],m=t[12],v=t[13],y=t[14],g=t[15],x=n[0],E=n[1],T=n[2],A=n[3];return e[0]=x*r+E*a+T*l+A*m,e[1]=x*o+E*s+T*h+A*v,e[2]=x*i+E*c+T*p+A*y,e[3]=x*u+E*f+T*d+A*g,x=n[4],E=n[5],T=n[6],A=n[7],e[4]=x*r+E*a+T*l+A*m,e[5]=x*o+E*s+T*h+A*v,e[6]=x*i+E*c+T*p+A*y,e[7]=x*u+E*f+T*d+A*g,x=n[8],E=n[9],T=n[10],A=n[11],e[8]=x*r+E*a+T*l+A*m,e[9]=x*o+E*s+T*h+A*v,e[10]=x*i+E*c+T*p+A*y,e[11]=x*u+E*f+T*d+A*g,x=n[12],E=n[13],T=n[14],A=n[15],e[12]=x*r+E*a+T*l+A*m,e[13]=x*o+E*s+T*h+A*v,e[14]=x*i+E*c+T*p+A*y,e[15]=x*u+E*f+T*d+A*g,e}}(le||(le={}));var he=function(){function e(e,t,n,r){this.context=e,this.name=n,this.unit=r,this.isPowerOf2=function(e){return 0==(e&e-1)},this.attachToProgram(t),this.texture=e.createTexture(),this.context.bindTexture(this.context.TEXTURE_2D,this.texture)}return e.prototype.attachToProgram=function(e){this.location=this.context.getUniformLocation(e,this.name)},e.prototype.setUnit=function(e){this.unit=e},e.prototype.setUrl=function(e){var t=this,n=this.context.RGBA,r=this.context.RGBA,o=this.context.UNSIGNED_BYTE,i=new Uint8Array([0,0,255,255]);this.context.texImage2D(this.context.TEXTURE_2D,0,n,1,1,0,r,o,i);var u=new Image;u.crossOrigin="",u.onload=function(){t.context.bindTexture(t.context.TEXTURE_2D,t.texture),t.context.texImage2D(t.context.TEXTURE_2D,0,n,r,o,u),t.isPowerOf2(u.width)&&t.isPowerOf2(u.height)?t.context.generateMipmap(t.context.TEXTURE_2D):(t.context.texParameteri(t.context.TEXTURE_2D,t.context.TEXTURE_WRAP_S,t.context.CLAMP_TO_EDGE),t.context.texParameteri(t.context.TEXTURE_2D,t.context.TEXTURE_WRAP_T,t.context.CLAMP_TO_EDGE),t.context.texParameteri(t.context.TEXTURE_2D,t.context.TEXTURE_MIN_FILTER,t.context.LINEAR))},u.src=e},e.prototype.prepareForRender=function(){null!==this.texture&&(this.context.activeTexture(this.context.TEXTURE0+this.unit),this.context.bindTexture(this.context.TEXTURE_2D,this.texture),this.context.uniform1i(this.location,this.unit))},e.prototype.deleteTexture=function(){this.context.deleteTexture(this.texture),this.texture=null},e}(),pe=function(){return(pe=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},de=function(e){return e.name},me=new M(de),ve=function(e,t,n){var r,o,i=n.map((function(n,r){var o=pe({},n),i=me.get(o);if(i)return i.textureInfo.attachToProgram(t),i.textureInfo.setUnit(r),{key:o,value:i};var u=new he(e,t,n.name,r),a=ye("https://i.imgur.com/vXDWqIH.jpeg",(function(e){return u.setUrl(e)}));return{key:o,value:{component:x(a,n.name),textureInfo:u,dispose:function(){u.deleteTexture()}}}}));return o=(r=i).map((function(e){return de(e.key)})),me.entriesStrKey().filter((function(e){return!o.includes(e[0])})).forEach((function(e){e[1].dispose(),me.deleteStrKey(e[0])})),r.forEach((function(e){me.has(e.key)||me.set(e.key,e.value)})),i.map((function(e){return e.value}))},ye=function(e,t){var n=document.createElement("input");return n.className="edit-input",n.value=e,n.onblur=function(){t(n.value)},t(e),n},ge=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function u(e){try{s(r.next(e))}catch(e){i(e)}}function a(e){try{s(r.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(u,a)}s((r=r.apply(e,t||[])).next())}))},xe=function(e,t){var n,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!(o=u.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=t.call(e,u)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},Ee=function(){return new Map([["localToProjected",{name:"Binding - Camera LocalToProjected",type:r.FLOAT_MAT4,value:new S([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1])}]])};ge(void 0,void 0,void 0,(function(){var e,t,n,r,o,i,a,s,p,d,m,y,A,b,C,I,M,_,O,F,L,R,B,U,N,k,j,X,Y,z,G,K,q,Q,Z,$,ee,te;return xe(this,(function(re){var oe,ie,ue,ce,he,pe,de;return e=new se,t=c(),n=document.getElementById("viewer"),r=E("viewer-options"),o=E("viewer-shader-options"),i=E("viewer-content shader-errors"),a=ae("viewer-content"),s=a[0],p=a[1],d=new Map([["positions",{name:"Binding - Mesh positions",type:w.FLOAT_VEC4,value:new S([])}],["textureCoordinates",{name:"Binding - Mesh texture coords",type:w.FLOAT_VEC2,value:new S([])}],["colors",{name:"Binding - Mesh colors",type:w.FLOAT_VEC4,value:new S([])}]]),m=Ee(),y=new l(p.context),A=new S([]),b={drawMode:"arrays"},C={longitude:1,latitude:1,radius:2},new u(s,(function(){return C}),(function(e){C=e;var t=45*Math.PI/180,n=p.getSize(),r=n.width/n.height,o=le.create();le.perspective(o,t,r,.1,100);var i=le.create(),u=function(e){var t=e.radius*Math.sin(e.latitude),n=e.radius*Math.cos(e.latitude),r=n*Math.cos(e.longitude);return{x:n*Math.sin(e.longitude),y:t,z:r}}(C);le.lookAt(i,[u.x,u.y,u.z],[0,0,0],[0,1,0]);var a=le.create();le.multiply(a,o,i),m.get("localToProjected").value.setValue(a)})),n.appendChild(s),n.appendChild(i),n.appendChild(r),I=function(e){s.style.visibility="canvas"===e?"visible":"collapse",i.style.visibility="errors"===e?"visible":"collapse"},M=function(){e.getShaderDocuments().then((function(e){var n=e.map((function(e){return{id:e.filePath,display:e.fileName}}));j.setItems(n),t.vertexFilePath&&n.some((function(e){return e.id===t.vertexFilePath}))&&j.setSelectedItemById(t.vertexFilePath),z.setItems(n),t.fragmentFilePath&&n.some((function(e){return e.id===t.fragmentFilePath}))&&z.setSelectedItemById(t.fragmentFilePath)}))},R=null,B=function(e){var t=fe.get(e),n=t.positions,r=t.colors,o=t.textureCoordinates,i=t.indices;d.get("positions").value.setValue(n),d.get("colors").value.setValue(r),d.get("textureCoordinates").value.setValue(o),A.setValue(i)},U=function(){o.innerHTML="";var e=p.context;if(L&&F){var t=function(e,t,n){var r=W(e,e.VERTEX_SHADER,t),o=W(e,e.FRAGMENT_SHADER,n),i=void 0;T(r,"error")&&(i=P(r.error,1));var u=void 0;return T(o,"error")&&(u=P(o.error,1)),i||u?[i,u]:J(e,r,o)}(e,F,L);if(Array.isArray(t))I("errors"),i.innerText=function(e){var t=e[0],n=e[1],r=[];return t&&r.push("VERTEX SHADER:",t),n&&r.push("FRAGMENT SHADER:",n),r.join("\r\n")}(t);else{I("canvas");var n=t,r=function(e,t){for(var n=e.getProgramParameter(t,e.ACTIVE_UNIFORMS),r=[],o=[],i=0;i<n;++i){var u=e.getActiveUniform(t,i);35678===u.type?o.push({name:u.name,unit:o.length}):r.push({name:u.name,type:u.type})}return{dataUniforms:r,textureUniforms:o}}(e,n),u=function(e,t){for(var n=e.getProgramParameter(t,e.ACTIVE_ATTRIBUTES),r=[],o=0;o<n;++o){var i=e.getActiveAttrib(t,o);r.push({name:i.name,type:i.type})}return r}(e,n),a=H(e,n,r.dataUniforms,Array.from(m.values()));a.length>0&&o.appendChild(E("viewer-shaders-title",[g("UNIFORMS","").element])),a.forEach((function(e){return o.appendChild(e.component)}));var s=ve(e,n,r.textureUniforms);s.length>0&&o.appendChild(E("viewer-shaders-title",[g("TEXTURES","").element])),s.forEach((function(e){return o.appendChild(e.component)}));var c=ne(e,n,u,Array.from(d.values()));c.length>0&&o.appendChild(E("viewer-shaders-title",[g("ATTRIBUTE BUFFERS","").element])),c.forEach((function(e){return o.appendChild(e.component)}));var f=a.map((function(e){return e.uniformInfo})),l=s.map((function(e){return e.textureInfo}));console.log("ti",l);var h=c.map((function(e){return e.attributeBufferInfo}));null!==R&&cancelAnimationFrame(R);var v=function(){!function(e,t,n,r){e.useProgram(t),e.viewport(0,0,e.canvas.width,e.canvas.height),e.clearColor(0,0,0,1),e.clearDepth(1),e.enable(e.DEPTH_TEST),e.depthFunc(e.LEQUAL),e.clear(e.COLOR_BUFFER_BIT|e.DEPTH_BUFFER_BIT),n.uniformInfos.forEach((function(e){return e.prepareForRender()})),n.textureInfos.forEach((function(e){return e.prepareForRender()})),n.attributeBufferInfos.forEach((function(e){return e.setAttributeBuffer()}));var o=e.TRIANGLES;if("arrays"===r.drawMode){var i=Math.min.apply(Math,n.attributeBufferInfos.map((function(e){return e.getCount()})));e.drawArrays(o,0,i)}else n.indexBufferInfo.setIndexBuffer(),e.drawElements(o,n.indexBufferInfo.getCount(),e.UNSIGNED_SHORT,0)}(e,n,{uniformInfos:f,textureInfos:l,attributeBufferInfos:h,indexBufferInfo:y},b),R=requestAnimationFrame(v)};v()}}else I("none")},r.appendChild(E("viewer-shaders-title",[g(h,"").element,(oe="Sync",ie="viewer-refresh-button",ue=M,ce=document.createElement("button"),ce.onclick=ue,ce.className=ie,ce.textContent=oe,{element:ce}).element])),N=v((function(t){return ge(void 0,void 0,void 0,(function(){var n;return xe(this,(function(r){switch(r.label){case 0:return null==_||_(),t&&(_=e.subscribeToDocumentSave(t.id,(function(e){F=e,U()}))),t?[4,e.getDocumentText(t.id)]:[3,2];case 1:return n=r.sent(),[3,3];case 2:n="",r.label=3;case 3:return F=n,f({vertexFilePath:t?t.id:null}),U(),[2]}}))}))})),k=N[0],(j=N[1]).setSelectedItemById(t.vertexFilePath),r.appendChild(x(k,"Vertex Shader")),X=v((function(t){return ge(void 0,void 0,void 0,(function(){var n;return xe(this,(function(r){switch(r.label){case 0:return null==O||O(),t&&(O=e.subscribeToDocumentSave(t.id,(function(e){L=e,U()}))),t?[4,e.getDocumentText(t.id)]:[3,2];case 1:return n=r.sent(),[3,3];case 2:n="",r.label=3;case 3:return L=n,f({fragmentFilePath:t?t.id:null}),U(),[2]}}))}))})),Y=X[0],(z=X[1]).setSelectedItemById(t.fragmentFilePath),r.appendChild(x(Y,"Fragment Shader")),r.appendChild(E("viewer-shaders-title",[g("DRAW OPTIONS","").element])),G=v((function(e){e&&(B(e.id),f({meshId:e.id}))})),K=G[0],(q=G[1]).setItems(Array.from(fe.entries()).map((function(e){return{id:e[0],display:e[1].display}}))),q.setSelectedItemById(t.meshId),r.appendChild(x(K,"Mesh")),Q=(he=A,pe=function(e){return y.setValue(e)},de=new S([0,1,2]),V([{id:"custom",display:"Custom",value:de,element:D(1,de,!0)},{id:"binding",display:"Binding - Mesh indices",value:he,element:D(1,he,!1)}],pe)).element,Z=x(Q,"Indices"),$=v((function(e){var t,n;e&&(b.drawMode=e.id,t=Z,n="elements"===b.drawMode,t.style.display=n?"inherit":"none",f({drawMode:e.id}))})),ee=$[0],(te=$[1]).setItems([{id:"arrays",display:"Arrays"},{id:"elements",display:"Elements"}]),te.setSelectedItemById(t.drawMode),r.appendChild(x(ee,"Draw mode")),r.appendChild(Z),r.appendChild(o),M(),[2]}))}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,