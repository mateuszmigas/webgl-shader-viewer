!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);var r=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],u=0,l=i.length;u<l;u++,o++)r[o]=i[u];return r},o=acquireVsCodeApi(),i=function(){function e(){var e=this;this.eventListeners=[],window.addEventListener("message",(function(t){e.eventListeners=e.eventListeners.filter((function(e){return e(t.data)}))}))}return e.prototype.getShaderDocuments=function(){var e=this;return o.postMessage({type:"getShaderDocuments"}),new Promise((function(t){e.eventListeners.push((function(e){return"getShaderDocuments"===e.type&&(t(e.payload.files),!0)}))}))},e.prototype.onDidShaderDocumentsChange=function(e){o.postMessage({type:"onDidShaderDocumentsChange"}),this.eventListeners.push((function(t){return"onDidShaderDocumentsChange"===t.type&&e(t.payload.files),!1}))},e}(),u=function(e,t){var n,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function l(i){return function(l){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!(o=u.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=t.call(e,u)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,l])}}};(function(e,t,n,r){new(n||(n=Promise))((function(o,i){function u(e){try{c(r.next(e))}catch(e){i(e)}}function l(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(u,l)}c((r=r.apply(e,t||[])).next())}))})(void 0,void 0,void 0,(function(){var e,t,n,o,l,c,a,s,f,d,p;return u(this,(function(u){switch(u.label){case 0:return e=new i,t=document.getElementById("viewer"),(n=document.createElement("div")).className="viewer-options",(o=document.createElement("canvas")).className="viewer-content",l=function(e){var t=document.createElement("select"),n=null,o=[],i=function(t){e(n=t)};return t.onchange=function(){var e=o.find((function(e){return e.item.id===t.value}));e.item.id?i(e.item):i(null)},{element:t,controller:{setItems:function(e){t.innerHTML="",o.length=0,e.find((function(e){return e.id===(null==n?void 0:n.id)}))||i(null),r([{id:"",display:""}],e).forEach((function(e){var r=document.createElement("option");r.value=e.id,r.textContent=e.display,r.selected=e.id===(null==n?void 0:n.id),t.appendChild(r),o.push({element:r,item:e})}))},getItems:function(){return o.map((function(e){return e.item}))},setSelectedItemById:function(e){i(null),o.forEach((function(t){t.item.id===e?(t.element.selected=!0,i(t.item)):t.element.selected=!1}))},getSelectedItem:function(){return n},clearSelection:function(){o.forEach((function(e){return e.element.selected=!1})),i(null)}}}}((function(e){console.log("item changed",e)})),c=l.element,a=l.controller,s=function(){var e=document.createElement("textarea");return{element:e,controller:{getText:function(){return e.value},setText:function(t){return e.value=t}}}}(),f=s.element,s.controller,n.appendChild(c),n.appendChild(f),t.appendChild(n),[4,e.getShaderDocuments()];case 1:return d=u.sent(),a.setItems(d.map((function(e){return{id:e.filePath,display:e.fileName}}))),e.onDidShaderDocumentsChange((function(e){console.log("docs changed"),a.setItems(e.map((function(e){return{id:e.filePath,display:e.fileName}})))})),o.width=500,o.height=500,t.appendChild(o),(p=o.getContext("2d")).fillStyle="green",p.fillRect(150,150,200,450),[2]}}))}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,