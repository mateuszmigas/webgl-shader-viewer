!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);var r="SHADERS",o=function(){return(o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},i=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],a=0,u=i.length;a<u;a++,o++)r[o]=i[a];return r},a={emptyItem:!0},u=function(e,t,n){var r=o(o({},a),n),u=document.createElement("select");u.className="dropdown-base "+t;var c=null,l=[],s=function(t){e(c=t)};u.onchange=function(){var e=l.find((function(e){return e.item.id===u.value}));e.item.id?s(e.item):s(null)};return[u,{setItems:function(e){u.innerHTML="",l.length=0,e.find((function(e){return e.id===(null==c?void 0:c.id)}))||s(null),(r.emptyItem?i([{id:"",display:""}],e):i(e)).forEach((function(e){var t=document.createElement("option");t.value=e.id,t.textContent=e.display,t.selected=e.id===(null==c?void 0:c.id),u.appendChild(t),l.push({element:t,item:e})}))},getItems:function(){return l.map((function(e){return e.item}))},setSelectedItemById:function(e){s(null),l.forEach((function(t){t.item.id===e?(t.element.selected=!0,s(t.item)):t.element.selected=!1}))},getSelectedItem:function(){return c},clearSelection:function(){l.forEach((function(e){return e.element.selected=!1})),s(null)}}]},c=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){var t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}))},l=function(e,t){return e.hasOwnProperty(t)},s=acquireVsCodeApi(),d=function(){function e(){var e=this;this.eventListeners=[],window.addEventListener("message",(function(t){e.eventListeners.forEach((function(e){return e(t.data)}))}))}return e.prototype.getShaderDocuments=function(){var e=this,t=c();return s.postMessage({type:"getShaderDocuments",id:t}),new Promise((function(n){var r=function(o){"getShaderDocuments"===o.type&&o.id===t&&(n(o.payload.files),e.removeListener(r))};e.eventListeners.push(r)}))},e.prototype.getDocumentText=function(e){var t=this,n=c();return s.postMessage({type:"getDocumentText",id:n,payload:{fileName:e}}),new Promise((function(e){var r=function(o){"getDocumentText"===o.type&&o.id===n&&(e(o.payload.text),t.removeListener(r))};t.eventListeners.push(r)}))},e.prototype.subscribeToDocumentSave=function(e,t){var n=this;s.postMessage({type:"subscribeToDocumentTextChange",payload:{fileName:e}});var r=function(n){"onDocumentTextChange"===n.type&&n.payload.filePath===e&&t(n.payload.text)};return this.eventListeners.push(r),function(){n.removeListener(r),s.postMessage({type:"unsubscribeToDocumentTextChange",payload:{fileName:e}})}},e.prototype.removeListener=function(e){var t,n,r;t=this.eventListeners,n=e,(r=t.indexOf(n))>-1&&t.splice(r,1)},e}(),f=function(e,t,n){var r=document.createElement("button");return r.onclick=n,r.className=t,r.textContent=e,{element:r}},p=function(e,t,n){var r=document.createElement("div");r.className=t+" options-wrapper";var o=document.createElement("label");return o.className="options-label",o.textContent=n,e.className=e.className+" options-content",r.appendChild(o),r.appendChild(e),r},m=function(e,t){var n=document.createElement("div");return n.className=e,null==t||t.forEach((function(e){return n.appendChild(e)})),n},v=function(e,t,n,r,o){var i=document.createElement("div");i.className="edit-input-grid";for(var a=[],u=function(){return a.map((function(e){return e.value}))},c=0;c<n;c++){var l=document.createElement("div");l.className="edit-input-row";for(var s=function(n){var i=c*r+n,s=e[i],d=document.createElement("input"),f={element:d,value:s};Object.assign(d,o),d.className="edit-input",d.type="number",d.value=null==s?void 0:s.toString(),d.oninput=function(){a[i].value=Number(d.value),null==t||t(u())},a.push(f),l.appendChild(d)},d=0;d<r;d++)s(d);i.appendChild(l)}return[i,{setValues:function(e){return a.forEach((function(t,n){return t.value=e[n]}))},getValues:u,setReadonly:function(e){return a.forEach((function(t){return t.element.readOnly=e}))}}]},h=function(e){return v([0,0,0,0,0,0,0,0,0],e,3,3)},y={min:"0",max:"1",step:"0.1"},g=function(){function e(e){this.keySelector=e,this.map=new Map}return e.prototype.get=function(e){this.map.get(this.keySelector(e))},e.prototype.set=function(e,t){this.map.set(this.keySelector(e),t)},e.prototype.clear=function(){this.map.clear()},e}(),b=(new g((function(e){return e.name+";"+e.bufferType})),new g((function(e){return e.name+";"+e.uniformType})),function(e){var t;e.appendChild(p(function(e){var t=[.5,.5,.5,1],n=document.createElement("div");n.className="edit-input-color";var r=function(e){n.style.background="rgb("+255*e[0]+","+255*e[1]+","+255*e[2]+","+e[3]+")"};r(t);var o=m("row-with-gap"),i=v(t,(function(t){r(t),null==e||e(t)}),1,4,y),a=i[0],u=i[1];return o.appendChild(a),o.appendChild(n),[o,u]}()[0],"","u_color")),e.appendChild(p(v([0,0,0,0],t,1,4)[0],"","u_diffuse"));var n=h((function(e){return console.log(e)})),r=n[0],o=n[1],i=u((function(e){e&&("0"===e.id&&o.setReadonly(!1),"1"===e.id&&o.setReadonly(!0))}),"",{emptyItem:!1}),a=i[0],c=i[1];c.setItems([{id:"0",display:"Color picker"},{id:"1",display:"Custom2"}]),c.setSelectedItemById("0"),e.appendChild(p(m("column-with-gap",[a,r]),"","dobre diffuse")),e.appendChild(p(m("column-with-gap",[u((function(e){}))[0],h((function(e){return console.log(e)}))[0]]),"","u_diffuse2")),e.appendChild(p(m("column-with-gap",[u((function(e){}))[0],h((function(e){return console.log(e)}))[0]]),"","u_diffuse2"))}),x=function(e,t,n){var r=e.createShader(t);if(e.shaderSource(r,n),e.compileShader(r),e.getShaderParameter(r,e.COMPILE_STATUS))return r;var o=e.getShaderInfoLog(r);return e.deleteShader(r),{error:o}},w=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function u(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,u)}c((r=r.apply(e,t||[])).next())}))},S=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=a.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}},C=function(e){var t=document.createElement("canvas");t.className=e;var n=t.getContext("webgl");if(!n)throw new Error("Unable to create webgl context");return[t,{compileShaders:function(e,t){var r=x(n,n.VERTEX_SHADER,e),o=x(n,n.FRAGMENT_SHADER,t),i=void 0;l(r,"error")&&(i=r.error);var a=void 0;if(l(o,"error")&&(a=o.error),i||a)return[i,a];!function(e,t,n){var r=e.createProgram();if(e.attachShader(r,t),e.attachShader(r,n),e.linkProgram(r),e.getProgramParameter(r,e.LINK_STATUS))return r;throw console.log("cos nie halo"),e.deleteProgram(r),new Error("Creating program failed: "+e.getProgramInfoLog(r))}(n,r,o);return Promise.resolve({})}}]};w(void 0,void 0,void 0,(function(){var e,t,n,o,i,a,c,l,s,v,h,y,g,x,E,T,P,N,D,I;return S(this,(function(L){var O,M,_;return e=new d,t=document.getElementById("viewer"),n=m("viewer-options"),o=m("viewer-shader-options"),(i=m("viewer-content")).style.background="red",a=C("viewer-content"),c=a[0],l=a[1],t.appendChild(c),t.appendChild(i),t.appendChild(n),s=function(e){c.style.visibility="canvas"===e?"visible":"collapse",i.style.visibility="errors"===e?"visible":"collapse"},x=function(){if(o.innerHTML="",console.log({fragment:g,vertex:y}),b(o),g&&y){var e=l.compileShaders(y,g);if(Array.isArray(e)){i.style.visibility="visible";var t=e;s("errors"),i.innerText=t.join("\r\n")}else s("canvas")}else console.log("clear")},n.appendChild(m("viewer-shaders-title",[(O=r,M="",_=document.createElement("h3"),_.textContent=O,_.className=M+" section-title",{element:_}).element,f("Sync","viewer-refresh-button",(function(){e.getShaderDocuments().then((function(e){var t=e.map((function(e){return{id:e.filePath,display:e.fileName}}));P.setItems(t),I.setItems(t)}))})).element])),E=u((function(t){return w(void 0,void 0,void 0,(function(){var n;return S(this,(function(r){switch(r.label){case 0:return null==v||v(),t&&(v=e.subscribeToDocumentSave(t.id,(function(e){y=e,x()}))),t?[4,e.getDocumentText(t.id)]:[3,2];case 1:return n=r.sent(),[3,3];case 2:n="",r.label=3;case 3:return y=n,x(),[2]}}))}))})),T=E[0],P=E[1],n.appendChild(p(T,"viewer-vertex-shader-selector","Vertex Shader")),N=u((function(t){return w(void 0,void 0,void 0,(function(){var n;return S(this,(function(r){switch(r.label){case 0:return null==h||h(),t&&(h=e.subscribeToDocumentSave(t.id,(function(e){g=e,x()}))),t?[4,e.getDocumentText(t.id)]:[3,2];case 1:return n=r.sent(),[3,3];case 2:n="",r.label=3;case 3:return g=n,x(),[2]}}))}))})),D=N[0],I=N[1],n.appendChild(p(D,"viewer-fragment-shader-selector","Fragment Shader")),n.appendChild(o),[2]}))}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,