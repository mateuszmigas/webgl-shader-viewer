!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);var r,o="SHADERS",i=function(){return(i=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},a=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],a=0,u=i.length;a<u;a++,o++)r[o]=i[a];return r},u={emptyItem:!0},c=function(e,t,n){var r=i(i({},u),n),o=document.createElement("select");o.className="dropdown-base "+t;var c=null,s=[],l=function(t){e(c=t)};o.onchange=function(){var e=s.find((function(e){return e.item.id===o.value}));e.item.id?l(e.item):l(null)};return[o,{setItems:function(e){o.innerHTML="",s.length=0,e.find((function(e){return e.id===(null==c?void 0:c.id)}))||l(null),(r.emptyItem?a([{id:"",display:""}],e):a(e)).forEach((function(e){var t=document.createElement("option");t.value=e.id,t.textContent=e.display,t.selected=e.id===(null==c?void 0:c.id),o.appendChild(t),s.push({element:t,item:e})}))},getItems:function(){return s.map((function(e){return e.item}))},setSelectedItemById:function(e){l(null),s.forEach((function(t){t.item.id===e?(t.element.selected=!0,l(t.item)):t.element.selected=!1}))},getSelectedItem:function(){return c},clearSelection:function(){s.forEach((function(e){return e.element.selected=!1})),l(null)}}]},s=function(e,t){return e.substring(0,e.length-t)},l=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){var t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}))},f=function(e,t){return e.hasOwnProperty(t)},p=function(e){throw new Error("Unhandled union member: "+JSON.stringify(e))},d=acquireVsCodeApi(),m=function(){function e(){var e=this;this.eventListeners=[],window.addEventListener("message",(function(t){e.eventListeners.forEach((function(e){return e(t.data)}))}))}return e.prototype.getShaderDocuments=function(){var e=this,t=l();return d.postMessage({type:"getShaderDocuments",id:t}),new Promise((function(n){var r=function(o){"getShaderDocuments"===o.type&&o.id===t&&(n(o.payload.files),e.removeListener(r))};e.eventListeners.push(r)}))},e.prototype.getDocumentText=function(e){var t=this,n=l();return d.postMessage({type:"getDocumentText",id:n,payload:{fileName:e}}),new Promise((function(e){var r=function(o){"getDocumentText"===o.type&&o.id===n&&(e(o.payload.text),t.removeListener(r))};t.eventListeners.push(r)}))},e.prototype.subscribeToDocumentSave=function(e,t){var n=this;d.postMessage({type:"subscribeToDocumentTextChange",payload:{fileName:e}});var r=function(n){"onDocumentTextChange"===n.type&&n.payload.filePath===e&&t(n.payload.text)};return this.eventListeners.push(r),function(){n.removeListener(r),d.postMessage({type:"unsubscribeToDocumentTextChange",payload:{fileName:e}})}},e.prototype.removeListener=function(e){var t,n,r;t=this.eventListeners,n=e,(r=t.indexOf(n))>-1&&t.splice(r,1)},e}(),h=function(e,t,n){var r=document.createElement("button");return r.onclick=n,r.className=t,r.textContent=e,{element:r}},v=function(e,t,n){var r=document.createElement("div");r.className=t+" options-wrapper";var o=document.createElement("label");return o.className="options-label",o.textContent=n,e.className=e.className+" options-content",r.appendChild(o),r.appendChild(e),r},y=function(e,t){var n=document.createElement("div");return n.className=e,null==t||t.forEach((function(e){return n.appendChild(e)})),n},g=function(e,t,n){var r=e.createShader(t);if(e.shaderSource(r,n),e.compileShader(r),e.getShaderParameter(r,e.COMPILE_STATUS))return r;var o=e.getShaderInfoLog(r);return e.deleteShader(r),{error:o}},b=function(e,t,n){var r=g(e,e.VERTEX_SHADER,t),o=g(e,e.FRAGMENT_SHADER,n),i=void 0;f(r,"error")&&(i=s(r.error,1));var a=void 0;return f(o,"error")&&(a=s(o.error,1)),i||a?[i,a]:function(e,t,n){var r=e.createProgram();if(e.attachShader(r,t),e.attachShader(r,n),e.linkProgram(r),e.getProgramParameter(r,e.LINK_STATUS))return r;throw e.deleteProgram(r),new Error("Creating program failed: "+e.getProgramInfoLog(r))}(e,r,o)},x=function(e){var t=document.createElement("canvas");t.className=e;var n,r,o=t.getContext("webgl");if(n=t,r=function(e){t.width=e.width,t.height=e.height},new ResizeObserver((function(e){var t=e.find((function(e){return e.target===n}));if(t){var o=t.target.getBoundingClientRect();r({x:o.x,y:o.y,width:o.width,height:o.height})}})).observe(n),!o)throw new Error("Unable to create webgl context");return[t,{context:o}]},E=function(e,t,n,r,o){var i=document.createElement("div");i.className="edit-input-grid";for(var a=[],u=function(){return a.map((function(e){return e.value}))},c=0;c<n;c++){var s=document.createElement("div");s.className="edit-input-row";for(var l=function(n){var i=c*r+n,l=e[i],f=document.createElement("input"),p={element:f,value:l};Object.assign(f,o),f.className="edit-input",f.type="number",f.value=null==l?void 0:l.toString(),f.oninput=function(){a[i].value=Number(f.value),null==t||t(u())},a.push(p),s.appendChild(f)},f=0;f<r;f++)l(f);i.appendChild(s)}return[i,{setValues:function(e){return a.forEach((function(t,n){t.value=e[n],t.element.value=t.value.toString()}))},getValues:u,setReadonly:function(e){return a.forEach((function(t){return t.element.readOnly=e}))}}]},A=function(e){return E([0,0,0],e,1,3)},w=function(){return(w=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},T={min:"0",max:"1",step:"0.1"},C=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],a=0,u=i.length;a<u;a++,o++)r[o]=i[a];return r};!function(e){e[e.FLOAT_VEC2=35664]="FLOAT_VEC2",e[e.FLOAT_VEC3=35665]="FLOAT_VEC3",e[e.FLOAT_VEC4=35666]="FLOAT_VEC4",e[e.SAMPLER_2D=35678]="SAMPLER_2D"}(r||(r={}));var S,O=function(){function e(e,t,n,r){this.name=n,this.type=r;var o=e.getUniformLocation(t,n);this.setter=V(r,e,o)}return e.prototype.setValue=function(e){this.value=e},e.prototype.setUniform=function(){null!==this.value&&this.setter(this.value)},e.prototype.getUniformType=function(){return this.type},e.prototype.dispose=function(){},e}(),V=function(e,t,n){switch(console.log("creating setter for",e),e){case r.FLOAT_VEC2:return function(e){return t.uniform2f.apply(t,C([n],e))};case r.FLOAT_VEC3:return function(e){return t.uniform3f.apply(t,C([n],e))};case r.FLOAT_VEC4:return function(e){return t.uniform4f.apply(t,C([n],e))};case r.SAMPLER_2D:return function(e){};default:p(e)}},L=function(){function e(e){this.keySelector=e,this.map=new Map}return e.prototype.get=function(e){return this.map.get(this.keySelector(e))},e.prototype.set=function(e,t){this.map.set(this.keySelector(e),t)},e.prototype.has=function(e){this.map.has(this.keySelector(e))},e.prototype.clear=function(){this.map.clear()},e}(),_=function(){return(_=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},F=new L((function(e){return e.name+";"+e.type})),N=function(e){switch(e.getUniformType()){case r.FLOAT_VEC2:return I((function(t){return e.setValue(t)}));case r.FLOAT_VEC3:return B((function(t){return e.setValue(t)}));case r.FLOAT_VEC4:var t=[1,0,0,1];return e.setValue(t),j(t,(function(t){return e.setValue(t)}));case r.SAMPLER_2D:return D((function(t){l();e.setValue({slot:t.slot,textureData:!0})}));default:return P()}},P=function(){var e=document.createElement("div");return e.className="unsupported-error",e.innerText="Not supported uniform",e},R=function(e){var t=c((function(t){t&&(Object.values(e).forEach((function(e){return e.element.classList.add("hidden")})),e[t.id].element.classList.remove("hidden"))}),"",{emptyItem:!1}),n=t[0],r=t[1];return r.setItems(Object.entries(e).map((function(e){return{id:e[0],display:e[1].display}}))),r.setSelectedItemById("custom"),n},I=function(e){var t=E([0,0],e,1,2),n=t[0];return t[1].setValues([0,0]),n},D=function(e){var t=A(),n=t[0];return t[1].setValues([0,0,0]),n},B=function(e){var t=A(e),n=t[0];t[1].setValues([0,0,0]);var r=function(e){var t=[.5,.5,.5],n=document.createElement("div");n.className="edit-input-color";var r=function(e){n.style.background="rgb("+255*e[0]+","+255*e[1]+","+255*e[2]+",1)"};r(t);var o=y("row-with-gap"),i=E(t,(function(t){r(t),null==e||e(t)}),1,3,T),a=i[0],u=i[1];return o.appendChild(a),o.appendChild(n),[o,w(w({},u),{setValues:function(e){u.setValues(e),r(e)}})]}(e),o=r[0];r[1].setValues([1,0,0]);var i=R({custom:{display:"Custom",element:n},color:{display:"Color",element:o}});return y("column-with-gap",[i,n,o])},j=function(e,t){var n=E([0,0,0,0],t,1,4),r=n[0];n[1].setValues(e);var o=function(e){var t=[.5,.5,.5,1],n=document.createElement("div");n.className="edit-input-color";var r=function(e){n.style.background="rgb("+255*e[0]+","+255*e[1]+","+255*e[2]+","+e[3]+")"};r(t);var o=y("row-with-gap"),i=E(t,(function(t){r(t),null==e||e(t)}),1,4,T),a=i[0],u=i[1];return o.appendChild(a),o.appendChild(n),[o,w(w({},u),{setValues:function(e){u.setValues(e),r(e)}})]}(t),i=o[0];o[1].setValues(e);var a=R({custom:{display:"Custom",element:r},color:{display:"Color",element:i}});return y("column-with-gap",[a,r,i])};!function(e){e[e.FLOAT_VEC3=35665]="FLOAT_VEC3",e[e.FLOAT_VEC4=35666]="FLOAT_VEC4"}(S||(S={}));var M=function(){function e(e,t,n,r){this.context=e,this.name=n,this.type=r,this.location=e.getAttribLocation(t,n),this.buffer=e.createBuffer()}return e.prototype.setValue=function(e){this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffer);var t=[].concat.apply([],e);this.context.bufferData(this.context.ARRAY_BUFFER,new Float32Array(t),this.context.STATIC_DRAW)},e.prototype.setAttributeBuffer=function(){if(null!==this.buffer){this.context.enableVertexAttribArray(this.location),this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffer);var e=k(this.type),t=this.context.FLOAT;this.context.vertexAttribPointer(this.location,e,t,!1,0,0)}},e.prototype.getAttributeBufferType=function(){return this.type},e.prototype.dispose=function(){this.context.deleteBuffer(this.buffer),this.buffer=null},e}(),k=function(e){switch(e){case S.FLOAT_VEC3:return 3;case S.FLOAT_VEC4:return 4;default:p(e)}},U=function(){return(U=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},H=new L((function(e){return e.name+";"+e.type})),G=function(e){switch(e.getAttributeBufferType()){case S.FLOAT_VEC3:return Y((function(t){e.setValue(t)}));case S.FLOAT_VEC4:var t=[[0,0,0,1],[0,.5,0,1],[.7,0,0,1]];return e.setValue(t),q(t,(function(t){e.setValue(t)}));default:return J()}},J=function(){var e=document.createElement("div");return e.className="unsupported-error",e.innerText="Not supported attribute buffer",e},Y=function(e){var t=document.createElement("input");return t.className="edit-input",t.oninput=function(){try{var n=JSON.parse(t.value);if(console.log("result",n),Array.isArray(n))n.every((function(e){return!!Array.isArray(e)&&3===e.length}))||console.log("not every element id the arra is same size");else console.log("this is not an array type");e(n)}catch(e){console.log("this is not a json")}},t},q=function(e,t){var n=document.createElement("input");return n.className="edit-input",n.value=JSON.stringify(e),n.oninput=function(){try{var e=JSON.parse(n.value);if(Array.isArray(e))e.every((function(e){return!!Array.isArray(e)&&4===e.length}));else;t(e)}catch(e){console.log("this is not a json")}},n},z=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function u(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,u)}c((r=r.apply(e,t||[])).next())}))},X=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=a.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}};z(void 0,void 0,void 0,(function(){var e,t,n,r,i,a,u,s,l,f,p,d,g,E,A,w,T,C,S,V,L;return X(this,(function(P){var R,I,D;return e=new m,t=document.getElementById("viewer"),n=y("viewer-options"),r=y("viewer-shader-options"),i=y("viewer-content shader-errors"),a=x("viewer-content"),u=a[0],s=a[1],t.appendChild(u),t.appendChild(i),t.appendChild(n),l=function(e){u.style.visibility="canvas"===e?"visible":"collapse",i.style.visibility="errors"===e?"visible":"collapse"},E=null,A=function(){r.innerHTML="";var e,t,n,o,a=s.context;if(g&&d){var u=b(a,d,g);if(Array.isArray(u))l("errors"),i.innerText=(t=(e=u)[0],n=e[1],o=[],t&&o.push("VERTEX SHADER:",t),n&&o.push("FRAGMENT SHADER:",n),o.join("\r\n"));else{l("canvas");var c=u,f=function(e,t){for(var n=e.getProgramParameter(t,e.ACTIVE_UNIFORMS),r=[],o=0;o<n;++o){var i=e.getActiveUniform(t,o);r.push({name:i.name,type:i.type})}return r}(a,c),p=function(e,t){for(var n=e.getProgramParameter(t,e.ACTIVE_ATTRIBUTES),r=[],o=0;o<n;++o){var i=e.getActiveAttrib(t,o);r.push({name:i.name,type:i.type})}return r}(a,c),m=function(e,t,n){var r=n.map((function(n){var r=_({},n),o=F.get(r);if(o)return{key:r,value:o};var i=new O(e,t,n.name,n.type);return{key:r,value:{component:v(N(i),"",n.name),uniformInfo:i}}}));return F.clear(),r.forEach((function(e){return F.set(e.key,e.value)})),r.map((function(e){return e.value}))}(a,c,f);m.forEach((function(e){return r.appendChild(e.component)}));var h=function(e,t,n){var r=n.map((function(n){var r=U({},n),o=H.get(r);if(o)return{key:r,value:o};var i=new M(e,t,n.name,n.type);return{key:r,value:{component:v(G(i),"",n.name),attributeBufferInfo:i}}}));return H.clear(),r.forEach((function(e){return H.set(e.key,e.value)})),r.map((function(e){return e.value}))}(a,c,p);h.forEach((function(e){return r.appendChild(e.component)}));var y=m.map((function(e){return e.uniformInfo})),x=h.map((function(e){return e.attributeBufferInfo}));null!==E&&cancelAnimationFrame(E);var A=function(){!function(e,t,n){e.useProgram(t),e.viewport(0,0,e.canvas.width,e.canvas.height),e.clearColor(0,0,0,0),e.clear(e.COLOR_BUFFER_BIT),n.uniforms.forEach((function(e){return e.setUniform()})),n.attributeBuffers.forEach((function(e){return e.setAttributeBuffer()}));var r=e.TRIANGLES;e.drawArrays(r,0,3)}(s.context,u,{uniforms:y,attributeBuffers:x}),E=requestAnimationFrame(A)};A()}}else l("none")},n.appendChild(y("viewer-shaders-title",[(R=o,I="",D=document.createElement("h3"),D.textContent=R,D.className=I+" section-title",{element:D}).element,h("Sync","viewer-refresh-button",(function(){e.getShaderDocuments().then((function(e){var t=e.map((function(e){return{id:e.filePath,display:e.fileName}}));C.setItems(t),L.setItems(t)}))})).element])),w=c((function(t){return z(void 0,void 0,void 0,(function(){var n;return X(this,(function(r){switch(r.label){case 0:return null==f||f(),t&&(f=e.subscribeToDocumentSave(t.id,(function(e){d=e,A()}))),t?[4,e.getDocumentText(t.id)]:[3,2];case 1:return n=r.sent(),[3,3];case 2:n="",r.label=3;case 3:return d=n,A(),[2]}}))}))})),T=w[0],C=w[1],n.appendChild(v(T,"viewer-vertex-shader-selector","Vertex Shader")),S=c((function(t){return z(void 0,void 0,void 0,(function(){var n;return X(this,(function(r){switch(r.label){case 0:return null==p||p(),t&&(p=e.subscribeToDocumentSave(t.id,(function(e){g=e,A()}))),t?[4,e.getDocumentText(t.id)]:[3,2];case 1:return n=r.sent(),[3,3];case 2:n="",r.label=3;case 3:return g=n,A(),[2]}}))}))})),V=S[0],L=S[1],n.appendChild(v(V,"viewer-fragment-shader-selector","Fragment Shader")),n.appendChild(r),[2]}))}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RyYW5zbGF0aW9ucy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL3dlYmdsX3V0aWxzL3VuaWZvcm0udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9jb21wb25lbnRzL2Ryb3Bkb3duLnRzIiwid2VicGFjazovLy8uL3NyYy91dGlscy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL2NvbW11bmljYXRpb25Qcm94eS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL2NvbXBvbmVudHMvY3JlYXRlRkFCdXR0b24udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9jb21wb25lbnRzL3dyYXBwZXJzLnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvY29tcG9uZW50cy9jb21tb24udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci93ZWJnbF91dGlscy91dGlscy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL2NyZWF0ZVdlYkdMQ2FudmFzLnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvY29tcG9uZW50cy9lZGl0VmVjdG9yMy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL2NvbXBvbmVudHMvZWRpdENvbG9yLnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvd2ViZ2xfdXRpbHMvYXR0cmlidXRlQnVmZmVyLnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvY29tcG9zaXRlS2V5TWFwLnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvd2ViZ2xfdXRpbHMvdW5pZm9ybUNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL3dlYmdsX3V0aWxzL2F0dHJpYnV0ZUJ1ZmZlckNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvY29tcG9uZW50cy9jcmVhdGVTZWN0aW9uVGl0bGUudHMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJVbmlmb3JtVHlwZSIsInRyYW5zbGF0aW9ucyIsImRlZmF1bHRPcHRpb25zIiwiZW1wdHlJdGVtIiwiY3JlYXRlRHJvcGRvd24iLCJvbkNoYW5nZSIsImNsYXNzTmFtZSIsIm9wdGlvbnMiLCJjb21iaW5lZE9wdGlvbnMiLCJlbGVtZW50IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2VsZWN0ZWRJdGVtIiwiaXRlbUVsZW1lbnRzIiwic2V0U2VsZWN0ZWRJdGVtIiwiaXRlbSIsIm9uY2hhbmdlIiwiZm91bmRFbGVtZW50IiwiZmluZCIsImUiLCJpZCIsInNldEl0ZW1zIiwiaXRlbXMiLCJpbm5lckhUTUwiLCJsZW5ndGgiLCJkaXNwbGF5IiwiZm9yRWFjaCIsIm9wdGlvbiIsInRleHRDb250ZW50Iiwic2VsZWN0ZWQiLCJhcHBlbmRDaGlsZCIsInB1c2giLCJnZXRJdGVtcyIsIm1hcCIsImllIiwic2V0U2VsZWN0ZWRJdGVtQnlJZCIsImdldFNlbGVjdGVkSXRlbSIsImNsZWFyU2VsZWN0aW9uIiwicmVtb3ZlTGFzdCIsInRleHQiLCJjb3VudCIsInN1YnN0cmluZyIsInV1aWR2NCIsInJlcGxhY2UiLCJNYXRoIiwicmFuZG9tIiwidG9TdHJpbmciLCJoYXNQcm9wZXJ0eSIsIm9iaiIsInByb3AiLCJhc3NlcnROZXZlciIsIkVycm9yIiwiSlNPTiIsInN0cmluZ2lmeSIsImFjcXVpcmVWc0NvZGVBcGkiLCJldmVudExpc3RlbmVycyIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsImxpc3RlbmVyIiwiZGF0YSIsImdldFNoYWRlckRvY3VtZW50cyIsIm1lc3NhZ2VJZCIsInBvc3RNZXNzYWdlIiwidHlwZSIsIlByb21pc2UiLCJyZXNvbHZlIiwibWVzc2FnZSIsInBheWxvYWQiLCJmaWxlcyIsInJlbW92ZUxpc3RlbmVyIiwiZ2V0RG9jdW1lbnRUZXh0IiwiZmlsZU5hbWUiLCJzdWJzY3JpYmVUb0RvY3VtZW50U2F2ZSIsImZpbGVQYXRoIiwiY2FsbGJhY2siLCJ0aGlzIiwiYXJyYXkiLCJpbmRleCIsImluZGV4T2YiLCJzcGxpY2UiLCJjcmVhdGVGQUJ1dHRvbiIsIm9uQ2xpY2siLCJidXR0b24iLCJvbmNsaWNrIiwid2l0aExhYmVsIiwid3JhcHBlciIsImxhYmVsIiwiY3JlYXRlRGl2IiwiY2hpbGRyZW4iLCJkaXYiLCJjb21waWxlU2hhZGVyIiwicmVuZGVyaW5nQ29udGV4dCIsInNvdXJjZSIsInNoYWRlciIsImNyZWF0ZVNoYWRlciIsInNoYWRlclNvdXJjZSIsImdldFNoYWRlclBhcmFtZXRlciIsIkNPTVBJTEVfU1RBVFVTIiwiZXJyb3IiLCJnZXRTaGFkZXJJbmZvTG9nIiwiZGVsZXRlU2hhZGVyIiwiY29tcGlsZVNoYWRlcnMiLCJjb250ZXh0IiwidmVydGV4U2hhZGVyQ29udGVudCIsImZyYWdtZW50U2hhZGVyQ29udGVudCIsInZlcnRleFNoYWRlciIsIlZFUlRFWF9TSEFERVIiLCJmcmFnbWVudFNoYWRlciIsIkZSQUdNRU5UX1NIQURFUiIsInZlcnRleEVycm9yIiwidW5kZWZpbmVkIiwiZnJhZ21lbnRFcnJvciIsInByb2dyYW0iLCJjcmVhdGVQcm9ncmFtIiwiYXR0YWNoU2hhZGVyIiwibGlua1Byb2dyYW0iLCJnZXRQcm9ncmFtUGFyYW1ldGVyIiwiTElOS19TVEFUVVMiLCJkZWxldGVQcm9ncmFtIiwiZ2V0UHJvZ3JhbUluZm9Mb2ciLCJjcmVhdGVXZWJHTENhbnZhcyIsImNhbnZhcyIsImdldENvbnRleHQiLCJyZWN0Iiwid2lkdGgiLCJoZWlnaHQiLCJSZXNpemVPYnNlcnZlciIsImVsZW1lbnRzIiwib2JzZXJ2ZXJFbnRyeSIsInRhcmdldCIsImRvbVJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ4IiwieSIsIm9ic2VydmUiLCJjcmVhdGVNdWx0aU51bWJlcklucHV0IiwiaW5pdGlhbFZhbHVlIiwicm93cyIsImNvbHVtbnMiLCJpbnB1dE9wdGlvbnMiLCJpbnB1dEdyaWQiLCJnZXRWYWx1ZXMiLCJyb3ciLCJpbnB1dFJvdyIsImNvbHVtbiIsImlucHV0IiwiaXRlbUVsZW1lbnQiLCJhc3NpZ24iLCJvbmlucHV0IiwiTnVtYmVyIiwic2V0VmFsdWVzIiwibmV3VmFsdWVzIiwic2V0UmVhZG9ubHkiLCJyZWFkb25seSIsInJlYWRPbmx5IiwiY3JlYXRlVmVjdG9yMyIsImNvbG9ySW5wdXRQcm9wcyIsIm1pbiIsIm1heCIsInN0ZXAiLCJBdHRyaWJ1dGVCdWZmZXJUeXBlIiwibG9jYXRpb24iLCJnZXRVbmlmb3JtTG9jYXRpb24iLCJzZXR0ZXIiLCJjcmVhdGVVbmlmb3JtU2V0dGVyIiwic2V0VmFsdWUiLCJuZXdWYWx1ZSIsInNldFVuaWZvcm0iLCJnZXRVbmlmb3JtVHlwZSIsImRpc3Bvc2UiLCJjb25zb2xlIiwibG9nIiwiRkxPQVRfVkVDMiIsInVuaWZvcm0yZiIsIkZMT0FUX1ZFQzMiLCJ1bmlmb3JtM2YiLCJGTE9BVF9WRUM0IiwidW5pZm9ybTRmIiwiU0FNUExFUl8yRCIsImtleVNlbGVjdG9yIiwiTWFwIiwic2V0IiwiaGFzIiwiY2xlYXIiLCJ1bmlmb3JtQ29tcG9uZW50Q2FjaGUiLCJDb21wb3NpdGVLZXlNYXAiLCJjcmVhdGVVbmlmb3JtQ29tcG9uZW50IiwidW5pZm9ybUluZm8iLCJjcmVhdGVVbmlmb3JtRm9yVmVjMiIsImNyZWF0ZVVuaWZvcm1Gb3JWZWMzIiwiY3JlYXRlVW5pZm9ybUZvclZlYzQiLCJjcmVhdGVVbmlmb3JtRm9yVGV4dHVyZSIsInNsb3QiLCJ0ZXh0dXJlRGF0YSIsImNyZWF0ZVVuaWZvcm1Ob3RTdXBwb3J0ZWQiLCJpbm5lclRleHQiLCJjcmVhdGVVbmlmb3JtU2VsZWN0aW9uIiwidmFsdWVzIiwib2UiLCJjbGFzc0xpc3QiLCJhZGQiLCJyZW1vdmUiLCJvcHRpb25zRWxlbWVudCIsIm9wdGlvbnNDb250cm9sbGVyIiwiZW50cmllcyIsInVwZGF0ZSIsImN1c3RvbUVsZW1lbnQiLCJjb2xvckRpdiIsInNldENvbG9yIiwiY29sb3IiLCJzdHlsZSIsImJhY2tncm91bmQiLCJjb250YWluZXIiLCJjb250cm9sbGVyIiwiY3JlYXRlQ29sb3IzIiwiY29sb3JFbGVtZW50IiwiY3VzdG9tIiwiY3JlYXRlQ29sb3I0IiwiZ2V0QXR0cmliTG9jYXRpb24iLCJidWZmZXIiLCJjcmVhdGVCdWZmZXIiLCJiaW5kQnVmZmVyIiwiQVJSQVlfQlVGRkVSIiwiZmxhdHRlbiIsImNvbmNhdCIsImJ1ZmZlckRhdGEiLCJGbG9hdDMyQXJyYXkiLCJTVEFUSUNfRFJBVyIsInNldEF0dHJpYnV0ZUJ1ZmZlciIsImVuYWJsZVZlcnRleEF0dHJpYkFycmF5Iiwic2l6ZSIsImdldE51bUNvbXBvbmVudHMiLCJGTE9BVCIsInZlcnRleEF0dHJpYlBvaW50ZXIiLCJnZXRBdHRyaWJ1dGVCdWZmZXJUeXBlIiwiZGVsZXRlQnVmZmVyIiwiYnVmZmVyVHlwZSIsImF0dHJpYnV0ZUJ1ZmZlckNvbXBvbmVudENhY2hlIiwiY3JlYXRlQXR0cmlidXRlQnVmZmVyQ29tcG9uZW50IiwiYXR0cmlidXRlQnVmZmVySW5mbyIsImNyZWF0ZUF0dHJpYnV0ZUJ1ZmZlcklucHV0VmVjMyIsImNyZWF0ZUF0dHJpYnV0ZUJ1ZmZlcklucHV0VmVjNCIsImNyZWF0ZUF0dHJpYnV0ZUJ1ZmZlck5vdFN1cHBvcnRlZCIsInJlc3VsdCIsInBhcnNlIiwiQXJyYXkiLCJpc0FycmF5IiwiZXZlcnkiLCJ2c2NvZGVBcGkiLCJ2aWV3ZXIiLCJnZXRFbGVtZW50QnlJZCIsInZpZXdlck9wdGlvbnMiLCJzaGFkZXJPcHRpb25zIiwic2hhZGVyQ29tcGlsYXRpb25FcnJvcnMiLCJ3ZWJHTENhbnZhcyIsIndlYkdMQ29udHJvbGxlciIsInNob3dDb250ZW50IiwiY29udGVudCIsInZpc2liaWxpdHkiLCJhbmltYXRpb25GcmFtZUhhbmRsZSIsIm9uU2hhZGVyQ29udGVudENoYW5nZWQiLCJ2ZXJ0ZXhTaGFkZXJFcnJvcnMiLCJmcmFnbWVudFNoYWRlckVycm9ycyIsImVycm9ycyIsInNlbGVjdGVkRnJhZ21lbnRDb250ZW50Iiwic2VsZWN0ZWRWZXJ0ZXhDb250ZW50Iiwiam9pbiIsInVuaWZvcm1zIiwibnVtVW5pZm9ybXMiLCJBQ1RJVkVfVU5JRk9STVMiLCJ1bmlmb3JtIiwiZ2V0QWN0aXZlVW5pZm9ybSIsImdldFByb2dyYW1Vbmlmb3JtcyIsImF0dHJpYnV0ZUJ1ZmZlcnMiLCJudW1BdHRyaWJ1dGVCdWZmZXJzIiwiQUNUSVZFX0FUVFJJQlVURVMiLCJhdHRyaWJ1dGVCdWZmZXIiLCJnZXRBY3RpdmVBdHRyaWIiLCJnZXRQcm9ncmFtQXR0cmlidXRlQnVmZmVycyIsInVuaWZvcm1Db21wb25lbnRzIiwidW5pZm9ybUNvbXBvbmVudEZyb21DYWNoZSIsIlVuaWZvcm1JbmZvIiwiY29tcG9uZW50IiwidWMiLCJjcmVhdGVVbmlmb3JtQ29tcG9uZW50cyIsImF0dHJpYnV0ZUJ1ZmZlckNvbXBvbmVudHMiLCJhdHRyaWJ1dGVCdWZmZXJDb21wb25lbnRGcm9tQ2FjaGUiLCJBdHRyaWJ1dGVCdWZmZXJJbmZvIiwiY3JlYXRlQXR0cmlidXRlQnVmZmVyQ29tcG9uZW50cyIsImFiIiwiYWJjIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJyZW5kZXJJbmZvIiwidXNlUHJvZ3JhbSIsInZpZXdwb3J0IiwiY2xlYXJDb2xvciIsIkNPTE9SX0JVRkZFUl9CSVQiLCJ1IiwicHJpbWl0aXZlVHlwZSIsIlRSSUFOR0xFUyIsImRyYXdBcnJheXMiLCJyZW5kZXJQcm9ncmFtIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwidGhlbiIsInNkIiwiZiIsInZlcnRleERyb3Bkb3duQ29udHJvbGxlciIsImZyYWdtZW50RHJvcGRvd25Db250cm9sbGVyIiwibmV3VmVydGV4Iiwic2VsZWN0ZWRWZXJ0ZXhGaWxlV2F0Y2hlclVuc3Vic2NyaWJlIiwibmV3Q29udGVudCIsInZlcnRleERyb3Bkb3duRWxlbWVudCIsIm5ld0ZyYWdtZW50Iiwic2VsZWN0ZWRGcmFnbWVudEZpbGVXYXRjaGVyVW5zdWJzY3JpYmUiLCJmcmFnbWVudERyb3Bkb3duRWxlbWVudCJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZWIsRUFBU2lCLE9BQU9DLFlBQWEsQ0FBRUMsTUFBTyxXQUU3RFAsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQUVtQixPQUFPLEtBUXZEckIsRUFBb0Jz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QUM1Q2dQLEVBQVU1TCxxQkFBcUJtUCxNQUFLLFNBQUFDLEdBQ2xDLElBQU01TyxFQUFRNE8sRUFBR2hSLEtBQUksU0FBQWlSLEdBQUssT0FDeEI5UixHQUFJOFIsRUFBRXhPLFNBQ05qRCxRQUFTeVIsRUFBRTFPLGFBR2IyTyxFQUF5QjlSLFNBQVNnRCxHQUNsQytPLEVBQTJCL1IsU0FBU2dELFNBRXJDNUQsV0FJRCxFQUFvREwsR0FDeEQsU0FBTWlULEdBQVMsMEMsK0RBQ2JDLGFBRUlELElBQ0ZDLEVBQXVDN0QsRUFBVWhMLHdCQUMvQzRPLEVBQVVqUyxJQUNWLFNBQUFtUyxHQUNFN0MsRUFBd0I2QyxFQUN4QmxELFFBS2tCZ0QsRUFDcEIsR0FBTTVELEVBQVVsTCxnQkFBZ0I4TyxFQUFValMsS0FEdEIsTSxjQUNwQixXLGFBQ0EsSyx3QkFGSnNQLEVBQXdCLEVBR3hCTCxJLGNBakJHbUQsRUFBcUIsS0FBRUwsRUFBd0IsS0FvQnREdkQsRUFBYzlOLFlBQ1p1RCxFQUNFbU8sRUFDQSxnQ0FDQSxrQkFJRSxFQUF3RHBULEdBQzVELFNBQU1xVCxHQUFXLDBDLCtEQUNmQyxhQUVJRCxJQUNGQyxFQUF5Q2pFLEVBQVVoTCx3QkFDakRnUCxFQUFZclMsSUFDWixTQUFBbVMsR0FDRTlDLEVBQTBCOEMsRUFDMUJsRCxRQUtvQm9ELEVBQ3RCLEdBQU1oRSxFQUFVbEwsZ0JBQWdCa1AsRUFBWXJTLEtBRHRCLE0sY0FDdEIsVyxhQUNBLEssd0JBRkpxUCxFQUEwQixFQUcxQkosSSxjQWpCR3NELEVBQXVCLEtBQUVQLEVBQTBCLEtBb0IxRHhELEVBQWM5TixZQUNadUQsRUFDRXNPLEVBQ0Esa0NBQ0Esb0JBSUovRCxFQUFjOU4sWUFBWStOLEciLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsImV4cG9ydCBjb25zdCB0cmFuc2xhdGlvbnMgPSB7XHJcbiAgICBzaGFkZXJzOiBcIlNIQURFUlNcIlxyXG59IiwiaW1wb3J0IHsgYXNzZXJ0TmV2ZXIgfSBmcm9tIFwiLi4vLi4vdXRpbHNcIjtcclxuaW1wb3J0IHsgVmVjdG9yMiwgVmVjdG9yMywgVmVjdG9yNCB9IGZyb20gXCIuLi9jb21wb25lbnRzL2VkaXRWZWN0b3IzXCI7XHJcblxyXG5leHBvcnQgZW51bSBVbmlmb3JtVHlwZSB7XHJcbiAgRkxPQVRfVkVDMiA9IDM1NjY0LFxyXG4gIEZMT0FUX1ZFQzMgPSAzNTY2NSxcclxuICBGTE9BVF9WRUM0ID0gMzU2NjYsXHJcbiAgU0FNUExFUl8yRCA9IDM1Njc4LFxyXG59XHJcblxyXG4vLzUxMjAgKEJZVEUpLCA1MTIxIChVTlNJR05FRF9CWVRFKSwgNTEyMiAoU0hPUlQpLCA1MTIzIChVTlNJR05FRF9TSE9SVCksIDUxMjQgKElOVCksXHJcbi8vIDUxMjUgKFVOU0lHTkVEX0lOVCksIDUxMjYgKEZMT0FUKSwgMzU2NjQgKEZMT0FUX1ZFQzIpLFxyXG4vLyAsIDM1NjY3IChJTlRfVkVDMiksIDM1NjY4IChJTlRfVkVDMyksIDM1NjY5IChJTlRfVkVDNCksIDM1NjcwIChCT09MKSwgMzU2NzEgKEJPT0xfVkVDMiksIDM1NjcyIChCT09MX1ZFQzMpLCAzNTY3MyAoQk9PTF9WRUM0KSwgMzU2NzQgKEZMT0FUX01BVDIpLCAzNTY3NSAoRkxPQVRfTUFUMyksIDM1Njc2IChGTE9BVF9NQVQ0KVxyXG5cclxuZXhwb3J0IGNsYXNzIFVuaWZvcm1JbmZvPFQgPSBhbnk+IHtcclxuICBwcml2YXRlIHZhbHVlOiBUIHwgbnVsbDtcclxuICBwcml2YXRlIHNldHRlcjogKHZhbHVlOiBUKSA9PiB2b2lkO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIGNvbnRleHQ6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCxcclxuICAgIHByb2dyYW06IFdlYkdMUHJvZ3JhbSxcclxuICAgIHByaXZhdGUgbmFtZTogc3RyaW5nLFxyXG4gICAgcHJpdmF0ZSB0eXBlOiBVbmlmb3JtVHlwZVxyXG4gICkge1xyXG4gICAgY29uc3QgbG9jYXRpb24gPSBjb250ZXh0LmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtLCBuYW1lKTtcclxuICAgIHRoaXMuc2V0dGVyID0gY3JlYXRlVW5pZm9ybVNldHRlcih0eXBlLCBjb250ZXh0LCBsb2NhdGlvbik7XHJcbiAgfVxyXG5cclxuICBzZXRWYWx1ZShuZXdWYWx1ZTogVCkge1xyXG4gICAgdGhpcy52YWx1ZSA9IG5ld1ZhbHVlO1xyXG4gIH1cclxuXHJcbiAgc2V0VW5pZm9ybSgpIHtcclxuICAgIGlmICh0aGlzLnZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgIHRoaXMuc2V0dGVyKHRoaXMudmFsdWUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0VW5pZm9ybVR5cGUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy50eXBlO1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHt9XHJcbn1cclxuXHJcbmNvbnN0IGNyZWF0ZVVuaWZvcm1TZXR0ZXIgPSAoXHJcbiAgdHlwZTogVW5pZm9ybVR5cGUsXHJcbiAgY29udGV4dDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LFxyXG4gIGxvY2F0aW9uOiBXZWJHTFVuaWZvcm1Mb2NhdGlvblxyXG4pOiAoKHZhbHVlOiBhbnkpID0+IHZvaWQpID0+IHtcclxuICBjb25zb2xlLmxvZyhcImNyZWF0aW5nIHNldHRlciBmb3JcIiwgdHlwZSk7XHJcblxyXG4gIHN3aXRjaCAodHlwZSkge1xyXG4gICAgY2FzZSBVbmlmb3JtVHlwZS5GTE9BVF9WRUMyOlxyXG4gICAgICByZXR1cm4gKHZhbHVlOiBWZWN0b3IyKSA9PiBjb250ZXh0LnVuaWZvcm0yZihsb2NhdGlvbiwgLi4udmFsdWUpO1xyXG4gICAgY2FzZSBVbmlmb3JtVHlwZS5GTE9BVF9WRUMzOlxyXG4gICAgICByZXR1cm4gKHZhbHVlOiBWZWN0b3IzKSA9PiBjb250ZXh0LnVuaWZvcm0zZihsb2NhdGlvbiwgLi4udmFsdWUpO1xyXG4gICAgY2FzZSBVbmlmb3JtVHlwZS5GTE9BVF9WRUM0OlxyXG4gICAgICByZXR1cm4gKHZhbHVlOiBWZWN0b3I0KSA9PiBjb250ZXh0LnVuaWZvcm00Zihsb2NhdGlvbiwgLi4udmFsdWUpO1xyXG4gICAgY2FzZSBVbmlmb3JtVHlwZS5TQU1QTEVSXzJEOlxyXG4gICAgICByZXR1cm4gKHZhbHVlOiB7IHNsb3Q6IG51bWJlcjsgdGV4dHVyZURhdGE6IGJvb2xlYW4gfSkgPT4ge1xyXG4gICAgICAgIC8vY29udGV4dC50ZXhpKHZhbHVlLnNsb3QpO1xyXG4gICAgICB9O1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgYXNzZXJ0TmV2ZXIodHlwZSk7XHJcbiAgfVxyXG59O1xyXG4iLCJleHBvcnQgdHlwZSBEcm9wZG93bkl0ZW0gPSB7XHJcbiAgaWQ6IHN0cmluZztcclxuICBkaXNwbGF5OiBzdHJpbmc7XHJcbn07XHJcblxyXG5jb25zdCBkZWZhdWx0T3B0aW9ucyA9IHtcclxuICBlbXB0eUl0ZW06IHRydWVcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGNyZWF0ZURyb3Bkb3duID0gKFxyXG4gIC8vaW5pdGlhbFZhbHVlOiBEcm9wZG93bkl0ZW0gfCBudWxsLFxyXG4gIG9uQ2hhbmdlOiAoaXRlbTogRHJvcGRvd25JdGVtIHwgbnVsbCkgPT4gdm9pZCxcclxuICBjbGFzc05hbWU/OiBzdHJpbmcsXHJcbiAgb3B0aW9ucz86IHsgZW1wdHlJdGVtOiBib29sZWFuIH0gLy9wbGFjZWhvbGRlclxyXG4pOiBbXHJcbiAgICBIVE1MU2VsZWN0RWxlbWVudCxcclxuICAgIHtcclxuICAgICAgc2V0SXRlbXM6IChpdGVtczogRHJvcGRvd25JdGVtW10pID0+IHZvaWQ7XHJcbiAgICAgIGdldEl0ZW1zOiAoKSA9PiBEcm9wZG93bkl0ZW1bXTtcclxuICAgICAgc2V0U2VsZWN0ZWRJdGVtQnlJZDogKGlkOiBzdHJpbmcpID0+IHZvaWQ7XHJcbiAgICAgIGdldFNlbGVjdGVkSXRlbTogKCkgPT4gRHJvcGRvd25JdGVtIHwgbnVsbDtcclxuICAgICAgY2xlYXJTZWxlY3Rpb246ICgpID0+IHZvaWQ7XHJcbiAgICB9XHJcbiAgXSA9PiB7XHJcbiAgY29uc3QgY29tYmluZWRPcHRpb25zID0geyAuLi5kZWZhdWx0T3B0aW9ucywgLi4ub3B0aW9ucyB9O1xyXG4gIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2VsZWN0XCIpO1xyXG4gIGVsZW1lbnQuY2xhc3NOYW1lID0gYGRyb3Bkb3duLWJhc2UgJHtjbGFzc05hbWV9YDtcclxuXHJcbiAgbGV0IHNlbGVjdGVkSXRlbTogRHJvcGRvd25JdGVtIHwgbnVsbCA9IG51bGw7XHJcbiAgbGV0IGl0ZW1FbGVtZW50czogeyBlbGVtZW50OiBIVE1MT3B0aW9uRWxlbWVudDsgaXRlbTogRHJvcGRvd25JdGVtIH1bXSA9IFtdO1xyXG4gIGNvbnN0IHNldFNlbGVjdGVkSXRlbSA9IChpdGVtOiBEcm9wZG93bkl0ZW0gfCBudWxsKSA9PiB7XHJcbiAgICBzZWxlY3RlZEl0ZW0gPSBpdGVtO1xyXG4gICAgb25DaGFuZ2Uoc2VsZWN0ZWRJdGVtKTtcclxuICB9O1xyXG5cclxuICBlbGVtZW50Lm9uY2hhbmdlID0gKCkgPT4ge1xyXG4gICAgY29uc3QgZm91bmRFbGVtZW50ID0gaXRlbUVsZW1lbnRzLmZpbmQoKGUpID0+IGUuaXRlbS5pZCA9PT0gZWxlbWVudC52YWx1ZSk7XHJcblxyXG4gICAgaWYgKGZvdW5kRWxlbWVudC5pdGVtLmlkKSBzZXRTZWxlY3RlZEl0ZW0oZm91bmRFbGVtZW50Lml0ZW0pO1xyXG4gICAgZWxzZSBzZXRTZWxlY3RlZEl0ZW0obnVsbCk7XHJcbiAgfTtcclxuXHJcbiAgY29uc3Qgc2V0SXRlbXMgPSAoaXRlbXM6IERyb3Bkb3duSXRlbVtdKSA9PiB7XHJcbiAgICBlbGVtZW50LmlubmVySFRNTCA9IFwiXCI7XHJcbiAgICBpdGVtRWxlbWVudHMubGVuZ3RoID0gMDtcclxuXHJcbiAgICBpZiAoIWl0ZW1zLmZpbmQoKGkpID0+IGkuaWQgPT09IHNlbGVjdGVkSXRlbT8uaWQpKSB7XHJcbiAgICAgIHNldFNlbGVjdGVkSXRlbShudWxsKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBuZXdJdGVtcyA9IGNvbWJpbmVkT3B0aW9ucy5lbXB0eUl0ZW0gPyBbeyBpZDogXCJcIiwgZGlzcGxheTogXCJcIiB9LCAuLi5pdGVtc10gOiBbLi4uaXRlbXNdO1xyXG4gICAgbmV3SXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xyXG4gICAgICBjb25zdCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xyXG4gICAgICBvcHRpb24udmFsdWUgPSBpdGVtLmlkO1xyXG4gICAgICBvcHRpb24udGV4dENvbnRlbnQgPSBpdGVtLmRpc3BsYXk7XHJcbiAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IGl0ZW0uaWQgPT09IHNlbGVjdGVkSXRlbT8uaWQ7XHJcbiAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQob3B0aW9uKTtcclxuICAgICAgaXRlbUVsZW1lbnRzLnB1c2goeyBlbGVtZW50OiBvcHRpb24sIGl0ZW0gfSk7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICBjb25zdCBnZXRJdGVtcyA9ICgpID0+IGl0ZW1FbGVtZW50cy5tYXAoKGllKSA9PiBpZS5pdGVtKTtcclxuICBjb25zdCBzZXRTZWxlY3RlZEl0ZW1CeUlkID0gKGlkOiBzdHJpbmcpID0+IHtcclxuICAgIHNldFNlbGVjdGVkSXRlbShudWxsKTtcclxuICAgIGl0ZW1FbGVtZW50cy5mb3JFYWNoKChpZSkgPT4ge1xyXG4gICAgICBpZiAoaWUuaXRlbS5pZCA9PT0gaWQpIHtcclxuICAgICAgICBpZS5lbGVtZW50LnNlbGVjdGVkID0gdHJ1ZTtcclxuICAgICAgICBzZXRTZWxlY3RlZEl0ZW0oaWUuaXRlbSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWUuZWxlbWVudC5zZWxlY3RlZCA9IGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICBjb25zdCBnZXRTZWxlY3RlZEl0ZW0gPSAoKSA9PiBzZWxlY3RlZEl0ZW07XHJcbiAgY29uc3QgY2xlYXJTZWxlY3Rpb24gPSAoKSA9PiB7XHJcbiAgICBpdGVtRWxlbWVudHMuZm9yRWFjaCgoaWUpID0+IChpZS5lbGVtZW50LnNlbGVjdGVkID0gZmFsc2UpKTtcclxuICAgIHNldFNlbGVjdGVkSXRlbShudWxsKTtcclxuICB9O1xyXG5cclxuICByZXR1cm4gW1xyXG4gICAgZWxlbWVudCxcclxuICAgIHtcclxuICAgICAgc2V0SXRlbXMsXHJcbiAgICAgIGdldEl0ZW1zLFxyXG4gICAgICBzZXRTZWxlY3RlZEl0ZW1CeUlkLFxyXG4gICAgICBnZXRTZWxlY3RlZEl0ZW0sXHJcbiAgICAgIGNsZWFyU2VsZWN0aW9uLFxyXG4gICAgfSxcclxuICBdO1xyXG59O1xyXG4iLCJleHBvcnQgY29uc3QgcmVtb3ZlID0gPFQ+KGFycmF5OiBUW10sIGl0ZW06IFQpID0+IHtcclxuICBjb25zdCBpbmRleCA9IGFycmF5LmluZGV4T2YoaXRlbSk7XHJcblxyXG4gIGlmIChpbmRleCA+IC0xKSB7XHJcbiAgICBhcnJheS5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCByZW1vdmVMYXN0ID0gKHRleHQ6IHN0cmluZywgY291bnQ6IG51bWJlcikgPT4ge1xyXG4gIHJldHVybiB0ZXh0LnN1YnN0cmluZygwLCB0ZXh0Lmxlbmd0aCAtIGNvdW50KTtcclxufTtcclxuXHJcbi8vaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIxMTc1MjNcclxuZXhwb3J0IGNvbnN0IHV1aWR2NCA9ICgpID0+IHtcclxuICByZXR1cm4gXCJ4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHhcIi5yZXBsYWNlKC9beHldL2csIGZ1bmN0aW9uIChjKSB7XHJcbiAgICB2YXIgciA9IChNYXRoLnJhbmRvbSgpICogMTYpIHwgMCxcclxuICAgICAgdiA9IGMgPT0gXCJ4XCIgPyByIDogKHIgJiAweDMpIHwgMHg4O1xyXG4gICAgcmV0dXJuIHYudG9TdHJpbmcoMTYpO1xyXG4gIH0pO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGhhc1Byb3BlcnR5ID0gPFQgZXh0ZW5kcyB7fSwgUCBleHRlbmRzIFByb3BlcnR5S2V5PihcclxuICBvYmo6IFQsXHJcbiAgcHJvcDogUFxyXG4pOiBvYmogaXMgVCAmIFJlY29yZDxQLCB1bmtub3duPiA9PiB7XHJcbiAgcmV0dXJuIG9iai5oYXNPd25Qcm9wZXJ0eShwcm9wKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBhc3NlcnROZXZlciA9ICh2YWx1ZTogbmV2ZXIpOiBuZXZlciA9PiB7XHJcbiAgdGhyb3cgbmV3IEVycm9yKGBVbmhhbmRsZWQgdW5pb24gbWVtYmVyOiAke0pTT04uc3RyaW5naWZ5KHZhbHVlKX1gKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBvYnNlcnZlRWxlbWVudEJvdW5kaW5nUmVjdCA9IChcclxuICBlbGVtZW50OiBFbGVtZW50LFxyXG4gIGNhbGxiYWNrOiAocmVjdGFuZ2xlOiB7XHJcbiAgICB4OiBudW1iZXI7XHJcbiAgICB5OiBudW1iZXI7XHJcbiAgICB3aWR0aDogbnVtYmVyO1xyXG4gICAgaGVpZ2h0OiBudW1iZXI7XHJcbiAgfSkgPT4gdm9pZFxyXG4pOiAoKCkgPT4gdm9pZCkgPT4ge1xyXG4gIGNvbnN0IHJlc2l6ZU9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKChlbGVtZW50cykgPT4ge1xyXG4gICAgY29uc3Qgb2JzZXJ2ZXJFbnRyeSA9IGVsZW1lbnRzLmZpbmQoKGUpID0+IGUudGFyZ2V0ID09PSBlbGVtZW50KTtcclxuXHJcbiAgICBpZiAob2JzZXJ2ZXJFbnRyeSkge1xyXG4gICAgICBjb25zdCBkb21SZWN0ID0gb2JzZXJ2ZXJFbnRyeS50YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgIGNhbGxiYWNrKHtcclxuICAgICAgICB4OiBkb21SZWN0LngsXHJcbiAgICAgICAgeTogZG9tUmVjdC55LFxyXG4gICAgICAgIHdpZHRoOiBkb21SZWN0LndpZHRoLFxyXG4gICAgICAgIGhlaWdodDogZG9tUmVjdC5oZWlnaHQsXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICByZXNpemVPYnNlcnZlci5vYnNlcnZlKGVsZW1lbnQpO1xyXG4gIHJldHVybiAoKSA9PiByZXNpemVPYnNlcnZlci5kaXNjb25uZWN0KCk7XHJcbn07XHJcbiIsImltcG9ydCB7IHJlbW92ZSwgdXVpZHY0IH0gZnJvbSAnLi8uLi91dGlscyc7XHJcbmRlY2xhcmUgY29uc3QgYWNxdWlyZVZzQ29kZUFwaTogKCkgPT4ge1xyXG4gIC8vZ2V0U3RhdGU6ICgpID0+IGFueTtcclxuICAvL3NldFN0YXRlOiAoc3RhdGU6IGFueSkgPT4gdm9pZDtcclxuICBwb3N0TWVzc2FnZTogKG1lc3NhZ2U6IFZzQ29kZUFwaVByb3h5TWVzc2FnZVJlcXVlc3QpID0+IHZvaWQ7XHJcbn07XHJcbmV4cG9ydCBjb25zdCB2c2NvZGVBcGkgPSBhY3F1aXJlVnNDb2RlQXBpKCk7XHJcblxyXG5leHBvcnQgdHlwZSBWc0NvZGVBcGlQcm94eU1lc3NhZ2VSZXF1ZXN0ID1cclxuICB8IHsgdHlwZTogXCJnZXRTaGFkZXJEb2N1bWVudHNcIiwgaWQ6IHN0cmluZywgfVxyXG4gIHwgeyB0eXBlOiBcImdldERvY3VtZW50VGV4dFwiLCBpZDogc3RyaW5nLCBwYXlsb2FkOiB7IGZpbGVOYW1lOiBzdHJpbmcgfSB9XHJcbiAgfCB7IHR5cGU6IFwic3Vic2NyaWJlVG9Eb2N1bWVudFRleHRDaGFuZ2VcIiwgcGF5bG9hZDogeyBmaWxlTmFtZTogc3RyaW5nIH0gfVxyXG4gIHwgeyB0eXBlOiBcInVuc3Vic2NyaWJlVG9Eb2N1bWVudFRleHRDaGFuZ2VcIiwgcGF5bG9hZDogeyBmaWxlTmFtZTogc3RyaW5nIH0gfTtcclxuXHJcbmV4cG9ydCB0eXBlIFZzQ29kZUFwaVByb3h5TWVzc2FnZVJlc3BvbnNlID0ge1xyXG4gIHR5cGU6IFwiZ2V0U2hhZGVyRG9jdW1lbnRzXCI7XHJcbiAgaWQ6IHN0cmluZyxcclxuICBwYXlsb2FkOiB7IGZpbGVzOiB7IGZpbGVQYXRoOiBzdHJpbmc7IGZpbGVOYW1lOiBzdHJpbmcgfVtdIH07XHJcbn0gfFxyXG57IHR5cGU6IFwiZ2V0RG9jdW1lbnRUZXh0XCIsIGlkOiBzdHJpbmcsIHBheWxvYWQ6IHsgZmlsZU5hbWU6IHN0cmluZywgdGV4dDogc3RyaW5nIH0gfSB8XHJcbnsgdHlwZTogXCJvbkRvY3VtZW50VGV4dENoYW5nZVwiLCBwYXlsb2FkOiB7IGZpbGVQYXRoOiBzdHJpbmcsIHRleHQ6IHN0cmluZyB9IH1cclxuXHJcbmV4cG9ydCB0eXBlIFVuc3Vic2NyaWJlID0gKCkgPT4gdm9pZDtcclxuXHJcbnR5cGUgUHJveHlSZXNwb25zZUxpc3RlbmVyID0gKG1lc3NhZ2U6IFZzQ29kZUFwaVByb3h5TWVzc2FnZVJlc3BvbnNlKSA9PiB2b2lkO1xyXG5cclxuZXhwb3J0IGNsYXNzIFZzQ29kZUFwaVByb3h5IHtcclxuICBldmVudExpc3RlbmVyczogUHJveHlSZXNwb25zZUxpc3RlbmVyW10gPSBbXTtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgKGV2ZW50KSA9PiB7XHJcbiAgICAgIHRoaXMuZXZlbnRMaXN0ZW5lcnMuZm9yRWFjaCgobGlzdGVuZXIpID0+IGxpc3RlbmVyKGV2ZW50LmRhdGEpKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZ2V0U2hhZGVyRG9jdW1lbnRzKCkge1xyXG4gICAgY29uc3QgbWVzc2FnZUlkID0gdXVpZHY0KCk7XHJcblxyXG4gICAgdnNjb2RlQXBpLnBvc3RNZXNzYWdlKHtcclxuICAgICAgdHlwZTogXCJnZXRTaGFkZXJEb2N1bWVudHNcIixcclxuICAgICAgaWQ6IG1lc3NhZ2VJZFxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPHsgZmlsZVBhdGg6IHN0cmluZzsgZmlsZU5hbWU6IHN0cmluZyB9W10+KChyZXNvbHZlKSA9PiB7XHJcbiAgICAgIGNvbnN0IGxpc3RlbmVyID0gKG1lc3NhZ2U6IFZzQ29kZUFwaVByb3h5TWVzc2FnZVJlc3BvbnNlKSA9PiB7XHJcbiAgICAgICAgaWYgKG1lc3NhZ2UudHlwZSA9PT0gXCJnZXRTaGFkZXJEb2N1bWVudHNcIiAmJiBtZXNzYWdlLmlkID09PSBtZXNzYWdlSWQpIHtcclxuICAgICAgICAgIHJlc29sdmUobWVzc2FnZS5wYXlsb2FkLmZpbGVzKTtcclxuICAgICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIobGlzdGVuZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIHRoaXMuZXZlbnRMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGdldERvY3VtZW50VGV4dChmaWxlTmFtZTogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBtZXNzYWdlSWQgPSB1dWlkdjQoKTtcclxuXHJcbiAgICB2c2NvZGVBcGkucG9zdE1lc3NhZ2Uoe1xyXG4gICAgICB0eXBlOiBcImdldERvY3VtZW50VGV4dFwiLFxyXG4gICAgICBpZDogbWVzc2FnZUlkLFxyXG4gICAgICBwYXlsb2FkOiB7IGZpbGVOYW1lIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZTxzdHJpbmc+KChyZXNvbHZlKSA9PiB7XHJcbiAgICAgIGNvbnN0IGxpc3RlbmVyID0gKG1lc3NhZ2U6IFZzQ29kZUFwaVByb3h5TWVzc2FnZVJlc3BvbnNlKSA9PiB7XHJcbiAgICAgICAgaWYgKG1lc3NhZ2UudHlwZSA9PT0gXCJnZXREb2N1bWVudFRleHRcIiAmJiBtZXNzYWdlLmlkID09PSBtZXNzYWdlSWQpIHtcclxuICAgICAgICAgIHJlc29sdmUobWVzc2FnZS5wYXlsb2FkLnRleHQpO1xyXG4gICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcihsaXN0ZW5lcik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgdGhpcy5ldmVudExpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgc3Vic2NyaWJlVG9Eb2N1bWVudFNhdmUoZmlsZVBhdGg6IHN0cmluZywgY2FsbGJhY2s6IChuZXdDb250ZW50OiBzdHJpbmcpID0+IHZvaWQpOiBVbnN1YnNjcmliZSB7XHJcbiAgICB2c2NvZGVBcGkucG9zdE1lc3NhZ2Uoe1xyXG4gICAgICB0eXBlOiBcInN1YnNjcmliZVRvRG9jdW1lbnRUZXh0Q2hhbmdlXCIsXHJcbiAgICAgIHBheWxvYWQ6IHsgZmlsZU5hbWU6IGZpbGVQYXRoIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IGxpc3RlbmVyID0gKG1lc3NhZ2U6IFZzQ29kZUFwaVByb3h5TWVzc2FnZVJlc3BvbnNlKSA9PiB7XHJcbiAgICAgIGlmIChtZXNzYWdlLnR5cGUgPT09IFwib25Eb2N1bWVudFRleHRDaGFuZ2VcIiAmJiBtZXNzYWdlLnBheWxvYWQuZmlsZVBhdGggPT09IGZpbGVQYXRoKSB7XHJcbiAgICAgICAgY2FsbGJhY2sobWVzc2FnZS5wYXlsb2FkLnRleHQpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5ldmVudExpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcclxuICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIobGlzdGVuZXIpO1xyXG4gICAgICB2c2NvZGVBcGkucG9zdE1lc3NhZ2UoeyB0eXBlOiBcInVuc3Vic2NyaWJlVG9Eb2N1bWVudFRleHRDaGFuZ2VcIiwgcGF5bG9hZDogeyBmaWxlTmFtZTogZmlsZVBhdGggfSB9KVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSByZW1vdmVMaXN0ZW5lcihsaXN0ZW5lcjogUHJveHlSZXNwb25zZUxpc3RlbmVyKSB7XHJcbiAgICByZW1vdmUodGhpcy5ldmVudExpc3RlbmVycywgbGlzdGVuZXIpXHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBjb25zdCBjcmVhdGVGQUJ1dHRvbiA9IChcclxuICB0ZXh0OiBzdHJpbmcsXHJcbiAgY2xhc3NOYW1lOiBzdHJpbmcsXHJcbiAgb25DbGljazogKCkgPT4gdm9pZFxyXG4pID0+IHtcclxuICBjb25zdCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xyXG4gIGJ1dHRvbi5vbmNsaWNrID0gb25DbGljaztcclxuICBidXR0b24uY2xhc3NOYW1lID0gY2xhc3NOYW1lO1xyXG4gIGJ1dHRvbi50ZXh0Q29udGVudCA9IHRleHQ7XHJcbiAgcmV0dXJuIHsgZWxlbWVudDogYnV0dG9uIH07XHJcbn07XHJcbiIsImV4cG9ydCBjb25zdCB3aXRoTGFiZWwgPSAoXHJcbiAgZWxlbWVudDogSFRNTEVsZW1lbnQsXHJcbiAgY2xhc3NOYW1lOiBzdHJpbmcsXHJcbiAgdGV4dDogc3RyaW5nXHJcbikgPT4ge1xyXG4gIGNvbnN0IHdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gIHdyYXBwZXIuY2xhc3NOYW1lID0gYCR7Y2xhc3NOYW1lfSBvcHRpb25zLXdyYXBwZXJgO1xyXG4gIGNvbnN0IGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xyXG4gIGxhYmVsLmNsYXNzTmFtZSA9IFwib3B0aW9ucy1sYWJlbFwiO1xyXG4gIGxhYmVsLnRleHRDb250ZW50ID0gdGV4dDtcclxuICBlbGVtZW50LmNsYXNzTmFtZSA9IGAke2VsZW1lbnQuY2xhc3NOYW1lfSBvcHRpb25zLWNvbnRlbnRgO1xyXG4gIHdyYXBwZXIuYXBwZW5kQ2hpbGQobGFiZWwpO1xyXG4gIHdyYXBwZXIuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XHJcbiAgcmV0dXJuIHdyYXBwZXI7XHJcbn07XHJcbiIsImV4cG9ydCBjb25zdCBjcmVhdGVEaXYgPSAoY2xhc3NOYW1lOiBzdHJpbmcsIGNoaWxkcmVuPzogSFRNTEVsZW1lbnRbXSkgPT4ge1xyXG4gIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgZGl2LmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcclxuICBjaGlsZHJlbj8uZm9yRWFjaCgoYykgPT4gZGl2LmFwcGVuZENoaWxkKGMpKTtcclxuICByZXR1cm4gZGl2O1xyXG59O1xyXG4iLCJpbXBvcnQgeyBBdHRyaWJ1dGVCdWZmZXJJbmZvLCBBdHRyaWJ1dGVCdWZmZXJUeXBlIH0gZnJvbSBcIi4vYXR0cmlidXRlQnVmZmVyXCI7XHJcbmltcG9ydCB7IFVuaWZvcm1JbmZvLCBVbmlmb3JtVHlwZSB9IGZyb20gXCIuL3VuaWZvcm1cIjtcclxuXHJcbmV4cG9ydCBjb25zdCBjb21waWxlU2hhZGVyID0gKFxyXG4gIHJlbmRlcmluZ0NvbnRleHQ6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCxcclxuICB0eXBlOiBHTGVudW0sXHJcbiAgc291cmNlOiBzdHJpbmdcclxuKTogV2ViR0xTaGFkZXIgfCB7IGVycm9yOiBzdHJpbmcgfSA9PiB7XHJcbiAgY29uc3Qgc2hhZGVyID0gcmVuZGVyaW5nQ29udGV4dC5jcmVhdGVTaGFkZXIodHlwZSk7XHJcbiAgcmVuZGVyaW5nQ29udGV4dC5zaGFkZXJTb3VyY2Uoc2hhZGVyLCBzb3VyY2UpO1xyXG4gIHJlbmRlcmluZ0NvbnRleHQuY29tcGlsZVNoYWRlcihzaGFkZXIpO1xyXG5cclxuICBjb25zdCByZXN1bHQgPSByZW5kZXJpbmdDb250ZXh0LmdldFNoYWRlclBhcmFtZXRlcihcclxuICAgIHNoYWRlcixcclxuICAgIHJlbmRlcmluZ0NvbnRleHQuQ09NUElMRV9TVEFUVVNcclxuICApO1xyXG5cclxuICBpZiAocmVzdWx0KSB7XHJcbiAgICByZXR1cm4gc2hhZGVyO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBjb25zdCBlcnJvciA9IHJlbmRlcmluZ0NvbnRleHQuZ2V0U2hhZGVySW5mb0xvZyhzaGFkZXIpO1xyXG4gICAgcmVuZGVyaW5nQ29udGV4dC5kZWxldGVTaGFkZXIoc2hhZGVyKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGVycm9yLFxyXG4gICAgfTtcclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgY3JlYXRlUHJvZ3JhbSA9IChcclxuICByZW5kZXJpbmdDb250ZXh0OiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsXHJcbiAgdmVydGV4U2hhZGVyOiBXZWJHTFNoYWRlcixcclxuICBmcmFnbWVudFNoYWRlcjogV2ViR0xTaGFkZXJcclxuKSA9PiB7XHJcbiAgY29uc3QgcHJvZ3JhbSA9IHJlbmRlcmluZ0NvbnRleHQuY3JlYXRlUHJvZ3JhbSgpO1xyXG4gIHJlbmRlcmluZ0NvbnRleHQuYXR0YWNoU2hhZGVyKHByb2dyYW0sIHZlcnRleFNoYWRlcik7XHJcbiAgcmVuZGVyaW5nQ29udGV4dC5hdHRhY2hTaGFkZXIocHJvZ3JhbSwgZnJhZ21lbnRTaGFkZXIpO1xyXG4gIHJlbmRlcmluZ0NvbnRleHQubGlua1Byb2dyYW0ocHJvZ3JhbSk7XHJcblxyXG4gIGNvbnN0IHJlc3VsdCA9IHJlbmRlcmluZ0NvbnRleHQuZ2V0UHJvZ3JhbVBhcmFtZXRlcihcclxuICAgIHByb2dyYW0sXHJcbiAgICByZW5kZXJpbmdDb250ZXh0LkxJTktfU1RBVFVTXHJcbiAgKTtcclxuXHJcbiAgaWYgKHJlc3VsdCkge1xyXG4gICAgcmV0dXJuIHByb2dyYW07XHJcbiAgfSBlbHNlIHtcclxuICAgIHJlbmRlcmluZ0NvbnRleHQuZGVsZXRlUHJvZ3JhbShwcm9ncmFtKTtcclxuXHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoXHJcbiAgICAgIGBDcmVhdGluZyBwcm9ncmFtIGZhaWxlZDogJHtyZW5kZXJpbmdDb250ZXh0LmdldFByb2dyYW1JbmZvTG9nKHByb2dyYW0pfWBcclxuICAgICk7XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldFByb2dyYW1Vbmlmb3JtcyA9IChcclxuICBjb250ZXh0OiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsXHJcbiAgcHJvZ3JhbTogV2ViR0xQcm9ncmFtXHJcbikgPT4ge1xyXG4gIGNvbnN0IG51bVVuaWZvcm1zID0gY29udGV4dC5nZXRQcm9ncmFtUGFyYW1ldGVyKFxyXG4gICAgcHJvZ3JhbSxcclxuICAgIGNvbnRleHQuQUNUSVZFX1VOSUZPUk1TXHJcbiAgKTtcclxuICBjb25zdCByZXN1bHQ6IHsgbmFtZTogc3RyaW5nOyB0eXBlOiBVbmlmb3JtVHlwZSB9W10gPSBbXTtcclxuXHJcbiAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IG51bVVuaWZvcm1zOyArK2luZGV4KSB7XHJcbiAgICBjb25zdCB1bmlmb3JtID0gY29udGV4dC5nZXRBY3RpdmVVbmlmb3JtKHByb2dyYW0sIGluZGV4KTtcclxuICAgIHJlc3VsdC5wdXNoKHsgbmFtZTogdW5pZm9ybS5uYW1lLCB0eXBlOiB1bmlmb3JtLnR5cGUgfSk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gcmVzdWx0O1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldFByb2dyYW1BdHRyaWJ1dGVCdWZmZXJzID0gKFxyXG4gIGNvbnRleHQ6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCxcclxuICBwcm9ncmFtOiBXZWJHTFByb2dyYW1cclxuKSA9PiB7XHJcbiAgY29uc3QgbnVtQXR0cmlidXRlQnVmZmVycyA9IGNvbnRleHQuZ2V0UHJvZ3JhbVBhcmFtZXRlcihcclxuICAgIHByb2dyYW0sXHJcbiAgICBjb250ZXh0LkFDVElWRV9BVFRSSUJVVEVTXHJcbiAgKTtcclxuXHJcbiAgY29uc3QgcmVzdWx0OiB7IG5hbWU6IHN0cmluZzsgdHlwZTogQXR0cmlidXRlQnVmZmVyVHlwZSB9W10gPSBbXTtcclxuXHJcbiAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IG51bUF0dHJpYnV0ZUJ1ZmZlcnM7ICsraW5kZXgpIHtcclxuICAgIGNvbnN0IGF0dHJpYnV0ZUJ1ZmZlciA9IGNvbnRleHQuZ2V0QWN0aXZlQXR0cmliKHByb2dyYW0sIGluZGV4KTtcclxuICAgIHJlc3VsdC5wdXNoKHsgbmFtZTogYXR0cmlidXRlQnVmZmVyLm5hbWUsIHR5cGU6IGF0dHJpYnV0ZUJ1ZmZlci50eXBlIH0pO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHJlc3VsdDtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCByZW5kZXJQcm9ncmFtID0gKFxyXG4gIGNvbnRleHQ6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCxcclxuICBwcm9ncmFtOiBXZWJHTFByb2dyYW0sXHJcbiAgcmVuZGVySW5mbzoge1xyXG4gICAgdW5pZm9ybXM6IFVuaWZvcm1JbmZvW107XHJcbiAgICBhdHRyaWJ1dGVCdWZmZXJzOiBBdHRyaWJ1dGVCdWZmZXJJbmZvW107XHJcbiAgICAvL3RleHR1cmVzXHJcbiAgfVxyXG4pID0+IHtcclxuICBjb250ZXh0LnVzZVByb2dyYW0ocHJvZ3JhbSk7XHJcbiAgY29udGV4dC52aWV3cG9ydCgwLCAwLCBjb250ZXh0LmNhbnZhcy53aWR0aCwgY29udGV4dC5jYW52YXMuaGVpZ2h0KTtcclxuICBjb250ZXh0LmNsZWFyQ29sb3IoMCwgMCwgMCwgMCk7XHJcbiAgY29udGV4dC5jbGVhcihjb250ZXh0LkNPTE9SX0JVRkZFUl9CSVQpO1xyXG5cclxuICByZW5kZXJJbmZvLnVuaWZvcm1zLmZvckVhY2godSA9PiB1LnNldFVuaWZvcm0oKSk7XHJcbiAgcmVuZGVySW5mby5hdHRyaWJ1dGVCdWZmZXJzLmZvckVhY2goYWIgPT4gYWIuc2V0QXR0cmlidXRlQnVmZmVyKCkpO1xyXG4gIC8vIGNvbnN0IG51bUVsZW1lbnRzID0gTWF0aC5taW4oXHJcbiAgLy8gICAuLi5yZW5kZXJJbmZvLmF0dHJpYnV0ZUJ1ZmZlcnMubWFwKChhYikgPT4gYWIuZ2V0RWxlbWVudHNDb3VudCgpKVxyXG4gIC8vICk7XHJcblxyXG4gIGNvbnN0IHByaW1pdGl2ZVR5cGUgPSBjb250ZXh0LlRSSUFOR0xFUztcclxuICBjb25zdCBvZmZzZXQgPSAwO1xyXG4gIGNvbnN0IGNvdW50ID0gMztcclxuICBjb250ZXh0LmRyYXdBcnJheXMocHJpbWl0aXZlVHlwZSwgb2Zmc2V0LCBjb3VudCk7XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBTaGFkZXJDb21waWxlRXJyb3JzID0gW1xyXG4gIHZlcnRleFNoYWRlckVycm9yczogc3RyaW5nLFxyXG4gIGZyYWdtZW50U2hhZGVyRXJyb3JzOiBzdHJpbmdcclxuXTtcclxuZXhwb3J0IGNvbnN0IGZvcm1hdFNoYWRlckNvbXBpbGVFcnJvcnMgPSAocmVzdWx0OiBTaGFkZXJDb21waWxlRXJyb3JzKSA9PiB7XHJcbiAgY29uc3QgW3ZlcnRleFNoYWRlckVycm9ycywgZnJhZ21lbnRTaGFkZXJFcnJvcnNdID0gcmVzdWx0O1xyXG5cclxuICBjb25zdCBlcnJvcnM6IHN0cmluZ1tdID0gW107XHJcblxyXG4gIGlmICh2ZXJ0ZXhTaGFkZXJFcnJvcnMpIHtcclxuICAgIGVycm9ycy5wdXNoKFwiVkVSVEVYIFNIQURFUjpcIiwgdmVydGV4U2hhZGVyRXJyb3JzKTtcclxuICB9XHJcblxyXG4gIGlmIChmcmFnbWVudFNoYWRlckVycm9ycykge1xyXG4gICAgZXJyb3JzLnB1c2goXCJGUkFHTUVOVCBTSEFERVI6XCIsIGZyYWdtZW50U2hhZGVyRXJyb3JzKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBlcnJvcnMuam9pbihcIlxcclxcblwiKTtcclxufTtcclxuIiwiaW1wb3J0IHsgaGFzUHJvcGVydHksIG9ic2VydmVFbGVtZW50Qm91bmRpbmdSZWN0LCByZW1vdmVMYXN0IH0gZnJvbSBcIi4uL3V0aWxzXCI7XHJcbmltcG9ydCB7XHJcbiAgY29tcGlsZVNoYWRlcixcclxuICBjcmVhdGVQcm9ncmFtLFxyXG4gIFNoYWRlckNvbXBpbGVFcnJvcnMsXHJcbn0gZnJvbSBcIi4vd2ViZ2xfdXRpbHMvdXRpbHNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBjb21waWxlU2hhZGVycyA9IChcclxuICBjb250ZXh0OiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsXHJcbiAgdmVydGV4U2hhZGVyQ29udGVudDogc3RyaW5nLFxyXG4gIGZyYWdtZW50U2hhZGVyQ29udGVudDogc3RyaW5nXHJcbikgPT4ge1xyXG4gIGNvbnN0IHZlcnRleFNoYWRlciA9IGNvbXBpbGVTaGFkZXIoXHJcbiAgICBjb250ZXh0LFxyXG4gICAgY29udGV4dC5WRVJURVhfU0hBREVSLFxyXG4gICAgdmVydGV4U2hhZGVyQ29udGVudFxyXG4gICk7XHJcblxyXG4gIGNvbnN0IGZyYWdtZW50U2hhZGVyID0gY29tcGlsZVNoYWRlcihcclxuICAgIGNvbnRleHQsXHJcbiAgICBjb250ZXh0LkZSQUdNRU5UX1NIQURFUixcclxuICAgIGZyYWdtZW50U2hhZGVyQ29udGVudFxyXG4gICk7XHJcblxyXG4gIGxldCB2ZXJ0ZXhFcnJvcjogc3RyaW5nID0gdW5kZWZpbmVkO1xyXG4gIGlmIChoYXNQcm9wZXJ0eSh2ZXJ0ZXhTaGFkZXIsIFwiZXJyb3JcIikpIHtcclxuICAgIHZlcnRleEVycm9yID0gcmVtb3ZlTGFzdCh2ZXJ0ZXhTaGFkZXIuZXJyb3IsIDEpO1xyXG4gIH1cclxuXHJcbiAgbGV0IGZyYWdtZW50RXJyb3I6IHN0cmluZyA9IHVuZGVmaW5lZDtcclxuICBpZiAoaGFzUHJvcGVydHkoZnJhZ21lbnRTaGFkZXIsIFwiZXJyb3JcIikpIHtcclxuICAgIGZyYWdtZW50RXJyb3IgPSByZW1vdmVMYXN0KGZyYWdtZW50U2hhZGVyLmVycm9yLCAxKTtcclxuICB9XHJcblxyXG4gIGlmICh2ZXJ0ZXhFcnJvciB8fCBmcmFnbWVudEVycm9yKSB7XHJcbiAgICAvL3RvZG8gY2xlYW51cFxyXG4gICAgcmV0dXJuIFt2ZXJ0ZXhFcnJvciwgZnJhZ21lbnRFcnJvcl0gYXMgU2hhZGVyQ29tcGlsZUVycm9ycztcclxuICB9XHJcblxyXG4gIHJldHVybiBjcmVhdGVQcm9ncmFtKGNvbnRleHQsIHZlcnRleFNoYWRlciwgZnJhZ21lbnRTaGFkZXIpO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGNyZWF0ZVdlYkdMQ2FudmFzID0gKFxyXG4gIGNsYXNzTmFtZTogc3RyaW5nXHJcbik6IFtcclxuICBIVE1MQ2FudmFzRWxlbWVudCxcclxuICB7XHJcbiAgICBjb250ZXh0OiBXZWJHTFJlbmRlcmluZ0NvbnRleHQ7XHJcbiAgfVxyXG5dID0+IHtcclxuICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xyXG4gIGNhbnZhcy5jbGFzc05hbWUgPSBjbGFzc05hbWU7XHJcbiAgY29uc3QgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KFwid2ViZ2xcIik7XHJcblxyXG4gIG9ic2VydmVFbGVtZW50Qm91bmRpbmdSZWN0KGNhbnZhcywgKHJlY3QpID0+IHtcclxuICAgIGNhbnZhcy53aWR0aCA9IHJlY3Qud2lkdGg7XHJcbiAgICBjYW52YXMuaGVpZ2h0ID0gcmVjdC5oZWlnaHQ7XHJcbiAgfSk7XHJcblxyXG4gIGlmICghY29udGV4dCkge1xyXG4gICAgLy90b2RvIG1vdmUgdG8gZXJyb3JzXHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmFibGUgdG8gY3JlYXRlIHdlYmdsIGNvbnRleHRcIik7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gW1xyXG4gICAgY2FudmFzLFxyXG4gICAge1xyXG4gICAgICBjb250ZXh0LFxyXG4gICAgfSxcclxuICBdO1xyXG59O1xyXG4iLCJleHBvcnQgY29uc3QgY3JlYXRlTXVsdGlOdW1iZXJJbnB1dCA9IDxUIGV4dGVuZHMgbnVtYmVyW10+KFxyXG4gIGluaXRpYWxWYWx1ZTogVCxcclxuICBvbkNoYW5nZTogKG5ld1ZhbHVlOiBUKSA9PiB2b2lkLFxyXG4gIHJvd3M6IG51bWJlcixcclxuICBjb2x1bW5zOiBudW1iZXIsXHJcbiAgaW5wdXRPcHRpb25zPzogUGFydGlhbDxIVE1MSW5wdXRFbGVtZW50PlxyXG4pOiBbXHJcbiAgSFRNTERpdkVsZW1lbnQsXHJcbiAge1xyXG4gICAgc2V0VmFsdWVzOiAodmFsdWU6IFQpID0+IHZvaWQ7XHJcbiAgICBzZXRSZWFkb25seTogKHJlYWRvbmx5OiBib29sZWFuKSA9PiB2b2lkO1xyXG4gICAgZ2V0VmFsdWVzOiAoKSA9PiBUO1xyXG4gIH1cclxuXSA9PiB7XHJcbiAgY29uc3QgaW5wdXRHcmlkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICBpbnB1dEdyaWQuY2xhc3NOYW1lID0gXCJlZGl0LWlucHV0LWdyaWRcIjtcclxuXHJcbiAgY29uc3QgaXRlbUVsZW1lbnRzOiB7IGVsZW1lbnQ6IEhUTUxJbnB1dEVsZW1lbnQ7IHZhbHVlOiBudW1iZXIgfVtdID0gW107XHJcbiAgY29uc3Qgc2V0VmFsdWVzID0gKG5ld1ZhbHVlczogVCkgPT5cclxuICAgIGl0ZW1FbGVtZW50cy5mb3JFYWNoKChpZSwgaW5kZXgpID0+IHtcclxuICAgICAgaWUudmFsdWUgPSBuZXdWYWx1ZXNbaW5kZXhdO1xyXG4gICAgICBpZS5lbGVtZW50LnZhbHVlID0gaWUudmFsdWUudG9TdHJpbmcoKTtcclxuICAgIH0pO1xyXG4gIGNvbnN0IGdldFZhbHVlcyA9ICgpID0+IGl0ZW1FbGVtZW50cy5tYXAoKGllKSA9PiBpZS52YWx1ZSkgYXMgVDtcclxuICBjb25zdCBzZXRSZWFkb25seSA9IChyZWFkb25seTogYm9vbGVhbikgPT5cclxuICAgIGl0ZW1FbGVtZW50cy5mb3JFYWNoKChpZSkgPT4gKGllLmVsZW1lbnQucmVhZE9ubHkgPSByZWFkb25seSkpO1xyXG5cclxuICBmb3IgKGxldCByb3cgPSAwOyByb3cgPCByb3dzOyByb3crKykge1xyXG4gICAgY29uc3QgaW5wdXRSb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgaW5wdXRSb3cuY2xhc3NOYW1lID0gXCJlZGl0LWlucHV0LXJvd1wiO1xyXG5cclxuICAgIGZvciAobGV0IGNvbHVtbiA9IDA7IGNvbHVtbiA8IGNvbHVtbnM7IGNvbHVtbisrKSB7XHJcbiAgICAgIGNvbnN0IGluZGV4ID0gcm93ICogY29sdW1ucyArIGNvbHVtbjtcclxuICAgICAgY29uc3QgdmFsdWUgPSBpbml0aWFsVmFsdWVbaW5kZXhdO1xyXG4gICAgICBjb25zdCBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcclxuICAgICAgY29uc3QgaXRlbUVsZW1lbnQgPSB7IGVsZW1lbnQ6IGlucHV0LCB2YWx1ZSB9O1xyXG4gICAgICBPYmplY3QuYXNzaWduKGlucHV0LCBpbnB1dE9wdGlvbnMpO1xyXG4gICAgICBpbnB1dC5jbGFzc05hbWUgPSBcImVkaXQtaW5wdXRcIjtcclxuICAgICAgaW5wdXQudHlwZSA9IFwibnVtYmVyXCI7XHJcbiAgICAgIGlucHV0LnZhbHVlID0gdmFsdWU/LnRvU3RyaW5nKCk7XHJcbiAgICAgIGlucHV0Lm9uaW5wdXQgPSAoKSA9PiB7XHJcbiAgICAgICAgaXRlbUVsZW1lbnRzW2luZGV4XS52YWx1ZSA9IE51bWJlcihpbnB1dC52YWx1ZSk7XHJcbiAgICAgICAgb25DaGFuZ2U/LihnZXRWYWx1ZXMoKSk7XHJcbiAgICAgIH07XHJcbiAgICAgIGl0ZW1FbGVtZW50cy5wdXNoKGl0ZW1FbGVtZW50KTtcclxuICAgICAgaW5wdXRSb3cuYXBwZW5kQ2hpbGQoaW5wdXQpO1xyXG4gICAgfVxyXG5cclxuICAgIGlucHV0R3JpZC5hcHBlbmRDaGlsZChpbnB1dFJvdyk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gW1xyXG4gICAgaW5wdXRHcmlkLFxyXG4gICAge1xyXG4gICAgICBzZXRWYWx1ZXMsXHJcbiAgICAgIGdldFZhbHVlcyxcclxuICAgICAgc2V0UmVhZG9ubHksXHJcbiAgICB9LFxyXG4gIF07XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBNYXRyaXgzID0gW1xyXG4gIG51bWJlcixcclxuICBudW1iZXIsXHJcbiAgbnVtYmVyLFxyXG4gIG51bWJlcixcclxuICBudW1iZXIsXHJcbiAgbnVtYmVyLFxyXG4gIG51bWJlcixcclxuICBudW1iZXIsXHJcbiAgbnVtYmVyXHJcbl07XHJcbmV4cG9ydCBjb25zdCBjcmVhdGVNYXRyaXgzID0gKG9uQ2hhbmdlPzogKG5ld1ZhbHVlOiBNYXRyaXgzKSA9PiB2b2lkKSA9PlxyXG4gIGNyZWF0ZU11bHRpTnVtYmVySW5wdXQ8TWF0cml4Mz4oWzAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDBdLCBvbkNoYW5nZSwgMywgMyk7XHJcblxyXG5leHBvcnQgdHlwZSBWZWN0b3IyID0gW251bWJlciwgbnVtYmVyXTtcclxuZXhwb3J0IGNvbnN0IGNyZWF0ZVZlY3RvcjIgPSAob25DaGFuZ2U/OiAobmV3VmFsdWU6IFZlY3RvcjIpID0+IHZvaWQpID0+XHJcbiAgY3JlYXRlTXVsdGlOdW1iZXJJbnB1dDxWZWN0b3IyPihbMCwgMF0sIG9uQ2hhbmdlLCAxLCAyKTtcclxuXHJcbmV4cG9ydCB0eXBlIFZlY3RvcjMgPSBbbnVtYmVyLCBudW1iZXIsIG51bWJlcl07XHJcbmV4cG9ydCBjb25zdCBjcmVhdGVWZWN0b3IzID0gKG9uQ2hhbmdlPzogKG5ld1ZhbHVlOiBWZWN0b3IzKSA9PiB2b2lkKSA9PlxyXG4gIGNyZWF0ZU11bHRpTnVtYmVySW5wdXQ8VmVjdG9yMz4oWzAsIDAsIDBdLCBvbkNoYW5nZSwgMSwgMyk7XHJcblxyXG5leHBvcnQgdHlwZSBWZWN0b3I0ID0gW251bWJlciwgbnVtYmVyLCBudW1iZXIsIG51bWJlcl07XHJcbmV4cG9ydCBjb25zdCBjcmVhdGVWZWN0b3I0ID0gKG9uQ2hhbmdlPzogKG5ld1ZhbHVlOiBWZWN0b3I0KSA9PiB2b2lkKSA9PlxyXG4gIGNyZWF0ZU11bHRpTnVtYmVySW5wdXQ8VmVjdG9yND4oWzAsIDAsIDAsIDBdLCBvbkNoYW5nZSwgMSwgNCk7XHJcbiIsImltcG9ydCB7IGNyZWF0ZURpdiB9IGZyb20gXCIuL2NvbW1vblwiO1xyXG5pbXBvcnQgeyBjcmVhdGVNdWx0aU51bWJlcklucHV0IH0gZnJvbSBcIi4vZWRpdFZlY3RvcjNcIjtcclxuXHJcbmNvbnN0IGNvbG9ySW5wdXRQcm9wcyA9IHtcclxuICBtaW46IFwiMFwiLFxyXG4gIG1heDogXCIxXCIsXHJcbiAgc3RlcDogXCIwLjFcIixcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIENvbG9yNCA9IFtudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdO1xyXG5leHBvcnQgY29uc3QgY3JlYXRlQ29sb3I0ID0gKFxyXG4gIG9uQ2hhbmdlPzogKG5ld1ZhbHVlOiBDb2xvcjQpID0+IHZvaWRcclxuKTogW1xyXG4gIEhUTUxEaXZFbGVtZW50LFxyXG4gIHtcclxuICAgIHNldFZhbHVlczogKHZhbHVlOiBDb2xvcjQpID0+IHZvaWQ7XHJcbiAgICBzZXRSZWFkb25seTogKHJlYWRvbmx5OiBib29sZWFuKSA9PiB2b2lkO1xyXG4gICAgZ2V0VmFsdWVzOiAoKSA9PiBDb2xvcjQ7XHJcbiAgfVxyXG5dID0+IHtcclxuICBjb25zdCBpbml0aWFsVmFsdWUgPSBbMC41LCAwLjUsIDAuNSwgMV0gYXMgQ29sb3I0O1xyXG4gIGNvbnN0IGNvbG9yRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICBjb2xvckRpdi5jbGFzc05hbWUgPSBcImVkaXQtaW5wdXQtY29sb3JcIjtcclxuICBjb25zdCBzZXRDb2xvciA9IChjb2xvcjogQ29sb3I0KSA9PiB7XHJcbiAgICBjb2xvckRpdi5zdHlsZS5iYWNrZ3JvdW5kID0gYHJnYigke2NvbG9yWzBdICogMjU1fSwke2NvbG9yWzFdICogMjU1fSwke1xyXG4gICAgICBjb2xvclsyXSAqIDI1NVxyXG4gICAgfSwke2NvbG9yWzNdfSlgO1xyXG4gIH07XHJcblxyXG4gIHNldENvbG9yKGluaXRpYWxWYWx1ZSk7XHJcblxyXG4gIGNvbnN0IG9uQ2hhbmdlSW50ZXJuYWwgPSAoY29sb3I6IENvbG9yNCkgPT4ge1xyXG4gICAgc2V0Q29sb3IoY29sb3IpO1xyXG4gICAgb25DaGFuZ2U/Lihjb2xvcik7XHJcbiAgfTtcclxuICBjb25zdCBjb250YWluZXIgPSBjcmVhdGVEaXYoXCJyb3ctd2l0aC1nYXBcIik7XHJcbiAgY29uc3QgW2VsZW1lbnQsIGNvbnRyb2xsZXJdID0gY3JlYXRlTXVsdGlOdW1iZXJJbnB1dDxDb2xvcjQ+KFxyXG4gICAgaW5pdGlhbFZhbHVlLFxyXG4gICAgb25DaGFuZ2VJbnRlcm5hbCxcclxuICAgIDEsXHJcbiAgICA0LFxyXG4gICAgY29sb3JJbnB1dFByb3BzXHJcbiAgKTtcclxuICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XHJcbiAgY29udGFpbmVyLmFwcGVuZENoaWxkKGNvbG9yRGl2KTtcclxuICByZXR1cm4gW1xyXG4gICAgY29udGFpbmVyLFxyXG4gICAge1xyXG4gICAgICAuLi5jb250cm9sbGVyLFxyXG4gICAgICBzZXRWYWx1ZXM6ICh2YWx1ZTogQ29sb3I0KSA9PiB7XHJcbiAgICAgICAgY29udHJvbGxlci5zZXRWYWx1ZXModmFsdWUpO1xyXG4gICAgICAgIHNldENvbG9yKHZhbHVlKTtcclxuICAgICAgfSxcclxuICAgIH0sXHJcbiAgXTtcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIENvbG9yMyA9IFtudW1iZXIsIG51bWJlciwgbnVtYmVyXTtcclxuZXhwb3J0IGNvbnN0IGNyZWF0ZUNvbG9yMyA9IChcclxuICBvbkNoYW5nZT86IChuZXdWYWx1ZTogQ29sb3IzKSA9PiB2b2lkXHJcbik6IFtcclxuICBIVE1MRGl2RWxlbWVudCxcclxuICB7XHJcbiAgICBzZXRWYWx1ZXM6ICh2YWx1ZTogQ29sb3IzKSA9PiB2b2lkO1xyXG4gICAgc2V0UmVhZG9ubHk6IChyZWFkb25seTogYm9vbGVhbikgPT4gdm9pZDtcclxuICAgIGdldFZhbHVlczogKCkgPT4gQ29sb3IzO1xyXG4gIH1cclxuXSA9PiB7XHJcbiAgY29uc3QgaW5pdGlhbFZhbHVlID0gWzAuNSwgMC41LCAwLjVdIGFzIENvbG9yMztcclxuICBjb25zdCBjb2xvckRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgY29sb3JEaXYuY2xhc3NOYW1lID0gXCJlZGl0LWlucHV0LWNvbG9yXCI7XHJcbiAgY29uc3Qgc2V0Q29sb3IgPSAoY29sb3I6IENvbG9yMykgPT4ge1xyXG4gICAgY29sb3JEaXYuc3R5bGUuYmFja2dyb3VuZCA9IGByZ2IoJHtjb2xvclswXSAqIDI1NX0sJHtjb2xvclsxXSAqIDI1NX0sJHtcclxuICAgICAgY29sb3JbMl0gKiAyNTVcclxuICAgIH0sMSlgO1xyXG4gIH07XHJcblxyXG4gIHNldENvbG9yKGluaXRpYWxWYWx1ZSk7XHJcblxyXG4gIGNvbnN0IG9uQ2hhbmdlSW50ZXJuYWwgPSAoY29sb3I6IENvbG9yMykgPT4ge1xyXG4gICAgc2V0Q29sb3IoY29sb3IpO1xyXG4gICAgb25DaGFuZ2U/Lihjb2xvcik7XHJcbiAgfTtcclxuICBjb25zdCBjb250YWluZXIgPSBjcmVhdGVEaXYoXCJyb3ctd2l0aC1nYXBcIik7XHJcbiAgY29uc3QgW2VsZW1lbnQsIGNvbnRyb2xsZXJdID0gY3JlYXRlTXVsdGlOdW1iZXJJbnB1dDxDb2xvcjM+KFxyXG4gICAgaW5pdGlhbFZhbHVlLFxyXG4gICAgb25DaGFuZ2VJbnRlcm5hbCxcclxuICAgIDEsXHJcbiAgICAzLFxyXG4gICAgY29sb3JJbnB1dFByb3BzXHJcbiAgKTtcclxuICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XHJcbiAgY29udGFpbmVyLmFwcGVuZENoaWxkKGNvbG9yRGl2KTtcclxuICByZXR1cm4gW1xyXG4gICAgY29udGFpbmVyLFxyXG4gICAge1xyXG4gICAgICAuLi5jb250cm9sbGVyLFxyXG4gICAgICBzZXRWYWx1ZXM6ICh2YWx1ZTogQ29sb3IzKSA9PiB7XHJcbiAgICAgICAgY29udHJvbGxlci5zZXRWYWx1ZXModmFsdWUpO1xyXG4gICAgICAgIHNldENvbG9yKHZhbHVlKTtcclxuICAgICAgfSxcclxuICAgIH0sXHJcbiAgXTtcclxufTtcclxuIiwiaW1wb3J0IHsgYXNzZXJ0TmV2ZXIgfSBmcm9tIFwiLi8uLi8uLi91dGlsc1wiO1xyXG5pbXBvcnQgeyBWZWN0b3IzLCBWZWN0b3I0IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvZWRpdFZlY3RvcjNcIjtcclxuXHJcbmV4cG9ydCBlbnVtIEF0dHJpYnV0ZUJ1ZmZlclR5cGUge1xyXG4gIEZMT0FUX1ZFQzMgPSAzNTY2NSxcclxuICBGTE9BVF9WRUM0ID0gMzU2NjYsXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBBdHRyaWJ1dGVCdWZmZXJJbmZvIHtcclxuICBwcml2YXRlIGJ1ZmZlcjogV2ViR0xCdWZmZXIgfCBudWxsO1xyXG4gIHByaXZhdGUgbG9jYXRpb246IG51bWJlcjtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGNvbnRleHQ6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCxcclxuICAgIHByb2dyYW06IFdlYkdMUHJvZ3JhbSxcclxuICAgIHByaXZhdGUgbmFtZTogc3RyaW5nLFxyXG4gICAgcHJpdmF0ZSB0eXBlOiBBdHRyaWJ1dGVCdWZmZXJUeXBlXHJcbiAgKSB7XHJcbiAgICB0aGlzLmxvY2F0aW9uID0gY29udGV4dC5nZXRBdHRyaWJMb2NhdGlvbihwcm9ncmFtLCBuYW1lKTtcclxuICAgIHRoaXMuYnVmZmVyID0gY29udGV4dC5jcmVhdGVCdWZmZXIoKTtcclxuICB9XHJcblxyXG4gIHNldFZhbHVlKG5ld1ZhbHVlOiBudW1iZXJbXVtdKSB7XHJcbiAgICAvL251bUVsZW1lbnRzID0gdmFsdWUubGVuZ3RoO1xyXG4gICAgdGhpcy5jb250ZXh0LmJpbmRCdWZmZXIodGhpcy5jb250ZXh0LkFSUkFZX0JVRkZFUiwgdGhpcy5idWZmZXIpO1xyXG4gICAgY29uc3QgZmxhdHRlbiA9IFtdLmNvbmNhdCguLi5uZXdWYWx1ZSk7XHJcbiAgICB0aGlzLmNvbnRleHQuYnVmZmVyRGF0YShcclxuICAgICAgdGhpcy5jb250ZXh0LkFSUkFZX0JVRkZFUixcclxuICAgICAgbmV3IEZsb2F0MzJBcnJheShmbGF0dGVuKSxcclxuICAgICAgdGhpcy5jb250ZXh0LlNUQVRJQ19EUkFXXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgc2V0QXR0cmlidXRlQnVmZmVyKCkge1xyXG4gICAgaWYgKHRoaXMuYnVmZmVyICE9PSBudWxsKSB7XHJcbiAgICAgIHRoaXMuY29udGV4dC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSh0aGlzLmxvY2F0aW9uKTtcclxuICAgICAgdGhpcy5jb250ZXh0LmJpbmRCdWZmZXIodGhpcy5jb250ZXh0LkFSUkFZX0JVRkZFUiwgdGhpcy5idWZmZXIpO1xyXG4gICAgICBjb25zdCBzaXplID0gZ2V0TnVtQ29tcG9uZW50cyh0aGlzLnR5cGUpOyAvLyAyIGNvbXBvbmVudHMgcGVyIGl0ZXJhdGlvblxyXG4gICAgICBjb25zdCB0eXBlID0gdGhpcy5jb250ZXh0LkZMT0FUOyAvLyB0aGUgZGF0YSBpcyAzMmJpdCBmbG9hdHNcclxuICAgICAgY29uc3Qgbm9ybWFsaXplID0gZmFsc2U7IC8vIGRvbid0IG5vcm1hbGl6ZSB0aGUgZGF0YVxyXG4gICAgICBjb25zdCBzdHJpZGUgPSAwOyAvLyAwID0gbW92ZSBmb3J3YXJkIHNpemUgKiBzaXplb2YodHlwZSkgZWFjaCBpdGVyYXRpb24gdG8gZ2V0IHRoZSBuZXh0IHBvc2l0aW9uXHJcbiAgICAgIGNvbnN0IG9mZnNldCA9IDA7IC8vIHN0YXJ0IGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIGJ1ZmZlclxyXG4gICAgICB0aGlzLmNvbnRleHQudmVydGV4QXR0cmliUG9pbnRlcihcclxuICAgICAgICB0aGlzLmxvY2F0aW9uLFxyXG4gICAgICAgIHNpemUsXHJcbiAgICAgICAgdHlwZSxcclxuICAgICAgICBub3JtYWxpemUsXHJcbiAgICAgICAgc3RyaWRlLFxyXG4gICAgICAgIG9mZnNldFxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0QXR0cmlidXRlQnVmZmVyVHlwZSgpIHtcclxuICAgIHJldHVybiB0aGlzLnR5cGU7XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgdGhpcy5jb250ZXh0LmRlbGV0ZUJ1ZmZlcih0aGlzLmJ1ZmZlcik7XHJcbiAgICB0aGlzLmJ1ZmZlciA9IG51bGw7XHJcbiAgfVxyXG59XHJcblxyXG5jb25zdCBnZXROdW1Db21wb25lbnRzID0gKGJ1ZmZlclR5cGU6IEF0dHJpYnV0ZUJ1ZmZlclR5cGUpID0+IHtcclxuICBzd2l0Y2ggKGJ1ZmZlclR5cGUpIHtcclxuICAgIGNhc2UgQXR0cmlidXRlQnVmZmVyVHlwZS5GTE9BVF9WRUMzOlxyXG4gICAgICByZXR1cm4gMztcclxuICAgIGNhc2UgQXR0cmlidXRlQnVmZmVyVHlwZS5GTE9BVF9WRUM0OlxyXG4gICAgICByZXR1cm4gNDtcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIGFzc2VydE5ldmVyKGJ1ZmZlclR5cGUpO1xyXG4gIH1cclxufTtcclxuIiwiZXhwb3J0IGNsYXNzIENvbXBvc2l0ZUtleU1hcDxUS2V5LCBUVmFsdWU+IHtcclxuICBwcml2YXRlIG1hcCA9IG5ldyBNYXA8c3RyaW5nLCBUVmFsdWU+KCk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUga2V5U2VsZWN0b3I6IChjb21wb3NpdGVLZXk6IFRLZXkpID0+IHN0cmluZykge31cclxuXHJcbiAgZ2V0KGtleTogVEtleSkge1xyXG4gICAgcmV0dXJuIHRoaXMubWFwLmdldCh0aGlzLmtleVNlbGVjdG9yKGtleSkpO1xyXG4gIH1cclxuXHJcbiAgc2V0KGtleTogVEtleSwgdmFsdWU6IFRWYWx1ZSkge1xyXG4gICAgdGhpcy5tYXAuc2V0KHRoaXMua2V5U2VsZWN0b3Ioa2V5KSwgdmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgaGFzKGtleTogVEtleSkge1xyXG4gICAgdGhpcy5tYXAuaGFzKHRoaXMua2V5U2VsZWN0b3Ioa2V5KSk7XHJcbiAgfVxyXG5cclxuICBjbGVhcigpIHtcclxuICAgIHRoaXMubWFwLmNsZWFyKCk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IHV1aWR2NCB9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xyXG5pbXBvcnQge1xyXG4gIGNyZWF0ZVZlY3RvcjIsXHJcbiAgY3JlYXRlVmVjdG9yMyxcclxuICBjcmVhdGVWZWN0b3I0LFxyXG4gIFZlY3RvcjIsXHJcbiAgVmVjdG9yMyxcclxuICBWZWN0b3I0LFxyXG59IGZyb20gXCIuLi9jb21wb25lbnRzL2VkaXRWZWN0b3IzXCI7XHJcbmltcG9ydCB7IGNyZWF0ZURpdiB9IGZyb20gXCIuLi9jb21wb25lbnRzL2NvbW1vblwiO1xyXG5pbXBvcnQgeyBjcmVhdGVEcm9wZG93biB9IGZyb20gXCIuLi9jb21wb25lbnRzL2Ryb3Bkb3duXCI7XHJcbmltcG9ydCB7IGNyZWF0ZUNvbG9yMywgY3JlYXRlQ29sb3I0IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvZWRpdENvbG9yXCI7XHJcbmltcG9ydCB7IFVuaWZvcm1JbmZvLCBVbmlmb3JtVHlwZSB9IGZyb20gXCIuL3VuaWZvcm1cIjtcclxuaW1wb3J0IHsgQ29tcG9zaXRlS2V5TWFwIH0gZnJvbSBcIi4uL2NvbXBvc2l0ZUtleU1hcFwiO1xyXG5pbXBvcnQgeyB3aXRoTGFiZWwgfSBmcm9tIFwiLi4vY29tcG9uZW50cy93cmFwcGVyc1wiO1xyXG5cclxuY29uc3QgdW5pZm9ybUNvbXBvbmVudENhY2hlID0gbmV3IENvbXBvc2l0ZUtleU1hcDxcclxuICB7IG5hbWU6IHN0cmluZzsgdHlwZTogVW5pZm9ybVR5cGUgfSxcclxuICB7IGNvbXBvbmVudDogSFRNTEVsZW1lbnQ7IHVuaWZvcm1JbmZvOiBVbmlmb3JtSW5mbyB9XHJcbj4oa2V5ID0+IGAke2tleS5uYW1lfTske2tleS50eXBlfWApO1xyXG5cclxuZXhwb3J0IGNvbnN0IGNyZWF0ZVVuaWZvcm1Db21wb25lbnRzID0gKFxyXG4gIGNvbnRleHQ6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCxcclxuICBwcm9ncmFtOiBXZWJHTFByb2dyYW0sXHJcbiAgdW5pZm9ybXM6IHsgbmFtZTogc3RyaW5nOyB0eXBlOiBVbmlmb3JtVHlwZSB9W11cclxuKSA9PiB7XHJcbiAgY29uc3QgdW5pZm9ybUNvbXBvbmVudHMgPSB1bmlmb3Jtcy5tYXAodW5pZm9ybSA9PiB7XHJcbiAgICBjb25zdCBrZXkgPSB7XHJcbiAgICAgIC4uLnVuaWZvcm0sXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IHVuaWZvcm1Db21wb25lbnRGcm9tQ2FjaGUgPSB1bmlmb3JtQ29tcG9uZW50Q2FjaGUuZ2V0KGtleSk7XHJcblxyXG4gICAgaWYgKHVuaWZvcm1Db21wb25lbnRGcm9tQ2FjaGUpIHtcclxuICAgICAgcmV0dXJuIHsga2V5LCB2YWx1ZTogdW5pZm9ybUNvbXBvbmVudEZyb21DYWNoZSB9O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc3QgdW5pZm9ybUluZm8gPSBuZXcgVW5pZm9ybUluZm8oXHJcbiAgICAgICAgY29udGV4dCxcclxuICAgICAgICBwcm9ncmFtLFxyXG4gICAgICAgIHVuaWZvcm0ubmFtZSxcclxuICAgICAgICB1bmlmb3JtLnR5cGVcclxuICAgICAgKTtcclxuICAgICAgY29uc3QgY29tcG9uZW50ID0gd2l0aExhYmVsKFxyXG4gICAgICAgIGNyZWF0ZVVuaWZvcm1Db21wb25lbnQodW5pZm9ybUluZm8pLFxyXG4gICAgICAgIFwiXCIsXHJcbiAgICAgICAgdW5pZm9ybS5uYW1lXHJcbiAgICAgICk7XHJcbiAgICAgIHJldHVybiB7IGtleSwgdmFsdWU6IHsgY29tcG9uZW50LCB1bmlmb3JtSW5mbyB9IH07XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIHVuaWZvcm1Db21wb25lbnRDYWNoZS5jbGVhcigpO1xyXG4gIHVuaWZvcm1Db21wb25lbnRzLmZvckVhY2godWMgPT4gdW5pZm9ybUNvbXBvbmVudENhY2hlLnNldCh1Yy5rZXksIHVjLnZhbHVlKSk7XHJcblxyXG4gIHJldHVybiB1bmlmb3JtQ29tcG9uZW50cy5tYXAodWMgPT4gdWMudmFsdWUpO1xyXG59O1xyXG5cclxuY29uc3QgY3JlYXRlVW5pZm9ybUNvbXBvbmVudCA9ICh1bmlmb3JtSW5mbzogVW5pZm9ybUluZm8pID0+IHtcclxuICBzd2l0Y2ggKHVuaWZvcm1JbmZvLmdldFVuaWZvcm1UeXBlKCkpIHtcclxuICAgIGNhc2UgVW5pZm9ybVR5cGUuRkxPQVRfVkVDMjpcclxuICAgICAgcmV0dXJuIGNyZWF0ZVVuaWZvcm1Gb3JWZWMyKHZhbHVlID0+IHVuaWZvcm1JbmZvLnNldFZhbHVlKHZhbHVlKSk7XHJcbiAgICBjYXNlIFVuaWZvcm1UeXBlLkZMT0FUX1ZFQzM6XHJcbiAgICAgIHJldHVybiBjcmVhdGVVbmlmb3JtRm9yVmVjMyh2YWx1ZSA9PiB1bmlmb3JtSW5mby5zZXRWYWx1ZSh2YWx1ZSkpO1xyXG4gICAgY2FzZSBVbmlmb3JtVHlwZS5GTE9BVF9WRUM0OlxyXG4gICAgICBjb25zdCBpbml0aWFsVmFsdWU6IFZlY3RvcjQgPSBbMSwgMCwgMCwgMV07XHJcbiAgICAgIHVuaWZvcm1JbmZvLnNldFZhbHVlKGluaXRpYWxWYWx1ZSk7XHJcbiAgICAgIHJldHVybiBjcmVhdGVVbmlmb3JtRm9yVmVjNChpbml0aWFsVmFsdWUsIHZhbHVlID0+XHJcbiAgICAgICAgdW5pZm9ybUluZm8uc2V0VmFsdWUodmFsdWUpXHJcbiAgICAgICk7XHJcbiAgICBjYXNlIFVuaWZvcm1UeXBlLlNBTVBMRVJfMkQ6XHJcbiAgICAgIHJldHVybiBjcmVhdGVVbmlmb3JtRm9yVGV4dHVyZSh2YWx1ZSA9PiB7XHJcbiAgICAgICAgY29uc3QgY3VycmVudHNldFZhbHVlID0gdXVpZHY0KCk7XHJcbiAgICAgICAgLy9sb2FkIHdpdGggZGVib3VuY2UgPT4gdGhlblxyXG4gICAgICAgIHVuaWZvcm1JbmZvLnNldFZhbHVlKHsgc2xvdDogdmFsdWUuc2xvdCwgdGV4dHVyZURhdGE6IHRydWUgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmV0dXJuIGNyZWF0ZVVuaWZvcm1Ob3RTdXBwb3J0ZWQoKTtcclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgY3JlYXRlVW5pZm9ybU5vdFN1cHBvcnRlZCA9ICgpID0+IHtcclxuICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gIGRpdi5jbGFzc05hbWUgPSBcInVuc3VwcG9ydGVkLWVycm9yXCI7XHJcbiAgZGl2LmlubmVyVGV4dCA9IFwiTm90IHN1cHBvcnRlZCB1bmlmb3JtXCI7XHJcbiAgcmV0dXJuIGRpdjtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVVbmlmb3JtU2VsZWN0aW9uID0gKGVsZW1lbnRzOiB7XHJcbiAgW2tleTogc3RyaW5nXTogeyBkaXNwbGF5OiBzdHJpbmc7IGVsZW1lbnQ6IEhUTUxFbGVtZW50IH07XHJcbn0pID0+IHtcclxuICBjb25zdCBbb3B0aW9uc0VsZW1lbnQsIG9wdGlvbnNDb250cm9sbGVyXSA9IGNyZWF0ZURyb3Bkb3duKFxyXG4gICAgaXRlbSA9PiB7XHJcbiAgICAgIGlmICghaXRlbSkgcmV0dXJuO1xyXG5cclxuICAgICAgT2JqZWN0LnZhbHVlcyhlbGVtZW50cykuZm9yRWFjaChvZSA9PiBvZS5lbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJoaWRkZW5cIikpO1xyXG5cclxuICAgICAgZWxlbWVudHNbaXRlbS5pZF0uZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiaGlkZGVuXCIpO1xyXG4gICAgfSxcclxuICAgIFwiXCIsXHJcbiAgICB7IGVtcHR5SXRlbTogZmFsc2UgfVxyXG4gICk7XHJcbiAgb3B0aW9uc0NvbnRyb2xsZXIuc2V0SXRlbXMoXHJcbiAgICBPYmplY3QuZW50cmllcyhlbGVtZW50cykubWFwKChba2V5LCB2YWx1ZV0pID0+ICh7XHJcbiAgICAgIGlkOiBrZXksXHJcbiAgICAgIGRpc3BsYXk6IHZhbHVlLmRpc3BsYXksXHJcbiAgICB9KSlcclxuICApO1xyXG4gIG9wdGlvbnNDb250cm9sbGVyLnNldFNlbGVjdGVkSXRlbUJ5SWQoXCJjdXN0b21cIik7XHJcbiAgcmV0dXJuIG9wdGlvbnNFbGVtZW50O1xyXG59O1xyXG5cclxuY29uc3QgY3JlYXRlVW5pZm9ybUZvclZlYzIgPSAodXBkYXRlOiAodmFsdWU6IFZlY3RvcjIpID0+IHZvaWQpID0+IHtcclxuICBjb25zdCBbY3VzdG9tRWxlbWVudCwgY3VzdG9tQ29udHJvbGxlcl0gPSBjcmVhdGVWZWN0b3IyKHVwZGF0ZSk7XHJcbiAgY3VzdG9tQ29udHJvbGxlci5zZXRWYWx1ZXMoWzAsIDBdKTtcclxuICByZXR1cm4gY3VzdG9tRWxlbWVudDtcclxufTtcclxuXHJcbmNvbnN0IGNyZWF0ZVVuaWZvcm1Gb3JUZXh0dXJlID0gKFxyXG4gIHVwZGF0ZTogKHZhbHVlOiB7IHNsb3Q6IG51bWJlcjsgdGV4dHVyZVNyYzogc3RyaW5nIH0pID0+IHZvaWRcclxuKSA9PiB7XHJcbiAgY29uc3QgW2N1c3RvbUVsZW1lbnQsIGN1c3RvbUNvbnRyb2xsZXJdID0gY3JlYXRlVmVjdG9yMygpO1xyXG4gIGN1c3RvbUNvbnRyb2xsZXIuc2V0VmFsdWVzKFswLCAwLCAwXSk7XHJcbiAgcmV0dXJuIGN1c3RvbUVsZW1lbnQ7XHJcbn07XHJcblxyXG5jb25zdCBjcmVhdGVVbmlmb3JtRm9yVmVjMyA9ICh1cGRhdGU6ICh2YWx1ZTogVmVjdG9yMykgPT4gdm9pZCkgPT4ge1xyXG4gIGNvbnN0IFtjdXN0b21FbGVtZW50LCBjdXN0b21Db250cm9sbGVyXSA9IGNyZWF0ZVZlY3RvcjModXBkYXRlKTtcclxuICBjdXN0b21Db250cm9sbGVyLnNldFZhbHVlcyhbMCwgMCwgMF0pO1xyXG5cclxuICBjb25zdCBbY29sb3JFbGVtZW50LCBjb2xvckNvbnRyb2xsZXJdID0gY3JlYXRlQ29sb3IzKHVwZGF0ZSk7XHJcbiAgY29sb3JDb250cm9sbGVyLnNldFZhbHVlcyhbMSwgMCwgMF0pO1xyXG5cclxuICBjb25zdCBvcHRpb25zRWxlbWVudCA9IGNyZWF0ZVVuaWZvcm1TZWxlY3Rpb24oe1xyXG4gICAgY3VzdG9tOiB7XHJcbiAgICAgIGRpc3BsYXk6IFwiQ3VzdG9tXCIsXHJcbiAgICAgIGVsZW1lbnQ6IGN1c3RvbUVsZW1lbnQsXHJcbiAgICB9LFxyXG4gICAgY29sb3I6IHtcclxuICAgICAgZGlzcGxheTogXCJDb2xvclwiLFxyXG4gICAgICBlbGVtZW50OiBjb2xvckVsZW1lbnQsXHJcbiAgICB9LFxyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gY3JlYXRlRGl2KFwiY29sdW1uLXdpdGgtZ2FwXCIsIFtcclxuICAgIG9wdGlvbnNFbGVtZW50LFxyXG4gICAgY3VzdG9tRWxlbWVudCxcclxuICAgIGNvbG9yRWxlbWVudCxcclxuICBdKTtcclxufTtcclxuXHJcbmNvbnN0IGNyZWF0ZVVuaWZvcm1Gb3JWZWM0ID0gKFxyXG4gIGluaXRpYWxWYWx1ZTogVmVjdG9yNCxcclxuICB1cGRhdGU6ICh2YWx1ZTogVmVjdG9yNCkgPT4gdm9pZFxyXG4pID0+IHtcclxuICBjb25zdCBbY3VzdG9tRWxlbWVudCwgY3VzdG9tQ29udHJvbGxlcl0gPSBjcmVhdGVWZWN0b3I0KHVwZGF0ZSk7XHJcbiAgY3VzdG9tQ29udHJvbGxlci5zZXRWYWx1ZXMoaW5pdGlhbFZhbHVlKTtcclxuXHJcbiAgY29uc3QgW2NvbG9yRWxlbWVudCwgY29sb3JDb250cm9sbGVyXSA9IGNyZWF0ZUNvbG9yNCh1cGRhdGUpO1xyXG4gIGNvbG9yQ29udHJvbGxlci5zZXRWYWx1ZXMoaW5pdGlhbFZhbHVlKTtcclxuXHJcbiAgY29uc3Qgb3B0aW9uc0VsZW1lbnQgPSBjcmVhdGVVbmlmb3JtU2VsZWN0aW9uKHtcclxuICAgIGN1c3RvbToge1xyXG4gICAgICBkaXNwbGF5OiBcIkN1c3RvbVwiLFxyXG4gICAgICBlbGVtZW50OiBjdXN0b21FbGVtZW50LFxyXG4gICAgfSxcclxuICAgIGNvbG9yOiB7XHJcbiAgICAgIGRpc3BsYXk6IFwiQ29sb3JcIixcclxuICAgICAgZWxlbWVudDogY29sb3JFbGVtZW50LFxyXG4gICAgfSxcclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIGNyZWF0ZURpdihcImNvbHVtbi13aXRoLWdhcFwiLCBbXHJcbiAgICBvcHRpb25zRWxlbWVudCxcclxuICAgIGN1c3RvbUVsZW1lbnQsXHJcbiAgICBjb2xvckVsZW1lbnQsXHJcbiAgXSk7XHJcbn07XHJcbiIsImltcG9ydCB7IEF0dHJpYnV0ZUJ1ZmZlckluZm8sIEF0dHJpYnV0ZUJ1ZmZlclR5cGUgfSBmcm9tIFwiLi9hdHRyaWJ1dGVCdWZmZXJcIjtcclxuaW1wb3J0IHsgVmVjdG9yMiwgVmVjdG9yMywgVmVjdG9yNCB9IGZyb20gXCIuLi9jb21wb25lbnRzL2VkaXRWZWN0b3IzXCI7XHJcbmltcG9ydCB7IENvbXBvc2l0ZUtleU1hcCB9IGZyb20gXCIuLi9jb21wb3NpdGVLZXlNYXBcIjtcclxuaW1wb3J0IHsgd2l0aExhYmVsIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvd3JhcHBlcnNcIjtcclxuXHJcbmNvbnN0IGF0dHJpYnV0ZUJ1ZmZlckNvbXBvbmVudENhY2hlID0gbmV3IENvbXBvc2l0ZUtleU1hcDxcclxuICB7IG5hbWU6IHN0cmluZzsgdHlwZTogQXR0cmlidXRlQnVmZmVyVHlwZSB9LFxyXG4gIHsgY29tcG9uZW50OiBIVE1MRWxlbWVudDsgYXR0cmlidXRlQnVmZmVySW5mbzogQXR0cmlidXRlQnVmZmVySW5mbyB9XHJcbj4oa2V5ID0+IGAke2tleS5uYW1lfTske2tleS50eXBlfWApO1xyXG5cclxuZXhwb3J0IGNvbnN0IGNyZWF0ZUF0dHJpYnV0ZUJ1ZmZlckNvbXBvbmVudHMgPSAoXHJcbiAgY29udGV4dDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LFxyXG4gIHByb2dyYW06IFdlYkdMUHJvZ3JhbSxcclxuICBhdHRyaWJ1dGVCdWZmZXJzOiB7IG5hbWU6IHN0cmluZzsgdHlwZTogQXR0cmlidXRlQnVmZmVyVHlwZSB9W11cclxuKSA9PiB7XHJcbiAgY29uc3QgYXR0cmlidXRlQnVmZmVyQ29tcG9uZW50cyA9IGF0dHJpYnV0ZUJ1ZmZlcnMubWFwKGF0dHJpYnV0ZUJ1ZmZlciA9PiB7XHJcbiAgICBjb25zdCBrZXkgPSB7XHJcbiAgICAgIC4uLmF0dHJpYnV0ZUJ1ZmZlcixcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgYXR0cmlidXRlQnVmZmVyQ29tcG9uZW50RnJvbUNhY2hlID0gYXR0cmlidXRlQnVmZmVyQ29tcG9uZW50Q2FjaGUuZ2V0KFxyXG4gICAgICBrZXlcclxuICAgICk7XHJcblxyXG4gICAgaWYgKGF0dHJpYnV0ZUJ1ZmZlckNvbXBvbmVudEZyb21DYWNoZSkge1xyXG4gICAgICByZXR1cm4geyBrZXksIHZhbHVlOiBhdHRyaWJ1dGVCdWZmZXJDb21wb25lbnRGcm9tQ2FjaGUgfTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnN0IGF0dHJpYnV0ZUJ1ZmZlckluZm8gPSBuZXcgQXR0cmlidXRlQnVmZmVySW5mbyhcclxuICAgICAgICBjb250ZXh0LFxyXG4gICAgICAgIHByb2dyYW0sXHJcbiAgICAgICAgYXR0cmlidXRlQnVmZmVyLm5hbWUsXHJcbiAgICAgICAgYXR0cmlidXRlQnVmZmVyLnR5cGVcclxuICAgICAgKTtcclxuICAgICAgY29uc3QgY29tcG9uZW50ID0gd2l0aExhYmVsKFxyXG4gICAgICAgIGNyZWF0ZUF0dHJpYnV0ZUJ1ZmZlckNvbXBvbmVudChhdHRyaWJ1dGVCdWZmZXJJbmZvKSxcclxuICAgICAgICBcIlwiLFxyXG4gICAgICAgIGF0dHJpYnV0ZUJ1ZmZlci5uYW1lXHJcbiAgICAgICk7XHJcbiAgICAgIHJldHVybiB7IGtleSwgdmFsdWU6IHsgY29tcG9uZW50LCBhdHRyaWJ1dGVCdWZmZXJJbmZvIH0gfTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgYXR0cmlidXRlQnVmZmVyQ29tcG9uZW50Q2FjaGUuY2xlYXIoKTtcclxuICBhdHRyaWJ1dGVCdWZmZXJDb21wb25lbnRzLmZvckVhY2godWMgPT5cclxuICAgIGF0dHJpYnV0ZUJ1ZmZlckNvbXBvbmVudENhY2hlLnNldCh1Yy5rZXksIHVjLnZhbHVlKVxyXG4gICk7XHJcblxyXG4gIHJldHVybiBhdHRyaWJ1dGVCdWZmZXJDb21wb25lbnRzLm1hcCh1YyA9PiB1Yy52YWx1ZSk7XHJcbn07XHJcblxyXG5jb25zdCBjcmVhdGVBdHRyaWJ1dGVCdWZmZXJDb21wb25lbnQgPSAoXHJcbiAgYXR0cmlidXRlQnVmZmVySW5mbzogQXR0cmlidXRlQnVmZmVySW5mb1xyXG4pID0+IHtcclxuICBzd2l0Y2ggKGF0dHJpYnV0ZUJ1ZmZlckluZm8uZ2V0QXR0cmlidXRlQnVmZmVyVHlwZSgpKSB7XHJcbiAgICBjYXNlIEF0dHJpYnV0ZUJ1ZmZlclR5cGUuRkxPQVRfVkVDMzpcclxuICAgICAgcmV0dXJuIGNyZWF0ZUF0dHJpYnV0ZUJ1ZmZlcklucHV0VmVjMyh2YWx1ZSA9PiB7XHJcbiAgICAgICAgYXR0cmlidXRlQnVmZmVySW5mby5zZXRWYWx1ZSh2YWx1ZSk7XHJcbiAgICAgIH0pO1xyXG4gICAgY2FzZSBBdHRyaWJ1dGVCdWZmZXJUeXBlLkZMT0FUX1ZFQzQ6XHJcbiAgICAgIGNvbnN0IGluaXRpYWxWYWx1ZTogVmVjdG9yNFtdID0gW1xyXG4gICAgICAgIFswLCAwLCAwLCAxXSxcclxuICAgICAgICBbMCwgMC41LCAwLCAxXSxcclxuICAgICAgICBbMC43LCAwLCAwLCAxXSxcclxuICAgICAgXTtcclxuICAgICAgYXR0cmlidXRlQnVmZmVySW5mby5zZXRWYWx1ZShpbml0aWFsVmFsdWUpO1xyXG4gICAgICByZXR1cm4gY3JlYXRlQXR0cmlidXRlQnVmZmVySW5wdXRWZWM0KGluaXRpYWxWYWx1ZSwgdmFsdWUgPT4ge1xyXG4gICAgICAgIGF0dHJpYnV0ZUJ1ZmZlckluZm8uc2V0VmFsdWUodmFsdWUpO1xyXG4gICAgICB9KTtcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJldHVybiBjcmVhdGVBdHRyaWJ1dGVCdWZmZXJOb3RTdXBwb3J0ZWQoKTtcclxuICB9XHJcbn07XHJcblxyXG5jb25zdCBjcmVhdGVBdHRyaWJ1dGVCdWZmZXJOb3RTdXBwb3J0ZWQgPSAoKSA9PiB7XHJcbiAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICBkaXYuY2xhc3NOYW1lID0gXCJ1bnN1cHBvcnRlZC1lcnJvclwiO1xyXG4gIGRpdi5pbm5lclRleHQgPSBcIk5vdCBzdXBwb3J0ZWQgYXR0cmlidXRlIGJ1ZmZlclwiO1xyXG4gIHJldHVybiBkaXY7XHJcbn07XHJcblxyXG5jb25zdCBjcmVhdGVBdHRyaWJ1dGVCdWZmZXJJbnB1dFZlYzMgPSAodXBkYXRlOiAodmFsdWU6IFZlY3RvcjNbXSkgPT4gdm9pZCkgPT4ge1xyXG4gIGNvbnN0IGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xyXG4gIC8vY29uc3QgaXRlbUVsZW1lbnQgPSB7IGVsZW1lbnQ6IGlucHV0LCB2YWx1ZSB9O1xyXG4gIC8vT2JqZWN0LmFzc2lnbihpbnB1dCwgaW5wdXRPcHRpb25zKTtcclxuICBpbnB1dC5jbGFzc05hbWUgPSBcImVkaXQtaW5wdXRcIjtcclxuICBpbnB1dC5vbmlucHV0ID0gKCkgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgcmVzdWx0ID0gSlNPTi5wYXJzZShpbnB1dC52YWx1ZSk7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwicmVzdWx0XCIsIHJlc3VsdCk7XHJcblxyXG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkocmVzdWx0KSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwidGhpcyBpcyBub3QgYW4gYXJyYXkgdHlwZVwiKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zdCB4eHggPSByZXN1bHQuZXZlcnkoZSA9PlxyXG4gICAgICAgICAgQXJyYXkuaXNBcnJheShlKSA/IGUubGVuZ3RoID09PSAzIDogZmFsc2VcclxuICAgICAgICApO1xyXG4gICAgICAgIGlmICgheHh4KSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIm5vdCBldmVyeSBlbGVtZW50IGlkIHRoZSBhcnJhIGlzIHNhbWUgc2l6ZVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgdXBkYXRlKHJlc3VsdCk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmxvZyhcInRoaXMgaXMgbm90IGEganNvblwiKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvL1dyb25nIGZvcm1hdCEgU2hvdWxkIGJlIFtbeDEseTFdLCBbeDIseTJdLCAuLi5dXHJcbiAgcmV0dXJuIGlucHV0O1xyXG59O1xyXG5cclxuY29uc3QgY3JlYXRlQXR0cmlidXRlQnVmZmVySW5wdXRWZWM0ID0gKFxyXG4gIGluaXRpYWxWYWx1ZTogVmVjdG9yNFtdLFxyXG4gIHVwZGF0ZTogKHZhbHVlOiBWZWN0b3I0W10pID0+IHZvaWRcclxuKSA9PiB7XHJcbiAgY29uc3QgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XHJcbiAgLy9jb25zdCBpdGVtRWxlbWVudCA9IHsgZWxlbWVudDogaW5wdXQsIHZhbHVlIH07XHJcbiAgLy9PYmplY3QuYXNzaWduKGlucHV0LCBpbnB1dE9wdGlvbnMpO1xyXG4gIGlucHV0LmNsYXNzTmFtZSA9IFwiZWRpdC1pbnB1dFwiO1xyXG4gIGlucHV0LnZhbHVlID0gSlNPTi5zdHJpbmdpZnkoaW5pdGlhbFZhbHVlKTtcclxuICBpbnB1dC5vbmlucHV0ID0gKCkgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgcmVzdWx0ID0gSlNPTi5wYXJzZShpbnB1dC52YWx1ZSk7XHJcbiAgICAgIC8vY29uc29sZS5sb2coXCJyZXN1bHRcIiwgcmVzdWx0KTtcclxuXHJcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShyZXN1bHQpKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJ0aGlzIGlzIG5vdCBhbiBhcnJheSB0eXBlXCIpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IHh4eCA9IHJlc3VsdC5ldmVyeShlID0+XHJcbiAgICAgICAgICBBcnJheS5pc0FycmF5KGUpID8gZS5sZW5ndGggPT09IDQgOiBmYWxzZVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgaWYgKCF4eHgpIHtcclxuICAgICAgICAgIC8vICBjb25zb2xlLmxvZyhcIm5vdCBldmVyeSBlbGVtZW50IGlkIHRoZSBhcnJhIGlzIHNhbWUgc2l6ZVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgdXBkYXRlKHJlc3VsdCk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmxvZyhcInRoaXMgaXMgbm90IGEganNvblwiKTtcclxuICAgIH1cclxuICB9O1xyXG4gIC8vV3JvbmcgZm9ybWF0ISBTaG91bGQgYmUgW1t4MSx5MV0sIFt4Mix5Ml0sIC4uLl1cclxuICByZXR1cm4gaW5wdXQ7XHJcbn07XHJcbiIsImltcG9ydCB7IHRyYW5zbGF0aW9ucyB9IGZyb20gXCIuLy4uL3RyYW5zbGF0aW9uc1wiO1xyXG5pbXBvcnQgeyBjcmVhdGVEcm9wZG93biB9IGZyb20gXCIuL2NvbXBvbmVudHMvZHJvcGRvd25cIjtcclxuaW1wb3J0IHsgVW5zdWJzY3JpYmUsIFZzQ29kZUFwaVByb3h5IH0gZnJvbSBcIi4vY29tbXVuaWNhdGlvblByb3h5XCI7XHJcbmltcG9ydCB7IGNyZWF0ZVNlY3Rpb25UaXRsZSB9IGZyb20gXCIuL2NvbXBvbmVudHMvY3JlYXRlU2VjdGlvblRpdGxlXCI7XHJcbmltcG9ydCB7IGNyZWF0ZUZBQnV0dG9uIGFzIGNyZWF0ZUJ1dHRvbiB9IGZyb20gXCIuL2NvbXBvbmVudHMvY3JlYXRlRkFCdXR0b25cIjtcclxuaW1wb3J0IHsgd2l0aExhYmVsIH0gZnJvbSBcIi4vY29tcG9uZW50cy93cmFwcGVyc1wiO1xyXG5pbXBvcnQgeyBjcmVhdGVEaXYgfSBmcm9tIFwiLi9jb21wb25lbnRzL2NvbW1vblwiO1xyXG5pbXBvcnQgeyBjcmVhdGVXZWJHTENhbnZhcywgY29tcGlsZVNoYWRlcnMgfSBmcm9tIFwiLi9jcmVhdGVXZWJHTENhbnZhc1wiO1xyXG5pbXBvcnQgeyBjcmVhdGVVbmlmb3JtQ29tcG9uZW50cyB9IGZyb20gXCIuL3dlYmdsX3V0aWxzL3VuaWZvcm1Db21wb25lbnRcIjtcclxuaW1wb3J0IHtcclxuICBmb3JtYXRTaGFkZXJDb21waWxlRXJyb3JzLFxyXG4gIGdldFByb2dyYW1BdHRyaWJ1dGVCdWZmZXJzLFxyXG4gIGdldFByb2dyYW1Vbmlmb3JtcyxcclxuICByZW5kZXJQcm9ncmFtLFxyXG4gIFNoYWRlckNvbXBpbGVFcnJvcnMsXHJcbn0gZnJvbSBcIi4vd2ViZ2xfdXRpbHMvdXRpbHNcIjtcclxuaW1wb3J0IHsgY3JlYXRlQXR0cmlidXRlQnVmZmVyQ29tcG9uZW50cyB9IGZyb20gXCIuL3dlYmdsX3V0aWxzL2F0dHJpYnV0ZUJ1ZmZlckNvbXBvbmVudFwiO1xyXG5cclxuY29uc3QgY3JlYXRlVmlld2VyID0gYXN5bmMgKCkgPT4ge1xyXG4gIGNvbnN0IHZzY29kZUFwaSA9IG5ldyBWc0NvZGVBcGlQcm94eSgpO1xyXG4gIGNvbnN0IHZpZXdlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidmlld2VyXCIpO1xyXG4gIGNvbnN0IHZpZXdlck9wdGlvbnMgPSBjcmVhdGVEaXYoXCJ2aWV3ZXItb3B0aW9uc1wiKTtcclxuICBjb25zdCBzaGFkZXJPcHRpb25zID0gY3JlYXRlRGl2KFwidmlld2VyLXNoYWRlci1vcHRpb25zXCIpO1xyXG4gIGNvbnN0IHNoYWRlckNvbXBpbGF0aW9uRXJyb3JzID0gY3JlYXRlRGl2KFwidmlld2VyLWNvbnRlbnQgc2hhZGVyLWVycm9yc1wiKTtcclxuICBjb25zdCBbd2ViR0xDYW52YXMsIHdlYkdMQ29udHJvbGxlcl0gPSBjcmVhdGVXZWJHTENhbnZhcyhcInZpZXdlci1jb250ZW50XCIpO1xyXG5cclxuICB2aWV3ZXIuYXBwZW5kQ2hpbGQod2ViR0xDYW52YXMpO1xyXG4gIHZpZXdlci5hcHBlbmRDaGlsZChzaGFkZXJDb21waWxhdGlvbkVycm9ycyk7XHJcbiAgdmlld2VyLmFwcGVuZENoaWxkKHZpZXdlck9wdGlvbnMpO1xyXG5cclxuICBjb25zdCBzaG93Q29udGVudCA9IChjb250ZW50OiBcImNhbnZhc1wiIHwgXCJlcnJvcnNcIiB8IFwibm9uZVwiKSA9PiB7XHJcbiAgICB3ZWJHTENhbnZhcy5zdHlsZS52aXNpYmlsaXR5ID1cclxuICAgICAgY29udGVudCA9PT0gXCJjYW52YXNcIiA/IFwidmlzaWJsZVwiIDogXCJjb2xsYXBzZVwiO1xyXG4gICAgc2hhZGVyQ29tcGlsYXRpb25FcnJvcnMuc3R5bGUudmlzaWJpbGl0eSA9XHJcbiAgICAgIGNvbnRlbnQgPT09IFwiZXJyb3JzXCIgPyBcInZpc2libGVcIiA6IFwiY29sbGFwc2VcIjtcclxuICB9O1xyXG5cclxuICBsZXQgc2VsZWN0ZWRWZXJ0ZXhGaWxlV2F0Y2hlclVuc3Vic2NyaWJlOiBVbnN1YnNjcmliZSB8IHVuZGVmaW5lZDtcclxuICBsZXQgc2VsZWN0ZWRGcmFnbWVudEZpbGVXYXRjaGVyVW5zdWJzY3JpYmU6IFVuc3Vic2NyaWJlIHwgdW5kZWZpbmVkO1xyXG4gIGxldCBzZWxlY3RlZFZlcnRleENvbnRlbnQ6IHN0cmluZyB8IG51bGw7XHJcbiAgbGV0IHNlbGVjdGVkRnJhZ21lbnRDb250ZW50OiBzdHJpbmcgfCBudWxsO1xyXG4gIGxldCBhbmltYXRpb25GcmFtZUhhbmRsZTogbnVtYmVyID0gbnVsbDtcclxuXHJcbiAgY29uc3Qgb25TaGFkZXJDb250ZW50Q2hhbmdlZCA9ICgpID0+IHtcclxuICAgIHNoYWRlck9wdGlvbnMuaW5uZXJIVE1MID0gXCJcIjtcclxuICAgIGNvbnN0IGNvbnRleHQgPSB3ZWJHTENvbnRyb2xsZXIuY29udGV4dDtcclxuXHJcbiAgICBpZiAoc2VsZWN0ZWRGcmFnbWVudENvbnRlbnQgJiYgc2VsZWN0ZWRWZXJ0ZXhDb250ZW50KSB7XHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGNvbXBpbGVTaGFkZXJzKFxyXG4gICAgICAgIGNvbnRleHQsXHJcbiAgICAgICAgc2VsZWN0ZWRWZXJ0ZXhDb250ZW50LFxyXG4gICAgICAgIHNlbGVjdGVkRnJhZ21lbnRDb250ZW50XHJcbiAgICAgICk7XHJcblxyXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShyZXN1bHQpKSB7XHJcbiAgICAgICAgc2hvd0NvbnRlbnQoXCJlcnJvcnNcIik7XHJcbiAgICAgICAgc2hhZGVyQ29tcGlsYXRpb25FcnJvcnMuaW5uZXJUZXh0ID0gZm9ybWF0U2hhZGVyQ29tcGlsZUVycm9ycyhcclxuICAgICAgICAgIHJlc3VsdCBhcyBTaGFkZXJDb21waWxlRXJyb3JzXHJcbiAgICAgICAgKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBzaG93Q29udGVudChcImNhbnZhc1wiKTtcclxuICAgICAgICBjb25zdCBwcm9ncmFtID0gcmVzdWx0IGFzIFdlYkdMUHJvZ3JhbTtcclxuICAgICAgICBjb25zdCB1bmlmb3JtcyA9IGdldFByb2dyYW1Vbmlmb3Jtcyhjb250ZXh0LCBwcm9ncmFtKTtcclxuICAgICAgICBjb25zdCBhdHRyaWJ1dGVCdWZmZXJzID0gZ2V0UHJvZ3JhbUF0dHJpYnV0ZUJ1ZmZlcnMoY29udGV4dCwgcHJvZ3JhbSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHVuaWZvcm1Db21wb25lbnRzID0gY3JlYXRlVW5pZm9ybUNvbXBvbmVudHMoXHJcbiAgICAgICAgICBjb250ZXh0LFxyXG4gICAgICAgICAgcHJvZ3JhbSxcclxuICAgICAgICAgIHVuaWZvcm1zXHJcbiAgICAgICAgKTtcclxuICAgICAgICB1bmlmb3JtQ29tcG9uZW50cy5mb3JFYWNoKHVjID0+XHJcbiAgICAgICAgICBzaGFkZXJPcHRpb25zLmFwcGVuZENoaWxkKHVjLmNvbXBvbmVudClcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBjb25zdCBhdHRyaWJ1dGVCdWZmZXJDb21wb25lbnRzID0gY3JlYXRlQXR0cmlidXRlQnVmZmVyQ29tcG9uZW50cyhcclxuICAgICAgICAgIGNvbnRleHQsXHJcbiAgICAgICAgICBwcm9ncmFtLFxyXG4gICAgICAgICAgYXR0cmlidXRlQnVmZmVyc1xyXG4gICAgICAgICk7XHJcbiAgICAgICAgYXR0cmlidXRlQnVmZmVyQ29tcG9uZW50cy5mb3JFYWNoKGFiID0+XHJcbiAgICAgICAgICBzaGFkZXJPcHRpb25zLmFwcGVuZENoaWxkKGFiLmNvbXBvbmVudClcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBjb25zdCB1bmlmb3JtSW5mb3MgPSB1bmlmb3JtQ29tcG9uZW50cy5tYXAodWMgPT4gdWMudW5pZm9ybUluZm8pO1xyXG4gICAgICAgIGNvbnN0IGF0dHJpYnV0ZUJ1ZmZlckluZm9zID0gYXR0cmlidXRlQnVmZmVyQ29tcG9uZW50cy5tYXAoXHJcbiAgICAgICAgICBhYmMgPT4gYWJjLmF0dHJpYnV0ZUJ1ZmZlckluZm9cclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBpZiAoYW5pbWF0aW9uRnJhbWVIYW5kbGUgIT09IG51bGwpXHJcbiAgICAgICAgICBjYW5jZWxBbmltYXRpb25GcmFtZShhbmltYXRpb25GcmFtZUhhbmRsZSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHJlbmRlciA9ICgpID0+IHtcclxuICAgICAgICAgIHJlbmRlclByb2dyYW0od2ViR0xDb250cm9sbGVyLmNvbnRleHQsIHJlc3VsdCwge1xyXG4gICAgICAgICAgICB1bmlmb3JtczogdW5pZm9ybUluZm9zLFxyXG4gICAgICAgICAgICBhdHRyaWJ1dGVCdWZmZXJzOiBhdHRyaWJ1dGVCdWZmZXJJbmZvcyxcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgYW5pbWF0aW9uRnJhbWVIYW5kbGUgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVuZGVyKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZW5kZXIoKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc2hvd0NvbnRlbnQoXCJub25lXCIpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHZpZXdlck9wdGlvbnMuYXBwZW5kQ2hpbGQoXHJcbiAgICBjcmVhdGVEaXYoXCJ2aWV3ZXItc2hhZGVycy10aXRsZVwiLCBbXHJcbiAgICAgIGNyZWF0ZVNlY3Rpb25UaXRsZSh0cmFuc2xhdGlvbnMuc2hhZGVycywgXCJcIikuZWxlbWVudCxcclxuICAgICAgY3JlYXRlQnV0dG9uKFwiU3luY1wiLCBcInZpZXdlci1yZWZyZXNoLWJ1dHRvblwiLCAoKSA9PiB7XHJcbiAgICAgICAgdnNjb2RlQXBpLmdldFNoYWRlckRvY3VtZW50cygpLnRoZW4oc2QgPT4ge1xyXG4gICAgICAgICAgY29uc3QgZmlsZXMgPSBzZC5tYXAoZiA9PiAoe1xyXG4gICAgICAgICAgICBpZDogZi5maWxlUGF0aCxcclxuICAgICAgICAgICAgZGlzcGxheTogZi5maWxlTmFtZSxcclxuICAgICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgICB2ZXJ0ZXhEcm9wZG93bkNvbnRyb2xsZXIuc2V0SXRlbXMoZmlsZXMpO1xyXG4gICAgICAgICAgZnJhZ21lbnREcm9wZG93bkNvbnRyb2xsZXIuc2V0SXRlbXMoZmlsZXMpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KS5lbGVtZW50LFxyXG4gICAgXSlcclxuICApO1xyXG5cclxuICBjb25zdCBbdmVydGV4RHJvcGRvd25FbGVtZW50LCB2ZXJ0ZXhEcm9wZG93bkNvbnRyb2xsZXJdID0gY3JlYXRlRHJvcGRvd24oXHJcbiAgICBhc3luYyBuZXdWZXJ0ZXggPT4ge1xyXG4gICAgICBzZWxlY3RlZFZlcnRleEZpbGVXYXRjaGVyVW5zdWJzY3JpYmU/LigpO1xyXG5cclxuICAgICAgaWYgKG5ld1ZlcnRleCkge1xyXG4gICAgICAgIHNlbGVjdGVkVmVydGV4RmlsZVdhdGNoZXJVbnN1YnNjcmliZSA9IHZzY29kZUFwaS5zdWJzY3JpYmVUb0RvY3VtZW50U2F2ZShcclxuICAgICAgICAgIG5ld1ZlcnRleC5pZCxcclxuICAgICAgICAgIG5ld0NvbnRlbnQgPT4ge1xyXG4gICAgICAgICAgICBzZWxlY3RlZFZlcnRleENvbnRlbnQgPSBuZXdDb250ZW50O1xyXG4gICAgICAgICAgICBvblNoYWRlckNvbnRlbnRDaGFuZ2VkKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgc2VsZWN0ZWRWZXJ0ZXhDb250ZW50ID0gbmV3VmVydGV4XHJcbiAgICAgICAgPyBhd2FpdCB2c2NvZGVBcGkuZ2V0RG9jdW1lbnRUZXh0KG5ld1ZlcnRleC5pZClcclxuICAgICAgICA6IFwiXCI7XHJcbiAgICAgIG9uU2hhZGVyQ29udGVudENoYW5nZWQoKTtcclxuICAgIH1cclxuICApO1xyXG4gIHZpZXdlck9wdGlvbnMuYXBwZW5kQ2hpbGQoXHJcbiAgICB3aXRoTGFiZWwoXHJcbiAgICAgIHZlcnRleERyb3Bkb3duRWxlbWVudCxcclxuICAgICAgXCJ2aWV3ZXItdmVydGV4LXNoYWRlci1zZWxlY3RvclwiLFxyXG4gICAgICBcIlZlcnRleCBTaGFkZXJcIlxyXG4gICAgKVxyXG4gICk7XHJcblxyXG4gIGNvbnN0IFtmcmFnbWVudERyb3Bkb3duRWxlbWVudCwgZnJhZ21lbnREcm9wZG93bkNvbnRyb2xsZXJdID0gY3JlYXRlRHJvcGRvd24oXHJcbiAgICBhc3luYyBuZXdGcmFnbWVudCA9PiB7XHJcbiAgICAgIHNlbGVjdGVkRnJhZ21lbnRGaWxlV2F0Y2hlclVuc3Vic2NyaWJlPy4oKTtcclxuXHJcbiAgICAgIGlmIChuZXdGcmFnbWVudCkge1xyXG4gICAgICAgIHNlbGVjdGVkRnJhZ21lbnRGaWxlV2F0Y2hlclVuc3Vic2NyaWJlID0gdnNjb2RlQXBpLnN1YnNjcmliZVRvRG9jdW1lbnRTYXZlKFxyXG4gICAgICAgICAgbmV3RnJhZ21lbnQuaWQsXHJcbiAgICAgICAgICBuZXdDb250ZW50ID0+IHtcclxuICAgICAgICAgICAgc2VsZWN0ZWRGcmFnbWVudENvbnRlbnQgPSBuZXdDb250ZW50O1xyXG4gICAgICAgICAgICBvblNoYWRlckNvbnRlbnRDaGFuZ2VkKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgc2VsZWN0ZWRGcmFnbWVudENvbnRlbnQgPSBuZXdGcmFnbWVudFxyXG4gICAgICAgID8gYXdhaXQgdnNjb2RlQXBpLmdldERvY3VtZW50VGV4dChuZXdGcmFnbWVudC5pZClcclxuICAgICAgICA6IFwiXCI7XHJcbiAgICAgIG9uU2hhZGVyQ29udGVudENoYW5nZWQoKTtcclxuICAgIH1cclxuICApO1xyXG4gIHZpZXdlck9wdGlvbnMuYXBwZW5kQ2hpbGQoXHJcbiAgICB3aXRoTGFiZWwoXHJcbiAgICAgIGZyYWdtZW50RHJvcGRvd25FbGVtZW50LFxyXG4gICAgICBcInZpZXdlci1mcmFnbWVudC1zaGFkZXItc2VsZWN0b3JcIixcclxuICAgICAgXCJGcmFnbWVudCBTaGFkZXJcIlxyXG4gICAgKVxyXG4gICk7XHJcblxyXG4gIHZpZXdlck9wdGlvbnMuYXBwZW5kQ2hpbGQoc2hhZGVyT3B0aW9ucyk7XHJcbn07XHJcblxyXG5jcmVhdGVWaWV3ZXIoKTtcclxuIiwiZXhwb3J0IGNvbnN0IGNyZWF0ZVNlY3Rpb25UaXRsZSA9ICh0ZXh0OiBzdHJpbmcsIGNsYXNzTmFtZTogc3RyaW5nKSA9PiB7XHJcbiAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoM1wiKTtcclxuICBlbGVtZW50LnRleHRDb250ZW50ID0gdGV4dDtcclxuICBlbGVtZW50LmNsYXNzTmFtZSA9IGAke2NsYXNzTmFtZX0gc2VjdGlvbi10aXRsZWA7XHJcbiAgcmV0dXJuIHsgZWxlbWVudCB9O1xyXG59O1xyXG4iXSwic291cmNlUm9vdCI6IiJ9