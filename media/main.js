!function(e){var n={};function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)t.d(r,o,function(n){return e[n]}.bind(null,o));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=0)}([function(e,n,t){"use strict";t.r(n);var r=function(){for(var e=0,n=0,t=arguments.length;n<t;n++)e+=arguments[n].length;var r=Array(e),o=0;for(n=0;n<t;n++)for(var i=arguments[n],u=0,a=i.length;u<a;u++,o++)r[o]=i[u];return r},o=function(e,n,t){var o=document.createElement("select");o.className=null!=n?n:"";var i=null,u=[],a=function(n){e(i=n)};o.onchange=function(){var e=u.find((function(e){return e.item.id===o.value}));e.item.id?a(e.item):a(null)};return[o,{setItems:function(e){o.innerHTML="",u.length=0,e.find((function(e){return e.id===(null==i?void 0:i.id)}))||a(null),r([{id:"",display:""}],e).forEach((function(e){var n=document.createElement("option");n.value=e.id,n.textContent=e.display,n.selected=e.id===(null==i?void 0:i.id),o.appendChild(n),u.push({element:n,item:e})}))},getItems:function(){return u.map((function(e){return e.item}))},setSelectedItemById:function(e){a(null),u.forEach((function(n){n.item.id===e?(n.element.selected=!0,a(n.item)):n.element.selected=!1}))},getSelectedItem:function(){return i},clearSelection:function(){u.forEach((function(e){return e.element.selected=!1})),a(null)}}]},i=acquireVsCodeApi(),u=function(){function e(){var e=this;this.eventListeners=[],window.addEventListener("message",(function(n){e.eventListeners=e.eventListeners.filter((function(e){return e(n.data)}))}))}return e.prototype.getShaderDocuments=function(){var e=this;return i.postMessage({type:"getShaderDocuments"}),new Promise((function(n){e.eventListeners.push((function(e){return"getShaderDocuments"===e.type&&(n(e.payload.files),!0)}))}))},e}(),a=function(e,n,t){var r=document.createElement("div");r.className=n+" options-wrapper";var o=document.createElement("label");return o.className="options-label",o.textContent=t,e.className=e.className+" options-content",r.appendChild(o),r.appendChild(e),r},l=function(e,n,t,r,o){var i=document.createElement("div");i.className="edit-input-grid";for(var u=[],a=function(){return u.map((function(e){return e.value}))},l=0;l<t;l++){var c=document.createElement("div");c.className="edit-input-row";for(var s=function(t){var o=l*r+t,i=e[o],s=document.createElement("input"),d={element:s,value:i};s.className="edit-input",s.type="number",s.value=null==i?void 0:i.toString(),s.oninput=function(){u[o].value=Number(s.value),null==n||n(a())},u.push(d),c.appendChild(s)},d=0;d<r;d++)s(d);i.appendChild(c)}return[i,{setValues:function(e){return u.forEach((function(n,t){return n.value=e[t]}))},getValues:a,setReadonly:function(e){return u.forEach((function(n){return n.element.readOnly=e}))}}]},c=function(e,n){var t,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;u;)try{if(t=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!(o=u.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=n.call(e,u)}catch(e){i=[6,e],r=0}finally{t=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};(function(e,n,t,r){new(t||(t=Promise))((function(o,i){function u(e){try{l(r.next(e))}catch(e){i(e)}}function a(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){var n;e.done?o(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(u,a)}l((r=r.apply(e,n||[])).next())}))})(void 0,void 0,void 0,(function(){var e,n,t,r,i,s,d,f,p,m;return c(this,(function(c){var v,h,y;return e=new u,n=document.getElementById("viewer"),t=document.createElement("div"),v="viewer-shader-options",(h=document.createElement("div")).className=v,r=h,t.appendChild(r),t.className="viewer-options",i=o((function(e){})),s=i[0],d=i[1],t.appendChild(a(s,"viewer-vertex-shader-selector","Vertex Shader")),f=o((function(e){})),p=f[0],m=f[1],t.appendChild(a(p,"viewer-fragment-shader-selector","Fragment Shader")),t.appendChild(function(e,n){var t=document.createElement("h3");return t.textContent=e,t.className=n+" section-title",{element:t}}("SHADERS","viewer-shaders-title").element),t.appendChild(function(e,n,t){var r=document.createElement("button");return r.onclick=t,r.className=n,r.textContent=e,{element:r}}("â†»","viewer-refresh-button",(function(){e.getShaderDocuments().then((function(e){var n=e.map((function(e){return{id:e.filePath,display:e.fileName}}));d.setItems(n),m.setItems(n)}))})).element),n.appendChild(t),r.appendChild(a(l([0,0,0],y,1,3)[0],"","u_color")),r.appendChild(a(function(e){return l([0,0,0,0],e,1,4)}()[0],"","u_diffuse")),r.appendChild(a(function(e){return l([0,0,0,0,0,0,0,0,0],e,3,3)}((function(e){return console.log(e)}))[0],"","u_diffuse2")),[2]}))}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,