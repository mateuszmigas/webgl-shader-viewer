!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t),n.d(t,"createUniformBindings",(function(){return de}));var r,o=function(){return(o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},i=function(e){return Math.min(Math.max(e,1),10)},u=function(){function e(e,t,n){var r=this;this.element=e,this.positionProvider=t,this.onPositionChange=n,this.pointerPosition={x:0,y:0},this.eventListeners=new Map,this.isMoving=!1,this.dispatchAction=function(e){var t=function(e,t){switch(t.type){case"orbitRotate":return o(o({},e),{latitude:(r=e.latitude+t.deltaLatitude,Math.min(Math.max(r,-Math.PI/2+.1),Math.PI/2-.1)),longitude:(n=e.longitude+t.deltaLongitude,n>Math.PI?n-2*Math.PI:n<-Math.PI?n+2*Math.PI:n)});case"zoomInAt":return o(o({},e),{radius:i(e.radius-.1)});case"zoomOutAt":return o(o({},e),{radius:i(e.radius+.1)});default:return e}var n,r}(r.positionProvider(),e);r.onPositionChange(t)},this.onMouseDown=function(e){0===e.button&&(r.pointerPosition={x:e.offsetX,y:e.offsetY},r.isMoving=!0)},this.onMouseMove=function(e){if(r.isMoving){r.dispatchAction({type:"orbitRotate",deltaLongitude:.01*-(e.offsetX-r.pointerPosition.x),deltaLatitude:.01*(e.offsetY-r.pointerPosition.y)})}r.pointerPosition={x:e.offsetX,y:e.offsetY}},this.onMouseUp=function(){r.isMoving=!1},this.onMouseLeave=function(){r.isMoving=!1},this.onWheel=function(e){var t=e.deltaY<0?"zoomInAt":"zoomOutAt";r.dispatchAction({type:t})},this.registerEvent("mousedown",this.onMouseDown),this.registerEvent("mousemove",this.onMouseMove),this.registerEvent("mouseup",this.onMouseUp),this.registerEvent("mouseleave",this.onMouseLeave),this.registerEvent("wheel",this.onWheel)}return e.prototype.dispose=function(){var e=this;this.eventListeners.forEach((function(t,n){return e.element.removeEventListener(n,t)}))},e.prototype.registerEvent=function(e,t){this.element.addEventListener(e,t),this.eventListeners.set(e,t)},e}(),a=acquireVsCodeApi(),c={vertexFilePath:null,fragmentFilePath:null,drawMode:"elements"},s=function(){var e;return null!==(e=a.getState())&&void 0!==e?e:c},f=function(e){return a.setState(Object.assign(s(),e))},l=function(){function e(e){this.context=e,this.count=0,this.buffer=e.createBuffer()}return e.prototype.setValue=function(e){this.count=e.length,this.context.bindBuffer(this.context.ELEMENT_ARRAY_BUFFER,this.buffer),this.context.bufferData(this.context.ELEMENT_ARRAY_BUFFER,new Uint16Array(e),this.context.STATIC_DRAW)},e.prototype.setIndexBuffer=function(){this.context.bindBuffer(this.context.ELEMENT_ARRAY_BUFFER,this.buffer)},e.prototype.getCount=function(){return this.count},e.prototype.deleteBuffer=function(){this.context.deleteBuffer(this.buffer),this.buffer=null},e}(),h="SHADERS",p=function(){return(p=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},d=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],u=0,a=i.length;u<a;u++,o++)r[o]=i[u];return r},v={emptyItem:!0},m=function(e,t,n){var r=p(p({},v),n),o=document.createElement("select");o.className="dropdown-base "+t;var i=null,u=[],a=function(t){e(i=t)};o.onchange=function(){var e=u.find((function(e){return e.item.id===o.value}));e.item.id?a(e.item):a(null)};var c=function(e){u.forEach((function(t){t.item.id===e?(t.element.selected=!0,a(t.item)):t.element.selected=!1}))};return[o,{setItems:function(e){o.innerHTML="",u.length=0,(r.emptyItem?d([{id:"",display:""}],e):d(e)).forEach((function(e){var t=document.createElement("option");t.value=e.id,t.textContent=e.display,t.selected=e.id===(null==i?void 0:i.id),o.appendChild(t),u.push({element:t,item:e})}))},getItems:function(){return u.map((function(e){return e.item}))},setSelectedItemById:c,setSelectedItemByIndex:function(e){return c(u[e].item.id)},getSelectedItem:function(){return i},clearSelection:function(){u.forEach((function(e){return e.element.selected=!1})),a(null)}}]},y=function(e,t){var n=m((function(n){n?(e.forEach((function(e){return e.element.classList.add("hidden")})),e.find((function(e){return e.id===n.id})).element.classList.remove("hidden"),null==t||t(n.id)):null==t||t(null)}),"",{emptyItem:!1}),r=n[0],o=n[1];return o.setItems(e.map((function(e){return{id:e.id,display:e.display}}))),o.setSelectedItemByIndex(0),r},g=function(e,t,n){var r=document.createElement("button");return r.onclick=n,r.className=t,r.textContent=e,{element:r}},b=function(e,t,n){var r=document.createElement("div");r.className=(null!=n?n:"")+" options-wrapper";var o=document.createElement("label");return o.className="options-label",o.textContent=t,e.className=e.className+" options-content",r.appendChild(o),r.appendChild(e),r},x=function(e,t){var n=document.createElement("div");return n.className=e,null==t||t.forEach((function(e){return n.appendChild(e)})),n},A=function(e,t){return e.hasOwnProperty(t)},E=function(e){throw new Error("Unhandled union member: "+JSON.stringify(e))},T=function(e,t,n,r){var o=document.createElement("div");o.className="edit-input-grid";for(var i=[],u=function(){return i.map((function(e){return e.value}))},a=0;a<t;a++){var c=document.createElement("div");c.className="edit-input-row";for(var s=function(t){var o=a*n+t,s=document.createElement("input"),f={element:s,value:0};Object.assign(s,r),s.className="edit-input",s.type="number",s.value=(0).toString(),s.oninput=function(){i[o].value=Number(s.value),console.log("calling on change"),null==e||e(u())},i.push(f),c.appendChild(s)},f=0;f<n;f++)s(f);o.appendChild(c)}return[o,{setValues:function(e){return i.forEach((function(t,n){t.value=e[n],t.element.value=t.value.toString()}))},getValues:u,setReadonly:function(e){return i.forEach((function(t){return t.element.readOnly=e}))}}]},w=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],u=0,a=i.length;u<a;u++,o++)r[o]=i[u];return r};!function(e){e[e.FLOAT_VEC2=35664]="FLOAT_VEC2",e[e.FLOAT_VEC3=35665]="FLOAT_VEC3",e[e.FLOAT_VEC4=35666]="FLOAT_VEC4",e[e.FLOAT_MAT4=35676]="FLOAT_MAT4"}(r||(r={}));var M,S=function(){function e(e,t,n,r){this.context=e,this.name=n,this.type=r,this.attachToProgram(t)}return e.prototype.attachToProgram=function(e){var t=this.context.getUniformLocation(e,this.name);this.setter=I(this.type,this.context,t)},e.prototype.setValue=function(e){this.value=e},e.prototype.setUniform=function(){null!==this.value&&this.setter(this.value)},e.prototype.getUniformType=function(){return this.type},e.prototype.getUniformName=function(){return this.name},e.prototype.dispose=function(){},e}(),I=function(e,t,n){switch(e){case r.FLOAT_VEC2:return function(e){return t.uniform2f.apply(t,w([n],e))};case r.FLOAT_VEC3:return function(e){return t.uniform3f.apply(t,w([n],e))};case r.FLOAT_VEC4:return function(e){return t.uniform4f.apply(t,w([n],e))};case r.FLOAT_MAT4:return function(e){return t.uniformMatrix4fv(n,!1,e)};default:E(e)}},L=function(){function e(e){this.keySelector=e,this.map=new Map}return e.prototype.get=function(e){return this.map.get(this.keySelector(e))},e.prototype.set=function(e,t){this.map.set(this.keySelector(e),t)},e.prototype.has=function(e){return this.map.has(this.keySelector(e))},e.prototype.entriesStrKey=function(){return Array.from(this.map.entries())},e.prototype.deleteStrKey=function(e){this.map.delete(e)},e.prototype.delete=function(e){this.map.delete(this.keySelector(e))},e.prototype.clear=function(){this.map.clear()},e}(),C=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){var t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}))},F=function(e,t){var n=e.indexOf(t);n>-1&&e.splice(n,1)},P=function(e,t){return e.substring(0,e.length-t)},O=function(){function e(e){this.value=e,this.observers=[]}return e.prototype.attach=function(e){this.observers.push(e)},e.prototype.detach=function(e){F(this.observers,e)},e.prototype.detachAll=function(){this.observers.length=0},e.prototype.setValue=function(e){this.value=e,this.notify()},e.prototype.getValue=function(){return this.value},e.prototype.forceNotify=function(){this.notify()},e.prototype.notify=function(){if(null!==this.value){var e=this.value;this.observers.forEach((function(t){return t(e)}))}},e}(),_=function(){var e=document.createElement("div");return e.className="unsupported-error",e.innerText="Not supported uniform",e},V=function(){return(V=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},B=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],u=0,a=i.length;u<a;u++,o++)r[o]=i[u];return r},R=function(e){return e.name+";"+e.type},N=new L(R),D=function(e,t,n,r){var o,i,u=n.map((function(n){var o=V({},n),i=N.get(o);if(i)return i.uniformInfo.attachToProgram(t),{key:o,value:i};var u=new S(e,t,n.name,n.type),a=r.filter((function(e){return e.type===u.getUniformType()})),c=function(e){return u.setValue(e)},s=a.length?j(B([U(u)],k(a,u)),c):H(u,c),f=s.element,l=s.dispose;return{key:o,value:{component:b(f,n.name),uniformInfo:u,dispose:function(){null==l||l()}}}}));return i=(o=u).map((function(e){return R(e.key)})),N.entriesStrKey().filter((function(e){return!i.includes(e[0])})).forEach((function(e){N.deleteStrKey(e[0])})),o.forEach((function(e){N.has(e.key)||N.set(e.key,e.value)})),u.map((function(e){return e.value}))},U=function(e){return V({id:"custom",display:"Custom"},H(e))},k=function(e,t){return e.map((function(e){var n=Y(t.getUniformType(),!1,e.value);return{id:C(),element:n,display:e.name,value:e.value}}))},j=function(e,t){var n=null;return{element:x("column-with-gap",B([y(e,(function(r){null==n||n();var o=e.find((function(e){return e.id===r})),i=function(e){return t(e)};o.value.attach(i),i(o.value.getValue()),n=function(){return o.value.detach(i)}}))],e.map((function(e){return e.element})))),dispose:function(){return null==n?void 0:n()}}},H=function(e,t){var n=function(e){switch(e){case r.FLOAT_VEC2:return[1,1];case r.FLOAT_VEC3:return[1,1,1];case r.FLOAT_VEC4:return[1,1,1,1];case r.FLOAT_MAT4:return[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];default:E(e)}}(e.getUniformType()),o=new O(n);return t&&(o.attach((function(e){return t(e)})),t(n)),{element:Y(e.getUniformType(),!0,o),value:o,dispose:function(){return o.detachAll()}}},Y=function(e,t,n){switch(e){case r.FLOAT_VEC2:return z(2,n,t);case r.FLOAT_VEC3:return z(3,n,t);case r.FLOAT_VEC4:return z(4,n,t);case r.FLOAT_MAT4:return K(4,n,t);default:return _()}},z=function(e,t,n){var r=T((function(e){t.setValue(e)}),1,e),o=r[0],i=r[1];if(i.setValues(t.getValue()),!n){t.attach((function(e){return i.setValues(e)}))}return o},K=function(e,t,n){var r=function(e,t){return T(t,e,e)}(e,(function(e){t.setValue(e)})),o=r[0],i=r[1];if(i.setValues(t.getValue()),!n){t.attach((function(e){return i.setValues(e)}))}return o},G=function(e,t,n){var r=e.createShader(t);if(e.shaderSource(r,n),e.compileShader(r),e.getShaderParameter(r,e.COMPILE_STATUS))return r;var o=e.getShaderInfoLog(r);return e.deleteShader(r),{error:o}},W=function(e,t,n){var r=e.createProgram();if(e.attachShader(r,t),e.attachShader(r,n),e.linkProgram(r),e.getProgramParameter(r,e.LINK_STATUS))return r;throw e.deleteProgram(r),new Error("Creating program failed: "+e.getProgramInfoLog(r))};!function(e){e[e.FLOAT_VEC3=35665]="FLOAT_VEC3",e[e.FLOAT_VEC4=35666]="FLOAT_VEC4"}(M||(M={}));var X=function(){function e(e,t,n,r){this.context=e,this.name=n,this.type=r,this.count=0,this.attachToProgram(t),this.buffer=e.createBuffer()}return e.prototype.attachToProgram=function(e){this.location=this.context.getAttribLocation(e,this.name)},e.prototype.setValue=function(e){this.count=e.length,this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffer);var t=[].concat.apply([],e);this.context.bufferData(this.context.ARRAY_BUFFER,new Float32Array(t),this.context.STATIC_DRAW)},e.prototype.setAttributeBuffer=function(){if(null!==this.buffer){this.context.enableVertexAttribArray(this.location),this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffer);var e=J(this.type),t=this.context.FLOAT;this.context.vertexAttribPointer(this.location,e,t,!1,0,0)}},e.prototype.getAttributeBufferType=function(){return this.type},e.prototype.getCount=function(){return this.count},e.prototype.deleteBuffer=function(){this.context.deleteBuffer(this.buffer),this.buffer=null},e}(),J=function(e){switch(e){case M.FLOAT_VEC3:return 3;case M.FLOAT_VEC4:return 4;default:E(e)}},q=function(){return(q=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},Q=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],u=0,a=i.length;u<a;u++,o++)r[o]=i[u];return r},Z=function(e){return e.name+";"+e.type},$=new L(Z),ee=function(e,t,n,r){var o,i,u=n.map((function(n){var o=q({},n),i=$.get(o);if(i)return i.attributeBufferInfo.attachToProgram(t),{key:o,value:i};var u=new X(e,t,n.name,n.type),a=r.filter((function(e){return e.type===u.getAttributeBufferType()})),c=function(e){return u.setValue(e)},s=a.length?re(Q([te(u)],ne(a,u)),c):oe(u,c),f=s.element,l=s.dispose;return{key:o,value:{component:b(f,n.name),attributeBufferInfo:u,dispose:function(){u.deleteBuffer(),null==l||l()}}}}));return i=(o=u).map((function(e){return Z(e.key)})),$.entriesStrKey().filter((function(e){return!i.includes(e[0])})).forEach((function(e){e[1].dispose(),$.deleteStrKey(e[0])})),o.forEach((function(e){$.has(e.key)||$.set(e.key,e.value)})),u.map((function(e){return e.value}))},te=function(e){return q({id:"custom",display:"Custom"},oe(e))},ne=function(e,t){return e.map((function(e){var n=ie(t.getAttributeBufferType(),!1,e.value);return{id:C(),element:n,display:e.name,value:e.value}}))},re=function(e,t){var n=null;return{element:x("column-with-gap",Q([y(e,(function(r){null==n||n();var o=e.find((function(e){return e.id===r})),i=function(e){return t(e)};o.value.attach(i),i(o.value.getValue()),n=function(){return o.value.detach(i)}}))],e.map((function(e){return e.element})))),dispose:function(){return null==n?void 0:n()}}},oe=function(e,t){var n=(e.getAttributeBufferType(),[[0,0,0,1],[0,.5,0,1],[.9,0,0,1],[0,.5,0,1],[.7,0,0,1],[.7,.5,0,1]]),r=new O(n);return t&&(r.attach((function(e){return t(e)})),t(n)),{element:ie(e.getAttributeBufferType(),!0,r),value:r,dispose:function(){return r.detachAll()}}},ie=function(e,t,n){switch(e){case M.FLOAT_VEC4:return ue(4,n,t);default:return _()}},ue=function(e,t,n){var r=document.createElement("input");if(r.className="edit-input",r.disabled=!n,!n){t.attach((function(e){return r.value=JSON.stringify(e)}))}return r.value=JSON.stringify(t.getValue()),r.oninput=function(){try{var e=JSON.parse(r.value);if(Array.isArray(e))e.every((function(e){return!!Array.isArray(e)&&4===e.length}));else;t.setValue(e)}catch(e){console.log("this is not a json")}},r},ae=function(e){var t=document.createElement("canvas");t.className=e;var n,r,o=t.getContext("webgl");if(n=t,r=function(e){t.width=e.width,t.height=e.height},new ResizeObserver((function(e){var t=e.find((function(e){return e.target===n}));if(t){var o=t.target.getBoundingClientRect();r({x:o.x,y:o.y,width:o.width,height:o.height})}})).observe(n),!o)throw new Error("Unable to create webgl context");return[t,{context:o}]},ce=function(){function e(){var e=this;this.eventListeners=[],window.addEventListener("message",(function(t){e.eventListeners.forEach((function(e){return e(t.data)}))}))}return e.prototype.getShaderDocuments=function(){var e=this,t=C();return a.postMessage({type:"getShaderDocuments",id:t}),new Promise((function(n){var r=function(o){"getShaderDocuments"===o.type&&o.id===t&&(n(o.payload.files),e.removeListener(r))};e.eventListeners.push(r)}))},e.prototype.getDocumentText=function(e){var t=this,n=C();return a.postMessage({type:"getDocumentText",id:n,payload:{fileName:e}}),new Promise((function(e){var r=function(o){"getDocumentText"===o.type&&o.id===n&&(e(o.payload.text),t.removeListener(r))};t.eventListeners.push(r)}))},e.prototype.subscribeToDocumentSave=function(e,t){var n=this;a.postMessage({type:"subscribeToDocumentTextChange",payload:{fileName:e}});var r=function(n){"onDocumentTextChange"===n.type&&n.payload.filePath===e&&t(n.payload.text)};return this.eventListeners.push(r),function(){n.removeListener(r),a.postMessage({type:"unsubscribeToDocumentTextChange",payload:{fileName:e}})}},e.prototype.removeListener=function(e){F(this.eventListeners,e)},e}(),se=function(e){return[].concat(e,e,e,e)},fe=new Map([["cube",{display:"Cube",positions:[[-.5,-.5,.5,1],[.5,-.5,.5,1],[.5,.5,.5,1],[-.5,.5,.5,1],[-.5,-.5,-.5,1],[-.5,.5,-.5,1],[.5,.5,-.5,1],[.5,-.5,-.5,1],[-.5,.5,-.5,1],[-.5,.5,.5,1],[.5,.5,.5,1],[.5,.5,-.5,1],[-.5,-.5,-.5,1],[.5,-.5,-.5,1],[.5,-.5,.5,1],[-.5,-.5,.5,1],[.5,-.5,-.5,1],[.5,.5,-.5,1],[.5,.5,.5,1],[.5,-.5,.5,1],[-.5,-.5,-.5,1],[-.5,-.5,.5,1],[-.5,.5,.5,1],[-.5,.5,-.5,1]],colors:function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],u=0,a=i.length;u<a;u++,o++)r[o]=i[u];return r}(se([1,1,1,1]),se([1,0,0,1]),se([0,1,0,1]),se([0,0,1,1]),se([1,1,0,1]),se([1,0,1,1])),indices:[0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23]}]]);console.log(fe);var le;!function(e){e.create=function(){var e=new Float32Array(16);return e[0]=1,e[5]=1,e[10]=1,e[15]=1,e},e.perspective=function(e,t,n,r,o){var i,u=1/Math.tan(t/2);return e[0]=u/n,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=u,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,null!=o&&o!==1/0?(i=1/(r-o),e[10]=(o+r)*i,e[14]=2*o*r*i):(e[10]=-1,e[14]=-2*r),e},e.lookAt=function(e,t,n,r){var o,i,u,a,c,s,f,l,h,p,d=t[0],v=t[1],m=t[2],y=r[0],g=r[1],b=r[2],x=n[0],A=n[1],E=n[2];return Math.abs(d-x)<1e-6&&Math.abs(v-A)<1e-6&&Math.abs(m-E)<1e-6?function(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}(e):(f=d-x,l=v-A,h=m-E,o=g*(h*=p=1/Math.hypot(f,l,h))-b*(l*=p),i=b*(f*=p)-y*h,u=y*l-g*f,(p=Math.hypot(o,i,u))?(o*=p=1/p,i*=p,u*=p):(o=0,i=0,u=0),a=l*u-h*i,c=h*o-f*u,s=f*i-l*o,(p=Math.hypot(a,c,s))?(a*=p=1/p,c*=p,s*=p):(a=0,c=0,s=0),e[0]=o,e[1]=a,e[2]=f,e[3]=0,e[4]=i,e[5]=c,e[6]=l,e[7]=0,e[8]=u,e[9]=s,e[10]=h,e[11]=0,e[12]=-(o*d+i*v+u*m),e[13]=-(a*d+c*v+s*m),e[14]=-(f*d+l*v+h*m),e[15]=1,e)},e.multiply=function(e,t,n){var r=t[0],o=t[1],i=t[2],u=t[3],a=t[4],c=t[5],s=t[6],f=t[7],l=t[8],h=t[9],p=t[10],d=t[11],v=t[12],m=t[13],y=t[14],g=t[15],b=n[0],x=n[1],A=n[2],E=n[3];return e[0]=b*r+x*a+A*l+E*v,e[1]=b*o+x*c+A*h+E*m,e[2]=b*i+x*s+A*p+E*y,e[3]=b*u+x*f+A*d+E*g,b=n[4],x=n[5],A=n[6],E=n[7],e[4]=b*r+x*a+A*l+E*v,e[5]=b*o+x*c+A*h+E*m,e[6]=b*i+x*s+A*p+E*y,e[7]=b*u+x*f+A*d+E*g,b=n[8],x=n[9],A=n[10],E=n[11],e[8]=b*r+x*a+A*l+E*v,e[9]=b*o+x*c+A*h+E*m,e[10]=b*i+x*s+A*p+E*y,e[11]=b*u+x*f+A*d+E*g,b=n[12],x=n[13],A=n[14],E=n[15],e[12]=b*r+x*a+A*l+E*v,e[13]=b*o+x*c+A*h+E*m,e[14]=b*i+x*s+A*p+E*y,e[15]=b*u+x*f+A*d+E*g,e}}(le||(le={}));var he=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function u(e){try{c(r.next(e))}catch(e){i(e)}}function a(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(u,a)}c((r=r.apply(e,t||[])).next())}))},pe=function(e,t){var n,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!(o=u.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=t.call(e,u)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},de=function(){return new Map([["localToProjected",{name:"Binding - LocalToProjected",type:r.FLOAT_MAT4,value:new O([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1])}]])};he(void 0,void 0,void 0,(function(){var e,t,n,r,o,i,a,c,p,d,v,y,E,T,w,S,I,L,C,F,_,V,B,R,N,U,k,j,H,Y,z,K,X,J;return pe(this,(function(q){var Q,Z,$;return e=new ce,t=s(),n=document.getElementById("viewer"),r=x("viewer-options"),o=x("viewer-shader-options"),i=x("viewer-content shader-errors"),a=ae("viewer-content"),c=a[0],p=a[1],d=new Map([["positions",{name:"Binding - Mesh positions",type:M.FLOAT_VEC4,value:new O([])}],["colors",{name:"Binding - Mesh colors",type:M.FLOAT_VEC4,value:new O([])}]]),v=de(),y={drawMode:"arrays"},E={longitude:1,latitude:1,radius:2},new u(c,(function(){return E}),(function(e){E=e;var t=45*Math.PI/180,n=c.clientWidth/c.clientHeight,r=le.create();le.perspective(r,t,n,.1,100);var o=le.create(),i=function(e){var t=e.radius*Math.sin(e.latitude),n=e.radius*Math.cos(e.latitude),r=n*Math.cos(e.longitude);return{x:n*Math.sin(e.longitude),y:t,z:r}}(E);le.lookAt(o,[i.x,i.y,i.z],[0,0,0],[0,1,0]);var u=le.create();le.multiply(u,r,o),v.get("localToProjected").value.setValue(u)})),n.appendChild(c),n.appendChild(i),n.appendChild(r),T=function(e){c.style.visibility="canvas"===e?"visible":"collapse",i.style.visibility="errors"===e?"visible":"collapse"},w=function(){e.getShaderDocuments().then((function(e){var n=e.map((function(e){return{id:e.filePath,display:e.fileName}}));N.setItems(n),t.vertexFilePath&&n.some((function(e){return e.id===t.vertexFilePath}))&&N.setSelectedItemById(t.vertexFilePath),j.setItems(n),t.fragmentFilePath&&n.some((function(e){return e.id===t.fragmentFilePath}))&&j.setSelectedItemById(t.fragmentFilePath)}))},F=null,_=function(e){var t=fe.get(e),n=t.positions,r=t.colors;d.get("positions").value.setValue(n),d.get("colors").value.setValue(r)},V=function(){o.innerHTML="";var e=p.context;if(C&&L){var t=function(e,t,n){var r=G(e,e.VERTEX_SHADER,t),o=G(e,e.FRAGMENT_SHADER,n),i=void 0;A(r,"error")&&(i=P(r.error,1));var u=void 0;return A(o,"error")&&(u=P(o.error,1)),i||u?[i,u]:W(e,r,o)}(e,L,C);if(Array.isArray(t))T("errors"),i.innerText=function(e){var t=e[0],n=e[1],r=[];return t&&r.push("VERTEX SHADER:",t),n&&r.push("FRAGMENT SHADER:",n),r.join("\r\n")}(t);else{T("canvas");var n=t,r=function(e,t){for(var n=e.getProgramParameter(t,e.ACTIVE_UNIFORMS),r=[],o=0;o<n;++o){var i=e.getActiveUniform(t,o);r.push({name:i.name,type:i.type})}return r}(e,n),u=function(e,t){for(var n=e.getProgramParameter(t,e.ACTIVE_ATTRIBUTES),r=[],o=0;o<n;++o){var i=e.getActiveAttrib(t,o);r.push({name:i.name,type:i.type})}return r}(e,n),a=D(e,n,r,Array.from(v.values()));a.forEach((function(e){return o.appendChild(e.component)}));var c=ee(e,n,u,Array.from(d.values()));c.forEach((function(e){return o.appendChild(e.component)}));var s=a.map((function(e){return e.uniformInfo})),f=c.map((function(e){return e.attributeBufferInfo})),h=new l(e);h.setValue([0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23]),null!==F&&cancelAnimationFrame(F);var m=function(){!function(e,t,n,r){e.useProgram(t),e.viewport(0,0,e.canvas.width,e.canvas.height),e.clearColor(0,0,0,1),e.clearDepth(1),e.enable(e.DEPTH_TEST),e.depthFunc(e.LEQUAL),e.clear(e.COLOR_BUFFER_BIT|e.DEPTH_BUFFER_BIT),n.uniformInfos.forEach((function(e){return e.setUniform()})),n.attributeBufferInfos.forEach((function(e){return e.setAttributeBuffer()}));var o=e.TRIANGLES;if("arrays"===r.drawMode){var i=Math.min.apply(Math,n.attributeBufferInfos.map((function(e){return e.getCount()})));e.drawArrays(o,0,i)}else n.indexBufferInfo.setIndexBuffer(),e.drawElements(o,n.indexBufferInfo.getCount(),e.UNSIGNED_SHORT,0)}(e,n,{uniformInfos:s,attributeBufferInfos:f,indexBufferInfo:h},y),F=requestAnimationFrame(m)};m()}}else T("none")},r.appendChild(x("viewer-shaders-title",[(Q=h,Z="",$=document.createElement("h3"),$.textContent=Q,$.className=Z+" section-title",{element:$}).element,g("Sync","viewer-refresh-button",w).element])),B=m((function(t){return he(void 0,void 0,void 0,(function(){var n;return pe(this,(function(r){switch(r.label){case 0:return null==S||S(),t&&(S=e.subscribeToDocumentSave(t.id,(function(e){L=e,V()}))),t?[4,e.getDocumentText(t.id)]:[3,2];case 1:return n=r.sent(),[3,3];case 2:n="",r.label=3;case 3:return L=n,f({vertexFilePath:t?t.id:null}),V(),[2]}}))}))})),R=B[0],(N=B[1]).setSelectedItemById(t.vertexFilePath),r.appendChild(b(R,"Vertex Shader")),U=m((function(t){return he(void 0,void 0,void 0,(function(){var n;return pe(this,(function(r){switch(r.label){case 0:return null==I||I(),t&&(I=e.subscribeToDocumentSave(t.id,(function(e){C=e,V()}))),t?[4,e.getDocumentText(t.id)]:[3,2];case 1:return n=r.sent(),[3,3];case 2:n="",r.label=3;case 3:return C=n,f({fragmentFilePath:t?t.id:null}),V(),[2]}}))}))})),k=U[0],(j=U[1]).setSelectedItemById(t.fragmentFilePath),r.appendChild(b(k,"Fragment Shader")),H=m((function(e){return e&&_(e.id)}),void 0,{emptyItem:!1}),Y=H[0],(z=H[1]).setItems(Array.from(fe.entries()).map((function(e){return{id:e[0],display:e[1].display}}))),z.setSelectedItemByIndex(0),r.appendChild(b(Y,"Mesh")),K=m((function(e){e&&(y.drawMode=e.id,f({drawMode:e.id}))}),void 0,{emptyItem:!1}),X=K[0],(J=K[1]).setItems([{id:"arrays",display:"Arrays"},{id:"elements",display:"Elements"}]),J.setSelectedItemById(t.drawMode),r.appendChild(b(X,"Draw mode")),r.appendChild(o),w(),[2]}))}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvdXRpbHMvd2ViZ2wvdW5pZm9ybS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL3NyYy91dGlscy9jYW1lcmFNYW5pcHVsYXRvci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2NvbW11bmljYXRpb24vdnNjb2RlQXBpLnRzIiwid2VicGFjazovLy8uL3NyYy9jb21tb24vc3RhdGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvdXRpbHMvd2ViZ2wvaW5kZXhCdWZmZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbW1vbi90cmFuc2xhdGlvbnMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvY29tcG9uZW50cy9kcm9wZG93bi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL3NyYy9jb21wb25lbnRzL2J1dHRvbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL3NyYy9jb21wb25lbnRzL3dyYXBwZXJzLnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvc3JjL3V0aWxzL3R5cGVHdWFyZHMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvY29tcG9uZW50cy9oZWxwZXJzLnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvc3JjL3V0aWxzL3dlYmdsL2F0dHJpYnV0ZUJ1ZmZlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL3NyYy91dGlscy9jb21wb3NpdGVLZXlNYXAudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbW1vbi91dWlkLnRzIiwid2VicGFjazovLy8uL3NyYy9jb21tb24vYXJyYXkudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvdXRpbHMvb2JzZXJ2YWJsZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL3NyYy91dGlscy93ZWJnbC9jb21tb24udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvdXRpbHMvd2ViZ2wvdW5pZm9ybUNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL3NyYy9jb21wb25lbnRzL2lucHV0VmVjdG9yLnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvc3JjL2NvbXBvbmVudHMvaW5wdXRNYXRyaXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvdXRpbHMvd2ViZ2wvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvdXRpbHMvd2ViZ2wvYXR0cmlidXRlQnVmZmVyQ29tcG9uZW50LnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvc3JjL2NvbXBvbmVudHMvd2ViZ2xDYW52YXMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvdXRpbHMvaHRtbC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2NvbW11bmljYXRpb24vdmlld2VyRW5kcG9pbnQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvbWVzaGVzLnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvc3JjL3V0aWxzL21hdGgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvY29tcG9uZW50cy9oZWFkZXIudHMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJVbmlmb3JtVHlwZSIsImNsYW1wUmFkaXVzIiwicmFkaXVzIiwiTWF0aCIsIm1pbiIsIm1heCIsImVsZW1lbnQiLCJwb3NpdGlvblByb3ZpZGVyIiwib25Qb3NpdGlvbkNoYW5nZSIsInBvaW50ZXJQb3NpdGlvbiIsIngiLCJ5IiwiZXZlbnRMaXN0ZW5lcnMiLCJNYXAiLCJpc01vdmluZyIsImRpc3BhdGNoQWN0aW9uIiwiYWN0aW9uIiwibmV3Vmlld3BvcnQiLCJwb3NpdGlvbiIsInR5cGUiLCJsYXRpdHVkZSIsImRlbHRhTGF0aXR1ZGUiLCJQSSIsImxvbmdpdHVkZSIsImRlbHRhTG9uZ2l0dWRlIiwicmVkdWNlciIsIm9uTW91c2VEb3duIiwiZSIsImJ1dHRvbiIsIm9mZnNldFgiLCJvZmZzZXRZIiwib25Nb3VzZU1vdmUiLCJvbk1vdXNlVXAiLCJvbk1vdXNlTGVhdmUiLCJvbldoZWVsIiwiZGVsdGFZIiwidGhpcyIsInJlZ2lzdGVyRXZlbnQiLCJkaXNwb3NlIiwiZm9yRWFjaCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJoYW5kbGVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsInNldCIsInZzY29kZUFwaSIsImFjcXVpcmVWc0NvZGVBcGkiLCJkZWZhdWx0U3RhdGUiLCJ2ZXJ0ZXhGaWxlUGF0aCIsImZyYWdtZW50RmlsZVBhdGgiLCJkcmF3TW9kZSIsImdldFN0YXRlIiwic2V0U3RhdGUiLCJuZXdTdGF0ZSIsImFzc2lnbiIsImNvbnRleHQiLCJjb3VudCIsImJ1ZmZlciIsImNyZWF0ZUJ1ZmZlciIsInNldFZhbHVlIiwibmV3VmFsdWUiLCJsZW5ndGgiLCJiaW5kQnVmZmVyIiwiRUxFTUVOVF9BUlJBWV9CVUZGRVIiLCJidWZmZXJEYXRhIiwiVWludDE2QXJyYXkiLCJTVEFUSUNfRFJBVyIsInNldEluZGV4QnVmZmVyIiwiZ2V0Q291bnQiLCJkZWxldGVCdWZmZXIiLCJ0cmFuc2xhdGlvbnMiLCJkZWZhdWx0T3B0aW9ucyIsImVtcHR5SXRlbSIsImNyZWF0ZURyb3Bkb3duIiwib25DaGFuZ2UiLCJjbGFzc05hbWUiLCJvcHRpb25zIiwiY29tYmluZWRPcHRpb25zIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2VsZWN0ZWRJdGVtIiwiaXRlbUVsZW1lbnRzIiwic2V0U2VsZWN0ZWRJdGVtIiwiaXRlbSIsIm9uY2hhbmdlIiwiZm91bmRFbGVtZW50IiwiZmluZCIsImlkIiwic2V0U2VsZWN0ZWRJdGVtQnlJZCIsImllIiwic2VsZWN0ZWQiLCJzZXRJdGVtcyIsIml0ZW1zIiwiaW5uZXJIVE1MIiwiZGlzcGxheSIsIm9wdGlvbiIsInRleHRDb250ZW50IiwiYXBwZW5kQ2hpbGQiLCJwdXNoIiwiZ2V0SXRlbXMiLCJtYXAiLCJzZXRTZWxlY3RlZEl0ZW1CeUluZGV4IiwiaW5kZXgiLCJnZXRTZWxlY3RlZEl0ZW0iLCJjbGVhclNlbGVjdGlvbiIsImNyZWF0ZUVsZW1lbnRzRHJvcGRvd24iLCJlbGVtZW50cyIsIm9lIiwiY2xhc3NMaXN0IiwiYWRkIiwicmVtb3ZlIiwib3B0aW9uc0VsZW1lbnQiLCJvcHRpb25zQ29udHJvbGxlciIsImNyZWF0ZUJ1dHRvbiIsInRleHQiLCJvbkNsaWNrIiwib25jbGljayIsIndpdGhMYWJlbCIsIndyYXBwZXIiLCJsYWJlbCIsImNyZWF0ZURpdiIsImNoaWxkcmVuIiwiZGl2IiwiaGFzUHJvcGVydHkiLCJvYmoiLCJwcm9wIiwiYXNzZXJ0TmV2ZXIiLCJFcnJvciIsIkpTT04iLCJzdHJpbmdpZnkiLCJjcmVhdGVNdWx0aU51bWJlcklucHV0Iiwicm93cyIsImNvbHVtbnMiLCJpbnB1dE9wdGlvbnMiLCJpbnB1dEdyaWQiLCJnZXRWYWx1ZXMiLCJyb3ciLCJpbnB1dFJvdyIsImNvbHVtbiIsImlucHV0IiwiaXRlbUVsZW1lbnQiLCJ0b1N0cmluZyIsIm9uaW5wdXQiLCJOdW1iZXIiLCJjb25zb2xlIiwibG9nIiwic2V0VmFsdWVzIiwibmV3VmFsdWVzIiwic2V0UmVhZG9ubHkiLCJyZWFkb25seSIsInJlYWRPbmx5IiwiQXR0cmlidXRlQnVmZmVyVHlwZSIsInByb2dyYW0iLCJhdHRhY2hUb1Byb2dyYW0iLCJsb2NhdGlvbiIsImdldFVuaWZvcm1Mb2NhdGlvbiIsInNldHRlciIsImNyZWF0ZVVuaWZvcm1TZXR0ZXIiLCJzZXRVbmlmb3JtIiwiZ2V0VW5pZm9ybVR5cGUiLCJnZXRVbmlmb3JtTmFtZSIsIkZMT0FUX1ZFQzIiLCJ1bmlmb3JtMmYiLCJGTE9BVF9WRUMzIiwidW5pZm9ybTNmIiwiRkxPQVRfVkVDNCIsInVuaWZvcm00ZiIsIkZMT0FUX01BVDQiLCJ1bmlmb3JtTWF0cml4NGZ2Iiwia2V5U2VsZWN0b3IiLCJoYXMiLCJlbnRyaWVzU3RyS2V5IiwiQXJyYXkiLCJmcm9tIiwiZW50cmllcyIsImRlbGV0ZVN0cktleSIsImRlbGV0ZSIsImNsZWFyIiwidXVpZHY0IiwicmVwbGFjZSIsInJhbmRvbSIsImFycmF5IiwiaW5kZXhPZiIsInNwbGljZSIsInJlbW92ZUxhc3QiLCJzdWJzdHJpbmciLCJvYnNlcnZlcnMiLCJhdHRhY2giLCJvYnNlcnZlciIsImRldGFjaCIsImRldGFjaEFsbCIsIm5vdGlmeSIsImdldFZhbHVlIiwiZm9yY2VOb3RpZnkiLCJjcmVhdGVFbGVtZW50Tm90U3VwcG9ydGVkIiwiaW5uZXJUZXh0IiwidW5pZm9ybUNvbXBvbmVudENhY2hlIiwiQ29tcG9zaXRlS2V5TWFwIiwiY3JlYXRlVW5pZm9ybUNvbXBvbmVudHMiLCJ1bmlmb3JtcyIsInVuaWZvcm1CaW5kaW5ncyIsIm5ld1ZhbHVlc1N0cktleXMiLCJjb21wb25lbnRzIiwidW5pZm9ybSIsImZyb21DYWNoZSIsInVuaWZvcm1JbmZvIiwiVW5pZm9ybUluZm8iLCJhcHBsaWNhYmxlQmluZGluZ3MiLCJmaWx0ZXIiLCJiIiwidXBkYXRlVW5pZm9ybSIsImNyZWF0ZVNlbGVjdGlvbkNvbXBvbmVudCIsImNyZWF0ZUN1c3RvbU9wdGlvbiIsImNyZWF0ZUJpbmRpbmdPcHRpb25zIiwiY3JlYXRlRWRpdGFibGVDb21wb25lbnQiLCJjb21wb25lbnQiLCJ2IiwiaW5jbHVkZXMiLCJudyIsInVjIiwiYmluZGluZyIsImNyZWF0ZUVsZW1lbnRGb3JUeXBlIiwiY2FsbGJhY2siLCJpbml0aWFsVmFsdWUiLCJnZXREZWZhdWx0VmFsdWUiLCJjdXN0b21WYWx1ZSIsInVuaWZvcm1UeXBlIiwiZWRpdGFibGUiLCJjdXJyZW50VmFsdWUiLCJjcmVhdGVFbGVtZW50VmVjdG9yIiwiY3JlYXRlRWxlbWVudE1hdHJpeCIsInNpemUiLCJjdXN0b21FbGVtZW50IiwiY3VzdG9tQ29udHJvbGxlciIsImNyZWF0ZU1hdHJpeCIsImNvbXBpbGVTaGFkZXIiLCJyZW5kZXJpbmdDb250ZXh0Iiwic291cmNlIiwic2hhZGVyIiwiY3JlYXRlU2hhZGVyIiwic2hhZGVyU291cmNlIiwiZ2V0U2hhZGVyUGFyYW1ldGVyIiwiQ09NUElMRV9TVEFUVVMiLCJlcnJvciIsImdldFNoYWRlckluZm9Mb2ciLCJkZWxldGVTaGFkZXIiLCJjcmVhdGVQcm9ncmFtIiwidmVydGV4U2hhZGVyIiwiZnJhZ21lbnRTaGFkZXIiLCJhdHRhY2hTaGFkZXIiLCJsaW5rUHJvZ3JhbSIsImdldFByb2dyYW1QYXJhbWV0ZXIiLCJMSU5LX1NUQVRVUyIsImRlbGV0ZVByb2dyYW0iLCJnZXRQcm9ncmFtSW5mb0xvZyIsImdldEF0dHJpYkxvY2F0aW9uIiwiQVJSQVlfQlVGRkVSIiwiZmxhdHRlbiIsImNvbmNhdCIsIkZsb2F0MzJBcnJheSIsInNldEF0dHJpYnV0ZUJ1ZmZlciIsImVuYWJsZVZlcnRleEF0dHJpYkFycmF5IiwiZ2V0TnVtQ29tcG9uZW50cyIsIkZMT0FUIiwidmVydGV4QXR0cmliUG9pbnRlciIsImdldEF0dHJpYnV0ZUJ1ZmZlclR5cGUiLCJidWZmZXJUeXBlIiwiY29tcG9uZW50Q2FjaGUiLCJjcmVhdGVBdHRyaWJ1dGVCdWZmZXJDb21wb25lbnRzIiwiYXR0cmlidXRlQnVmZmVycyIsImF0dHJpYnV0ZUJ1ZmZlckJpbmRpbmdzIiwiYXR0cmlidXRlQnVmZmVyIiwiYXR0cmlidXRlQnVmZmVySW5mbyIsIkF0dHJpYnV0ZUJ1ZmZlckluZm8iLCJ1cGRhdGVCdWZmZXIiLCJhdHRyaWJ1dGVCdWZmZXJUeXBlIiwiY3JlYXRlRWxlbWVudEFycmF5IiwiaXRlbVNpemUiLCJkaXNhYmxlZCIsInJlc3VsdCIsInBhcnNlIiwiaXNBcnJheSIsImV2ZXJ5IiwiY3JlYXRlV2ViR0xDYW52YXMiLCJjYW52YXMiLCJnZXRDb250ZXh0IiwicmVjdCIsIndpZHRoIiwiaGVpZ2h0IiwiUmVzaXplT2JzZXJ2ZXIiLCJvYnNlcnZlckVudHJ5IiwidGFyZ2V0IiwiZG9tUmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIm9ic2VydmUiLCJ3aW5kb3ciLCJldmVudCIsImxpc3RlbmVyIiwiZGF0YSIsImdldFNoYWRlckRvY3VtZW50cyIsIm1lc3NhZ2VJZCIsInBvc3RNZXNzYWdlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJtZXNzYWdlIiwicGF5bG9hZCIsImZpbGVzIiwicmVtb3ZlTGlzdGVuZXIiLCJnZXREb2N1bWVudFRleHQiLCJmaWxlTmFtZSIsInN1YnNjcmliZVRvRG9jdW1lbnRTYXZlIiwiZmlsZVBhdGgiLCJyZXBlYXQ0VGltZXMiLCJtZXNoZXMiLCJwb3NpdGlvbnMiLCJjb2xvcnMiLCJpbmRpY2VzIiwibWF0NCIsIm91dCIsInBlcnNwZWN0aXZlIiwiZm92eSIsImFzcGVjdCIsIm5lYXIiLCJmYXIiLCJuZiIsImYiLCJ0YW4iLCJJbmZpbml0eSIsImxvb2tBdCIsImV5ZSIsImNlbnRlciIsInVwIiwieDAiLCJ4MSIsIngyIiwieTAiLCJ5MSIsInkyIiwiejAiLCJ6MSIsInoyIiwibGVuIiwiZXlleCIsImV5ZXkiLCJleWV6IiwidXB4IiwidXB5IiwidXB6IiwiY2VudGVyeCIsImNlbnRlcnkiLCJjZW50ZXJ6IiwiYWJzIiwiaWRlbnRpdHkzIiwiaHlwb3QiLCJtdWx0aXBseSIsImEiLCJhMDAiLCJhMDEiLCJhMDIiLCJhMDMiLCJhMTAiLCJhMTEiLCJhMTIiLCJhMTMiLCJhMjAiLCJhMjEiLCJhMjIiLCJhMjMiLCJhMzAiLCJhMzEiLCJhMzIiLCJhMzMiLCJiMCIsImIxIiwiYjIiLCJiMyIsImNyZWF0ZVVuaWZvcm1CaW5kaW5ncyIsInZpZXdlckVuZHBvaW50Iiwidmlld2VyU3RhdGUiLCJ2aWV3ZXIiLCJnZXRFbGVtZW50QnlJZCIsInZpZXdlck9wdGlvbnMiLCJzaGFkZXJPcHRpb25zIiwic2hhZGVyQ29tcGlsYXRpb25FcnJvcnMiLCJ3ZWJHTENhbnZhcyIsIndlYkdMQ29udHJvbGxlciIsIm1lc2hBdHRyaWJ1dGVCaW5kaW5ncyIsImRyYXdPcHRpb25zIiwiY2FtZXJhUG9zaXRpb24iLCJDYW1lcmFQb3NpdGlvbk1hbmlwdWxhdG9yIiwibmV3UG9zaXRpb24iLCJmaWVsZE9mVmlldyIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwicHJvamVjdGlvbk1hdHJpeCIsIm1vZGVsVmlld01hdHJpeCIsInZlYyIsInNpbiIsImNvcyIsInoiLCJjYW1lcmFQb3NpdGlvblRvVmVjdG9yMyIsInJlcyIsInNob3dDb250ZW50IiwiY29udGVudCIsInN0eWxlIiwidmlzaWJpbGl0eSIsInN5bmNTaGFkZXJEb2N1bWVudHMiLCJ0aGVuIiwic2QiLCJ2ZXJ0ZXhEcm9wZG93bkNvbnRyb2xsZXIiLCJzb21lIiwiZnJhZ21lbnREcm9wZG93bkNvbnRyb2xsZXIiLCJhbmltYXRpb25GcmFtZUhhbmRsZSIsIm9uTWVzaENoYW5nZWQiLCJvblNoYWRlckNvbnRlbnRDaGFuZ2VkIiwic2VsZWN0ZWRGcmFnbWVudENvbnRlbnQiLCJzZWxlY3RlZFZlcnRleENvbnRlbnQiLCJ2ZXJ0ZXhTaGFkZXJDb250ZW50IiwiZnJhZ21lbnRTaGFkZXJDb250ZW50IiwiVkVSVEVYX1NIQURFUiIsIkZSQUdNRU5UX1NIQURFUiIsInZlcnRleEVycm9yIiwidW5kZWZpbmVkIiwiZnJhZ21lbnRFcnJvciIsImNvbXBpbGVTaGFkZXJzRnJvbVNvdXJjZSIsInZlcnRleFNoYWRlckVycm9ycyIsImZyYWdtZW50U2hhZGVyRXJyb3JzIiwiZXJyb3JzIiwiam9pbiIsImZvcm1hdFNoYWRlckNvbXBpbGVFcnJvcnMiLCJwcm9ncmFtVW5pZm9ybXMiLCJudW1Vbmlmb3JtcyIsIkFDVElWRV9VTklGT1JNUyIsImdldEFjdGl2ZVVuaWZvcm0iLCJnZXRQcm9ncmFtVW5pZm9ybXMiLCJwcm9ncmFtQXR0cmlidXRlQnVmZmVycyIsIm51bUF0dHJpYnV0ZUJ1ZmZlcnMiLCJBQ1RJVkVfQVRUUklCVVRFUyIsImdldEFjdGl2ZUF0dHJpYiIsImdldFByb2dyYW1BdHRyaWJ1dGVCdWZmZXJzIiwidW5pZm9ybUNvbXBvbmVudHMiLCJ2YWx1ZXMiLCJhdHRyaWJ1dGVCdWZmZXJDb21wb25lbnRzIiwiYWIiLCJhYmMiLCJJbmRleEJ1ZmZlckluZm8iLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInJlbmRlckluZm8iLCJ1c2VQcm9ncmFtIiwidmlld3BvcnQiLCJjbGVhckNvbG9yIiwiY2xlYXJEZXB0aCIsImVuYWJsZSIsIkRFUFRIX1RFU1QiLCJkZXB0aEZ1bmMiLCJMRVFVQUwiLCJDT0xPUl9CVUZGRVJfQklUIiwiREVQVEhfQlVGRkVSX0JJVCIsInVuaWZvcm1JbmZvcyIsInUiLCJhdHRyaWJ1dGVCdWZmZXJJbmZvcyIsInByaW1pdGl2ZVR5cGUiLCJUUklBTkdMRVMiLCJudW1FbGVtZW50cyIsImRyYXdBcnJheXMiLCJpbmRleEJ1ZmZlckluZm8iLCJkcmF3RWxlbWVudHMiLCJVTlNJR05FRF9TSE9SVCIsInJlbmRlclByb2dyYW0iLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJuZXdWZXJ0ZXgiLCJzZWxlY3RlZFZlcnRleEZpbGVXYXRjaGVyVW5zdWJzY3JpYmUiLCJuZXdDb250ZW50IiwidmVydGV4RHJvcGRvd25FbGVtZW50IiwibmV3RnJhZ21lbnQiLCJzZWxlY3RlZEZyYWdtZW50RmlsZVdhdGNoZXJVbnN1YnNjcmliZSIsImZyYWdtZW50RHJvcGRvd25FbGVtZW50IiwibWVzaERyb3Bkb3duRWxlbWVudCIsIm1lc2hEcm9wZG93bkNvbnRyb2xsZXIiLCJkcmF3TW9kZUVsZW1lbnQiLCJkcmF3TW9kZUNvbnRyb2xsZXIiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxLQVF2RHJCLEVBQW9Cc0IsRUFBSSxTQUFTRCxFQUFPRSxHQUV2QyxHQURVLEVBQVBBLElBQVVGLEVBQVFyQixFQUFvQnFCLElBQy9CLEVBQVBFLEVBQVUsT0FBT0YsRUFDcEIsR0FBVyxFQUFQRSxHQUE4QixpQkFBVkYsR0FBc0JBLEdBQVNBLEVBQU1HLFdBQVksT0FBT0gsRUFDaEYsSUFBSUksRUFBS1gsT0FBT1ksT0FBTyxNQUd2QixHQUZBMUIsRUFBb0JrQixFQUFFTyxHQUN0QlgsT0FBT0MsZUFBZVUsRUFBSSxVQUFXLENBQUVULFlBQVksRUFBTUssTUFBT0EsSUFDdEQsRUFB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QUFFRixTQUFVaUMsRUFBS0ksYUFFNUIrVSxFQUNBLENBQUU5VixXQUFXLElBUFJ1WixFQUFlLE1BQUVDLEVBQWtCLE1BU3ZCclksU0FBUyxDQUMxQixDQUFFSixHQUFJLFNBQVVPLFFBQVMsVUFDekIsQ0FBRVAsR0FBSSxXQUFZTyxRQUFTLGNBRTdCa1ksRUFBbUJ4WSxvQkFBb0JrUyxFQUFZeFUsVUFDbkQyVSxFQUFjNVIsWUFBWW9CLEVBQVUwVyxFQUFpQixjQUlyRGxHLEVBQWM1UixZQUFZNlIsR0FFMUJ3QixJIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XG4iLCJpbXBvcnQge1xyXG4gIE1hdHJpeDRBcnJheSxcclxuICBWZWN0b3IyQXJyYXksXHJcbiAgVmVjdG9yM0FycmF5LFxyXG4gIFZlY3RvcjRBcnJheSxcclxufSBmcm9tIFwiLi4vLi4vdHlwZXNcIjtcclxuaW1wb3J0IHsgYXNzZXJ0TmV2ZXIgfSBmcm9tIFwiLi4vdHlwZUd1YXJkc1wiO1xyXG5cclxuZXhwb3J0IGVudW0gVW5pZm9ybVR5cGUge1xyXG4gIEZMT0FUX1ZFQzIgPSAzNTY2NCxcclxuICBGTE9BVF9WRUMzID0gMzU2NjUsXHJcbiAgRkxPQVRfVkVDNCA9IDM1NjY2LFxyXG4gIEZMT0FUX01BVDQgPSAzNTY3NixcclxuICAvL1NBTVBMRVJfMkQgPSAzNTY3OCxcclxufVxyXG5cclxuLy81MTIwIChCWVRFKSwgNTEyMSAoVU5TSUdORURfQllURSksIDUxMjIgKFNIT1JUKSwgNTEyMyAoVU5TSUdORURfU0hPUlQpLCA1MTI0IChJTlQpLFxyXG4vLyA1MTI1IChVTlNJR05FRF9JTlQpLCA1MTI2IChGTE9BVCksIDM1NjY0IChGTE9BVF9WRUMyKSxcclxuLy8gLCAzNTY2NyAoSU5UX1ZFQzIpLCAzNTY2OCAoSU5UX1ZFQzMpLCAzNTY2OSAoSU5UX1ZFQzQpLCAzNTY3MCAoQk9PTCksIDM1NjcxIChCT09MX1ZFQzIpLCAzNTY3MiAoQk9PTF9WRUMzKSwgMzU2NzMgKEJPT0xfVkVDNCksIDM1Njc0IChGTE9BVF9NQVQyKSwgMzU2NzUgKEZMT0FUX01BVDMpLFxyXG5cclxuZXhwb3J0IGNsYXNzIFVuaWZvcm1JbmZvPFQgPSBhbnk+IHtcclxuICBwcml2YXRlIHZhbHVlOiBUIHwgbnVsbDtcclxuICBwcml2YXRlIHNldHRlcjogKHZhbHVlOiBUKSA9PiB2b2lkO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgY29udGV4dDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LFxyXG4gICAgcHJvZ3JhbTogV2ViR0xQcm9ncmFtLFxyXG4gICAgcHJpdmF0ZSBuYW1lOiBzdHJpbmcsXHJcbiAgICBwcml2YXRlIHR5cGU6IFVuaWZvcm1UeXBlXHJcbiAgKSB7XHJcbiAgICB0aGlzLmF0dGFjaFRvUHJvZ3JhbShwcm9ncmFtKTtcclxuICB9XHJcblxyXG4gIGF0dGFjaFRvUHJvZ3JhbShwcm9ncmFtOiBXZWJHTFByb2dyYW0pIHtcclxuICAgIGNvbnN0IGxvY2F0aW9uID0gdGhpcy5jb250ZXh0LmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtLCB0aGlzLm5hbWUpO1xyXG4gICAgdGhpcy5zZXR0ZXIgPSBjcmVhdGVVbmlmb3JtU2V0dGVyKHRoaXMudHlwZSwgdGhpcy5jb250ZXh0LCBsb2NhdGlvbik7XHJcbiAgfVxyXG5cclxuICBzZXRWYWx1ZShuZXdWYWx1ZTogVCkge1xyXG4gICAgdGhpcy52YWx1ZSA9IG5ld1ZhbHVlO1xyXG4gIH1cclxuXHJcbiAgc2V0VW5pZm9ybSgpIHtcclxuICAgIGlmICh0aGlzLnZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgIHRoaXMuc2V0dGVyKHRoaXMudmFsdWUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0VW5pZm9ybVR5cGUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy50eXBlO1xyXG4gIH1cclxuXHJcbiAgZ2V0VW5pZm9ybU5hbWUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5uYW1lO1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHt9XHJcbn1cclxuXHJcbmNvbnN0IGNyZWF0ZVVuaWZvcm1TZXR0ZXIgPSAoXHJcbiAgdHlwZTogVW5pZm9ybVR5cGUsXHJcbiAgY29udGV4dDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LFxyXG4gIGxvY2F0aW9uOiBXZWJHTFVuaWZvcm1Mb2NhdGlvblxyXG4pOiAoKHZhbHVlOiBhbnkpID0+IHZvaWQpID0+IHtcclxuICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgIGNhc2UgVW5pZm9ybVR5cGUuRkxPQVRfVkVDMjpcclxuICAgICAgcmV0dXJuICh2YWx1ZTogVmVjdG9yMkFycmF5KSA9PiBjb250ZXh0LnVuaWZvcm0yZihsb2NhdGlvbiwgLi4udmFsdWUpO1xyXG4gICAgY2FzZSBVbmlmb3JtVHlwZS5GTE9BVF9WRUMzOlxyXG4gICAgICByZXR1cm4gKHZhbHVlOiBWZWN0b3IzQXJyYXkpID0+IGNvbnRleHQudW5pZm9ybTNmKGxvY2F0aW9uLCAuLi52YWx1ZSk7XHJcbiAgICBjYXNlIFVuaWZvcm1UeXBlLkZMT0FUX1ZFQzQ6XHJcbiAgICAgIHJldHVybiAodmFsdWU6IFZlY3RvcjRBcnJheSkgPT4gY29udGV4dC51bmlmb3JtNGYobG9jYXRpb24sIC4uLnZhbHVlKTtcclxuICAgIGNhc2UgVW5pZm9ybVR5cGUuRkxPQVRfTUFUNDpcclxuICAgICAgcmV0dXJuICh2YWx1ZTogTWF0cml4NEFycmF5KSA9PlxyXG4gICAgICAgIGNvbnRleHQudW5pZm9ybU1hdHJpeDRmdihsb2NhdGlvbiwgZmFsc2UsIHZhbHVlKTtcclxuICAgIC8vY2FzZSBVbmlmb3JtVHlwZS5TQU1QTEVSXzJEOlxyXG4gICAgLy8gICAgICByZXR1cm4gKHZhbHVlOiB7IHNsb3Q6IG51bWJlcjsgdGV4dHVyZURhdGE6IGJvb2xlYW4gfSkgPT4ge1xyXG4gICAgLy9jb250ZXh0LnRleGkodmFsdWUuc2xvdCk7XHJcbiAgICAvLyAgICB9O1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgYXNzZXJ0TmV2ZXIodHlwZSk7XHJcbiAgfVxyXG59O1xyXG4iLCJpbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSBcIi4uL3R5cGVzXCI7XHJcblxyXG50eXBlIEV2ZW50VHlwZSA9IGtleW9mIEhUTUxFbGVtZW50RXZlbnRNYXA7XHJcbnR5cGUgRXZlbnRIYW5kbGVyPFQgZXh0ZW5kcyBFdmVudD4gPSAoZXZlbnQ6IFQpID0+IHZvaWQ7XHJcblxyXG5leHBvcnQgY29uc3QgY2FtZXJhUG9zaXRpb25Ub1ZlY3RvcjMgPSAoXHJcbiAgY2FtZXJhUG9zaXRpb246IENhbWVyYVBvc2l0aW9uXHJcbik6IFZlY3RvcjMgPT4ge1xyXG4gIGNvbnN0IHkgPSBjYW1lcmFQb3NpdGlvbi5yYWRpdXMgKiBNYXRoLnNpbihjYW1lcmFQb3NpdGlvbi5sYXRpdHVkZSk7XHJcbiAgY29uc3QgciA9IGNhbWVyYVBvc2l0aW9uLnJhZGl1cyAqIE1hdGguY29zKGNhbWVyYVBvc2l0aW9uLmxhdGl0dWRlKTtcclxuICBjb25zdCB6ID0gciAqIE1hdGguY29zKGNhbWVyYVBvc2l0aW9uLmxvbmdpdHVkZSk7XHJcbiAgY29uc3QgeCA9IHIgKiBNYXRoLnNpbihjYW1lcmFQb3NpdGlvbi5sb25naXR1ZGUpO1xyXG4gIHJldHVybiB7IHgsIHksIHogfTtcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIENhbWVyYVBvc2l0aW9uID0ge1xyXG4gIGxhdGl0dWRlOiBudW1iZXI7XHJcbiAgbG9uZ2l0dWRlOiBudW1iZXI7XHJcbiAgcmFkaXVzOiBudW1iZXI7XHJcbn07XHJcblxyXG50eXBlIEFjdGlvbiA9XHJcbiAgfCB7XHJcbiAgICAgIHR5cGU6IFwib3JiaXRSb3RhdGVcIjtcclxuICAgICAgZGVsdGFMYXRpdHVkZTogbnVtYmVyO1xyXG4gICAgICBkZWx0YUxvbmdpdHVkZTogbnVtYmVyO1xyXG4gICAgfVxyXG4gIHwgeyB0eXBlOiBcInpvb21JbkF0XCIgfVxyXG4gIHwgeyB0eXBlOiBcInpvb21PdXRBdFwiIH07XHJcblxyXG5jb25zdCBjbGFtcExhdGl0dWRlID0gKGxhdGl0dWRlOiBudW1iZXIpID0+IHtcclxuICByZXR1cm4gTWF0aC5taW4oXHJcbiAgICBNYXRoLm1heChsYXRpdHVkZSwgLU1hdGguUEkgLyAyLjAgKyAwLjEpLFxyXG4gICAgTWF0aC5QSSAvIDIuMCAtIDAuMVxyXG4gICk7XHJcbn07XHJcblxyXG5jb25zdCBjbGFtcExvbmdpdHVkZSA9IChsb25naXR1ZGU6IG51bWJlcikgPT4ge1xyXG4gIGlmIChsb25naXR1ZGUgPiBNYXRoLlBJKSByZXR1cm4gbG9uZ2l0dWRlIC0gTWF0aC5QSSAqIDIuMDtcclxuICBlbHNlIGlmIChsb25naXR1ZGUgPCAtTWF0aC5QSSkgcmV0dXJuIGxvbmdpdHVkZSArIE1hdGguUEkgKiAyLjA7XHJcbiAgZWxzZSByZXR1cm4gbG9uZ2l0dWRlO1xyXG59O1xyXG5cclxuY29uc3QgY2xhbXBSYWRpdXMgPSAocmFkaXVzOiBudW1iZXIpID0+IHtcclxuICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgocmFkaXVzLCAxKSwgMTApO1xyXG59O1xyXG5cclxuY29uc3QgcmVkdWNlciA9IChwb3NpdGlvbjogQ2FtZXJhUG9zaXRpb24sIGFjdGlvbjogQWN0aW9uKTogQ2FtZXJhUG9zaXRpb24gPT4ge1xyXG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcclxuICAgIGNhc2UgXCJvcmJpdFJvdGF0ZVwiOiB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4ucG9zaXRpb24sXHJcbiAgICAgICAgbGF0aXR1ZGU6IGNsYW1wTGF0aXR1ZGUocG9zaXRpb24ubGF0aXR1ZGUgKyBhY3Rpb24uZGVsdGFMYXRpdHVkZSksXHJcbiAgICAgICAgbG9uZ2l0dWRlOiBjbGFtcExvbmdpdHVkZShwb3NpdGlvbi5sb25naXR1ZGUgKyBhY3Rpb24uZGVsdGFMb25naXR1ZGUpLFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gICAgY2FzZSBcInpvb21JbkF0XCI6IHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICAuLi5wb3NpdGlvbixcclxuICAgICAgICByYWRpdXM6IGNsYW1wUmFkaXVzKHBvc2l0aW9uLnJhZGl1cyAtIDAuMSksXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgICBjYXNlIFwiem9vbU91dEF0XCI6IHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICAuLi5wb3NpdGlvbixcclxuICAgICAgICByYWRpdXM6IGNsYW1wUmFkaXVzKHBvc2l0aW9uLnJhZGl1cyArIDAuMSksXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICByZXR1cm4gcG9zaXRpb247XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGNsYXNzIENhbWVyYVBvc2l0aW9uTWFuaXB1bGF0b3Ige1xyXG4gIHByaXZhdGUgcG9pbnRlclBvc2l0aW9uID0geyB4OiAwLCB5OiAwIH07XHJcbiAgZXZlbnRMaXN0ZW5lcnMgPSBuZXcgTWFwPHN0cmluZywgRXZlbnRIYW5kbGVyPEV2ZW50Pj4oKTtcclxuICBwcml2YXRlIGlzTW92aW5nID0gZmFsc2U7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJvdGVjdGVkIGVsZW1lbnQ6IEhUTUxFbGVtZW50LFxyXG4gICAgcHJpdmF0ZSBwb3NpdGlvblByb3ZpZGVyOiAoKSA9PiBDYW1lcmFQb3NpdGlvbixcclxuICAgIHByaXZhdGUgb25Qb3NpdGlvbkNoYW5nZTogKG5ld1Bvc2l0aW9uOiBDYW1lcmFQb3NpdGlvbikgPT4gdm9pZFxyXG4gICkge1xyXG4gICAgdGhpcy5yZWdpc3RlckV2ZW50KFwibW91c2Vkb3duXCIsIHRoaXMub25Nb3VzZURvd24pO1xyXG4gICAgdGhpcy5yZWdpc3RlckV2ZW50KFwibW91c2Vtb3ZlXCIsIHRoaXMub25Nb3VzZU1vdmUpO1xyXG4gICAgdGhpcy5yZWdpc3RlckV2ZW50KFwibW91c2V1cFwiLCB0aGlzLm9uTW91c2VVcCk7XHJcbiAgICB0aGlzLnJlZ2lzdGVyRXZlbnQoXCJtb3VzZWxlYXZlXCIsIHRoaXMub25Nb3VzZUxlYXZlKTtcclxuICAgIHRoaXMucmVnaXN0ZXJFdmVudChcIndoZWVsXCIsIHRoaXMub25XaGVlbCk7XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgdGhpcy5ldmVudExpc3RlbmVycy5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PlxyXG4gICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihrZXksIHZhbHVlKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgcmVnaXN0ZXJFdmVudDxUIGV4dGVuZHMgRXZlbnQ+KFxyXG4gICAgdHlwZTogRXZlbnRUeXBlLFxyXG4gICAgaGFuZGxlcjogRXZlbnRIYW5kbGVyPFQ+XHJcbiAgKSB7XHJcbiAgICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBoYW5kbGVyKTtcclxuICAgIHRoaXMuZXZlbnRMaXN0ZW5lcnMuc2V0KHR5cGUsIGhhbmRsZXIgYXMgRXZlbnRIYW5kbGVyPEV2ZW50Pik7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGRpc3BhdGNoQWN0aW9uID0gKGFjdGlvbjogQWN0aW9uKSA9PiB7XHJcbiAgICBjb25zdCBuZXdWaWV3cG9ydCA9IHJlZHVjZXIodGhpcy5wb3NpdGlvblByb3ZpZGVyKCksIGFjdGlvbik7XHJcbiAgICB0aGlzLm9uUG9zaXRpb25DaGFuZ2UobmV3Vmlld3BvcnQpO1xyXG4gIH07XHJcblxyXG4gIHByaXZhdGUgb25Nb3VzZURvd24gPSAoZTogTW91c2VFdmVudCkgPT4ge1xyXG4gICAgaWYgKGUuYnV0dG9uID09PSAwKSB7XHJcbiAgICAgIHRoaXMucG9pbnRlclBvc2l0aW9uID0geyB4OiBlLm9mZnNldFgsIHk6IGUub2Zmc2V0WSB9O1xyXG4gICAgICB0aGlzLmlzTW92aW5nID0gdHJ1ZTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBwcml2YXRlIG9uTW91c2VNb3ZlID0gKGU6IE1vdXNlRXZlbnQpID0+IHtcclxuICAgIGlmICh0aGlzLmlzTW92aW5nKSB7XHJcbiAgICAgIGNvbnN0IG11bHRpcGxpZXIgPSAwLjAxO1xyXG4gICAgICB0aGlzLmRpc3BhdGNoQWN0aW9uKHtcclxuICAgICAgICB0eXBlOiBcIm9yYml0Um90YXRlXCIsXHJcbiAgICAgICAgZGVsdGFMb25naXR1ZGU6IC0oZS5vZmZzZXRYIC0gdGhpcy5wb2ludGVyUG9zaXRpb24ueCkgKiBtdWx0aXBsaWVyLFxyXG4gICAgICAgIGRlbHRhTGF0aXR1ZGU6IChlLm9mZnNldFkgLSB0aGlzLnBvaW50ZXJQb3NpdGlvbi55KSAqIG11bHRpcGxpZXIsXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMucG9pbnRlclBvc2l0aW9uID0geyB4OiBlLm9mZnNldFgsIHk6IGUub2Zmc2V0WSB9O1xyXG4gIH07XHJcblxyXG4gIHByaXZhdGUgb25Nb3VzZVVwID0gKCkgPT4ge1xyXG4gICAgdGhpcy5pc01vdmluZyA9IGZhbHNlO1xyXG4gIH07XHJcblxyXG4gIHByaXZhdGUgb25Nb3VzZUxlYXZlID0gKCkgPT4ge1xyXG4gICAgdGhpcy5pc01vdmluZyA9IGZhbHNlO1xyXG4gIH07XHJcblxyXG4gIHByaXZhdGUgb25XaGVlbCA9IChlOiBXaGVlbEV2ZW50KSA9PiB7XHJcbiAgICBjb25zdCBhY3Rpb24gPSBlLmRlbHRhWSA8IDAgPyBcInpvb21JbkF0XCIgOiBcInpvb21PdXRBdFwiO1xyXG5cclxuICAgIHRoaXMuZGlzcGF0Y2hBY3Rpb24oe1xyXG4gICAgICB0eXBlOiBhY3Rpb24sXHJcbiAgICB9KTtcclxuICB9O1xyXG59XHJcbiIsImltcG9ydCB7IE1lc3NhZ2VSZXF1ZXN0IH0gZnJvbSBcIi4vbWVzc2FnZXNcIjtcclxuXHJcbmRlY2xhcmUgY29uc3QgYWNxdWlyZVZzQ29kZUFwaTogKCkgPT4ge1xyXG4gIGdldFN0YXRlOiAoKSA9PiBhbnk7XHJcbiAgc2V0U3RhdGU6IChzdGF0ZTogYW55KSA9PiB2b2lkO1xyXG4gIHBvc3RNZXNzYWdlOiAobWVzc2FnZTogTWVzc2FnZVJlcXVlc3QpID0+IHZvaWQ7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgdnNjb2RlQXBpID0gYWNxdWlyZVZzQ29kZUFwaSgpO1xyXG4iLCJpbXBvcnQgeyB2c2NvZGVBcGkgfSBmcm9tIFwiLi9jb21tdW5pY2F0aW9uL3ZzY29kZUFwaVwiO1xyXG5cclxudHlwZSBTdGF0ZSA9IHtcclxuICB2ZXJ0ZXhGaWxlUGF0aDogc3RyaW5nIHwgbnVsbDtcclxuICBmcmFnbWVudEZpbGVQYXRoOiBzdHJpbmcgfCBudWxsO1xyXG4gIGRyYXdNb2RlOiBzdHJpbmc7XHJcbn07XHJcblxyXG5jb25zdCBkZWZhdWx0U3RhdGU6IFN0YXRlID0ge1xyXG4gIHZlcnRleEZpbGVQYXRoOiBudWxsLFxyXG4gIGZyYWdtZW50RmlsZVBhdGg6IG51bGwsXHJcbiAgZHJhd01vZGU6IFwiZWxlbWVudHNcIixcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRTdGF0ZSA9ICgpOiBTdGF0ZSA9PiB2c2NvZGVBcGkuZ2V0U3RhdGUoKSA/PyBkZWZhdWx0U3RhdGU7XHJcbmV4cG9ydCBjb25zdCBzZXRTdGF0ZSA9IChuZXdTdGF0ZTogUGFydGlhbDxTdGF0ZT4pID0+XHJcbiAgdnNjb2RlQXBpLnNldFN0YXRlKE9iamVjdC5hc3NpZ24oZ2V0U3RhdGUoKSwgbmV3U3RhdGUpKTtcclxuIiwiZXhwb3J0IGNsYXNzIEluZGV4QnVmZmVySW5mbyB7XHJcbiAgcHJpdmF0ZSBidWZmZXI6IFdlYkdMQnVmZmVyIHwgbnVsbDtcclxuICBwcml2YXRlIGNvdW50OiBudW1iZXIgPSAwO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNvbnRleHQ6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCkge1xyXG4gICAgdGhpcy5idWZmZXIgPSBjb250ZXh0LmNyZWF0ZUJ1ZmZlcigpO1xyXG4gIH1cclxuXHJcbiAgc2V0VmFsdWUobmV3VmFsdWU6IG51bWJlcltdKSB7XHJcbiAgICB0aGlzLmNvdW50ID0gbmV3VmFsdWUubGVuZ3RoO1xyXG4gICAgdGhpcy5jb250ZXh0LmJpbmRCdWZmZXIodGhpcy5jb250ZXh0LkVMRU1FTlRfQVJSQVlfQlVGRkVSLCB0aGlzLmJ1ZmZlcik7XHJcbiAgICB0aGlzLmNvbnRleHQuYnVmZmVyRGF0YShcclxuICAgICAgdGhpcy5jb250ZXh0LkVMRU1FTlRfQVJSQVlfQlVGRkVSLFxyXG4gICAgICBuZXcgVWludDE2QXJyYXkobmV3VmFsdWUpLFxyXG4gICAgICB0aGlzLmNvbnRleHQuU1RBVElDX0RSQVdcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBzZXRJbmRleEJ1ZmZlcigpIHtcclxuICAgIHRoaXMuY29udGV4dC5iaW5kQnVmZmVyKHRoaXMuY29udGV4dC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgdGhpcy5idWZmZXIpO1xyXG4gIH1cclxuXHJcbiAgZ2V0Q291bnQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5jb3VudDtcclxuICB9XHJcblxyXG4gIGRlbGV0ZUJ1ZmZlcigpIHtcclxuICAgIHRoaXMuY29udGV4dC5kZWxldGVCdWZmZXIodGhpcy5idWZmZXIpO1xyXG4gICAgdGhpcy5idWZmZXIgPSBudWxsO1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgY29uc3QgdHJhbnNsYXRpb25zID0ge1xyXG4gICAgc2hhZGVyczogXCJTSEFERVJTXCJcclxufSIsImV4cG9ydCB0eXBlIERyb3Bkb3duSXRlbSA9IHtcclxuICBpZDogc3RyaW5nO1xyXG4gIGRpc3BsYXk6IHN0cmluZztcclxufTtcclxuXHJcbmNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xyXG4gIGVtcHR5SXRlbTogdHJ1ZSxcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVEcm9wZG93biA9IChcclxuICBvbkNoYW5nZTogKGl0ZW06IERyb3Bkb3duSXRlbSB8IG51bGwpID0+IHZvaWQsXHJcbiAgY2xhc3NOYW1lPzogc3RyaW5nLFxyXG4gIG9wdGlvbnM/OiB7IGVtcHR5SXRlbTogYm9vbGVhbiB9XHJcbik6IFtcclxuICBIVE1MU2VsZWN0RWxlbWVudCxcclxuICB7XHJcbiAgICBzZXRJdGVtczogKGl0ZW1zOiBEcm9wZG93bkl0ZW1bXSkgPT4gdm9pZDtcclxuICAgIGdldEl0ZW1zOiAoKSA9PiBEcm9wZG93bkl0ZW1bXTtcclxuICAgIHNldFNlbGVjdGVkSXRlbUJ5SWQ6IChpZDogc3RyaW5nKSA9PiB2b2lkO1xyXG4gICAgc2V0U2VsZWN0ZWRJdGVtQnlJbmRleDogKGluZGV4OiBudW1iZXIpID0+IHZvaWQ7XHJcbiAgICBnZXRTZWxlY3RlZEl0ZW06ICgpID0+IERyb3Bkb3duSXRlbSB8IG51bGw7XHJcbiAgICBjbGVhclNlbGVjdGlvbjogKCkgPT4gdm9pZDtcclxuICB9XHJcbl0gPT4ge1xyXG4gIGNvbnN0IGNvbWJpbmVkT3B0aW9ucyA9IHsgLi4uZGVmYXVsdE9wdGlvbnMsIC4uLm9wdGlvbnMgfTtcclxuICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNlbGVjdFwiKTtcclxuICBlbGVtZW50LmNsYXNzTmFtZSA9IGBkcm9wZG93bi1iYXNlICR7Y2xhc3NOYW1lfWA7XHJcblxyXG4gIGxldCBzZWxlY3RlZEl0ZW06IERyb3Bkb3duSXRlbSB8IG51bGwgPSBudWxsO1xyXG4gIGxldCBpdGVtRWxlbWVudHM6IHsgZWxlbWVudDogSFRNTE9wdGlvbkVsZW1lbnQ7IGl0ZW06IERyb3Bkb3duSXRlbSB9W10gPSBbXTtcclxuICBjb25zdCBzZXRTZWxlY3RlZEl0ZW0gPSAoaXRlbTogRHJvcGRvd25JdGVtIHwgbnVsbCkgPT4ge1xyXG4gICAgc2VsZWN0ZWRJdGVtID0gaXRlbTtcclxuICAgIG9uQ2hhbmdlKHNlbGVjdGVkSXRlbSk7XHJcbiAgfTtcclxuXHJcbiAgZWxlbWVudC5vbmNoYW5nZSA9ICgpID0+IHtcclxuICAgIGNvbnN0IGZvdW5kRWxlbWVudCA9IGl0ZW1FbGVtZW50cy5maW5kKGUgPT4gZS5pdGVtLmlkID09PSBlbGVtZW50LnZhbHVlKTtcclxuXHJcbiAgICBpZiAoZm91bmRFbGVtZW50Lml0ZW0uaWQpIHNldFNlbGVjdGVkSXRlbShmb3VuZEVsZW1lbnQuaXRlbSk7XHJcbiAgICBlbHNlIHNldFNlbGVjdGVkSXRlbShudWxsKTtcclxuICB9O1xyXG5cclxuICBjb25zdCBzZXRJdGVtcyA9IChpdGVtczogRHJvcGRvd25JdGVtW10pID0+IHtcclxuICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gXCJcIjtcclxuICAgIGl0ZW1FbGVtZW50cy5sZW5ndGggPSAwO1xyXG5cclxuICAgIGNvbnN0IG5ld0l0ZW1zID0gY29tYmluZWRPcHRpb25zLmVtcHR5SXRlbVxyXG4gICAgICA/IFt7IGlkOiBcIlwiLCBkaXNwbGF5OiBcIlwiIH0sIC4uLml0ZW1zXVxyXG4gICAgICA6IFsuLi5pdGVtc107XHJcbiAgICBuZXdJdGVtcy5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICBjb25zdCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xyXG4gICAgICBvcHRpb24udmFsdWUgPSBpdGVtLmlkO1xyXG4gICAgICBvcHRpb24udGV4dENvbnRlbnQgPSBpdGVtLmRpc3BsYXk7XHJcbiAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IGl0ZW0uaWQgPT09IHNlbGVjdGVkSXRlbT8uaWQ7XHJcbiAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQob3B0aW9uKTtcclxuICAgICAgaXRlbUVsZW1lbnRzLnB1c2goeyBlbGVtZW50OiBvcHRpb24sIGl0ZW0gfSk7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICBjb25zdCBnZXRJdGVtcyA9ICgpID0+IGl0ZW1FbGVtZW50cy5tYXAoaWUgPT4gaWUuaXRlbSk7XHJcbiAgY29uc3Qgc2V0U2VsZWN0ZWRJdGVtQnlJZCA9IChpZDogc3RyaW5nKSA9PiB7XHJcbiAgICBpdGVtRWxlbWVudHMuZm9yRWFjaChpZSA9PiB7XHJcbiAgICAgIGlmIChpZS5pdGVtLmlkID09PSBpZCkge1xyXG4gICAgICAgIGllLmVsZW1lbnQuc2VsZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgIHNldFNlbGVjdGVkSXRlbShpZS5pdGVtKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZS5lbGVtZW50LnNlbGVjdGVkID0gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IHNldFNlbGVjdGVkSXRlbUJ5SW5kZXggPSAoaW5kZXg6IG51bWJlcikgPT5cclxuICAgIHNldFNlbGVjdGVkSXRlbUJ5SWQoaXRlbUVsZW1lbnRzW2luZGV4XS5pdGVtLmlkKTtcclxuXHJcbiAgY29uc3QgZ2V0U2VsZWN0ZWRJdGVtID0gKCkgPT4gc2VsZWN0ZWRJdGVtO1xyXG4gIGNvbnN0IGNsZWFyU2VsZWN0aW9uID0gKCkgPT4ge1xyXG4gICAgaXRlbUVsZW1lbnRzLmZvckVhY2goaWUgPT4gKGllLmVsZW1lbnQuc2VsZWN0ZWQgPSBmYWxzZSkpO1xyXG4gICAgc2V0U2VsZWN0ZWRJdGVtKG51bGwpO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiBbXHJcbiAgICBlbGVtZW50LFxyXG4gICAge1xyXG4gICAgICBzZXRJdGVtcyxcclxuICAgICAgZ2V0SXRlbXMsXHJcbiAgICAgIHNldFNlbGVjdGVkSXRlbUJ5SWQsXHJcbiAgICAgIHNldFNlbGVjdGVkSXRlbUJ5SW5kZXgsXHJcbiAgICAgIGdldFNlbGVjdGVkSXRlbSxcclxuICAgICAgY2xlYXJTZWxlY3Rpb24sXHJcbiAgICB9LFxyXG4gIF07XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgY3JlYXRlRWxlbWVudHNEcm9wZG93biA9IChcclxuICBlbGVtZW50czogeyBpZDogc3RyaW5nOyBkaXNwbGF5OiBzdHJpbmc7IGVsZW1lbnQ6IEhUTUxFbGVtZW50IH1bXSxcclxuICBvbkNoYW5nZT86IChpZDogc3RyaW5nIHwgbnVsbCkgPT4gdm9pZFxyXG4pID0+IHtcclxuICBjb25zdCBbb3B0aW9uc0VsZW1lbnQsIG9wdGlvbnNDb250cm9sbGVyXSA9IGNyZWF0ZURyb3Bkb3duKFxyXG4gICAgaXRlbSA9PiB7XHJcbiAgICAgIGlmICghaXRlbSkge1xyXG4gICAgICAgIG9uQ2hhbmdlPy4obnVsbCk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBlbGVtZW50cy5mb3JFYWNoKG9lID0+IG9lLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImhpZGRlblwiKSk7XHJcbiAgICAgIGVsZW1lbnRzLmZpbmQoaSA9PiBpLmlkID09PSBpdGVtLmlkKS5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRkZW5cIik7XHJcbiAgICAgIG9uQ2hhbmdlPy4oaXRlbS5pZCk7XHJcbiAgICB9LFxyXG4gICAgXCJcIixcclxuICAgIHsgZW1wdHlJdGVtOiBmYWxzZSB9XHJcbiAgKTtcclxuICBvcHRpb25zQ29udHJvbGxlci5zZXRJdGVtcyhcclxuICAgIGVsZW1lbnRzLm1hcChlID0+ICh7XHJcbiAgICAgIGlkOiBlLmlkLFxyXG4gICAgICBkaXNwbGF5OiBlLmRpc3BsYXksXHJcbiAgICB9KSlcclxuICApO1xyXG4gIG9wdGlvbnNDb250cm9sbGVyLnNldFNlbGVjdGVkSXRlbUJ5SW5kZXgoMCk7XHJcbiAgcmV0dXJuIG9wdGlvbnNFbGVtZW50O1xyXG59O1xyXG4iLCJleHBvcnQgY29uc3QgY3JlYXRlQnV0dG9uID0gKFxyXG4gIHRleHQ6IHN0cmluZyxcclxuICBjbGFzc05hbWU6IHN0cmluZyxcclxuICBvbkNsaWNrOiAoKSA9PiB2b2lkXHJcbikgPT4ge1xyXG4gIGNvbnN0IGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XHJcbiAgYnV0dG9uLm9uY2xpY2sgPSBvbkNsaWNrO1xyXG4gIGJ1dHRvbi5jbGFzc05hbWUgPSBjbGFzc05hbWU7XHJcbiAgYnV0dG9uLnRleHRDb250ZW50ID0gdGV4dDtcclxuICByZXR1cm4geyBlbGVtZW50OiBidXR0b24gfTtcclxufTtcclxuIiwiZXhwb3J0IGNvbnN0IHdpdGhMYWJlbCA9IChcclxuICBlbGVtZW50OiBIVE1MRWxlbWVudCxcclxuICB0ZXh0OiBzdHJpbmcsXHJcbiAgY2xhc3NOYW1lPzogc3RyaW5nXHJcbikgPT4ge1xyXG4gIGNvbnN0IHdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gIHdyYXBwZXIuY2xhc3NOYW1lID0gYCR7Y2xhc3NOYW1lID8/IFwiXCJ9IG9wdGlvbnMtd3JhcHBlcmA7XHJcbiAgY29uc3QgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XHJcbiAgbGFiZWwuY2xhc3NOYW1lID0gXCJvcHRpb25zLWxhYmVsXCI7XHJcbiAgbGFiZWwudGV4dENvbnRlbnQgPSB0ZXh0O1xyXG4gIGVsZW1lbnQuY2xhc3NOYW1lID0gYCR7ZWxlbWVudC5jbGFzc05hbWV9IG9wdGlvbnMtY29udGVudGA7XHJcbiAgd3JhcHBlci5hcHBlbmRDaGlsZChsYWJlbCk7XHJcbiAgd3JhcHBlci5hcHBlbmRDaGlsZChlbGVtZW50KTtcclxuICByZXR1cm4gd3JhcHBlcjtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVEaXYgPSAoY2xhc3NOYW1lOiBzdHJpbmcsIGNoaWxkcmVuPzogSFRNTEVsZW1lbnRbXSkgPT4ge1xyXG4gIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgZGl2LmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcclxuICBjaGlsZHJlbj8uZm9yRWFjaChjID0+IGRpdi5hcHBlbmRDaGlsZChjKSk7XHJcbiAgcmV0dXJuIGRpdjtcclxufTtcclxuIiwiZXhwb3J0IGNvbnN0IGhhc1Byb3BlcnR5ID0gPFQgZXh0ZW5kcyB7fSwgUCBleHRlbmRzIFByb3BlcnR5S2V5PihcclxuICBvYmo6IFQsXHJcbiAgcHJvcDogUFxyXG4pOiBvYmogaXMgVCAmIFJlY29yZDxQLCB1bmtub3duPiA9PiB7XHJcbiAgcmV0dXJuIG9iai5oYXNPd25Qcm9wZXJ0eShwcm9wKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBhc3NlcnROZXZlciA9ICh2YWx1ZTogbmV2ZXIpOiBuZXZlciA9PiB7XHJcbiAgdGhyb3cgbmV3IEVycm9yKGBVbmhhbmRsZWQgdW5pb24gbWVtYmVyOiAke0pTT04uc3RyaW5naWZ5KHZhbHVlKX1gKTtcclxufTtcclxuIiwiZXhwb3J0IGNvbnN0IGNyZWF0ZU11bHRpTnVtYmVySW5wdXQgPSA8VCBleHRlbmRzIG51bWJlcltdPihcclxuICBvbkNoYW5nZTogKG5ld1ZhbHVlOiBUKSA9PiB2b2lkLFxyXG4gIHJvd3M6IG51bWJlcixcclxuICBjb2x1bW5zOiBudW1iZXIsXHJcbiAgaW5wdXRPcHRpb25zPzogUGFydGlhbDxIVE1MSW5wdXRFbGVtZW50PlxyXG4pOiBbXHJcbiAgSFRNTERpdkVsZW1lbnQsXHJcbiAge1xyXG4gICAgc2V0VmFsdWVzOiAodmFsdWU6IFQpID0+IHZvaWQ7XHJcbiAgICBzZXRSZWFkb25seTogKHJlYWRvbmx5OiBib29sZWFuKSA9PiB2b2lkO1xyXG4gICAgZ2V0VmFsdWVzOiAoKSA9PiBUO1xyXG4gIH1cclxuXSA9PiB7XHJcbiAgY29uc3QgaW5wdXRHcmlkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICBpbnB1dEdyaWQuY2xhc3NOYW1lID0gXCJlZGl0LWlucHV0LWdyaWRcIjtcclxuXHJcbiAgY29uc3QgaXRlbUVsZW1lbnRzOiB7IGVsZW1lbnQ6IEhUTUxJbnB1dEVsZW1lbnQ7IHZhbHVlOiBudW1iZXIgfVtdID0gW107XHJcbiAgY29uc3Qgc2V0VmFsdWVzID0gKG5ld1ZhbHVlczogVCkgPT5cclxuICAgIGl0ZW1FbGVtZW50cy5mb3JFYWNoKChpZSwgaW5kZXgpID0+IHtcclxuICAgICAgaWUudmFsdWUgPSBuZXdWYWx1ZXNbaW5kZXhdO1xyXG4gICAgICBpZS5lbGVtZW50LnZhbHVlID0gaWUudmFsdWUudG9TdHJpbmcoKTtcclxuICAgIH0pO1xyXG4gIGNvbnN0IGdldFZhbHVlcyA9ICgpID0+IGl0ZW1FbGVtZW50cy5tYXAoaWUgPT4gaWUudmFsdWUpIGFzIFQ7XHJcbiAgY29uc3Qgc2V0UmVhZG9ubHkgPSAocmVhZG9ubHk6IGJvb2xlYW4pID0+XHJcbiAgICBpdGVtRWxlbWVudHMuZm9yRWFjaChpZSA9PiAoaWUuZWxlbWVudC5yZWFkT25seSA9IHJlYWRvbmx5KSk7XHJcblxyXG4gIGZvciAobGV0IHJvdyA9IDA7IHJvdyA8IHJvd3M7IHJvdysrKSB7XHJcbiAgICBjb25zdCBpbnB1dFJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICBpbnB1dFJvdy5jbGFzc05hbWUgPSBcImVkaXQtaW5wdXQtcm93XCI7XHJcblxyXG4gICAgZm9yIChsZXQgY29sdW1uID0gMDsgY29sdW1uIDwgY29sdW1uczsgY29sdW1uKyspIHtcclxuICAgICAgY29uc3QgaW5kZXggPSByb3cgKiBjb2x1bW5zICsgY29sdW1uO1xyXG4gICAgICBjb25zdCB2YWx1ZSA9IDA7XHJcbiAgICAgIGNvbnN0IGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xyXG4gICAgICBjb25zdCBpdGVtRWxlbWVudCA9IHsgZWxlbWVudDogaW5wdXQsIHZhbHVlIH07XHJcbiAgICAgIE9iamVjdC5hc3NpZ24oaW5wdXQsIGlucHV0T3B0aW9ucyk7XHJcbiAgICAgIGlucHV0LmNsYXNzTmFtZSA9IFwiZWRpdC1pbnB1dFwiO1xyXG4gICAgICBpbnB1dC50eXBlID0gXCJudW1iZXJcIjtcclxuICAgICAgaW5wdXQudmFsdWUgPSB2YWx1ZT8udG9TdHJpbmcoKTtcclxuICAgICAgaW5wdXQub25pbnB1dCA9ICgpID0+IHtcclxuICAgICAgICBpdGVtRWxlbWVudHNbaW5kZXhdLnZhbHVlID0gTnVtYmVyKGlucHV0LnZhbHVlKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhcImNhbGxpbmcgb24gY2hhbmdlXCIpO1xyXG5cclxuICAgICAgICBvbkNoYW5nZT8uKGdldFZhbHVlcygpKTtcclxuICAgICAgfTtcclxuICAgICAgaXRlbUVsZW1lbnRzLnB1c2goaXRlbUVsZW1lbnQpO1xyXG4gICAgICBpbnB1dFJvdy5hcHBlbmRDaGlsZChpbnB1dCk7XHJcbiAgICB9XHJcblxyXG4gICAgaW5wdXRHcmlkLmFwcGVuZENoaWxkKGlucHV0Um93KTtcclxuICB9XHJcblxyXG4gIHJldHVybiBbXHJcbiAgICBpbnB1dEdyaWQsXHJcbiAgICB7XHJcbiAgICAgIHNldFZhbHVlcyxcclxuICAgICAgZ2V0VmFsdWVzLFxyXG4gICAgICBzZXRSZWFkb25seSxcclxuICAgIH0sXHJcbiAgXTtcclxufTtcclxuIiwiaW1wb3J0IHsgYXNzZXJ0TmV2ZXIgfSBmcm9tIFwiLi4vdHlwZUd1YXJkc1wiO1xyXG5cclxuZXhwb3J0IGVudW0gQXR0cmlidXRlQnVmZmVyVHlwZSB7XHJcbiAgRkxPQVRfVkVDMyA9IDM1NjY1LFxyXG4gIEZMT0FUX1ZFQzQgPSAzNTY2NixcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEF0dHJpYnV0ZUJ1ZmZlckluZm8ge1xyXG4gIHByaXZhdGUgYnVmZmVyOiBXZWJHTEJ1ZmZlciB8IG51bGw7XHJcbiAgcHJpdmF0ZSBsb2NhdGlvbjogbnVtYmVyO1xyXG4gIHByaXZhdGUgY291bnQ6IG51bWJlciA9IDA7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBjb250ZXh0OiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsXHJcbiAgICBwcm9ncmFtOiBXZWJHTFByb2dyYW0sXHJcbiAgICBwcml2YXRlIG5hbWU6IHN0cmluZyxcclxuICAgIHByaXZhdGUgdHlwZTogQXR0cmlidXRlQnVmZmVyVHlwZVxyXG4gICkge1xyXG4gICAgdGhpcy5hdHRhY2hUb1Byb2dyYW0ocHJvZ3JhbSk7XHJcbiAgICB0aGlzLmJ1ZmZlciA9IGNvbnRleHQuY3JlYXRlQnVmZmVyKCk7XHJcbiAgfVxyXG5cclxuICBhdHRhY2hUb1Byb2dyYW0ocHJvZ3JhbTogV2ViR0xQcm9ncmFtKSB7XHJcbiAgICB0aGlzLmxvY2F0aW9uID0gdGhpcy5jb250ZXh0LmdldEF0dHJpYkxvY2F0aW9uKHByb2dyYW0sIHRoaXMubmFtZSk7XHJcbiAgfVxyXG5cclxuICBzZXRWYWx1ZShuZXdWYWx1ZTogbnVtYmVyW11bXSkge1xyXG4gICAgdGhpcy5jb3VudCA9IG5ld1ZhbHVlLmxlbmd0aDtcclxuICAgIHRoaXMuY29udGV4dC5iaW5kQnVmZmVyKHRoaXMuY29udGV4dC5BUlJBWV9CVUZGRVIsIHRoaXMuYnVmZmVyKTtcclxuICAgIGNvbnN0IGZsYXR0ZW4gPSBbXS5jb25jYXQoLi4ubmV3VmFsdWUpO1xyXG4gICAgdGhpcy5jb250ZXh0LmJ1ZmZlckRhdGEoXHJcbiAgICAgIHRoaXMuY29udGV4dC5BUlJBWV9CVUZGRVIsXHJcbiAgICAgIG5ldyBGbG9hdDMyQXJyYXkoZmxhdHRlbiksXHJcbiAgICAgIHRoaXMuY29udGV4dC5TVEFUSUNfRFJBV1xyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHNldEF0dHJpYnV0ZUJ1ZmZlcigpIHtcclxuICAgIGlmICh0aGlzLmJ1ZmZlciAhPT0gbnVsbCkge1xyXG4gICAgICB0aGlzLmNvbnRleHQuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkodGhpcy5sb2NhdGlvbik7XHJcbiAgICAgIHRoaXMuY29udGV4dC5iaW5kQnVmZmVyKHRoaXMuY29udGV4dC5BUlJBWV9CVUZGRVIsIHRoaXMuYnVmZmVyKTtcclxuICAgICAgY29uc3Qgc2l6ZSA9IGdldE51bUNvbXBvbmVudHModGhpcy50eXBlKTsgLy8gMiBjb21wb25lbnRzIHBlciBpdGVyYXRpb25cclxuICAgICAgY29uc3QgdHlwZSA9IHRoaXMuY29udGV4dC5GTE9BVDsgLy8gdGhlIGRhdGEgaXMgMzJiaXQgZmxvYXRzXHJcbiAgICAgIGNvbnN0IG5vcm1hbGl6ZSA9IGZhbHNlOyAvLyBkb24ndCBub3JtYWxpemUgdGhlIGRhdGFcclxuICAgICAgY29uc3Qgc3RyaWRlID0gMDsgLy8gMCA9IG1vdmUgZm9yd2FyZCBzaXplICogc2l6ZW9mKHR5cGUpIGVhY2ggaXRlcmF0aW9uIHRvIGdldCB0aGUgbmV4dCBwb3NpdGlvblxyXG4gICAgICBjb25zdCBvZmZzZXQgPSAwOyAvLyBzdGFydCBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBidWZmZXJcclxuICAgICAgdGhpcy5jb250ZXh0LnZlcnRleEF0dHJpYlBvaW50ZXIoXHJcbiAgICAgICAgdGhpcy5sb2NhdGlvbixcclxuICAgICAgICBzaXplLFxyXG4gICAgICAgIHR5cGUsXHJcbiAgICAgICAgbm9ybWFsaXplLFxyXG4gICAgICAgIHN0cmlkZSxcclxuICAgICAgICBvZmZzZXRcclxuICAgICAgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldEF0dHJpYnV0ZUJ1ZmZlclR5cGUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy50eXBlO1xyXG4gIH1cclxuXHJcbiAgZ2V0Q291bnQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5jb3VudDtcclxuICB9XHJcblxyXG4gIGRlbGV0ZUJ1ZmZlcigpIHtcclxuICAgIHRoaXMuY29udGV4dC5kZWxldGVCdWZmZXIodGhpcy5idWZmZXIpO1xyXG4gICAgdGhpcy5idWZmZXIgPSBudWxsO1xyXG4gIH1cclxufVxyXG5cclxuY29uc3QgZ2V0TnVtQ29tcG9uZW50cyA9IChidWZmZXJUeXBlOiBBdHRyaWJ1dGVCdWZmZXJUeXBlKSA9PiB7XHJcbiAgc3dpdGNoIChidWZmZXJUeXBlKSB7XHJcbiAgICBjYXNlIEF0dHJpYnV0ZUJ1ZmZlclR5cGUuRkxPQVRfVkVDMzpcclxuICAgICAgcmV0dXJuIDM7XHJcbiAgICBjYXNlIEF0dHJpYnV0ZUJ1ZmZlclR5cGUuRkxPQVRfVkVDNDpcclxuICAgICAgcmV0dXJuIDQ7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICBhc3NlcnROZXZlcihidWZmZXJUeXBlKTtcclxuICB9XHJcbn07XHJcbiIsImV4cG9ydCBjbGFzcyBDb21wb3NpdGVLZXlNYXA8VEtleSwgVFZhbHVlPiB7XHJcbiAgcHJpdmF0ZSBtYXAgPSBuZXcgTWFwPHN0cmluZywgVFZhbHVlPigpO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGtleVNlbGVjdG9yOiAoY29tcG9zaXRlS2V5OiBUS2V5KSA9PiBzdHJpbmcpIHt9XHJcblxyXG4gIGdldChrZXk6IFRLZXkpIHtcclxuICAgIHJldHVybiB0aGlzLm1hcC5nZXQodGhpcy5rZXlTZWxlY3RvcihrZXkpKTtcclxuICB9XHJcblxyXG4gIHNldChrZXk6IFRLZXksIHZhbHVlOiBUVmFsdWUpIHtcclxuICAgIHRoaXMubWFwLnNldCh0aGlzLmtleVNlbGVjdG9yKGtleSksIHZhbHVlKTtcclxuICB9XHJcblxyXG4gIGhhcyhrZXk6IFRLZXkpIHtcclxuICAgIHJldHVybiB0aGlzLm1hcC5oYXModGhpcy5rZXlTZWxlY3RvcihrZXkpKTtcclxuICB9XHJcblxyXG4gIGVudHJpZXNTdHJLZXkoKSB7XHJcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLm1hcC5lbnRyaWVzKCkpO1xyXG4gIH1cclxuXHJcbiAgZGVsZXRlU3RyS2V5KGtleTogc3RyaW5nKSB7XHJcbiAgICB0aGlzLm1hcC5kZWxldGUoa2V5KTtcclxuICB9XHJcblxyXG4gIGRlbGV0ZShrZXk6IFRLZXkpIHtcclxuICAgIHRoaXMubWFwLmRlbGV0ZSh0aGlzLmtleVNlbGVjdG9yKGtleSkpO1xyXG4gIH1cclxuXHJcbiAgY2xlYXIoKSB7XHJcbiAgICB0aGlzLm1hcC5jbGVhcigpO1xyXG4gIH1cclxufVxyXG4iLCIvL2h0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMTE3NTIzXHJcbmV4cG9ydCBjb25zdCB1dWlkdjQgPSAoKSA9PiB7XHJcbiAgcmV0dXJuIFwieHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4XCIucmVwbGFjZSgvW3h5XS9nLCBmdW5jdGlvbiAoYykge1xyXG4gICAgdmFyIHIgPSAoTWF0aC5yYW5kb20oKSAqIDE2KSB8IDAsXHJcbiAgICAgIHYgPSBjID09IFwieFwiID8gciA6IChyICYgMHgzKSB8IDB4ODtcclxuICAgIHJldHVybiB2LnRvU3RyaW5nKDE2KTtcclxuICB9KTtcclxufTtcclxuIiwiZXhwb3J0IGNvbnN0IHJlbW92ZSA9IDxUPihhcnJheTogVFtdLCBpdGVtOiBUKSA9PiB7XHJcbiAgY29uc3QgaW5kZXggPSBhcnJheS5pbmRleE9mKGl0ZW0pO1xyXG5cclxuICBpZiAoaW5kZXggPiAtMSkge1xyXG4gICAgYXJyYXkuc3BsaWNlKGluZGV4LCAxKTtcclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgcmVtb3ZlTGFzdCA9ICh0ZXh0OiBzdHJpbmcsIGNvdW50OiBudW1iZXIpID0+IHtcclxuICByZXR1cm4gdGV4dC5zdWJzdHJpbmcoMCwgdGV4dC5sZW5ndGggLSBjb3VudCk7XHJcbn07XHJcbiIsImltcG9ydCAqIGFzIEFycmF5VXRpbHMgZnJvbSBcIi4uLy4uLy4uL2NvbW1vbi9hcnJheVwiO1xyXG5leHBvcnQgdHlwZSBPYnNlcnZlcjxUPiA9ICh2YWx1ZTogVCkgPT4gdm9pZDtcclxuXHJcbmV4cG9ydCBjbGFzcyBPYnNlcnZhYmxlPFQ+IHtcclxuICBvYnNlcnZlcnM6IE9ic2VydmVyPFQ+W10gPSBbXTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSB2YWx1ZTogVCB8IG51bGwpIHt9XHJcblxyXG4gIGF0dGFjaChvYnNlcnZlcjogT2JzZXJ2ZXI8VD4pIHtcclxuICAgIHRoaXMub2JzZXJ2ZXJzLnB1c2gob2JzZXJ2ZXIpO1xyXG4gIH1cclxuXHJcbiAgZGV0YWNoKG9ic2VydmVyOiBPYnNlcnZlcjxUPikge1xyXG4gICAgQXJyYXlVdGlscy5yZW1vdmUodGhpcy5vYnNlcnZlcnMsIG9ic2VydmVyKTtcclxuICB9XHJcblxyXG4gIGRldGFjaEFsbCgpIHtcclxuICAgIHRoaXMub2JzZXJ2ZXJzLmxlbmd0aCA9IDA7XHJcbiAgfVxyXG5cclxuICBzZXRWYWx1ZShuZXdWYWx1ZTogVCkge1xyXG4gICAgdGhpcy52YWx1ZSA9IG5ld1ZhbHVlO1xyXG4gICAgdGhpcy5ub3RpZnkoKTtcclxuICB9XHJcblxyXG4gIGdldFZhbHVlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMudmFsdWU7XHJcbiAgfVxyXG5cclxuICBmb3JjZU5vdGlmeSgpIHtcclxuICAgIHRoaXMubm90aWZ5KCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIG5vdGlmeSgpIHtcclxuICAgIGlmICh0aGlzLnZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy52YWx1ZTtcclxuICAgICAgdGhpcy5vYnNlcnZlcnMuZm9yRWFjaChvID0+IG8odmFsdWUpKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGNvbnN0IGNyZWF0ZUVsZW1lbnROb3RTdXBwb3J0ZWQgPSAoKSA9PiB7XHJcbiAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICBkaXYuY2xhc3NOYW1lID0gXCJ1bnN1cHBvcnRlZC1lcnJvclwiO1xyXG4gIGRpdi5pbm5lclRleHQgPSBcIk5vdCBzdXBwb3J0ZWQgdW5pZm9ybVwiO1xyXG4gIHJldHVybiBkaXY7XHJcbn07XHJcbiIsIi8vaW1wb3J0IHsgY3JlYXRlTWF0cml4MyB9IGZyb20gXCIuLy4uLy4uL2NvbXBvbmVudHMvaW5wdXRNYXRyaXhcIjtcclxuaW1wb3J0IHsgYXNzZXJ0TmV2ZXIgfSBmcm9tIFwiLi8uLi90eXBlR3VhcmRzXCI7XHJcbmltcG9ydCB7IGNyZWF0ZVZlY3RvciB9IGZyb20gXCIuLi8uLi9jb21wb25lbnRzL2lucHV0VmVjdG9yXCI7XHJcbmltcG9ydCB7IGNyZWF0ZUVsZW1lbnRzRHJvcGRvd24gfSBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9kcm9wZG93blwiO1xyXG5pbXBvcnQgeyBVbmlmb3JtSW5mbywgVW5pZm9ybVR5cGUgfSBmcm9tIFwiLi91bmlmb3JtXCI7XHJcbmltcG9ydCB7IENvbXBvc2l0ZUtleU1hcCB9IGZyb20gXCIuLi9jb21wb3NpdGVLZXlNYXBcIjtcclxuaW1wb3J0IHsgY3JlYXRlRGl2LCB3aXRoTGFiZWwgfSBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy93cmFwcGVyc1wiO1xyXG5pbXBvcnQgeyB1dWlkdjQgfSBmcm9tIFwiLi4vLi4vLi4vLi4vY29tbW9uL3V1aWRcIjtcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCIuLi9vYnNlcnZhYmxlXCI7XHJcbmltcG9ydCB7IGNyZWF0ZUVsZW1lbnROb3RTdXBwb3J0ZWQgfSBmcm9tIFwiLi9jb21tb25cIjtcclxuaW1wb3J0IHsgY3JlYXRlTWF0cml4IH0gZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvaW5wdXRNYXRyaXhcIjtcclxuXHJcbnR5cGUgQ2FjaGVLZXkgPSB7XHJcbiAgbmFtZTogc3RyaW5nO1xyXG4gIHR5cGU6IFVuaWZvcm1UeXBlO1xyXG59O1xyXG5cclxudHlwZSBDYWNoZVZhbHVlID0ge1xyXG4gIGNvbXBvbmVudDogSFRNTEVsZW1lbnQ7XHJcbiAgdW5pZm9ybUluZm86IFVuaWZvcm1JbmZvO1xyXG59O1xyXG5cclxuY29uc3Qga2V5U2VsZWN0b3IgPSAoa2V5OiBDYWNoZUtleSk6IHN0cmluZyA9PiBgJHtrZXkubmFtZX07JHtrZXkudHlwZX1gO1xyXG5jb25zdCB1bmlmb3JtQ29tcG9uZW50Q2FjaGUgPSBuZXcgQ29tcG9zaXRlS2V5TWFwPENhY2hlS2V5LCBDYWNoZVZhbHVlPihcclxuICBrZXlTZWxlY3RvclxyXG4pO1xyXG5cclxuY29uc3QgcmVidWlsZENhY2hlID0gKG5ld1ZhbHVlczogeyBrZXk6IENhY2hlS2V5OyB2YWx1ZTogQ2FjaGVWYWx1ZSB9W10pID0+IHtcclxuICBjb25zdCBuZXdWYWx1ZXNTdHJLZXlzID0gbmV3VmFsdWVzLm1hcCh2ID0+IGtleVNlbGVjdG9yKHYua2V5KSk7XHJcbiAgY29uc3QgY29tcG9uZW50c1RvUmVtb3ZlID0gdW5pZm9ybUNvbXBvbmVudENhY2hlXHJcbiAgICAuZW50cmllc1N0cktleSgpXHJcbiAgICAuZmlsdGVyKGUgPT4gIW5ld1ZhbHVlc1N0cktleXMuaW5jbHVkZXMoZVswXSkpO1xyXG5cclxuICBjb21wb25lbnRzVG9SZW1vdmUuZm9yRWFjaChjID0+IHtcclxuICAgIHVuaWZvcm1Db21wb25lbnRDYWNoZS5kZWxldGVTdHJLZXkoY1swXSk7XHJcbiAgfSk7XHJcblxyXG4gIG5ld1ZhbHVlcy5mb3JFYWNoKG53ID0+IHtcclxuICAgIGlmICghdW5pZm9ybUNvbXBvbmVudENhY2hlLmhhcyhudy5rZXkpKVxyXG4gICAgICB1bmlmb3JtQ29tcG9uZW50Q2FjaGUuc2V0KG53LmtleSwgbncudmFsdWUpO1xyXG4gIH0pO1xyXG59O1xyXG5cclxuLy90b2RvXHJcbmNvbnN0IGdldERlZmF1bHRWYWx1ZSA9ICh0eXBlOiBVbmlmb3JtVHlwZSkgPT4ge1xyXG4gIHN3aXRjaCAodHlwZSkge1xyXG4gICAgY2FzZSBVbmlmb3JtVHlwZS5GTE9BVF9WRUMyOlxyXG4gICAgICByZXR1cm4gWzEsIDFdO1xyXG4gICAgY2FzZSBVbmlmb3JtVHlwZS5GTE9BVF9WRUMzOlxyXG4gICAgICByZXR1cm4gWzEsIDEsIDFdO1xyXG4gICAgY2FzZSBVbmlmb3JtVHlwZS5GTE9BVF9WRUM0OlxyXG4gICAgICByZXR1cm4gWzEsIDEsIDEsIDFdO1xyXG4gICAgY2FzZSBVbmlmb3JtVHlwZS5GTE9BVF9NQVQ0OlxyXG4gICAgICByZXR1cm4gWzEsIDAsIDAsIDAsIDAsIDEsIDAsIDAsIDAsIDAsIDEsIDAsIDAsIDAsIDAsIDFdO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgYXNzZXJ0TmV2ZXIodHlwZSk7XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgVW5pZm9ybUJpbmRpbmcgPSB7XHJcbiAgbmFtZTogc3RyaW5nO1xyXG4gIHR5cGU6IFVuaWZvcm1UeXBlO1xyXG4gIHZhbHVlOiBPYnNlcnZhYmxlPGFueT47XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgY3JlYXRlVW5pZm9ybUNvbXBvbmVudHMgPSAoXHJcbiAgY29udGV4dDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LFxyXG4gIHByb2dyYW06IFdlYkdMUHJvZ3JhbSxcclxuICB1bmlmb3JtczogeyBuYW1lOiBzdHJpbmc7IHR5cGU6IFVuaWZvcm1UeXBlIH1bXSxcclxuICB1bmlmb3JtQmluZGluZ3M6IFVuaWZvcm1CaW5kaW5nW11cclxuKSA9PiB7XHJcbiAgY29uc3QgY29tcG9uZW50cyA9IHVuaWZvcm1zLm1hcCh1bmlmb3JtID0+IHtcclxuICAgIGNvbnN0IGtleSA9IHtcclxuICAgICAgLi4udW5pZm9ybSxcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgZnJvbUNhY2hlID0gdW5pZm9ybUNvbXBvbmVudENhY2hlLmdldChrZXkpO1xyXG5cclxuICAgIGlmIChmcm9tQ2FjaGUpIHtcclxuICAgICAgZnJvbUNhY2hlLnVuaWZvcm1JbmZvLmF0dGFjaFRvUHJvZ3JhbShwcm9ncmFtKTtcclxuICAgICAgcmV0dXJuIHsga2V5LCB2YWx1ZTogZnJvbUNhY2hlIH07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zdCB1bmlmb3JtSW5mbyA9IG5ldyBVbmlmb3JtSW5mbyhcclxuICAgICAgICBjb250ZXh0LFxyXG4gICAgICAgIHByb2dyYW0sXHJcbiAgICAgICAgdW5pZm9ybS5uYW1lLFxyXG4gICAgICAgIHVuaWZvcm0udHlwZVxyXG4gICAgICApO1xyXG5cclxuICAgICAgY29uc3QgYXBwbGljYWJsZUJpbmRpbmdzID0gdW5pZm9ybUJpbmRpbmdzLmZpbHRlcihcclxuICAgICAgICBiID0+IGIudHlwZSA9PT0gdW5pZm9ybUluZm8uZ2V0VW5pZm9ybVR5cGUoKVxyXG4gICAgICApO1xyXG5cclxuICAgICAgY29uc3QgdXBkYXRlVW5pZm9ybSA9ICh2YWx1ZTogYW55KSA9PiB1bmlmb3JtSW5mby5zZXRWYWx1ZSh2YWx1ZSk7XHJcblxyXG4gICAgICBjb25zdCB7IGVsZW1lbnQsIGRpc3Bvc2UgfSA9IGFwcGxpY2FibGVCaW5kaW5ncy5sZW5ndGhcclxuICAgICAgICA/IGNyZWF0ZVNlbGVjdGlvbkNvbXBvbmVudChcclxuICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgIGNyZWF0ZUN1c3RvbU9wdGlvbih1bmlmb3JtSW5mbyksXHJcbiAgICAgICAgICAgICAgLi4uY3JlYXRlQmluZGluZ09wdGlvbnMoYXBwbGljYWJsZUJpbmRpbmdzLCB1bmlmb3JtSW5mbyksXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIHVwZGF0ZVVuaWZvcm1cclxuICAgICAgICAgIClcclxuICAgICAgICA6IGNyZWF0ZUVkaXRhYmxlQ29tcG9uZW50KHVuaWZvcm1JbmZvLCB1cGRhdGVVbmlmb3JtKTtcclxuXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAga2V5LFxyXG4gICAgICAgIHZhbHVlOiB7XHJcbiAgICAgICAgICBjb21wb25lbnQ6IHdpdGhMYWJlbChlbGVtZW50LCB1bmlmb3JtLm5hbWUpLFxyXG4gICAgICAgICAgdW5pZm9ybUluZm8sXHJcbiAgICAgICAgICBkaXNwb3NlOiAoKSA9PiB7XHJcbiAgICAgICAgICAgIGRpc3Bvc2U/LigpO1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICByZWJ1aWxkQ2FjaGUoY29tcG9uZW50cyk7XHJcbiAgcmV0dXJuIGNvbXBvbmVudHMubWFwKHVjID0+IHVjLnZhbHVlKTtcclxufTtcclxuXHJcbmNvbnN0IGNyZWF0ZUN1c3RvbU9wdGlvbiA9ICh1bmlmb3JtSW5mbzogVW5pZm9ybUluZm8pID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAgaWQ6IFwiY3VzdG9tXCIsXHJcbiAgICBkaXNwbGF5OiBcIkN1c3RvbVwiLFxyXG4gICAgLi4uY3JlYXRlRWRpdGFibGVDb21wb25lbnQodW5pZm9ybUluZm8pLFxyXG4gIH07XHJcbn07XHJcblxyXG5jb25zdCBjcmVhdGVCaW5kaW5nT3B0aW9ucyA9IChcclxuICB1bmlmb3JtQmluZGluZ3M6IFVuaWZvcm1CaW5kaW5nW10sXHJcbiAgdW5pZm9ybUluZm86IFVuaWZvcm1JbmZvXHJcbikgPT4ge1xyXG4gIHJldHVybiB1bmlmb3JtQmluZGluZ3MubWFwKGJpbmRpbmcgPT4ge1xyXG4gICAgY29uc3QgZWxlbWVudCA9IGNyZWF0ZUVsZW1lbnRGb3JUeXBlKFxyXG4gICAgICB1bmlmb3JtSW5mby5nZXRVbmlmb3JtVHlwZSgpLFxyXG4gICAgICBmYWxzZSxcclxuICAgICAgYmluZGluZy52YWx1ZVxyXG4gICAgKTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBpZDogdXVpZHY0KCksXHJcbiAgICAgIGVsZW1lbnQsXHJcbiAgICAgIGRpc3BsYXk6IGJpbmRpbmcubmFtZSxcclxuICAgICAgdmFsdWU6IGJpbmRpbmcudmFsdWUsXHJcbiAgICB9O1xyXG4gIH0pO1xyXG59O1xyXG5cclxuY29uc3QgY3JlYXRlU2VsZWN0aW9uQ29tcG9uZW50ID0gKFxyXG4gIG9wdGlvbnM6IHtcclxuICAgIGlkOiBzdHJpbmc7XHJcbiAgICBkaXNwbGF5OiBzdHJpbmc7XHJcbiAgICB2YWx1ZTogT2JzZXJ2YWJsZTxhbnk+O1xyXG4gICAgZWxlbWVudDogSFRNTEVsZW1lbnQ7XHJcbiAgfVtdLFxyXG4gIG9uQ2hhbmdlOiAodmFsdWU6IGFueSkgPT4gdm9pZFxyXG4pID0+IHtcclxuICBsZXQgZGV0YWNoOiAoKSA9PiB2b2lkID0gbnVsbDtcclxuICBjb25zdCBlbGVtZW50ID0gY3JlYXRlRGl2KFwiY29sdW1uLXdpdGgtZ2FwXCIsIFtcclxuICAgIGNyZWF0ZUVsZW1lbnRzRHJvcGRvd24ob3B0aW9ucywgaWQgPT4ge1xyXG4gICAgICBkZXRhY2g/LigpO1xyXG4gICAgICBjb25zdCBvcHRpb24gPSBvcHRpb25zLmZpbmQobyA9PiBvLmlkID09PSBpZCk7XHJcbiAgICAgIGNvbnN0IGNhbGxiYWNrID0gKHZhbHVlOiBhbnkpID0+IG9uQ2hhbmdlKHZhbHVlKTtcclxuICAgICAgb3B0aW9uLnZhbHVlLmF0dGFjaChjYWxsYmFjayk7XHJcbiAgICAgIGNhbGxiYWNrKG9wdGlvbi52YWx1ZS5nZXRWYWx1ZSgpKTtcclxuICAgICAgZGV0YWNoID0gKCkgPT4gb3B0aW9uLnZhbHVlLmRldGFjaChjYWxsYmFjayk7XHJcbiAgICB9KSxcclxuICAgIC4uLm9wdGlvbnMubWFwKG8gPT4gby5lbGVtZW50KSxcclxuICBdKTtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGVsZW1lbnQsXHJcbiAgICBkaXNwb3NlOiAoKSA9PiBkZXRhY2g/LigpLFxyXG4gIH07XHJcbn07XHJcblxyXG5jb25zdCBjcmVhdGVFZGl0YWJsZUNvbXBvbmVudCA9IChcclxuICB1bmlmb3JtSW5mbzogVW5pZm9ybUluZm8sXHJcbiAgb25DaGFuZ2U/OiAodmFsdWU6IGFueSkgPT4gdm9pZFxyXG4pID0+IHtcclxuICBjb25zdCBpbml0aWFsVmFsdWUgPSBnZXREZWZhdWx0VmFsdWUodW5pZm9ybUluZm8uZ2V0VW5pZm9ybVR5cGUoKSk7XHJcbiAgY29uc3QgY3VzdG9tVmFsdWUgPSBuZXcgT2JzZXJ2YWJsZTxhbnk+KGluaXRpYWxWYWx1ZSk7XHJcblxyXG4gIGlmIChvbkNoYW5nZSkge1xyXG4gICAgY3VzdG9tVmFsdWUuYXR0YWNoKCh2YWx1ZTogYW55KSA9PiBvbkNoYW5nZSh2YWx1ZSkpO1xyXG4gICAgb25DaGFuZ2UoaW5pdGlhbFZhbHVlKTtcclxuICB9XHJcblxyXG4gIGNvbnN0IGVsZW1lbnQgPSBjcmVhdGVFbGVtZW50Rm9yVHlwZShcclxuICAgIHVuaWZvcm1JbmZvLmdldFVuaWZvcm1UeXBlKCksXHJcbiAgICB0cnVlLFxyXG4gICAgY3VzdG9tVmFsdWVcclxuICApO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgZWxlbWVudCxcclxuICAgIHZhbHVlOiBjdXN0b21WYWx1ZSxcclxuICAgIGRpc3Bvc2U6ICgpID0+IGN1c3RvbVZhbHVlLmRldGFjaEFsbCgpLFxyXG4gIH07XHJcbn07XHJcblxyXG5jb25zdCBjcmVhdGVFbGVtZW50Rm9yVHlwZSA9IChcclxuICB1bmlmb3JtVHlwZTogVW5pZm9ybVR5cGUsXHJcbiAgZWRpdGFibGU6IGJvb2xlYW4sXHJcbiAgY3VycmVudFZhbHVlOiBPYnNlcnZhYmxlPGFueT5cclxuKSA9PiB7XHJcbiAgc3dpdGNoICh1bmlmb3JtVHlwZSkge1xyXG4gICAgY2FzZSBVbmlmb3JtVHlwZS5GTE9BVF9WRUMyOlxyXG4gICAgICByZXR1cm4gY3JlYXRlRWxlbWVudFZlY3RvcigyLCBjdXJyZW50VmFsdWUsIGVkaXRhYmxlKTtcclxuICAgIGNhc2UgVW5pZm9ybVR5cGUuRkxPQVRfVkVDMzpcclxuICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnRWZWN0b3IoMywgY3VycmVudFZhbHVlLCBlZGl0YWJsZSk7XHJcbiAgICBjYXNlIFVuaWZvcm1UeXBlLkZMT0FUX1ZFQzQ6XHJcbiAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50VmVjdG9yKDQsIGN1cnJlbnRWYWx1ZSwgZWRpdGFibGUpO1xyXG4gICAgY2FzZSBVbmlmb3JtVHlwZS5GTE9BVF9NQVQ0OlxyXG4gICAgICByZXR1cm4gY3JlYXRlRWxlbWVudE1hdHJpeCg0LCBjdXJyZW50VmFsdWUsIGVkaXRhYmxlKTtcclxuICAgIC8vY2FzZSBVbmlmb3JtVHlwZS5TQU1QTEVSXzJEOlxyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnROb3RTdXBwb3J0ZWQoKTtcclxuICB9XHJcbn07XHJcblxyXG5jb25zdCBjcmVhdGVFbGVtZW50VmVjdG9yID0gPFQgZXh0ZW5kcyBudW1iZXJbXT4oXHJcbiAgc2l6ZTogbnVtYmVyLFxyXG4gIHZhbHVlOiBPYnNlcnZhYmxlPFQ+LFxyXG4gIGVkaXRhYmxlOiBib29sZWFuXHJcbikgPT4ge1xyXG4gIGNvbnN0IFtjdXN0b21FbGVtZW50LCBjdXN0b21Db250cm9sbGVyXSA9IGNyZWF0ZVZlY3RvcihzaXplLCB2ID0+IHtcclxuICAgIHZhbHVlLnNldFZhbHVlKHYgYXMgVCk7XHJcbiAgfSk7XHJcbiAgY3VzdG9tQ29udHJvbGxlci5zZXRWYWx1ZXModmFsdWUuZ2V0VmFsdWUoKSk7XHJcblxyXG4gIGlmICghZWRpdGFibGUpIHtcclxuICAgIGNvbnN0IGxpc3RlbmVyID0gKHZhbHVlOiBUKSA9PiBjdXN0b21Db250cm9sbGVyLnNldFZhbHVlcyh2YWx1ZSk7XHJcbiAgICB2YWx1ZS5hdHRhY2gobGlzdGVuZXIpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGN1c3RvbUVsZW1lbnQ7XHJcbn07XHJcblxyXG5jb25zdCBjcmVhdGVFbGVtZW50TWF0cml4ID0gPFQgZXh0ZW5kcyBudW1iZXJbXT4oXHJcbiAgc2l6ZTogbnVtYmVyLFxyXG4gIHZhbHVlOiBPYnNlcnZhYmxlPFQ+LFxyXG4gIGVkaXRhYmxlOiBib29sZWFuXHJcbikgPT4ge1xyXG4gIGNvbnN0IFtjdXN0b21FbGVtZW50LCBjdXN0b21Db250cm9sbGVyXSA9IGNyZWF0ZU1hdHJpeChzaXplLCB2ID0+IHtcclxuICAgIHZhbHVlLnNldFZhbHVlKHYgYXMgVCk7XHJcbiAgfSk7XHJcbiAgY3VzdG9tQ29udHJvbGxlci5zZXRWYWx1ZXModmFsdWUuZ2V0VmFsdWUoKSk7XHJcblxyXG4gIGlmICghZWRpdGFibGUpIHtcclxuICAgIGNvbnN0IGxpc3RlbmVyID0gKHZhbHVlOiBUKSA9PiBjdXN0b21Db250cm9sbGVyLnNldFZhbHVlcyh2YWx1ZSk7XHJcbiAgICB2YWx1ZS5hdHRhY2gobGlzdGVuZXIpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGN1c3RvbUVsZW1lbnQ7XHJcbn07XHJcbiIsImltcG9ydCB7IFZlY3RvcjJBcnJheSwgVmVjdG9yM0FycmF5LCBWZWN0b3I0QXJyYXkgfSBmcm9tIFwiLi4vdHlwZXNcIjtcclxuaW1wb3J0IHsgY3JlYXRlTXVsdGlOdW1iZXJJbnB1dCB9IGZyb20gXCIuL2hlbHBlcnNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVWZWN0b3IgPSA8VCBleHRlbmRzIG51bWJlcltdPihcclxuICBlbGVtZW50czogbnVtYmVyLFxyXG4gIG9uQ2hhbmdlPzogKG5ld1ZhbHVlOiBUKSA9PiB2b2lkXHJcbikgPT4gY3JlYXRlTXVsdGlOdW1iZXJJbnB1dDxUPihvbkNoYW5nZSwgMSwgZWxlbWVudHMpO1xyXG5cclxuLy8gZXhwb3J0IGNvbnN0IGNyZWF0ZVZlY3RvcjIgPSAob25DaGFuZ2U/OiAobmV3VmFsdWU6IFZlY3RvcjJBcnJheSkgPT4gdm9pZCkgPT5cclxuLy8gICBjcmVhdGVNdWx0aU51bWJlcklucHV0PFZlY3RvcjJBcnJheT4ob25DaGFuZ2UsIDEsIDIpO1xyXG5cclxuLy8gZXhwb3J0IGNvbnN0IGNyZWF0ZVZlY3RvcjMgPSAob25DaGFuZ2U/OiAobmV3VmFsdWU6IFZlY3RvcjNBcnJheSkgPT4gdm9pZCkgPT5cclxuLy8gICBjcmVhdGVNdWx0aU51bWJlcklucHV0PFZlY3RvcjNBcnJheT4ob25DaGFuZ2UsIDEsIDMpO1xyXG5cclxuLy8gZXhwb3J0IGNvbnN0IGNyZWF0ZVZlY3RvcjQgPSAob25DaGFuZ2U/OiAobmV3VmFsdWU6IFZlY3RvcjRBcnJheSkgPT4gdm9pZCkgPT5cclxuLy8gICBjcmVhdGVNdWx0aU51bWJlcklucHV0PFZlY3RvcjRBcnJheT4ob25DaGFuZ2UsIDEsIDQpO1xyXG4iLCJpbXBvcnQgeyBNYXRyaXgzQXJyYXksIE1hdHJpeDRBcnJheSB9IGZyb20gXCIuLi90eXBlc1wiO1xyXG5pbXBvcnQgeyBjcmVhdGVNdWx0aU51bWJlcklucHV0IH0gZnJvbSBcIi4vaGVscGVyc1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGNyZWF0ZU1hdHJpeCA9IDxUIGV4dGVuZHMgbnVtYmVyW10+KFxyXG4gIHNpemU6IG51bWJlcixcclxuICBvbkNoYW5nZT86IChuZXdWYWx1ZTogVCkgPT4gdm9pZFxyXG4pID0+IGNyZWF0ZU11bHRpTnVtYmVySW5wdXQ8VD4ob25DaGFuZ2UsIHNpemUsIHNpemUpO1xyXG5cclxuLy8gZXhwb3J0IGNvbnN0IGNyZWF0ZU1hdHJpeDMgPSAob25DaGFuZ2U/OiAobmV3VmFsdWU6IE1hdHJpeDNBcnJheSkgPT4gdm9pZCkgPT5cclxuLy8gICBjcmVhdGVNdWx0aU51bWJlcklucHV0PE1hdHJpeDNBcnJheT4ob25DaGFuZ2UsIDMsIDMpO1xyXG5cclxuLy8gZXhwb3J0IGNvbnN0IGNyZWF0ZU1hdHJpeDQgPSAob25DaGFuZ2U/OiAobmV3VmFsdWU6IE1hdHJpeDRBcnJheSkgPT4gdm9pZCkgPT5cclxuLy8gICBjcmVhdGVNdWx0aU51bWJlcklucHV0PE1hdHJpeDRBcnJheT4ob25DaGFuZ2UsIDQsIDQpO1xyXG4iLCJpbXBvcnQgeyBJbmRleEJ1ZmZlckluZm8gfSBmcm9tIFwiLi9pbmRleEJ1ZmZlclwiO1xyXG5pbXBvcnQgeyByZW1vdmVMYXN0IH0gZnJvbSBcIi4uLy4uLy4uLy4uL2NvbW1vbi9hcnJheVwiO1xyXG5pbXBvcnQgeyBoYXNQcm9wZXJ0eSB9IGZyb20gXCIuLi90eXBlR3VhcmRzXCI7XHJcbmltcG9ydCB7IEF0dHJpYnV0ZUJ1ZmZlckluZm8sIEF0dHJpYnV0ZUJ1ZmZlclR5cGUgfSBmcm9tIFwiLi9hdHRyaWJ1dGVCdWZmZXJcIjtcclxuaW1wb3J0IHsgVW5pZm9ybUluZm8sIFVuaWZvcm1UeXBlIH0gZnJvbSBcIi4vdW5pZm9ybVwiO1xyXG5cclxuZXhwb3J0IHR5cGUgRHJhd09wdGlvbnMgPSB7XHJcbiAgZHJhd01vZGU6IFwiZWxlbWVudHNcIiB8IFwiYXJyYXlzXCI7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgY29tcGlsZVNoYWRlciA9IChcclxuICByZW5kZXJpbmdDb250ZXh0OiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsXHJcbiAgdHlwZTogR0xlbnVtLFxyXG4gIHNvdXJjZTogc3RyaW5nXHJcbik6IFdlYkdMU2hhZGVyIHwgeyBlcnJvcjogc3RyaW5nIH0gPT4ge1xyXG4gIGNvbnN0IHNoYWRlciA9IHJlbmRlcmluZ0NvbnRleHQuY3JlYXRlU2hhZGVyKHR5cGUpO1xyXG4gIHJlbmRlcmluZ0NvbnRleHQuc2hhZGVyU291cmNlKHNoYWRlciwgc291cmNlKTtcclxuICByZW5kZXJpbmdDb250ZXh0LmNvbXBpbGVTaGFkZXIoc2hhZGVyKTtcclxuXHJcbiAgY29uc3QgcmVzdWx0ID0gcmVuZGVyaW5nQ29udGV4dC5nZXRTaGFkZXJQYXJhbWV0ZXIoXHJcbiAgICBzaGFkZXIsXHJcbiAgICByZW5kZXJpbmdDb250ZXh0LkNPTVBJTEVfU1RBVFVTXHJcbiAgKTtcclxuXHJcbiAgaWYgKHJlc3VsdCkge1xyXG4gICAgcmV0dXJuIHNoYWRlcjtcclxuICB9IGVsc2Uge1xyXG4gICAgY29uc3QgZXJyb3IgPSByZW5kZXJpbmdDb250ZXh0LmdldFNoYWRlckluZm9Mb2coc2hhZGVyKTtcclxuICAgIHJlbmRlcmluZ0NvbnRleHQuZGVsZXRlU2hhZGVyKHNoYWRlcik7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBlcnJvcixcclxuICAgIH07XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGNvbXBpbGVTaGFkZXJzRnJvbVNvdXJjZSA9IChcclxuICBjb250ZXh0OiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsXHJcbiAgdmVydGV4U2hhZGVyQ29udGVudDogc3RyaW5nLFxyXG4gIGZyYWdtZW50U2hhZGVyQ29udGVudDogc3RyaW5nXHJcbikgPT4ge1xyXG4gIGNvbnN0IHZlcnRleFNoYWRlciA9IGNvbXBpbGVTaGFkZXIoXHJcbiAgICBjb250ZXh0LFxyXG4gICAgY29udGV4dC5WRVJURVhfU0hBREVSLFxyXG4gICAgdmVydGV4U2hhZGVyQ29udGVudFxyXG4gICk7XHJcblxyXG4gIGNvbnN0IGZyYWdtZW50U2hhZGVyID0gY29tcGlsZVNoYWRlcihcclxuICAgIGNvbnRleHQsXHJcbiAgICBjb250ZXh0LkZSQUdNRU5UX1NIQURFUixcclxuICAgIGZyYWdtZW50U2hhZGVyQ29udGVudFxyXG4gICk7XHJcblxyXG4gIGxldCB2ZXJ0ZXhFcnJvcjogc3RyaW5nID0gdW5kZWZpbmVkO1xyXG4gIGlmIChoYXNQcm9wZXJ0eSh2ZXJ0ZXhTaGFkZXIsIFwiZXJyb3JcIikpIHtcclxuICAgIHZlcnRleEVycm9yID0gcmVtb3ZlTGFzdCh2ZXJ0ZXhTaGFkZXIuZXJyb3IsIDEpO1xyXG4gIH1cclxuXHJcbiAgbGV0IGZyYWdtZW50RXJyb3I6IHN0cmluZyA9IHVuZGVmaW5lZDtcclxuICBpZiAoaGFzUHJvcGVydHkoZnJhZ21lbnRTaGFkZXIsIFwiZXJyb3JcIikpIHtcclxuICAgIGZyYWdtZW50RXJyb3IgPSByZW1vdmVMYXN0KGZyYWdtZW50U2hhZGVyLmVycm9yLCAxKTtcclxuICB9XHJcblxyXG4gIGlmICh2ZXJ0ZXhFcnJvciB8fCBmcmFnbWVudEVycm9yKSB7XHJcbiAgICAvL3RvZG8gY2xlYW51cFxyXG4gICAgcmV0dXJuIFt2ZXJ0ZXhFcnJvciwgZnJhZ21lbnRFcnJvcl0gYXMgU2hhZGVyQ29tcGlsZUVycm9ycztcclxuICB9XHJcblxyXG4gIHJldHVybiBjcmVhdGVQcm9ncmFtKGNvbnRleHQsIHZlcnRleFNoYWRlciwgZnJhZ21lbnRTaGFkZXIpO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGNyZWF0ZVByb2dyYW0gPSAoXHJcbiAgcmVuZGVyaW5nQ29udGV4dDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LFxyXG4gIHZlcnRleFNoYWRlcjogV2ViR0xTaGFkZXIsXHJcbiAgZnJhZ21lbnRTaGFkZXI6IFdlYkdMU2hhZGVyXHJcbikgPT4ge1xyXG4gIGNvbnN0IHByb2dyYW0gPSByZW5kZXJpbmdDb250ZXh0LmNyZWF0ZVByb2dyYW0oKTtcclxuICByZW5kZXJpbmdDb250ZXh0LmF0dGFjaFNoYWRlcihwcm9ncmFtLCB2ZXJ0ZXhTaGFkZXIpO1xyXG4gIHJlbmRlcmluZ0NvbnRleHQuYXR0YWNoU2hhZGVyKHByb2dyYW0sIGZyYWdtZW50U2hhZGVyKTtcclxuICByZW5kZXJpbmdDb250ZXh0LmxpbmtQcm9ncmFtKHByb2dyYW0pO1xyXG5cclxuICBjb25zdCByZXN1bHQgPSByZW5kZXJpbmdDb250ZXh0LmdldFByb2dyYW1QYXJhbWV0ZXIoXHJcbiAgICBwcm9ncmFtLFxyXG4gICAgcmVuZGVyaW5nQ29udGV4dC5MSU5LX1NUQVRVU1xyXG4gICk7XHJcblxyXG4gIGlmIChyZXN1bHQpIHtcclxuICAgIHJldHVybiBwcm9ncmFtO1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZW5kZXJpbmdDb250ZXh0LmRlbGV0ZVByb2dyYW0ocHJvZ3JhbSk7XHJcblxyXG4gICAgdGhyb3cgbmV3IEVycm9yKFxyXG4gICAgICBgQ3JlYXRpbmcgcHJvZ3JhbSBmYWlsZWQ6ICR7cmVuZGVyaW5nQ29udGV4dC5nZXRQcm9ncmFtSW5mb0xvZyhwcm9ncmFtKX1gXHJcbiAgICApO1xyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRQcm9ncmFtVW5pZm9ybXMgPSAoXHJcbiAgY29udGV4dDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LFxyXG4gIHByb2dyYW06IFdlYkdMUHJvZ3JhbVxyXG4pID0+IHtcclxuICBjb25zdCBudW1Vbmlmb3JtcyA9IGNvbnRleHQuZ2V0UHJvZ3JhbVBhcmFtZXRlcihcclxuICAgIHByb2dyYW0sXHJcbiAgICBjb250ZXh0LkFDVElWRV9VTklGT1JNU1xyXG4gICk7XHJcbiAgY29uc3QgcmVzdWx0OiB7IG5hbWU6IHN0cmluZzsgdHlwZTogVW5pZm9ybVR5cGUgfVtdID0gW107XHJcblxyXG4gIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBudW1Vbmlmb3JtczsgKytpbmRleCkge1xyXG4gICAgY29uc3QgdW5pZm9ybSA9IGNvbnRleHQuZ2V0QWN0aXZlVW5pZm9ybShwcm9ncmFtLCBpbmRleCk7XHJcbiAgICByZXN1bHQucHVzaCh7IG5hbWU6IHVuaWZvcm0ubmFtZSwgdHlwZTogdW5pZm9ybS50eXBlIH0pO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHJlc3VsdDtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRQcm9ncmFtQXR0cmlidXRlQnVmZmVycyA9IChcclxuICBjb250ZXh0OiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsXHJcbiAgcHJvZ3JhbTogV2ViR0xQcm9ncmFtXHJcbikgPT4ge1xyXG4gIGNvbnN0IG51bUF0dHJpYnV0ZUJ1ZmZlcnMgPSBjb250ZXh0LmdldFByb2dyYW1QYXJhbWV0ZXIoXHJcbiAgICBwcm9ncmFtLFxyXG4gICAgY29udGV4dC5BQ1RJVkVfQVRUUklCVVRFU1xyXG4gICk7XHJcblxyXG4gIGNvbnN0IHJlc3VsdDogeyBuYW1lOiBzdHJpbmc7IHR5cGU6IEF0dHJpYnV0ZUJ1ZmZlclR5cGUgfVtdID0gW107XHJcblxyXG4gIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBudW1BdHRyaWJ1dGVCdWZmZXJzOyArK2luZGV4KSB7XHJcbiAgICBjb25zdCBhdHRyaWJ1dGVCdWZmZXIgPSBjb250ZXh0LmdldEFjdGl2ZUF0dHJpYihwcm9ncmFtLCBpbmRleCk7XHJcbiAgICByZXN1bHQucHVzaCh7IG5hbWU6IGF0dHJpYnV0ZUJ1ZmZlci5uYW1lLCB0eXBlOiBhdHRyaWJ1dGVCdWZmZXIudHlwZSB9KTtcclxuICB9XHJcblxyXG4gIHJldHVybiByZXN1bHQ7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgcmVuZGVyUHJvZ3JhbSA9IChcclxuICBjb250ZXh0OiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsXHJcbiAgcHJvZ3JhbTogV2ViR0xQcm9ncmFtLFxyXG4gIHJlbmRlckluZm86IHtcclxuICAgIHVuaWZvcm1JbmZvczogVW5pZm9ybUluZm9bXTtcclxuICAgIGF0dHJpYnV0ZUJ1ZmZlckluZm9zOiBBdHRyaWJ1dGVCdWZmZXJJbmZvW107XHJcbiAgICBpbmRleEJ1ZmZlckluZm86IEluZGV4QnVmZmVySW5mbztcclxuICAgIC8vdGV4dHVyZXNcclxuICB9LFxyXG4gIGRyYXdPcHRpb25zOiBEcmF3T3B0aW9uc1xyXG4pID0+IHtcclxuICAvL3RvZG9cclxuICBjb250ZXh0LnVzZVByb2dyYW0ocHJvZ3JhbSk7XHJcbiAgY29udGV4dC52aWV3cG9ydCgwLCAwLCBjb250ZXh0LmNhbnZhcy53aWR0aCwgY29udGV4dC5jYW52YXMuaGVpZ2h0KTtcclxuICAvL2NvbnRleHQuY2xlYXJDb2xvcigwLCAwLCAwLCAwKTtcclxuICBjb250ZXh0LmNsZWFyQ29sb3IoMC4wLCAwLjAsIDAuMCwgMS4wKTsgLy8gQ2xlYXIgdG8gYmxhY2ssIGZ1bGx5IG9wYXF1ZVxyXG4gIGNvbnRleHQuY2xlYXJEZXB0aCgxLjApOyAvLyBDbGVhciBldmVyeXRoaW5nXHJcbiAgLy8gZ2wuZW5hYmxlKGdsLkRFUFRIX1RFU1QpOyAgICAgICAgICAgLy8gRW5hYmxlIGRlcHRoIHRlc3RpbmdcclxuICBjb250ZXh0LmVuYWJsZShjb250ZXh0LkRFUFRIX1RFU1QpO1xyXG5cclxuICBjb250ZXh0LmRlcHRoRnVuYyhjb250ZXh0LkxFUVVBTCk7IC8vIE5lYXIgdGhpbmdzIG9ic2N1cmUgZmFyIHRoaW5nc1xyXG4gIGNvbnRleHQuY2xlYXIoY29udGV4dC5DT0xPUl9CVUZGRVJfQklUIHwgY29udGV4dC5ERVBUSF9CVUZGRVJfQklUKTtcclxuICAvL2NvbnRleHQuZW5hYmxlKGNvbnRleHQuQ1VMTF9GQUNFKTtcclxuXHJcbiAgcmVuZGVySW5mby51bmlmb3JtSW5mb3MuZm9yRWFjaCh1ID0+IHUuc2V0VW5pZm9ybSgpKTtcclxuICByZW5kZXJJbmZvLmF0dHJpYnV0ZUJ1ZmZlckluZm9zLmZvckVhY2goYWIgPT4gYWIuc2V0QXR0cmlidXRlQnVmZmVyKCkpO1xyXG5cclxuICBjb25zdCBwcmltaXRpdmVUeXBlID0gY29udGV4dC5UUklBTkdMRVM7XHJcbiAgY29uc3Qgb2Zmc2V0ID0gMDtcclxuXHJcbiAgaWYgKGRyYXdPcHRpb25zLmRyYXdNb2RlID09PSBcImFycmF5c1wiKSB7XHJcbiAgICBjb25zdCBudW1FbGVtZW50cyA9IE1hdGgubWluKFxyXG4gICAgICAuLi5yZW5kZXJJbmZvLmF0dHJpYnV0ZUJ1ZmZlckluZm9zLm1hcChhYiA9PiBhYi5nZXRDb3VudCgpKVxyXG4gICAgKTtcclxuICAgIGNvbnRleHQuZHJhd0FycmF5cyhwcmltaXRpdmVUeXBlLCBvZmZzZXQsIG51bUVsZW1lbnRzKTtcclxuICB9IGVsc2Uge1xyXG4gICAgcmVuZGVySW5mby5pbmRleEJ1ZmZlckluZm8uc2V0SW5kZXhCdWZmZXIoKTtcclxuICAgIGNvbnRleHQuZHJhd0VsZW1lbnRzKFxyXG4gICAgICBwcmltaXRpdmVUeXBlLFxyXG4gICAgICByZW5kZXJJbmZvLmluZGV4QnVmZmVySW5mby5nZXRDb3VudCgpLCAvL251bUVsZW1lbnRzLFxyXG4gICAgICBjb250ZXh0LlVOU0lHTkVEX1NIT1JULFxyXG4gICAgICBvZmZzZXRcclxuICAgICk7XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgU2hhZGVyQ29tcGlsZUVycm9ycyA9IFtcclxuICB2ZXJ0ZXhTaGFkZXJFcnJvcnM6IHN0cmluZyxcclxuICBmcmFnbWVudFNoYWRlckVycm9yczogc3RyaW5nXHJcbl07XHJcbmV4cG9ydCBjb25zdCBmb3JtYXRTaGFkZXJDb21waWxlRXJyb3JzID0gKHJlc3VsdDogU2hhZGVyQ29tcGlsZUVycm9ycykgPT4ge1xyXG4gIGNvbnN0IFt2ZXJ0ZXhTaGFkZXJFcnJvcnMsIGZyYWdtZW50U2hhZGVyRXJyb3JzXSA9IHJlc3VsdDtcclxuXHJcbiAgY29uc3QgZXJyb3JzOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuICBpZiAodmVydGV4U2hhZGVyRXJyb3JzKSB7XHJcbiAgICBlcnJvcnMucHVzaChcIlZFUlRFWCBTSEFERVI6XCIsIHZlcnRleFNoYWRlckVycm9ycyk7XHJcbiAgfVxyXG5cclxuICBpZiAoZnJhZ21lbnRTaGFkZXJFcnJvcnMpIHtcclxuICAgIGVycm9ycy5wdXNoKFwiRlJBR01FTlQgU0hBREVSOlwiLCBmcmFnbWVudFNoYWRlckVycm9ycyk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gZXJyb3JzLmpvaW4oXCJcXHJcXG5cIik7XHJcbn07XHJcbiIsImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwiLi8uLi9vYnNlcnZhYmxlXCI7XHJcbmltcG9ydCB7IHV1aWR2NCB9IGZyb20gXCIuLi8uLi8uLi8uLi9jb21tb24vdXVpZFwiO1xyXG5pbXBvcnQgeyBjcmVhdGVFbGVtZW50c0Ryb3Bkb3duIH0gZnJvbSBcIi4vLi4vLi4vY29tcG9uZW50cy9kcm9wZG93blwiO1xyXG5pbXBvcnQgeyBDb21wb3NpdGVLZXlNYXAgfSBmcm9tIFwiLi4vLi4vdXRpbHMvY29tcG9zaXRlS2V5TWFwXCI7XHJcbmltcG9ydCB7IGNyZWF0ZURpdiwgd2l0aExhYmVsIH0gZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvd3JhcHBlcnNcIjtcclxuaW1wb3J0IHsgQXR0cmlidXRlQnVmZmVySW5mbywgQXR0cmlidXRlQnVmZmVyVHlwZSB9IGZyb20gXCIuL2F0dHJpYnV0ZUJ1ZmZlclwiO1xyXG5pbXBvcnQgeyBWZWN0b3I0QXJyYXkgfSBmcm9tIFwiLi4vLi4vdHlwZXNcIjtcclxuaW1wb3J0IHsgY3JlYXRlRWxlbWVudE5vdFN1cHBvcnRlZCB9IGZyb20gXCIuL2NvbW1vblwiO1xyXG5cclxudHlwZSBDYWNoZUtleSA9IHtcclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgdHlwZTogQXR0cmlidXRlQnVmZmVyVHlwZTtcclxufTtcclxuXHJcbnR5cGUgQ2FjaGVWYWx1ZSA9IHtcclxuICBjb21wb25lbnQ6IEhUTUxFbGVtZW50O1xyXG4gIGF0dHJpYnV0ZUJ1ZmZlckluZm86IEF0dHJpYnV0ZUJ1ZmZlckluZm87XHJcbiAgZGlzcG9zZTogKCkgPT4gdm9pZDtcclxufTtcclxuXHJcbmNvbnN0IGtleVNlbGVjdG9yID0gKGtleTogQ2FjaGVLZXkpOiBzdHJpbmcgPT4gYCR7a2V5Lm5hbWV9OyR7a2V5LnR5cGV9YDtcclxuY29uc3QgY29tcG9uZW50Q2FjaGUgPSBuZXcgQ29tcG9zaXRlS2V5TWFwPENhY2hlS2V5LCBDYWNoZVZhbHVlPihrZXlTZWxlY3Rvcik7XHJcblxyXG5jb25zdCByZWJ1aWxkQ2FjaGUgPSAobmV3VmFsdWVzOiB7IGtleTogQ2FjaGVLZXk7IHZhbHVlOiBDYWNoZVZhbHVlIH1bXSkgPT4ge1xyXG4gIGNvbnN0IG5ld1ZhbHVlc1N0cktleXMgPSBuZXdWYWx1ZXMubWFwKHYgPT4ga2V5U2VsZWN0b3Iodi5rZXkpKTtcclxuICBjb25zdCBjb21wb25lbnRzVG9SZW1vdmUgPSBjb21wb25lbnRDYWNoZVxyXG4gICAgLmVudHJpZXNTdHJLZXkoKVxyXG4gICAgLmZpbHRlcihlID0+ICFuZXdWYWx1ZXNTdHJLZXlzLmluY2x1ZGVzKGVbMF0pKTtcclxuXHJcbiAgY29tcG9uZW50c1RvUmVtb3ZlLmZvckVhY2goYyA9PiB7XHJcbiAgICBjWzFdLmRpc3Bvc2UoKTtcclxuICAgIGNvbXBvbmVudENhY2hlLmRlbGV0ZVN0cktleShjWzBdKTtcclxuICB9KTtcclxuXHJcbiAgbmV3VmFsdWVzLmZvckVhY2gobncgPT4ge1xyXG4gICAgaWYgKCFjb21wb25lbnRDYWNoZS5oYXMobncua2V5KSkgY29tcG9uZW50Q2FjaGUuc2V0KG53LmtleSwgbncudmFsdWUpO1xyXG4gIH0pO1xyXG59O1xyXG5cclxuY29uc3QgZ2V0RGVmYXVsdFZhbHVlID0gKHR5cGU6IEF0dHJpYnV0ZUJ1ZmZlclR5cGUpID0+IHtcclxuICByZXR1cm4gW1xyXG4gICAgWzAsIDAsIDAsIDFdLFxyXG4gICAgWzAsIDAuNSwgMCwgMV0sXHJcbiAgICBbMC45LCAwLCAwLCAxXSxcclxuICAgIFswLCAwLjUsIDAsIDFdLFxyXG4gICAgWzAuNywgMCwgMCwgMV0sXHJcbiAgICBbMC43LCAwLjUsIDAsIDFdLFxyXG4gIF07XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBBdHRyaWJ1dGVCdWZmZXJCaW5kaW5nID0ge1xyXG4gIG5hbWU6IHN0cmluZztcclxuICB0eXBlOiBBdHRyaWJ1dGVCdWZmZXJUeXBlO1xyXG4gIHZhbHVlOiBPYnNlcnZhYmxlPGFueT47XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgY3JlYXRlQXR0cmlidXRlQnVmZmVyQ29tcG9uZW50cyA9IChcclxuICBjb250ZXh0OiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsXHJcbiAgcHJvZ3JhbTogV2ViR0xQcm9ncmFtLFxyXG4gIGF0dHJpYnV0ZUJ1ZmZlcnM6IHsgbmFtZTogc3RyaW5nOyB0eXBlOiBBdHRyaWJ1dGVCdWZmZXJUeXBlIH1bXSxcclxuICBhdHRyaWJ1dGVCdWZmZXJCaW5kaW5nczogQXR0cmlidXRlQnVmZmVyQmluZGluZ1tdXHJcbikgPT4ge1xyXG4gIGNvbnN0IGNvbXBvbmVudHMgPSBhdHRyaWJ1dGVCdWZmZXJzLm1hcChhdHRyaWJ1dGVCdWZmZXIgPT4ge1xyXG4gICAgY29uc3Qga2V5ID0ge1xyXG4gICAgICAuLi5hdHRyaWJ1dGVCdWZmZXIsXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGZyb21DYWNoZSA9IGNvbXBvbmVudENhY2hlLmdldChrZXkpO1xyXG5cclxuICAgIGlmIChmcm9tQ2FjaGUpIHtcclxuICAgICAgZnJvbUNhY2hlLmF0dHJpYnV0ZUJ1ZmZlckluZm8uYXR0YWNoVG9Qcm9ncmFtKHByb2dyYW0pO1xyXG4gICAgICByZXR1cm4geyBrZXksIHZhbHVlOiBmcm9tQ2FjaGUgfTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnN0IGF0dHJpYnV0ZUJ1ZmZlckluZm8gPSBuZXcgQXR0cmlidXRlQnVmZmVySW5mbyhcclxuICAgICAgICBjb250ZXh0LFxyXG4gICAgICAgIHByb2dyYW0sXHJcbiAgICAgICAgYXR0cmlidXRlQnVmZmVyLm5hbWUsXHJcbiAgICAgICAgYXR0cmlidXRlQnVmZmVyLnR5cGVcclxuICAgICAgKTtcclxuXHJcbiAgICAgIGNvbnN0IGFwcGxpY2FibGVCaW5kaW5ncyA9IGF0dHJpYnV0ZUJ1ZmZlckJpbmRpbmdzLmZpbHRlcihcclxuICAgICAgICBiID0+IGIudHlwZSA9PT0gYXR0cmlidXRlQnVmZmVySW5mby5nZXRBdHRyaWJ1dGVCdWZmZXJUeXBlKClcclxuICAgICAgKTtcclxuXHJcbiAgICAgIGNvbnN0IHVwZGF0ZUJ1ZmZlciA9ICh2YWx1ZTogbnVtYmVyW11bXSkgPT5cclxuICAgICAgICBhdHRyaWJ1dGVCdWZmZXJJbmZvLnNldFZhbHVlKHZhbHVlKTtcclxuXHJcbiAgICAgIGNvbnN0IHsgZWxlbWVudCwgZGlzcG9zZSB9ID0gYXBwbGljYWJsZUJpbmRpbmdzLmxlbmd0aFxyXG4gICAgICAgID8gY3JlYXRlU2VsZWN0aW9uQ29tcG9uZW50KFxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgY3JlYXRlQ3VzdG9tT3B0aW9uKGF0dHJpYnV0ZUJ1ZmZlckluZm8pLFxyXG4gICAgICAgICAgICAgIC4uLmNyZWF0ZUJpbmRpbmdPcHRpb25zKGFwcGxpY2FibGVCaW5kaW5ncywgYXR0cmlidXRlQnVmZmVySW5mbyksXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIHVwZGF0ZUJ1ZmZlclxyXG4gICAgICAgICAgKVxyXG4gICAgICAgIDogY3JlYXRlRWRpdGFibGVDb21wb25lbnQoYXR0cmlidXRlQnVmZmVySW5mbywgdXBkYXRlQnVmZmVyKTtcclxuXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAga2V5LFxyXG4gICAgICAgIHZhbHVlOiB7XHJcbiAgICAgICAgICBjb21wb25lbnQ6IHdpdGhMYWJlbChlbGVtZW50LCBhdHRyaWJ1dGVCdWZmZXIubmFtZSksXHJcbiAgICAgICAgICBhdHRyaWJ1dGVCdWZmZXJJbmZvLFxyXG4gICAgICAgICAgZGlzcG9zZTogKCkgPT4ge1xyXG4gICAgICAgICAgICBhdHRyaWJ1dGVCdWZmZXJJbmZvLmRlbGV0ZUJ1ZmZlcigpO1xyXG4gICAgICAgICAgICBkaXNwb3NlPy4oKTtcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgfTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgcmVidWlsZENhY2hlKGNvbXBvbmVudHMpO1xyXG4gIHJldHVybiBjb21wb25lbnRzLm1hcChjID0+IGMudmFsdWUpO1xyXG59O1xyXG5cclxuY29uc3QgY3JlYXRlQ3VzdG9tT3B0aW9uID0gKGF0dHJpYnV0ZUJ1ZmZlckluZm86IEF0dHJpYnV0ZUJ1ZmZlckluZm8pID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAgaWQ6IFwiY3VzdG9tXCIsXHJcbiAgICBkaXNwbGF5OiBcIkN1c3RvbVwiLFxyXG4gICAgLi4uY3JlYXRlRWRpdGFibGVDb21wb25lbnQoYXR0cmlidXRlQnVmZmVySW5mbyksXHJcbiAgfTtcclxufTtcclxuXHJcbmNvbnN0IGNyZWF0ZUJpbmRpbmdPcHRpb25zID0gKFxyXG4gIGF0dHJpYnV0ZUJ1ZmZlckJpbmRpbmdzOiBBdHRyaWJ1dGVCdWZmZXJCaW5kaW5nW10sXHJcbiAgYXR0cmlidXRlQnVmZmVySW5mbzogQXR0cmlidXRlQnVmZmVySW5mb1xyXG4pID0+IHtcclxuICByZXR1cm4gYXR0cmlidXRlQnVmZmVyQmluZGluZ3MubWFwKGJpbmRpbmcgPT4ge1xyXG4gICAgY29uc3QgZWxlbWVudCA9IGNyZWF0ZUVsZW1lbnRGb3JUeXBlKFxyXG4gICAgICBhdHRyaWJ1dGVCdWZmZXJJbmZvLmdldEF0dHJpYnV0ZUJ1ZmZlclR5cGUoKSxcclxuICAgICAgZmFsc2UsXHJcbiAgICAgIGJpbmRpbmcudmFsdWVcclxuICAgICk7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgaWQ6IHV1aWR2NCgpLFxyXG4gICAgICBlbGVtZW50LFxyXG4gICAgICBkaXNwbGF5OiBiaW5kaW5nLm5hbWUsXHJcbiAgICAgIHZhbHVlOiBiaW5kaW5nLnZhbHVlLFxyXG4gICAgfTtcclxuICB9KTtcclxufTtcclxuXHJcbmNvbnN0IGNyZWF0ZVNlbGVjdGlvbkNvbXBvbmVudCA9IChcclxuICBvcHRpb25zOiB7XHJcbiAgICBpZDogc3RyaW5nO1xyXG4gICAgZGlzcGxheTogc3RyaW5nO1xyXG4gICAgdmFsdWU6IE9ic2VydmFibGU8YW55PjtcclxuICAgIGVsZW1lbnQ6IEhUTUxFbGVtZW50O1xyXG4gIH1bXSxcclxuICBvbkNoYW5nZTogKHZhbHVlOiBhbnkpID0+IHZvaWRcclxuKSA9PiB7XHJcbiAgbGV0IGRldGFjaDogKCkgPT4gdm9pZCA9IG51bGw7XHJcbiAgY29uc3QgZWxlbWVudCA9IGNyZWF0ZURpdihcImNvbHVtbi13aXRoLWdhcFwiLCBbXHJcbiAgICBjcmVhdGVFbGVtZW50c0Ryb3Bkb3duKG9wdGlvbnMsIGlkID0+IHtcclxuICAgICAgZGV0YWNoPy4oKTtcclxuICAgICAgY29uc3Qgb3B0aW9uID0gb3B0aW9ucy5maW5kKG8gPT4gby5pZCA9PT0gaWQpO1xyXG4gICAgICBjb25zdCBjYWxsYmFjayA9ICh2YWx1ZTogYW55KSA9PiBvbkNoYW5nZSh2YWx1ZSk7XHJcbiAgICAgIG9wdGlvbi52YWx1ZS5hdHRhY2goY2FsbGJhY2spO1xyXG4gICAgICBjYWxsYmFjayhvcHRpb24udmFsdWUuZ2V0VmFsdWUoKSk7XHJcbiAgICAgIGRldGFjaCA9ICgpID0+IG9wdGlvbi52YWx1ZS5kZXRhY2goY2FsbGJhY2spO1xyXG4gICAgfSksXHJcbiAgICAuLi5vcHRpb25zLm1hcChvID0+IG8uZWxlbWVudCksXHJcbiAgXSk7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBlbGVtZW50LFxyXG4gICAgZGlzcG9zZTogKCkgPT4gZGV0YWNoPy4oKSxcclxuICB9O1xyXG59O1xyXG5cclxuY29uc3QgY3JlYXRlRWRpdGFibGVDb21wb25lbnQgPSAoXHJcbiAgYXR0cmlidXRlQnVmZmVySW5mbzogQXR0cmlidXRlQnVmZmVySW5mbyxcclxuICBvbkNoYW5nZT86ICh2YWx1ZTogYW55KSA9PiB2b2lkXHJcbikgPT4ge1xyXG4gIGNvbnN0IGluaXRpYWxWYWx1ZSA9IGdldERlZmF1bHRWYWx1ZShcclxuICAgIGF0dHJpYnV0ZUJ1ZmZlckluZm8uZ2V0QXR0cmlidXRlQnVmZmVyVHlwZSgpXHJcbiAgKTtcclxuICBjb25zdCBjdXN0b21WYWx1ZSA9IG5ldyBPYnNlcnZhYmxlPGFueT4oaW5pdGlhbFZhbHVlKTtcclxuXHJcbiAgaWYgKG9uQ2hhbmdlKSB7XHJcbiAgICBjdXN0b21WYWx1ZS5hdHRhY2goKHZhbHVlOiBhbnkpID0+IG9uQ2hhbmdlKHZhbHVlKSk7XHJcbiAgICBvbkNoYW5nZShpbml0aWFsVmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgZWxlbWVudCA9IGNyZWF0ZUVsZW1lbnRGb3JUeXBlKFxyXG4gICAgYXR0cmlidXRlQnVmZmVySW5mby5nZXRBdHRyaWJ1dGVCdWZmZXJUeXBlKCksXHJcbiAgICB0cnVlLFxyXG4gICAgY3VzdG9tVmFsdWVcclxuICApO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgZWxlbWVudCxcclxuICAgIHZhbHVlOiBjdXN0b21WYWx1ZSxcclxuICAgIGRpc3Bvc2U6ICgpID0+IGN1c3RvbVZhbHVlLmRldGFjaEFsbCgpLFxyXG4gIH07XHJcbn07XHJcblxyXG5jb25zdCBjcmVhdGVFbGVtZW50Rm9yVHlwZSA9IChcclxuICBhdHRyaWJ1dGVCdWZmZXJUeXBlOiBBdHRyaWJ1dGVCdWZmZXJUeXBlLFxyXG4gIGVkaXRhYmxlOiBib29sZWFuLFxyXG4gIGN1cnJlbnRWYWx1ZTogT2JzZXJ2YWJsZTxhbnk+XHJcbikgPT4ge1xyXG4gIHN3aXRjaCAoYXR0cmlidXRlQnVmZmVyVHlwZSkge1xyXG4gICAgY2FzZSBBdHRyaWJ1dGVCdWZmZXJUeXBlLkZMT0FUX1ZFQzQ6XHJcbiAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50QXJyYXkoNCwgY3VycmVudFZhbHVlLCBlZGl0YWJsZSk7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICByZXR1cm4gY3JlYXRlRWxlbWVudE5vdFN1cHBvcnRlZCgpO1xyXG4gIH1cclxufTtcclxuXHJcbi8vdG9kbyBiZXR0ZXIgcGFyc2VyXHJcbmNvbnN0IGNyZWF0ZUVsZW1lbnRBcnJheSA9IChcclxuICBpdGVtU2l6ZTogbnVtYmVyLFxyXG4gIHZhbHVlOiBPYnNlcnZhYmxlPFZlY3RvcjRBcnJheT4sXHJcbiAgZWRpdGFibGU6IGJvb2xlYW5cclxuKSA9PiB7XHJcbiAgY29uc3QgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XHJcbiAgaW5wdXQuY2xhc3NOYW1lID0gXCJlZGl0LWlucHV0XCI7XHJcbiAgaW5wdXQuZGlzYWJsZWQgPSAhZWRpdGFibGU7XHJcblxyXG4gIGlmICghZWRpdGFibGUpIHtcclxuICAgIGNvbnN0IGxpc3RlbmVyID0gKHZhbHVlOiBWZWN0b3I0QXJyYXkpID0+XHJcbiAgICAgIChpbnB1dC52YWx1ZSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKSk7XHJcbiAgICB2YWx1ZS5hdHRhY2gobGlzdGVuZXIpO1xyXG4gIH1cclxuXHJcbiAgaW5wdXQudmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZS5nZXRWYWx1ZSgpKTtcclxuICBpbnB1dC5vbmlucHV0ID0gKCkgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgcmVzdWx0ID0gSlNPTi5wYXJzZShpbnB1dC52YWx1ZSk7XHJcbiAgICAgIC8vY29uc29sZS5sb2coXCJyZXN1bHRcIiwgcmVzdWx0KTtcclxuXHJcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShyZXN1bHQpKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJ0aGlzIGlzIG5vdCBhbiBhcnJheSB0eXBlXCIpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IHh4eCA9IHJlc3VsdC5ldmVyeShlID0+XHJcbiAgICAgICAgICBBcnJheS5pc0FycmF5KGUpID8gZS5sZW5ndGggPT09IDQgOiBmYWxzZVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgaWYgKCF4eHgpIHtcclxuICAgICAgICAgIC8vICBjb25zb2xlLmxvZyhcIm5vdCBldmVyeSBlbGVtZW50IGlkIHRoZSBhcnJhIGlzIHNhbWUgc2l6ZVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgdmFsdWUuc2V0VmFsdWUocmVzdWx0KTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwidGhpcyBpcyBub3QgYSBqc29uXCIpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIC8vV3JvbmcgZm9ybWF0ISBTaG91bGQgYmUgW1t4MSx5MV0sIFt4Mix5Ml0sIC4uLl1cclxuICByZXR1cm4gaW5wdXQ7XHJcbn07XHJcbiIsImltcG9ydCB7IG9ic2VydmVFbGVtZW50Qm91bmRpbmdSZWN0IH0gZnJvbSBcIi4uL3V0aWxzL2h0bWxcIjtcclxuZXhwb3J0IGNvbnN0IGNyZWF0ZVdlYkdMQ2FudmFzID0gKFxyXG4gIGNsYXNzTmFtZTogc3RyaW5nXHJcbik6IFtcclxuICBIVE1MQ2FudmFzRWxlbWVudCxcclxuICB7XHJcbiAgICBjb250ZXh0OiBXZWJHTFJlbmRlcmluZ0NvbnRleHQ7XHJcbiAgfVxyXG5dID0+IHtcclxuICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xyXG4gIGNhbnZhcy5jbGFzc05hbWUgPSBjbGFzc05hbWU7XHJcbiAgY29uc3QgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KFwid2ViZ2xcIik7XHJcblxyXG4gIG9ic2VydmVFbGVtZW50Qm91bmRpbmdSZWN0KGNhbnZhcywgcmVjdCA9PiB7XHJcbiAgICBjYW52YXMud2lkdGggPSByZWN0LndpZHRoO1xyXG4gICAgY2FudmFzLmhlaWdodCA9IHJlY3QuaGVpZ2h0O1xyXG4gIH0pO1xyXG5cclxuICBpZiAoIWNvbnRleHQpIHtcclxuICAgIC8vdG9kbyBtb3ZlIHRvIGVycm9yc1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVW5hYmxlIHRvIGNyZWF0ZSB3ZWJnbCBjb250ZXh0XCIpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIFtcclxuICAgIGNhbnZhcyxcclxuICAgIHtcclxuICAgICAgY29udGV4dCxcclxuICAgIH0sXHJcbiAgXTtcclxufTtcclxuIiwiZXhwb3J0IGNvbnN0IG9ic2VydmVFbGVtZW50Qm91bmRpbmdSZWN0ID0gKFxyXG4gIGVsZW1lbnQ6IEVsZW1lbnQsXHJcbiAgY2FsbGJhY2s6IChyZWN0YW5nbGU6IHtcclxuICAgIHg6IG51bWJlcjtcclxuICAgIHk6IG51bWJlcjtcclxuICAgIHdpZHRoOiBudW1iZXI7XHJcbiAgICBoZWlnaHQ6IG51bWJlcjtcclxuICB9KSA9PiB2b2lkXHJcbik6ICgoKSA9PiB2b2lkKSA9PiB7XHJcbiAgY29uc3QgcmVzaXplT2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIoZWxlbWVudHMgPT4ge1xyXG4gICAgY29uc3Qgb2JzZXJ2ZXJFbnRyeSA9IGVsZW1lbnRzLmZpbmQoZSA9PiBlLnRhcmdldCA9PT0gZWxlbWVudCk7XHJcblxyXG4gICAgaWYgKG9ic2VydmVyRW50cnkpIHtcclxuICAgICAgY29uc3QgZG9tUmVjdCA9IG9ic2VydmVyRW50cnkudGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICBjYWxsYmFjayh7XHJcbiAgICAgICAgeDogZG9tUmVjdC54LFxyXG4gICAgICAgIHk6IGRvbVJlY3QueSxcclxuICAgICAgICB3aWR0aDogZG9tUmVjdC53aWR0aCxcclxuICAgICAgICBoZWlnaHQ6IGRvbVJlY3QuaGVpZ2h0LFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgcmVzaXplT2JzZXJ2ZXIub2JzZXJ2ZShlbGVtZW50KTtcclxuICByZXR1cm4gKCkgPT4gcmVzaXplT2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xyXG59O1xyXG4iLCJpbXBvcnQgeyByZW1vdmUgfSBmcm9tIFwiLi4vYXJyYXlcIjtcclxuaW1wb3J0IHsgdXVpZHY0IH0gZnJvbSBcIi4uL3V1aWRcIjtcclxuaW1wb3J0IHsgTWVzc2FnZVJlc3BvbnNlIH0gZnJvbSBcIi4vbWVzc2FnZXNcIjtcclxuaW1wb3J0IHsgdnNjb2RlQXBpIH0gZnJvbSBcIi4vdnNjb2RlQXBpXCI7XHJcblxyXG50eXBlIFJlc3BvbnNlTGlzdGVuZXIgPSAobWVzc2FnZTogTWVzc2FnZVJlc3BvbnNlKSA9PiB2b2lkO1xyXG5cclxuZXhwb3J0IGNsYXNzIFZpZXdlckVuZHBvaW50IHtcclxuICBldmVudExpc3RlbmVyczogUmVzcG9uc2VMaXN0ZW5lcltdID0gW107XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIGV2ZW50ID0+IHtcclxuICAgICAgdGhpcy5ldmVudExpc3RlbmVycy5mb3JFYWNoKGxpc3RlbmVyID0+IGxpc3RlbmVyKGV2ZW50LmRhdGEpKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZ2V0U2hhZGVyRG9jdW1lbnRzKCkge1xyXG4gICAgY29uc3QgbWVzc2FnZUlkID0gdXVpZHY0KCk7XHJcblxyXG4gICAgdnNjb2RlQXBpLnBvc3RNZXNzYWdlKHtcclxuICAgICAgdHlwZTogXCJnZXRTaGFkZXJEb2N1bWVudHNcIixcclxuICAgICAgaWQ6IG1lc3NhZ2VJZCxcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZTx7IGZpbGVQYXRoOiBzdHJpbmc7IGZpbGVOYW1lOiBzdHJpbmcgfVtdPihyZXNvbHZlID0+IHtcclxuICAgICAgY29uc3QgbGlzdGVuZXIgPSAobWVzc2FnZTogTWVzc2FnZVJlc3BvbnNlKSA9PiB7XHJcbiAgICAgICAgaWYgKG1lc3NhZ2UudHlwZSA9PT0gXCJnZXRTaGFkZXJEb2N1bWVudHNcIiAmJiBtZXNzYWdlLmlkID09PSBtZXNzYWdlSWQpIHtcclxuICAgICAgICAgIHJlc29sdmUobWVzc2FnZS5wYXlsb2FkLmZpbGVzKTtcclxuICAgICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIobGlzdGVuZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIHRoaXMuZXZlbnRMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGdldERvY3VtZW50VGV4dChmaWxlTmFtZTogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBtZXNzYWdlSWQgPSB1dWlkdjQoKTtcclxuXHJcbiAgICB2c2NvZGVBcGkucG9zdE1lc3NhZ2Uoe1xyXG4gICAgICB0eXBlOiBcImdldERvY3VtZW50VGV4dFwiLFxyXG4gICAgICBpZDogbWVzc2FnZUlkLFxyXG4gICAgICBwYXlsb2FkOiB7IGZpbGVOYW1lIH0sXHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2U8c3RyaW5nPihyZXNvbHZlID0+IHtcclxuICAgICAgY29uc3QgbGlzdGVuZXIgPSAobWVzc2FnZTogTWVzc2FnZVJlc3BvbnNlKSA9PiB7XHJcbiAgICAgICAgaWYgKG1lc3NhZ2UudHlwZSA9PT0gXCJnZXREb2N1bWVudFRleHRcIiAmJiBtZXNzYWdlLmlkID09PSBtZXNzYWdlSWQpIHtcclxuICAgICAgICAgIHJlc29sdmUobWVzc2FnZS5wYXlsb2FkLnRleHQpO1xyXG4gICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcihsaXN0ZW5lcik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgdGhpcy5ldmVudExpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgc3Vic2NyaWJlVG9Eb2N1bWVudFNhdmUoXHJcbiAgICBmaWxlUGF0aDogc3RyaW5nLFxyXG4gICAgY2FsbGJhY2s6IChuZXdDb250ZW50OiBzdHJpbmcpID0+IHZvaWRcclxuICApOiAoKSA9PiB2b2lkIHtcclxuICAgIHZzY29kZUFwaS5wb3N0TWVzc2FnZSh7XHJcbiAgICAgIHR5cGU6IFwic3Vic2NyaWJlVG9Eb2N1bWVudFRleHRDaGFuZ2VcIixcclxuICAgICAgcGF5bG9hZDogeyBmaWxlTmFtZTogZmlsZVBhdGggfSxcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IGxpc3RlbmVyID0gKG1lc3NhZ2U6IE1lc3NhZ2VSZXNwb25zZSkgPT4ge1xyXG4gICAgICBpZiAoXHJcbiAgICAgICAgbWVzc2FnZS50eXBlID09PSBcIm9uRG9jdW1lbnRUZXh0Q2hhbmdlXCIgJiZcclxuICAgICAgICBtZXNzYWdlLnBheWxvYWQuZmlsZVBhdGggPT09IGZpbGVQYXRoXHJcbiAgICAgICkge1xyXG4gICAgICAgIGNhbGxiYWNrKG1lc3NhZ2UucGF5bG9hZC50ZXh0KTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmV2ZW50TGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xyXG4gICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcihsaXN0ZW5lcik7XHJcbiAgICAgIHZzY29kZUFwaS5wb3N0TWVzc2FnZSh7XHJcbiAgICAgICAgdHlwZTogXCJ1bnN1YnNjcmliZVRvRG9jdW1lbnRUZXh0Q2hhbmdlXCIsXHJcbiAgICAgICAgcGF5bG9hZDogeyBmaWxlTmFtZTogZmlsZVBhdGggfSxcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSByZW1vdmVMaXN0ZW5lcihsaXN0ZW5lcjogUmVzcG9uc2VMaXN0ZW5lcikge1xyXG4gICAgcmVtb3ZlKHRoaXMuZXZlbnRMaXN0ZW5lcnMsIGxpc3RlbmVyKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgVmVjdG9yNEFycmF5IH0gZnJvbSBcIi4vdHlwZXNcIjtcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCIuL3V0aWxzL29ic2VydmFibGVcIjtcclxuaW1wb3J0IHsgQXR0cmlidXRlQnVmZmVyVHlwZSB9IGZyb20gXCIuL3V0aWxzL3dlYmdsL2F0dHJpYnV0ZUJ1ZmZlclwiO1xyXG5cclxudHlwZSBNZXNoSW5mbyA9IHtcclxuICBkaXNwbGF5OiBzdHJpbmc7XHJcbiAgcG9zaXRpb25zOiBWZWN0b3I0QXJyYXlbXTtcclxuICBjb2xvcnM6IFZlY3RvcjRBcnJheVtdO1xyXG4gIGluZGljZXM6IG51bWJlcltdO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHJlcGVhdDRUaW1lcyA9IDxUPihhcnJheTogVFtdKSA9PiB7XHJcbiAgcmV0dXJuIFtdLmNvbmNhdChhcnJheSwgYXJyYXksIGFycmF5LCBhcnJheSk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgbWVzaGVzID0gbmV3IE1hcDxzdHJpbmcsIE1lc2hJbmZvPihbXHJcbiAgW1xyXG4gICAgXCJjdWJlXCIsXHJcbiAgICB7XHJcbiAgICAgIGRpc3BsYXk6IFwiQ3ViZVwiLFxyXG4gICAgICBwb3NpdGlvbnM6IFtcclxuICAgICAgICAvLyBGcm9udCBmYWNlXHJcbiAgICAgICAgWy0wLjUsIC0wLjUsIDAuNSwgMV0sXHJcbiAgICAgICAgWzAuNSwgLTAuNSwgMC41LCAxXSxcclxuICAgICAgICBbMC41LCAwLjUsIDAuNSwgMV0sXHJcbiAgICAgICAgWy0wLjUsIDAuNSwgMC41LCAxXSxcclxuXHJcbiAgICAgICAgLy8gQmFjayBmYWNlXHJcbiAgICAgICAgWy0wLjUsIC0wLjUsIC0wLjUsIDFdLFxyXG4gICAgICAgIFstMC41LCAwLjUsIC0wLjUsIDFdLFxyXG4gICAgICAgIFswLjUsIDAuNSwgLTAuNSwgMV0sXHJcbiAgICAgICAgWzAuNSwgLTAuNSwgLTAuNSwgMV0sXHJcblxyXG4gICAgICAgIC8vIFRvcCBmYWNlXHJcbiAgICAgICAgWy0wLjUsIDAuNSwgLTAuNSwgMV0sXHJcbiAgICAgICAgWy0wLjUsIDAuNSwgMC41LCAxXSxcclxuICAgICAgICBbMC41LCAwLjUsIDAuNSwgMV0sXHJcbiAgICAgICAgWzAuNSwgMC41LCAtMC41LCAxXSxcclxuXHJcbiAgICAgICAgLy8gQm90dG9tIGZhY2VcclxuICAgICAgICBbLTAuNSwgLTAuNSwgLTAuNSwgMV0sXHJcbiAgICAgICAgWzAuNSwgLTAuNSwgLTAuNSwgMV0sXHJcbiAgICAgICAgWzAuNSwgLTAuNSwgMC41LCAxXSxcclxuICAgICAgICBbLTAuNSwgLTAuNSwgMC41LCAxXSxcclxuXHJcbiAgICAgICAgLy8gUmlnaHQgZmFjZVxyXG4gICAgICAgIFswLjUsIC0wLjUsIC0wLjUsIDFdLFxyXG4gICAgICAgIFswLjUsIDAuNSwgLTAuNSwgMV0sXHJcbiAgICAgICAgWzAuNSwgMC41LCAwLjUsIDFdLFxyXG4gICAgICAgIFswLjUsIC0wLjUsIDAuNSwgMV0sXHJcblxyXG4gICAgICAgIC8vIExlZnQgZmFjZVxyXG4gICAgICAgIFstMC41LCAtMC41LCAtMC41LCAxXSxcclxuICAgICAgICBbLTAuNSwgLTAuNSwgMC41LCAxXSxcclxuICAgICAgICBbLTAuNSwgMC41LCAwLjUsIDFdLFxyXG4gICAgICAgIFstMC41LCAwLjUsIC0wLjUsIDFdLFxyXG4gICAgICBdLFxyXG4gICAgICBjb2xvcnM6IFtcclxuICAgICAgICAuLi5yZXBlYXQ0VGltZXMoWzEuMCwgMS4wLCAxLjAsIDEuMF0pLCAvLyBGcm9udCBmYWNlOiB3aGl0ZVxyXG4gICAgICAgIC4uLnJlcGVhdDRUaW1lcyhbMS4wLCAwLjAsIDAuMCwgMS4wXSksIC8vIEJhY2sgZmFjZTogcmVkXHJcbiAgICAgICAgLi4ucmVwZWF0NFRpbWVzKFswLjAsIDEuMCwgMC4wLCAxLjBdKSwgLy8gVG9wIGZhY2U6IGdyZWVuXHJcbiAgICAgICAgLi4ucmVwZWF0NFRpbWVzKFswLjAsIDAuMCwgMS4wLCAxLjBdKSwgLy8gQm90dG9tIGZhY2U6IGJsdWVcclxuICAgICAgICAuLi5yZXBlYXQ0VGltZXMoWzEuMCwgMS4wLCAwLjAsIDEuMF0pLCAvLyBSaWdodCBmYWNlOiB5ZWxsb3dcclxuICAgICAgICAuLi5yZXBlYXQ0VGltZXMoWzEuMCwgMC4wLCAxLjAsIDEuMF0pLCAvLyBMZWZ0IGZhY2U6IHB1cnBsZVxyXG4gICAgICBdLFxyXG4gICAgICBpbmRpY2VzOiBbXHJcbiAgICAgICAgMCxcclxuICAgICAgICAxLFxyXG4gICAgICAgIDIsXHJcbiAgICAgICAgMCxcclxuICAgICAgICAyLFxyXG4gICAgICAgIDMsIC8vIGZyb250XHJcbiAgICAgICAgNCxcclxuICAgICAgICA1LFxyXG4gICAgICAgIDYsXHJcbiAgICAgICAgNCxcclxuICAgICAgICA2LFxyXG4gICAgICAgIDcsIC8vIGJhY2tcclxuICAgICAgICA4LFxyXG4gICAgICAgIDksXHJcbiAgICAgICAgMTAsXHJcbiAgICAgICAgOCxcclxuICAgICAgICAxMCxcclxuICAgICAgICAxMSwgLy8gdG9wXHJcbiAgICAgICAgMTIsXHJcbiAgICAgICAgMTMsXHJcbiAgICAgICAgMTQsXHJcbiAgICAgICAgMTIsXHJcbiAgICAgICAgMTQsXHJcbiAgICAgICAgMTUsIC8vIGJvdHRvbVxyXG4gICAgICAgIDE2LFxyXG4gICAgICAgIDE3LFxyXG4gICAgICAgIDE4LFxyXG4gICAgICAgIDE2LFxyXG4gICAgICAgIDE4LFxyXG4gICAgICAgIDE5LCAvLyByaWdodFxyXG4gICAgICAgIDIwLFxyXG4gICAgICAgIDIxLFxyXG4gICAgICAgIDIyLFxyXG4gICAgICAgIDIwLFxyXG4gICAgICAgIDIyLFxyXG4gICAgICAgIDIzLCAvLyBsZWZ0XHJcbiAgICAgIF0sXHJcbiAgICB9LFxyXG4gIF0sXHJcbl0pO1xyXG5cclxuY29uc29sZS5sb2cobWVzaGVzKTtcclxuXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVNZXNoQmluZGluZ3MgPSAoKSA9PlxyXG4gIG5ldyBNYXAoW1xyXG4gICAgW1xyXG4gICAgICBcInBvc2l0aW9uc1wiLFxyXG4gICAgICB7XHJcbiAgICAgICAgbmFtZTogXCJCaW5kaW5nIC0gTWVzaCBwb3NpdGlvbnNcIixcclxuICAgICAgICB0eXBlOiBBdHRyaWJ1dGVCdWZmZXJUeXBlLkZMT0FUX1ZFQzQsXHJcbiAgICAgICAgdmFsdWU6IG5ldyBPYnNlcnZhYmxlKFtdKSxcclxuICAgICAgfSxcclxuICAgIF0sXHJcbiAgICBbXHJcbiAgICAgIFwiY29sb3JzXCIsXHJcbiAgICAgIHtcclxuICAgICAgICBuYW1lOiBcIkJpbmRpbmcgLSBNZXNoIGNvbG9yc1wiLFxyXG4gICAgICAgIHR5cGU6IEF0dHJpYnV0ZUJ1ZmZlclR5cGUuRkxPQVRfVkVDNCxcclxuICAgICAgICB2YWx1ZTogbmV3IE9ic2VydmFibGUoW10pLFxyXG4gICAgICB9LFxyXG4gICAgXSxcclxuICBdKTtcclxuIiwiLy9nbC1tYXRyaXggZnVuY3Rpb25zXHJcbmV4cG9ydCBuYW1lc3BhY2UgbWF0NCB7XHJcbiAgY29uc3QgRVBTSUxPTiA9IDAuMDAwMDAxO1xyXG4gIGV4cG9ydCBmdW5jdGlvbiBjcmVhdGUoKSB7XHJcbiAgICBjb25zdCBvdXQgPSBuZXcgRmxvYXQzMkFycmF5KDE2KTtcclxuICAgIG91dFswXSA9IDE7XHJcbiAgICBvdXRbNV0gPSAxO1xyXG4gICAgb3V0WzEwXSA9IDE7XHJcbiAgICBvdXRbMTVdID0gMTtcclxuICAgIHJldHVybiBvdXQ7XHJcbiAgfVxyXG4gIGV4cG9ydCBmdW5jdGlvbiBwZXJzcGVjdGl2ZShcclxuICAgIG91dDogYW55LFxyXG4gICAgZm92eTogYW55LFxyXG4gICAgYXNwZWN0OiBhbnksXHJcbiAgICBuZWFyOiBhbnksXHJcbiAgICBmYXI6IGFueVxyXG4gICkge1xyXG4gICAgbGV0IGYgPSAxLjAgLyBNYXRoLnRhbihmb3Z5IC8gMiksXHJcbiAgICAgIG5mO1xyXG4gICAgb3V0WzBdID0gZiAvIGFzcGVjdDtcclxuICAgIG91dFsxXSA9IDA7XHJcbiAgICBvdXRbMl0gPSAwO1xyXG4gICAgb3V0WzNdID0gMDtcclxuICAgIG91dFs0XSA9IDA7XHJcbiAgICBvdXRbNV0gPSBmO1xyXG4gICAgb3V0WzZdID0gMDtcclxuICAgIG91dFs3XSA9IDA7XHJcbiAgICBvdXRbOF0gPSAwO1xyXG4gICAgb3V0WzldID0gMDtcclxuICAgIG91dFsxMV0gPSAtMTtcclxuICAgIG91dFsxMl0gPSAwO1xyXG4gICAgb3V0WzEzXSA9IDA7XHJcbiAgICBvdXRbMTVdID0gMDtcclxuXHJcbiAgICBpZiAoZmFyICE9IG51bGwgJiYgZmFyICE9PSBJbmZpbml0eSkge1xyXG4gICAgICBuZiA9IDEgLyAobmVhciAtIGZhcik7XHJcbiAgICAgIG91dFsxMF0gPSAoZmFyICsgbmVhcikgKiBuZjtcclxuICAgICAgb3V0WzE0XSA9IDIgKiBmYXIgKiBuZWFyICogbmY7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBvdXRbMTBdID0gLTE7XHJcbiAgICAgIG91dFsxNF0gPSAtMiAqIG5lYXI7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG91dDtcclxuICB9XHJcbiAgZnVuY3Rpb24gaWRlbnRpdHkzKG91dDogYW55KSB7XHJcbiAgICBvdXRbMF0gPSAxO1xyXG4gICAgb3V0WzFdID0gMDtcclxuICAgIG91dFsyXSA9IDA7XHJcbiAgICBvdXRbM10gPSAwO1xyXG4gICAgb3V0WzRdID0gMDtcclxuICAgIG91dFs1XSA9IDE7XHJcbiAgICBvdXRbNl0gPSAwO1xyXG4gICAgb3V0WzddID0gMDtcclxuICAgIG91dFs4XSA9IDA7XHJcbiAgICBvdXRbOV0gPSAwO1xyXG4gICAgb3V0WzEwXSA9IDE7XHJcbiAgICBvdXRbMTFdID0gMDtcclxuICAgIG91dFsxMl0gPSAwO1xyXG4gICAgb3V0WzEzXSA9IDA7XHJcbiAgICBvdXRbMTRdID0gMDtcclxuICAgIG91dFsxNV0gPSAxO1xyXG4gICAgcmV0dXJuIG91dDtcclxuICB9XHJcbiAgZXhwb3J0IGZ1bmN0aW9uIGxvb2tBdChvdXQ6IGFueSwgZXllOiBhbnksIGNlbnRlcjogYW55LCB1cDogYW55KSB7XHJcbiAgICB2YXIgeDAsIHgxLCB4MiwgeTAsIHkxLCB5MiwgejAsIHoxLCB6MiwgbGVuO1xyXG4gICAgdmFyIGV5ZXggPSBleWVbMF07XHJcbiAgICB2YXIgZXlleSA9IGV5ZVsxXTtcclxuICAgIHZhciBleWV6ID0gZXllWzJdO1xyXG4gICAgdmFyIHVweCA9IHVwWzBdO1xyXG4gICAgdmFyIHVweSA9IHVwWzFdO1xyXG4gICAgdmFyIHVweiA9IHVwWzJdO1xyXG4gICAgdmFyIGNlbnRlcnggPSBjZW50ZXJbMF07XHJcbiAgICB2YXIgY2VudGVyeSA9IGNlbnRlclsxXTtcclxuICAgIHZhciBjZW50ZXJ6ID0gY2VudGVyWzJdO1xyXG5cclxuICAgIGlmIChcclxuICAgICAgTWF0aC5hYnMoZXlleCAtIGNlbnRlcngpIDwgRVBTSUxPTiAmJlxyXG4gICAgICBNYXRoLmFicyhleWV5IC0gY2VudGVyeSkgPCBFUFNJTE9OICYmXHJcbiAgICAgIE1hdGguYWJzKGV5ZXogLSBjZW50ZXJ6KSA8IEVQU0lMT05cclxuICAgICkge1xyXG4gICAgICByZXR1cm4gaWRlbnRpdHkzKG91dCk7XHJcbiAgICB9XHJcblxyXG4gICAgejAgPSBleWV4IC0gY2VudGVyeDtcclxuICAgIHoxID0gZXlleSAtIGNlbnRlcnk7XHJcbiAgICB6MiA9IGV5ZXogLSBjZW50ZXJ6O1xyXG4gICAgbGVuID0gMSAvIE1hdGguaHlwb3QoejAsIHoxLCB6Mik7XHJcbiAgICB6MCAqPSBsZW47XHJcbiAgICB6MSAqPSBsZW47XHJcbiAgICB6MiAqPSBsZW47XHJcbiAgICB4MCA9IHVweSAqIHoyIC0gdXB6ICogejE7XHJcbiAgICB4MSA9IHVweiAqIHowIC0gdXB4ICogejI7XHJcbiAgICB4MiA9IHVweCAqIHoxIC0gdXB5ICogejA7XHJcbiAgICBsZW4gPSBNYXRoLmh5cG90KHgwLCB4MSwgeDIpO1xyXG5cclxuICAgIGlmICghbGVuKSB7XHJcbiAgICAgIHgwID0gMDtcclxuICAgICAgeDEgPSAwO1xyXG4gICAgICB4MiA9IDA7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBsZW4gPSAxIC8gbGVuO1xyXG4gICAgICB4MCAqPSBsZW47XHJcbiAgICAgIHgxICo9IGxlbjtcclxuICAgICAgeDIgKj0gbGVuO1xyXG4gICAgfVxyXG5cclxuICAgIHkwID0gejEgKiB4MiAtIHoyICogeDE7XHJcbiAgICB5MSA9IHoyICogeDAgLSB6MCAqIHgyO1xyXG4gICAgeTIgPSB6MCAqIHgxIC0gejEgKiB4MDtcclxuICAgIGxlbiA9IE1hdGguaHlwb3QoeTAsIHkxLCB5Mik7XHJcblxyXG4gICAgaWYgKCFsZW4pIHtcclxuICAgICAgeTAgPSAwO1xyXG4gICAgICB5MSA9IDA7XHJcbiAgICAgIHkyID0gMDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGxlbiA9IDEgLyBsZW47XHJcbiAgICAgIHkwICo9IGxlbjtcclxuICAgICAgeTEgKj0gbGVuO1xyXG4gICAgICB5MiAqPSBsZW47XHJcbiAgICB9XHJcblxyXG4gICAgb3V0WzBdID0geDA7XHJcbiAgICBvdXRbMV0gPSB5MDtcclxuICAgIG91dFsyXSA9IHowO1xyXG4gICAgb3V0WzNdID0gMDtcclxuICAgIG91dFs0XSA9IHgxO1xyXG4gICAgb3V0WzVdID0geTE7XHJcbiAgICBvdXRbNl0gPSB6MTtcclxuICAgIG91dFs3XSA9IDA7XHJcbiAgICBvdXRbOF0gPSB4MjtcclxuICAgIG91dFs5XSA9IHkyO1xyXG4gICAgb3V0WzEwXSA9IHoyO1xyXG4gICAgb3V0WzExXSA9IDA7XHJcbiAgICBvdXRbMTJdID0gLSh4MCAqIGV5ZXggKyB4MSAqIGV5ZXkgKyB4MiAqIGV5ZXopO1xyXG4gICAgb3V0WzEzXSA9IC0oeTAgKiBleWV4ICsgeTEgKiBleWV5ICsgeTIgKiBleWV6KTtcclxuICAgIG91dFsxNF0gPSAtKHowICogZXlleCArIHoxICogZXlleSArIHoyICogZXlleik7XHJcbiAgICBvdXRbMTVdID0gMTtcclxuICAgIHJldHVybiBvdXQ7XHJcbiAgfVxyXG5cclxuICBleHBvcnQgZnVuY3Rpb24gbXVsdGlwbHkob3V0OiBhbnksIGE6IGFueSwgYjogYW55KSB7XHJcbiAgICBsZXQgYTAwID0gYVswXSxcclxuICAgICAgYTAxID0gYVsxXSxcclxuICAgICAgYTAyID0gYVsyXSxcclxuICAgICAgYTAzID0gYVszXTtcclxuICAgIGxldCBhMTAgPSBhWzRdLFxyXG4gICAgICBhMTEgPSBhWzVdLFxyXG4gICAgICBhMTIgPSBhWzZdLFxyXG4gICAgICBhMTMgPSBhWzddO1xyXG4gICAgbGV0IGEyMCA9IGFbOF0sXHJcbiAgICAgIGEyMSA9IGFbOV0sXHJcbiAgICAgIGEyMiA9IGFbMTBdLFxyXG4gICAgICBhMjMgPSBhWzExXTtcclxuICAgIGxldCBhMzAgPSBhWzEyXSxcclxuICAgICAgYTMxID0gYVsxM10sXHJcbiAgICAgIGEzMiA9IGFbMTRdLFxyXG4gICAgICBhMzMgPSBhWzE1XTtcclxuXHJcbiAgICAvLyBDYWNoZSBvbmx5IHRoZSBjdXJyZW50IGxpbmUgb2YgdGhlIHNlY29uZCBtYXRyaXhcclxuICAgIGxldCBiMCA9IGJbMF0sXHJcbiAgICAgIGIxID0gYlsxXSxcclxuICAgICAgYjIgPSBiWzJdLFxyXG4gICAgICBiMyA9IGJbM107XHJcbiAgICBvdXRbMF0gPSBiMCAqIGEwMCArIGIxICogYTEwICsgYjIgKiBhMjAgKyBiMyAqIGEzMDtcclxuICAgIG91dFsxXSA9IGIwICogYTAxICsgYjEgKiBhMTEgKyBiMiAqIGEyMSArIGIzICogYTMxO1xyXG4gICAgb3V0WzJdID0gYjAgKiBhMDIgKyBiMSAqIGExMiArIGIyICogYTIyICsgYjMgKiBhMzI7XHJcbiAgICBvdXRbM10gPSBiMCAqIGEwMyArIGIxICogYTEzICsgYjIgKiBhMjMgKyBiMyAqIGEzMztcclxuXHJcbiAgICBiMCA9IGJbNF07XHJcbiAgICBiMSA9IGJbNV07XHJcbiAgICBiMiA9IGJbNl07XHJcbiAgICBiMyA9IGJbN107XHJcbiAgICBvdXRbNF0gPSBiMCAqIGEwMCArIGIxICogYTEwICsgYjIgKiBhMjAgKyBiMyAqIGEzMDtcclxuICAgIG91dFs1XSA9IGIwICogYTAxICsgYjEgKiBhMTEgKyBiMiAqIGEyMSArIGIzICogYTMxO1xyXG4gICAgb3V0WzZdID0gYjAgKiBhMDIgKyBiMSAqIGExMiArIGIyICogYTIyICsgYjMgKiBhMzI7XHJcbiAgICBvdXRbN10gPSBiMCAqIGEwMyArIGIxICogYTEzICsgYjIgKiBhMjMgKyBiMyAqIGEzMztcclxuXHJcbiAgICBiMCA9IGJbOF07XHJcbiAgICBiMSA9IGJbOV07XHJcbiAgICBiMiA9IGJbMTBdO1xyXG4gICAgYjMgPSBiWzExXTtcclxuICAgIG91dFs4XSA9IGIwICogYTAwICsgYjEgKiBhMTAgKyBiMiAqIGEyMCArIGIzICogYTMwO1xyXG4gICAgb3V0WzldID0gYjAgKiBhMDEgKyBiMSAqIGExMSArIGIyICogYTIxICsgYjMgKiBhMzE7XHJcbiAgICBvdXRbMTBdID0gYjAgKiBhMDIgKyBiMSAqIGExMiArIGIyICogYTIyICsgYjMgKiBhMzI7XHJcbiAgICBvdXRbMTFdID0gYjAgKiBhMDMgKyBiMSAqIGExMyArIGIyICogYTIzICsgYjMgKiBhMzM7XHJcblxyXG4gICAgYjAgPSBiWzEyXTtcclxuICAgIGIxID0gYlsxM107XHJcbiAgICBiMiA9IGJbMTRdO1xyXG4gICAgYjMgPSBiWzE1XTtcclxuICAgIG91dFsxMl0gPSBiMCAqIGEwMCArIGIxICogYTEwICsgYjIgKiBhMjAgKyBiMyAqIGEzMDtcclxuICAgIG91dFsxM10gPSBiMCAqIGEwMSArIGIxICogYTExICsgYjIgKiBhMjEgKyBiMyAqIGEzMTtcclxuICAgIG91dFsxNF0gPSBiMCAqIGEwMiArIGIxICogYTEyICsgYjIgKiBhMjIgKyBiMyAqIGEzMjtcclxuICAgIG91dFsxNV0gPSBiMCAqIGEwMyArIGIxICogYTEzICsgYjIgKiBhMjMgKyBiMyAqIGEzMztcclxuICAgIHJldHVybiBvdXQ7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7XHJcbiAgQ2FtZXJhUG9zaXRpb24sXHJcbiAgQ2FtZXJhUG9zaXRpb25NYW5pcHVsYXRvcixcclxuICBjYW1lcmFQb3NpdGlvblRvVmVjdG9yMyxcclxufSBmcm9tIFwiLi91dGlscy9jYW1lcmFNYW5pcHVsYXRvclwiO1xyXG5pbXBvcnQgeyBnZXRTdGF0ZSwgc2V0U3RhdGUgfSBmcm9tIFwiLi8uLi8uLi9jb21tb24vc3RhdGVcIjtcclxuaW1wb3J0IHsgSW5kZXhCdWZmZXJJbmZvIH0gZnJvbSBcIi4vdXRpbHMvd2ViZ2wvaW5kZXhCdWZmZXJcIjtcclxuaW1wb3J0IHsgdHJhbnNsYXRpb25zIH0gZnJvbSBcIi4uLy4uL2NvbW1vbi90cmFuc2xhdGlvbnNcIjtcclxuaW1wb3J0IHsgY3JlYXRlRHJvcGRvd24gfSBmcm9tIFwiLi9jb21wb25lbnRzL2Ryb3Bkb3duXCI7XHJcbmltcG9ydCB7IGNyZWF0ZVNlY3Rpb25UaXRsZSB9IGZyb20gXCIuL2NvbXBvbmVudHMvaGVhZGVyXCI7XHJcbmltcG9ydCB7IGNyZWF0ZUJ1dHRvbiBhcyBjcmVhdGVCdXR0b24gfSBmcm9tIFwiLi9jb21wb25lbnRzL2J1dHRvblwiO1xyXG5pbXBvcnQgeyBjcmVhdGVEaXYsIHdpdGhMYWJlbCB9IGZyb20gXCIuL2NvbXBvbmVudHMvd3JhcHBlcnNcIjtcclxuaW1wb3J0IHtcclxuICBjcmVhdGVVbmlmb3JtQ29tcG9uZW50cyxcclxuICBVbmlmb3JtQmluZGluZyxcclxufSBmcm9tIFwiLi91dGlscy93ZWJnbC91bmlmb3JtQ29tcG9uZW50XCI7XHJcbmltcG9ydCB7XHJcbiAgY29tcGlsZVNoYWRlcnNGcm9tU291cmNlLFxyXG4gIERyYXdPcHRpb25zLFxyXG4gIGZvcm1hdFNoYWRlckNvbXBpbGVFcnJvcnMsXHJcbiAgZ2V0UHJvZ3JhbUF0dHJpYnV0ZUJ1ZmZlcnMsXHJcbiAgZ2V0UHJvZ3JhbVVuaWZvcm1zLFxyXG4gIHJlbmRlclByb2dyYW0sXHJcbiAgU2hhZGVyQ29tcGlsZUVycm9ycyxcclxufSBmcm9tIFwiLi91dGlscy93ZWJnbC9pbmRleFwiO1xyXG5pbXBvcnQgeyBjcmVhdGVBdHRyaWJ1dGVCdWZmZXJDb21wb25lbnRzIH0gZnJvbSBcIi4vdXRpbHMvd2ViZ2wvYXR0cmlidXRlQnVmZmVyQ29tcG9uZW50XCI7XHJcbmltcG9ydCB7IGNyZWF0ZVdlYkdMQ2FudmFzIH0gZnJvbSBcIi4vY29tcG9uZW50cy93ZWJnbENhbnZhc1wiO1xyXG5pbXBvcnQgeyBWaWV3ZXJFbmRwb2ludCB9IGZyb20gXCIuLi8uLi9jb21tb24vY29tbXVuaWNhdGlvbi92aWV3ZXJFbmRwb2ludFwiO1xyXG5pbXBvcnQgeyBjcmVhdGVNZXNoQmluZGluZ3MsIG1lc2hlcyB9IGZyb20gXCIuL21lc2hlc1wiO1xyXG5pbXBvcnQgeyBtYXQ0IH0gZnJvbSBcIi4vdXRpbHMvbWF0aFwiO1xyXG5pbXBvcnQgeyBVbmlmb3JtVHlwZSB9IGZyb20gXCIuL3V0aWxzL3dlYmdsL3VuaWZvcm1cIjtcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCIuL3V0aWxzL29ic2VydmFibGVcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVVbmlmb3JtQmluZGluZ3MgPSAoKSA9PlxyXG4gIG5ldyBNYXA8c3RyaW5nLCBVbmlmb3JtQmluZGluZz4oW1xyXG4gICAgW1xyXG4gICAgICBcImxvY2FsVG9Qcm9qZWN0ZWRcIixcclxuICAgICAge1xyXG4gICAgICAgIG5hbWU6IFwiQmluZGluZyAtIExvY2FsVG9Qcm9qZWN0ZWRcIixcclxuICAgICAgICB0eXBlOiBVbmlmb3JtVHlwZS5GTE9BVF9NQVQ0LFxyXG4gICAgICAgIHZhbHVlOiBuZXcgT2JzZXJ2YWJsZShbMSwgMCwgMCwgMCwgMCwgMSwgMCwgMCwgMCwgMCwgMSwgMCwgMCwgMCwgMCwgMV0pLFxyXG4gICAgICB9LFxyXG4gICAgXSxcclxuICBdKTtcclxuXHJcbmNvbnN0IGNyZWF0ZVZpZXdlciA9IGFzeW5jICgpID0+IHtcclxuICBjb25zdCB2aWV3ZXJFbmRwb2ludCA9IG5ldyBWaWV3ZXJFbmRwb2ludCgpO1xyXG4gIGNvbnN0IHZpZXdlclN0YXRlID0gZ2V0U3RhdGUoKTtcclxuICBjb25zdCB2aWV3ZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInZpZXdlclwiKTtcclxuICBjb25zdCB2aWV3ZXJPcHRpb25zID0gY3JlYXRlRGl2KFwidmlld2VyLW9wdGlvbnNcIik7XHJcbiAgY29uc3Qgc2hhZGVyT3B0aW9ucyA9IGNyZWF0ZURpdihcInZpZXdlci1zaGFkZXItb3B0aW9uc1wiKTtcclxuICBjb25zdCBzaGFkZXJDb21waWxhdGlvbkVycm9ycyA9IGNyZWF0ZURpdihcInZpZXdlci1jb250ZW50IHNoYWRlci1lcnJvcnNcIik7XHJcbiAgY29uc3QgW3dlYkdMQ2FudmFzLCB3ZWJHTENvbnRyb2xsZXJdID0gY3JlYXRlV2ViR0xDYW52YXMoXCJ2aWV3ZXItY29udGVudFwiKTtcclxuICBjb25zdCBtZXNoQXR0cmlidXRlQmluZGluZ3MgPSBjcmVhdGVNZXNoQmluZGluZ3MoKTtcclxuICBjb25zdCB1bmlmb3JtQmluZGluZ3MgPSBjcmVhdGVVbmlmb3JtQmluZGluZ3MoKTtcclxuICBjb25zdCBkcmF3T3B0aW9uczogRHJhd09wdGlvbnMgPSB7IGRyYXdNb2RlOiBcImFycmF5c1wiIH07XHJcbiAgbGV0IGNhbWVyYVBvc2l0aW9uOiBDYW1lcmFQb3NpdGlvbiA9IHsgbG9uZ2l0dWRlOiAxLCBsYXRpdHVkZTogMSwgcmFkaXVzOiAyIH07XHJcbiAgY29uc3QgY2FtZXJhUG9zaXRpb25NYW5pcHVsYXRvciA9IG5ldyBDYW1lcmFQb3NpdGlvbk1hbmlwdWxhdG9yKFxyXG4gICAgd2ViR0xDYW52YXMsXHJcbiAgICAoKSA9PiBjYW1lcmFQb3NpdGlvbixcclxuICAgIG5ld1Bvc2l0aW9uID0+IHtcclxuICAgICAgY2FtZXJhUG9zaXRpb24gPSBuZXdQb3NpdGlvbjtcclxuXHJcbiAgICAgIGNvbnN0IGZpZWxkT2ZWaWV3ID0gKDQ1ICogTWF0aC5QSSkgLyAxODA7IC8vIGluIHJhZGlhbnNcclxuICAgICAgLy90b2RvIGNhY2hlIHRoaXNcclxuICAgICAgY29uc3QgYXNwZWN0ID0gd2ViR0xDYW52YXMuY2xpZW50V2lkdGggLyB3ZWJHTENhbnZhcy5jbGllbnRIZWlnaHQ7XHJcbiAgICAgIGNvbnN0IHpOZWFyID0gMC4xO1xyXG4gICAgICBjb25zdCB6RmFyID0gMTAwLjA7XHJcbiAgICAgIGNvbnN0IHByb2plY3Rpb25NYXRyaXggPSBtYXQ0LmNyZWF0ZSgpO1xyXG4gICAgICBtYXQ0LnBlcnNwZWN0aXZlKHByb2plY3Rpb25NYXRyaXgsIGZpZWxkT2ZWaWV3LCBhc3BlY3QsIHpOZWFyLCB6RmFyKTtcclxuXHJcbiAgICAgIGNvbnN0IG1vZGVsVmlld01hdHJpeCA9IG1hdDQuY3JlYXRlKCk7XHJcbiAgICAgIGNvbnN0IHZlYyA9IGNhbWVyYVBvc2l0aW9uVG9WZWN0b3IzKGNhbWVyYVBvc2l0aW9uKTtcclxuXHJcbiAgICAgIG1hdDQubG9va0F0KG1vZGVsVmlld01hdHJpeCwgW3ZlYy54LCB2ZWMueSwgdmVjLnpdLCBbMCwgMCwgMF0sIFswLCAxLCAwXSk7XHJcblxyXG4gICAgICBjb25zdCByZXMgPSBtYXQ0LmNyZWF0ZSgpO1xyXG4gICAgICBtYXQ0Lm11bHRpcGx5KHJlcywgcHJvamVjdGlvbk1hdHJpeCwgbW9kZWxWaWV3TWF0cml4KTtcclxuXHJcbiAgICAgIHVuaWZvcm1CaW5kaW5ncy5nZXQoXCJsb2NhbFRvUHJvamVjdGVkXCIpLnZhbHVlLnNldFZhbHVlKHJlcyk7XHJcbiAgICB9XHJcbiAgKTtcclxuXHJcbiAgdmlld2VyLmFwcGVuZENoaWxkKHdlYkdMQ2FudmFzKTtcclxuICB2aWV3ZXIuYXBwZW5kQ2hpbGQoc2hhZGVyQ29tcGlsYXRpb25FcnJvcnMpO1xyXG4gIHZpZXdlci5hcHBlbmRDaGlsZCh2aWV3ZXJPcHRpb25zKTtcclxuXHJcbiAgY29uc3Qgc2hvd0NvbnRlbnQgPSAoY29udGVudDogXCJjYW52YXNcIiB8IFwiZXJyb3JzXCIgfCBcIm5vbmVcIikgPT4ge1xyXG4gICAgd2ViR0xDYW52YXMuc3R5bGUudmlzaWJpbGl0eSA9XHJcbiAgICAgIGNvbnRlbnQgPT09IFwiY2FudmFzXCIgPyBcInZpc2libGVcIiA6IFwiY29sbGFwc2VcIjtcclxuICAgIHNoYWRlckNvbXBpbGF0aW9uRXJyb3JzLnN0eWxlLnZpc2liaWxpdHkgPVxyXG4gICAgICBjb250ZW50ID09PSBcImVycm9yc1wiID8gXCJ2aXNpYmxlXCIgOiBcImNvbGxhcHNlXCI7XHJcbiAgfTtcclxuXHJcbiAgY29uc3Qgc3luY1NoYWRlckRvY3VtZW50cyA9ICgpID0+IHtcclxuICAgIHZpZXdlckVuZHBvaW50LmdldFNoYWRlckRvY3VtZW50cygpLnRoZW4oc2QgPT4ge1xyXG4gICAgICBjb25zdCBmaWxlcyA9IHNkLm1hcChmID0+ICh7XHJcbiAgICAgICAgaWQ6IGYuZmlsZVBhdGgsXHJcbiAgICAgICAgZGlzcGxheTogZi5maWxlTmFtZSxcclxuICAgICAgfSkpO1xyXG5cclxuICAgICAgdmVydGV4RHJvcGRvd25Db250cm9sbGVyLnNldEl0ZW1zKGZpbGVzKTtcclxuXHJcbiAgICAgIGlmIChcclxuICAgICAgICB2aWV3ZXJTdGF0ZS52ZXJ0ZXhGaWxlUGF0aCAmJlxyXG4gICAgICAgIGZpbGVzLnNvbWUoZiA9PiBmLmlkID09PSB2aWV3ZXJTdGF0ZS52ZXJ0ZXhGaWxlUGF0aClcclxuICAgICAgKVxyXG4gICAgICAgIHZlcnRleERyb3Bkb3duQ29udHJvbGxlci5zZXRTZWxlY3RlZEl0ZW1CeUlkKFxyXG4gICAgICAgICAgdmlld2VyU3RhdGUudmVydGV4RmlsZVBhdGhcclxuICAgICAgICApO1xyXG5cclxuICAgICAgZnJhZ21lbnREcm9wZG93bkNvbnRyb2xsZXIuc2V0SXRlbXMoZmlsZXMpO1xyXG5cclxuICAgICAgaWYgKFxyXG4gICAgICAgIHZpZXdlclN0YXRlLmZyYWdtZW50RmlsZVBhdGggJiZcclxuICAgICAgICBmaWxlcy5zb21lKGYgPT4gZi5pZCA9PT0gdmlld2VyU3RhdGUuZnJhZ21lbnRGaWxlUGF0aClcclxuICAgICAgKVxyXG4gICAgICAgIGZyYWdtZW50RHJvcGRvd25Db250cm9sbGVyLnNldFNlbGVjdGVkSXRlbUJ5SWQoXHJcbiAgICAgICAgICB2aWV3ZXJTdGF0ZS5mcmFnbWVudEZpbGVQYXRoXHJcbiAgICAgICAgKTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIGxldCBzZWxlY3RlZFZlcnRleEZpbGVXYXRjaGVyVW5zdWJzY3JpYmU6ICgpID0+IHZvaWQgfCB1bmRlZmluZWQ7XHJcbiAgbGV0IHNlbGVjdGVkRnJhZ21lbnRGaWxlV2F0Y2hlclVuc3Vic2NyaWJlOiAoKSA9PiB2b2lkIHwgdW5kZWZpbmVkO1xyXG4gIGxldCBzZWxlY3RlZFZlcnRleENvbnRlbnQ6IHN0cmluZyB8IG51bGw7XHJcbiAgbGV0IHNlbGVjdGVkRnJhZ21lbnRDb250ZW50OiBzdHJpbmcgfCBudWxsO1xyXG4gIGxldCBhbmltYXRpb25GcmFtZUhhbmRsZTogbnVtYmVyID0gbnVsbDtcclxuXHJcbiAgY29uc3Qgb25NZXNoQ2hhbmdlZCA9IChpZDogc3RyaW5nKSA9PiB7XHJcbiAgICBjb25zdCB7IHBvc2l0aW9ucywgY29sb3JzIH0gPSBtZXNoZXMuZ2V0KGlkKTtcclxuICAgIG1lc2hBdHRyaWJ1dGVCaW5kaW5ncy5nZXQoXCJwb3NpdGlvbnNcIikudmFsdWUuc2V0VmFsdWUocG9zaXRpb25zKTtcclxuICAgIG1lc2hBdHRyaWJ1dGVCaW5kaW5ncy5nZXQoXCJjb2xvcnNcIikudmFsdWUuc2V0VmFsdWUoY29sb3JzKTtcclxuICAgIC8vbWVzaEF0dHJpYnV0ZUJpbmRpbmdzLmdldChcIm5vcm1hbHNcIikudmFsdWUuc2V0VmFsdWUobm9ybWFscyk7XHJcbiAgfTtcclxuXHJcbiAgLy9cclxuXHJcbiAgLy9cclxuXHJcbiAgY29uc3Qgb25TaGFkZXJDb250ZW50Q2hhbmdlZCA9ICgpID0+IHtcclxuICAgIHNoYWRlck9wdGlvbnMuaW5uZXJIVE1MID0gXCJcIjtcclxuICAgIGNvbnN0IGNvbnRleHQgPSB3ZWJHTENvbnRyb2xsZXIuY29udGV4dDtcclxuXHJcbiAgICBpZiAoc2VsZWN0ZWRGcmFnbWVudENvbnRlbnQgJiYgc2VsZWN0ZWRWZXJ0ZXhDb250ZW50KSB7XHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGNvbXBpbGVTaGFkZXJzRnJvbVNvdXJjZShcclxuICAgICAgICBjb250ZXh0LFxyXG4gICAgICAgIHNlbGVjdGVkVmVydGV4Q29udGVudCxcclxuICAgICAgICBzZWxlY3RlZEZyYWdtZW50Q29udGVudFxyXG4gICAgICApO1xyXG5cclxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmVzdWx0KSkge1xyXG4gICAgICAgIHNob3dDb250ZW50KFwiZXJyb3JzXCIpO1xyXG4gICAgICAgIHNoYWRlckNvbXBpbGF0aW9uRXJyb3JzLmlubmVyVGV4dCA9IGZvcm1hdFNoYWRlckNvbXBpbGVFcnJvcnMoXHJcbiAgICAgICAgICByZXN1bHQgYXMgU2hhZGVyQ29tcGlsZUVycm9yc1xyXG4gICAgICAgICk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc2hvd0NvbnRlbnQoXCJjYW52YXNcIik7XHJcbiAgICAgICAgY29uc3QgcHJvZ3JhbSA9IHJlc3VsdCBhcyBXZWJHTFByb2dyYW07XHJcbiAgICAgICAgY29uc3QgcHJvZ3JhbVVuaWZvcm1zID0gZ2V0UHJvZ3JhbVVuaWZvcm1zKGNvbnRleHQsIHByb2dyYW0pO1xyXG4gICAgICAgIGNvbnN0IHByb2dyYW1BdHRyaWJ1dGVCdWZmZXJzID0gZ2V0UHJvZ3JhbUF0dHJpYnV0ZUJ1ZmZlcnMoXHJcbiAgICAgICAgICBjb250ZXh0LFxyXG4gICAgICAgICAgcHJvZ3JhbVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIGNvbnN0IHVuaWZvcm1Db21wb25lbnRzID0gY3JlYXRlVW5pZm9ybUNvbXBvbmVudHMoXHJcbiAgICAgICAgICBjb250ZXh0LFxyXG4gICAgICAgICAgcHJvZ3JhbSxcclxuICAgICAgICAgIHByb2dyYW1Vbmlmb3JtcyxcclxuICAgICAgICAgIEFycmF5LmZyb20odW5pZm9ybUJpbmRpbmdzLnZhbHVlcygpKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdW5pZm9ybUNvbXBvbmVudHMuZm9yRWFjaCh1YyA9PlxyXG4gICAgICAgICAgc2hhZGVyT3B0aW9ucy5hcHBlbmRDaGlsZCh1Yy5jb21wb25lbnQpXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgY29uc3QgYXR0cmlidXRlQnVmZmVyQ29tcG9uZW50cyA9IGNyZWF0ZUF0dHJpYnV0ZUJ1ZmZlckNvbXBvbmVudHMoXHJcbiAgICAgICAgICBjb250ZXh0LFxyXG4gICAgICAgICAgcHJvZ3JhbSxcclxuICAgICAgICAgIHByb2dyYW1BdHRyaWJ1dGVCdWZmZXJzLFxyXG4gICAgICAgICAgQXJyYXkuZnJvbShtZXNoQXR0cmlidXRlQmluZGluZ3MudmFsdWVzKCkpXHJcbiAgICAgICAgKTtcclxuICAgICAgICBhdHRyaWJ1dGVCdWZmZXJDb21wb25lbnRzLmZvckVhY2goYWIgPT5cclxuICAgICAgICAgIHNoYWRlck9wdGlvbnMuYXBwZW5kQ2hpbGQoYWIuY29tcG9uZW50KVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIGNvbnN0IHVuaWZvcm1JbmZvcyA9IHVuaWZvcm1Db21wb25lbnRzLm1hcCh1YyA9PiB1Yy51bmlmb3JtSW5mbyk7XHJcbiAgICAgICAgY29uc3QgYXR0cmlidXRlQnVmZmVySW5mb3MgPSBhdHRyaWJ1dGVCdWZmZXJDb21wb25lbnRzLm1hcChcclxuICAgICAgICAgIGFiYyA9PiBhYmMuYXR0cmlidXRlQnVmZmVySW5mb1xyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIGNvbnN0IGluZGV4QnVmZmVySW5mbyA9IG5ldyBJbmRleEJ1ZmZlckluZm8oY29udGV4dCk7XHJcbiAgICAgICAgaW5kZXhCdWZmZXJJbmZvLnNldFZhbHVlKFtcclxuICAgICAgICAgIDAsXHJcbiAgICAgICAgICAxLFxyXG4gICAgICAgICAgMixcclxuICAgICAgICAgIDAsXHJcbiAgICAgICAgICAyLFxyXG4gICAgICAgICAgMywgLy8gZnJvbnRcclxuICAgICAgICAgIDQsXHJcbiAgICAgICAgICA1LFxyXG4gICAgICAgICAgNixcclxuICAgICAgICAgIDQsXHJcbiAgICAgICAgICA2LFxyXG4gICAgICAgICAgNywgLy8gYmFja1xyXG4gICAgICAgICAgOCxcclxuICAgICAgICAgIDksXHJcbiAgICAgICAgICAxMCxcclxuICAgICAgICAgIDgsXHJcbiAgICAgICAgICAxMCxcclxuICAgICAgICAgIDExLCAvLyB0b3BcclxuICAgICAgICAgIDEyLFxyXG4gICAgICAgICAgMTMsXHJcbiAgICAgICAgICAxNCxcclxuICAgICAgICAgIDEyLFxyXG4gICAgICAgICAgMTQsXHJcbiAgICAgICAgICAxNSwgLy8gYm90dG9tXHJcbiAgICAgICAgICAxNixcclxuICAgICAgICAgIDE3LFxyXG4gICAgICAgICAgMTgsXHJcbiAgICAgICAgICAxNixcclxuICAgICAgICAgIDE4LFxyXG4gICAgICAgICAgMTksIC8vIHJpZ2h0XHJcbiAgICAgICAgICAyMCxcclxuICAgICAgICAgIDIxLFxyXG4gICAgICAgICAgMjIsXHJcbiAgICAgICAgICAyMCxcclxuICAgICAgICAgIDIyLFxyXG4gICAgICAgICAgMjMsIC8vIGxlZnRcclxuICAgICAgICBdKTtcclxuXHJcbiAgICAgICAgaWYgKGFuaW1hdGlvbkZyYW1lSGFuZGxlICE9PSBudWxsKVxyXG4gICAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoYW5pbWF0aW9uRnJhbWVIYW5kbGUpO1xyXG5cclxuICAgICAgICBjb25zdCByZW5kZXIgPSAoKSA9PiB7XHJcbiAgICAgICAgICByZW5kZXJQcm9ncmFtKFxyXG4gICAgICAgICAgICBjb250ZXh0LFxyXG4gICAgICAgICAgICBwcm9ncmFtLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgdW5pZm9ybUluZm9zLFxyXG4gICAgICAgICAgICAgIGF0dHJpYnV0ZUJ1ZmZlckluZm9zLFxyXG4gICAgICAgICAgICAgIGluZGV4QnVmZmVySW5mbyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZHJhd09wdGlvbnNcclxuICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgYW5pbWF0aW9uRnJhbWVIYW5kbGUgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVuZGVyKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZW5kZXIoKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc2hvd0NvbnRlbnQoXCJub25lXCIpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHZpZXdlck9wdGlvbnMuYXBwZW5kQ2hpbGQoXHJcbiAgICBjcmVhdGVEaXYoXCJ2aWV3ZXItc2hhZGVycy10aXRsZVwiLCBbXHJcbiAgICAgIGNyZWF0ZVNlY3Rpb25UaXRsZSh0cmFuc2xhdGlvbnMuc2hhZGVycywgXCJcIikuZWxlbWVudCxcclxuICAgICAgY3JlYXRlQnV0dG9uKFwiU3luY1wiLCBcInZpZXdlci1yZWZyZXNoLWJ1dHRvblwiLCBzeW5jU2hhZGVyRG9jdW1lbnRzKVxyXG4gICAgICAgIC5lbGVtZW50LFxyXG4gICAgXSlcclxuICApO1xyXG5cclxuICBjb25zdCBbdmVydGV4RHJvcGRvd25FbGVtZW50LCB2ZXJ0ZXhEcm9wZG93bkNvbnRyb2xsZXJdID0gY3JlYXRlRHJvcGRvd24oXHJcbiAgICBhc3luYyBuZXdWZXJ0ZXggPT4ge1xyXG4gICAgICBzZWxlY3RlZFZlcnRleEZpbGVXYXRjaGVyVW5zdWJzY3JpYmU/LigpO1xyXG5cclxuICAgICAgaWYgKG5ld1ZlcnRleCkge1xyXG4gICAgICAgIHNlbGVjdGVkVmVydGV4RmlsZVdhdGNoZXJVbnN1YnNjcmliZSA9IHZpZXdlckVuZHBvaW50LnN1YnNjcmliZVRvRG9jdW1lbnRTYXZlKFxyXG4gICAgICAgICAgbmV3VmVydGV4LmlkLFxyXG4gICAgICAgICAgbmV3Q29udGVudCA9PiB7XHJcbiAgICAgICAgICAgIHNlbGVjdGVkVmVydGV4Q29udGVudCA9IG5ld0NvbnRlbnQ7XHJcbiAgICAgICAgICAgIG9uU2hhZGVyQ29udGVudENoYW5nZWQoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBzZWxlY3RlZFZlcnRleENvbnRlbnQgPSBuZXdWZXJ0ZXhcclxuICAgICAgICA/IGF3YWl0IHZpZXdlckVuZHBvaW50LmdldERvY3VtZW50VGV4dChuZXdWZXJ0ZXguaWQpXHJcbiAgICAgICAgOiBcIlwiO1xyXG5cclxuICAgICAgc2V0U3RhdGUoeyB2ZXJ0ZXhGaWxlUGF0aDogbmV3VmVydGV4ID8gbmV3VmVydGV4LmlkIDogbnVsbCB9KTtcclxuICAgICAgb25TaGFkZXJDb250ZW50Q2hhbmdlZCgpO1xyXG4gICAgfVxyXG4gICk7XHJcbiAgdmVydGV4RHJvcGRvd25Db250cm9sbGVyLnNldFNlbGVjdGVkSXRlbUJ5SWQodmlld2VyU3RhdGUudmVydGV4RmlsZVBhdGgpO1xyXG4gIHZpZXdlck9wdGlvbnMuYXBwZW5kQ2hpbGQod2l0aExhYmVsKHZlcnRleERyb3Bkb3duRWxlbWVudCwgXCJWZXJ0ZXggU2hhZGVyXCIpKTtcclxuXHJcbiAgY29uc3QgW2ZyYWdtZW50RHJvcGRvd25FbGVtZW50LCBmcmFnbWVudERyb3Bkb3duQ29udHJvbGxlcl0gPSBjcmVhdGVEcm9wZG93bihcclxuICAgIGFzeW5jIG5ld0ZyYWdtZW50ID0+IHtcclxuICAgICAgc2VsZWN0ZWRGcmFnbWVudEZpbGVXYXRjaGVyVW5zdWJzY3JpYmU/LigpO1xyXG5cclxuICAgICAgaWYgKG5ld0ZyYWdtZW50KSB7XHJcbiAgICAgICAgc2VsZWN0ZWRGcmFnbWVudEZpbGVXYXRjaGVyVW5zdWJzY3JpYmUgPSB2aWV3ZXJFbmRwb2ludC5zdWJzY3JpYmVUb0RvY3VtZW50U2F2ZShcclxuICAgICAgICAgIG5ld0ZyYWdtZW50LmlkLFxyXG4gICAgICAgICAgbmV3Q29udGVudCA9PiB7XHJcbiAgICAgICAgICAgIHNlbGVjdGVkRnJhZ21lbnRDb250ZW50ID0gbmV3Q29udGVudDtcclxuICAgICAgICAgICAgb25TaGFkZXJDb250ZW50Q2hhbmdlZCgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHNlbGVjdGVkRnJhZ21lbnRDb250ZW50ID0gbmV3RnJhZ21lbnRcclxuICAgICAgICA/IGF3YWl0IHZpZXdlckVuZHBvaW50LmdldERvY3VtZW50VGV4dChuZXdGcmFnbWVudC5pZClcclxuICAgICAgICA6IFwiXCI7XHJcblxyXG4gICAgICBzZXRTdGF0ZSh7IGZyYWdtZW50RmlsZVBhdGg6IG5ld0ZyYWdtZW50ID8gbmV3RnJhZ21lbnQuaWQgOiBudWxsIH0pO1xyXG4gICAgICBvblNoYWRlckNvbnRlbnRDaGFuZ2VkKCk7XHJcbiAgICB9XHJcbiAgKTtcclxuICBmcmFnbWVudERyb3Bkb3duQ29udHJvbGxlci5zZXRTZWxlY3RlZEl0ZW1CeUlkKHZpZXdlclN0YXRlLmZyYWdtZW50RmlsZVBhdGgpO1xyXG4gIHZpZXdlck9wdGlvbnMuYXBwZW5kQ2hpbGQoXHJcbiAgICB3aXRoTGFiZWwoZnJhZ21lbnREcm9wZG93bkVsZW1lbnQsIFwiRnJhZ21lbnQgU2hhZGVyXCIpXHJcbiAgKTtcclxuXHJcbiAgY29uc3QgW21lc2hEcm9wZG93bkVsZW1lbnQsIG1lc2hEcm9wZG93bkNvbnRyb2xsZXJdID0gY3JlYXRlRHJvcGRvd24oXHJcbiAgICBpdGVtID0+IGl0ZW0gJiYgb25NZXNoQ2hhbmdlZChpdGVtLmlkKSxcclxuICAgIHVuZGVmaW5lZCxcclxuICAgIHsgZW1wdHlJdGVtOiBmYWxzZSB9XHJcbiAgKTtcclxuICBtZXNoRHJvcGRvd25Db250cm9sbGVyLnNldEl0ZW1zKFxyXG4gICAgQXJyYXkuZnJvbShtZXNoZXMuZW50cmllcygpKS5tYXAoKFtrZXksIHZhbHVlXSkgPT4gKHtcclxuICAgICAgaWQ6IGtleSxcclxuICAgICAgZGlzcGxheTogdmFsdWUuZGlzcGxheSxcclxuICAgIH0pKVxyXG4gICk7XHJcbiAgbWVzaERyb3Bkb3duQ29udHJvbGxlci5zZXRTZWxlY3RlZEl0ZW1CeUluZGV4KDApO1xyXG5cclxuICB2aWV3ZXJPcHRpb25zLmFwcGVuZENoaWxkKHdpdGhMYWJlbChtZXNoRHJvcGRvd25FbGVtZW50LCBcIk1lc2hcIikpO1xyXG5cclxuICBjb25zdCBbZHJhd01vZGVFbGVtZW50LCBkcmF3TW9kZUNvbnRyb2xsZXJdID0gY3JlYXRlRHJvcGRvd24oXHJcbiAgICBpdGVtID0+IHtcclxuICAgICAgaWYgKCFpdGVtKSByZXR1cm47XHJcbiAgICAgIGRyYXdPcHRpb25zLmRyYXdNb2RlID0gaXRlbS5pZCBhcyBcImFycmF5c1wiIHwgXCJlbGVtZW50c1wiO1xyXG4gICAgICBzZXRTdGF0ZSh7IGRyYXdNb2RlOiBpdGVtLmlkIH0pO1xyXG4gICAgfSxcclxuICAgIHVuZGVmaW5lZCxcclxuICAgIHsgZW1wdHlJdGVtOiBmYWxzZSB9XHJcbiAgKTtcclxuICBkcmF3TW9kZUNvbnRyb2xsZXIuc2V0SXRlbXMoW1xyXG4gICAgeyBpZDogXCJhcnJheXNcIiwgZGlzcGxheTogXCJBcnJheXNcIiB9LFxyXG4gICAgeyBpZDogXCJlbGVtZW50c1wiLCBkaXNwbGF5OiBcIkVsZW1lbnRzXCIgfSxcclxuICBdKTtcclxuICBkcmF3TW9kZUNvbnRyb2xsZXIuc2V0U2VsZWN0ZWRJdGVtQnlJZCh2aWV3ZXJTdGF0ZS5kcmF3TW9kZSk7XHJcbiAgdmlld2VyT3B0aW9ucy5hcHBlbmRDaGlsZCh3aXRoTGFiZWwoZHJhd01vZGVFbGVtZW50LCBcIkRyYXcgbW9kZVwiKSk7XHJcblxyXG4gIC8vaW5kZXhlc1xyXG5cclxuICB2aWV3ZXJPcHRpb25zLmFwcGVuZENoaWxkKHNoYWRlck9wdGlvbnMpO1xyXG5cclxuICBzeW5jU2hhZGVyRG9jdW1lbnRzKCk7XHJcbn07XHJcblxyXG5jcmVhdGVWaWV3ZXIoKTtcclxuIiwiZXhwb3J0IGNvbnN0IGNyZWF0ZVNlY3Rpb25UaXRsZSA9ICh0ZXh0OiBzdHJpbmcsIGNsYXNzTmFtZTogc3RyaW5nKSA9PiB7XHJcbiAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoM1wiKTtcclxuICBlbGVtZW50LnRleHRDb250ZW50ID0gdGV4dDtcclxuICBlbGVtZW50LmNsYXNzTmFtZSA9IGAke2NsYXNzTmFtZX0gc2VjdGlvbi10aXRsZWA7XHJcbiAgLy9lbGVtZW50LnRpdGxlID0gJzEgMjEyMycsLCBgPHN2ZyB3aWR0aD1cIjE2XCIgaGVpZ2h0PVwiMTZcIiB2aWV3Qm94PVwiMCAwIDE2IDE2XCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIGZpbGw9XCJjdXJyZW50Q29sb3JcIj48cGF0aCBmaWxsLXJ1bGU9XCJldmVub2RkXCIgY2xpcC1ydWxlPVwiZXZlbm9kZFwiIGQ9XCJNNy41NiAxaC44OGw2LjU0IDEyLjI2LS40NC43NEgxLjQ0TDEgMTMuMjYgNy41NiAxek04IDIuMjhMMi4yOCAxM0gxMy43TDggMi4yOHpNOC42MjUgMTJ2LTFoLTEuMjV2MWgxLjI1em0tMS4yNS0yVjZoMS4yNXY0aC0xLjI1elwiLz48L3N2Zz5gO1xyXG4gIHJldHVybiB7IGVsZW1lbnQgfTtcclxufTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==