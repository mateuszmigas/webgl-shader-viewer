!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);var r="SHADERS",o=function(){return(o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},i=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],a=0,u=i.length;a<u;a++,o++)r[o]=i[a];return r},a={emptyItem:!0},u=function(e,t,n){var r=o(o({},a),n),u=document.createElement("select");u.className="dropdown-base "+t;var c=null,l=[],s=function(t){e(c=t)};u.onchange=function(){var e=l.find((function(e){return e.item.id===u.value}));e.item.id?s(e.item):s(null)};return[u,{setItems:function(e){u.innerHTML="",l.length=0,e.find((function(e){return e.id===(null==c?void 0:c.id)}))||s(null),(r.emptyItem?i([{id:"",display:""}],e):i(e)).forEach((function(e){var t=document.createElement("option");t.value=e.id,t.textContent=e.display,t.selected=e.id===(null==c?void 0:c.id),u.appendChild(t),l.push({element:t,item:e})}))},getItems:function(){return l.map((function(e){return e.item}))},setSelectedItemById:function(e){s(null),l.forEach((function(t){t.item.id===e?(t.element.selected=!0,s(t.item)):t.element.selected=!1}))},getSelectedItem:function(){return c},clearSelection:function(){l.forEach((function(e){return e.element.selected=!1})),s(null)}}]},c=acquireVsCodeApi(),l=function(){function e(){var e=this;this.eventListeners=[],window.addEventListener("message",(function(t){e.eventListeners.forEach((function(e){return e(t.data)}))}))}return e.prototype.getShaderDocuments=function(){var e=this;return c.postMessage({type:"getShaderDocuments"}),new Promise((function(t){var n=function(r){"getShaderDocuments"===r.type&&(t(r.payload.files),e.removeListener(n))};e.eventListeners.push(n)}))},e.prototype.subscribeToDocumentChange=function(e,t){var n=this;c.postMessage({type:"subscribeToDocumentChange",payload:{filePath:e}});var r=function(n){"onDocumentChange"===n.type&&n.payload.filePath===e&&t(n.payload.newContent)};return this.eventListeners.push(r),function(){n.removeListener(r),c.postMessage({type:"unsubscribeToDocumentChange",payload:{filePath:e}})}},e.prototype.removeListener=function(e){var t,n,r;t=this.eventListeners,n=e,(r=t.indexOf(n))>-1&&t.splice(r,1)},e}(),s=function(e,t){var n=document.createElement("h3");return n.textContent=e,n.className=t+" section-title",{element:n}},f=function(e,t,n){var r=document.createElement("button");return r.onclick=n,r.className=t,r.textContent=e,{element:r}},d=function(e,t,n){var r=document.createElement("div");r.className=t+" options-wrapper";var o=document.createElement("label");return o.className="options-label",o.textContent=n,e.className=e.className+" options-content",r.appendChild(o),r.appendChild(e),r},p=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function u(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,u)}c((r=r.apply(e,t||[])).next())}))},m=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=a.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}},h=function(e,t){var n=document.createElement("div");return n.className=e,null==t||t.forEach((function(e){return n.appendChild(e)})),n};p(void 0,void 0,void 0,(function(){var e,t,n,o,i,a,c,p,v,y,b,g,w;return m(this,(function(m){var C,S,x;return e=new l,t=document.getElementById("viewer"),n=h("viewer-options"),o=h("viewer-shader-options"),C="viewer-content",S=document.createElement("canvas"),x=S.getContext("2d"),S.className=C,S.width=500,S.height=500,x.fillStyle="green",x.fillRect(150,150,200,450),i=S,t.appendChild(i),t.appendChild(n),c=function(){o.innerHTML=""},n.appendChild(h("viewer-shaders-title",[s(r,"").element,f("Sync","viewer-refresh-button",(function(){e.getShaderDocuments().then((function(e){var t=e.map((function(e){return{id:e.filePath,display:e.fileName}}));y.setItems(t),w.setItems(t)}))})).element])),p=u((function(t){null==a||a(),t&&(a=e.subscribeToDocumentChange(t.id,(function(e){console.log("new content",e)}))),c()})),v=p[0],y=p[1],n.appendChild(d(v,"viewer-vertex-shader-selector","Vertex Shader")),b=u((function(e){c()})),g=b[0],w=b[1],n.appendChild(d(g,"viewer-fragment-shader-selector","Fragment Shader")),n.appendChild(o),[2]}))}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,