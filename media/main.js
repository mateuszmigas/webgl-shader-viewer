!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=14)}([function(e,t,n){"use strict";e.exports=n(47)},function(e,t,n){"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";n.r(t),n.d(t,"Provider",(function(){return c})),n.d(t,"connectAdvanced",(function(){return E})),n.d(t,"ReactReduxContext",(function(){return i})),n.d(t,"connect",(function(){return U})),n.d(t,"batch",(function(){return G.unstable_batchedUpdates})),n.d(t,"useDispatch",(function(){return q})),n.d(t,"createDispatchHook",(function(){return $})),n.d(t,"useSelector",(function(){return X})),n.d(t,"createSelectorHook",(function(){return K})),n.d(t,"useStore",(function(){return H})),n.d(t,"createStoreHook",(function(){return W})),n.d(t,"shallowEqual",(function(){return k}));var r=n(0),o=n.n(r),i=(n(53),o.a.createContext(null));var a=function(e){e()},u={notify:function(){}};function l(){var e=a,t=null,n=null;return{clear:function(){t=null,n=null},notify:function(){e((function(){for(var e=t;e;)e.callback(),e=e.next}))},get:function(){for(var e=[],n=t;n;)e.push(n),n=n.next;return e},subscribe:function(e){var r=!0,o=n={callback:e,next:null,prev:n};return o.prev?o.prev.next=o:t=o,function(){r&&null!==t&&(r=!1,o.next?o.next.prev=o.prev:n=o.prev,o.prev?o.prev.next=o.next:t=o.next)}}}}var s=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=u,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=l())},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=u)},e}();var c=function(e){var t=e.store,n=e.context,a=e.children,u=Object(r.useMemo)((function(){var e=new s(t);return e.onStateChange=e.notifyNestedSubs,{store:t,subscription:e}}),[t]),l=Object(r.useMemo)((function(){return t.getState()}),[t]);Object(r.useEffect)((function(){var e=u.subscription;return e.trySubscribe(),l!==t.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[u,l]);var c=n||i;return o.a.createElement(c.Provider,{value:u},a)},f=n(1),d=n(3),p=n(23),h=n.n(p),m=n(21),v="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?r.useLayoutEffect:r.useEffect,y=[],g=[null,null];function b(e,t){var n=e[1];return[t.payload,n+1]}function w(e,t,n){v((function(){return e.apply(void 0,t)}),n)}function _(e,t,n,r,o,i,a){e.current=r,t.current=o,n.current=!1,i.current&&(i.current=null,a())}function S(e,t,n,r,o,i,a,u,l,s){if(e){var c=!1,f=null,d=function(){if(!c){var e,n,d=t.getState();try{e=r(d,o.current)}catch(e){n=e,f=e}n||(f=null),e===i.current?a.current||l():(i.current=e,u.current=e,a.current=!0,s({type:"STORE_UPDATED",payload:{error:n}}))}};n.onStateChange=d,n.trySubscribe(),d();return function(){if(c=!0,n.tryUnsubscribe(),n.onStateChange=null,f)throw f}}}var x=function(){return[null,0]};function E(e,t){void 0===t&&(t={});var n=t,a=n.getDisplayName,u=void 0===a?function(e){return"ConnectAdvanced("+e+")"}:a,l=n.methodName,c=void 0===l?"connectAdvanced":l,p=n.renderCountProp,v=void 0===p?void 0:p,E=n.shouldHandleStateChanges,O=void 0===E||E,k=n.storeKey,P=void 0===k?"store":k,I=(n.withRef,n.forwardRef),C=void 0!==I&&I,M=n.context,T=void 0===M?i:M,R=Object(d.a)(n,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"]),L=T;return function(t){var n=t.displayName||t.name||"Component",i=u(n),a=Object(f.a)({},R,{getDisplayName:u,methodName:c,renderCountProp:v,shouldHandleStateChanges:O,storeKey:P,displayName:i,wrappedComponentName:n,WrappedComponent:t}),l=R.pure;var p=l?r.useMemo:function(e){return e()};function E(n){var i=Object(r.useMemo)((function(){var e=n.reactReduxForwardedRef,t=Object(d.a)(n,["reactReduxForwardedRef"]);return[n.context,e,t]}),[n]),u=i[0],l=i[1],c=i[2],h=Object(r.useMemo)((function(){return u&&u.Consumer&&Object(m.isContextConsumer)(o.a.createElement(u.Consumer,null))?u:L}),[u,L]),v=Object(r.useContext)(h),E=Boolean(n.store)&&Boolean(n.store.getState)&&Boolean(n.store.dispatch);Boolean(v)&&Boolean(v.store);var k=E?n.store:v.store,P=Object(r.useMemo)((function(){return function(t){return e(t.dispatch,a)}(k)}),[k]),I=Object(r.useMemo)((function(){if(!O)return g;var e=new s(k,E?null:v.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]}),[k,E,v]),C=I[0],M=I[1],T=Object(r.useMemo)((function(){return E?v:Object(f.a)({},v,{subscription:C})}),[E,v,C]),R=Object(r.useReducer)(b,y,x),N=R[0][0],j=R[1];if(N&&N.error)throw N.error;var A=Object(r.useRef)(),F=Object(r.useRef)(c),D=Object(r.useRef)(),z=Object(r.useRef)(!1),B=p((function(){return D.current&&c===F.current?D.current:P(k.getState(),c)}),[k,N,c]);w(_,[F,A,z,c,B,D,M]),w(S,[O,k,C,P,F,A,z,D,M,j],[k,C,P]);var U=Object(r.useMemo)((function(){return o.a.createElement(t,Object(f.a)({},B,{ref:l}))}),[l,t,B]);return Object(r.useMemo)((function(){return O?o.a.createElement(h.Provider,{value:T},U):U}),[h,U,T])}var k=l?o.a.memo(E):E;if(k.WrappedComponent=t,k.displayName=i,C){var I=o.a.forwardRef((function(e,t){return o.a.createElement(k,Object(f.a)({},e,{reactReduxForwardedRef:t}))}));return I.displayName=i,I.WrappedComponent=t,h()(I,t)}return h()(k,t)}}function O(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function k(e,t){if(O(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!Object.prototype.hasOwnProperty.call(t,n[o])||!O(e[n[o]],t[n[o]]))return!1;return!0}var P=n(20);function I(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function C(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function M(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=C(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=C(o),o=r(t,n)),o},r}}var T=[function(e){return"function"==typeof e?M(e):void 0},function(e){return e?void 0:I((function(e){return{dispatch:e}}))},function(e){return e&&"object"==typeof e?I((function(t){return Object(P.bindActionCreators)(e,t)})):void 0}];var R=[function(e){return"function"==typeof e?M(e):void 0},function(e){return e?void 0:I((function(){return{}}))}];function L(e,t,n){return Object(f.a)({},n,e,t)}var N=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,o=n.pure,i=n.areMergedPropsEqual,a=!1;return function(t,n,u){var l=e(t,n,u);return a?o&&i(l,r)||(r=l):(a=!0,r=l),r}}}(e):void 0},function(e){return e?void 0:function(){return L}}];function j(e,t,n,r){return function(o,i){return n(e(o,i),t(r,i),i)}}function A(e,t,n,r,o){var i,a,u,l,s,c=o.areStatesEqual,f=o.areOwnPropsEqual,d=o.areStatePropsEqual,p=!1;function h(o,p){var h,m,v=!f(p,a),y=!c(o,i);return i=o,a=p,v&&y?(u=e(i,a),t.dependsOnOwnProps&&(l=t(r,a)),s=n(u,l,a)):v?(e.dependsOnOwnProps&&(u=e(i,a)),t.dependsOnOwnProps&&(l=t(r,a)),s=n(u,l,a)):y?(h=e(i,a),m=!d(h,u),u=h,m&&(s=n(u,l,a)),s):s}return function(o,c){return p?h(o,c):(u=e(i=o,a=c),l=t(r,a),s=n(u,l,a),p=!0,s)}}function F(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,i=Object(d.a)(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),a=n(e,i),u=r(e,i),l=o(e,i);return(i.pure?A:j)(a,u,l,e,i)}function D(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function z(e,t){return e===t}function B(e){var t=void 0===e?{}:e,n=t.connectHOC,r=void 0===n?E:n,o=t.mapStateToPropsFactories,i=void 0===o?R:o,a=t.mapDispatchToPropsFactories,u=void 0===a?T:a,l=t.mergePropsFactories,s=void 0===l?N:l,c=t.selectorFactory,p=void 0===c?F:c;return function(e,t,n,o){void 0===o&&(o={});var a=o,l=a.pure,c=void 0===l||l,h=a.areStatesEqual,m=void 0===h?z:h,v=a.areOwnPropsEqual,y=void 0===v?k:v,g=a.areStatePropsEqual,b=void 0===g?k:g,w=a.areMergedPropsEqual,_=void 0===w?k:w,S=Object(d.a)(a,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),x=D(e,i,"mapStateToProps"),E=D(t,u,"mapDispatchToProps"),O=D(n,s,"mergeProps");return r(p,Object(f.a)({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:x,initMapDispatchToProps:E,initMergeProps:O,pure:c,areStatesEqual:m,areOwnPropsEqual:y,areStatePropsEqual:b,areMergedPropsEqual:_},S))}}var U=B();function V(){return Object(r.useContext)(i)}function W(e){void 0===e&&(e=i);var t=e===i?V:function(){return Object(r.useContext)(e)};return function(){return t().store}}var H=W();function $(e){void 0===e&&(e=i);var t=e===i?H:W(e);return function(){return t().dispatch}}var q=$(),Q=function(e,t){return e===t};function K(e){void 0===e&&(e=i);var t=e===i?V:function(){return Object(r.useContext)(e)};return function(e,n){void 0===n&&(n=Q);var o=t(),i=function(e,t,n,o){var i,a=Object(r.useReducer)((function(e){return e+1}),0)[1],u=Object(r.useMemo)((function(){return new s(n,o)}),[n,o]),l=Object(r.useRef)(),c=Object(r.useRef)(),f=Object(r.useRef)(),d=Object(r.useRef)(),p=n.getState();try{i=e!==c.current||p!==f.current||l.current?e(p):d.current}catch(e){throw l.current&&(e.message+="\nThe error may be correlated with this previous error:\n"+l.current.stack+"\n\n"),e}return v((function(){c.current=e,f.current=p,d.current=i,l.current=void 0})),v((function(){function e(){try{var e=c.current(n.getState());if(t(e,d.current))return;d.current=e}catch(e){l.current=e}a()}return u.onStateChange=e,u.trySubscribe(),e(),function(){return u.tryUnsubscribe()}}),[n,u]),i}(e,n,o.store,o.subscription);return Object(r.useDebugValue)(i),i}}var Y,X=K(),G=n(15);Y=G.unstable_batchedUpdates,a=Y},function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.customOption=void 0,t.customOption={id:"custom",display:"Custom"}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Dropdown=void 0;var i=o(n(0)),a=n(67);t.Dropdown=i.default.memo((function(e){var t=e.selectedItemId,n=e.onChange,o=e.options,s=a.useDropdownState(o.length,{selectedIndexes:[]},{},(function(e){void 0!==e.selectedIndexes&&n(e.selectedIndexes.length>0?o[e.selectedIndexes[0]].id:null)})),c=s[0],f=s[1],d=o.findIndex((function(e){return e.id===t})),p=d>=0?d:null,h=i.default.useRef(null),m=i.default.useRef(null);a.useDropdownCloseWhenClickedOutside(h,f),a.useFocusOnStateChange(m,c.isOpen,!0);var v=a.useDropdownListKeyboardNavigator(f);return i.default.createElement("div",{ref:h,className:"dropdown-container"},i.default.createElement(u,r({},c,{dispatch:f,showClearButton:!1,itemRenderer:function(){return i.default.createElement("div",null,null!==p?o[p].display:"")}})),c.isOpen&&i.default.createElement("div",{className:"dropdown-list",onKeyDown:v,ref:m,tabIndex:0},i.default.createElement(a.VirtualizedList,{itemCount:o.length,itemHeight:25,highlightedIndex:c.highlightedIndex,maxHeight:200,itemRenderer:function(e){return i.default.createElement(l,{text:o[e].display,index:e,isSelected:p===e,isHighlighted:c.highlightedIndex===e,dispatch:f})}})))}));var u=function(e){var t=e.isOpen,n=e.itemRenderer,r=e.showClearButton,o=void 0===r||r,u=e.dispatch,l=i.default.useRef(null),s=i.default.useCallback((function(){return u([t?"CloseList":"OpenList"])}),[t,u]),c=i.default.useCallback((function(){return u(["ClearSelection"])}),[u]);return a.useFocusOnStateChange(l,t,!1),i.default.createElement("div",{className:"dropdown-main"},i.default.createElement("button",{ref:l,className:"dropdown-select",onClick:s},n(),i.default.createElement("i",{className:"fa "+(t?"fa-caret-up":"fa-caret-down")})),o&&i.default.createElement("button",{className:"dropdown-clear",onClick:c},i.default.createElement("i",{className:"fa fa-times"})))},l=function(e){var t=e.text,n=e.index,r=e.isSelected,o=e.isHighlighted,a=e.dispatch,u="dropdown-list-item "+(r?"selected":"")+"  "+(o?"highlighted":"");return i.default.createElement("div",{key:n,onClick:function(){return a([{type:"SelectIndex",index:n},"CloseList"])},className:u},i.default.createElement("div",{className:"dropdown-list-item-text"},t))}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.SectionField=void 0;var o=r(n(0));t.SectionField=o.default.memo((function(e){return o.default.createElement("div",{className:"viewer-options-section-field"},o.default.createElement("label",null,e.text),e.children)}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.assertNever=t.hasProperty=void 0;t.hasProperty=function(e,t){return e.hasOwnProperty(t)};t.assertNever=function(e){throw new Error("Unhandled union member: "+JSON.stringify(e))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.repeat=t.range=t.removeLast=t.remove=void 0;t.remove=function(e,t){var n=e.indexOf(t);n>-1&&e.splice(n,1)};t.removeLast=function(e,t){return e.substring(0,e.length-t)};t.range=function(e){return Array.isArray(e)?Array(e[1]-e[0]).fill({}).map((function(t,n){return e[0]+n})):Array(e).fill({}).map((function(e,t){return t}))};t.repeat=function(e,t){return Array(e).fill(t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.translations=void 0,t.translations={shaders:"Shaders",vertexShader:"Vertex Shader",fragmentShader:"Fragment Shader",drawOptions:"Draw options",textures:"Textures",uniforms:"Uniforms",attributeBuffers:"Attribute Buffers",custom:"Custom"}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.SectionTitle=void 0;var o=r(n(0));t.SectionTitle=o.default.memo((function(e){var t;return o.default.createElement("div",{className:"viewer-options-section-title"},o.default.createElement("h3",null,e.text),null!==(t=e.children)&&void 0!==t?t:null)}))},function(e,t,n){"use strict";var r=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],a=0,u=i.length;a<u;a++,o++)r[o]=i[a];return r};Object.defineProperty(t,"__esModule",{value:!0}),t.UniformInfo=t.UniformType=void 0;var o,i=n(7);!function(e){e[e.FLOAT_VEC2=35664]="FLOAT_VEC2",e[e.FLOAT_VEC3=35665]="FLOAT_VEC3",e[e.FLOAT_VEC4=35666]="FLOAT_VEC4",e[e.FLOAT_MAT4=35676]="FLOAT_MAT4"}(o=t.UniformType||(t.UniformType={}));var a=function(){function e(e,t,n,r){this.context=e,this.name=n,this.type=r,this.value=null,this.attachToProgram(t)}return e.prototype.attachToProgram=function(e){var t=this.context.getUniformLocation(e,this.name);this.setter=u(this.type,this.context,t)},e.prototype.setValue=function(e){this.value=e},e.prototype.prepareForRender=function(){null!==this.value&&this.setter(this.value)},e.prototype.getUniformType=function(){return this.type},e.prototype.getUniformName=function(){return this.name},e.prototype.dispose=function(){},e}();t.UniformInfo=a;var u=function(e,t,n){switch(e){case o.FLOAT_VEC2:return function(e){return t.uniform2f.apply(t,r([n],e))};case o.FLOAT_VEC3:return function(e){return t.uniform3f.apply(t,r([n],e))};case o.FLOAT_VEC4:return function(e){return t.uniform4f.apply(t,r([n],e))};case o.FLOAT_MAT4:return function(e){return t.uniformMatrix4fv(n,!1,e)};default:i.assertNever(e)}}},function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||t.hasOwnProperty(n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),o(n(34),t),o(n(70),t),o(n(71),t),o(n(72),t),o(n(73),t),o(n(74),t),o(n(75),t),o(n(76),t),o(n(37),t),o(n(77),t),o(n(38),t)},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.MultiNumberInput=void 0;var o=r(n(0)),i=n(8);t.MultiNumberInput=o.default.memo((function(e){var t=e.rows,n=e.columns,r=e.value,a=void 0===r?[]:r,u=e.onChange,l=e.readonly,s=void 0!==l&&l;return o.default.createElement("div",{className:"edit-input-grid"},i.range(t).map((function(e){return o.default.createElement("div",{className:"edit-input-row"},i.range(n).map((function(t){var r=e*n+t;return o.default.createElement("input",{className:"edit-input",type:"number",disabled:s,value:a[r],onChange:function(e){return u(a.map((function(t,n){return n===r?Number(e.target.value):t})))}})})))})))}))},function(e,t,n){"use strict";var r=this&&this.__rest||function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.store=void 0;var i=o(n(0)),a=o(n(15)),u=n(25),l=n(20),s=n(2),c=n(57),f=n(62),d=n(44),p=n(43),h=l.compose(c.applyIndexBufferReducer,c.applyAttributeBuffersReducer,c.applyUniformsReducer,c.mainReducer);t.store=l.createStore((function(e,t){return h(e,t)}));var m=d.debounce((function(e){u.setExtensionState(e)}),500);t.store.subscribe((function(){var e=t.store.getState(),n=(e.counter,r(e,["counter"]));m(n),p.setAttributeBuffers(e.attributeBufferValues),p.setIndexBuffer(e.indexBufferValue),p.setUniforms(e.uniformValues),p.setTextures(e.textureValues)})),a.default.render(i.default.createElement(s.Provider,{store:t.store},i.default.createElement(f.Viewer,null)),document.getElementById("viewer"))},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(48)},function(e,t,n){"use strict";var r=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],a=0,u=i.length;a<u;a++,o++)r[o]=i[a];return r};Object.defineProperty(t,"__esModule",{value:!0}),t.meshes=t.repeat4Times=void 0;t.repeat4Times=function(e){return[].concat(e,e,e,e)},t.meshes=new Map([["cube",{display:"Cube",positions:[[-.5,-.5,.5,1],[.5,-.5,.5,1],[.5,.5,.5,1],[-.5,.5,.5,1],[-.5,-.5,-.5,1],[-.5,.5,-.5,1],[.5,.5,-.5,1],[.5,-.5,-.5,1],[-.5,.5,-.5,1],[-.5,.5,.5,1],[.5,.5,.5,1],[.5,.5,-.5,1],[-.5,-.5,-.5,1],[.5,-.5,-.5,1],[.5,-.5,.5,1],[-.5,-.5,.5,1],[.5,-.5,-.5,1],[.5,.5,-.5,1],[.5,.5,.5,1],[.5,-.5,.5,1],[-.5,-.5,-.5,1],[-.5,-.5,.5,1],[-.5,.5,.5,1],[-.5,.5,-.5,1]],colors:r(t.repeat4Times([1,1,1,1]),t.repeat4Times([1,0,0,1]),t.repeat4Times([0,1,0,1]),t.repeat4Times([0,0,1,1]),t.repeat4Times([1,1,0,1]),t.repeat4Times([1,0,1,1])),textureCoordinates:[[0,0],[1,0],[1,1],[0,1],[0,0],[1,0],[1,1],[0,1],[0,0],[1,0],[1,1],[0,1],[0,0],[1,0],[1,1],[0,1],[0,0],[1,0],[1,1],[0,1],[0,0],[1,0],[1,1],[0,1]],indices:[0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23]}],["plane",{display:"Plane",positions:[[-.5,-.5,0,1],[.5,-.5,0,1],[.5,.5,0,1],[-.5,.5,0,1]],colors:t.repeat4Times([1,1,1,1]),textureCoordinates:[[0,0],[1,0],[1,1],[0,1]],indices:[0,1,2,0,2,3]}]])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AttributeBufferInfo=t.AttributeBufferType=void 0;var r,o=n(7);!function(e){e[e.FLOAT_VEC2=35664]="FLOAT_VEC2",e[e.FLOAT_VEC3=35665]="FLOAT_VEC3",e[e.FLOAT_VEC4=35666]="FLOAT_VEC4"}(r=t.AttributeBufferType||(t.AttributeBufferType={}));var i=function(){function e(e,t,n,r){this.context=e,this.name=n,this.type=r,this.count=0,this.attachToProgram(t),this.buffer=e.createBuffer()}return e.prototype.attachToProgram=function(e){this.location=this.context.getAttribLocation(e,this.name)},e.prototype.setValue=function(e){this.count=e.length,this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffer);var t=[].concat.apply([],e);this.context.bufferData(this.context.ARRAY_BUFFER,new Float32Array(t),this.context.STATIC_DRAW)},e.prototype.setAttributeBuffer=function(){if(null!==this.buffer){this.context.enableVertexAttribArray(this.location),this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffer);var e=a(this.type),t=this.context.FLOAT;this.context.vertexAttribPointer(this.location,e,t,!1,0,0)}},e.prototype.getAttributeBufferType=function(){return this.type},e.prototype.getCount=function(){return this.count},e.prototype.deleteBuffer=function(){this.context.deleteBuffer(this.buffer),this.buffer=null},e}();t.AttributeBufferInfo=i;var a=function(e){switch(e){case r.FLOAT_VEC2:return 2;case r.FLOAT_VEC3:return 3;case r.FLOAT_VEC4:return 4;default:o.assertNever(e)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.viewerEndpoint=void 0;var r=n(8),o=n(63),i=n(26),a=function(){function e(){var e=this;this.eventListeners=[],window.addEventListener("message",(function(t){e.eventListeners.forEach((function(e){return e(t.data)}))}))}return e.prototype.getWorkspaceFilesOfTypes=function(e){var t=this,n=o.uuidv4();return i.vscodeApi.postMessage({type:"getWorkspaceFilesOfTypes",id:n,payload:{extensions:e}}),new Promise((function(e){var r=function(o){"getWorkspaceFilesOfTypes"===o.type&&o.id===n&&(e(o.payload.files),t.removeListener(r))};t.eventListeners.push(r)}))},e.prototype.getDocumentText=function(e){var t=this,n=o.uuidv4();return i.vscodeApi.postMessage({type:"getDocumentText",id:n,payload:{fileName:e}}),new Promise((function(e){var r=function(o){"getDocumentText"===o.type&&o.id===n&&(e(o.payload.text),t.removeListener(r))};t.eventListeners.push(r)}))},e.prototype.getExtensionFileUri=function(e){var t=this,n=o.uuidv4();return i.vscodeApi.postMessage({type:"getExtensionFileUri",id:n,payload:{fileName:e}}),new Promise((function(e){var r=function(o){"getExtensionFileUri"===o.type&&o.id===n&&(e(o.payload.uri),t.removeListener(r))};t.eventListeners.push(r)}))},e.prototype.subscribeToDocumentSave=function(e,t){var n=this;i.vscodeApi.postMessage({type:"subscribeToDocumentTextChange",payload:{fileName:e}});var r=function(n){"onDocumentTextChange"===n.type&&n.payload.filePath===e&&t(n.payload.text)};return this.eventListeners.push(r),function(){n.removeListener(r),i.vscodeApi.postMessage({type:"unsubscribeToDocumentTextChange",payload:{fileName:e}})}},e.prototype.showWebViewDevTools=function(){i.vscodeApi.postMessage({type:"showWebViewDevTools"})},e.prototype.removeListener=function(e){r.remove(this.eventListeners,e)},e}();t.viewerEndpoint=new a},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],a=0,u=i.length;a<u;a++,o++)r[o]=i[a];return r};Object.defineProperty(t,"__esModule",{value:!0}),t.clamp=t.areShallowEqual=t.overriddenProps=t.omitKeys=t.overrideDefinedPropsOnly=void 0,t.overrideDefinedPropsOnly=function(e,t){for(var n=r({},e),o=0,i=Object.keys(t);o<i.length;o++){var a=i[o],u=t[a];void 0!==u&&(n[a]=u)}return n},t.omitKeys=function(e,t){return Object.keys(e).filter((function(e){return!t.includes(e)})).reduce((function(t,n){var r;return Object.assign(t,((r={})[n]=e[n],r)),t}),{})},t.overriddenProps=function(e,t){return o(Object.keys(e),Object.keys(t)).reduce((function(n,r){var o=r;return e[o]!==t[o]&&(n[o]=t[o]),n}),{})},t.areShallowEqual=function(e,t){var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0,i=n;o<i.length;o++){var a=i[o];if(e[a]!==t[a])return!1}return!0},t.clamp=function(e,t,n){return e<t?t:e>n?n:e}},function(e,t,n){"use strict";n.r(t),n.d(t,"__DO_NOT_USE__ActionTypes",(function(){return i})),n.d(t,"applyMiddleware",(function(){return v})),n.d(t,"bindActionCreators",(function(){return f})),n.d(t,"combineReducers",(function(){return s})),n.d(t,"compose",(function(){return m})),n.d(t,"createStore",(function(){return u}));var r=n(22),o=function(){return Math.random().toString(36).substring(7).split("").join(".")},i={INIT:"@@redux/INIT"+o(),REPLACE:"@@redux/REPLACE"+o(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+o()}};function a(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function u(e,t,n){var o;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(u)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var l=e,s=t,c=[],f=c,d=!1;function p(){f===c&&(f=c.slice())}function h(){if(d)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return s}function m(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(d)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var t=!0;return p(),f.push(e),function(){if(t){if(d)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");t=!1,p();var n=f.indexOf(e);f.splice(n,1),c=null}}}function v(e){if(!a(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(d)throw new Error("Reducers may not dispatch actions.");try{d=!0,s=l(s,e)}finally{d=!1}for(var t=c=f,n=0;n<t.length;n++){(0,t[n])()}return e}function y(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");l=e,v({type:i.REPLACE})}function g(){var e,t=m;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(h())}return n(),{unsubscribe:t(n)}}})[r.a]=function(){return this},e}return v({type:i.INIT}),(o={dispatch:v,subscribe:m,getState:h,replaceReducer:y})[r.a]=g,o}function l(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function s(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];0,"function"==typeof e[o]&&(n[o]=e[o])}var a,u=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:i.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:i.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+i.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(n)}catch(e){a=e}return function(e,t){if(void 0===e&&(e={}),a)throw a;for(var r=!1,o={},i=0;i<u.length;i++){var s=u[i],c=n[s],f=e[s],d=c(f,t);if(void 0===d){var p=l(s,t);throw new Error(p)}o[s]=d,r=r||d!==f}return(r=r||u.length!==Object.keys(e).length)?o:e}}function c(e,t){return function(){return t(e.apply(this,arguments))}}function f(e,t){if("function"==typeof e)return c(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var n={};for(var r in e){var o=e[r];"function"==typeof o&&(n[r]=c(o,t))}return n}function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){var n=Object.keys(e);return Object.getOwnPropertySymbols&&n.push.apply(n,Object.getOwnPropertySymbols(e)),t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n}function h(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(n,!0).forEach((function(t){d(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function v(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},i=t.map((function(e){return e(o)}));return h({},n,{dispatch:r=m.apply(void 0,i)(n.dispatch)})}}}},function(e,t,n){"use strict";e.exports=n(56)},function(e,t,n){"use strict";(function(e,r){var o,i=n(46);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var a=Object(i.a)(o);t.a=a}).call(this,n(51),n(52)(e))},function(e,t,n){"use strict";var r=n(21),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},u={};function l(e){return r.isMemo(e)?a:u[e.$$typeof]||o}u[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},u[r.Memo]=a;var s=Object.defineProperty,c=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var a=c(n);f&&(a=a.concat(f(n)));for(var u=l(t),m=l(n),v=0;v<a.length;++v){var y=a[v];if(!(i[y]||r&&r[y]||m&&m[y]||u&&u[y])){var g=d(n,y);try{s(t,y,g)}catch(e){}}}}return t}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,u,l=a(e),s=1;s<arguments.length;s++){for(var c in n=Object(arguments[s]))o.call(n,c)&&(l[c]=n[c]);if(r){u=r(n);for(var f=0;f<u.length;f++)i.call(n,u[f])&&(l[u[f]]=n[u[f]])}}return l}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.setExtensionState=t.getExtensionState=void 0;var o=n(4),i=n(26),a={vertexFilePath:null,fragmentFilePath:null,uniformValues:{},attributeBufferValues:{},indexBufferValue:{optionId:o.customOption.id,value:"[]",error:""},textureValues:{},cameraPosition:{longitude:1,latitude:1,radius:2},viewerSize:{width:0,height:0},drawMode:"elements",meshId:"cube"};t.getExtensionState=function(){return r(r({},a),i.vscodeApi.getState())};t.setExtensionState=function(e){return i.vscodeApi.setState(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.vscodeApi=void 0,t.vscodeApi=acquireVsCodeApi()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.validateArrayElements=void 0;t.validateArrayElements=function(e,t){try{var n=JSON.parse(e);if(!Array.isArray(n))return"this is not an array type";if(!n.every((function(e){return Array.isArray(e)?e.length===t:1===t})))return"not every element id the arra is same size"}catch(e){return"this is not a valid format"}return""}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getBindingOptions=t.indexBufferBindings=void 0;var r=n(16);t.indexBufferBindings=new Map([["indices",{display:"Binding - Mesh indices",getValue:function(e){return t=e,n="indices",JSON.stringify(r.meshes.get(t)[n]);var t,n}}]]);t.getBindingOptions=function(){return Array.from(t.indexBufferBindings.entries()).map((function(e){return{id:e[0],display:e[1].display}}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getBindingOptions=t.uniformBindings=void 0;var r=n(30),o=n(11),i=n(59);t.uniformBindings=new Map([["perspectiveCamera",{type:o.UniformType.FLOAT_MAT4,display:"Binding - Perspective Camera",getValue:function(e,t){return function(e,t){var n=45*Math.PI/180,o=t.width/t.height,a=i.mat4.create();i.mat4.perspective(a,n,o,.1,100);var u=i.mat4.create(),l=r.cameraPositionToVector3(e);i.mat4.lookAt(u,[l.x,l.y,l.z],[0,0,0],[0,1,0]);var s=i.mat4.create();return i.mat4.multiply(s,a,u),Array.from(s)}(e,t)}}]]);t.getBindingOptions=function(e){return Array.from(t.uniformBindings.entries()).filter((function(t){t[0];return t[1].type===e})).map((function(e){return{id:e[0],display:e[1].display}}))}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.CameraPositionManipulator=t.cameraPositionToVector3=void 0;t.cameraPositionToVector3=function(e){var t=e.radius*Math.sin(e.latitude),n=e.radius*Math.cos(e.latitude),r=n*Math.cos(e.longitude);return{x:n*Math.sin(e.longitude),y:t,z:r}};var o=function(e){return Math.min(Math.max(e,1),10)},i=function(){function e(e,t,n){var i=this;this.element=e,this.positionProvider=t,this.onPositionChange=n,this.pointerPosition={x:0,y:0},this.eventListeners=new Map,this.isMoving=!1,this.dispatchAction=function(e){var t=function(e,t){switch(t.type){case"orbitRotate":return r(r({},e),{latitude:(i=e.latitude+t.deltaLatitude,Math.min(Math.max(i,-Math.PI/2+.1),Math.PI/2-.1)),longitude:(n=e.longitude+t.deltaLongitude,n>Math.PI?n-2*Math.PI:n<-Math.PI?n+2*Math.PI:n)});case"zoomInAt":return r(r({},e),{radius:o(e.radius-.1)});case"zoomOutAt":return r(r({},e),{radius:o(e.radius+.1)});default:return e}var n,i}(i.positionProvider(),e);i.onPositionChange(t)},this.onMouseDown=function(e){0===e.button&&(i.pointerPosition={x:e.offsetX,y:e.offsetY},i.isMoving=!0)},this.onMouseMove=function(e){if(i.isMoving){i.dispatchAction({type:"orbitRotate",deltaLongitude:.01*-(e.offsetX-i.pointerPosition.x),deltaLatitude:.01*(e.offsetY-i.pointerPosition.y)})}i.pointerPosition={x:e.offsetX,y:e.offsetY}},this.onMouseUp=function(){i.isMoving=!1},this.onMouseLeave=function(){i.isMoving=!1},this.onWheel=function(e){var t=e.deltaY<0?"zoomInAt":"zoomOutAt";i.dispatchAction({type:t})},this.registerEvent("mousedown",this.onMouseDown),this.registerEvent("mousemove",this.onMouseMove),this.registerEvent("mouseup",this.onMouseUp),this.registerEvent("mouseleave",this.onMouseLeave),this.registerEvent("wheel",this.onWheel)}return e.prototype.dispose=function(){var e=this;this.eventListeners.forEach((function(t,n){return e.element.removeEventListener(n,t)}))},e.prototype.registerEvent=function(e,t){this.element.addEventListener(e,t),this.eventListeners.set(e,t)},e}();t.CameraPositionManipulator=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getBindingOptions=t.attributeBufferBindings=void 0;var r=n(16),o=n(17),i=function(e,t){return JSON.stringify(r.meshes.get(e)[t])};t.attributeBufferBindings=new Map([["positions",{type:o.AttributeBufferType.FLOAT_VEC4,display:"Binding - Mesh positions",getValue:function(e){return i(e,"positions")}}],["textureCoordinates",{type:o.AttributeBufferType.FLOAT_VEC2,display:"Binding - Mesh texture coords",getValue:function(e){return i(e,"textureCoordinates")}}],["colors",{type:o.AttributeBufferType.FLOAT_VEC4,display:"Binding - Mesh colors",getValue:function(e){return i(e,"colors")}}]]);t.getBindingOptions=function(e){return Array.from(t.attributeBufferBindings.entries()).filter((function(t){t[0];return t[1].type===e})).map((function(e){return{id:e[0],display:e[1].display}}))}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.getOrCreateAttributeBufferInfos=t.getAttributeBufferInfo=void 0;var o=n(33),i=n(17),a=function(e){return e.name+";"+e.type},u=new o.CompositeKeyMap(a);t.getAttributeBufferInfo=function(e,t){return u.get({name:e,type:t})};t.getOrCreateAttributeBufferInfos=function(e,t,n){var o,l,s=n.map((function(n){var o=r({},n),a=u.get(o);if(a)return a.attributeBufferInfo.attachToProgram(t),{key:o,value:a};var l=new i.AttributeBufferInfo(e,t,n.name,n.type);return{key:o,value:{attributeBufferInfo:l,dispose:function(){return l.deleteBuffer()}}}}));return l=(o=s).map((function(e){return a(e.key)})),u.entriesStrKey().filter((function(e){return!l.includes(e[0])})).forEach((function(e){e[1].dispose(),u.deleteStrKey(e[0])})),o.forEach((function(e){u.has(e.key)||u.set(e.key,e.value)})),s.map((function(e){return e.value.attributeBufferInfo}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CompositeKeyMap=void 0;var r=function(){function e(e){this.keySelector=e,this.map=new Map}return e.prototype.get=function(e){return this.map.get(this.keySelector(e))},e.prototype.set=function(e,t){this.map.set(this.keySelector(e),t)},e.prototype.has=function(e){return this.map.has(this.keySelector(e))},e.prototype.entriesStrKey=function(){return Array.from(this.map.entries())},e.prototype.deleteStrKey=function(e){this.map.delete(e)},e.prototype.delete=function(e){this.map.delete(this.keySelector(e))},e.prototype.clear=function(){this.map.clear()},e}();t.CompositeKeyMap=r},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],a=0,u=i.length;a<u;a++,o++)r[o]=i[a];return r},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useUnionState=void 0;var a=i(n(0)),u=n(19);t.useUnionState=function(e,t,n,i){var l=a.default.useState(u.omitKeys(e,Object.keys(t))),s=l[0],c=l[1],f=a.default.useRef(s);return[s,a.default.useCallback((function(e){var o=u.overrideDefinedPropsOnly(f.current,t),a=e.reduce((function(e,t){return n(e,t)}),r({},o)),l=u.overriddenProps(o,a),s=u.omitKeys(a,Object.keys(t));u.areShallowEqual(f.current,s)||(f.current=s,c(f.current)),null==i||i(l)}),o(Object.values(t),[n,i]))]}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.reducer=void 0;var o=n(19),i=n(36),a=function(e,t,n){return n>0?o.clamp(e+t,0,n-1):null};t.reducer=function(e,t,n){if("string"==typeof n)switch(n){case"CloseList":return r(r({},e),{isOpen:!1});case"OpenList":return r(r({},e),{isOpen:!0});case"HighlightFirstIndex":return r(r({},e),{highlightedIndex:t>0?0:null});case"HighlightPreviousIndex":return r(r({},e),{highlightedIndex:null!=e.highlightedIndex?a(e.highlightedIndex,-1,t):0});case"HighlightNextIndex":return r(r({},e),{highlightedIndex:null!=e.highlightedIndex?a(e.highlightedIndex,1,t):0});case"HighlightLastIndex":return r(r({},e),{highlightedIndex:t>0?t-1:null});case"SelectHighlightedIndex":return r(r({},e),{selectedIndexes:null!=e.highlightedIndex&&null!=e.highlightedIndex?[e.highlightedIndex]:[]});case"ClearSelection":return r(r({},e),{selectedIndexes:[],highlightedIndex:t>0?0:null});default:return i.assertNever(n)}else switch(n.type){case"SelectIndex":return r(r({},e),{selectedIndexes:[n.index],highlightedIndex:n.index});case"ToggleSelectedIndex":return r(r({},e),{selectedIndexes:e.selectedIndexes.filter((function(e){return e!==n.index})).concat(e.selectedIndexes.includes(n.index)?[]:[n.index]),highlightedIndex:n.index});case"HighlightIndex":return r(r({},e),{highlightedIndex:null===n.index?n.index:o.clamp(n.index,0,t-1)});default:return i.assertNever(n)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.hasProperty=t.assertNever=void 0,t.assertNever=function(e){throw new Error("Unexpected object: "+e)},t.hasProperty=function(e,t){return e.hasOwnProperty(t)}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useFocusOutHandler=void 0;var o=r(n(0));t.useFocusOutHandler=function(e,t){o.default.useEffect((function(){var n;function r(n){var r;(null===(r=e.current)||void 0===r?void 0:r.contains(n.relatedTarget))||t()}return null===(n=e.current)||void 0===n||n.addEventListener("focusout",r),function(){var t;null===(t=e.current)||void 0===t||t.removeEventListener("focusout",r)}}),[t])}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.usePreviousValue=void 0;var o=r(n(0));t.usePreviousValue=function(e){var t=o.default.useRef();return o.default.useEffect((function(){t.current=e})),t.current}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createListKeyboardNavigator=void 0,t.createListKeyboardNavigator=function(e){return function(t){switch(t.key){case" ":break;case"Enter":e(["SelectHighlightedIndex","CloseList"]);break;case"Esc":case"Escape":case"Tab":e(["CloseList"]);break;case"Down":case"ArrowDown":t.preventDefault(),e(["HighlightNextIndex"]);break;case"Up":case"ArrowUp":t.preventDefault(),e(["HighlightPreviousIndex"]);break;case"Home":e(["HighlightFirstIndex"]);break;case"End":e(["HighlightLastIndex"]);break;default:return}}}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.TextInput=void 0;var o=r(n(0));t.TextInput=o.default.memo((function(e){var t=e.value,n=e.error,r=e.onChange,i=e.readonly;return o.default.createElement("div",null,o.default.createElement("input",{className:"edit-input",disabled:i,value:t,onChange:function(e){return r(e.target.value)}}),n&&o.default.createElement("div",null,n))}))},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.createUniformInfos=t.getUniformInfo=void 0;var o=n(11),i=n(33),a=function(e){return e.name+";"+e.type},u=new i.CompositeKeyMap(a);t.getUniformInfo=function(e,t){return u.get({name:e,type:t})};t.createUniformInfos=function(e,t,n){var i,l,s=n.map((function(n){var i=r({},n),a=u.get(i);return a?(a.uniformInfo.attachToProgram(t),{key:i,value:a}):{key:i,value:{uniformInfo:new o.UniformInfo(e,t,n.name,n.type)}}}));return l=(i=s).map((function(e){return a(e.key)})),u.entriesStrKey().filter((function(e){return!l.includes(e[0])})).forEach((function(e){return u.deleteStrKey(e[0])})),i.forEach((function(e){u.has(e.key)||u.set(e.key,e.value)})),s.map((function(e){return e.value.uniformInfo}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getOrCreateIndexBufferInfo=t.getIndexBufferInfo=void 0;var r,o=n(104);t.getIndexBufferInfo=function(){return r};t.getOrCreateIndexBufferInfo=function(e){return r||(r=new o.IndexBufferInfo(e)),r}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.setTextures=t.setUniforms=t.setIndexBuffer=t.setAttributeBuffers=t.setWebGLFromState=void 0;var r=n(14),o=n(44),i=n(105),a=n(32),u=n(42),l=n(41),s=function(e){var t;return e.error?[]:null!==(t=i.safeJSONParse(e.value))&&void 0!==t?t:[]};t.setWebGLFromState=function(){var e=r.store.getState();e.attributeBufferValues&&Object.entries(e.attributeBufferValues).forEach((function(e){var t,n=e[0],r=e[1];null===(t=a.getAttributeBufferInfo(n,r.type))||void 0===t||t.attributeBufferInfo.setValue(s(r))})),e.indexBufferValue&&u.getIndexBufferInfo().setValue(s(e.indexBufferValue)),e.uniformValues&&Object.entries(e.uniformValues).forEach((function(e){var t,n=e[0],r=e[1];null===(t=l.getUniformInfo(n,r.type))||void 0===t||t.uniformInfo.setValue(r.value)})),e.textureValues&&Object.entries(e.textureValues).forEach((function(e){e[0],e[1]}))};var c=void 0;t.setAttributeBuffers=o.debounce((function(e){c!==e&&c&&e&&Object.entries(e).forEach((function(e){var t,n=e[0],r=e[1];c[n]!==r&&(null===(t=a.getAttributeBufferInfo(n,r.type))||void 0===t||t.attributeBufferInfo.setValue(s(r)))})),c=e}),100);var f=void 0;t.setIndexBuffer=o.debounce((function(e){var t;f!==e&&f&&e&&(null===(t=u.getIndexBufferInfo())||void 0===t||t.setValue(s(e))),f=e}),100);var d=void 0;t.setUniforms=function(e){d!==e&&d&&e&&Object.entries(e).forEach((function(e){var t,n=e[0],r=e[1];d[n]!==r&&(null===(t=l.getUniformInfo(n,r.type))||void 0===t||t.uniformInfo.setValue(r.value))})),d=e};var p=void 0;t.setTextures=function(e){p!==e&&p&&e&&Object.entries(e).forEach((function(e){var t=e[0];e[1];p[t]})),p=e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.debounce=void 0,t.debounce=function(e,t){void 0===t&&(t=500);var n=0;return function(){for(var r=[],o=0;o<arguments.length;o++)r[o]=arguments[o];null!==n&&clearTimeout(n),n=setTimeout((function(){return e.apply(void 0,r)}),t)}}},function(e,t,n){"use strict";n.r(t),n.d(t,"VariableSizeGrid",(function(){return P})),n.d(t,"VariableSizeList",(function(){return j})),n.d(t,"FixedSizeGrid",(function(){return A})),n.d(t,"FixedSizeList",(function(){return F})),n.d(t,"areEqual",(function(){return z})),n.d(t,"shouldComponentUpdate",(function(){return B}));var r=n(1);function o(e,t){return(o=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function i(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,o(e,t)}function a(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function u(e,t){if(e.length!==t.length)return!1;for(var n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}var l=function(e,t){var n;void 0===t&&(t=u);var r,o=[],i=!1;return function(){for(var a=[],u=0;u<arguments.length;u++)a[u]=arguments[u];return i&&n===this&&t(a,o)||(r=e.apply(this,a),i=!0,n=this,o=a),r}},s=n(0),c=n(3),f="object"==typeof performance&&"function"==typeof performance.now?function(){return performance.now()}:function(){return Date.now()};function d(e){cancelAnimationFrame(e.id)}function p(e,t){var n=f();var r={id:requestAnimationFrame((function o(){f()-n>=t?e.call(null):r.id=requestAnimationFrame(o)}))};return r}var h=-1;var m=null;function v(e){if(void 0===e&&(e=!1),null===m||e){var t=document.createElement("div"),n=t.style;n.width="50px",n.height="50px",n.overflow="scroll",n.direction="rtl";var r=document.createElement("div"),o=r.style;return o.width="100px",o.height="100px",t.appendChild(r),document.body.appendChild(t),t.scrollLeft>0?m="positive-descending":(t.scrollLeft=1,m=0===t.scrollLeft?"negative":"positive-ascending"),document.body.removeChild(t),m}return m}var y=function(e){var t=e.columnIndex;e.data;return e.rowIndex+":"+t};function g(e){var t,n,o=e.getColumnOffset,u=e.getColumnStartIndexForOffset,c=e.getColumnStopIndexForStartIndex,f=e.getColumnWidth,m=e.getEstimatedTotalHeight,g=e.getEstimatedTotalWidth,w=e.getOffsetForColumnAndAlignment,_=e.getOffsetForRowAndAlignment,S=e.getRowHeight,x=e.getRowOffset,E=e.getRowStartIndexForOffset,O=e.getRowStopIndexForStartIndex,k=e.initInstanceProps,P=e.shouldResetStyleCacheOnItemSizeChange,I=e.validateProps;return n=t=function(e){function t(t){var n;return(n=e.call(this,t)||this)._instanceProps=k(n.props,a(a(n))),n._resetIsScrollingTimeoutId=null,n._outerRef=void 0,n.state={instance:a(a(n)),isScrolling:!1,horizontalScrollDirection:"forward",scrollLeft:"number"==typeof n.props.initialScrollLeft?n.props.initialScrollLeft:0,scrollTop:"number"==typeof n.props.initialScrollTop?n.props.initialScrollTop:0,scrollUpdateWasRequested:!1,verticalScrollDirection:"forward"},n._callOnItemsRendered=void 0,n._callOnItemsRendered=l((function(e,t,r,o,i,a,u,l){return n.props.onItemsRendered({overscanColumnStartIndex:e,overscanColumnStopIndex:t,overscanRowStartIndex:r,overscanRowStopIndex:o,visibleColumnStartIndex:i,visibleColumnStopIndex:a,visibleRowStartIndex:u,visibleRowStopIndex:l})})),n._callOnScroll=void 0,n._callOnScroll=l((function(e,t,r,o,i){return n.props.onScroll({horizontalScrollDirection:r,scrollLeft:e,scrollTop:t,verticalScrollDirection:o,scrollUpdateWasRequested:i})})),n._getItemStyle=void 0,n._getItemStyle=function(e,t){var r,i=n.props,a=i.columnWidth,u=i.direction,l=i.rowHeight,s=n._getItemStyleCache(P&&a,P&&u,P&&l),c=e+":"+t;if(s.hasOwnProperty(c))r=s[c];else{var d=o(n.props,t,n._instanceProps),p="rtl"===u;s[c]=r={position:"absolute",left:p?void 0:d,right:p?d:void 0,top:x(n.props,e,n._instanceProps),height:S(n.props,e,n._instanceProps),width:f(n.props,t,n._instanceProps)}}return r},n._getItemStyleCache=void 0,n._getItemStyleCache=l((function(e,t,n){return{}})),n._onScroll=function(e){var t=e.currentTarget,r=t.clientHeight,o=t.clientWidth,i=t.scrollLeft,a=t.scrollTop,u=t.scrollHeight,l=t.scrollWidth;n.setState((function(e){if(e.scrollLeft===i&&e.scrollTop===a)return null;var t=n.props.direction,s=i;if("rtl"===t)switch(v()){case"negative":s=-i;break;case"positive-descending":s=l-o-i}s=Math.max(0,Math.min(s,l-o));var c=Math.max(0,Math.min(a,u-r));return{isScrolling:!0,horizontalScrollDirection:e.scrollLeft<i?"forward":"backward",scrollLeft:s,scrollTop:c,verticalScrollDirection:e.scrollTop<a?"forward":"backward",scrollUpdateWasRequested:!1}}),n._resetIsScrollingDebounced)},n._outerRefSetter=function(e){var t=n.props.outerRef;n._outerRef=e,"function"==typeof t?t(e):null!=t&&"object"==typeof t&&t.hasOwnProperty("current")&&(t.current=e)},n._resetIsScrollingDebounced=function(){null!==n._resetIsScrollingTimeoutId&&d(n._resetIsScrollingTimeoutId),n._resetIsScrollingTimeoutId=p(n._resetIsScrolling,150)},n._resetIsScrolling=function(){n._resetIsScrollingTimeoutId=null,n.setState({isScrolling:!1},(function(){n._getItemStyleCache(-1)}))},n}i(t,e),t.getDerivedStateFromProps=function(e,t){return b(e,t),I(e),null};var n=t.prototype;return n.scrollTo=function(e){var t=e.scrollLeft,n=e.scrollTop;void 0!==t&&(t=Math.max(0,t)),void 0!==n&&(n=Math.max(0,n)),this.setState((function(e){return void 0===t&&(t=e.scrollLeft),void 0===n&&(n=e.scrollTop),e.scrollLeft===t&&e.scrollTop===n?null:{horizontalScrollDirection:e.scrollLeft<t?"forward":"backward",scrollLeft:t,scrollTop:n,scrollUpdateWasRequested:!0,verticalScrollDirection:e.scrollTop<n?"forward":"backward"}}),this._resetIsScrollingDebounced)},n.scrollToItem=function(e){var t=e.align,n=void 0===t?"auto":t,r=e.columnIndex,o=e.rowIndex,i=this.props,a=i.columnCount,u=i.height,l=i.rowCount,s=i.width,c=this.state,f=c.scrollLeft,d=c.scrollTop,p=function(e){if(void 0===e&&(e=!1),-1===h||e){var t=document.createElement("div"),n=t.style;n.width="50px",n.height="50px",n.overflow="scroll",document.body.appendChild(t),h=t.offsetWidth-t.clientWidth,document.body.removeChild(t)}return h}();void 0!==r&&(r=Math.max(0,Math.min(r,a-1))),void 0!==o&&(o=Math.max(0,Math.min(o,l-1)));var v=m(this.props,this._instanceProps),y=g(this.props,this._instanceProps)>s?p:0,b=v>u?p:0;this.scrollTo({scrollLeft:void 0!==r?w(this.props,r,n,f,this._instanceProps,b):f,scrollTop:void 0!==o?_(this.props,o,n,d,this._instanceProps,y):d})},n.componentDidMount=function(){var e=this.props,t=e.initialScrollLeft,n=e.initialScrollTop;if(null!=this._outerRef){var r=this._outerRef;"number"==typeof t&&(r.scrollLeft=t),"number"==typeof n&&(r.scrollTop=n)}this._callPropsCallbacks()},n.componentDidUpdate=function(){var e=this.props.direction,t=this.state,n=t.scrollLeft,r=t.scrollTop;if(t.scrollUpdateWasRequested&&null!=this._outerRef){var o=this._outerRef;if("rtl"===e)switch(v()){case"negative":o.scrollLeft=-n;break;case"positive-ascending":o.scrollLeft=n;break;default:var i=o.clientWidth,a=o.scrollWidth;o.scrollLeft=a-i-n}else o.scrollLeft=Math.max(0,n);o.scrollTop=Math.max(0,r)}this._callPropsCallbacks()},n.componentWillUnmount=function(){null!==this._resetIsScrollingTimeoutId&&d(this._resetIsScrollingTimeoutId)},n.render=function(){var e=this.props,t=e.children,n=e.className,o=e.columnCount,i=e.direction,a=e.height,u=e.innerRef,l=e.innerElementType,c=e.innerTagName,f=e.itemData,d=e.itemKey,p=void 0===d?y:d,h=e.outerElementType,v=e.outerTagName,b=e.rowCount,w=e.style,_=e.useIsScrolling,S=e.width,x=this.state.isScrolling,E=this._getHorizontalRangeToRender(),O=E[0],k=E[1],P=this._getVerticalRangeToRender(),I=P[0],C=P[1],M=[];if(o>0&&b)for(var T=I;T<=C;T++)for(var R=O;R<=k;R++)M.push(Object(s.createElement)(t,{columnIndex:R,data:f,isScrolling:_?x:void 0,key:p({columnIndex:R,data:f,rowIndex:T}),rowIndex:T,style:this._getItemStyle(T,R)}));var L=m(this.props,this._instanceProps),N=g(this.props,this._instanceProps);return Object(s.createElement)(h||v||"div",{className:n,onScroll:this._onScroll,ref:this._outerRefSetter,style:Object(r.a)({position:"relative",height:a,width:S,overflow:"auto",WebkitOverflowScrolling:"touch",willChange:"transform",direction:i},w)},Object(s.createElement)(l||c||"div",{children:M,ref:u,style:{height:L,pointerEvents:x?"none":void 0,width:N}}))},n._callPropsCallbacks=function(){var e=this.props,t=e.columnCount,n=e.onItemsRendered,r=e.onScroll,o=e.rowCount;if("function"==typeof n&&t>0&&o>0){var i=this._getHorizontalRangeToRender(),a=i[0],u=i[1],l=i[2],s=i[3],c=this._getVerticalRangeToRender(),f=c[0],d=c[1],p=c[2],h=c[3];this._callOnItemsRendered(a,u,f,d,l,s,p,h)}if("function"==typeof r){var m=this.state,v=m.horizontalScrollDirection,y=m.scrollLeft,g=m.scrollTop,b=m.scrollUpdateWasRequested,w=m.verticalScrollDirection;this._callOnScroll(y,g,v,w,b)}},n._getHorizontalRangeToRender=function(){var e=this.props,t=e.columnCount,n=e.overscanColumnCount,r=e.overscanColumnsCount,o=e.overscanCount,i=e.rowCount,a=this.state,l=a.horizontalScrollDirection,s=a.isScrolling,f=a.scrollLeft,d=n||r||o||1;if(0===t||0===i)return[0,0,0,0];var p=u(this.props,f,this._instanceProps),h=c(this.props,p,f,this._instanceProps),m=s&&"backward"!==l?1:Math.max(1,d),v=s&&"forward"!==l?1:Math.max(1,d);return[Math.max(0,p-m),Math.max(0,Math.min(t-1,h+v)),p,h]},n._getVerticalRangeToRender=function(){var e=this.props,t=e.columnCount,n=e.overscanCount,r=e.overscanRowCount,o=e.overscanRowsCount,i=e.rowCount,a=this.state,u=a.isScrolling,l=a.verticalScrollDirection,s=a.scrollTop,c=r||o||n||1;if(0===t||0===i)return[0,0,0,0];var f=E(this.props,s,this._instanceProps),d=O(this.props,f,s,this._instanceProps),p=u&&"backward"!==l?1:Math.max(1,c),h=u&&"forward"!==l?1:Math.max(1,c);return[Math.max(0,f-p),Math.max(0,Math.min(i-1,d+h)),f,d]},t}(s.PureComponent),t.defaultProps={direction:"ltr",itemData:void 0,useIsScrolling:!1},n}var b=function(e,t){e.children,e.direction,e.height,e.innerTagName,e.outerTagName,e.overscanColumnsCount,e.overscanCount,e.overscanRowsCount,e.width,t.instance},w=function(e,t){var n=e.rowCount,r=t.rowMetadataMap,o=t.estimatedRowHeight,i=t.lastMeasuredRowIndex,a=0;if(i>=n&&(i=n-1),i>=0){var u=r[i];a=u.offset+u.size}return a+(n-i-1)*o},_=function(e,t){var n=e.columnCount,r=t.columnMetadataMap,o=t.estimatedColumnWidth,i=t.lastMeasuredColumnIndex,a=0;if(i>=n&&(i=n-1),i>=0){var u=r[i];a=u.offset+u.size}return a+(n-i-1)*o},S=function(e,t,n,r){var o,i,a;if("column"===e?(o=r.columnMetadataMap,i=t.columnWidth,a=r.lastMeasuredColumnIndex):(o=r.rowMetadataMap,i=t.rowHeight,a=r.lastMeasuredRowIndex),n>a){var u=0;if(a>=0){var l=o[a];u=l.offset+l.size}for(var s=a+1;s<=n;s++){var c=i(s);o[s]={offset:u,size:c},u+=c}"column"===e?r.lastMeasuredColumnIndex=n:r.lastMeasuredRowIndex=n}return o[n]},x=function(e,t,n,r){var o,i;return"column"===e?(o=n.columnMetadataMap,i=n.lastMeasuredColumnIndex):(o=n.rowMetadataMap,i=n.lastMeasuredRowIndex),(i>0?o[i].offset:0)>=r?E(e,t,n,i,0,r):O(e,t,n,Math.max(0,i),r)},E=function(e,t,n,r,o,i){for(;o<=r;){var a=o+Math.floor((r-o)/2),u=S(e,t,a,n).offset;if(u===i)return a;u<i?o=a+1:u>i&&(r=a-1)}return o>0?o-1:0},O=function(e,t,n,r,o){for(var i="column"===e?t.columnCount:t.rowCount,a=1;r<i&&S(e,t,r,n).offset<o;)r+=a,a*=2;return E(e,t,n,Math.min(r,i-1),Math.floor(r/2),o)},k=function(e,t,n,r,o,i,a){var u="column"===e?t.width:t.height,l=S(e,t,n,i),s="column"===e?_(t,i):w(t,i),c=Math.max(0,Math.min(s-u,l.offset)),f=Math.max(0,l.offset-u+a+l.size);switch("smart"===r&&(r=o>=f-u&&o<=c+u?"auto":"center"),r){case"start":return c;case"end":return f;case"center":return Math.round(f+(c-f)/2);case"auto":default:return o>=f&&o<=c?o:f>c||o<f?f:c}},P=g({getColumnOffset:function(e,t,n){return S("column",e,t,n).offset},getColumnStartIndexForOffset:function(e,t,n){return x("column",e,n,t)},getColumnStopIndexForStartIndex:function(e,t,n,r){for(var o=e.columnCount,i=e.width,a=S("column",e,t,r),u=n+i,l=a.offset+a.size,s=t;s<o-1&&l<u;)s++,l+=S("column",e,s,r).size;return s},getColumnWidth:function(e,t,n){return n.columnMetadataMap[t].size},getEstimatedTotalHeight:w,getEstimatedTotalWidth:_,getOffsetForColumnAndAlignment:function(e,t,n,r,o,i){return k("column",e,t,n,r,o,i)},getOffsetForRowAndAlignment:function(e,t,n,r,o,i){return k("row",e,t,n,r,o,i)},getRowOffset:function(e,t,n){return S("row",e,t,n).offset},getRowHeight:function(e,t,n){return n.rowMetadataMap[t].size},getRowStartIndexForOffset:function(e,t,n){return x("row",e,n,t)},getRowStopIndexForStartIndex:function(e,t,n,r){for(var o=e.rowCount,i=e.height,a=S("row",e,t,r),u=n+i,l=a.offset+a.size,s=t;s<o-1&&l<u;)s++,l+=S("row",e,s,r).size;return s},initInstanceProps:function(e,t){var n=e,r={columnMetadataMap:{},estimatedColumnWidth:n.estimatedColumnWidth||50,estimatedRowHeight:n.estimatedRowHeight||50,lastMeasuredColumnIndex:-1,lastMeasuredRowIndex:-1,rowMetadataMap:{}};return t.resetAfterColumnIndex=function(e,n){void 0===n&&(n=!0),t.resetAfterIndices({columnIndex:e,shouldForceUpdate:n})},t.resetAfterRowIndex=function(e,n){void 0===n&&(n=!0),t.resetAfterIndices({rowIndex:e,shouldForceUpdate:n})},t.resetAfterIndices=function(e){var n=e.columnIndex,o=e.rowIndex,i=e.shouldForceUpdate,a=void 0===i||i;"number"==typeof n&&(r.lastMeasuredColumnIndex=Math.min(r.lastMeasuredColumnIndex,n-1)),"number"==typeof o&&(r.lastMeasuredRowIndex=Math.min(r.lastMeasuredRowIndex,o-1)),t._getItemStyleCache(-1),a&&t.forceUpdate()},r},shouldResetStyleCacheOnItemSizeChange:!1,validateProps:function(e){e.columnWidth,e.rowHeight}}),I=function(e,t){return e};function C(e){var t,n,o=e.getItemOffset,u=e.getEstimatedTotalSize,c=e.getItemSize,f=e.getOffsetForIndexAndAlignment,h=e.getStartIndexForOffset,m=e.getStopIndexForStartIndex,y=e.initInstanceProps,g=e.shouldResetStyleCacheOnItemSizeChange,b=e.validateProps;return n=t=function(e){function t(t){var n;return(n=e.call(this,t)||this)._instanceProps=y(n.props,a(a(n))),n._outerRef=void 0,n._resetIsScrollingTimeoutId=null,n.state={instance:a(a(n)),isScrolling:!1,scrollDirection:"forward",scrollOffset:"number"==typeof n.props.initialScrollOffset?n.props.initialScrollOffset:0,scrollUpdateWasRequested:!1},n._callOnItemsRendered=void 0,n._callOnItemsRendered=l((function(e,t,r,o){return n.props.onItemsRendered({overscanStartIndex:e,overscanStopIndex:t,visibleStartIndex:r,visibleStopIndex:o})})),n._callOnScroll=void 0,n._callOnScroll=l((function(e,t,r){return n.props.onScroll({scrollDirection:e,scrollOffset:t,scrollUpdateWasRequested:r})})),n._getItemStyle=void 0,n._getItemStyle=function(e){var t,r=n.props,i=r.direction,a=r.itemSize,u=r.layout,l=n._getItemStyleCache(g&&a,g&&u,g&&i);if(l.hasOwnProperty(e))t=l[e];else{var s=o(n.props,e,n._instanceProps),f=c(n.props,e,n._instanceProps),d="horizontal"===i||"horizontal"===u,p="rtl"===i,h=d?s:0;l[e]=t={position:"absolute",left:p?void 0:h,right:p?h:void 0,top:d?0:s,height:d?"100%":f,width:d?f:"100%"}}return t},n._getItemStyleCache=void 0,n._getItemStyleCache=l((function(e,t,n){return{}})),n._onScrollHorizontal=function(e){var t=e.currentTarget,r=t.clientWidth,o=t.scrollLeft,i=t.scrollWidth;n.setState((function(e){if(e.scrollOffset===o)return null;var t=n.props.direction,a=o;if("rtl"===t)switch(v()){case"negative":a=-o;break;case"positive-descending":a=i-r-o}return a=Math.max(0,Math.min(a,i-r)),{isScrolling:!0,scrollDirection:e.scrollOffset<o?"forward":"backward",scrollOffset:a,scrollUpdateWasRequested:!1}}),n._resetIsScrollingDebounced)},n._onScrollVertical=function(e){var t=e.currentTarget,r=t.clientHeight,o=t.scrollHeight,i=t.scrollTop;n.setState((function(e){if(e.scrollOffset===i)return null;var t=Math.max(0,Math.min(i,o-r));return{isScrolling:!0,scrollDirection:e.scrollOffset<t?"forward":"backward",scrollOffset:t,scrollUpdateWasRequested:!1}}),n._resetIsScrollingDebounced)},n._outerRefSetter=function(e){var t=n.props.outerRef;n._outerRef=e,"function"==typeof t?t(e):null!=t&&"object"==typeof t&&t.hasOwnProperty("current")&&(t.current=e)},n._resetIsScrollingDebounced=function(){null!==n._resetIsScrollingTimeoutId&&d(n._resetIsScrollingTimeoutId),n._resetIsScrollingTimeoutId=p(n._resetIsScrolling,150)},n._resetIsScrolling=function(){n._resetIsScrollingTimeoutId=null,n.setState({isScrolling:!1},(function(){n._getItemStyleCache(-1,null)}))},n}i(t,e),t.getDerivedStateFromProps=function(e,t){return M(e,t),b(e),null};var n=t.prototype;return n.scrollTo=function(e){e=Math.max(0,e),this.setState((function(t){return t.scrollOffset===e?null:{scrollDirection:t.scrollOffset<e?"forward":"backward",scrollOffset:e,scrollUpdateWasRequested:!0}}),this._resetIsScrollingDebounced)},n.scrollToItem=function(e,t){void 0===t&&(t="auto");var n=this.props.itemCount,r=this.state.scrollOffset;e=Math.max(0,Math.min(e,n-1)),this.scrollTo(f(this.props,e,t,r,this._instanceProps))},n.componentDidMount=function(){var e=this.props,t=e.direction,n=e.initialScrollOffset,r=e.layout;if("number"==typeof n&&null!=this._outerRef){var o=this._outerRef;"horizontal"===t||"horizontal"===r?o.scrollLeft=n:o.scrollTop=n}this._callPropsCallbacks()},n.componentDidUpdate=function(){var e=this.props,t=e.direction,n=e.layout,r=this.state,o=r.scrollOffset;if(r.scrollUpdateWasRequested&&null!=this._outerRef){var i=this._outerRef;if("horizontal"===t||"horizontal"===n)if("rtl"===t)switch(v()){case"negative":i.scrollLeft=-o;break;case"positive-ascending":i.scrollLeft=o;break;default:var a=i.clientWidth,u=i.scrollWidth;i.scrollLeft=u-a-o}else i.scrollLeft=o;else i.scrollTop=o}this._callPropsCallbacks()},n.componentWillUnmount=function(){null!==this._resetIsScrollingTimeoutId&&d(this._resetIsScrollingTimeoutId)},n.render=function(){var e=this.props,t=e.children,n=e.className,o=e.direction,i=e.height,a=e.innerRef,l=e.innerElementType,c=e.innerTagName,f=e.itemCount,d=e.itemData,p=e.itemKey,h=void 0===p?I:p,m=e.layout,v=e.outerElementType,y=e.outerTagName,g=e.style,b=e.useIsScrolling,w=e.width,_=this.state.isScrolling,S="horizontal"===o||"horizontal"===m,x=S?this._onScrollHorizontal:this._onScrollVertical,E=this._getRangeToRender(),O=E[0],k=E[1],P=[];if(f>0)for(var C=O;C<=k;C++)P.push(Object(s.createElement)(t,{data:d,key:h(C,d),index:C,isScrolling:b?_:void 0,style:this._getItemStyle(C)}));var M=u(this.props,this._instanceProps);return Object(s.createElement)(v||y||"div",{className:n,onScroll:x,ref:this._outerRefSetter,style:Object(r.a)({position:"relative",height:i,width:w,overflow:"auto",WebkitOverflowScrolling:"touch",willChange:"transform",direction:o},g)},Object(s.createElement)(l||c||"div",{children:P,ref:a,style:{height:S?"100%":M,pointerEvents:_?"none":void 0,width:S?M:"100%"}}))},n._callPropsCallbacks=function(){if("function"==typeof this.props.onItemsRendered&&this.props.itemCount>0){var e=this._getRangeToRender(),t=e[0],n=e[1],r=e[2],o=e[3];this._callOnItemsRendered(t,n,r,o)}if("function"==typeof this.props.onScroll){var i=this.state,a=i.scrollDirection,u=i.scrollOffset,l=i.scrollUpdateWasRequested;this._callOnScroll(a,u,l)}},n._getRangeToRender=function(){var e=this.props,t=e.itemCount,n=e.overscanCount,r=this.state,o=r.isScrolling,i=r.scrollDirection,a=r.scrollOffset;if(0===t)return[0,0,0,0];var u=h(this.props,a,this._instanceProps),l=m(this.props,u,a,this._instanceProps),s=o&&"backward"!==i?1:Math.max(1,n),c=o&&"forward"!==i?1:Math.max(1,n);return[Math.max(0,u-s),Math.max(0,Math.min(t-1,l+c)),u,l]},t}(s.PureComponent),t.defaultProps={direction:"ltr",itemData:void 0,layout:"vertical",overscanCount:2,useIsScrolling:!1},n}var M=function(e,t){e.children,e.direction,e.height,e.layout,e.innerTagName,e.outerTagName,e.width,t.instance},T=function(e,t,n){var r=e.itemSize,o=n.itemMetadataMap,i=n.lastMeasuredIndex;if(t>i){var a=0;if(i>=0){var u=o[i];a=u.offset+u.size}for(var l=i+1;l<=t;l++){var s=r(l);o[l]={offset:a,size:s},a+=s}n.lastMeasuredIndex=t}return o[t]},R=function(e,t,n,r,o){for(;r<=n;){var i=r+Math.floor((n-r)/2),a=T(e,i,t).offset;if(a===o)return i;a<o?r=i+1:a>o&&(n=i-1)}return r>0?r-1:0},L=function(e,t,n,r){for(var o=e.itemCount,i=1;n<o&&T(e,n,t).offset<r;)n+=i,i*=2;return R(e,t,Math.min(n,o-1),Math.floor(n/2),r)},N=function(e,t){var n=e.itemCount,r=t.itemMetadataMap,o=t.estimatedItemSize,i=t.lastMeasuredIndex,a=0;if(i>=n&&(i=n-1),i>=0){var u=r[i];a=u.offset+u.size}return a+(n-i-1)*o},j=C({getItemOffset:function(e,t,n){return T(e,t,n).offset},getItemSize:function(e,t,n){return n.itemMetadataMap[t].size},getEstimatedTotalSize:N,getOffsetForIndexAndAlignment:function(e,t,n,r,o){var i=e.direction,a=e.height,u=e.layout,l=e.width,s="horizontal"===i||"horizontal"===u?l:a,c=T(e,t,o),f=N(e,o),d=Math.max(0,Math.min(f-s,c.offset)),p=Math.max(0,c.offset-s+c.size);switch("smart"===n&&(n=r>=p-s&&r<=d+s?"auto":"center"),n){case"start":return d;case"end":return p;case"center":return Math.round(p+(d-p)/2);case"auto":default:return r>=p&&r<=d?r:r<p?p:d}},getStartIndexForOffset:function(e,t,n){return function(e,t,n){var r=t.itemMetadataMap,o=t.lastMeasuredIndex;return(o>0?r[o].offset:0)>=n?R(e,t,o,0,n):L(e,t,Math.max(0,o),n)}(e,n,t)},getStopIndexForStartIndex:function(e,t,n,r){for(var o=e.direction,i=e.height,a=e.itemCount,u=e.layout,l=e.width,s="horizontal"===o||"horizontal"===u?l:i,c=T(e,t,r),f=n+s,d=c.offset+c.size,p=t;p<a-1&&d<f;)p++,d+=T(e,p,r).size;return p},initInstanceProps:function(e,t){var n={itemMetadataMap:{},estimatedItemSize:e.estimatedItemSize||50,lastMeasuredIndex:-1};return t.resetAfterIndex=function(e,r){void 0===r&&(r=!0),n.lastMeasuredIndex=Math.min(n.lastMeasuredIndex,e-1),t._getItemStyleCache(-1),r&&t.forceUpdate()},n},shouldResetStyleCacheOnItemSizeChange:!1,validateProps:function(e){e.itemSize}}),A=g({getColumnOffset:function(e,t){return t*e.columnWidth},getColumnWidth:function(e,t){return e.columnWidth},getRowOffset:function(e,t){return t*e.rowHeight},getRowHeight:function(e,t){return e.rowHeight},getEstimatedTotalHeight:function(e){var t=e.rowCount;return e.rowHeight*t},getEstimatedTotalWidth:function(e){var t=e.columnCount;return e.columnWidth*t},getOffsetForColumnAndAlignment:function(e,t,n,r,o,i){var a=e.columnCount,u=e.columnWidth,l=e.width,s=Math.max(0,a*u-l),c=Math.min(s,t*u),f=Math.max(0,t*u-l+i+u);switch("smart"===n&&(n=r>=f-l&&r<=c+l?"auto":"center"),n){case"start":return c;case"end":return f;case"center":var d=Math.round(f+(c-f)/2);return d<Math.ceil(l/2)?0:d>s+Math.floor(l/2)?s:d;case"auto":default:return r>=f&&r<=c?r:f>c||r<f?f:c}},getOffsetForRowAndAlignment:function(e,t,n,r,o,i){var a=e.rowHeight,u=e.height,l=e.rowCount,s=Math.max(0,l*a-u),c=Math.min(s,t*a),f=Math.max(0,t*a-u+i+a);switch("smart"===n&&(n=r>=f-u&&r<=c+u?"auto":"center"),n){case"start":return c;case"end":return f;case"center":var d=Math.round(f+(c-f)/2);return d<Math.ceil(u/2)?0:d>s+Math.floor(u/2)?s:d;case"auto":default:return r>=f&&r<=c?r:f>c||r<f?f:c}},getColumnStartIndexForOffset:function(e,t){var n=e.columnWidth,r=e.columnCount;return Math.max(0,Math.min(r-1,Math.floor(t/n)))},getColumnStopIndexForStartIndex:function(e,t,n){var r=e.columnWidth,o=e.columnCount,i=e.width,a=t*r,u=Math.ceil((i+n-a)/r);return Math.max(0,Math.min(o-1,t+u-1))},getRowStartIndexForOffset:function(e,t){var n=e.rowHeight,r=e.rowCount;return Math.max(0,Math.min(r-1,Math.floor(t/n)))},getRowStopIndexForStartIndex:function(e,t,n){var r=e.rowHeight,o=e.rowCount,i=e.height,a=t*r,u=Math.ceil((i+n-a)/r);return Math.max(0,Math.min(o-1,t+u-1))},initInstanceProps:function(e){},shouldResetStyleCacheOnItemSizeChange:!0,validateProps:function(e){e.columnWidth,e.rowHeight}}),F=C({getItemOffset:function(e,t){return t*e.itemSize},getItemSize:function(e,t){return e.itemSize},getEstimatedTotalSize:function(e){var t=e.itemCount;return e.itemSize*t},getOffsetForIndexAndAlignment:function(e,t,n,r){var o=e.direction,i=e.height,a=e.itemCount,u=e.itemSize,l=e.layout,s=e.width,c="horizontal"===o||"horizontal"===l?s:i,f=Math.max(0,a*u-c),d=Math.min(f,t*u),p=Math.max(0,t*u-c+u);switch("smart"===n&&(n=r>=p-c&&r<=d+c?"auto":"center"),n){case"start":return d;case"end":return p;case"center":var h=Math.round(p+(d-p)/2);return h<Math.ceil(c/2)?0:h>f+Math.floor(c/2)?f:h;case"auto":default:return r>=p&&r<=d?r:r<p?p:d}},getStartIndexForOffset:function(e,t){var n=e.itemCount,r=e.itemSize;return Math.max(0,Math.min(n-1,Math.floor(t/r)))},getStopIndexForStartIndex:function(e,t,n){var r=e.direction,o=e.height,i=e.itemCount,a=e.itemSize,u=e.layout,l=e.width,s=t*a,c="horizontal"===r||"horizontal"===u?l:o,f=Math.ceil((c+n-s)/a);return Math.max(0,Math.min(i-1,t+f-1))},initInstanceProps:function(e){},shouldResetStyleCacheOnItemSizeChange:!0,validateProps:function(e){e.itemSize}});function D(e,t){for(var n in e)if(!(n in t))return!0;for(var r in t)if(e[r]!==t[r])return!0;return!1}function z(e,t){var n=e.style,r=Object(c.a)(e,["style"]),o=t.style,i=Object(c.a)(t,["style"]);return!D(n,o)&&!D(r,i)}function B(e,t){return!z(this.props,e)||D(this.state,t)}},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";
/** @license React v17.0.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(24),o=60103,i=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var a=60109,u=60110,l=60112;t.Suspense=60113;var s=60115,c=60116;if("function"==typeof Symbol&&Symbol.for){var f=Symbol.for;o=f("react.element"),i=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),a=f("react.provider"),u=f("react.context"),l=f("react.forward_ref"),t.Suspense=f("react.suspense"),s=f("react.memo"),c=f("react.lazy")}var d="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m={};function v(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}function y(){}function g(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=v.prototype;var b=g.prototype=new y;b.constructor=g,r(b,v.prototype),b.isPureReactComponent=!0;var w={current:null},_=Object.prototype.hasOwnProperty,S={key:!0,ref:!0,__self:!0,__source:!0};function x(e,t,n){var r,i={},a=null,u=null;if(null!=t)for(r in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(a=""+t.key),t)_.call(t,r)&&!S.hasOwnProperty(r)&&(i[r]=t[r]);var l=arguments.length-2;if(1===l)i.children=n;else if(1<l){for(var s=Array(l),c=0;c<l;c++)s[c]=arguments[c+2];i.children=s}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===i[r]&&(i[r]=l[r]);return{$$typeof:o,type:e,key:a,ref:u,props:i,_owner:w.current}}function E(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var O=/\/+/g;function k(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function P(e,t,n,r,a){var u=typeof e;"undefined"!==u&&"boolean"!==u||(e=null);var l=!1;if(null===e)l=!0;else switch(u){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case o:case i:l=!0}}if(l)return a=a(l=e),e=""===r?"."+k(l,0):r,Array.isArray(a)?(n="",null!=e&&(n=e.replace(O,"$&/")+"/"),P(a,t,n,"",(function(e){return e}))):null!=a&&(E(a)&&(a=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,n+(!a.key||l&&l.key===a.key?"":(""+a.key).replace(O,"$&/")+"/")+e)),t.push(a)),1;if(l=0,r=""===r?".":r+":",Array.isArray(e))for(var s=0;s<e.length;s++){var c=r+k(u=e[s],s);l+=P(u,t,n,c,a)}else if("function"==typeof(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e)))for(e=c.call(e),s=0;!(u=e.next()).done;)l+=P(u=u.value,t,n,c=r+k(u,s++),a);else if("object"===u)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return l}function I(e,t,n){if(null==e)return e;var r=[],o=0;return P(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function C(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var M={current:null};function T(){var e=M.current;if(null===e)throw Error(p(321));return e}var R={ReactCurrentDispatcher:M,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:I,forEach:function(e,t,n){I(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return I(e,(function(){t++})),t},toArray:function(e){return I(e,(function(e){return e}))||[]},only:function(e){if(!E(e))throw Error(p(143));return e}},t.Component=v,t.PureComponent=g,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=R,t.cloneElement=function(e,t,n){if(null==e)throw Error(p(267,e));var i=r({},e.props),a=e.key,u=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(u=t.ref,l=w.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(c in t)_.call(t,c)&&!S.hasOwnProperty(c)&&(i[c]=void 0===t[c]&&void 0!==s?s[c]:t[c])}var c=arguments.length-2;if(1===c)i.children=n;else if(1<c){s=Array(c);for(var f=0;f<c;f++)s[f]=arguments[f+2];i.children=s}return{$$typeof:o,type:e.type,key:a,ref:u,props:i,_owner:l}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:u,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:a,_context:e},e.Consumer=e},t.createElement=x,t.createFactory=function(e){var t=x.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:l,render:e}},t.isValidElement=E,t.lazy=function(e){return{$$typeof:c,_payload:{_status:-1,_result:e},_init:C}},t.memo=function(e,t){return{$$typeof:s,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return T().useCallback(e,t)},t.useContext=function(e,t){return T().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return T().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return T().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return T().useLayoutEffect(e,t)},t.useMemo=function(e,t){return T().useMemo(e,t)},t.useReducer=function(e,t,n){return T().useReducer(e,t,n)},t.useRef=function(e){return T().useRef(e)},t.useState=function(e){return T().useState(e)},t.version="17.0.1"},function(e,t,n){"use strict";
/** @license React v17.0.1
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),o=n(24),i=n(49);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));var u=new Set,l={};function s(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(l[e]=t,e=0;e<t.length;e++)u.add(t[e])}var f=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,h={},m={};function v(e,t,n,r,o,i,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=a}var y={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){y[e]=new v(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];y[t]=new v(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){y[e]=new v(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){y[e]=new v(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){y[e]=new v(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){y[e]=new v(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){y[e]=new v(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){y[e]=new v(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){y[e]=new v(e,5,!1,e.toLowerCase(),null,!1,!1)}));var g=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function w(e,t,n,r){var o=y.hasOwnProperty(t)?y[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!p.call(m,e)||!p.call(h,e)&&(d.test(e)?m[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(g,b);y[t]=new v(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(g,b);y[t]=new v(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(g,b);y[t]=new v(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){y[e]=new v(e,1,!1,e.toLowerCase(),null,!1,!1)})),y.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){y[e]=new v(e,1,!1,e.toLowerCase(),null,!0,!0)}));var _=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,S=60103,x=60106,E=60107,O=60108,k=60114,P=60109,I=60110,C=60112,M=60113,T=60120,R=60115,L=60116,N=60121,j=60128,A=60129,F=60130,D=60131;if("function"==typeof Symbol&&Symbol.for){var z=Symbol.for;S=z("react.element"),x=z("react.portal"),E=z("react.fragment"),O=z("react.strict_mode"),k=z("react.profiler"),P=z("react.provider"),I=z("react.context"),C=z("react.forward_ref"),M=z("react.suspense"),T=z("react.suspense_list"),R=z("react.memo"),L=z("react.lazy"),N=z("react.block"),z("react.scope"),j=z("react.opaque.id"),A=z("react.debug_trace_mode"),F=z("react.offscreen"),D=z("react.legacy_hidden")}var B,U="function"==typeof Symbol&&Symbol.iterator;function V(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=U&&e[U]||e["@@iterator"])?e:null}function W(e){if(void 0===B)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);B=t&&t[1]||""}return"\n"+B+e}var H=!1;function $(e,t){if(!e||H)return"";H=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var o=e.stack.split("\n"),i=r.stack.split("\n"),a=o.length-1,u=i.length-1;1<=a&&0<=u&&o[a]!==i[u];)u--;for(;1<=a&&0<=u;a--,u--)if(o[a]!==i[u]){if(1!==a||1!==u)do{if(a--,0>--u||o[a]!==i[u])return"\n"+o[a].replace(" at new "," at ")}while(1<=a&&0<=u);break}}}finally{H=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?W(e):""}function q(e){switch(e.tag){case 5:return W(e.type);case 16:return W("Lazy");case 13:return W("Suspense");case 19:return W("SuspenseList");case 0:case 2:case 15:return e=$(e.type,!1);case 11:return e=$(e.type.render,!1);case 22:return e=$(e.type._render,!1);case 1:return e=$(e.type,!0);default:return""}}function Q(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case E:return"Fragment";case x:return"Portal";case k:return"Profiler";case O:return"StrictMode";case M:return"Suspense";case T:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case I:return(e.displayName||"Context")+".Consumer";case P:return(e._context.displayName||"Context")+".Provider";case C:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case R:return Q(e.type);case N:return Q(e._render);case L:t=e._payload,e=e._init;try{return Q(e(t))}catch(e){}}return null}function K(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Y(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function X(e){e._valueTracker||(e._valueTracker=function(e){var t=Y(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function G(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Y(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function J(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Z(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=K(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&w(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=K(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?oe(e,t.type,n):t.hasOwnProperty("defaultValue")&&oe(e,t.type,K(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function oe(e,t,n){"number"===t&&J(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function ie(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ae(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+K(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function ue(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function le(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:K(n)}}function se(e,t){var n=K(t.value),r=K(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ce(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var fe="http://www.w3.org/1999/xhtml",de="http://www.w3.org/2000/svg";function pe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function he(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?pe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var me,ve=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==de||"innerHTML"in e)e.innerHTML=t;else{for((me=me||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=me.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function ye(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ge={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},be=["Webkit","ms","Moz","O"];function we(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ge.hasOwnProperty(e)&&ge[e]?(""+t).trim():t+"px"}function _e(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=we(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ge).forEach((function(e){be.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ge[t]=ge[e]}))}));var Se=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function xe(e,t){if(t){if(Se[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function Ee(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Oe(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var ke=null,Pe=null,Ie=null;function Ce(e){if(e=Jr(e)){if("function"!=typeof ke)throw Error(a(280));var t=e.stateNode;t&&(t=eo(t),ke(e.stateNode,e.type,t))}}function Me(e){Pe?Ie?Ie.push(e):Ie=[e]:Pe=e}function Te(){if(Pe){var e=Pe,t=Ie;if(Ie=Pe=null,Ce(e),t)for(e=0;e<t.length;e++)Ce(t[e])}}function Re(e,t){return e(t)}function Le(e,t,n,r,o){return e(t,n,r,o)}function Ne(){}var je=Re,Ae=!1,Fe=!1;function De(){null===Pe&&null===Ie||(Ne(),Te())}function ze(e,t){var n=e.stateNode;if(null===n)return null;var r=eo(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var Be=!1;if(f)try{var Ue={};Object.defineProperty(Ue,"passive",{get:function(){Be=!0}}),window.addEventListener("test",Ue,Ue),window.removeEventListener("test",Ue,Ue)}catch(e){Be=!1}function Ve(e,t,n,r,o,i,a,u,l){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var We=!1,He=null,$e=!1,qe=null,Qe={onError:function(e){We=!0,He=e}};function Ke(e,t,n,r,o,i,a,u,l){We=!1,He=null,Ve.apply(Qe,arguments)}function Ye(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Xe(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function Ge(e){if(Ye(e)!==e)throw Error(a(188))}function Je(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ye(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return Ge(o),e;if(i===r)return Ge(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var u=!1,l=o.child;l;){if(l===n){u=!0,n=o,r=i;break}if(l===r){u=!0,r=o,n=i;break}l=l.sibling}if(!u){for(l=i.child;l;){if(l===n){u=!0,n=i,r=o;break}if(l===r){u=!0,r=i,n=o;break}l=l.sibling}if(!u)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Ze(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var et,tt,nt,rt,ot=!1,it=[],at=null,ut=null,lt=null,st=new Map,ct=new Map,ft=[],dt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function pt(e,t,n,r,o){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:o,targetContainers:[r]}}function ht(e,t){switch(e){case"focusin":case"focusout":at=null;break;case"dragenter":case"dragleave":ut=null;break;case"mouseover":case"mouseout":lt=null;break;case"pointerover":case"pointerout":st.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ct.delete(t.pointerId)}}function mt(e,t,n,r,o,i){return null===e||e.nativeEvent!==i?(e=pt(t,n,r,o,i),null!==t&&(null!==(t=Jr(t))&&tt(t)),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function vt(e){var t=Gr(e.target);if(null!==t){var n=Ye(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Xe(n)))return e.blockedOn=t,void rt(e.lanePriority,(function(){i.unstable_runWithPriority(e.priority,(function(){nt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function yt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Jt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=Jr(n))&&tt(t),e.blockedOn=n,!1;t.shift()}return!0}function gt(e,t,n){yt(e)&&n.delete(t)}function bt(){for(ot=!1;0<it.length;){var e=it[0];if(null!==e.blockedOn){null!==(e=Jr(e.blockedOn))&&et(e);break}for(var t=e.targetContainers;0<t.length;){var n=Jt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&it.shift()}null!==at&&yt(at)&&(at=null),null!==ut&&yt(ut)&&(ut=null),null!==lt&&yt(lt)&&(lt=null),st.forEach(gt),ct.forEach(gt)}function wt(e,t){e.blockedOn===t&&(e.blockedOn=null,ot||(ot=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,bt)))}function _t(e){function t(t){return wt(t,e)}if(0<it.length){wt(it[0],e);for(var n=1;n<it.length;n++){var r=it[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==at&&wt(at,e),null!==ut&&wt(ut,e),null!==lt&&wt(lt,e),st.forEach(t),ct.forEach(t),n=0;n<ft.length;n++)(r=ft[n]).blockedOn===e&&(r.blockedOn=null);for(;0<ft.length&&null===(n=ft[0]).blockedOn;)vt(n),null===n.blockedOn&&ft.shift()}function St(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var xt={animationend:St("Animation","AnimationEnd"),animationiteration:St("Animation","AnimationIteration"),animationstart:St("Animation","AnimationStart"),transitionend:St("Transition","TransitionEnd")},Et={},Ot={};function kt(e){if(Et[e])return Et[e];if(!xt[e])return e;var t,n=xt[e];for(t in n)if(n.hasOwnProperty(t)&&t in Ot)return Et[e]=n[t];return e}f&&(Ot=document.createElement("div").style,"AnimationEvent"in window||(delete xt.animationend.animation,delete xt.animationiteration.animation,delete xt.animationstart.animation),"TransitionEvent"in window||delete xt.transitionend.transition);var Pt=kt("animationend"),It=kt("animationiteration"),Ct=kt("animationstart"),Mt=kt("transitionend"),Tt=new Map,Rt=new Map,Lt=["abort","abort",Pt,"animationEnd",It,"animationIteration",Ct,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Mt,"transitionEnd","waiting","waiting"];function Nt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1];o="on"+(o[0].toUpperCase()+o.slice(1)),Rt.set(r,t),Tt.set(r,o),s(o,[r])}}(0,i.unstable_now)();var jt=8;function At(e){if(0!=(1&e))return jt=15,1;if(0!=(2&e))return jt=14,2;if(0!=(4&e))return jt=13,4;var t=24&e;return 0!==t?(jt=12,t):0!=(32&e)?(jt=11,32):0!==(t=192&e)?(jt=10,t):0!=(256&e)?(jt=9,256):0!==(t=3584&e)?(jt=8,t):0!=(4096&e)?(jt=7,4096):0!==(t=4186112&e)?(jt=6,t):0!==(t=62914560&e)?(jt=5,t):67108864&e?(jt=4,67108864):0!=(134217728&e)?(jt=3,134217728):0!==(t=805306368&e)?(jt=2,t):0!=(1073741824&e)?(jt=1,1073741824):(jt=8,e)}function Ft(e,t){var n=e.pendingLanes;if(0===n)return jt=0;var r=0,o=0,i=e.expiredLanes,a=e.suspendedLanes,u=e.pingedLanes;if(0!==i)r=i,o=jt=15;else if(0!==(i=134217727&n)){var l=i&~a;0!==l?(r=At(l),o=jt):0!==(u&=i)&&(r=At(u),o=jt)}else 0!==(i=n&~a)?(r=At(i),o=jt):0!==u&&(r=At(u),o=jt);if(0===r)return 0;if(r=n&((0>(r=31-Wt(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&a)){if(At(t),o<=jt)return t;jt=o}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-Wt(t)),r|=e[n],t&=~o;return r}function Dt(e){return 0!==(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function zt(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Bt(24&~t))?zt(10,t):e;case 10:return 0===(e=Bt(192&~t))?zt(8,t):e;case 8:return 0===(e=Bt(3584&~t))&&(0===(e=Bt(4186112&~t))&&(e=512)),e;case 2:return 0===(t=Bt(805306368&~t))&&(t=268435456),t}throw Error(a(358,e))}function Bt(e){return e&-e}function Ut(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Vt(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-Wt(t)]=n}var Wt=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Ht(e)/$t|0)|0},Ht=Math.log,$t=Math.LN2;var qt=i.unstable_UserBlockingPriority,Qt=i.unstable_runWithPriority,Kt=!0;function Yt(e,t,n,r){Ae||Ne();var o=Gt,i=Ae;Ae=!0;try{Le(o,e,t,n,r)}finally{(Ae=i)||De()}}function Xt(e,t,n,r){Qt(qt,Gt.bind(null,e,t,n,r))}function Gt(e,t,n,r){var o;if(Kt)if((o=0==(4&t))&&0<it.length&&-1<dt.indexOf(e))e=pt(null,e,t,n,r),it.push(e);else{var i=Jt(e,t,n,r);if(null===i)o&&ht(e,r);else{if(o){if(-1<dt.indexOf(e))return e=pt(i,e,t,n,r),void it.push(e);if(function(e,t,n,r,o){switch(t){case"focusin":return at=mt(at,e,t,n,r,o),!0;case"dragenter":return ut=mt(ut,e,t,n,r,o),!0;case"mouseover":return lt=mt(lt,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return st.set(i,mt(st.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,ct.set(i,mt(ct.get(i)||null,e,t,n,r,o)),!0}return!1}(i,e,t,n,r))return;ht(e,r)}Mr(e,t,r,null,n)}}}function Jt(e,t,n,r){var o=Oe(r);if(null!==(o=Gr(o))){var i=Ye(o);if(null===i)o=null;else{var a=i.tag;if(13===a){if(null!==(o=Xe(i)))return o;o=null}else if(3===a){if(i.stateNode.hydrate)return 3===i.tag?i.stateNode.containerInfo:null;o=null}else i!==o&&(o=null)}}return Mr(e,t,r,o,n),null}var Zt=null,en=null,tn=null;function nn(){if(tn)return tn;var e,t,n=en,r=n.length,o="value"in Zt?Zt.value:Zt.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return tn=o.slice(e,1<t?1-t:void 0)}function rn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function on(){return!0}function an(){return!1}function un(e){function t(t,n,r,o,i){for(var a in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=i,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(o):o[a]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?on:an,this.isPropagationStopped=an,this}return o(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=on)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=on)},persist:function(){},isPersistent:on}),t}var ln,sn,cn,fn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},dn=un(fn),pn=o({},fn,{view:0,detail:0}),hn=un(pn),mn=o({},pn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:kn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==cn&&(cn&&"mousemove"===e.type?(ln=e.screenX-cn.screenX,sn=e.screenY-cn.screenY):sn=ln=0,cn=e),ln)},movementY:function(e){return"movementY"in e?e.movementY:sn}}),vn=un(mn),yn=un(o({},mn,{dataTransfer:0})),gn=un(o({},pn,{relatedTarget:0})),bn=un(o({},fn,{animationName:0,elapsedTime:0,pseudoElement:0})),wn=un(o({},fn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),_n=un(o({},fn,{data:0})),Sn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},xn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},En={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function On(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=En[e])&&!!t[e]}function kn(){return On}var Pn=un(o({},pn,{key:function(e){if(e.key){var t=Sn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=rn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?xn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:kn,charCode:function(e){return"keypress"===e.type?rn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?rn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),In=un(o({},mn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Cn=un(o({},pn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:kn})),Mn=un(o({},fn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Tn=un(o({},mn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),Rn=[9,13,27,32],Ln=f&&"CompositionEvent"in window,Nn=null;f&&"documentMode"in document&&(Nn=document.documentMode);var jn=f&&"TextEvent"in window&&!Nn,An=f&&(!Ln||Nn&&8<Nn&&11>=Nn),Fn=String.fromCharCode(32),Dn=!1;function zn(e,t){switch(e){case"keyup":return-1!==Rn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Bn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Un=!1;var Vn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Wn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Vn[e.type]:"textarea"===t}function Hn(e,t,n,r){Me(r),0<(t=Rr(t,"onChange")).length&&(n=new dn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var $n=null,qn=null;function Qn(e){Er(e,0)}function Kn(e){if(G(Zr(e)))return e}function Yn(e,t){if("change"===e)return t}var Xn=!1;if(f){var Gn;if(f){var Jn="oninput"in document;if(!Jn){var Zn=document.createElement("div");Zn.setAttribute("oninput","return;"),Jn="function"==typeof Zn.oninput}Gn=Jn}else Gn=!1;Xn=Gn&&(!document.documentMode||9<document.documentMode)}function er(){$n&&($n.detachEvent("onpropertychange",tr),qn=$n=null)}function tr(e){if("value"===e.propertyName&&Kn(qn)){var t=[];if(Hn(t,qn,e,Oe(e)),e=Qn,Ae)e(t);else{Ae=!0;try{Re(e,t)}finally{Ae=!1,De()}}}}function nr(e,t,n){"focusin"===e?(er(),qn=n,($n=t).attachEvent("onpropertychange",tr)):"focusout"===e&&er()}function rr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Kn(qn)}function or(e,t){if("click"===e)return Kn(t)}function ir(e,t){if("input"===e||"change"===e)return Kn(t)}var ar="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},ur=Object.prototype.hasOwnProperty;function lr(e,t){if(ar(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!ur.call(t,n[r])||!ar(e[n[r]],t[n[r]]))return!1;return!0}function sr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=sr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=sr(r)}}function fr(){for(var e=window,t=J();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=J((e=t.contentWindow).document)}return t}function dr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var pr=f&&"documentMode"in document&&11>=document.documentMode,hr=null,mr=null,vr=null,yr=!1;function gr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;yr||null==hr||hr!==J(r)||("selectionStart"in(r=hr)&&dr(r)?r={start:r.selectionStart,end:r.selectionEnd}:r={anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},vr&&lr(vr,r)||(vr=r,0<(r=Rr(mr,"onSelect")).length&&(t=new dn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=hr)))}Nt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Nt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Nt(Lt,2);for(var br="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),wr=0;wr<br.length;wr++)Rt.set(br[wr],0);c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),s("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),s("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),s("onBeforeInput",["compositionend","keypress","textInput","paste"]),s("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var _r="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Sr=new Set("cancel close invalid load scroll toggle".split(" ").concat(_r));function xr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,i,u,l,s){if(Ke.apply(this,arguments),We){if(!We)throw Error(a(198));var c=He;We=!1,He=null,$e||($e=!0,qe=c)}}(r,t,void 0,e),e.currentTarget=null}function Er(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var i=void 0;if(t)for(var a=r.length-1;0<=a;a--){var u=r[a],l=u.instance,s=u.currentTarget;if(u=u.listener,l!==i&&o.isPropagationStopped())break e;xr(o,u,s),i=l}else for(a=0;a<r.length;a++){if(l=(u=r[a]).instance,s=u.currentTarget,u=u.listener,l!==i&&o.isPropagationStopped())break e;xr(o,u,s),i=l}}}if($e)throw e=qe,$e=!1,qe=null,e}function Or(e,t){var n=to(t),r=e+"__bubble";n.has(r)||(Cr(t,e,2,!1),n.add(r))}var kr="_reactListening"+Math.random().toString(36).slice(2);function Pr(e){e[kr]||(e[kr]=!0,u.forEach((function(t){Sr.has(t)||Ir(t,!1,e,null),Ir(t,!0,e,null)})))}function Ir(e,t,n,r){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,i=n;if("selectionchange"===e&&9!==n.nodeType&&(i=n.ownerDocument),null!==r&&!t&&Sr.has(e)){if("scroll"!==e)return;o|=2,i=r}var a=to(i),u=e+"__"+(t?"capture":"bubble");a.has(u)||(t&&(o|=4),Cr(i,e,o,t),a.add(u))}function Cr(e,t,n,r){var o=Rt.get(t);switch(void 0===o?2:o){case 0:o=Yt;break;case 1:o=Xt;break;default:o=Gt}n=o.bind(null,t,n,e),o=void 0,!Be||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Mr(e,t,n,r,o){var i=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var u=r.stateNode.containerInfo;if(u===o||8===u.nodeType&&u.parentNode===o)break;if(4===a)for(a=r.return;null!==a;){var l=a.tag;if((3===l||4===l)&&((l=a.stateNode.containerInfo)===o||8===l.nodeType&&l.parentNode===o))return;a=a.return}for(;null!==u;){if(null===(a=Gr(u)))return;if(5===(l=a.tag)||6===l){r=i=a;continue e}u=u.parentNode}}r=r.return}!function(e,t,n){if(Fe)return e(t,n);Fe=!0;try{je(e,t,n)}finally{Fe=!1,De()}}((function(){var r=i,o=Oe(n),a=[];e:{var u=Tt.get(e);if(void 0!==u){var l=dn,s=e;switch(e){case"keypress":if(0===rn(n))break e;case"keydown":case"keyup":l=Pn;break;case"focusin":s="focus",l=gn;break;case"focusout":s="blur",l=gn;break;case"beforeblur":case"afterblur":l=gn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=vn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=yn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=Cn;break;case Pt:case It:case Ct:l=bn;break;case Mt:l=Mn;break;case"scroll":l=hn;break;case"wheel":l=Tn;break;case"copy":case"cut":case"paste":l=wn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=In}var c=0!=(4&t),f=!c&&"scroll"===e,d=c?null!==u?u+"Capture":null:u;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&(null!=(m=ze(h,d))&&c.push(Tr(h,m,p)))),f)break;h=h.return}0<c.length&&(u=new l(u,s,null,n,o),a.push({event:u,listeners:c}))}}if(0==(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(u="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(s=n.relatedTarget||n.fromElement)||!Gr(s)&&!s[Yr])&&(l||u)&&(u=o.window===o?o:(u=o.ownerDocument)?u.defaultView||u.parentWindow:window,l?(l=r,null!==(s=(s=n.relatedTarget||n.toElement)?Gr(s):null)&&(s!==(f=Ye(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(l=null,s=r),l!==s)){if(c=vn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=In,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==l?u:Zr(l),p=null==s?u:Zr(s),(u=new c(m,h+"leave",l,n,o)).target=f,u.relatedTarget=p,m=null,Gr(o)===r&&((c=new c(d,h+"enter",s,n,o)).target=p,c.relatedTarget=f,m=c),f=m,l&&s)e:{for(d=s,h=0,p=c=l;p;p=Lr(p))h++;for(p=0,m=d;m;m=Lr(m))p++;for(;0<h-p;)c=Lr(c),h--;for(;0<p-h;)d=Lr(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=Lr(c),d=Lr(d)}c=null}else c=null;null!==l&&Nr(a,u,l,c,!1),null!==s&&null!==f&&Nr(a,f,s,c,!0)}if("select"===(l=(u=r?Zr(r):window).nodeName&&u.nodeName.toLowerCase())||"input"===l&&"file"===u.type)var v=Yn;else if(Wn(u))if(Xn)v=ir;else{v=rr;var y=nr}else(l=u.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===u.type||"radio"===u.type)&&(v=or);switch(v&&(v=v(e,r))?Hn(a,v,n,o):(y&&y(e,u,r),"focusout"===e&&(y=u._wrapperState)&&y.controlled&&"number"===u.type&&oe(u,"number",u.value)),y=r?Zr(r):window,e){case"focusin":(Wn(y)||"true"===y.contentEditable)&&(hr=y,mr=r,vr=null);break;case"focusout":vr=mr=hr=null;break;case"mousedown":yr=!0;break;case"contextmenu":case"mouseup":case"dragend":yr=!1,gr(a,n,o);break;case"selectionchange":if(pr)break;case"keydown":case"keyup":gr(a,n,o)}var g;if(Ln)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Un?zn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(An&&"ko"!==n.locale&&(Un||"onCompositionStart"!==b?"onCompositionEnd"===b&&Un&&(g=nn()):(en="value"in(Zt=o)?Zt.value:Zt.textContent,Un=!0)),0<(y=Rr(r,b)).length&&(b=new _n(b,e,null,n,o),a.push({event:b,listeners:y}),g?b.data=g:null!==(g=Bn(n))&&(b.data=g))),(g=jn?function(e,t){switch(e){case"compositionend":return Bn(t);case"keypress":return 32!==t.which?null:(Dn=!0,Fn);case"textInput":return(e=t.data)===Fn&&Dn?null:e;default:return null}}(e,n):function(e,t){if(Un)return"compositionend"===e||!Ln&&zn(e,t)?(e=nn(),tn=en=Zt=null,Un=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return An&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))&&(0<(r=Rr(r,"onBeforeInput")).length&&(o=new _n("onBeforeInput","beforeinput",null,n,o),a.push({event:o,listeners:r}),o.data=g))}Er(a,t)}))}function Tr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Rr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,i=o.stateNode;5===o.tag&&null!==i&&(o=i,null!=(i=ze(e,n))&&r.unshift(Tr(e,i,o)),null!=(i=ze(e,t))&&r.push(Tr(e,i,o))),e=e.return}return r}function Lr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Nr(e,t,n,r,o){for(var i=t._reactName,a=[];null!==n&&n!==r;){var u=n,l=u.alternate,s=u.stateNode;if(null!==l&&l===r)break;5===u.tag&&null!==s&&(u=s,o?null!=(l=ze(n,i))&&a.unshift(Tr(n,l,u)):o||null!=(l=ze(n,i))&&a.push(Tr(n,l,u))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}function jr(){}var Ar=null,Fr=null;function Dr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function zr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Br="function"==typeof setTimeout?setTimeout:void 0,Ur="function"==typeof clearTimeout?clearTimeout:void 0;function Vr(e){1===e.nodeType?e.textContent="":9===e.nodeType&&(null!=(e=e.body)&&(e.textContent=""))}function Wr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Hr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var $r=0;var qr=Math.random().toString(36).slice(2),Qr="__reactFiber$"+qr,Kr="__reactProps$"+qr,Yr="__reactContainer$"+qr,Xr="__reactEvents$"+qr;function Gr(e){var t=e[Qr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Yr]||n[Qr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Hr(e);null!==e;){if(n=e[Qr])return n;e=Hr(e)}return t}n=(e=n).parentNode}return null}function Jr(e){return!(e=e[Qr]||e[Yr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Zr(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function eo(e){return e[Kr]||null}function to(e){var t=e[Xr];return void 0===t&&(t=e[Xr]=new Set),t}var no=[],ro=-1;function oo(e){return{current:e}}function io(e){0>ro||(e.current=no[ro],no[ro]=null,ro--)}function ao(e,t){ro++,no[ro]=e.current,e.current=t}var uo={},lo=oo(uo),so=oo(!1),co=uo;function fo(e,t){var n=e.type.contextTypes;if(!n)return uo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function po(e){return null!=(e=e.childContextTypes)}function ho(){io(so),io(lo)}function mo(e,t,n){if(lo.current!==uo)throw Error(a(168));ao(lo,t),ao(so,n)}function vo(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in e))throw Error(a(108,Q(t)||"Unknown",i));return o({},n,r)}function yo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||uo,co=lo.current,ao(lo,e),ao(so,so.current),!0}function go(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=vo(e,t,co),r.__reactInternalMemoizedMergedChildContext=e,io(so),io(lo),ao(lo,e)):io(so),ao(so,n)}var bo=null,wo=null,_o=i.unstable_runWithPriority,So=i.unstable_scheduleCallback,xo=i.unstable_cancelCallback,Eo=i.unstable_shouldYield,Oo=i.unstable_requestPaint,ko=i.unstable_now,Po=i.unstable_getCurrentPriorityLevel,Io=i.unstable_ImmediatePriority,Co=i.unstable_UserBlockingPriority,Mo=i.unstable_NormalPriority,To=i.unstable_LowPriority,Ro=i.unstable_IdlePriority,Lo={},No=void 0!==Oo?Oo:function(){},jo=null,Ao=null,Fo=!1,Do=ko(),zo=1e4>Do?ko:function(){return ko()-Do};function Bo(){switch(Po()){case Io:return 99;case Co:return 98;case Mo:return 97;case To:return 96;case Ro:return 95;default:throw Error(a(332))}}function Uo(e){switch(e){case 99:return Io;case 98:return Co;case 97:return Mo;case 96:return To;case 95:return Ro;default:throw Error(a(332))}}function Vo(e,t){return e=Uo(e),_o(e,t)}function Wo(e,t,n){return e=Uo(e),So(e,t,n)}function Ho(){if(null!==Ao){var e=Ao;Ao=null,xo(e)}$o()}function $o(){if(!Fo&&null!==jo){Fo=!0;var e=0;try{var t=jo;Vo(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),jo=null}catch(t){throw null!==jo&&(jo=jo.slice(e+1)),So(Io,Ho),t}finally{Fo=!1}}}var qo=_.ReactCurrentBatchConfig;function Qo(e,t){if(e&&e.defaultProps){for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Ko=oo(null),Yo=null,Xo=null,Go=null;function Jo(){Go=Xo=Yo=null}function Zo(e){var t=Ko.current;io(Ko),e.type._context._currentValue=t}function ei(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function ti(e,t){Yo=e,Go=Xo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Ra=!0),e.firstContext=null)}function ni(e,t){if(Go!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Go=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Xo){if(null===Yo)throw Error(a(308));Xo=t,Yo.dependencies={lanes:0,firstContext:t,responders:null}}else Xo=Xo.next=t;return e._currentValue}var ri=!1;function oi(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function ii(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ai(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function ui(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function li(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,i=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===i?o=i=a:i=i.next=a,n=n.next}while(null!==n);null===i?o=i=t:i=i.next=t}else o=i=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:i,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function si(e,t,n,r){var i=e.updateQueue;ri=!1;var a=i.firstBaseUpdate,u=i.lastBaseUpdate,l=i.shared.pending;if(null!==l){i.shared.pending=null;var s=l,c=s.next;s.next=null,null===u?a=c:u.next=c,u=s;var f=e.alternate;if(null!==f){var d=(f=f.updateQueue).lastBaseUpdate;d!==u&&(null===d?f.firstBaseUpdate=c:d.next=c,f.lastBaseUpdate=s)}}if(null!==a){for(d=i.baseState,u=0,f=c=s=null;;){l=a.lane;var p=a.eventTime;if((r&l)===l){null!==f&&(f=f.next={eventTime:p,lane:0,tag:a.tag,payload:a.payload,callback:a.callback,next:null});e:{var h=e,m=a;switch(l=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){d=h.call(p,d,l);break e}d=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null==(l="function"==typeof(h=m.payload)?h.call(p,d,l):h))break e;d=o({},d,l);break e;case 2:ri=!0}}null!==a.callback&&(e.flags|=32,null===(l=i.effects)?i.effects=[a]:l.push(a))}else p={eventTime:p,lane:l,tag:a.tag,payload:a.payload,callback:a.callback,next:null},null===f?(c=f=p,s=d):f=f.next=p,u|=l;if(null===(a=a.next)){if(null===(l=i.shared.pending))break;a=l.next,l.next=null,i.lastBaseUpdate=l,i.shared.pending=null}}null===f&&(s=d),i.baseState=s,i.firstBaseUpdate=c,i.lastBaseUpdate=f,Nu|=u,e.lanes=u,e.memoizedState=d}}function ci(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(a(191,o));o.call(r)}}}var fi=(new r.Component).refs;function di(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var pi={isMounted:function(e){return!!(e=e._reactInternals)&&Ye(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=il(),o=al(e),i=ai(r,o);i.payload=t,null!=n&&(i.callback=n),ui(e,i),ul(e,o,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=il(),o=al(e),i=ai(r,o);i.tag=1,i.payload=t,null!=n&&(i.callback=n),ui(e,i),ul(e,o,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=il(),r=al(e),o=ai(n,r);o.tag=2,null!=t&&(o.callback=t),ui(e,o),ul(e,r,n)}};function hi(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!t.prototype||!t.prototype.isPureReactComponent||(!lr(n,r)||!lr(o,i))}function mi(e,t,n){var r=!1,o=uo,i=t.contextType;return"object"==typeof i&&null!==i?i=ni(i):(o=po(t)?co:lo.current,i=(r=null!=(r=t.contextTypes))?fo(e,o):uo),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=pi,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function vi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&pi.enqueueReplaceState(t,t.state,null)}function yi(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=fi,oi(e);var i=t.contextType;"object"==typeof i&&null!==i?o.context=ni(i):(i=po(t)?co:lo.current,o.context=fo(e,i)),si(e,n,o,r),o.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(di(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&pi.enqueueReplaceState(o,o.state,null),si(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4)}var gi=Array.isArray;function bi(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===fi&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function wi(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function _i(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=zl(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function u(t){return e&&null===t.alternate&&(t.flags=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Wl(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function s(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=bi(e,t,n),r.return=e,r):((r=Bl(n.type,n.key,n.props,null,e.mode,r)).ref=bi(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Hl(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=Ul(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Wl(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case S:return(n=Bl(t.type,t.key,t.props,null,e.mode,n)).ref=bi(e,null,t),n.return=e,n;case x:return(t=Hl(t,e.mode,n)).return=e,t}if(gi(t)||V(t))return(t=Ul(t,e.mode,n,null)).return=e,t;wi(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case S:return n.key===o?n.type===E?f(e,t,n.props.children,r,o):s(e,t,n,r):null;case x:return n.key===o?c(e,t,n,r):null}if(gi(n)||V(n))return null!==o?null:f(e,t,n,r,null);wi(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case S:return e=e.get(null===r.key?n:r.key)||null,r.type===E?f(t,e,r.props.children,o,r.key):s(t,e,r,o);case x:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(gi(r)||V(r))return f(t,e=e.get(n)||null,r,o,null);wi(t,r)}return null}function m(o,a,u,l){for(var s=null,c=null,f=a,m=a=0,v=null;null!==f&&m<u.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var y=p(o,f,u[m],l);if(null===y){null===f&&(f=v);break}e&&f&&null===y.alternate&&t(o,f),a=i(y,a,m),null===c?s=y:c.sibling=y,c=y,f=v}if(m===u.length)return n(o,f),s;if(null===f){for(;m<u.length;m++)null!==(f=d(o,u[m],l))&&(a=i(f,a,m),null===c?s=f:c.sibling=f,c=f);return s}for(f=r(o,f);m<u.length;m++)null!==(v=h(f,o,m,u[m],l))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),a=i(v,a,m),null===c?s=v:c.sibling=v,c=v);return e&&f.forEach((function(e){return t(o,e)})),s}function v(o,u,l,s){var c=V(l);if("function"!=typeof c)throw Error(a(150));if(null==(l=c.call(l)))throw Error(a(151));for(var f=c=null,m=u,v=u=0,y=null,g=l.next();null!==m&&!g.done;v++,g=l.next()){m.index>v?(y=m,m=null):y=m.sibling;var b=p(o,m,g.value,s);if(null===b){null===m&&(m=y);break}e&&m&&null===b.alternate&&t(o,m),u=i(b,u,v),null===f?c=b:f.sibling=b,f=b,m=y}if(g.done)return n(o,m),c;if(null===m){for(;!g.done;v++,g=l.next())null!==(g=d(o,g.value,s))&&(u=i(g,u,v),null===f?c=g:f.sibling=g,f=g);return c}for(m=r(o,m);!g.done;v++,g=l.next())null!==(g=h(m,o,v,g.value,s))&&(e&&null!==g.alternate&&m.delete(null===g.key?v:g.key),u=i(g,u,v),null===f?c=g:f.sibling=g,f=g);return e&&m.forEach((function(e){return t(o,e)})),c}return function(e,r,i,l){var s="object"==typeof i&&null!==i&&i.type===E&&null===i.key;s&&(i=i.props.children);var c="object"==typeof i&&null!==i;if(c)switch(i.$$typeof){case S:e:{for(c=i.key,s=r;null!==s;){if(s.key===c){switch(s.tag){case 7:if(i.type===E){n(e,s.sibling),(r=o(s,i.props.children)).return=e,e=r;break e}break;default:if(s.elementType===i.type){n(e,s.sibling),(r=o(s,i.props)).ref=bi(e,s,i),r.return=e,e=r;break e}}n(e,s);break}t(e,s),s=s.sibling}i.type===E?((r=Ul(i.props.children,e.mode,l,i.key)).return=e,e=r):((l=Bl(i.type,i.key,i.props,null,e.mode,l)).ref=bi(e,r,i),l.return=e,e=l)}return u(e);case x:e:{for(s=i.key;null!==r;){if(r.key===s){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Hl(i,e.mode,l)).return=e,e=r}return u(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=Wl(i,e.mode,l)).return=e,e=r),u(e);if(gi(i))return m(e,r,i,l);if(V(i))return v(e,r,i,l);if(c&&wi(e,i),void 0===i&&!s)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(a(152,Q(e.type)||"Component"))}return n(e,r)}}var Si=_i(!0),xi=_i(!1),Ei={},Oi=oo(Ei),ki=oo(Ei),Pi=oo(Ei);function Ii(e){if(e===Ei)throw Error(a(174));return e}function Ci(e,t){switch(ao(Pi,t),ao(ki,e),ao(Oi,Ei),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:he(null,"");break;default:t=he(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}io(Oi),ao(Oi,t)}function Mi(){io(Oi),io(ki),io(Pi)}function Ti(e){Ii(Pi.current);var t=Ii(Oi.current),n=he(t,e.type);t!==n&&(ao(ki,e),ao(Oi,n))}function Ri(e){ki.current===e&&(io(Oi),io(ki))}var Li=oo(0);function Ni(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ji=null,Ai=null,Fi=!1;function Di(e,t){var n=Fl(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function zi(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Bi(e){if(Fi){var t=Ai;if(t){var n=t;if(!zi(e,t)){if(!(t=Wr(n.nextSibling))||!zi(e,t))return e.flags=-1025&e.flags|2,Fi=!1,void(ji=e);Di(ji,n)}ji=e,Ai=Wr(t.firstChild)}else e.flags=-1025&e.flags|2,Fi=!1,ji=e}}function Ui(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ji=e}function Vi(e){if(e!==ji)return!1;if(!Fi)return Ui(e),Fi=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!zr(t,e.memoizedProps))for(t=Ai;t;)Di(e,t),t=Wr(t.nextSibling);if(Ui(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Ai=Wr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Ai=null}}else Ai=ji?Wr(e.stateNode.nextSibling):null;return!0}function Wi(){Ai=ji=null,Fi=!1}var Hi=[];function $i(){for(var e=0;e<Hi.length;e++)Hi[e]._workInProgressVersionPrimary=null;Hi.length=0}var qi=_.ReactCurrentDispatcher,Qi=_.ReactCurrentBatchConfig,Ki=0,Yi=null,Xi=null,Gi=null,Ji=!1,Zi=!1;function ea(){throw Error(a(321))}function ta(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ar(e[n],t[n]))return!1;return!0}function na(e,t,n,r,o,i){if(Ki=i,Yi=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,qi.current=null===e||null===e.memoizedState?Ia:Ca,e=n(r,o),Zi){i=0;do{if(Zi=!1,!(25>i))throw Error(a(301));i+=1,Gi=Xi=null,t.updateQueue=null,qi.current=Ma,e=n(r,o)}while(Zi)}if(qi.current=Pa,t=null!==Xi&&null!==Xi.next,Ki=0,Gi=Xi=Yi=null,Ji=!1,t)throw Error(a(300));return e}function ra(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Gi?Yi.memoizedState=Gi=e:Gi=Gi.next=e,Gi}function oa(){if(null===Xi){var e=Yi.alternate;e=null!==e?e.memoizedState:null}else e=Xi.next;var t=null===Gi?Yi.memoizedState:Gi.next;if(null!==t)Gi=t,Xi=e;else{if(null===e)throw Error(a(310));e={memoizedState:(Xi=e).memoizedState,baseState:Xi.baseState,baseQueue:Xi.baseQueue,queue:Xi.queue,next:null},null===Gi?Yi.memoizedState=Gi=e:Gi=Gi.next=e}return Gi}function ia(e,t){return"function"==typeof t?t(e):t}function aa(e){var t=oa(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=Xi,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var u=o.next;o.next=i.next,i.next=u}r.baseQueue=o=i,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var l=u=i=null,s=o;do{var c=s.lane;if((Ki&c)===c)null!==l&&(l=l.next={lane:0,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null}),r=s.eagerReducer===e?s.eagerState:e(r,s.action);else{var f={lane:c,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null};null===l?(u=l=f,i=r):l=l.next=f,Yi.lanes|=c,Nu|=c}s=s.next}while(null!==s&&s!==o);null===l?i=r:l.next=u,ar(r,t.memoizedState)||(Ra=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=l,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function ua(e){var t=oa(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var u=o=o.next;do{i=e(i,u.action),u=u.next}while(u!==o);ar(i,t.memoizedState)||(Ra=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function la(e,t,n){var r=t._getVersion;r=r(t._source);var o=t._workInProgressVersionPrimary;if(null!==o?e=o===r:(e=e.mutableReadLanes,(e=(Ki&e)===e)&&(t._workInProgressVersionPrimary=r,Hi.push(t))),e)return n(t._source);throw Hi.push(t),Error(a(350))}function sa(e,t,n,r){var o=ku;if(null===o)throw Error(a(349));var i=t._getVersion,u=i(t._source),l=qi.current,s=l.useState((function(){return la(o,t,n)})),c=s[1],f=s[0];s=Gi;var d=e.memoizedState,p=d.refs,h=p.getSnapshot,m=d.source;d=d.subscribe;var v=Yi;return e.memoizedState={refs:p,source:t,subscribe:r},l.useEffect((function(){p.getSnapshot=n,p.setSnapshot=c;var e=i(t._source);if(!ar(u,e)){e=n(t._source),ar(f,e)||(c(e),e=al(v),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var r=o.entanglements,a=e;0<a;){var l=31-Wt(a),s=1<<l;r[l]|=e,a&=~s}}}),[n,t,r]),l.useEffect((function(){return r(t._source,(function(){var e=p.getSnapshot,n=p.setSnapshot;try{n(e(t._source));var r=al(v);o.mutableReadLanes|=r&o.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),ar(h,n)&&ar(m,t)&&ar(d,r)||((e={pending:null,dispatch:null,lastRenderedReducer:ia,lastRenderedState:f}).dispatch=c=ka.bind(null,Yi,e),s.queue=e,s.baseQueue=null,f=la(o,t,n),s.memoizedState=s.baseState=f),f}function ca(e,t,n){return sa(oa(),e,t,n)}function fa(e){var t=ra();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:ia,lastRenderedState:e}).dispatch=ka.bind(null,Yi,e),[t.memoizedState,e]}function da(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Yi.updateQueue)?(t={lastEffect:null},Yi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function pa(e){return e={current:e},ra().memoizedState=e}function ha(){return oa().memoizedState}function ma(e,t,n,r){var o=ra();Yi.flags|=e,o.memoizedState=da(1|t,n,void 0,void 0===r?null:r)}function va(e,t,n,r){var o=oa();r=void 0===r?null:r;var i=void 0;if(null!==Xi){var a=Xi.memoizedState;if(i=a.destroy,null!==r&&ta(r,a.deps))return void da(t,n,i,r)}Yi.flags|=e,o.memoizedState=da(1|t,n,i,r)}function ya(e,t){return ma(516,4,e,t)}function ga(e,t){return va(516,4,e,t)}function ba(e,t){return va(4,2,e,t)}function wa(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function _a(e,t,n){return n=null!=n?n.concat([e]):null,va(4,2,wa.bind(null,t,e),n)}function Sa(){}function xa(e,t){var n=oa();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ta(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Ea(e,t){var n=oa();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ta(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Oa(e,t){var n=Bo();Vo(98>n?98:n,(function(){e(!0)})),Vo(97<n?97:n,(function(){var n=Qi.transition;Qi.transition=1;try{e(!1),t()}finally{Qi.transition=n}}))}function ka(e,t,n){var r=il(),o=al(e),i={lane:o,action:n,eagerReducer:null,eagerState:null,next:null},a=t.pending;if(null===a?i.next=i:(i.next=a.next,a.next=i),t.pending=i,a=e.alternate,e===Yi||null!==a&&a===Yi)Zi=Ji=!0;else{if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var u=t.lastRenderedState,l=a(u,n);if(i.eagerReducer=a,i.eagerState=l,ar(l,u))return}catch(e){}ul(e,o,r)}}var Pa={readContext:ni,useCallback:ea,useContext:ea,useEffect:ea,useImperativeHandle:ea,useLayoutEffect:ea,useMemo:ea,useReducer:ea,useRef:ea,useState:ea,useDebugValue:ea,useDeferredValue:ea,useTransition:ea,useMutableSource:ea,useOpaqueIdentifier:ea,unstable_isNewReconciler:!1},Ia={readContext:ni,useCallback:function(e,t){return ra().memoizedState=[e,void 0===t?null:t],e},useContext:ni,useEffect:ya,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ma(4,2,wa.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ma(4,2,e,t)},useMemo:function(e,t){var n=ra();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=ra();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=ka.bind(null,Yi,e),[r.memoizedState,e]},useRef:pa,useState:fa,useDebugValue:Sa,useDeferredValue:function(e){var t=fa(e),n=t[0],r=t[1];return ya((function(){var t=Qi.transition;Qi.transition=1;try{r(e)}finally{Qi.transition=t}}),[e]),n},useTransition:function(){var e=fa(!1),t=e[0];return pa(e=Oa.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=ra();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},sa(r,e,t,n)},useOpaqueIdentifier:function(){if(Fi){var e=!1,t=function(e){return{$$typeof:j,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+($r++).toString(36))),Error(a(355))})),n=fa(t)[1];return 0==(2&Yi.mode)&&(Yi.flags|=516,da(5,(function(){n("r:"+($r++).toString(36))}),void 0,null)),t}return fa(t="r:"+($r++).toString(36)),t},unstable_isNewReconciler:!1},Ca={readContext:ni,useCallback:xa,useContext:ni,useEffect:ga,useImperativeHandle:_a,useLayoutEffect:ba,useMemo:Ea,useReducer:aa,useRef:ha,useState:function(){return aa(ia)},useDebugValue:Sa,useDeferredValue:function(e){var t=aa(ia),n=t[0],r=t[1];return ga((function(){var t=Qi.transition;Qi.transition=1;try{r(e)}finally{Qi.transition=t}}),[e]),n},useTransition:function(){var e=aa(ia)[0];return[ha().current,e]},useMutableSource:ca,useOpaqueIdentifier:function(){return aa(ia)[0]},unstable_isNewReconciler:!1},Ma={readContext:ni,useCallback:xa,useContext:ni,useEffect:ga,useImperativeHandle:_a,useLayoutEffect:ba,useMemo:Ea,useReducer:ua,useRef:ha,useState:function(){return ua(ia)},useDebugValue:Sa,useDeferredValue:function(e){var t=ua(ia),n=t[0],r=t[1];return ga((function(){var t=Qi.transition;Qi.transition=1;try{r(e)}finally{Qi.transition=t}}),[e]),n},useTransition:function(){var e=ua(ia)[0];return[ha().current,e]},useMutableSource:ca,useOpaqueIdentifier:function(){return ua(ia)[0]},unstable_isNewReconciler:!1},Ta=_.ReactCurrentOwner,Ra=!1;function La(e,t,n,r){t.child=null===e?xi(t,null,n,r):Si(t,e.child,n,r)}function Na(e,t,n,r,o){n=n.render;var i=t.ref;return ti(t,o),r=na(e,t,n,r,i,o),null===e||Ra?(t.flags|=1,La(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,eu(e,t,o))}function ja(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||Dl(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Bl(n.type,null,r,t,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Aa(e,t,a,r,o,i))}return a=e.child,0==(o&i)&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:lr)(o,r)&&e.ref===t.ref)?eu(e,t,i):(t.flags|=1,(e=zl(a,r)).ref=t.ref,e.return=t,t.child=e)}function Aa(e,t,n,r,o,i){if(null!==e&&lr(e.memoizedProps,r)&&e.ref===t.ref){if(Ra=!1,0==(i&o))return t.lanes=e.lanes,eu(e,t,i);0!=(16384&e.flags)&&(Ra=!0)}return za(e,t,n,r,i)}function Fa(e,t,n){var r=t.pendingProps,o=r.children,i=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},ml(t,n);else{if(0==(1073741824&n))return e=null!==i?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},ml(t,e),null;t.memoizedState={baseLanes:0},ml(t,null!==i?i.baseLanes:n)}else null!==i?(r=i.baseLanes|n,t.memoizedState=null):r=n,ml(t,r);return La(e,t,o,n),t.child}function Da(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function za(e,t,n,r,o){var i=po(n)?co:lo.current;return i=fo(t,i),ti(t,o),n=na(e,t,n,r,i,o),null===e||Ra?(t.flags|=1,La(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,eu(e,t,o))}function Ba(e,t,n,r,o){if(po(n)){var i=!0;yo(t)}else i=!1;if(ti(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),mi(t,n,r),yi(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,u=t.memoizedProps;a.props=u;var l=a.context,s=n.contextType;"object"==typeof s&&null!==s?s=ni(s):s=fo(t,s=po(n)?co:lo.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||l!==s)&&vi(t,a,r,s),ri=!1;var d=t.memoizedState;a.state=d,si(t,r,a,o),l=t.memoizedState,u!==r||d!==l||so.current||ri?("function"==typeof c&&(di(t,n,c,r),l=t.memoizedState),(u=ri||hi(t,n,u,r,d,l,s))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4)):("function"==typeof a.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=s,r=u):("function"==typeof a.componentDidMount&&(t.flags|=4),r=!1)}else{a=t.stateNode,ii(e,t),u=t.memoizedProps,s=t.type===t.elementType?u:Qo(t.type,u),a.props=s,f=t.pendingProps,d=a.context,"object"==typeof(l=n.contextType)&&null!==l?l=ni(l):l=fo(t,l=po(n)?co:lo.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==f||d!==l)&&vi(t,a,r,l),ri=!1,d=t.memoizedState,a.state=d,si(t,r,a,o);var h=t.memoizedState;u!==f||d!==h||so.current||ri?("function"==typeof p&&(di(t,n,p,r),h=t.memoizedState),(s=ri||hi(t,n,s,r,d,h,l))?(c||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,h,l),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,h,l)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=h),a.props=r,a.state=h,a.context=l,r=s):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),r=!1)}return Ua(e,t,n,r,i,o)}function Ua(e,t,n,r,o,i){Da(e,t);var a=0!=(64&t.flags);if(!r&&!a)return o&&go(t,n,!1),eu(e,t,i);r=t.stateNode,Ta.current=t;var u=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&a?(t.child=Si(t,e.child,null,i),t.child=Si(t,null,u,i)):La(e,t,u,i),t.memoizedState=r.state,o&&go(t,n,!0),t.child}function Va(e){var t=e.stateNode;t.pendingContext?mo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&mo(0,t.context,!1),Ci(e,t.containerInfo)}var Wa,Ha,$a,qa={dehydrated:null,retryLane:0};function Qa(e,t,n){var r,o=t.pendingProps,i=Li.current,a=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(a=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(i|=1),ao(Li,1&i),null===e?(void 0!==o.fallback&&Bi(t),e=o.children,i=o.fallback,a?(e=Ka(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=qa,e):"number"==typeof o.unstable_expectedLoadTime?(e=Ka(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=qa,t.lanes=33554432,e):((n=Vl({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,a?(o=Xa(e,t,o.children,o.fallback,n),a=t.child,i=e.child.memoizedState,a.memoizedState=null===i?{baseLanes:n}:{baseLanes:i.baseLanes|n},a.childLanes=e.childLanes&~n,t.memoizedState=qa,o):(n=Ya(e,t,o.children,n),t.memoizedState=null,n))}function Ka(e,t,n,r){var o=e.mode,i=e.child;return t={mode:"hidden",children:t},0==(2&o)&&null!==i?(i.childLanes=0,i.pendingProps=t):i=Vl(t,o,0,null),n=Ul(n,o,r,null),i.return=e,n.return=e,i.sibling=n,e.child=i,n}function Ya(e,t,n,r){var o=e.child;return e=o.sibling,n=zl(o,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}function Xa(e,t,n,r,o){var i=t.mode,a=e.child;e=a.sibling;var u={mode:"hidden",children:n};return 0==(2&i)&&t.child!==a?((n=t.child).childLanes=0,n.pendingProps=u,null!==(a=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=a,a.nextEffect=null):t.firstEffect=t.lastEffect=null):n=zl(a,u),null!==e?r=zl(e,r):(r=Ul(r,i,o,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}function Ga(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),ei(e.return,t)}function Ja(e,t,n,r,o,i){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o,lastEffect:i}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=o,a.lastEffect=i)}function Za(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(La(e,t,r.children,n),0!=(2&(r=Li.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ga(e,n);else if(19===e.tag)Ga(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(ao(Li,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===Ni(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Ja(t,!1,o,n,i,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Ni(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Ja(t,!0,n,null,i,t.lastEffect);break;case"together":Ja(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function eu(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Nu|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=zl(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=zl(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function tu(e,t){if(!Fi)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function nu(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return po(t.type)&&ho(),null;case 3:return Mi(),io(so),io(lo),$i(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Vi(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:Ri(t);var i=Ii(Pi.current);if(n=t.type,null!==e&&null!=t.stateNode)Ha(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(a(166));return null}if(e=Ii(Oi.current),Vi(t)){r=t.stateNode,n=t.type;var u=t.memoizedProps;switch(r[Qr]=t,r[Kr]=u,n){case"dialog":Or("cancel",r),Or("close",r);break;case"iframe":case"object":case"embed":Or("load",r);break;case"video":case"audio":for(e=0;e<_r.length;e++)Or(_r[e],r);break;case"source":Or("error",r);break;case"img":case"image":case"link":Or("error",r),Or("load",r);break;case"details":Or("toggle",r);break;case"input":ee(r,u),Or("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!u.multiple},Or("invalid",r);break;case"textarea":le(r,u),Or("invalid",r)}for(var s in xe(n,u),e=null,u)u.hasOwnProperty(s)&&(i=u[s],"children"===s?"string"==typeof i?r.textContent!==i&&(e=["children",i]):"number"==typeof i&&r.textContent!==""+i&&(e=["children",""+i]):l.hasOwnProperty(s)&&null!=i&&"onScroll"===s&&Or("scroll",r));switch(n){case"input":X(r),re(r,u,!0);break;case"textarea":X(r),ce(r);break;case"select":case"option":break;default:"function"==typeof u.onClick&&(r.onclick=jr)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(s=9===i.nodeType?i:i.ownerDocument,e===fe&&(e=pe(n)),e===fe?"script"===n?((e=s.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=s.createElement(n,{is:r.is}):(e=s.createElement(n),"select"===n&&(s=e,r.multiple?s.multiple=!0:r.size&&(s.size=r.size))):e=s.createElementNS(e,n),e[Qr]=t,e[Kr]=r,Wa(e,t),t.stateNode=e,s=Ee(n,r),n){case"dialog":Or("cancel",e),Or("close",e),i=r;break;case"iframe":case"object":case"embed":Or("load",e),i=r;break;case"video":case"audio":for(i=0;i<_r.length;i++)Or(_r[i],e);i=r;break;case"source":Or("error",e),i=r;break;case"img":case"image":case"link":Or("error",e),Or("load",e),i=r;break;case"details":Or("toggle",e),i=r;break;case"input":ee(e,r),i=Z(e,r),Or("invalid",e);break;case"option":i=ie(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},i=o({},r,{value:void 0}),Or("invalid",e);break;case"textarea":le(e,r),i=ue(e,r),Or("invalid",e);break;default:i=r}xe(n,i);var c=i;for(u in c)if(c.hasOwnProperty(u)){var f=c[u];"style"===u?_e(e,f):"dangerouslySetInnerHTML"===u?null!=(f=f?f.__html:void 0)&&ve(e,f):"children"===u?"string"==typeof f?("textarea"!==n||""!==f)&&ye(e,f):"number"==typeof f&&ye(e,""+f):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(l.hasOwnProperty(u)?null!=f&&"onScroll"===u&&Or("scroll",e):null!=f&&w(e,u,f,s))}switch(n){case"input":X(e),re(e,r,!1);break;case"textarea":X(e),ce(e);break;case"option":null!=r.value&&e.setAttribute("value",""+K(r.value));break;case"select":e.multiple=!!r.multiple,null!=(u=r.value)?ae(e,!!r.multiple,u,!1):null!=r.defaultValue&&ae(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=jr)}Dr(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)$a(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));n=Ii(Pi.current),Ii(Oi.current),Vi(t)?(r=t.stateNode,n=t.memoizedProps,r[Qr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Qr]=t,t.stateNode=r)}return null;case 13:return io(Li),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Vi(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Li.current)?0===Tu&&(Tu=3):(0!==Tu&&3!==Tu||(Tu=4),null===ku||0==(134217727&Nu)&&0==(134217727&ju)||fl(ku,Iu))),(r||n)&&(t.flags|=4),null);case 4:return Mi(),null===e&&Pr(t.stateNode.containerInfo),null;case 10:return Zo(t),null;case 17:return po(t.type)&&ho(),null;case 19:if(io(Li),null===(r=t.memoizedState))return null;if(u=0!=(64&t.flags),null===(s=r.rendering))if(u)tu(r,!1);else{if(0!==Tu||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(s=Ni(e))){for(t.flags|=64,tu(r,!1),null!==(u=s.updateQueue)&&(t.updateQueue=u,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(u=n).flags&=2,u.nextEffect=null,u.firstEffect=null,u.lastEffect=null,null===(s=u.alternate)?(u.childLanes=0,u.lanes=e,u.child=null,u.memoizedProps=null,u.memoizedState=null,u.updateQueue=null,u.dependencies=null,u.stateNode=null):(u.childLanes=s.childLanes,u.lanes=s.lanes,u.child=s.child,u.memoizedProps=s.memoizedProps,u.memoizedState=s.memoizedState,u.updateQueue=s.updateQueue,u.type=s.type,e=s.dependencies,u.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return ao(Li,1&Li.current|2),t.child}e=e.sibling}null!==r.tail&&zo()>zu&&(t.flags|=64,u=!0,tu(r,!1),t.lanes=33554432)}else{if(!u)if(null!==(e=Ni(s))){if(t.flags|=64,u=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),tu(r,!0),null===r.tail&&"hidden"===r.tailMode&&!s.alternate&&!Fi)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*zo()-r.renderingStartTime>zu&&1073741824!==n&&(t.flags|=64,u=!0,tu(r,!1),t.lanes=33554432);r.isBackwards?(s.sibling=t.child,t.child=s):(null!==(n=r.last)?n.sibling=s:t.child=s,r.last=s)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=zo(),n.sibling=null,t=Li.current,ao(Li,u?1&t|2:1&t),n):null;case 23:case 24:return vl(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(a(156,t.tag))}function ru(e){switch(e.tag){case 1:po(e.type)&&ho();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Mi(),io(so),io(lo),$i(),0!=(64&(t=e.flags)))throw Error(a(285));return e.flags=-4097&t|64,e;case 5:return Ri(e),null;case 13:return io(Li),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return io(Li),null;case 4:return Mi(),null;case 10:return Zo(e),null;case 23:case 24:return vl(),null;default:return null}}function ou(e,t){try{var n="",r=t;do{n+=q(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o}}function iu(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Wa=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ha=function(e,t,n,r){var i=e.memoizedProps;if(i!==r){e=t.stateNode,Ii(Oi.current);var a,u=null;switch(n){case"input":i=Z(e,i),r=Z(e,r),u=[];break;case"option":i=ie(e,i),r=ie(e,r),u=[];break;case"select":i=o({},i,{value:void 0}),r=o({},r,{value:void 0}),u=[];break;case"textarea":i=ue(e,i),r=ue(e,r),u=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(e.onclick=jr)}for(f in xe(n,r),n=null,i)if(!r.hasOwnProperty(f)&&i.hasOwnProperty(f)&&null!=i[f])if("style"===f){var s=i[f];for(a in s)s.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==f&&"children"!==f&&"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(l.hasOwnProperty(f)?u||(u=[]):(u=u||[]).push(f,null));for(f in r){var c=r[f];if(s=null!=i?i[f]:void 0,r.hasOwnProperty(f)&&c!==s&&(null!=c||null!=s))if("style"===f)if(s){for(a in s)!s.hasOwnProperty(a)||c&&c.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in c)c.hasOwnProperty(a)&&s[a]!==c[a]&&(n||(n={}),n[a]=c[a])}else n||(u||(u=[]),u.push(f,n)),n=c;else"dangerouslySetInnerHTML"===f?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(u=u||[]).push(f,c)):"children"===f?"string"!=typeof c&&"number"!=typeof c||(u=u||[]).push(f,""+c):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&(l.hasOwnProperty(f)?(null!=c&&"onScroll"===f&&Or("scroll",e),u||s===c||(u=[])):"object"==typeof c&&null!==c&&c.$$typeof===j?c.toString():(u=u||[]).push(f,c))}n&&(u=u||[]).push("style",n);var f=u;(t.updateQueue=f)&&(t.flags|=4)}},$a=function(e,t,n,r){n!==r&&(t.flags|=4)};var au="function"==typeof WeakMap?WeakMap:Map;function uu(e,t,n){(n=ai(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Wu||(Wu=!0,Hu=r),iu(0,t)},n}function lu(e,t,n){(n=ai(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return iu(0,t),r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===$u?$u=new Set([this]):$u.add(this),iu(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var su="function"==typeof WeakSet?WeakSet:Set;function cu(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Ll(e,t)}else t.current=null}function fu(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Qo(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Vr(t.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(a(163))}function du(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var o=e;r=o.next,0!=(4&(o=o.tag))&&0!=(1&o)&&(Ml(n,e),Cl(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Qo(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&ci(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}ci(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Dr(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&_t(n)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(a(163))}function pu(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=we("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function hu(e,t){if(wo&&"function"==typeof wo.onCommitFiberUnmount)try{wo.onCommitFiberUnmount(bo,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,o=r.destroy;if(r=r.tag,void 0!==o)if(0!=(4&r))Ml(t,n);else{r=t;try{o()}catch(e){Ll(r,e)}}n=n.next}while(n!==e)}break;case 1:if(cu(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Ll(t,e)}break;case 5:cu(t);break;case 4:gu(e,t)}}function mu(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function vu(e){return 5===e.tag||3===e.tag||4===e.tag}function yu(e){e:{for(var t=e.return;null!==t;){if(vu(t))break e;t=t.return}throw Error(a(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.flags&&(ye(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||vu(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?function e(t,n,r){var o=t.tag,i=5===o||6===o;if(i)t=i?t.stateNode:t.stateNode.instance,n?8===r.nodeType?r.parentNode.insertBefore(t,n):r.insertBefore(t,n):(8===r.nodeType?(n=r.parentNode).insertBefore(t,r):(n=r).appendChild(t),null!==(r=r._reactRootContainer)&&void 0!==r||null!==n.onclick||(n.onclick=jr));else if(4!==o&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t):function e(t,n,r){var o=t.tag,i=5===o||6===o;if(i)t=i?t.stateNode:t.stateNode.instance,n?r.insertBefore(t,n):r.appendChild(t);else if(4!==o&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t)}function gu(e,t){for(var n,r,o=t,i=!1;;){if(!i){i=o.return;e:for(;;){if(null===i)throw Error(a(160));switch(n=i.stateNode,i.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}i=i.return}i=!0}if(5===o.tag||6===o.tag){e:for(var u=e,l=o,s=l;;)if(hu(u,s),null!==s.child&&4!==s.tag)s.child.return=s,s=s.child;else{if(s===l)break e;for(;null===s.sibling;){if(null===s.return||s.return===l)break e;s=s.return}s.sibling.return=s.return,s=s.sibling}r?(u=n,l=o.stateNode,8===u.nodeType?u.parentNode.removeChild(l):u.removeChild(l)):n.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){n=o.stateNode.containerInfo,r=!0,o.child.return=o,o=o.child;continue}}else if(hu(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(i=!1)}o.sibling.return=o.return,o=o.sibling}}function bu(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var o=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[Kr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),Ee(e,o),t=Ee(e,r),o=0;o<i.length;o+=2){var u=i[o],l=i[o+1];"style"===u?_e(n,l):"dangerouslySetInnerHTML"===u?ve(n,l):"children"===u?ye(n,l):w(n,u,l,t)}switch(e){case"input":ne(n,r);break;case"textarea":se(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(i=r.value)?ae(n,!!r.multiple,i,!1):e!==!!r.multiple&&(null!=r.defaultValue?ae(n,!!r.multiple,r.defaultValue,!0):ae(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(a(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,_t(n.containerInfo)));case 12:return;case 13:return null!==t.memoizedState&&(Du=zo(),pu(t.child,!0)),void wu(t);case 19:return void wu(t);case 17:return;case 23:case 24:return void pu(t,null!==t.memoizedState)}throw Error(a(163))}function wu(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new su),t.forEach((function(t){var r=jl.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function _u(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&(null!==(t=t.memoizedState)&&null===t.dehydrated)}var Su=Math.ceil,xu=_.ReactCurrentDispatcher,Eu=_.ReactCurrentOwner,Ou=0,ku=null,Pu=null,Iu=0,Cu=0,Mu=oo(0),Tu=0,Ru=null,Lu=0,Nu=0,ju=0,Au=0,Fu=null,Du=0,zu=1/0;function Bu(){zu=zo()+500}var Uu,Vu=null,Wu=!1,Hu=null,$u=null,qu=!1,Qu=null,Ku=90,Yu=[],Xu=[],Gu=null,Ju=0,Zu=null,el=-1,tl=0,nl=0,rl=null,ol=!1;function il(){return 0!=(48&Ou)?zo():-1!==el?el:el=zo()}function al(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Bo()?1:2;if(0===tl&&(tl=Lu),0!==qo.transition){0!==nl&&(nl=null!==Fu?Fu.pendingLanes:0),e=tl;var t=4186112&~nl;return 0===(t&=-t)&&(0===(t=(e=4186112&~e)&-e)&&(t=8192)),t}return e=Bo(),0!=(4&Ou)&&98===e?e=zt(12,tl):e=zt(e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),tl),e}function ul(e,t,n){if(50<Ju)throw Ju=0,Zu=null,Error(a(185));if(null===(e=ll(e,t)))return null;Vt(e,t,n),e===ku&&(ju|=t,4===Tu&&fl(e,Iu));var r=Bo();1===t?0!=(8&Ou)&&0==(48&Ou)?dl(e):(sl(e,n),0===Ou&&(Bu(),Ho())):(0==(4&Ou)||98!==r&&99!==r||(null===Gu?Gu=new Set([e]):Gu.add(e)),sl(e,n)),Fu=e}function ll(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function sl(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,o=e.pingedLanes,i=e.expirationTimes,u=e.pendingLanes;0<u;){var l=31-Wt(u),s=1<<l,c=i[l];if(-1===c){if(0==(s&r)||0!=(s&o)){c=t,At(s);var f=jt;i[l]=10<=f?c+250:6<=f?c+5e3:-1}}else c<=t&&(e.expiredLanes|=s);u&=~s}if(r=Ft(e,e===ku?Iu:0),t=jt,0===r)null!==n&&(n!==Lo&&xo(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Lo&&xo(n)}15===t?(n=dl.bind(null,e),null===jo?(jo=[n],Ao=So(Io,$o)):jo.push(n),n=Lo):14===t?n=Wo(99,dl.bind(null,e)):n=Wo(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(a(358,e))}}(t),cl.bind(null,e)),e.callbackPriority=t,e.callbackNode=n}}function cl(e){if(el=-1,nl=tl=0,0!=(48&Ou))throw Error(a(327));var t=e.callbackNode;if(Il()&&e.callbackNode!==t)return null;var n=Ft(e,e===ku?Iu:0);if(0===n)return null;var r=n,o=Ou;Ou|=16;var i=bl();for(ku===e&&Iu===r||(Bu(),yl(e,r));;)try{Sl();break}catch(t){gl(e,t)}if(Jo(),xu.current=i,Ou=o,null!==Pu?r=0:(ku=null,Iu=0,r=Tu),0!=(Lu&ju))yl(e,0);else if(0!==r){if(2===r&&(Ou|=64,e.hydrate&&(e.hydrate=!1,Vr(e.containerInfo)),0!==(n=Dt(e))&&(r=wl(e,n))),1===r)throw t=Ru,yl(e,0),fl(e,n),sl(e,zo()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(a(345));case 2:Ol(e);break;case 3:if(fl(e,n),(62914560&n)===n&&10<(r=Du+500-zo())){if(0!==Ft(e,0))break;if(((o=e.suspendedLanes)&n)!==n){il(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=Br(Ol.bind(null,e),r);break}Ol(e);break;case 4:if(fl(e,n),(4186112&n)===n)break;for(r=e.eventTimes,o=-1;0<n;){var u=31-Wt(n);i=1<<u,(u=r[u])>o&&(o=u),n&=~i}if(n=o,10<(n=(120>(n=zo()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Su(n/1960))-n)){e.timeoutHandle=Br(Ol.bind(null,e),n);break}Ol(e);break;case 5:Ol(e);break;default:throw Error(a(329))}}return sl(e,zo()),e.callbackNode===t?cl.bind(null,e):null}function fl(e,t){for(t&=~Au,t&=~ju,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Wt(t),r=1<<n;e[n]=-1,t&=~r}}function dl(e){if(0!=(48&Ou))throw Error(a(327));if(Il(),e===ku&&0!=(e.expiredLanes&Iu)){var t=Iu,n=wl(e,t);0!=(Lu&ju)&&(n=wl(e,t=Ft(e,t)))}else n=wl(e,t=Ft(e,0));if(0!==e.tag&&2===n&&(Ou|=64,e.hydrate&&(e.hydrate=!1,Vr(e.containerInfo)),0!==(t=Dt(e))&&(n=wl(e,t))),1===n)throw n=Ru,yl(e,0),fl(e,t),sl(e,zo()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Ol(e),sl(e,zo()),null}function pl(e,t){var n=Ou;Ou|=1;try{return e(t)}finally{0===(Ou=n)&&(Bu(),Ho())}}function hl(e,t){var n=Ou;Ou&=-2,Ou|=8;try{return e(t)}finally{0===(Ou=n)&&(Bu(),Ho())}}function ml(e,t){ao(Mu,Cu),Cu|=t,Lu|=t}function vl(){Cu=Mu.current,io(Mu)}function yl(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Ur(n)),null!==Pu)for(n=Pu.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&ho();break;case 3:Mi(),io(so),io(lo),$i();break;case 5:Ri(r);break;case 4:Mi();break;case 13:case 19:io(Li);break;case 10:Zo(r);break;case 23:case 24:vl()}n=n.return}ku=e,Pu=zl(e.current,null),Iu=Cu=Lu=t,Tu=0,Ru=null,Au=ju=Nu=0}function gl(e,t){for(;;){var n=Pu;try{if(Jo(),qi.current=Pa,Ji){for(var r=Yi.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}Ji=!1}if(Ki=0,Gi=Xi=Yi=null,Zi=!1,Eu.current=null,null===n||null===n.return){Tu=1,Ru=t,Pu=null;break}e:{var i=e,a=n.return,u=n,l=t;if(t=Iu,u.flags|=2048,u.firstEffect=u.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var s=l;if(0==(2&u.mode)){var c=u.alternate;c?(u.updateQueue=c.updateQueue,u.memoizedState=c.memoizedState,u.lanes=c.lanes):(u.updateQueue=null,u.memoizedState=null)}var f=0!=(1&Li.current),d=a;do{var p;if(p=13===d.tag){var h=d.memoizedState;if(null!==h)p=null!==h.dehydrated;else{var m=d.memoizedProps;p=void 0!==m.fallback&&(!0!==m.unstable_avoidThisFallback||!f)}}if(p){var v=d.updateQueue;if(null===v){var y=new Set;y.add(s),d.updateQueue=y}else v.add(s);if(0==(2&d.mode)){if(d.flags|=64,u.flags|=16384,u.flags&=-2981,1===u.tag)if(null===u.alternate)u.tag=17;else{var g=ai(-1,1);g.tag=2,ui(u,g)}u.lanes|=1;break e}l=void 0,u=t;var b=i.pingCache;if(null===b?(b=i.pingCache=new au,l=new Set,b.set(s,l)):void 0===(l=b.get(s))&&(l=new Set,b.set(s,l)),!l.has(u)){l.add(u);var w=Nl.bind(null,i,s,u);s.then(w,w)}d.flags|=4096,d.lanes=t;break e}d=d.return}while(null!==d);l=Error((Q(u.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Tu&&(Tu=2),l=ou(l,u),d=a;do{switch(d.tag){case 3:i=l,d.flags|=4096,t&=-t,d.lanes|=t,li(d,uu(0,i,t));break e;case 1:i=l;var _=d.type,S=d.stateNode;if(0==(64&d.flags)&&("function"==typeof _.getDerivedStateFromError||null!==S&&"function"==typeof S.componentDidCatch&&(null===$u||!$u.has(S)))){d.flags|=4096,t&=-t,d.lanes|=t,li(d,lu(d,i,t));break e}}d=d.return}while(null!==d)}El(n)}catch(e){t=e,Pu===n&&null!==n&&(Pu=n=n.return);continue}break}}function bl(){var e=xu.current;return xu.current=Pa,null===e?Pa:e}function wl(e,t){var n=Ou;Ou|=16;var r=bl();for(ku===e&&Iu===t||yl(e,t);;)try{_l();break}catch(t){gl(e,t)}if(Jo(),Ou=n,xu.current=r,null!==Pu)throw Error(a(261));return ku=null,Iu=0,Tu}function _l(){for(;null!==Pu;)xl(Pu)}function Sl(){for(;null!==Pu&&!Eo();)xl(Pu)}function xl(e){var t=Uu(e.alternate,e,Cu);e.memoizedProps=e.pendingProps,null===t?El(e):Pu=t,Eu.current=null}function El(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=nu(n,t,Cu)))return void(Pu=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Cu)||0==(4&n.mode)){for(var r=0,o=n.child;null!==o;)r|=o.lanes|o.childLanes,o=o.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=ru(t)))return n.flags&=2047,void(Pu=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Pu=t);Pu=t=e}while(null!==t);0===Tu&&(Tu=5)}function Ol(e){var t=Bo();return Vo(99,kl.bind(null,e,t)),null}function kl(e,t){do{Il()}while(null!==Qu);if(0!=(48&Ou))throw Error(a(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null;var r=n.lanes|n.childLanes,o=r,i=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var u=e.eventTimes,l=e.expirationTimes;0<i;){var s=31-Wt(i),c=1<<s;o[s]=0,u[s]=-1,l[s]=-1,i&=~c}if(null!==Gu&&0==(24&r)&&Gu.has(e)&&Gu.delete(e),e===ku&&(Pu=ku=null,Iu=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(o=Ou,Ou|=32,Eu.current=null,Ar=Kt,dr(u=fr())){if("selectionStart"in u)l={start:u.selectionStart,end:u.selectionEnd};else e:if(l=(l=u.ownerDocument)&&l.defaultView||window,(c=l.getSelection&&l.getSelection())&&0!==c.rangeCount){l=c.anchorNode,i=c.anchorOffset,s=c.focusNode,c=c.focusOffset;try{l.nodeType,s.nodeType}catch(e){l=null;break e}var f=0,d=-1,p=-1,h=0,m=0,v=u,y=null;t:for(;;){for(var g;v!==l||0!==i&&3!==v.nodeType||(d=f+i),v!==s||0!==c&&3!==v.nodeType||(p=f+c),3===v.nodeType&&(f+=v.nodeValue.length),null!==(g=v.firstChild);)y=v,v=g;for(;;){if(v===u)break t;if(y===l&&++h===i&&(d=f),y===s&&++m===c&&(p=f),null!==(g=v.nextSibling))break;y=(v=y).parentNode}v=g}l=-1===d||-1===p?null:{start:d,end:p}}else l=null;l=l||{start:0,end:0}}else l=null;Fr={focusedElem:u,selectionRange:l},Kt=!1,rl=null,ol=!1,Vu=r;do{try{Pl()}catch(e){if(null===Vu)throw Error(a(330));Ll(Vu,e),Vu=Vu.nextEffect}}while(null!==Vu);rl=null,Vu=r;do{try{for(u=e;null!==Vu;){var b=Vu.flags;if(16&b&&ye(Vu.stateNode,""),128&b){var w=Vu.alternate;if(null!==w){var _=w.ref;null!==_&&("function"==typeof _?_(null):_.current=null)}}switch(1038&b){case 2:yu(Vu),Vu.flags&=-3;break;case 6:yu(Vu),Vu.flags&=-3,bu(Vu.alternate,Vu);break;case 1024:Vu.flags&=-1025;break;case 1028:Vu.flags&=-1025,bu(Vu.alternate,Vu);break;case 4:bu(Vu.alternate,Vu);break;case 8:gu(u,l=Vu);var S=l.alternate;mu(l),null!==S&&mu(S)}Vu=Vu.nextEffect}}catch(e){if(null===Vu)throw Error(a(330));Ll(Vu,e),Vu=Vu.nextEffect}}while(null!==Vu);if(_=Fr,w=fr(),b=_.focusedElem,u=_.selectionRange,w!==b&&b&&b.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(b.ownerDocument.documentElement,b)){null!==u&&dr(b)&&(w=u.start,void 0===(_=u.end)&&(_=w),"selectionStart"in b?(b.selectionStart=w,b.selectionEnd=Math.min(_,b.value.length)):(_=(w=b.ownerDocument||document)&&w.defaultView||window).getSelection&&(_=_.getSelection(),l=b.textContent.length,S=Math.min(u.start,l),u=void 0===u.end?S:Math.min(u.end,l),!_.extend&&S>u&&(l=u,u=S,S=l),l=cr(b,S),i=cr(b,u),l&&i&&(1!==_.rangeCount||_.anchorNode!==l.node||_.anchorOffset!==l.offset||_.focusNode!==i.node||_.focusOffset!==i.offset)&&((w=w.createRange()).setStart(l.node,l.offset),_.removeAllRanges(),S>u?(_.addRange(w),_.extend(i.node,i.offset)):(w.setEnd(i.node,i.offset),_.addRange(w))))),w=[];for(_=b;_=_.parentNode;)1===_.nodeType&&w.push({element:_,left:_.scrollLeft,top:_.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<w.length;b++)(_=w[b]).element.scrollLeft=_.left,_.element.scrollTop=_.top}Kt=!!Ar,Fr=Ar=null,e.current=n,Vu=r;do{try{for(b=e;null!==Vu;){var x=Vu.flags;if(36&x&&du(b,Vu.alternate,Vu),128&x){w=void 0;var E=Vu.ref;if(null!==E){var O=Vu.stateNode;switch(Vu.tag){case 5:w=O;break;default:w=O}"function"==typeof E?E(w):E.current=w}}Vu=Vu.nextEffect}}catch(e){if(null===Vu)throw Error(a(330));Ll(Vu,e),Vu=Vu.nextEffect}}while(null!==Vu);Vu=null,No(),Ou=o}else e.current=n;if(qu)qu=!1,Qu=e,Ku=t;else for(Vu=r;null!==Vu;)t=Vu.nextEffect,Vu.nextEffect=null,8&Vu.flags&&((x=Vu).sibling=null,x.stateNode=null),Vu=t;if(0===(r=e.pendingLanes)&&($u=null),1===r?e===Zu?Ju++:(Ju=0,Zu=e):Ju=0,n=n.stateNode,wo&&"function"==typeof wo.onCommitFiberRoot)try{wo.onCommitFiberRoot(bo,n,void 0,64==(64&n.current.flags))}catch(e){}if(sl(e,zo()),Wu)throw Wu=!1,e=Hu,Hu=null,e;return 0!=(8&Ou)||Ho(),null}function Pl(){for(;null!==Vu;){var e=Vu.alternate;ol||null===rl||(0!=(8&Vu.flags)?Ze(Vu,rl)&&(ol=!0):13===Vu.tag&&_u(e,Vu)&&Ze(Vu,rl)&&(ol=!0));var t=Vu.flags;0!=(256&t)&&fu(e,Vu),0==(512&t)||qu||(qu=!0,Wo(97,(function(){return Il(),null}))),Vu=Vu.nextEffect}}function Il(){if(90!==Ku){var e=97<Ku?97:Ku;return Ku=90,Vo(e,Tl)}return!1}function Cl(e,t){Yu.push(t,e),qu||(qu=!0,Wo(97,(function(){return Il(),null})))}function Ml(e,t){Xu.push(t,e),qu||(qu=!0,Wo(97,(function(){return Il(),null})))}function Tl(){if(null===Qu)return!1;var e=Qu;if(Qu=null,0!=(48&Ou))throw Error(a(331));var t=Ou;Ou|=32;var n=Xu;Xu=[];for(var r=0;r<n.length;r+=2){var o=n[r],i=n[r+1],u=o.destroy;if(o.destroy=void 0,"function"==typeof u)try{u()}catch(e){if(null===i)throw Error(a(330));Ll(i,e)}}for(n=Yu,Yu=[],r=0;r<n.length;r+=2){o=n[r],i=n[r+1];try{var l=o.create;o.destroy=l()}catch(e){if(null===i)throw Error(a(330));Ll(i,e)}}for(l=e.current.firstEffect;null!==l;)e=l.nextEffect,l.nextEffect=null,8&l.flags&&(l.sibling=null,l.stateNode=null),l=e;return Ou=t,Ho(),!0}function Rl(e,t,n){ui(e,t=uu(0,t=ou(n,t),1)),t=il(),null!==(e=ll(e,1))&&(Vt(e,1,t),sl(e,t))}function Ll(e,t){if(3===e.tag)Rl(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Rl(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===$u||!$u.has(r))){var o=lu(n,e=ou(t,e),1);if(ui(n,o),o=il(),null!==(n=ll(n,1)))Vt(n,1,o),sl(n,o);else if("function"==typeof r.componentDidCatch&&(null===$u||!$u.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function Nl(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=il(),e.pingedLanes|=e.suspendedLanes&n,ku===e&&(Iu&n)===n&&(4===Tu||3===Tu&&(62914560&Iu)===Iu&&500>zo()-Du?yl(e,0):Au|=n),sl(e,t)}function jl(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Bo()?1:2:(0===tl&&(tl=Lu),0===(t=Bt(62914560&~tl))&&(t=4194304))),n=il(),null!==(e=ll(e,t))&&(Vt(e,t,n),sl(e,n))}function Al(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Fl(e,t,n,r){return new Al(e,t,n,r)}function Dl(e){return!(!(e=e.prototype)||!e.isReactComponent)}function zl(e,t){var n=e.alternate;return null===n?((n=Fl(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Bl(e,t,n,r,o,i){var u=2;if(r=e,"function"==typeof e)Dl(e)&&(u=1);else if("string"==typeof e)u=5;else e:switch(e){case E:return Ul(n.children,o,i,t);case A:u=8,o|=16;break;case O:u=8,o|=1;break;case k:return(e=Fl(12,n,t,8|o)).elementType=k,e.type=k,e.lanes=i,e;case M:return(e=Fl(13,n,t,o)).type=M,e.elementType=M,e.lanes=i,e;case T:return(e=Fl(19,n,t,o)).elementType=T,e.lanes=i,e;case F:return Vl(n,o,i,t);case D:return(e=Fl(24,n,t,o)).elementType=D,e.lanes=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case P:u=10;break e;case I:u=9;break e;case C:u=11;break e;case R:u=14;break e;case L:u=16,r=null;break e;case N:u=22;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Fl(u,n,t,o)).elementType=e,t.type=r,t.lanes=i,t}function Ul(e,t,n,r){return(e=Fl(7,e,r,t)).lanes=n,e}function Vl(e,t,n,r){return(e=Fl(23,e,r,t)).elementType=F,e.lanes=n,e}function Wl(e,t,n){return(e=Fl(6,e,null,t)).lanes=n,e}function Hl(e,t,n){return(t=Fl(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function $l(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Ut(0),this.expirationTimes=Ut(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Ut(0),this.mutableSourceEagerHydrationData=null}function ql(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:x,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Ql(e,t,n,r){var o=t.current,i=il(),u=al(o);e:if(n){t:{if(Ye(n=n._reactInternals)!==n||1!==n.tag)throw Error(a(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(po(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);throw Error(a(171))}if(1===n.tag){var s=n.type;if(po(s)){n=vo(n,s,l);break e}}n=l}else n=uo;return null===t.context?t.context=n:t.pendingContext=n,(t=ai(i,u)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),ui(o,t),ul(o,u,i),u}function Kl(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Yl(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Xl(e,t){Yl(e,t),(e=e.alternate)&&Yl(e,t)}function Gl(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new $l(e,t,null!=n&&!0===n.hydrate),t=Fl(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,oi(t),e[Yr]=n.current,Pr(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var o=(t=r[e])._getVersion;o=o(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,o]:n.mutableSourceEagerHydrationData.push(t,o)}this._internalRoot=n}function Jl(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Zl(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i._internalRoot;if("function"==typeof o){var u=o;o=function(){var e=Kl(a);u.call(e)}}Ql(t,a,e,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Gl(e,0,t?{hydrate:!0}:void 0)}(n,r),a=i._internalRoot,"function"==typeof o){var l=o;o=function(){var e=Kl(a);l.call(e)}}hl((function(){Ql(t,a,e,o)}))}return Kl(a)}function es(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Jl(t))throw Error(a(200));return ql(e,t,null,n)}Uu=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||so.current)Ra=!0;else{if(0==(n&r)){switch(Ra=!1,t.tag){case 3:Va(t),Wi();break;case 5:Ti(t);break;case 1:po(t.type)&&yo(t);break;case 4:Ci(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var o=t.type._context;ao(Ko,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Qa(e,t,n):(ao(Li,1&Li.current),null!==(t=eu(e,t,n))?t.sibling:null);ao(Li,1&Li.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return Za(e,t,n);t.flags|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),ao(Li,Li.current),r)break;return null;case 23:case 24:return t.lanes=0,Fa(e,t,n)}return eu(e,t,n)}Ra=0!=(16384&e.flags)}else Ra=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=fo(t,lo.current),ti(t,n),o=na(null,t,r,e,o,n),t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,po(r)){var i=!0;yo(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,oi(t);var u=r.getDerivedStateFromProps;"function"==typeof u&&di(t,r,u,e),o.updater=pi,t.stateNode=o,o._reactInternals=t,yi(t,r,e,n),t=Ua(null,t,r,!0,i,n)}else t.tag=0,La(null,t,o,n),t=t.child;return t;case 16:o=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=(i=o._init)(o._payload),t.type=o,i=t.tag=function(e){if("function"==typeof e)return Dl(e)?1:0;if(null!=e){if((e=e.$$typeof)===C)return 11;if(e===R)return 14}return 2}(o),e=Qo(o,e),i){case 0:t=za(null,t,o,e,n);break e;case 1:t=Ba(null,t,o,e,n);break e;case 11:t=Na(null,t,o,e,n);break e;case 14:t=ja(null,t,o,Qo(o.type,e),r,n);break e}throw Error(a(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,za(e,t,r,o=t.elementType===r?o:Qo(r,o),n);case 1:return r=t.type,o=t.pendingProps,Ba(e,t,r,o=t.elementType===r?o:Qo(r,o),n);case 3:if(Va(t),r=t.updateQueue,null===e||null===r)throw Error(a(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,ii(e,t),si(t,r,null,n),(r=t.memoizedState.element)===o)Wi(),t=eu(e,t,n);else{if((i=(o=t.stateNode).hydrate)&&(Ai=Wr(t.stateNode.containerInfo.firstChild),ji=t,i=Fi=!0),i){if(null!=(e=o.mutableSourceEagerHydrationData))for(o=0;o<e.length;o+=2)(i=e[o])._workInProgressVersionPrimary=e[o+1],Hi.push(i);for(n=xi(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else La(e,t,r,n),Wi();t=t.child}return t;case 5:return Ti(t),null===e&&Bi(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,u=o.children,zr(r,o)?u=null:null!==i&&zr(r,i)&&(t.flags|=16),Da(e,t),La(e,t,u,n),t.child;case 6:return null===e&&Bi(t),null;case 13:return Qa(e,t,n);case 4:return Ci(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Si(t,null,r,n):La(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Na(e,t,r,o=t.elementType===r?o:Qo(r,o),n);case 7:return La(e,t,t.pendingProps,n),t.child;case 8:case 12:return La(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,u=t.memoizedProps,i=o.value;var l=t.type._context;if(ao(Ko,l._currentValue),l._currentValue=i,null!==u)if(l=u.value,0===(i=ar(l,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,i):1073741823))){if(u.children===o.children&&!so.current){t=eu(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var s=l.dependencies;if(null!==s){u=l.child;for(var c=s.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&i)){1===l.tag&&((c=ai(-1,n&-n)).tag=2,ui(l,c)),l.lanes|=n,null!==(c=l.alternate)&&(c.lanes|=n),ei(l.return,n),s.lanes|=n;break}c=c.next}}else u=10===l.tag&&l.type===t.type?null:l.child;if(null!==u)u.return=l;else for(u=l;null!==u;){if(u===t){u=null;break}if(null!==(l=u.sibling)){l.return=u.return,u=l;break}u=u.return}l=u}La(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,ti(t,n),r=r(o=ni(o,i.unstable_observedBits)),t.flags|=1,La(e,t,r,n),t.child;case 14:return i=Qo(o=t.type,t.pendingProps),ja(e,t,o,i=Qo(o.type,i),r,n);case 15:return Aa(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Qo(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,po(r)?(e=!0,yo(t)):e=!1,ti(t,n),mi(t,r,o),yi(t,r,o,n),Ua(null,t,r,!0,e,n);case 19:return Za(e,t,n);case 23:case 24:return Fa(e,t,n)}throw Error(a(156,t.tag))},Gl.prototype.render=function(e){Ql(e,this._internalRoot,null,null)},Gl.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Ql(null,e,null,(function(){t[Yr]=null}))},et=function(e){13===e.tag&&(ul(e,4,il()),Xl(e,4))},tt=function(e){13===e.tag&&(ul(e,67108864,il()),Xl(e,67108864))},nt=function(e){if(13===e.tag){var t=il(),n=al(e);ul(e,n,t),Xl(e,n)}},rt=function(e,t){return t()},ke=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=eo(r);if(!o)throw Error(a(90));G(r),ne(r,o)}}}break;case"textarea":se(e,n);break;case"select":null!=(t=n.value)&&ae(e,!!n.multiple,t,!1)}},Re=pl,Le=function(e,t,n,r,o){var i=Ou;Ou|=4;try{return Vo(98,e.bind(null,t,n,r,o))}finally{0===(Ou=i)&&(Bu(),Ho())}},Ne=function(){0==(49&Ou)&&(function(){if(null!==Gu){var e=Gu;Gu=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,sl(e,zo())}))}Ho()}(),Il())},je=function(e,t){var n=Ou;Ou|=2;try{return e(t)}finally{0===(Ou=n)&&(Bu(),Ho())}};var ts={Events:[Jr,Zr,eo,Me,Te,Il,{current:!1}]},ns={findFiberByHostInstance:Gr,bundleType:0,version:"17.0.1",rendererPackageName:"react-dom"},rs={bundleType:ns.bundleType,version:ns.version,rendererPackageName:ns.rendererPackageName,rendererConfig:ns.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:_.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Je(e))?null:e.stateNode},findFiberByHostInstance:ns.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var os=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!os.isDisabled&&os.supportsFiber)try{bo=os.inject(rs),wo=os}catch(e){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ts,t.createPortal=es,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return e=null===(e=Je(t))?null:e.stateNode},t.flushSync=function(e,t){var n=Ou;if(0!=(48&n))return e(t);Ou|=1;try{if(e)return Vo(99,e.bind(null,t))}finally{Ou=n,Ho()}},t.hydrate=function(e,t,n){if(!Jl(t))throw Error(a(200));return Zl(null,e,t,!0,n)},t.render=function(e,t,n){if(!Jl(t))throw Error(a(200));return Zl(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Jl(e))throw Error(a(40));return!!e._reactRootContainer&&(hl((function(){Zl(null,null,e,!1,(function(){e._reactRootContainer=null,e[Yr]=null}))})),!0)},t.unstable_batchedUpdates=pl,t.unstable_createPortal=function(e,t){return es(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Jl(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return Zl(e,t,n,!1,r)},t.version="17.0.1"},function(e,t,n){"use strict";e.exports=n(50)},function(e,t,n){"use strict";
/** @license React v0.20.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,o,i,a;if("object"==typeof performance&&"function"==typeof performance.now){var u=performance;t.unstable_now=function(){return u.now()}}else{var l=Date,s=l.now();t.unstable_now=function(){return l.now()-s}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var c=null,f=null,d=function(){if(null!==c)try{var e=t.unstable_now();c(!0,e),c=null}catch(e){throw setTimeout(d,0),e}};r=function(e){null!==c?setTimeout(r,0,e):(c=e,setTimeout(d,0))},o=function(e,t){f=setTimeout(e,t)},i=function(){clearTimeout(f)},t.unstable_shouldYield=function(){return!1},a=t.unstable_forceFrameRate=function(){}}else{var p=window.setTimeout,h=window.clearTimeout;if("undefined"!=typeof console){var m=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof m&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var v=!1,y=null,g=-1,b=5,w=0;t.unstable_shouldYield=function(){return t.unstable_now()>=w},a=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):b=0<e?Math.floor(1e3/e):5};var _=new MessageChannel,S=_.port2;_.port1.onmessage=function(){if(null!==y){var e=t.unstable_now();w=e+b;try{y(!0,e)?S.postMessage(null):(v=!1,y=null)}catch(e){throw S.postMessage(null),e}}else v=!1},r=function(e){y=e,v||(v=!0,S.postMessage(null))},o=function(e,n){g=p((function(){e(t.unstable_now())}),n)},i=function(){h(g),g=-1}}function x(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<k(o,t)))break e;e[r]=t,e[n]=o,n=r}}function E(e){return void 0===(e=e[0])?null:e}function O(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var i=2*(r+1)-1,a=e[i],u=i+1,l=e[u];if(void 0!==a&&0>k(a,n))void 0!==l&&0>k(l,a)?(e[r]=l,e[u]=n,r=u):(e[r]=a,e[i]=n,r=i);else{if(!(void 0!==l&&0>k(l,n)))break e;e[r]=l,e[u]=n,r=u}}}return t}return null}function k(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var P=[],I=[],C=1,M=null,T=3,R=!1,L=!1,N=!1;function j(e){for(var t=E(I);null!==t;){if(null===t.callback)O(I);else{if(!(t.startTime<=e))break;O(I),t.sortIndex=t.expirationTime,x(P,t)}t=E(I)}}function A(e){if(N=!1,j(e),!L)if(null!==E(P))L=!0,r(F);else{var t=E(I);null!==t&&o(A,t.startTime-e)}}function F(e,n){L=!1,N&&(N=!1,i()),R=!0;var r=T;try{for(j(n),M=E(P);null!==M&&(!(M.expirationTime>n)||e&&!t.unstable_shouldYield());){var a=M.callback;if("function"==typeof a){M.callback=null,T=M.priorityLevel;var u=a(M.expirationTime<=n);n=t.unstable_now(),"function"==typeof u?M.callback=u:M===E(P)&&O(P),j(n)}else O(P);M=E(P)}if(null!==M)var l=!0;else{var s=E(I);null!==s&&o(A,s.startTime-n),l=!1}return l}finally{M=null,T=r,R=!1}}var D=a;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){L||R||(L=!0,r(F))},t.unstable_getCurrentPriorityLevel=function(){return T},t.unstable_getFirstCallbackNode=function(){return E(P)},t.unstable_next=function(e){switch(T){case 1:case 2:case 3:var t=3;break;default:t=T}var n=T;T=t;try{return e()}finally{T=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=D,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=T;T=e;try{return t()}finally{T=n}},t.unstable_scheduleCallback=function(e,n,a){var u=t.unstable_now();switch("object"==typeof a&&null!==a?a="number"==typeof(a=a.delay)&&0<a?u+a:u:a=u,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:C++,callback:n,priorityLevel:e,startTime:a,expirationTime:l=a+l,sortIndex:-1},a>u?(e.sortIndex=a,x(I,e),null===E(P)&&e===E(I)&&(N?i():N=!0,o(A,a-u))):(e.sortIndex=l,x(P,e),L||R||(L=!0,r(F))),e},t.unstable_wrapCallback=function(e){var t=T;return function(){var n=T;T=t;try{return e.apply(this,arguments)}finally{T=n}}}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){e.exports=n(54)()},function(e,t,n){"use strict";var r=n(55);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,u=r?Symbol.for("react.strict_mode"):60108,l=r?Symbol.for("react.profiler"):60114,s=r?Symbol.for("react.provider"):60109,c=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,d=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,m=r?Symbol.for("react.suspense_list"):60120,v=r?Symbol.for("react.memo"):60115,y=r?Symbol.for("react.lazy"):60116,g=r?Symbol.for("react.block"):60121,b=r?Symbol.for("react.fundamental"):60117,w=r?Symbol.for("react.responder"):60118,_=r?Symbol.for("react.scope"):60119;function S(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case f:case d:case a:case l:case u:case h:return e;default:switch(e=e&&e.$$typeof){case c:case p:case y:case v:case s:return e;default:return t}}case i:return t}}}function x(e){return S(e)===d}t.AsyncMode=f,t.ConcurrentMode=d,t.ContextConsumer=c,t.ContextProvider=s,t.Element=o,t.ForwardRef=p,t.Fragment=a,t.Lazy=y,t.Memo=v,t.Portal=i,t.Profiler=l,t.StrictMode=u,t.Suspense=h,t.isAsyncMode=function(e){return x(e)||S(e)===f},t.isConcurrentMode=x,t.isContextConsumer=function(e){return S(e)===c},t.isContextProvider=function(e){return S(e)===s},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return S(e)===p},t.isFragment=function(e){return S(e)===a},t.isLazy=function(e){return S(e)===y},t.isMemo=function(e){return S(e)===v},t.isPortal=function(e){return S(e)===i},t.isProfiler=function(e){return S(e)===l},t.isStrictMode=function(e){return S(e)===u},t.isSuspense=function(e){return S(e)===h},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===d||e===l||e===u||e===h||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===y||e.$$typeof===v||e.$$typeof===s||e.$$typeof===c||e.$$typeof===p||e.$$typeof===b||e.$$typeof===w||e.$$typeof===_||e.$$typeof===g)},t.typeOf=S},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__rest||function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n};Object.defineProperty(t,"__esModule",{value:!0}),t.applyUniformsReducer=t.applyIndexBufferReducer=t.applyAttributeBuffersReducer=t.mainReducer=void 0;var i=n(58),a=n(28),u=n(29),l=n(25),s=n(31),c=n(60),f=n(61),d=r(r({},l.getExtensionState()),{counter:0});t.mainReducer=function(e,t){var n,i,a,u,l;switch(void 0===e&&(e=d),t.type){case"SET_VERTEX_FILE_PATH":return r(r({},e),{vertexFilePath:t.payload.path});case"SET_FRAGMENT_FILE_PATH":return r(r({},e),{fragmentFilePath:t.payload.path});case"SET_UNIFORM":var s=t.payload,c=s.name,f=o(s,["name"]);return r(r({},e),{uniformValues:r(r({},e.uniformValues),(n={},n[c]=r(r({},e.uniformValues[c]),f),n))});case"SET_ATTRIBUTE_BUFFER_OPTION":var p=t.payload,h=p.name,m=p.optionId,v=(f=o(p,["name","optionId"]),e.attributeBufferValues[h]);return r(r({},e),{attributeBufferValues:r(r({},e.attributeBufferValues),(i={},i[h]=r(r(r({},v),f),{optionId:m}),i))});case"SET_ATTRIBUTE_BUFFER_VALUE":var y=t.payload,g=y.name,b=y.value;f=o(y,["name","value"]),v=e.attributeBufferValues[g];return r(r({},e),{attributeBufferValues:r(r({},e.attributeBufferValues),(a={},a[g]=r(r(r({},v),f),{value:b}),a))});case"SET_INDEX_BUFFER_OPTION":m=t.payload.optionId;return r(r({},e),{indexBufferValue:r(r({},e.indexBufferValue),{optionId:m})});case"SET_INDEX_BUFFER_VALUE":b=t.payload.value;return r(r({},e),{indexBufferValue:r(r({},e.indexBufferValue),{value:b})});case"SET_TEXTURE_OPTION":var w=t.payload,_=w.name;m=w.optionId,v=e.textureValues[_];return r(r({},e),{textureValues:r(r({},e.textureValues),(u={},u[_]=r(r({},v),{optionId:m}),u))});case"SET_TEXTURE_VALUE":var S=t.payload,x=S.name;b=S.value,v=e.textureValues[x];return r(r({},e),{textureValues:r(r({},e.textureValues),(l={},l[x]=r(r({},v),{value:b}),l))});case"SET_VIWER_SIZE":return r(r({},e),{viewerSize:t.payload.size});case"SET_CAMERA_POSITION":return r(r({},e),{cameraPosition:t.payload.position});case"SET_MESH":return r(r({},e),{meshId:t.payload.id});case"SET_DRAW_MODE":return r(r({},e),{drawMode:t.payload.mode});default:return e}};t.applyAttributeBuffersReducer=function(e){return r(r({},e),{attributeBufferValues:c.objectMap(e.attributeBufferValues,(function(t){var n=s.attributeBufferBindings.get(t.optionId);return r(r({},t),n?{value:n.getValue(e.meshId),error:""}:{error:f.validateAttributeBuffer(t.value,t.type)})}))})};t.applyIndexBufferReducer=function(e){var t=e.indexBufferValue,n=a.indexBufferBindings.get(t.optionId);return r(r({},e),{indexBufferValue:r(r({},e.indexBufferValue),n?{value:n.getValue(e.meshId),error:""}:{error:i.validateIndexBuffer(e.indexBufferValue.value)})})};t.applyUniformsReducer=function(e){return r(r({},e),{uniformValues:c.objectMap(e.uniformValues,(function(t){var n,o;return r(r({},t),{value:null!==(o=null===(n=u.uniformBindings.get(t.optionId))||void 0===n?void 0:n.getValue(e.cameraPosition,e.viewerSize))&&void 0!==o?o:t.value})}))})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.validateIndexBuffer=void 0;var r=n(27);t.validateIndexBuffer=function(e){return r.validateArrayElements(e,1)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.mat4=t.isPowerOf2=void 0;t.isPowerOf2=function(e){return 0==(e&e-1)},function(e){e.create=function(){var e=new Float32Array(16);return e[0]=1,e[5]=1,e[10]=1,e[15]=1,e},e.perspective=function(e,t,n,r,o){var i,a=1/Math.tan(t/2);return e[0]=a/n,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=a,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,null!=o&&o!==1/0?(i=1/(r-o),e[10]=(o+r)*i,e[14]=2*o*r*i):(e[10]=-1,e[14]=-2*r),e},e.lookAt=function(e,t,n,r){var o,i,a,u,l,s,c,f,d,p,h=t[0],m=t[1],v=t[2],y=r[0],g=r[1],b=r[2],w=n[0],_=n[1],S=n[2];return Math.abs(h-w)<1e-6&&Math.abs(m-_)<1e-6&&Math.abs(v-S)<1e-6?function(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}(e):(c=h-w,f=m-_,d=v-S,o=g*(d*=p=1/Math.hypot(c,f,d))-b*(f*=p),i=b*(c*=p)-y*d,a=y*f-g*c,(p=Math.hypot(o,i,a))?(o*=p=1/p,i*=p,a*=p):(o=0,i=0,a=0),u=f*a-d*i,l=d*o-c*a,s=c*i-f*o,(p=Math.hypot(u,l,s))?(u*=p=1/p,l*=p,s*=p):(u=0,l=0,s=0),e[0]=o,e[1]=u,e[2]=c,e[3]=0,e[4]=i,e[5]=l,e[6]=f,e[7]=0,e[8]=a,e[9]=s,e[10]=d,e[11]=0,e[12]=-(o*h+i*m+a*v),e[13]=-(u*h+l*m+s*v),e[14]=-(c*h+f*m+d*v),e[15]=1,e)},e.multiply=function(e,t,n){var r=t[0],o=t[1],i=t[2],a=t[3],u=t[4],l=t[5],s=t[6],c=t[7],f=t[8],d=t[9],p=t[10],h=t[11],m=t[12],v=t[13],y=t[14],g=t[15],b=n[0],w=n[1],_=n[2],S=n[3];return e[0]=b*r+w*u+_*f+S*m,e[1]=b*o+w*l+_*d+S*v,e[2]=b*i+w*s+_*p+S*y,e[3]=b*a+w*c+_*h+S*g,b=n[4],w=n[5],_=n[6],S=n[7],e[4]=b*r+w*u+_*f+S*m,e[5]=b*o+w*l+_*d+S*v,e[6]=b*i+w*s+_*p+S*y,e[7]=b*a+w*c+_*h+S*g,b=n[8],w=n[9],_=n[10],S=n[11],e[8]=b*r+w*u+_*f+S*m,e[9]=b*o+w*l+_*d+S*v,e[10]=b*i+w*s+_*p+S*y,e[11]=b*a+w*c+_*h+S*g,b=n[12],w=n[13],_=n[14],S=n[15],e[12]=b*r+w*u+_*f+S*m,e[13]=b*o+w*l+_*d+S*v,e[14]=b*i+w*s+_*p+S*y,e[15]=b*a+w*c+_*h+S*g,e}}(t.mat4||(t.mat4={}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.objectMap=void 0;t.objectMap=function(e,t){return Object.keys(e).reduce((function(n,r){return n[r]=t(e[r],r),n}),{})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.validateAttributeBuffer=void 0;var r=n(7),o=n(17),i=n(27);t.validateAttributeBuffer=function(e,t){var n=i.validateArrayElements(e,function(e){switch(e){case o.AttributeBufferType.FLOAT_VEC2:return 2;case o.AttributeBufferType.FLOAT_VEC3:return 3;case o.AttributeBufferType.FLOAT_VEC4:return 4;default:r.assertNever(e)}}(t));return console.log("validation",n),n}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Viewer=void 0;var i=o(n(0)),a=n(2),u=n(18),l=n(64),s=n(65),c=n(32),f=n(66),d=n(85),p=n(87),h=n(90),m=n(98),v=n(99),y=n(100),g=n(101),b=n(41),w=n(14),_=n(42),S=n(43);t.Viewer=a.connect((function(e){return{selectedVertexFileId:e.vertexFilePath,selectedFragmentFileId:e.fragmentFilePath,cameraPosition:e.cameraPosition}}),(function(e){return{setCameraPosition:function(t){return e({type:"SET_CAMERA_POSITION",payload:{position:t}})},setViewerSize:function(t){return e({type:"SET_VIWER_SIZE",payload:{size:t}})}}}))((function(e){var t=e.selectedVertexFileId,n=e.selectedFragmentFileId,o=e.cameraPosition,a=e.setCameraPosition,x=e.setViewerSize,E=i.default.useState(""),O=E[0],k=E[1],P=i.default.useState(""),I=P[0],C=P[1],M=i.default.useState(""),T=M[0],R=M[1],L=i.default.useState([]),N=L[0],j=L[1],A=i.default.useState([]),F=A[0],D=A[1],z=i.default.useState([]),B=z[0],U=z[1],V=i.default.useRef(null),W=i.default.useRef(null),H=i.default.useRef(null),$=i.default.useRef(null);return i.default.useEffect((function(){if(console.log("running hook"),H.current=W.current.getContext("webgl"),!H.current)throw new Error("Unable to create webgl context");l.observeElementBoundingRect(V.current,(function(e){W.current.width=e.width,W.current.height=e.height,x(r({},e))})),u.viewerEndpoint.showWebViewDevTools()}),[x]),i.default.useEffect((function(){if(I&&T){var e=s.compileShadersFromSource(H.current,I,T);if(!Array.isArray(e)){k("");var t=e,n=s.getProgramUniforms(H.current,t),r=s.getProgramAttributeBuffers(H.current,t);D(n.dataUniforms),U(n.textureUniforms),j(r);var o=c.getOrCreateAttributeBufferInfos(H.current,t,r),i=b.createUniformInfos(H.current,t,n.dataUniforms),a=_.getOrCreateIndexBufferInfo(H.current);S.setWebGLFromState();var u=function(){var e=w.store.getState().drawMode;s.renderProgram(H.current,t,{uniformInfos:i,textureInfos:[],attributeBufferInfos:o,indexBufferInfo:a},{drawMode:e}),$.current=requestAnimationFrame(u)};return u(),function(){cancelAnimationFrame($.current),H.current.deleteProgram(e)}}k(s.formatShaderCompileErrors(e))}}),[I,T]),v.usePerspectiveCamera(V.current,o,a),y.useDocumentWatcher(t,C),y.useDocumentWatcher(n,R),i.default.createElement("div",{className:"viewer-grid"},i.default.createElement("div",{className:"viewer-options"},i.default.createElement(d.ShadersSelectorSection,null),i.default.createElement(f.DrawOptionsSection,null),F.length>0&&i.default.createElement(h.UniformSection,{uniformFields:F}),N.length>0&&i.default.createElement(g.AttributeBuffersSection,{attributeBufferFields:N}),B.length>0&&i.default.createElement(p.TextureSection,{textureFields:B})),i.default.createElement("div",{ref:V,className:"viewer-content"},O&&i.default.createElement(m.ShadersCompileResultArea,{errors:O}),i.default.createElement("canvas",{className:"viewer-canvas",ref:W})))}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.uuidv4=void 0;t.uuidv4=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){var t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.observeElementBoundingRect=void 0;t.observeElementBoundingRect=function(e,t){var n=new ResizeObserver((function(n){var r=n.find((function(t){return t.target===e}));if(r){var o=r.target.getBoundingClientRect();t({x:o.x,y:o.y,width:o.width,height:o.height})}}));return n.observe(e),function(){return n.disconnect()}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.formatShaderCompileErrors=t.renderProgram=t.getProgramAttributeBuffers=t.getProgramUniforms=t.createProgram=t.compileShadersFromSource=t.compileShader=void 0;var r=n(8),o=n(7);t.compileShader=function(e,t,n){var r=e.createShader(t);if(e.shaderSource(r,n),e.compileShader(r),e.getShaderParameter(r,e.COMPILE_STATUS))return r;var o=e.getShaderInfoLog(r);return e.deleteShader(r),{error:o}};t.compileShadersFromSource=function(e,n,i){var a=t.compileShader(e,e.VERTEX_SHADER,n),u=t.compileShader(e,e.FRAGMENT_SHADER,i),l=void 0;o.hasProperty(a,"error")&&(l=r.removeLast(a.error,1));var s=void 0;return o.hasProperty(u,"error")&&(s=r.removeLast(u.error,1)),l||s?[l,s]:t.createProgram(e,a,u)};t.createProgram=function(e,t,n){var r=e.createProgram();if(e.attachShader(r,t),e.attachShader(r,n),e.linkProgram(r),e.getProgramParameter(r,e.LINK_STATUS))return r;var o=e.getProgramInfoLog(r);throw e.deleteProgram(r),new Error("Creating program failed: "+o)};t.getProgramUniforms=function(e,t){for(var n=e.getProgramParameter(t,e.ACTIVE_UNIFORMS),r=[],o=[],i=0;i<n;++i){var a=e.getActiveUniform(t,i);35678===a.type?o.push({name:a.name,unit:o.length}):r.push({name:a.name,type:a.type})}return{dataUniforms:r,textureUniforms:o}};t.getProgramAttributeBuffers=function(e,t){for(var n=e.getProgramParameter(t,e.ACTIVE_ATTRIBUTES),r=[],o=0;o<n;++o){var i=e.getActiveAttrib(t,o);r.push({name:i.name,type:i.type})}return r};t.renderProgram=function(e,t,n,r){e.useProgram(t),e.viewport(0,0,e.canvas.width,e.canvas.height),e.clearColor(0,0,0,1),e.clearDepth(1),e.enable(e.DEPTH_TEST),e.depthFunc(e.LEQUAL),e.clear(e.COLOR_BUFFER_BIT|e.DEPTH_BUFFER_BIT),n.uniformInfos.forEach((function(e){return e.prepareForRender()})),n.textureInfos.forEach((function(e){return e.prepareForRender()})),n.attributeBufferInfos.forEach((function(e){return e.setAttributeBuffer()}));var o=e.TRIANGLES;if("arrays"===r.drawMode){var i=Math.min.apply(Math,n.attributeBufferInfos.map((function(e){return e.getCount()})));e.drawArrays(o,0,i)}else n.indexBufferInfo.setIndexBuffer(),e.drawElements(o,n.indexBufferInfo.getCount(),e.UNSIGNED_SHORT,0)};t.formatShaderCompileErrors=function(e){var t=e[0],n=e[1],r=[];return t&&r.push("VERTEX SHADER:",t),n&&r.push("FRAGMENT SHADER:",n),r.join("\r\n")}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.DrawOptionsSection=void 0;var o=r(n(0)),i=n(2),a=n(16),u=n(9),l=n(5),s=n(84),c=n(6),f=n(10),d=[{id:"arrays",display:"Arrays"},{id:"elements",display:"Elements"}],p=Array.from(a.meshes.entries()).map((function(e){return{id:e[0],display:e[1].display}}));t.DrawOptionsSection=o.default.memo(i.connect((function(e){return{drawMode:e.drawMode,meshId:e.meshId}}),(function(e){return{setDrawMode:function(t){return e({type:"SET_DRAW_MODE",payload:{mode:t}})},setMeshId:function(t){return e({type:"SET_MESH",payload:{id:t}})}}}))((function(e){var t=e.drawMode,n=e.meshId,r=e.setDrawMode,i=e.setMeshId;return o.default.createElement("div",{className:"viewer-options-section"},o.default.createElement(f.SectionTitle,{text:u.translations.drawOptions}),o.default.createElement(c.SectionField,{text:"Mesh"},o.default.createElement(l.Dropdown,{selectedItemId:n,onChange:i,options:p})),o.default.createElement(c.SectionField,{text:"Draw mode"},o.default.createElement(l.Dropdown,{selectedItemId:t,onChange:r,options:d})),"elements"===t&&o.default.createElement(s.IndexBufferField,null))})))},function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||t.hasOwnProperty(n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),o(n(68),t),o(n(12),t),o(n(80),t)},function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||t.hasOwnProperty(n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),o(n(69),t),o(n(78),t)},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.VirtualizedList=void 0;var o=r(n(0)),i=n(45),a=n(12),u=o.default.memo((function(e){var t=e.index,n=e.style,r=e.data.itemRenderer;return o.default.createElement("div",{style:n},r(t))}));t.VirtualizedList=function(e){var t=e.itemCount,n=e.itemHeight,r=e.maxHeight,l=e.itemRenderer,s=e.width,c=void 0===s?"100%":s,f=e.className,d=Math.min(t*n,r),p=o.default.useMemo((function(){return{itemRenderer:l}}),[l]),h=o.default.useRef(null);return a.useScrollListToIndex(h,e.highlightedIndex),o.default.createElement(i.FixedSizeList,{className:f,ref:h,height:d,itemCount:t,itemSize:n,width:c,itemData:p},u)}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useDropdownState=void 0;var o=r(n(0)),i=n(35),a=n(19),u=n(34),l={selectedIndexes:[],highlightedIndex:null,isOpen:!1},s=function(e,t,n){return i.reducer(e,t,n)};t.useDropdownState=function(e,t,n,r,i){void 0===i&&(i=s);var c=o.default.useCallback((function(t,n){return i(t,e,n)}),[e,i]),f=n?a.overrideDefinedPropsOnly(l,n):l;return u.useUnionState(f,t,c,r)}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useScrollListToIndex=void 0;var o=r(n(0)),i=n(36);t.useScrollListToIndex=function(e,t){o.default.useEffect((function(){if(null!==t&&e.current){var n=e.current;(i.hasProperty(n,"_listRef")?n._listRef:n).scrollToItem(t,"smart")}}),[t])}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useDropdownCloseWhenClickedOutside=void 0;var o=r(n(0)),i=n(12);t.useDropdownCloseWhenClickedOutside=function(e,t){var n=o.default.useCallback((function(){return t(["CloseList"])}),[t]);i.useClickedOutsideHandler(e,n)}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useDropdownCloseWhenFocusOut=void 0;var o=r(n(0)),i=n(37);t.useDropdownCloseWhenFocusOut=function(e,t){var n=o.default.useCallback((function(){return t(["CloseList"])}),[t]);i.useFocusOutHandler(e,n)}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useFocusOnStateChange=void 0;var o=r(n(0)),i=n(38);t.useFocusOnStateChange=function(e,t,n){var r=o.default.useRef(!0),a=i.usePreviousValue(t);o.default.useEffect((function(){t===a||t!==n||r.current||null!==e.current&&e.current.focus(),r.current=!1}),[t])}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useClickedOutsideHandler=void 0;var o=r(n(0));t.useClickedOutsideHandler=function(e,t){o.default.useEffect((function(){function n(n){var r;(null===(r=e.current)||void 0===r?void 0:r.contains(n.target))||t()}return document.addEventListener("mousedown",n),function(){document.removeEventListener("mousedown",n)}}),[t])}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useChunkLoader=void 0;var o=r(n(0));t.useChunkLoader=function(e,t){var n=o.default.useMemo((function(){return Array(e).fill({value:null,isLoaded:!1})}),[e]),r=o.default.useCallback((function(e){return n[e].isLoaded}),[n]),i=o.default.useCallback((function(e,r){return t(e,r).then((function(t){for(var o=e,i=0;o<=r;o++,i++)n[o]={value:t[i],isLoaded:!0}}))}),[n]);return{items:n,isItemLoaded:r,loadMoreItems:i}}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useDropdownListKeyboardNavigator=void 0;var o=r(n(0)),i=n(39);t.useDropdownListKeyboardNavigator=function(e){return o.default.useMemo((function(){return i.createListKeyboardNavigator(e)}),[e])}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.VirtualizedLazyLoadingList=void 0;var o=r(n(0)),i=n(45),a=n(12),u=r(n(79)),l=o.default.memo((function(e){var t=e.index,n=e.style,r=e.data,i=r.itemRenderer,a=r.isItemLoaded;return o.default.createElement("div",{style:n},i(t,a(t)))}));t.VirtualizedLazyLoadingList=function(e){var t=e.itemCount,n=e.itemHeight,r=e.maxHeight,s=e.itemRenderer,c=e.width,f=void 0===c?"100%":c,d=e.isItemLoaded,p=e.loadMoreItems,h=e.highlightedIndex,m=e.className,v=Math.min(t*n,r),y=o.default.useMemo((function(){return{itemRenderer:s,isItemLoaded:d}}),[s,d]),g=o.default.useRef(null);return a.useScrollListToIndex(g,h),o.default.createElement(u.default,{ref:g,isItemLoaded:d,itemCount:t,loadMoreItems:p},(function(e){var r=e.onItemsRendered,a=e.ref;return o.default.createElement(i.FixedSizeList,{className:m,ref:a,height:v,itemCount:t,itemSize:n,onItemsRendered:r,width:f,itemData:y},l)}))}},function(e,t,n){"use strict";n.r(t);var r=n(0);var o=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t},u=function(e){function t(){var e,n,r;o(this,t);for(var i=arguments.length,u=Array(i),l=0;l<i;l++)u[l]=arguments[l];return n=r=a(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(u))),r._lastRenderedStartIndex=-1,r._lastRenderedStopIndex=-1,r._memoizedUnloadedRanges=[],r._onItemsRendered=function(e){var t=e.visibleStartIndex,n=e.visibleStopIndex;r._lastRenderedStartIndex=t,r._lastRenderedStopIndex=n,r._ensureRowsLoaded(t,n)},r._setRef=function(e){r._listRef=e},a(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),i(t,[{key:"resetloadMoreItemsCache",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];this._memoizedUnloadedRanges=[],e&&this._ensureRowsLoaded(this._lastRenderedStartIndex,this._lastRenderedStopIndex)}},{key:"componentDidMount",value:function(){0}},{key:"render",value:function(){return(0,this.props.children)({onItemsRendered:this._onItemsRendered,ref:this._setRef})}},{key:"_ensureRowsLoaded",value:function(e,t){var n=this.props,r=n.isItemLoaded,o=n.itemCount,i=n.minimumBatchSize,a=void 0===i?10:i,u=n.threshold,l=void 0===u?15:u,s=function(e){for(var t=e.isItemLoaded,n=e.itemCount,r=e.minimumBatchSize,o=e.startIndex,i=e.stopIndex,a=[],u=null,l=null,s=o;s<=i;s++){t(s)?null!==l&&(a.push(u,l),u=l=null):(l=s,null===u&&(u=s))}if(null!==l){for(var c=Math.min(Math.max(l,u+r-1),n-1),f=l+1;f<=c&&!t(f);f++)l=f;a.push(u,l)}if(a.length)for(;a[1]-a[0]+1<r&&a[0]>0;){var d=a[0]-1;if(t(d))break;a[0]=d}return a}({isItemLoaded:r,itemCount:o,minimumBatchSize:a,startIndex:Math.max(0,e-l),stopIndex:Math.min(o-1,t+l)});(this._memoizedUnloadedRanges.length!==s.length||this._memoizedUnloadedRanges.some((function(e,t){return s[t]!==e})))&&(this._memoizedUnloadedRanges=s,this._loadUnloadedRanges(s))}},{key:"_loadUnloadedRanges",value:function(e){for(var t=this,n=this.props.loadMoreItems||this.props.loadMoreRows,r=function(r){var o=e[r],i=e[r+1],a=n(o,i);null!=a&&a.then((function(){if(function(e){var t=e.lastRenderedStartIndex,n=e.lastRenderedStopIndex,r=e.startIndex,o=e.stopIndex;return!(r>n||o<t)}({lastRenderedStartIndex:t._lastRenderedStartIndex,lastRenderedStopIndex:t._lastRenderedStopIndex,startIndex:o,stopIndex:i})){if(null==t._listRef)return;"function"==typeof t._listRef.resetAfterIndex?t._listRef.resetAfterIndex(o,!0):("function"==typeof t._listRef._getItemStyleCache&&t._listRef._getItemStyleCache(-1),t._listRef.forceUpdate())}}))},o=0;o<e.length;o+=2)r(o)}}]),t}(r.PureComponent);t.default=u},function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||t.hasOwnProperty(n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),o(n(81),t),o(n(82),t),o(n(39),t),o(n(35),t),o(n(83),t)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],a=0,u=i.length;a<u;a++,o++)r[o]=i[a];return r},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.IndexBufferField=void 0;var a=i(n(0)),u=n(2),l=n(40),s=n(4),c=n(5),f=n(6),d=n(28),p=o([s.customOption],d.getBindingOptions());t.IndexBufferField=a.default.memo(u.connect((function(e){return r({},e.indexBufferValue)}),(function(e){return{setOption:function(t){return e({type:"SET_INDEX_BUFFER_OPTION",payload:{optionId:t}})},setValue:function(t){return e({type:"SET_INDEX_BUFFER_VALUE",payload:{value:t}})}}}))((function(e){var t=e.optionId,n=e.value,r=e.error,o=e.setOption,i=e.setValue,u=t===s.customOption.id;return a.default.createElement(f.SectionField,{text:"Indices"},a.default.createElement(c.Dropdown,{selectedItemId:t,onChange:o,options:p}),a.default.createElement(l.TextInput,{value:n,onChange:i,error:r,readonly:!u}))})))},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ShadersSelectorSection=void 0;var o=r(n(0)),i=n(2),a=n(18),u=n(86),l=n(9),s=n(5),c=n(6),f=n(10);t.ShadersSelectorSection=o.default.memo(i.connect((function(e){return{selectedVertexFileId:e.vertexFilePath,selectedFragmentFileId:e.fragmentFilePath}}),(function(e){return{setSelectedVertexFileId:function(t){return e({type:"SET_VERTEX_FILE_PATH",payload:{path:t}})},setSelectedFragmentFileId:function(t){return e({type:"SET_FRAGMENT_FILE_PATH",payload:{path:t}})}}}))((function(e){var t=e.selectedVertexFileId,n=e.selectedFragmentFileId,r=e.setSelectedVertexFileId,i=e.setSelectedFragmentFileId,d=o.default.useState([]),p=d[0],h=d[1],m=o.default.useCallback((function(){a.viewerEndpoint.getWorkspaceFilesOfTypes(u.shaderExtensions).then((function(e){h(e.map((function(e){return{id:e.filePath,display:e.fileName}})))}))}),[]);return o.default.useEffect((function(){return m()}),[]),o.default.createElement("div",{className:"viewer-options-section"},o.default.createElement(f.SectionTitle,{text:l.translations.shaders},o.default.createElement("button",{onClick:m},"Sync")),o.default.createElement(c.SectionField,{text:l.translations.vertexShader},o.default.createElement(s.Dropdown,{selectedItemId:t,onChange:r,options:p})),o.default.createElement(c.SectionField,{text:l.translations.fragmentShader},o.default.createElement(s.Dropdown,{selectedItemId:n,onChange:i,options:p})))})))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.defaultTextureUrl=t.customOptionId=t.extensionTextures=t.imageExtensions=t.shaderExtensions=void 0,t.shaderExtensions=["glsl"],t.imageExtensions=["jpg","bmp"],t.extensionTextures=["texture1.jpg","texture2.jpg"],t.customOptionId="custom",t.defaultTextureUrl="https://raw.githubusercontent.com/mateuszmigas/webgl-shader-viewer/main/docs/images/screenshot1.jpg"},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.TextureSection=void 0;var i=o(n(0)),a=n(2),u=n(9),l=n(6),s=n(10),c=n(88);t.TextureSection=i.default.memo(a.connect((function(e){return{values:e.textureValues}}))((function(e){var t=e.textureFields;return i.default.createElement("div",{className:"viewer-options-section"},i.default.createElement(s.SectionTitle,{text:u.translations.textures}),t.map((function(e){return i.default.createElement(l.SectionField,{text:e.name},i.default.createElement(c.TextureField,r({},e)))})))})))},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],a=0,u=i.length;a<u;a++,o++)r[o]=i[a];return r},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.TextureField=void 0;var a=i(n(0)),u=n(2),l=n(4),s=n(40),c=n(5),f=n(89),d=n(106);t.TextureField=a.default.memo(u.connect((function(e,t){var n=e.textureValues[t.name];return null!=n?n:d.getDefaultProps()}),(function(e,t){return{setOption:function(n){return e({type:"SET_TEXTURE_OPTION",payload:r(r({},t),{optionId:n})})},setValue:function(n){return e({type:"SET_TEXTURE_VALUE",payload:r(r({},t),{value:n})})}}}))((function(e){var t=e.optionId,n=e.value,r=e.setOption,i=e.setValue,u=a.default.useMemo((function(){return o([{id:l.customOption.id,display:"Custom URL"}],f.getBindingOptions())}),[]),d=t===l.customOption.id;return a.default.createElement("div",null,u.length>1&&a.default.createElement(c.Dropdown,{selectedItemId:t,onChange:r,options:u}),d&&a.default.createElement(s.TextInput,{value:n,onChange:i}))})))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getBindingOptions=t.textureBindings=void 0,t.textureBindings=new Map([["texture1",{display:"Binding - Texture 1",value:"url1"}],["texture2",{display:"Binding - Texture 2",value:"url2"}]]);t.getBindingOptions=function(){return Array.from(t.textureBindings.entries()).map((function(e){return{id:e[0],display:e[1].display}}))}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.UniformSection=void 0;var i=o(n(0)),a=n(2),u=n(9),l=n(6),s=n(10),c=n(91);t.UniformSection=i.default.memo(a.connect((function(e){return{values:e.uniformValues}}))((function(e){var t=e.uniformFields;return i.default.createElement("div",{className:"viewer-options-section"},i.default.createElement(s.SectionTitle,{text:u.translations.uniforms}),t.map((function(e){return i.default.createElement(l.SectionField,{text:e.name},i.default.createElement(c.UniformField,r({},e)))})))})))},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],a=0,u=i.length;a<u;a++,o++)r[o]=i[a];return r},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.UniformField=void 0;var a=i(n(0)),u=n(2),l=n(11),s=n(92),c=n(4),f=n(5),d=n(29),p=n(97);t.UniformField=a.default.memo(u.connect((function(e,t){var n=e.uniformValues[t.name];return(null==n?void 0:n.type)===t.type?n:p.getDefaultProps(t.type)}),(function(e,t){return{setOptionAndValue:function(n,o){e({type:"SET_UNIFORM",payload:r(r({},t),{optionId:n,value:o})})}}}))((function(e){var t=e.type,n=e.optionId,i=e.value,u=e.setOptionAndValue,p=a.default.useMemo((function(){return o([c.customOption],d.getBindingOptions(t))}),[t]),h=n===c.customOption.id;return a.default.createElement("div",null,p.length>1&&a.default.createElement(f.Dropdown,{selectedItemId:n,onChange:function(e){return u(e,i)},options:p}),function(e,t){switch(e){case l.UniformType.FLOAT_VEC2:return a.default.createElement(s.Vector2NumberInput,r({},t));case l.UniformType.FLOAT_VEC3:return a.default.createElement(s.Vector3NumberInput,r({},t));case l.UniformType.FLOAT_VEC4:return a.default.createElement(s.Vector4NumberInput,r({},t));case l.UniformType.FLOAT_MAT4:return a.default.createElement(s.Matrix4x4NumberInput,r({},t));default:return a.default.createElement("div",null,"Uniform not supported")}}(t,{value:i,onChange:h?function(e){return u(n,e)}:void 0,readonly:!h}))})))},function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),o(n(93),t),o(n(94),t),o(n(95),t),o(n(96),t)},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Matrix4x4NumberInput=void 0;var i=o(n(0)),a=n(8),u=n(13),l=a.repeat(16,0);t.Matrix4x4NumberInput=function(e){var t;return i.default.createElement(u.MultiNumberInput,r({},e,{rows:4,columns:4,value:null!==(t=e.value)&&void 0!==t?t:l}))}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Vector2NumberInput=void 0;var i=o(n(0)),a=n(13),u=[0,0];t.Vector2NumberInput=function(e){var t;return i.default.createElement(a.MultiNumberInput,r({},e,{rows:1,columns:2,value:null!==(t=e.value)&&void 0!==t?t:u}))}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Vector3NumberInput=void 0;var i=o(n(0)),a=n(13),u=[0,0,0];t.Vector3NumberInput=function(e){var t;return i.default.createElement(a.MultiNumberInput,r({},e,{rows:1,columns:3,value:null!==(t=e.value)&&void 0!==t?t:u}))}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Vector4NumberInput=void 0;var i=o(n(0)),a=n(13),u=[0,0,0,0];t.Vector4NumberInput=function(e){var t;return i.default.createElement(a.MultiNumberInput,r({},e,{rows:1,columns:4,value:null!==(t=e.value)&&void 0!==t?t:u}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getDefaultProps=void 0;var r=n(8),o=n(7),i=n(11),a=n(4),u=function(e){switch(e){case i.UniformType.FLOAT_VEC2:return r.repeat(2,1);case i.UniformType.FLOAT_VEC3:return r.repeat(3,1);case i.UniformType.FLOAT_VEC4:return r.repeat(4,1);case i.UniformType.FLOAT_MAT4:return[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];default:o.assertNever(e)}};t.getDefaultProps=function(e){return{optionId:a.customOption.id,value:u(e)}}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ShadersCompileResultArea=void 0;var o=r(n(0));t.ShadersCompileResultArea=function(e){return o.default.createElement("div",{className:"shader-compile-errors-area"},e.errors)}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.usePerspectiveCamera=void 0;var i=o(n(0)),a=n(30);t.usePerspectiveCamera=function(e,t,n){i.default.useEffect((function(){if(e){var o=r({},t),i=new a.CameraPositionManipulator(e,(function(){return o}),(function(e){o=e,n(e)}));return function(){return i.dispose()}}}),[e])}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useDocumentWatcher=void 0;var o=r(n(0)),i=n(18);t.useDocumentWatcher=function(e,t){o.default.useEffect((function(){var n=i.viewerEndpoint.subscribeToDocumentSave(e,t);return i.viewerEndpoint.getDocumentText(e).then(t),function(){return n()}}),[e])}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.AttributeBuffersSection=void 0;var i=o(n(0)),a=n(2),u=n(9),l=n(6),s=n(10),c=n(102);t.AttributeBuffersSection=i.default.memo(a.connect((function(e){return{values:e.attributeBufferValues}}))((function(e){var t=e.attributeBufferFields;return i.default.createElement("div",{className:"viewer-options-section"},i.default.createElement(s.SectionTitle,{text:u.translations.attributeBuffers}),t.map((function(e){return i.default.createElement(l.SectionField,{key:e.name,text:e.name},i.default.createElement(c.AttributeBufferField,r({key:e.name},e)))})))})))},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],a=0,u=i.length;a<u;a++,o++)r[o]=i[a];return r},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.AttributeBufferField=void 0;var a=i(n(0)),u=n(2),l=n(40),s=n(4),c=n(5),f=n(31),d=n(103);t.AttributeBufferField=a.default.memo(u.connect((function(e,t){var n=e.attributeBufferValues[t.name];return(null==n?void 0:n.type)===t.type?n:d.getDefaultProps()}),(function(e,t){return{setOption:function(n){return e({type:"SET_ATTRIBUTE_BUFFER_OPTION",payload:r(r({},t),{optionId:n})})},setValue:function(n){return e({type:"SET_ATTRIBUTE_BUFFER_VALUE",payload:r(r({},t),{value:n})})}}}))((function(e){console.log("props",e);var t=e.type,n=e.value,r=e.optionId,i=e.error,u=e.setOption,d=e.setValue,p=o([s.customOption],f.getBindingOptions(t)),h=r===s.customOption.id;return a.default.createElement("div",null,p.length>1&&a.default.createElement(c.Dropdown,{selectedItemId:r,onChange:u,options:p}),a.default.createElement(l.TextInput,{value:n,onChange:d,error:i,readonly:!h}))})))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getDefaultProps=void 0;var r=n(4);t.getDefaultProps=function(){return{optionId:r.customOption.id,value:"[]",error:""}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.IndexBufferInfo=void 0;var r=function(){function e(e){this.context=e,this.count=0,this.buffer=e.createBuffer()}return e.prototype.setValue=function(e){this.count=e.length,this.context.bindBuffer(this.context.ELEMENT_ARRAY_BUFFER,this.buffer),this.context.bufferData(this.context.ELEMENT_ARRAY_BUFFER,new Uint16Array(e),this.context.STATIC_DRAW)},e.prototype.setIndexBuffer=function(){this.context.bindBuffer(this.context.ELEMENT_ARRAY_BUFFER,this.buffer)},e.prototype.getCount=function(){return this.count},e.prototype.deleteBuffer=function(){this.context.deleteBuffer(this.buffer),this.buffer=null},e}();t.IndexBufferInfo=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.safeJSONParse=void 0;t.safeJSONParse=function(e){try{return JSON.parse(e)}catch(e){return null}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getDefaultProps=void 0;var r=n(4);t.getDefaultProps=function(){return{optionId:r.customOption.id,value:""}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,