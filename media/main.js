!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([,function(e,t,n){"use strict";n.r(t);var r,o=function(){return(o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},i=function(e){return Math.min(Math.max(e,1),10)},u=function(){function e(e,t,n){var r=this;this.element=e,this.positionProvider=t,this.onPositionChange=n,this.pointerPosition={x:0,y:0},this.eventListeners=new Map,this.isMoving=!1,this.dispatchAction=function(e){var t=function(e,t){switch(t.type){case"orbitRotate":return o(o({},e),{latitude:(r=e.latitude+t.deltaLatitude,u=Math.PI/2-.1,Math.min(Math.max(r,0),u)),longitude:(n=e.longitude+t.deltaLongitude,n>Math.PI?n-2*Math.PI:n<-Math.PI?n+2*Math.PI:n)});case"zoomInAt":return o(o({},e),{radius:i(e.radius-.1)});case"zoomOutAt":return o(o({},e),{radius:i(e.radius+.1)});default:return e}var n,r,u}(r.positionProvider(),e);r.onPositionChange(t)},this.onMouseDown=function(e){0===e.button&&(r.pointerPosition={x:e.offsetX,y:e.offsetY},r.isMoving=!0)},this.onMouseMove=function(e){if(r.isMoving){r.dispatchAction({type:"orbitRotate",deltaLongitude:.01*-(e.offsetX-r.pointerPosition.x),deltaLatitude:.01*(e.offsetY-r.pointerPosition.y)})}r.pointerPosition={x:e.offsetX,y:e.offsetY}},this.onMouseUp=function(){r.isMoving=!1},this.onMouseLeave=function(){r.isMoving=!1},this.onWheel=function(e){var t=e.deltaY<0?"zoomInAt":"zoomOutAt";r.dispatchAction({type:t})},this.registerEvent("mousedown",this.onMouseDown),this.registerEvent("mousemove",this.onMouseMove),this.registerEvent("mouseup",this.onMouseUp),this.registerEvent("mouseleave",this.onMouseLeave),this.registerEvent("wheel",this.onWheel)}return e.prototype.dispose=function(){var e=this;this.eventListeners.forEach((function(t,n){return e.element.removeEventListener(n,t)}))},e.prototype.registerEvent=function(e,t){this.element.addEventListener(e,t),this.eventListeners.set(e,t)},e}(),a=acquireVsCodeApi(),s={vertexFilePath:null,fragmentFilePath:null,drawMode:"elements"},c=function(){var e;return null!==(e=a.getState())&&void 0!==e?e:s},f=function(e){return a.setState(Object.assign(c(),e))},l=function(){function e(e){this.context=e,this.count=0,this.buffer=e.createBuffer()}return e.prototype.setValue=function(e){this.count=e.length,this.context.bindBuffer(this.context.ELEMENT_ARRAY_BUFFER,this.buffer),this.context.bufferData(this.context.ELEMENT_ARRAY_BUFFER,new Uint16Array(e),this.context.STATIC_DRAW)},e.prototype.setIndexBuffer=function(){this.context.bindBuffer(this.context.ELEMENT_ARRAY_BUFFER,this.buffer)},e.prototype.getCount=function(){return this.count},e.prototype.deleteBuffer=function(){this.context.deleteBuffer(this.buffer),this.buffer=null},e}(),p="SHADERS",h=function(){return(h=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},d=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],u=0,a=i.length;u<a;u++,o++)r[o]=i[u];return r},m={emptyItem:!0},v=function(e,t,n){var r=h(h({},m),n),o=document.createElement("select");o.className="dropdown-base "+t;var i=null,u=[],a=function(t){e(i=t)};o.onchange=function(){var e=u.find((function(e){return e.item.id===o.value}));e.item.id?a(e.item):a(null)};var s=function(e){u.forEach((function(t){t.item.id===e?(t.element.selected=!0,a(t.item)):t.element.selected=!1}))};return[o,{setItems:function(e){o.innerHTML="",u.length=0,(r.emptyItem?d([{id:"",display:""}],e):d(e)).forEach((function(e){var t=document.createElement("option");t.value=e.id,t.textContent=e.display,t.selected=e.id===(null==i?void 0:i.id),o.appendChild(t),u.push({element:t,item:e})}))},getItems:function(){return u.map((function(e){return e.item}))},setSelectedItemById:s,setSelectedItemByIndex:function(e){return s(u[e].item.id)},getSelectedItem:function(){return i},clearSelection:function(){u.forEach((function(e){return e.element.selected=!1})),a(null)}}]},y=function(e,t){var n=v((function(n){n?(e.forEach((function(e){return e.element.classList.add("hidden")})),e.find((function(e){return e.id===n.id})).element.classList.remove("hidden"),null==t||t(n.id)):null==t||t(null)}),"",{emptyItem:!1}),r=n[0],o=n[1];return o.setItems(e.map((function(e){return{id:e.id,display:e.display}}))),o.setSelectedItemByIndex(0),r},g=function(e,t,n){var r=document.createElement("button");return r.onclick=n,r.className=t,r.textContent=e,{element:r}},b=function(e,t,n){var r=document.createElement("div");r.className=(null!=n?n:"")+" options-wrapper";var o=document.createElement("label");return o.className="options-label",o.textContent=t,e.className=e.className+" options-content",r.appendChild(o),r.appendChild(e),r},x=function(e,t){var n=document.createElement("div");return n.className=e,null==t||t.forEach((function(e){return n.appendChild(e)})),n},E=function(e,t,n,r,o){var i=document.createElement("div");i.className="edit-input-grid";for(var u=[],a=function(){return u.map((function(e){return e.value}))},s=0;s<n;s++){var c=document.createElement("div");c.className="edit-input-row";for(var f=function(n){var i=s*r+n,f=e[i],l=document.createElement("input"),p={element:l,value:f};Object.assign(l,o),l.className="edit-input",l.type="number",l.value=null==f?void 0:f.toString(),l.oninput=function(){u[i].value=Number(l.value),null==t||t(a())},u.push(p),c.appendChild(l)},l=0;l<r;l++)f(l);i.appendChild(c)}return[i,{setValues:function(e){return u.forEach((function(t,n){t.value=e[n],t.element.value=t.value.toString()}))},getValues:a,setReadonly:function(e){return u.forEach((function(t){return t.element.readOnly=e}))}}]},A=function(e){return E([0,0,0],e,1,3)},w=function(){return(w=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},T={min:"0",max:"1",step:"0.1"},M=function(e,t){return e.hasOwnProperty(t)},S=function(e){throw new Error("Unhandled union member: "+JSON.stringify(e))},C=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],u=0,a=i.length;u<a;u++,o++)r[o]=i[u];return r};!function(e){e[e.FLOAT_VEC2=35664]="FLOAT_VEC2",e[e.FLOAT_VEC3=35665]="FLOAT_VEC3",e[e.FLOAT_VEC4=35666]="FLOAT_VEC4",e[e.FLOAT_MAT4=35676]="FLOAT_MAT4",e[e.SAMPLER_2D=35678]="SAMPLER_2D"}(r||(r={}));var I,P=function(){function e(e,t,n,r){this.context=e,this.name=n,this.type=r,this.attachToProgram(t)}return e.prototype.attachToProgram=function(e){var t=this.context.getUniformLocation(e,this.name);this.setter=L(this.type,this.context,t)},e.prototype.setValue=function(e){this.value=e},e.prototype.setUniform=function(){null!==this.value&&this.setter(this.value)},e.prototype.getUniformType=function(){return this.type},e.prototype.getUniformName=function(){return this.name},e.prototype.dispose=function(){},e}(),L=function(e,t,n){switch(e){case r.FLOAT_VEC2:return function(e){return t.uniform2f.apply(t,C([n],e))};case r.FLOAT_VEC3:return function(e){return t.uniform3f.apply(t,C([n],e))};case r.FLOAT_VEC4:return function(e){return t.uniform4f.apply(t,C([n],e))};case r.FLOAT_MAT4:return function(e){return t.uniformMatrix4fv(n,!1,e)};case r.SAMPLER_2D:return function(e){};default:S(e)}},O=function(){function e(e){this.keySelector=e,this.map=new Map}return e.prototype.get=function(e){return this.map.get(this.keySelector(e))},e.prototype.set=function(e,t){this.map.set(this.keySelector(e),t)},e.prototype.has=function(e){return this.map.has(this.keySelector(e))},e.prototype.entriesStrKey=function(){return Array.from(this.map.entries())},e.prototype.deleteStrKey=function(e){this.map.delete(e)},e.prototype.delete=function(e){this.map.delete(this.keySelector(e))},e.prototype.clear=function(){this.map.clear()},e}(),F=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){var t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}))},V=function(){return(V=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},_=new O((function(e){return e.name+";"+e.type})),B=function(e){switch(e.getUniformType()){case r.FLOAT_VEC2:return R((function(t){return e.setValue(t)}));case r.FLOAT_VEC3:return D((function(t){return e.setValue(t)}));case r.FLOAT_VEC4:var t=[1,0,0,1];return e.setValue(t),U(t,(function(t){return e.setValue(t)}));case r.SAMPLER_2D:return k((function(t){F();e.setValue({slot:t.slot,textureData:!0})}));case r.FLOAT_MAT4:default:return N()}},R=function(e){var t=E([0,0],e,1,2),n=t[0];return t[1].setValues([0,0]),n},N=function(){var e=document.createElement("div");return e.className="unsupported-error",e.innerText="Not supported uniform",e},D=function(e){var t=A(e),n=t[0];t[1].setValues([0,0,0]);var r=function(e){var t=[.5,.5,.5],n=document.createElement("div");n.className="edit-input-color";var r=function(e){n.style.background="rgb("+255*e[0]+","+255*e[1]+","+255*e[2]+",1)"};r(t);var o=x("row-with-gap"),i=E(t,(function(t){r(t),null==e||e(t)}),1,3,T),u=i[0],a=i[1];return o.appendChild(u),o.appendChild(n),[o,w(w({},a),{setValues:function(e){a.setValues(e),r(e)}})]}(e),o=r[0];r[1].setValues([1,0,0]);var i=y([{id:"custom",display:"Custom",element:n},{id:"color",display:"Color",element:o}]);return x("column-with-gap",[i,n,o])},U=function(e,t){var n=E([0,0,0,0],t,1,4),r=n[0];n[1].setValues(e);var o=function(e){var t=[.5,.5,.5,1],n=document.createElement("div");n.className="edit-input-color";var r=function(e){n.style.background="rgb("+255*e[0]+","+255*e[1]+","+255*e[2]+","+e[3]+")"};r(t);var o=x("row-with-gap"),i=E(t,(function(t){r(t),null==e||e(t)}),1,4,T),u=i[0],a=i[1];return o.appendChild(u),o.appendChild(n),[o,w(w({},a),{setValues:function(e){a.setValues(e),r(e)}})]}(t),i=o[0];o[1].setValues(e);var u=y([{id:"custom",display:"Custom",element:r},{id:"color",display:"Color",element:i}]);return x("column-with-gap",[u,r,i])},k=function(e){var t=A(),n=t[0];return t[1].setValues([0,0,0]),n},j=function(e,t){var n=e.indexOf(t);n>-1&&e.splice(n,1)},H=function(e,t){return e.substring(0,e.length-t)},Y=function(e,t,n){var r=e.createShader(t);if(e.shaderSource(r,n),e.compileShader(r),e.getShaderParameter(r,e.COMPILE_STATUS))return r;var o=e.getShaderInfoLog(r);return e.deleteShader(r),{error:o}},z=function(e,t,n){var r=e.createProgram();if(e.attachShader(r,t),e.attachShader(r,n),e.linkProgram(r),e.getProgramParameter(r,e.LINK_STATUS))return r;throw e.deleteProgram(r),new Error("Creating program failed: "+e.getProgramInfoLog(r))},G=function(){function e(e){this.value=e,this.observers=[]}return e.prototype.attach=function(e){this.observers.push(e)},e.prototype.detach=function(e){j(this.observers,e)},e.prototype.detachAll=function(){this.observers.length=0},e.prototype.setValue=function(e){this.value=e,this.notify()},e.prototype.getValue=function(){return this.value},e.prototype.forceNotify=function(){this.notify()},e.prototype.notify=function(){if(null!==this.value){var e=this.value;this.observers.forEach((function(t){return t(e)}))}},e}();!function(e){e[e.FLOAT_VEC3=35665]="FLOAT_VEC3",e[e.FLOAT_VEC4=35666]="FLOAT_VEC4"}(I||(I={}));var K=function(){function e(e,t,n,r){this.context=e,this.name=n,this.type=r,this.count=0,this.attachToProgram(t),this.buffer=e.createBuffer()}return e.prototype.attachToProgram=function(e){this.location=this.context.getAttribLocation(e,this.name)},e.prototype.setValue=function(e){this.count=e.length,this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffer);var t=[].concat.apply([],e);this.context.bufferData(this.context.ARRAY_BUFFER,new Float32Array(t),this.context.STATIC_DRAW)},e.prototype.setAttributeBuffer=function(){if(null!==this.buffer){this.context.enableVertexAttribArray(this.location),this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffer);var e=W(this.type),t=this.context.FLOAT;this.context.vertexAttribPointer(this.location,e,t,!1,0,0)}},e.prototype.getAttributeBufferType=function(){return this.type},e.prototype.getCount=function(){return this.count},e.prototype.deleteBuffer=function(){this.context.deleteBuffer(this.buffer),this.buffer=null},e}(),W=function(e){switch(e){case I.FLOAT_VEC3:return 3;case I.FLOAT_VEC4:return 4;default:S(e)}},X=function(){return(X=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},J=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],u=0,a=i.length;u<a;u++,o++)r[o]=i[u];return r},q=function(e){return e.name+";"+e.type},Q=new O(q),Z=function(e,t,n,r){var o,i,u=n.map((function(n){var o=X({},n),i=Q.get(o);if(i)return i.attributeBufferInfo.attachToProgram(t),{key:o,value:i};var u=new K(e,t,n.name,n.type),a=r.filter((function(e){return e.type===u.getAttributeBufferType()})),s=function(e){return u.setValue(e)},c=a.length?te(J([$(u)],ee(a,u)),s):ne(u,s),f=c.element,l=c.dispose;return{key:o,value:{component:b(f,n.name),attributeBufferInfo:u,dispose:function(){u.deleteBuffer(),null==l||l()}}}}));return i=(o=u).map((function(e){return q(e.key)})),Q.entriesStrKey().filter((function(e){return!i.includes(e[0])})).forEach((function(e){e[1].dispose(),Q.deleteStrKey(e[0])})),o.forEach((function(e){Q.has(e.key)||Q.set(e.key,e.value)})),u.map((function(e){return e.value}))},$=function(e){return X({id:"custom",display:"Custom"},ne(e))},ee=function(e,t){return e.map((function(e){var n=re(t.getAttributeBufferType(),!1,e.value);return{id:F(),element:n,display:e.name,value:e.value}}))},te=function(e,t){var n=null;return{element:x("column-with-gap",J([y(e,(function(r){null==n||n();var o=e.find((function(e){return e.id===r})),i=function(e){return t(e)};o.value.attach(i),i(o.value.getValue()),n=function(){return o.value.detach(i)}}))],e.map((function(e){return e.element})))),dispose:function(){return null==n?void 0:n()}}},ne=function(e,t){var n=new G((e.getAttributeBufferType(),[[0,0,0,1],[0,.5,0,1],[.9,0,0,1],[0,.5,0,1],[.7,0,0,1],[.7,.5,0,1]]));return t&&n.attach((function(t){e.setValue(t)})),{element:re(e.getAttributeBufferType(),!0,n),value:n,dispose:function(){return n.detachAll()}}},re=function(e,t,n){switch(e){case I.FLOAT_VEC4:return ie(n,t);default:return oe()}},oe=function(){var e=document.createElement("div");return e.className="unsupported-error",e.innerText="Not supported attribute buffer",e},ie=function(e,t){var n=document.createElement("input");if(n.className="edit-input",n.disabled=!t,!t){e.attach((function(e){return n.value=JSON.stringify(e)}))}return n.value=JSON.stringify(e.getValue()),n.oninput=function(){try{var t=JSON.parse(n.value);if(Array.isArray(t))t.every((function(e){return!!Array.isArray(e)&&4===e.length}));else;e.setValue(t)}catch(e){console.log("this is not a json")}},n},ue=function(e){var t=document.createElement("canvas");t.className=e;var n,r,o=t.getContext("webgl");if(n=t,r=function(e){t.width=e.width,t.height=e.height},new ResizeObserver((function(e){var t=e.find((function(e){return e.target===n}));if(t){var o=t.target.getBoundingClientRect();r({x:o.x,y:o.y,width:o.width,height:o.height})}})).observe(n),!o)throw new Error("Unable to create webgl context");return[t,{context:o}]},ae=function(){function e(){var e=this;this.eventListeners=[],window.addEventListener("message",(function(t){e.eventListeners.forEach((function(e){return e(t.data)}))}))}return e.prototype.getShaderDocuments=function(){var e=this,t=F();return a.postMessage({type:"getShaderDocuments",id:t}),new Promise((function(n){var r=function(o){"getShaderDocuments"===o.type&&o.id===t&&(n(o.payload.files),e.removeListener(r))};e.eventListeners.push(r)}))},e.prototype.getDocumentText=function(e){var t=this,n=F();return a.postMessage({type:"getDocumentText",id:n,payload:{fileName:e}}),new Promise((function(e){var r=function(o){"getDocumentText"===o.type&&o.id===n&&(e(o.payload.text),t.removeListener(r))};t.eventListeners.push(r)}))},e.prototype.subscribeToDocumentSave=function(e,t){var n=this;a.postMessage({type:"subscribeToDocumentTextChange",payload:{fileName:e}});var r=function(n){"onDocumentTextChange"===n.type&&n.payload.filePath===e&&t(n.payload.text)};return this.eventListeners.push(r),function(){n.removeListener(r),a.postMessage({type:"unsubscribeToDocumentTextChange",payload:{fileName:e}})}},e.prototype.removeListener=function(e){j(this.eventListeners,e)},e}(),se=function(e){return[].concat(e,e,e,e)},ce=new Map([["cube",{display:"Cube",positions:[[-.5,-.5,.5,1],[.5,-.5,.5,1],[.5,.5,.5,1],[-.5,.5,.5,1],[-.5,-.5,-.5,1],[-.5,.5,-.5,1],[.5,.5,-.5,1],[.5,-.5,-.5,1],[-.5,.5,-.5,1],[-.5,.5,.5,1],[.5,.5,.5,1],[.5,.5,-.5,1],[-.5,-.5,-.5,1],[.5,-.5,-.5,1],[.5,-.5,.5,1],[-.5,-.5,.5,1],[.5,-.5,-.5,1],[.5,.5,-.5,1],[.5,.5,.5,1],[.5,-.5,.5,1],[-.5,-.5,-.5,1],[-.5,-.5,.5,1],[-.5,.5,.5,1],[-.5,.5,-.5,1]],colors:function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],u=0,a=i.length;u<a;u++,o++)r[o]=i[u];return r}(se([1,1,1,1]),se([1,0,0,1]),se([0,1,0,1]),se([0,0,1,1]),se([1,1,0,1]),se([1,0,1,1])),indices:[0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23]}]]);console.log(ce);var fe;!function(e){e.create=function(){var e=new Float32Array(16);return e[0]=1,e[5]=1,e[10]=1,e[15]=1,e},e.perspective=function(e,t,n,r,o){var i,u=1/Math.tan(t/2);return e[0]=u/n,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=u,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,null!=o&&o!==1/0?(i=1/(r-o),e[10]=(o+r)*i,e[14]=2*o*r*i):(e[10]=-1,e[14]=-2*r),e},e.lookAt=function(e,t,n,r){var o,i,u,a,s,c,f,l,p,h,d=t[0],m=t[1],v=t[2],y=r[0],g=r[1],b=r[2],x=n[0],E=n[1],A=n[2];return Math.abs(d-x)<1e-6&&Math.abs(m-E)<1e-6&&Math.abs(v-A)<1e-6?function(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}(e):(f=d-x,l=m-E,p=v-A,o=g*(p*=h=1/Math.hypot(f,l,p))-b*(l*=h),i=b*(f*=h)-y*p,u=y*l-g*f,(h=Math.hypot(o,i,u))?(o*=h=1/h,i*=h,u*=h):(o=0,i=0,u=0),a=l*u-p*i,s=p*o-f*u,c=f*i-l*o,(h=Math.hypot(a,s,c))?(a*=h=1/h,s*=h,c*=h):(a=0,s=0,c=0),e[0]=o,e[1]=a,e[2]=f,e[3]=0,e[4]=i,e[5]=s,e[6]=l,e[7]=0,e[8]=u,e[9]=c,e[10]=p,e[11]=0,e[12]=-(o*d+i*m+u*v),e[13]=-(a*d+s*m+c*v),e[14]=-(f*d+l*m+p*v),e[15]=1,e)}}(fe||(fe={}));var le=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function u(e){try{s(r.next(e))}catch(e){i(e)}}function a(e){try{s(r.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(u,a)}s((r=r.apply(e,t||[])).next())}))},pe=function(e,t){var n,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!(o=u.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=t.call(e,u)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};le(void 0,void 0,void 0,(function(){var e,t,n,r,o,i,a,s,h,d,m,y,E,A,w,T,S,C,L,O,F,R,N,D,U,k,j,K,W,X,J,q,Q;return pe(this,(function($){var ee,te,ne;return e=new ae,t=c(),n=document.getElementById("viewer"),r=x("viewer-options"),o=x("viewer-shader-options"),i=x("viewer-content shader-errors"),a=ue("viewer-content"),s=a[0],h=a[1],d=new Map([["positions",{name:"Binding - Mesh positions",type:I.FLOAT_VEC4,value:new G([])}],["colors",{name:"Binding - Mesh colors",type:I.FLOAT_VEC4,value:new G([])}]]),m={drawMode:"arrays"},y={longitude:1,latitude:1,radius:2},new u(s,(function(){return y}),(function(e){y=e,console.log("viewport",y)})),n.appendChild(s),n.appendChild(i),n.appendChild(r),E=function(e){s.style.visibility="canvas"===e?"visible":"collapse",i.style.visibility="errors"===e?"visible":"collapse"},A=function(){e.getShaderDocuments().then((function(e){var n=e.map((function(e){return{id:e.filePath,display:e.fileName}}));D.setItems(n),t.vertexFilePath&&n.some((function(e){return e.id===t.vertexFilePath}))&&D.setSelectedItemById(t.vertexFilePath),j.setItems(n),t.fragmentFilePath&&n.some((function(e){return e.id===t.fragmentFilePath}))&&j.setSelectedItemById(t.fragmentFilePath)}))},L=null,O=function(e){var t=ce.get(e),n=t.positions,r=t.colors;d.get("positions").value.setValue(n),d.get("colors").value.setValue(r)},F=function(){o.innerHTML="";var e=h.context;if(C&&S){var t=function(e,t,n){var r=Y(e,e.VERTEX_SHADER,t),o=Y(e,e.FRAGMENT_SHADER,n),i=void 0;M(r,"error")&&(i=H(r.error,1));var u=void 0;return M(o,"error")&&(u=H(o.error,1)),i||u?[i,u]:z(e,r,o)}(e,S,C);if(Array.isArray(t))E("errors"),i.innerText=function(e){var t=e[0],n=e[1],r=[];return t&&r.push("VERTEX SHADER:",t),n&&r.push("FRAGMENT SHADER:",n),r.join("\r\n")}(t);else{E("canvas");var n=t,r=function(e,t){for(var n=e.getProgramParameter(t,e.ACTIVE_UNIFORMS),r=[],o=0;o<n;++o){var i=e.getActiveUniform(t,o);r.push({name:i.name,type:i.type})}return r}(e,n),u=function(e,t){for(var n=e.getProgramParameter(t,e.ACTIVE_ATTRIBUTES),r=[],o=0;o<n;++o){var i=e.getActiveAttrib(t,o);r.push({name:i.name,type:i.type})}return r}(e,n),a=function(e,t,n){var r=n.map((function(n){var r=V({},n),o=_.get(r);if(o)return o.uniformInfo.attachToProgram(t),{key:r,value:o};var i=new P(e,t,n.name,n.type);return{key:r,value:{component:b(B(i),n.name),uniformInfo:i}}}));return _.clear(),r.forEach((function(e){return _.set(e.key,e.value)})),r.map((function(e){return e.value}))}(e,n,r);a.forEach((function(e){return o.appendChild(e.component)}));var s=Z(e,n,u,Array.from(d.values()));s.forEach((function(e){return o.appendChild(e.component)}));var c=a.map((function(e){return e.uniformInfo})),f=s.map((function(e){return e.attributeBufferInfo})),p=new l(e);p.setValue([0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23]),null!==L&&cancelAnimationFrame(L);var v=c.find((function(e){return"uModelViewMatrix"===e.getUniformName()})),g=c.find((function(e){return"uProjectionMatrix"===e.getUniformName()})),x=function(t){var r=45*Math.PI/180,o=e.canvas,i=o.clientWidth/o.clientHeight,u=fe.create();fe.perspective(u,r,i,.1,100);var a=fe.create(),s=function(e){var t=e.radius*Math.sin(e.latitude),n=e.radius*Math.cos(e.latitude),r=n*Math.cos(e.longitude);return{x:n*Math.sin(e.longitude),y:t,z:r}}(y);fe.lookAt(a,[s.x,s.y,s.z],[0,0,0],[0,1,0]),g.setValue(u),v.setValue(a),function(e,t,n,r){e.useProgram(t),e.viewport(0,0,e.canvas.width,e.canvas.height),e.clearColor(0,0,0,1),e.clearDepth(1),e.enable(e.DEPTH_TEST),e.depthFunc(e.LEQUAL),e.clear(e.COLOR_BUFFER_BIT|e.DEPTH_BUFFER_BIT),n.uniformInfos.forEach((function(e){return e.setUniform()})),n.attributeBufferInfos.forEach((function(e){return e.setAttributeBuffer()}));var o=e.TRIANGLES;if("arrays"===r.drawMode){var i=Math.min.apply(Math,n.attributeBufferInfos.map((function(e){return e.getCount()})));e.drawArrays(o,0,i)}else n.indexBufferInfo.setIndexBuffer(),e.drawElements(o,n.indexBufferInfo.getCount(),e.UNSIGNED_SHORT,0)}(e,n,{uniformInfos:c,attributeBufferInfos:f,indexBufferInfo:p},m),L=requestAnimationFrame(x)};x(0)}}else E("none")},r.appendChild(x("viewer-shaders-title",[(ee=p,te="",ne=document.createElement("h3"),ne.textContent=ee,ne.className=te+" section-title",{element:ne}).element,g("Sync","viewer-refresh-button",A).element])),R=v((function(t){return le(void 0,void 0,void 0,(function(){var n;return pe(this,(function(r){switch(r.label){case 0:return null==w||w(),t&&(w=e.subscribeToDocumentSave(t.id,(function(e){S=e,F()}))),t?[4,e.getDocumentText(t.id)]:[3,2];case 1:return n=r.sent(),[3,3];case 2:n="",r.label=3;case 3:return S=n,f({vertexFilePath:t?t.id:null}),F(),[2]}}))}))})),N=R[0],(D=R[1]).setSelectedItemById(t.vertexFilePath),r.appendChild(b(N,"Vertex Shader")),U=v((function(t){return le(void 0,void 0,void 0,(function(){var n;return pe(this,(function(r){switch(r.label){case 0:return null==T||T(),t&&(T=e.subscribeToDocumentSave(t.id,(function(e){C=e,F()}))),t?[4,e.getDocumentText(t.id)]:[3,2];case 1:return n=r.sent(),[3,3];case 2:n="",r.label=3;case 3:return C=n,f({fragmentFilePath:t?t.id:null}),F(),[2]}}))}))})),k=U[0],(j=U[1]).setSelectedItemById(t.fragmentFilePath),r.appendChild(b(k,"Fragment Shader")),K=v((function(e){return e&&O(e.id)}),void 0,{emptyItem:!1}),W=K[0],(X=K[1]).setItems(Array.from(ce.entries()).map((function(e){return{id:e[0],display:e[1].display}}))),X.setSelectedItemByIndex(0),r.appendChild(b(W,"Mesh")),J=v((function(e){e&&(m.drawMode=e.id,f({drawMode:e.id}))}),void 0,{emptyItem:!1}),q=J[0],(Q=J[1]).setItems([{id:"arrays",display:"Arrays"},{id:"elements",display:"Elements"}]),Q.setSelectedItemById(t.drawMode),r.appendChild(b(q,"Draw mode")),r.appendChild(o),A(),[2]}))}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,