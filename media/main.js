!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=8)}({8:function(t,e,n){"use strict";n.r(e);var r={};n.r(r),n.d(r,"create",(function(){return ft})),n.d(r,"clone",(function(){return lt})),n.d(r,"copy",(function(){return ht})),n.d(r,"fromValues",(function(){return dt})),n.d(r,"set",(function(){return pt})),n.d(r,"identity",(function(){return mt})),n.d(r,"transpose",(function(){return vt})),n.d(r,"invert",(function(){return yt})),n.d(r,"adjoint",(function(){return bt})),n.d(r,"determinant",(function(){return gt})),n.d(r,"multiply",(function(){return Mt})),n.d(r,"translate",(function(){return xt})),n.d(r,"scale",(function(){return Et})),n.d(r,"rotate",(function(){return At})),n.d(r,"rotateX",(function(){return Tt})),n.d(r,"rotateY",(function(){return wt})),n.d(r,"rotateZ",(function(){return St})),n.d(r,"fromTranslation",(function(){return Ft})),n.d(r,"fromScaling",(function(){return It})),n.d(r,"fromRotation",(function(){return Ct})),n.d(r,"fromXRotation",(function(){return Ot})),n.d(r,"fromYRotation",(function(){return Vt})),n.d(r,"fromZRotation",(function(){return Pt})),n.d(r,"fromRotationTranslation",(function(){return Lt})),n.d(r,"fromQuat2",(function(){return _t})),n.d(r,"getTranslation",(function(){return Bt})),n.d(r,"getScaling",(function(){return Rt})),n.d(r,"getRotation",(function(){return Nt})),n.d(r,"decompose",(function(){return Dt})),n.d(r,"fromRotationTranslationScale",(function(){return Ut})),n.d(r,"fromRotationTranslationScaleOrigin",(function(){return kt})),n.d(r,"fromQuat",(function(){return jt})),n.d(r,"frustum",(function(){return qt})),n.d(r,"perspectiveNO",(function(){return Ht})),n.d(r,"perspective",(function(){return Yt})),n.d(r,"perspectiveZO",(function(){return Gt})),n.d(r,"perspectiveFromFieldOfView",(function(){return Kt})),n.d(r,"orthoNO",(function(){return Jt})),n.d(r,"ortho",(function(){return Xt})),n.d(r,"orthoZO",(function(){return Zt})),n.d(r,"lookAt",(function(){return Qt})),n.d(r,"targetTo",(function(){return Wt})),n.d(r,"str",(function(){return zt})),n.d(r,"frob",(function(){return $t})),n.d(r,"add",(function(){return te})),n.d(r,"subtract",(function(){return ee})),n.d(r,"multiplyScalar",(function(){return ne})),n.d(r,"multiplyScalarAndAdd",(function(){return re})),n.d(r,"exactEquals",(function(){return oe})),n.d(r,"equals",(function(){return ae})),n.d(r,"mul",(function(){return ue})),n.d(r,"sub",(function(){return ie}));var o,a=acquireVsCodeApi(),u={vertexFilePath:null,fragmentFilePath:null,drawMode:"elements"},i=function(){var t;return null!==(t=a.getState())&&void 0!==t?t:u},c=function(t){return a.setState(Object.assign(i(),t))},s=function(){function t(t){this.context=t,this.buffer=t.createBuffer()}return t.prototype.setValue=function(t){this.context.bindBuffer(this.context.ELEMENT_ARRAY_BUFFER,this.buffer),this.context.bufferData(this.context.ELEMENT_ARRAY_BUFFER,new Uint16Array(t),this.context.STATIC_DRAW)},t.prototype.setIndexBuffer=function(){this.context.bindBuffer(this.context.ELEMENT_ARRAY_BUFFER,this.buffer)},t.prototype.deleteBuffer=function(){this.context.deleteBuffer(this.buffer),this.buffer=null},t}(),f="SHADERS",l=function(){return(l=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},h=function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),o=0;for(e=0;e<n;e++)for(var a=arguments[e],u=0,i=a.length;u<i;u++,o++)r[o]=a[u];return r},d={emptyItem:!0},p=function(t,e,n){var r=l(l({},d),n),o=document.createElement("select");o.className="dropdown-base "+e;var a=null,u=[],i=function(e){t(a=e)};o.onchange=function(){var t=u.find((function(t){return t.item.id===o.value}));t.item.id?i(t.item):i(null)};var c=function(t){u.forEach((function(e){e.item.id===t?(e.element.selected=!0,i(e.item)):e.element.selected=!1}))};return[o,{setItems:function(t){o.innerHTML="",u.length=0,(r.emptyItem?h([{id:"",display:""}],t):h(t)).forEach((function(t){var e=document.createElement("option");e.value=t.id,e.textContent=t.display,e.selected=t.id===(null==a?void 0:a.id),o.appendChild(e),u.push({element:e,item:t})}))},getItems:function(){return u.map((function(t){return t.item}))},setSelectedItemById:c,setSelectedItemByIndex:function(t){return c(u[t].item.id)},getSelectedItem:function(){return a},clearSelection:function(){u.forEach((function(t){return t.element.selected=!1})),i(null)}}]},m=function(t,e){var n=p((function(n){n?(t.forEach((function(t){return t.element.classList.add("hidden")})),t.find((function(t){return t.id===n.id})).element.classList.remove("hidden"),null==e||e(n.id)):null==e||e(null)}),"",{emptyItem:!1}),r=n[0],o=n[1];return o.setItems(t.map((function(t){return{id:t.id,display:t.display}}))),o.setSelectedItemByIndex(0),r},v=function(t,e,n){var r=document.createElement("button");return r.onclick=n,r.className=e,r.textContent=t,{element:r}},y=function(t,e,n){var r=document.createElement("div");r.className=(null!=n?n:"")+" options-wrapper";var o=document.createElement("label");return o.className="options-label",o.textContent=e,t.className=t.className+" options-content",r.appendChild(o),r.appendChild(t),r},b=function(t,e){var n=document.createElement("div");return n.className=t,null==e||e.forEach((function(t){return n.appendChild(t)})),n},g=function(t,e,n,r,o){var a=document.createElement("div");a.className="edit-input-grid";for(var u=[],i=function(){return u.map((function(t){return t.value}))},c=0;c<n;c++){var s=document.createElement("div");s.className="edit-input-row";for(var f=function(n){var a=c*r+n,f=t[a],l=document.createElement("input"),h={element:l,value:f};Object.assign(l,o),l.className="edit-input",l.type="number",l.value=null==f?void 0:f.toString(),l.oninput=function(){u[a].value=Number(l.value),null==e||e(i())},u.push(h),s.appendChild(l)},l=0;l<r;l++)f(l);a.appendChild(s)}return[a,{setValues:function(t){return u.forEach((function(e,n){e.value=t[n],e.element.value=e.value.toString()}))},getValues:i,setReadonly:function(t){return u.forEach((function(e){return e.element.readOnly=t}))}}]},M=function(t){return g([0,0,0],t,1,3)},x=function(){return(x=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},E={min:"0",max:"1",step:"0.1"},A=function(t,e){return t.hasOwnProperty(e)},T=function(t){throw new Error("Unhandled union member: "+JSON.stringify(t))},w=function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),o=0;for(e=0;e<n;e++)for(var a=arguments[e],u=0,i=a.length;u<i;u++,o++)r[o]=a[u];return r};!function(t){t[t.FLOAT_VEC2=35664]="FLOAT_VEC2",t[t.FLOAT_VEC3=35665]="FLOAT_VEC3",t[t.FLOAT_VEC4=35666]="FLOAT_VEC4",t[t.FLOAT_MAT4=35676]="FLOAT_MAT4",t[t.SAMPLER_2D=35678]="SAMPLER_2D"}(o||(o={}));var S,F=function(){function t(t,e,n,r){this.context=t,this.name=n,this.type=r,this.attachToProgram(e)}return t.prototype.attachToProgram=function(t){var e=this.context.getUniformLocation(t,this.name);this.setter=I(this.type,this.context,e)},t.prototype.setValue=function(t){this.value=t},t.prototype.setUniform=function(){null!==this.value&&this.setter(this.value)},t.prototype.getUniformType=function(){return this.type},t.prototype.getUniformName=function(){return this.name},t.prototype.dispose=function(){},t}(),I=function(t,e,n){switch(t){case o.FLOAT_VEC2:return function(t){return e.uniform2f.apply(e,w([n],t))};case o.FLOAT_VEC3:return function(t){return e.uniform3f.apply(e,w([n],t))};case o.FLOAT_VEC4:return function(t){return e.uniform4f.apply(e,w([n],t))};case o.FLOAT_MAT4:return function(t){return e.uniformMatrix4fv(n,!1,t)};case o.SAMPLER_2D:return function(t){};default:T(t)}},C=function(){function t(t){this.keySelector=t,this.map=new Map}return t.prototype.get=function(t){return this.map.get(this.keySelector(t))},t.prototype.set=function(t,e){this.map.set(this.keySelector(t),e)},t.prototype.has=function(t){return this.map.has(this.keySelector(t))},t.prototype.entriesStrKey=function(){return Array.from(this.map.entries())},t.prototype.deleteStrKey=function(t){this.map.delete(t)},t.prototype.delete=function(t){this.map.delete(this.keySelector(t))},t.prototype.clear=function(){this.map.clear()},t}(),O=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(t){var e=16*Math.random()|0;return("x"==t?e:3&e|8).toString(16)}))},V=function(){return(V=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},P=new C((function(t){return t.name+";"+t.type})),L=function(t){switch(t.getUniformType()){case o.FLOAT_VEC2:return _((function(e){return t.setValue(e)}));case o.FLOAT_VEC3:return R((function(e){return t.setValue(e)}));case o.FLOAT_VEC4:var e=[1,0,0,1];return t.setValue(e),N(e,(function(e){return t.setValue(e)}));case o.SAMPLER_2D:return D((function(e){O();t.setValue({slot:e.slot,textureData:!0})}));case o.FLOAT_MAT4:default:return B()}},_=function(t){var e=g([0,0],t,1,2),n=e[0];return e[1].setValues([0,0]),n},B=function(){var t=document.createElement("div");return t.className="unsupported-error",t.innerText="Not supported uniform",t},R=function(t){var e=M(t),n=e[0];e[1].setValues([0,0,0]);var r=function(t){var e=[.5,.5,.5],n=document.createElement("div");n.className="edit-input-color";var r=function(t){n.style.background="rgb("+255*t[0]+","+255*t[1]+","+255*t[2]+",1)"};r(e);var o=b("row-with-gap"),a=g(e,(function(e){r(e),null==t||t(e)}),1,3,E),u=a[0],i=a[1];return o.appendChild(u),o.appendChild(n),[o,x(x({},i),{setValues:function(t){i.setValues(t),r(t)}})]}(t),o=r[0];r[1].setValues([1,0,0]);var a=m([{id:"custom",display:"Custom",element:n},{id:"color",display:"Color",element:o}]);return b("column-with-gap",[a,n,o])},N=function(t,e){var n=g([0,0,0,0],e,1,4),r=n[0];n[1].setValues(t);var o=function(t){var e=[.5,.5,.5,1],n=document.createElement("div");n.className="edit-input-color";var r=function(t){n.style.background="rgb("+255*t[0]+","+255*t[1]+","+255*t[2]+","+t[3]+")"};r(e);var o=b("row-with-gap"),a=g(e,(function(e){r(e),null==t||t(e)}),1,4,E),u=a[0],i=a[1];return o.appendChild(u),o.appendChild(n),[o,x(x({},i),{setValues:function(t){i.setValues(t),r(t)}})]}(e),a=o[0];o[1].setValues(t);var u=m([{id:"custom",display:"Custom",element:r},{id:"color",display:"Color",element:a}]);return b("column-with-gap",[u,r,a])},D=function(t){var e=M(),n=e[0];return e[1].setValues([0,0,0]),n},U=function(t,e){var n=t.indexOf(e);n>-1&&t.splice(n,1)},k=function(t,e){return t.substring(0,t.length-e)},j=function(t,e,n){var r=t.createShader(e);if(t.shaderSource(r,n),t.compileShader(r),t.getShaderParameter(r,t.COMPILE_STATUS))return r;var o=t.getShaderInfoLog(r);return t.deleteShader(r),{error:o}},q=function(t,e,n){var r=t.createProgram();if(t.attachShader(r,e),t.attachShader(r,n),t.linkProgram(r),t.getProgramParameter(r,t.LINK_STATUS))return r;throw t.deleteProgram(r),new Error("Creating program failed: "+t.getProgramInfoLog(r))},H=function(){function t(t){this.value=t,this.observers=[]}return t.prototype.attach=function(t){this.observers.push(t)},t.prototype.detach=function(t){U(this.observers,t)},t.prototype.detachAll=function(){this.observers.length=0},t.prototype.setValue=function(t){this.value=t,this.notify()},t.prototype.getValue=function(){return this.value},t.prototype.forceNotify=function(){this.notify()},t.prototype.notify=function(){if(null!==this.value){var t=this.value;this.observers.forEach((function(e){return e(t)}))}},t}();!function(t){t[t.FLOAT_VEC3=35665]="FLOAT_VEC3",t[t.FLOAT_VEC4=35666]="FLOAT_VEC4"}(S||(S={}));var Y=function(){function t(t,e,n,r){this.context=t,this.name=n,this.type=r,this.numElements=0,this.attachToProgram(e),this.buffer=t.createBuffer()}return t.prototype.attachToProgram=function(t){this.location=this.context.getAttribLocation(t,this.name)},t.prototype.setValue=function(t){this.numElements=t.length,this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffer);var e=[].concat.apply([],t);console.log("setting value",e),this.context.bufferData(this.context.ARRAY_BUFFER,new Float32Array(e),this.context.STATIC_DRAW)},t.prototype.setAttributeBuffer=function(){if(null!==this.buffer){this.context.enableVertexAttribArray(this.location),this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffer);var t=G(this.type),e=this.context.FLOAT;this.context.vertexAttribPointer(this.location,t,e,!1,0,0)}},t.prototype.getAttributeBufferType=function(){return this.type},t.prototype.getNumElements=function(){return this.numElements},t.prototype.deleteBuffer=function(){this.context.deleteBuffer(this.buffer),this.buffer=null},t}(),G=function(t){switch(t){case S.FLOAT_VEC3:return 3;case S.FLOAT_VEC4:return 4;default:T(t)}},K=function(){return(K=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},J=function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),o=0;for(e=0;e<n;e++)for(var a=arguments[e],u=0,i=a.length;u<i;u++,o++)r[o]=a[u];return r},X=function(t){return t.name+";"+t.type},Z=new C(X),Q=function(t,e,n,r){var o,a,u=n.map((function(n){var o=K({},n),a=Z.get(o);if(a)return a.attributeBufferInfo.attachToProgram(e),{key:o,value:a};var u=new Y(t,e,n.name,n.type),i=r.filter((function(t){return t.type===u.getAttributeBufferType()})),c=function(t){return u.setValue(t)},s=i.length?nt(J([tt(u)],z(i,u)),c):et(u,c),f=s.element,l=s.dispose;return{key:o,value:{component:y(f,n.name),attributeBufferInfo:u,dispose:function(){u.deleteBuffer(),null==l||l()}}}}));return a=(o=u).map((function(t){return X(t.key)})),Z.entriesStrKey().filter((function(t){return!a.includes(t[0])})).forEach((function(t){t[1].dispose(),Z.deleteStrKey(t[0])})),o.forEach((function(t){Z.has(t.key)||Z.set(t.key,t.value)})),u.map((function(t){return t.value}))},W=function(t,e,n){switch(t){case S.FLOAT_VEC4:return rt(n,e);default:return $()}},z=function(t,e){return t.map((function(t){var n=W(e.getAttributeBufferType(),!1,t.value);return{id:O(),element:n,display:t.name,value:t.value}}))},$=function(){var t=document.createElement("div");return t.className="unsupported-error",t.innerText="Not supported attribute buffer",t},tt=function(t){return K({id:"custom",display:"Custom"},et(t))},et=function(t,e){var n=new H((t.getAttributeBufferType(),[[0,0,0,1],[0,.5,0,1],[.9,0,0,1],[0,.5,0,1],[.7,0,0,1],[.7,.5,0,1]]));return e&&n.attach((function(e){t.setValue(e)})),{element:W(t.getAttributeBufferType(),!0,n),value:n,dispose:function(){return n.detachAll()}}},nt=function(t,e){var n=void 0;return{element:b("column-with-gap",J([m(t,(function(r){null==n||n();var o=t.find((function(t){return t.id===r})),a=function(t){return e(t)};o.value.attach(a),a(o.value.getValue()),n=function(){return o.value.detach(a)}}))],t.map((function(t){return t.element})))),dispose:function(){return null==n?void 0:n()}}},rt=function(t,e){var n=document.createElement("input");if(n.className="edit-input",n.disabled=!e,!e){t.attach((function(t){return n.value=JSON.stringify(t)}))}return n.value=JSON.stringify(t.getValue()),n.oninput=function(){try{var e=JSON.parse(n.value);if(Array.isArray(e))e.every((function(t){return!!Array.isArray(t)&&4===t.length}));else;t.setValue(e)}catch(t){console.log("this is not a json")}},n},ot=function(t){var e=document.createElement("canvas");e.className=t;var n,r,o=e.getContext("webgl");if(n=e,r=function(t){e.width=t.width,e.height=t.height},new ResizeObserver((function(t){var e=t.find((function(t){return t.target===n}));if(e){var o=e.target.getBoundingClientRect();r({x:o.x,y:o.y,width:o.width,height:o.height})}})).observe(n),!o)throw new Error("Unable to create webgl context");return[e,{context:o}]},at=function(){function t(){var t=this;this.eventListeners=[],window.addEventListener("message",(function(e){t.eventListeners.forEach((function(t){return t(e.data)}))}))}return t.prototype.getShaderDocuments=function(){var t=this,e=O();return a.postMessage({type:"getShaderDocuments",id:e}),new Promise((function(n){var r=function(o){"getShaderDocuments"===o.type&&o.id===e&&(n(o.payload.files),t.removeListener(r))};t.eventListeners.push(r)}))},t.prototype.getDocumentText=function(t){var e=this,n=O();return a.postMessage({type:"getDocumentText",id:n,payload:{fileName:t}}),new Promise((function(t){var r=function(o){"getDocumentText"===o.type&&o.id===n&&(t(o.payload.text),e.removeListener(r))};e.eventListeners.push(r)}))},t.prototype.subscribeToDocumentSave=function(t,e){var n=this;a.postMessage({type:"subscribeToDocumentTextChange",payload:{fileName:t}});var r=function(n){"onDocumentTextChange"===n.type&&n.payload.filePath===t&&e(n.payload.text)};return this.eventListeners.push(r),function(){n.removeListener(r),a.postMessage({type:"unsubscribeToDocumentTextChange",payload:{fileName:t}})}},t.prototype.removeListener=function(t){U(this.eventListeners,t)},t}(),ut=function(t){return[].concat(t,t,t,t)},it=new Map([["cube",{display:"Cube",positions:[[-.5,-.5,.5,1],[.5,-.5,.5,1],[.5,.5,.5,1],[-.5,.5,.5,1],[-.5,-.5,-.5,1],[-.5,.5,-.5,1],[.5,.5,-.5,1],[.5,-.5,-.5,1],[-.5,.5,-.5,1],[-.5,.5,.5,1],[.5,.5,.5,1],[.5,.5,-.5,1],[-.5,-.5,-.5,1],[.5,-.5,-.5,1],[.5,-.5,.5,1],[-.5,-.5,.5,1],[.5,-.5,-.5,1],[.5,.5,-.5,1],[.5,.5,.5,1],[.5,-.5,.5,1],[-.5,-.5,-.5,1],[-.5,-.5,.5,1],[-.5,.5,.5,1],[-.5,.5,-.5,1]],colors:function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),o=0;for(e=0;e<n;e++)for(var a=arguments[e],u=0,i=a.length;u<i;u++,o++)r[o]=a[u];return r}(ut([1,1,1,1]),ut([1,0,0,1]),ut([0,1,0,1]),ut([0,0,1,1]),ut([1,1,0,1]),ut([1,0,1,1])),indices:[0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23]}]]);console.log(it);const ct=1e-6;let st="undefined"!=typeof Float32Array?Float32Array:Array;Math.random;Math.PI;function ft(){let t=new st(16);return st!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0),t[0]=1,t[5]=1,t[10]=1,t[15]=1,t}function lt(t){let e=new st(16);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}function ht(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function dt(t,e,n,r,o,a,u,i,c,s,f,l,h,d,p,m){let v=new st(16);return v[0]=t,v[1]=e,v[2]=n,v[3]=r,v[4]=o,v[5]=a,v[6]=u,v[7]=i,v[8]=c,v[9]=s,v[10]=f,v[11]=l,v[12]=h,v[13]=d,v[14]=p,v[15]=m,v}function pt(t,e,n,r,o,a,u,i,c,s,f,l,h,d,p,m,v){return t[0]=e,t[1]=n,t[2]=r,t[3]=o,t[4]=a,t[5]=u,t[6]=i,t[7]=c,t[8]=s,t[9]=f,t[10]=l,t[11]=h,t[12]=d,t[13]=p,t[14]=m,t[15]=v,t}function mt(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function vt(t,e){if(t===e){let n=e[1],r=e[2],o=e[3],a=e[6],u=e[7],i=e[11];t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=n,t[6]=e[9],t[7]=e[13],t[8]=r,t[9]=a,t[11]=e[14],t[12]=o,t[13]=u,t[14]=i}else t[0]=e[0],t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=e[1],t[5]=e[5],t[6]=e[9],t[7]=e[13],t[8]=e[2],t[9]=e[6],t[10]=e[10],t[11]=e[14],t[12]=e[3],t[13]=e[7],t[14]=e[11],t[15]=e[15];return t}function yt(t,e){let n=e[0],r=e[1],o=e[2],a=e[3],u=e[4],i=e[5],c=e[6],s=e[7],f=e[8],l=e[9],h=e[10],d=e[11],p=e[12],m=e[13],v=e[14],y=e[15],b=n*i-r*u,g=n*c-o*u,M=n*s-a*u,x=r*c-o*i,E=r*s-a*i,A=o*s-a*c,T=f*m-l*p,w=f*v-h*p,S=f*y-d*p,F=l*v-h*m,I=l*y-d*m,C=h*y-d*v,O=b*C-g*I+M*F+x*S-E*w+A*T;return O?(O=1/O,t[0]=(i*C-c*I+s*F)*O,t[1]=(o*I-r*C-a*F)*O,t[2]=(m*A-v*E+y*x)*O,t[3]=(h*E-l*A-d*x)*O,t[4]=(c*S-u*C-s*w)*O,t[5]=(n*C-o*S+a*w)*O,t[6]=(v*M-p*A-y*g)*O,t[7]=(f*A-h*M+d*g)*O,t[8]=(u*I-i*S+s*T)*O,t[9]=(r*S-n*I-a*T)*O,t[10]=(p*E-m*M+y*b)*O,t[11]=(l*M-f*E-d*b)*O,t[12]=(i*w-u*F-c*T)*O,t[13]=(n*F-r*w+o*T)*O,t[14]=(m*g-p*x-v*b)*O,t[15]=(f*x-l*g+h*b)*O,t):null}function bt(t,e){let n=e[0],r=e[1],o=e[2],a=e[3],u=e[4],i=e[5],c=e[6],s=e[7],f=e[8],l=e[9],h=e[10],d=e[11],p=e[12],m=e[13],v=e[14],y=e[15],b=n*i-r*u,g=n*c-o*u,M=n*s-a*u,x=r*c-o*i,E=r*s-a*i,A=o*s-a*c,T=f*m-l*p,w=f*v-h*p,S=f*y-d*p,F=l*v-h*m,I=l*y-d*m,C=h*y-d*v;return t[0]=i*C-c*I+s*F,t[1]=o*I-r*C-a*F,t[2]=m*A-v*E+y*x,t[3]=h*E-l*A-d*x,t[4]=c*S-u*C-s*w,t[5]=n*C-o*S+a*w,t[6]=v*M-p*A-y*g,t[7]=f*A-h*M+d*g,t[8]=u*I-i*S+s*T,t[9]=r*S-n*I-a*T,t[10]=p*E-m*M+y*b,t[11]=l*M-f*E-d*b,t[12]=i*w-u*F-c*T,t[13]=n*F-r*w+o*T,t[14]=m*g-p*x-v*b,t[15]=f*x-l*g+h*b,t}function gt(t){let e=t[0],n=t[1],r=t[2],o=t[3],a=t[4],u=t[5],i=t[6],c=t[7],s=t[8],f=t[9],l=t[10],h=t[11],d=t[12],p=t[13],m=t[14],v=e*u-n*a,y=e*i-r*a,b=n*i-r*u,g=s*p-f*d,M=s*m-l*d,x=f*m-l*p;return c*(e*x-n*M+r*g)-o*(a*x-u*M+i*g)+t[15]*(s*b-f*y+l*v)-h*(d*b-p*y+m*v)}function Mt(t,e,n){let r=e[0],o=e[1],a=e[2],u=e[3],i=e[4],c=e[5],s=e[6],f=e[7],l=e[8],h=e[9],d=e[10],p=e[11],m=e[12],v=e[13],y=e[14],b=e[15],g=n[0],M=n[1],x=n[2],E=n[3];return t[0]=g*r+M*i+x*l+E*m,t[1]=g*o+M*c+x*h+E*v,t[2]=g*a+M*s+x*d+E*y,t[3]=g*u+M*f+x*p+E*b,g=n[4],M=n[5],x=n[6],E=n[7],t[4]=g*r+M*i+x*l+E*m,t[5]=g*o+M*c+x*h+E*v,t[6]=g*a+M*s+x*d+E*y,t[7]=g*u+M*f+x*p+E*b,g=n[8],M=n[9],x=n[10],E=n[11],t[8]=g*r+M*i+x*l+E*m,t[9]=g*o+M*c+x*h+E*v,t[10]=g*a+M*s+x*d+E*y,t[11]=g*u+M*f+x*p+E*b,g=n[12],M=n[13],x=n[14],E=n[15],t[12]=g*r+M*i+x*l+E*m,t[13]=g*o+M*c+x*h+E*v,t[14]=g*a+M*s+x*d+E*y,t[15]=g*u+M*f+x*p+E*b,t}function xt(t,e,n){let r,o,a,u,i,c,s,f,l,h,d,p,m=n[0],v=n[1],y=n[2];return e===t?(t[12]=e[0]*m+e[4]*v+e[8]*y+e[12],t[13]=e[1]*m+e[5]*v+e[9]*y+e[13],t[14]=e[2]*m+e[6]*v+e[10]*y+e[14],t[15]=e[3]*m+e[7]*v+e[11]*y+e[15]):(r=e[0],o=e[1],a=e[2],u=e[3],i=e[4],c=e[5],s=e[6],f=e[7],l=e[8],h=e[9],d=e[10],p=e[11],t[0]=r,t[1]=o,t[2]=a,t[3]=u,t[4]=i,t[5]=c,t[6]=s,t[7]=f,t[8]=l,t[9]=h,t[10]=d,t[11]=p,t[12]=r*m+i*v+l*y+e[12],t[13]=o*m+c*v+h*y+e[13],t[14]=a*m+s*v+d*y+e[14],t[15]=u*m+f*v+p*y+e[15]),t}function Et(t,e,n){let r=n[0],o=n[1],a=n[2];return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t[4]=e[4]*o,t[5]=e[5]*o,t[6]=e[6]*o,t[7]=e[7]*o,t[8]=e[8]*a,t[9]=e[9]*a,t[10]=e[10]*a,t[11]=e[11]*a,t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function At(t,e,n,r){let o,a,u,i,c,s,f,l,h,d,p,m,v,y,b,g,M,x,E,A,T,w,S,F,I=r[0],C=r[1],O=r[2],V=Math.hypot(I,C,O);return V<ct?null:(V=1/V,I*=V,C*=V,O*=V,o=Math.sin(n),a=Math.cos(n),u=1-a,i=e[0],c=e[1],s=e[2],f=e[3],l=e[4],h=e[5],d=e[6],p=e[7],m=e[8],v=e[9],y=e[10],b=e[11],g=I*I*u+a,M=C*I*u+O*o,x=O*I*u-C*o,E=I*C*u-O*o,A=C*C*u+a,T=O*C*u+I*o,w=I*O*u+C*o,S=C*O*u-I*o,F=O*O*u+a,t[0]=i*g+l*M+m*x,t[1]=c*g+h*M+v*x,t[2]=s*g+d*M+y*x,t[3]=f*g+p*M+b*x,t[4]=i*E+l*A+m*T,t[5]=c*E+h*A+v*T,t[6]=s*E+d*A+y*T,t[7]=f*E+p*A+b*T,t[8]=i*w+l*S+m*F,t[9]=c*w+h*S+v*F,t[10]=s*w+d*S+y*F,t[11]=f*w+p*S+b*F,e!==t&&(t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t)}function Tt(t,e,n){let r=Math.sin(n),o=Math.cos(n),a=e[4],u=e[5],i=e[6],c=e[7],s=e[8],f=e[9],l=e[10],h=e[11];return e!==t&&(t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[4]=a*o+s*r,t[5]=u*o+f*r,t[6]=i*o+l*r,t[7]=c*o+h*r,t[8]=s*o-a*r,t[9]=f*o-u*r,t[10]=l*o-i*r,t[11]=h*o-c*r,t}function wt(t,e,n){let r=Math.sin(n),o=Math.cos(n),a=e[0],u=e[1],i=e[2],c=e[3],s=e[8],f=e[9],l=e[10],h=e[11];return e!==t&&(t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[0]=a*o-s*r,t[1]=u*o-f*r,t[2]=i*o-l*r,t[3]=c*o-h*r,t[8]=a*r+s*o,t[9]=u*r+f*o,t[10]=i*r+l*o,t[11]=c*r+h*o,t}function St(t,e,n){let r=Math.sin(n),o=Math.cos(n),a=e[0],u=e[1],i=e[2],c=e[3],s=e[4],f=e[5],l=e[6],h=e[7];return e!==t&&(t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[0]=a*o+s*r,t[1]=u*o+f*r,t[2]=i*o+l*r,t[3]=c*o+h*r,t[4]=s*o-a*r,t[5]=f*o-u*r,t[6]=l*o-i*r,t[7]=h*o-c*r,t}function Ft(t,e){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=e[0],t[13]=e[1],t[14]=e[2],t[15]=1,t}function It(t,e){return t[0]=e[0],t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e[1],t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=e[2],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function Ct(t,e,n){let r,o,a,u=n[0],i=n[1],c=n[2],s=Math.hypot(u,i,c);return s<ct?null:(s=1/s,u*=s,i*=s,c*=s,r=Math.sin(e),o=Math.cos(e),a=1-o,t[0]=u*u*a+o,t[1]=i*u*a+c*r,t[2]=c*u*a-i*r,t[3]=0,t[4]=u*i*a-c*r,t[5]=i*i*a+o,t[6]=c*i*a+u*r,t[7]=0,t[8]=u*c*a+i*r,t[9]=i*c*a-u*r,t[10]=c*c*a+o,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t)}function Ot(t,e){let n=Math.sin(e),r=Math.cos(e);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=r,t[6]=n,t[7]=0,t[8]=0,t[9]=-n,t[10]=r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function Vt(t,e){let n=Math.sin(e),r=Math.cos(e);return t[0]=r,t[1]=0,t[2]=-n,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=n,t[9]=0,t[10]=r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function Pt(t,e){let n=Math.sin(e),r=Math.cos(e);return t[0]=r,t[1]=n,t[2]=0,t[3]=0,t[4]=-n,t[5]=r,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function Lt(t,e,n){let r=e[0],o=e[1],a=e[2],u=e[3],i=r+r,c=o+o,s=a+a,f=r*i,l=r*c,h=r*s,d=o*c,p=o*s,m=a*s,v=u*i,y=u*c,b=u*s;return t[0]=1-(d+m),t[1]=l+b,t[2]=h-y,t[3]=0,t[4]=l-b,t[5]=1-(f+m),t[6]=p+v,t[7]=0,t[8]=h+y,t[9]=p-v,t[10]=1-(f+d),t[11]=0,t[12]=n[0],t[13]=n[1],t[14]=n[2],t[15]=1,t}function _t(t,e){let n=new st(3),r=-e[0],o=-e[1],a=-e[2],u=e[3],i=e[4],c=e[5],s=e[6],f=e[7],l=r*r+o*o+a*a+u*u;return l>0?(n[0]=2*(i*u+f*r+c*a-s*o)/l,n[1]=2*(c*u+f*o+s*r-i*a)/l,n[2]=2*(s*u+f*a+i*o-c*r)/l):(n[0]=2*(i*u+f*r+c*a-s*o),n[1]=2*(c*u+f*o+s*r-i*a),n[2]=2*(s*u+f*a+i*o-c*r)),Lt(t,e,n),t}function Bt(t,e){return t[0]=e[12],t[1]=e[13],t[2]=e[14],t}function Rt(t,e){let n=e[0],r=e[1],o=e[2],a=e[4],u=e[5],i=e[6],c=e[8],s=e[9],f=e[10];return t[0]=Math.hypot(n,r,o),t[1]=Math.hypot(a,u,i),t[2]=Math.hypot(c,s,f),t}function Nt(t,e){let n=new st(3);Rt(n,e);let r=1/n[0],o=1/n[1],a=1/n[2],u=e[0]*r,i=e[1]*o,c=e[2]*a,s=e[4]*r,f=e[5]*o,l=e[6]*a,h=e[8]*r,d=e[9]*o,p=e[10]*a,m=u+f+p,v=0;return m>0?(v=2*Math.sqrt(m+1),t[3]=.25*v,t[0]=(l-d)/v,t[1]=(h-c)/v,t[2]=(i-s)/v):u>f&&u>p?(v=2*Math.sqrt(1+u-f-p),t[3]=(l-d)/v,t[0]=.25*v,t[1]=(i+s)/v,t[2]=(h+c)/v):f>p?(v=2*Math.sqrt(1+f-u-p),t[3]=(h-c)/v,t[0]=(i+s)/v,t[1]=.25*v,t[2]=(l+d)/v):(v=2*Math.sqrt(1+p-u-f),t[3]=(i-s)/v,t[0]=(h+c)/v,t[1]=(l+d)/v,t[2]=.25*v),t}function Dt(t,e,n,r){e[0]=r[12],e[1]=r[13],e[2]=r[14];let o=r[0],a=r[1],u=r[2],i=r[4],c=r[5],s=r[6],f=r[8],l=r[9],h=r[10];n[0]=Math.hypot(o,a,u),n[1]=Math.hypot(i,c,s),n[2]=Math.hypot(f,l,h);let d=1/n[0],p=1/n[1],m=1/n[2],v=o*d,y=a*p,b=u*m,g=i*d,M=c*p,x=s*m,E=f*d,A=l*p,T=h*m,w=v+M+T,S=0;return w>0?(S=2*Math.sqrt(w+1),t[3]=.25*S,t[0]=(x-A)/S,t[1]=(E-b)/S,t[2]=(y-g)/S):v>M&&v>T?(S=2*Math.sqrt(1+v-M-T),t[3]=(x-A)/S,t[0]=.25*S,t[1]=(y+g)/S,t[2]=(E+b)/S):M>T?(S=2*Math.sqrt(1+M-v-T),t[3]=(E-b)/S,t[0]=(y+g)/S,t[1]=.25*S,t[2]=(x+A)/S):(S=2*Math.sqrt(1+T-v-M),t[3]=(y-g)/S,t[0]=(E+b)/S,t[1]=(x+A)/S,t[2]=.25*S),t}function Ut(t,e,n,r){let o=e[0],a=e[1],u=e[2],i=e[3],c=o+o,s=a+a,f=u+u,l=o*c,h=o*s,d=o*f,p=a*s,m=a*f,v=u*f,y=i*c,b=i*s,g=i*f,M=r[0],x=r[1],E=r[2];return t[0]=(1-(p+v))*M,t[1]=(h+g)*M,t[2]=(d-b)*M,t[3]=0,t[4]=(h-g)*x,t[5]=(1-(l+v))*x,t[6]=(m+y)*x,t[7]=0,t[8]=(d+b)*E,t[9]=(m-y)*E,t[10]=(1-(l+p))*E,t[11]=0,t[12]=n[0],t[13]=n[1],t[14]=n[2],t[15]=1,t}function kt(t,e,n,r,o){let a=e[0],u=e[1],i=e[2],c=e[3],s=a+a,f=u+u,l=i+i,h=a*s,d=a*f,p=a*l,m=u*f,v=u*l,y=i*l,b=c*s,g=c*f,M=c*l,x=r[0],E=r[1],A=r[2],T=o[0],w=o[1],S=o[2],F=(1-(m+y))*x,I=(d+M)*x,C=(p-g)*x,O=(d-M)*E,V=(1-(h+y))*E,P=(v+b)*E,L=(p+g)*A,_=(v-b)*A,B=(1-(h+m))*A;return t[0]=F,t[1]=I,t[2]=C,t[3]=0,t[4]=O,t[5]=V,t[6]=P,t[7]=0,t[8]=L,t[9]=_,t[10]=B,t[11]=0,t[12]=n[0]+T-(F*T+O*w+L*S),t[13]=n[1]+w-(I*T+V*w+_*S),t[14]=n[2]+S-(C*T+P*w+B*S),t[15]=1,t}function jt(t,e){let n=e[0],r=e[1],o=e[2],a=e[3],u=n+n,i=r+r,c=o+o,s=n*u,f=r*u,l=r*i,h=o*u,d=o*i,p=o*c,m=a*u,v=a*i,y=a*c;return t[0]=1-l-p,t[1]=f+y,t[2]=h-v,t[3]=0,t[4]=f-y,t[5]=1-s-p,t[6]=d+m,t[7]=0,t[8]=h+v,t[9]=d-m,t[10]=1-s-l,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function qt(t,e,n,r,o,a,u){let i=1/(n-e),c=1/(o-r),s=1/(a-u);return t[0]=2*a*i,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=2*a*c,t[6]=0,t[7]=0,t[8]=(n+e)*i,t[9]=(o+r)*c,t[10]=(u+a)*s,t[11]=-1,t[12]=0,t[13]=0,t[14]=u*a*2*s,t[15]=0,t}function Ht(t,e,n,r,o){const a=1/Math.tan(e/2);if(t[0]=a/n,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=a,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=-1,t[12]=0,t[13]=0,t[15]=0,null!=o&&o!==1/0){const e=1/(r-o);t[10]=(o+r)*e,t[14]=2*o*r*e}else t[10]=-1,t[14]=-2*r;return t}Math.hypot||(Math.hypot=function(){for(var t=0,e=arguments.length;e--;)t+=arguments[e]*arguments[e];return Math.sqrt(t)});const Yt=Ht;function Gt(t,e,n,r,o){const a=1/Math.tan(e/2);if(t[0]=a/n,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=a,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=-1,t[12]=0,t[13]=0,t[15]=0,null!=o&&o!==1/0){const e=1/(r-o);t[10]=o*e,t[14]=o*r*e}else t[10]=-1,t[14]=-r;return t}function Kt(t,e,n,r){let o=Math.tan(e.upDegrees*Math.PI/180),a=Math.tan(e.downDegrees*Math.PI/180),u=Math.tan(e.leftDegrees*Math.PI/180),i=Math.tan(e.rightDegrees*Math.PI/180),c=2/(u+i),s=2/(o+a);return t[0]=c,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=s,t[6]=0,t[7]=0,t[8]=-(u-i)*c*.5,t[9]=(o-a)*s*.5,t[10]=r/(n-r),t[11]=-1,t[12]=0,t[13]=0,t[14]=r*n/(n-r),t[15]=0,t}function Jt(t,e,n,r,o,a,u){const i=1/(e-n),c=1/(r-o),s=1/(a-u);return t[0]=-2*i,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*c,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*s,t[11]=0,t[12]=(e+n)*i,t[13]=(o+r)*c,t[14]=(u+a)*s,t[15]=1,t}const Xt=Jt;function Zt(t,e,n,r,o,a,u){const i=1/(e-n),c=1/(r-o),s=1/(a-u);return t[0]=-2*i,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*c,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=s,t[11]=0,t[12]=(e+n)*i,t[13]=(o+r)*c,t[14]=a*s,t[15]=1,t}function Qt(t,e,n,r){let o,a,u,i,c,s,f,l,h,d,p=e[0],m=e[1],v=e[2],y=r[0],b=r[1],g=r[2],M=n[0],x=n[1],E=n[2];return Math.abs(p-M)<ct&&Math.abs(m-x)<ct&&Math.abs(v-E)<ct?mt(t):(f=p-M,l=m-x,h=v-E,d=1/Math.hypot(f,l,h),f*=d,l*=d,h*=d,o=b*h-g*l,a=g*f-y*h,u=y*l-b*f,d=Math.hypot(o,a,u),d?(d=1/d,o*=d,a*=d,u*=d):(o=0,a=0,u=0),i=l*u-h*a,c=h*o-f*u,s=f*a-l*o,d=Math.hypot(i,c,s),d?(d=1/d,i*=d,c*=d,s*=d):(i=0,c=0,s=0),t[0]=o,t[1]=i,t[2]=f,t[3]=0,t[4]=a,t[5]=c,t[6]=l,t[7]=0,t[8]=u,t[9]=s,t[10]=h,t[11]=0,t[12]=-(o*p+a*m+u*v),t[13]=-(i*p+c*m+s*v),t[14]=-(f*p+l*m+h*v),t[15]=1,t)}function Wt(t,e,n,r){let o=e[0],a=e[1],u=e[2],i=r[0],c=r[1],s=r[2],f=o-n[0],l=a-n[1],h=u-n[2],d=f*f+l*l+h*h;d>0&&(d=1/Math.sqrt(d),f*=d,l*=d,h*=d);let p=c*h-s*l,m=s*f-i*h,v=i*l-c*f;return d=p*p+m*m+v*v,d>0&&(d=1/Math.sqrt(d),p*=d,m*=d,v*=d),t[0]=p,t[1]=m,t[2]=v,t[3]=0,t[4]=l*v-h*m,t[5]=h*p-f*v,t[6]=f*m-l*p,t[7]=0,t[8]=f,t[9]=l,t[10]=h,t[11]=0,t[12]=o,t[13]=a,t[14]=u,t[15]=1,t}function zt(t){return"mat4("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+", "+t[8]+", "+t[9]+", "+t[10]+", "+t[11]+", "+t[12]+", "+t[13]+", "+t[14]+", "+t[15]+")"}function $t(t){return Math.hypot(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12],t[13],t[14],t[15])}function te(t,e,n){return t[0]=e[0]+n[0],t[1]=e[1]+n[1],t[2]=e[2]+n[2],t[3]=e[3]+n[3],t[4]=e[4]+n[4],t[5]=e[5]+n[5],t[6]=e[6]+n[6],t[7]=e[7]+n[7],t[8]=e[8]+n[8],t[9]=e[9]+n[9],t[10]=e[10]+n[10],t[11]=e[11]+n[11],t[12]=e[12]+n[12],t[13]=e[13]+n[13],t[14]=e[14]+n[14],t[15]=e[15]+n[15],t}function ee(t,e,n){return t[0]=e[0]-n[0],t[1]=e[1]-n[1],t[2]=e[2]-n[2],t[3]=e[3]-n[3],t[4]=e[4]-n[4],t[5]=e[5]-n[5],t[6]=e[6]-n[6],t[7]=e[7]-n[7],t[8]=e[8]-n[8],t[9]=e[9]-n[9],t[10]=e[10]-n[10],t[11]=e[11]-n[11],t[12]=e[12]-n[12],t[13]=e[13]-n[13],t[14]=e[14]-n[14],t[15]=e[15]-n[15],t}function ne(t,e,n){return t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t[3]=e[3]*n,t[4]=e[4]*n,t[5]=e[5]*n,t[6]=e[6]*n,t[7]=e[7]*n,t[8]=e[8]*n,t[9]=e[9]*n,t[10]=e[10]*n,t[11]=e[11]*n,t[12]=e[12]*n,t[13]=e[13]*n,t[14]=e[14]*n,t[15]=e[15]*n,t}function re(t,e,n,r){return t[0]=e[0]+n[0]*r,t[1]=e[1]+n[1]*r,t[2]=e[2]+n[2]*r,t[3]=e[3]+n[3]*r,t[4]=e[4]+n[4]*r,t[5]=e[5]+n[5]*r,t[6]=e[6]+n[6]*r,t[7]=e[7]+n[7]*r,t[8]=e[8]+n[8]*r,t[9]=e[9]+n[9]*r,t[10]=e[10]+n[10]*r,t[11]=e[11]+n[11]*r,t[12]=e[12]+n[12]*r,t[13]=e[13]+n[13]*r,t[14]=e[14]+n[14]*r,t[15]=e[15]+n[15]*r,t}function oe(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]&&t[4]===e[4]&&t[5]===e[5]&&t[6]===e[6]&&t[7]===e[7]&&t[8]===e[8]&&t[9]===e[9]&&t[10]===e[10]&&t[11]===e[11]&&t[12]===e[12]&&t[13]===e[13]&&t[14]===e[14]&&t[15]===e[15]}function ae(t,e){let n=t[0],r=t[1],o=t[2],a=t[3],u=t[4],i=t[5],c=t[6],s=t[7],f=t[8],l=t[9],h=t[10],d=t[11],p=t[12],m=t[13],v=t[14],y=t[15],b=e[0],g=e[1],M=e[2],x=e[3],E=e[4],A=e[5],T=e[6],w=e[7],S=e[8],F=e[9],I=e[10],C=e[11],O=e[12],V=e[13],P=e[14],L=e[15];return Math.abs(n-b)<=ct*Math.max(1,Math.abs(n),Math.abs(b))&&Math.abs(r-g)<=ct*Math.max(1,Math.abs(r),Math.abs(g))&&Math.abs(o-M)<=ct*Math.max(1,Math.abs(o),Math.abs(M))&&Math.abs(a-x)<=ct*Math.max(1,Math.abs(a),Math.abs(x))&&Math.abs(u-E)<=ct*Math.max(1,Math.abs(u),Math.abs(E))&&Math.abs(i-A)<=ct*Math.max(1,Math.abs(i),Math.abs(A))&&Math.abs(c-T)<=ct*Math.max(1,Math.abs(c),Math.abs(T))&&Math.abs(s-w)<=ct*Math.max(1,Math.abs(s),Math.abs(w))&&Math.abs(f-S)<=ct*Math.max(1,Math.abs(f),Math.abs(S))&&Math.abs(l-F)<=ct*Math.max(1,Math.abs(l),Math.abs(F))&&Math.abs(h-I)<=ct*Math.max(1,Math.abs(h),Math.abs(I))&&Math.abs(d-C)<=ct*Math.max(1,Math.abs(d),Math.abs(C))&&Math.abs(p-O)<=ct*Math.max(1,Math.abs(p),Math.abs(O))&&Math.abs(m-V)<=ct*Math.max(1,Math.abs(m),Math.abs(V))&&Math.abs(v-P)<=ct*Math.max(1,Math.abs(v),Math.abs(P))&&Math.abs(y-L)<=ct*Math.max(1,Math.abs(y),Math.abs(L))}const ue=Mt,ie=ee;var ce=function(t,e,n,r){return new(n||(n=Promise))((function(o,a){function u(t){try{c(r.next(t))}catch(t){a(t)}}function i(t){try{c(r.throw(t))}catch(t){a(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(u,i)}c((r=r.apply(t,e||[])).next())}))},se=function(t,e){var n,r,o,a,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function i(a){return function(i){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return u.label++,{value:a[1],done:!1};case 5:u.label++,r=a[1],a=[0];continue;case 7:a=u.ops.pop(),u.trys.pop();continue;default:if(!(o=u.trys,(o=o.length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){u=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){u.label=a[1];break}if(6===a[0]&&u.label<o[1]){u.label=o[1],o=a;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(a);break}o[2]&&u.ops.pop(),u.trys.pop();continue}a=e.call(t,u)}catch(t){a=[6,t],r=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,i])}}};ce(void 0,void 0,void 0,(function(){var t,e,n,o,a,u,l,h,d,m,g,M,x,E,T,w,I,C,O,_,B,R,N,D,U,Y,G,K,J,X,Z,W;return se(this,(function(z){var $,tt,et;return t=new at,e=i(),n=document.getElementById("viewer"),o=b("viewer-options"),a=b("viewer-shader-options"),u=b("viewer-content shader-errors"),l=ot("viewer-content"),h=l[0],d=l[1],m=new Map([["positions",{name:"Binding - Mesh positions",type:S.FLOAT_VEC4,value:new H([])}],["colors",{name:"Binding - Mesh colors",type:S.FLOAT_VEC4,value:new H([])}]]),g={drawMode:"arrays"},n.appendChild(h),n.appendChild(u),n.appendChild(o),M=function(t){h.style.visibility="canvas"===t?"visible":"collapse",u.style.visibility="errors"===t?"visible":"collapse"},x=function(){t.getShaderDocuments().then((function(t){var n=t.map((function(t){return{id:t.filePath,display:t.fileName}}));N.setItems(n),e.vertexFilePath&&n.some((function(t){return t.id===e.vertexFilePath}))&&N.setSelectedItemById(e.vertexFilePath),Y.setItems(n),e.fragmentFilePath&&n.some((function(t){return t.id===e.fragmentFilePath}))&&Y.setSelectedItemById(e.fragmentFilePath)}))},C=null,O=function(t){var e=it.get(t),n=e.positions,r=e.colors;m.get("positions").value.setValue(n),m.get("colors").value.setValue(r)},_=function(){a.innerHTML="";var t=d.context;if(I&&w){var e=function(t,e,n){var r=j(t,t.VERTEX_SHADER,e),o=j(t,t.FRAGMENT_SHADER,n),a=void 0;A(r,"error")&&(a=k(r.error,1));var u=void 0;return A(o,"error")&&(u=k(o.error,1)),a||u?[a,u]:q(t,r,o)}(t,w,I);if(Array.isArray(e))M("errors"),u.innerText=function(t){var e=t[0],n=t[1],r=[];return e&&r.push("VERTEX SHADER:",e),n&&r.push("FRAGMENT SHADER:",n),r.join("\r\n")}(e);else{M("canvas");var n=e,o=function(t,e){for(var n=t.getProgramParameter(e,t.ACTIVE_UNIFORMS),r=[],o=0;o<n;++o){var a=t.getActiveUniform(e,o);r.push({name:a.name,type:a.type})}return r}(t,n),i=function(t,e){for(var n=t.getProgramParameter(e,t.ACTIVE_ATTRIBUTES),r=[],o=0;o<n;++o){var a=t.getActiveAttrib(e,o);r.push({name:a.name,type:a.type})}return r}(t,n),c=function(t,e,n){var r=n.map((function(n){var r=V({},n),o=P.get(r);if(o)return o.uniformInfo.attachToProgram(e),{key:r,value:o};var a=new F(t,e,n.name,n.type);return{key:r,value:{component:y(L(a),n.name),uniformInfo:a}}}));return P.clear(),r.forEach((function(t){return P.set(t.key,t.value)})),r.map((function(t){return t.value}))}(t,n,o);c.forEach((function(t){return a.appendChild(t.component)}));var f=Q(t,n,i,Array.from(m.values()));f.forEach((function(t){return a.appendChild(t.component)}));var l=c.map((function(t){return t.uniformInfo})),h=f.map((function(t){return t.attributeBufferInfo})),p=new s(t);p.setValue([0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23]),null!==C&&cancelAnimationFrame(C);var v=0,b=l.find((function(t){return"uModelViewMatrix"===t.getUniformName()})),x=l.find((function(t){return"uProjectionMatrix"===t.getUniformName()})),E=0,T=function(e){var o=(e*=.001)-E;E=e;var a=45*Math.PI/180,u=t.canvas,i=u.clientWidth/u.clientHeight,c=r.create();r.perspective(c,a,i,.1,100);var s=r.create();r.translate(s,s,[-0,0,-6]),r.rotate(s,s,v,[0,0,1]),r.rotate(s,s,.7*v,[0,1,0]),x.setValue(c),b.setValue(s),function(t,e,n,r){t.useProgram(e),t.viewport(0,0,t.canvas.width,t.canvas.height),t.clearColor(0,0,0,1),t.clearDepth(1),t.enable(t.DEPTH_TEST),t.depthFunc(t.LEQUAL),t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT),n.uniformInfos.forEach((function(t){return t.setUniform()})),n.attributeBufferInfos.forEach((function(t){return t.setAttributeBuffer()}));var o=Math.min.apply(Math,n.attributeBufferInfos.map((function(t){return t.getNumElements()}))),a=t.TRIANGLES;"arrays"===r.drawMode?t.drawArrays(a,0,o):(n.indexBufferInfo.setIndexBuffer(),t.drawElements(a,36,t.UNSIGNED_SHORT,0))}(t,n,{uniformInfos:l,attributeBufferInfos:h,indexBufferInfo:p},g),v+=o,C=requestAnimationFrame(T)};T(0)}}else M("none")},o.appendChild(b("viewer-shaders-title",[($=f,tt="",et=document.createElement("h3"),et.textContent=$,et.className=tt+" section-title",{element:et}).element,v("Sync","viewer-refresh-button",x).element])),B=p((function(e){return ce(void 0,void 0,void 0,(function(){var n;return se(this,(function(r){switch(r.label){case 0:return null==E||E(),e&&(E=t.subscribeToDocumentSave(e.id,(function(t){w=t,_()}))),e?[4,t.getDocumentText(e.id)]:[3,2];case 1:return n=r.sent(),[3,3];case 2:n="",r.label=3;case 3:return w=n,c({vertexFilePath:e?e.id:null}),_(),[2]}}))}))})),R=B[0],(N=B[1]).setSelectedItemById(e.vertexFilePath),o.appendChild(y(R,"Vertex Shader")),D=p((function(e){return ce(void 0,void 0,void 0,(function(){var n;return se(this,(function(r){switch(r.label){case 0:return null==T||T(),e&&(T=t.subscribeToDocumentSave(e.id,(function(t){I=t,_()}))),e?[4,t.getDocumentText(e.id)]:[3,2];case 1:return n=r.sent(),[3,3];case 2:n="",r.label=3;case 3:return I=n,c({fragmentFilePath:e?e.id:null}),_(),[2]}}))}))})),U=D[0],(Y=D[1]).setSelectedItemById(e.fragmentFilePath),o.appendChild(y(U,"Fragment Shader")),G=p((function(t){return t&&O(t.id)}),void 0,{emptyItem:!1}),K=G[0],(J=G[1]).setItems(Array.from(it.entries()).map((function(t){return{id:t[0],display:t[1].display}}))),J.setSelectedItemByIndex(0),o.appendChild(y(K,"Mesh")),X=p((function(t){t&&(g.drawMode=t.id,c({drawMode:t.id}))}),void 0,{emptyItem:!1}),Z=X[0],(W=X[1]).setItems([{id:"arrays",display:"Arrays"},{id:"elements",display:"Elements"}]),W.setSelectedItemById(e.drawMode),o.appendChild(y(Z,"Draw mode")),o.appendChild(a),x(),[2]}))}))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,