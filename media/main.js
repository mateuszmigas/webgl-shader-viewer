!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);var r,o=function(e,t){var n=e.indexOf(t);n>-1&&e.splice(n,1)},i=function(e,t){return e.substring(0,e.length-t)},u=function(){function e(e){this.value=e,this.observers=[]}return e.prototype.attach=function(e){this.observers.push(e)},e.prototype.detach=function(e){o(this.observers,e)},e.prototype.detachAll=function(){this.observers.length=0},e.prototype.setValue=function(e){this.value=e,this.notify()},e.prototype.getValue=function(){return this.value},e.prototype.forceNotify=function(){this.notify()},e.prototype.notify=function(){if(null!==this.value){var e=this.value;this.observers.forEach((function(t){return t(e)}))}},e}(),a="SHADERS",c=function(){return(c=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},s=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],u=0,a=i.length;u<a;u++,o++)r[o]=i[u];return r},l={emptyItem:!0},f=function(e,t,n){var r=c(c({},l),n),o=document.createElement("select");o.className="dropdown-base "+t;var i=null,u=[],a=function(t){e(i=t)};o.onchange=function(){var e=u.find((function(e){return e.item.id===o.value}));e.item.id?a(e.item):a(null)};var f=function(e){a(null),u.forEach((function(t){t.item.id===e?(t.element.selected=!0,a(t.item)):t.element.selected=!1}))};return[o,{setItems:function(e){o.innerHTML="",u.length=0,e.find((function(e){return e.id===(null==i?void 0:i.id)}))||a(null),(r.emptyItem?s([{id:"",display:""}],e):s(e)).forEach((function(e){var t=document.createElement("option");t.value=e.id,t.textContent=e.display,t.selected=e.id===(null==i?void 0:i.id),o.appendChild(t),u.push({element:t,item:e})}))},getItems:function(){return u.map((function(e){return e.item}))},setSelectedItemById:f,setSelectedItemByIndex:function(e){return f(u[e].item.id)},getSelectedItem:function(){return i},clearSelection:function(){u.forEach((function(e){return e.element.selected=!1})),a(null)}}]},p=function(e,t){var n=f((function(n){n?(e.forEach((function(e){return e.element.classList.add("hidden")})),e.find((function(e){return e.id===n.id})).element.classList.remove("hidden"),null==t||t(n.id)):null==t||t(null)}),"",{emptyItem:!1}),r=n[0],o=n[1];return o.setItems(e.map((function(e){return{id:e.id,display:e.display}}))),o.setSelectedItemByIndex(0),r},d=function(e){return{id:"custom",display:"Custom",element:e}},h=function(e,t,n){var r=document.createElement("button");return r.onclick=n,r.className=t,r.textContent=e,{element:r}},m=function(e,t,n){var r=document.createElement("div");r.className=(null!=n?n:"")+" options-wrapper";var o=document.createElement("label");return o.className="options-label",o.textContent=t,e.className=e.className+" options-content",r.appendChild(o),r.appendChild(e),r},v=function(e,t){var n=document.createElement("div");return n.className=e,null==t||t.forEach((function(e){return n.appendChild(e)})),n},y=function(e,t,n,r,o){var i=document.createElement("div");i.className="edit-input-grid";for(var u=[],a=function(){return u.map((function(e){return e.value}))},c=0;c<n;c++){var s=document.createElement("div");s.className="edit-input-row";for(var l=function(n){var i=c*r+n,l=e[i],f=document.createElement("input"),p={element:f,value:l};Object.assign(f,o),f.className="edit-input",f.type="number",f.value=null==l?void 0:l.toString(),f.oninput=function(){u[i].value=Number(f.value),null==t||t(a())},u.push(p),s.appendChild(f)},f=0;f<r;f++)l(f);i.appendChild(s)}return[i,{setValues:function(e){return u.forEach((function(t,n){t.value=e[n],t.element.value=t.value.toString()}))},getValues:a,setReadonly:function(e){return u.forEach((function(t){return t.element.readOnly=e}))}}]},g=function(e){return y([0,0,0],e,1,3)},b=function(){return(b=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},x={min:"0",max:"1",step:"0.1"},E=function(e,t){return e.hasOwnProperty(t)},A=function(e){throw new Error("Unhandled union member: "+JSON.stringify(e))},T=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],u=0,a=i.length;u<a;u++,o++)r[o]=i[u];return r};!function(e){e[e.FLOAT_VEC2=35664]="FLOAT_VEC2",e[e.FLOAT_VEC3=35665]="FLOAT_VEC3",e[e.FLOAT_VEC4=35666]="FLOAT_VEC4",e[e.SAMPLER_2D=35678]="SAMPLER_2D"}(r||(r={}));var w,C=function(){function e(e,t,n,r){this.context=e,this.name=n,this.type=r,this.attachToProgram(t)}return e.prototype.attachToProgram=function(e){var t=this.context.getUniformLocation(e,this.name);this.setter=S(this.type,this.context,t)},e.prototype.setValue=function(e){this.value=e},e.prototype.setUniform=function(){null!==this.value&&this.setter(this.value)},e.prototype.getUniformType=function(){return this.type},e.prototype.dispose=function(){},e}(),S=function(e,t,n){switch(e){case r.FLOAT_VEC2:return function(e){return t.uniform2f.apply(t,T([n],e))};case r.FLOAT_VEC3:return function(e){return t.uniform3f.apply(t,T([n],e))};case r.FLOAT_VEC4:return function(e){return t.uniform4f.apply(t,T([n],e))};case r.SAMPLER_2D:return function(e){};default:A(e)}},V=function(){function e(e){this.keySelector=e,this.map=new Map}return e.prototype.get=function(e){return this.map.get(this.keySelector(e))},e.prototype.set=function(e,t){this.map.set(this.keySelector(e),t)},e.prototype.has=function(e){return this.map.has(this.keySelector(e))},e.prototype.entriesStrKey=function(){return Array.from(this.map.entries())},e.prototype.deleteStrKey=function(e){this.map.delete(e)},e.prototype.delete=function(e){this.map.delete(this.keySelector(e))},e.prototype.clear=function(){this.map.clear()},e}(),O=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){var t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}))},L=function(){return(L=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},_=new V((function(e){return e.name+";"+e.type})),I=function(e){switch(e.getUniformType()){case r.FLOAT_VEC2:return F((function(t){return e.setValue(t)}));case r.FLOAT_VEC3:return B((function(t){return e.setValue(t)}));case r.FLOAT_VEC4:var t=[1,0,0,1];return e.setValue(t),R(t,(function(t){return e.setValue(t)}));case r.SAMPLER_2D:return N((function(t){O();e.setValue({slot:t.slot,textureData:!0})}));default:return P()}},P=function(){var e=document.createElement("div");return e.className="unsupported-error",e.innerText="Not supported uniform",e},F=function(e){var t=y([0,0],e,1,2),n=t[0];return t[1].setValues([0,0]),n},N=function(e){var t=g(),n=t[0];return t[1].setValues([0,0,0]),n},B=function(e){var t=g(e),n=t[0];t[1].setValues([0,0,0]);var r=function(e){var t=[.5,.5,.5],n=document.createElement("div");n.className="edit-input-color";var r=function(e){n.style.background="rgb("+255*e[0]+","+255*e[1]+","+255*e[2]+",1)"};r(t);var o=v("row-with-gap"),i=y(t,(function(t){r(t),null==e||e(t)}),1,3,x),u=i[0],a=i[1];return o.appendChild(u),o.appendChild(n),[o,b(b({},a),{setValues:function(e){a.setValues(e),r(e)}})]}(e),o=r[0];r[1].setValues([1,0,0]);var i=p([{id:"custom",display:"Custom",element:n},{id:"color",display:"Color",element:o}]);return v("column-with-gap",[i,n,o])},R=function(e,t){var n=y([0,0,0,0],t,1,4),r=n[0];n[1].setValues(e);var o=function(e){var t=[.5,.5,.5,1],n=document.createElement("div");n.className="edit-input-color";var r=function(e){n.style.background="rgb("+255*e[0]+","+255*e[1]+","+255*e[2]+","+e[3]+")"};r(t);var o=v("row-with-gap"),i=y(t,(function(t){r(t),null==e||e(t)}),1,4,x),u=i[0],a=i[1];return o.appendChild(u),o.appendChild(n),[o,b(b({},a),{setValues:function(e){a.setValues(e),r(e)}})]}(t),i=o[0];o[1].setValues(e);var u=p([{id:"custom",display:"Custom",element:r},{id:"color",display:"Color",element:i}]);return v("column-with-gap",[u,r,i])},D=function(e,t,n){var r=e.createShader(t);if(e.shaderSource(r,n),e.compileShader(r),e.getShaderParameter(r,e.COMPILE_STATUS))return r;var o=e.getShaderInfoLog(r);return e.deleteShader(r),{error:o}},M=function(e,t,n){var r=e.createProgram();if(e.attachShader(r,t),e.attachShader(r,n),e.linkProgram(r),e.getProgramParameter(r,e.LINK_STATUS))return r;throw e.deleteProgram(r),new Error("Creating program failed: "+e.getProgramInfoLog(r))};!function(e){e[e.FLOAT_VEC3=35665]="FLOAT_VEC3",e[e.FLOAT_VEC4=35666]="FLOAT_VEC4"}(w||(w={}));var k=function(){function e(e,t,n,r){this.context=e,this.name=n,this.type=r,this.numElements=0,this.attachToProgram(t),this.buffer=e.createBuffer()}return e.prototype.attachToProgram=function(e){this.location=this.context.getAttribLocation(e,this.name)},e.prototype.setValue=function(e){this.numElements=e.length,this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffer);var t=[].concat.apply([],e);console.log("setting value",t),this.context.bufferData(this.context.ARRAY_BUFFER,new Float32Array(t),this.context.STATIC_DRAW)},e.prototype.setAttributeBuffer=function(){if(null!==this.buffer){this.context.enableVertexAttribArray(this.location),this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffer);var e=j(this.type),t=this.context.FLOAT;this.context.vertexAttribPointer(this.location,e,t,!1,0,0)}},e.prototype.getAttributeBufferType=function(){return this.type},e.prototype.getNumElements=function(){return this.numElements},e.prototype.deleteBuffer=function(){this.context.deleteBuffer(this.buffer),this.buffer=null},e}(),j=function(e){switch(e){case w.FLOAT_VEC3:return 3;case w.FLOAT_VEC4:return 4;default:A(e)}},U=function(){return(U=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},H=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],u=0,a=i.length;u<a;u++,o++)r[o]=i[u];return r},K=function(e){return e.name+";"+e.type},G=new V(K),J=function(e,t,n,r){var o,i,u=n.map((function(n){var o=U({},n),i=G.get(o);if(i)return i.attributeBufferInfo.attachToProgram(t),{key:o,value:i};var u=new k(e,t,n.name,n.type),a=r.filter((function(e){return e.type===u.getAttributeBufferType()})),c=a.length?z(u,a):X(u),s=c.element,l=c.dispose;return{key:o,value:{component:m(s,n.name),attributeBufferInfo:u,dispose:function(){u.deleteBuffer(),null==l||l()}}}}));return i=(o=u).map((function(e){return K(e.key)})),G.entriesStrKey().filter((function(e){return!i.includes(e[0])})).forEach((function(e){e[1].dispose(),G.deleteStrKey(e[0])})),o.forEach((function(e){G.has(e.key)||G.set(e.key,e.value)})),u.map((function(e){return e.value}))},Y=function(e,t,n){switch(e){case w.FLOAT_VEC4:return W(n,t);default:return q()}},q=function(){var e=document.createElement("div");return e.className="unsupported-error",e.innerText="Not supported attribute buffer",e},X=function(e){var t=new u((e.getAttributeBufferType(),[[0,0,0,1],[0,.5,0,1],[.9,0,0,1],[0,.5,0,1],[.7,0,0,1],[.7,.5,0,1]]));return t.attach((function(t){e.setValue(t)})),{element:Y(e.getAttributeBufferType(),!0,t),dispose:function(){return t.detachAll()}}},z=function(e,t){var n=t.map((function(t){var n=Y(e.getAttributeBufferType(),!1,t.value);return{id:O(),element:n,display:t.name,value:t.value}})),r=new u((e.getAttributeBufferType(),[[0,0,0,1],[0,.5,0,1],[.9,0,0,1],[0,.5,0,1],[.7,0,0,1],[.7,.5,0,1]]));r.attach((function(t){return e.setValue(t)}));var o=Y(e.getAttributeBufferType(),!0,r),i=void 0;return{element:v("column-with-gap",H([p(H([d(o)],n),(function(t){null==i||i();var o=n.find((function(e){return e.id===t}));if(o){var u=function(t){return e.setValue(t)};o.value.attach(u),u(o.value.getValue()),i=function(){return o.value.detach(u)}}else r.forceNotify()})),o],n.map((function(e){return e.element})))),dispose:function(){null==i||i(),r.detachAll()}}},W=function(e,t){var n=document.createElement("input");if(n.className="edit-input",n.disabled=!t,!t){e.attach((function(e){return n.value=JSON.stringify(e)}))}return n.value=JSON.stringify(e.getValue()),n.oninput=function(){try{var t=JSON.parse(n.value);if(Array.isArray(t))t.every((function(e){return!!Array.isArray(e)&&4===e.length}));else;e.setValue(t)}catch(e){console.log("this is not a json")}},n},Q=function(e){var t=document.createElement("canvas");t.className=e;var n,r,o=t.getContext("webgl");if(n=t,r=function(e){t.width=e.width,t.height=e.height},new ResizeObserver((function(e){var t=e.find((function(e){return e.target===n}));if(t){var o=t.target.getBoundingClientRect();r({x:o.x,y:o.y,width:o.width,height:o.height})}})).observe(n),!o)throw new Error("Unable to create webgl context");return[t,{context:o}]},Z=acquireVsCodeApi(),$=function(){function e(){var e=this;this.eventListeners=[],window.addEventListener("message",(function(t){e.eventListeners.forEach((function(e){return e(t.data)}))}))}return e.prototype.getShaderDocuments=function(){var e=this,t=O();return Z.postMessage({type:"getShaderDocuments",id:t}),new Promise((function(n){var r=function(o){"getShaderDocuments"===o.type&&o.id===t&&(n(o.payload.files),e.removeListener(r))};e.eventListeners.push(r)}))},e.prototype.getDocumentText=function(e){var t=this,n=O();return Z.postMessage({type:"getDocumentText",id:n,payload:{fileName:e}}),new Promise((function(e){var r=function(o){"getDocumentText"===o.type&&o.id===n&&(e(o.payload.text),t.removeListener(r))};t.eventListeners.push(r)}))},e.prototype.subscribeToDocumentSave=function(e,t){var n=this;Z.postMessage({type:"subscribeToDocumentTextChange",payload:{fileName:e}});var r=function(n){"onDocumentTextChange"===n.type&&n.payload.filePath===e&&t(n.payload.text)};return this.eventListeners.push(r),function(){n.removeListener(r),Z.postMessage({type:"unsubscribeToDocumentTextChange",payload:{fileName:e}})}},e.prototype.removeListener=function(e){o(this.eventListeners,e)},e}(),ee=[{id:"cube",display:"Cube"},{id:"sphere",display:"Sphere"}],te=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function u(e){try{c(r.next(e))}catch(e){i(e)}}function a(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(u,a)}c((r=r.apply(e,t||[])).next())}))},ne=function(e,t){var n,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!(o=u.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=t.call(e,u)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};te(void 0,void 0,void 0,(function(){var e,t,n,r,o,c,s,l,p,d,y,g,b,x,A,T,S,V,O,P,F,N,B,R,k;return ne(this,(function(j){var U,H,K;return e=[{name:"Binding - Cube normals",type:w.FLOAT_VEC4,value:new u([[0,0,0,1],[0,.5,0,1],[.4,0,0,1],[0,.5,0,1],[.7,0,0,1],[.7,.5,0,1]])},{name:"Binding - Cube tangents",type:w.FLOAT_VEC4,value:new u([[0,0,0,1],[0,.5,0,1],[.5,0,0,1],[0,.5,0,1],[.7,0,0,1],[.7,.5,0,1]])}],t=new $,n=document.getElementById("viewer"),r=v("viewer-options"),o=v("viewer-shader-options"),c=v("viewer-content shader-errors"),s=Q("viewer-content"),l=s[0],p=s[1],n.appendChild(l),n.appendChild(c),n.appendChild(r),d=function(e){l.style.visibility="canvas"===e?"visible":"collapse",c.style.visibility="errors"===e?"visible":"collapse"},y=function(){t.getShaderDocuments().then((function(e){var t=e.map((function(e){return{id:e.filePath,display:e.fileName}}));P.setItems(t),B.setItems(t)}))},T=null,S=function(){o.innerHTML="";var t=p.context;if(A&&x){var n=function(e,t,n){var r=D(e,e.VERTEX_SHADER,t),o=D(e,e.FRAGMENT_SHADER,n),u=void 0;E(r,"error")&&(u=i(r.error,1));var a=void 0;return E(o,"error")&&(a=i(o.error,1)),u||a?[u,a]:M(e,r,o)}(t,x,A);if(Array.isArray(n))d("errors"),c.innerText=function(e){var t=e[0],n=e[1],r=[];return t&&r.push("VERTEX SHADER:",t),n&&r.push("FRAGMENT SHADER:",n),r.join("\r\n")}(n);else{d("canvas");var r=n,u=function(e,t){for(var n=e.getProgramParameter(t,e.ACTIVE_UNIFORMS),r=[],o=0;o<n;++o){var i=e.getActiveUniform(t,o);r.push({name:i.name,type:i.type})}return r}(t,r),a=function(e,t){for(var n=e.getProgramParameter(t,e.ACTIVE_ATTRIBUTES),r=[],o=0;o<n;++o){var i=e.getActiveAttrib(t,o);r.push({name:i.name,type:i.type})}return r}(t,r),s=function(e,t,n){var r=n.map((function(n){var r=L({},n),o=_.get(r);if(o)return o.uniformInfo.attachToProgram(t),{key:r,value:o};var i=new C(e,t,n.name,n.type);return{key:r,value:{component:m(I(i),n.name),uniformInfo:i}}}));return _.clear(),r.forEach((function(e){return _.set(e.key,e.value)})),r.map((function(e){return e.value}))}(t,r,u);s.forEach((function(e){return o.appendChild(e.component)}));var l=J(t,r,a,e);l.forEach((function(e){return o.appendChild(e.component)}));var f=s.map((function(e){return e.uniformInfo})),h=l.map((function(e){return e.attributeBufferInfo}));null!==T&&cancelAnimationFrame(T);var v=function(){!function(e,t,n){e.useProgram(t),e.viewport(0,0,e.canvas.width,e.canvas.height),e.clearColor(0,0,0,0),e.clear(e.COLOR_BUFFER_BIT),n.uniformInfos.forEach((function(e){return e.setUniform()})),n.attributeBufferInfos.forEach((function(e){return e.setAttributeBuffer()}));var r=Math.min.apply(Math,n.attributeBufferInfos.map((function(e){return e.getNumElements()}))),o=e.TRIANGLES;console.log("drawing",r),e.drawArrays(o,0,r)}(t,r,{uniformInfos:f,attributeBufferInfos:h}),T=requestAnimationFrame(v)};v()}}else d("none")},r.appendChild(v("viewer-shaders-title",[(U=a,H="",K=document.createElement("h3"),K.textContent=U,K.className=H+" section-title",{element:K}).element,h("Sync","viewer-refresh-button",y).element])),V=f((function(e){return te(void 0,void 0,void 0,(function(){var n;return ne(this,(function(r){switch(r.label){case 0:return null==g||g(),e&&(g=t.subscribeToDocumentSave(e.id,(function(e){x=e,S()}))),e?[4,t.getDocumentText(e.id)]:[3,2];case 1:return n=r.sent(),[3,3];case 2:n="",r.label=3;case 3:return x=n,S(),[2]}}))}))})),O=V[0],P=V[1],r.appendChild(m(O,"Vertex Shader")),F=f((function(e){return te(void 0,void 0,void 0,(function(){var n;return ne(this,(function(r){switch(r.label){case 0:return null==b||b(),e&&(b=t.subscribeToDocumentSave(e.id,(function(e){A=e,S()}))),e?[4,t.getDocumentText(e.id)]:[3,2];case 1:return n=r.sent(),[3,3];case 2:n="",r.label=3;case 3:return A=n,S(),[2]}}))}))})),N=F[0],B=F[1],r.appendChild(m(N,"Fragment Shader")),R=f((function(){return S()})),k=R[0],R[1].setItems(ee),r.appendChild(m(k,"Mesh")),r.appendChild(o),y(),[2]}))}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbW1vbi9hcnJheS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL3NyYy91dGlscy93ZWJnbC91bmlmb3JtLnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvc3JjL3V0aWxzL29ic2VydmFibGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbW1vbi90cmFuc2xhdGlvbnMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvY29tcG9uZW50cy9kcm9wZG93bi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL3NyYy9jb21wb25lbnRzL2J1dHRvbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL3NyYy9jb21wb25lbnRzL3dyYXBwZXJzLnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvc3JjL2NvbXBvbmVudHMvaGVscGVycy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL3NyYy9jb21wb25lbnRzL2lucHV0TnVtYmVyLnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvc3JjL2NvbXBvbmVudHMvaW5wdXRDb2xvci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL3NyYy91dGlscy90eXBlR3VhcmRzLnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvc3JjL3V0aWxzL3dlYmdsL2F0dHJpYnV0ZUJ1ZmZlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL3NyYy91dGlscy9jb21wb3NpdGVLZXlNYXAudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbW1vbi91dWlkLnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvc3JjL3V0aWxzL3dlYmdsL3VuaWZvcm1Db21wb25lbnQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvdXRpbHMvd2ViZ2wvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvdXRpbHMvd2ViZ2wvYXR0cmlidXRlQnVmZmVyQ29tcG9uZW50LnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvc3JjL2NvbXBvbmVudHMvd2ViZ2xDYW52YXMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvdXRpbHMvaHRtbC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2NvbW11bmljYXRpb24vdmlld2VyRW5kcG9pbnQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvbWVzaGVzLnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvc3JjL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvc3JjL2NvbXBvbmVudHMvaGVhZGVyLnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiVW5pZm9ybVR5cGUiLCJyZW1vdmUiLCJhcnJheSIsIml0ZW0iLCJpbmRleCIsImluZGV4T2YiLCJzcGxpY2UiLCJyZW1vdmVMYXN0IiwidGV4dCIsImNvdW50Iiwic3Vic3RyaW5nIiwibGVuZ3RoIiwib2JzZXJ2ZXJzIiwiYXR0YWNoIiwib2JzZXJ2ZXIiLCJ0aGlzIiwicHVzaCIsImRldGFjaCIsImRldGFjaEFsbCIsInNldFZhbHVlIiwibmV3VmFsdWUiLCJub3RpZnkiLCJnZXRWYWx1ZSIsImZvcmNlTm90aWZ5IiwiZm9yRWFjaCIsInRyYW5zbGF0aW9ucyIsImRlZmF1bHRPcHRpb25zIiwiZW1wdHlJdGVtIiwiY3JlYXRlRHJvcGRvd24iLCJvbkNoYW5nZSIsImNsYXNzTmFtZSIsIm9wdGlvbnMiLCJjb21iaW5lZE9wdGlvbnMiLCJlbGVtZW50IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2VsZWN0ZWRJdGVtIiwiaXRlbUVsZW1lbnRzIiwic2V0U2VsZWN0ZWRJdGVtIiwib25jaGFuZ2UiLCJmb3VuZEVsZW1lbnQiLCJmaW5kIiwiZSIsImlkIiwic2V0U2VsZWN0ZWRJdGVtQnlJZCIsImllIiwic2VsZWN0ZWQiLCJzZXRJdGVtcyIsIml0ZW1zIiwiaW5uZXJIVE1MIiwiZGlzcGxheSIsIm9wdGlvbiIsInRleHRDb250ZW50IiwiYXBwZW5kQ2hpbGQiLCJnZXRJdGVtcyIsIm1hcCIsInNldFNlbGVjdGVkSXRlbUJ5SW5kZXgiLCJnZXRTZWxlY3RlZEl0ZW0iLCJjbGVhclNlbGVjdGlvbiIsImNyZWF0ZUVsZW1lbnRzRHJvcGRvd24iLCJlbGVtZW50cyIsIm9lIiwiY2xhc3NMaXN0IiwiYWRkIiwib3B0aW9uc0VsZW1lbnQiLCJvcHRpb25zQ29udHJvbGxlciIsImNyZWF0ZUN1c3RvbUVsZW1lbnRPcHRpb24iLCJjcmVhdGVCdXR0b24iLCJvbkNsaWNrIiwiYnV0dG9uIiwib25jbGljayIsIndpdGhMYWJlbCIsIndyYXBwZXIiLCJsYWJlbCIsImNyZWF0ZURpdiIsImNoaWxkcmVuIiwiZGl2IiwiY3JlYXRlTXVsdGlOdW1iZXJJbnB1dCIsImluaXRpYWxWYWx1ZSIsInJvd3MiLCJjb2x1bW5zIiwiaW5wdXRPcHRpb25zIiwiaW5wdXRHcmlkIiwiZ2V0VmFsdWVzIiwicm93IiwiaW5wdXRSb3ciLCJjb2x1bW4iLCJpbnB1dCIsIml0ZW1FbGVtZW50IiwiYXNzaWduIiwidHlwZSIsInRvU3RyaW5nIiwib25pbnB1dCIsIk51bWJlciIsInNldFZhbHVlcyIsIm5ld1ZhbHVlcyIsInNldFJlYWRvbmx5IiwicmVhZG9ubHkiLCJyZWFkT25seSIsImNyZWF0ZVZlY3RvcjMiLCJjb2xvcklucHV0UHJvcHMiLCJtaW4iLCJtYXgiLCJzdGVwIiwiaGFzUHJvcGVydHkiLCJvYmoiLCJwcm9wIiwiYXNzZXJ0TmV2ZXIiLCJFcnJvciIsIkpTT04iLCJzdHJpbmdpZnkiLCJBdHRyaWJ1dGVCdWZmZXJUeXBlIiwiY29udGV4dCIsInByb2dyYW0iLCJhdHRhY2hUb1Byb2dyYW0iLCJsb2NhdGlvbiIsImdldFVuaWZvcm1Mb2NhdGlvbiIsInNldHRlciIsImNyZWF0ZVVuaWZvcm1TZXR0ZXIiLCJzZXRVbmlmb3JtIiwiZ2V0VW5pZm9ybVR5cGUiLCJkaXNwb3NlIiwiRkxPQVRfVkVDMiIsInVuaWZvcm0yZiIsIkZMT0FUX1ZFQzMiLCJ1bmlmb3JtM2YiLCJGTE9BVF9WRUM0IiwidW5pZm9ybTRmIiwiU0FNUExFUl8yRCIsImtleVNlbGVjdG9yIiwiTWFwIiwic2V0IiwiaGFzIiwiZW50cmllc1N0cktleSIsIkFycmF5IiwiZnJvbSIsImVudHJpZXMiLCJkZWxldGVTdHJLZXkiLCJkZWxldGUiLCJjbGVhciIsInV1aWR2NCIsInJlcGxhY2UiLCJNYXRoIiwicmFuZG9tIiwidW5pZm9ybUNvbXBvbmVudENhY2hlIiwiQ29tcG9zaXRlS2V5TWFwIiwiY3JlYXRlVW5pZm9ybUNvbXBvbmVudCIsInVuaWZvcm1JbmZvIiwiY3JlYXRlVW5pZm9ybUZvclZlYzIiLCJjcmVhdGVVbmlmb3JtRm9yVmVjMyIsImNyZWF0ZVVuaWZvcm1Gb3JWZWM0IiwiY3JlYXRlVW5pZm9ybUZvclRleHR1cmUiLCJzbG90IiwidGV4dHVyZURhdGEiLCJjcmVhdGVVbmlmb3JtTm90U3VwcG9ydGVkIiwiaW5uZXJUZXh0IiwidXBkYXRlIiwiY3VzdG9tRWxlbWVudCIsImNvbG9yRGl2Iiwic2V0Q29sb3IiLCJjb2xvciIsInN0eWxlIiwiYmFja2dyb3VuZCIsImNvbnRhaW5lciIsImNvbnRyb2xsZXIiLCJjcmVhdGVDb2xvcjMiLCJjb2xvckVsZW1lbnQiLCJjcmVhdGVDb2xvcjQiLCJjb21waWxlU2hhZGVyIiwicmVuZGVyaW5nQ29udGV4dCIsInNvdXJjZSIsInNoYWRlciIsImNyZWF0ZVNoYWRlciIsInNoYWRlclNvdXJjZSIsImdldFNoYWRlclBhcmFtZXRlciIsIkNPTVBJTEVfU1RBVFVTIiwiZXJyb3IiLCJnZXRTaGFkZXJJbmZvTG9nIiwiZGVsZXRlU2hhZGVyIiwiY3JlYXRlUHJvZ3JhbSIsInZlcnRleFNoYWRlciIsImZyYWdtZW50U2hhZGVyIiwiYXR0YWNoU2hhZGVyIiwibGlua1Byb2dyYW0iLCJnZXRQcm9ncmFtUGFyYW1ldGVyIiwiTElOS19TVEFUVVMiLCJkZWxldGVQcm9ncmFtIiwiZ2V0UHJvZ3JhbUluZm9Mb2ciLCJudW1FbGVtZW50cyIsImJ1ZmZlciIsImNyZWF0ZUJ1ZmZlciIsImdldEF0dHJpYkxvY2F0aW9uIiwiYmluZEJ1ZmZlciIsIkFSUkFZX0JVRkZFUiIsImZsYXR0ZW4iLCJjb25jYXQiLCJjb25zb2xlIiwibG9nIiwiYnVmZmVyRGF0YSIsIkZsb2F0MzJBcnJheSIsIlNUQVRJQ19EUkFXIiwic2V0QXR0cmlidXRlQnVmZmVyIiwiZW5hYmxlVmVydGV4QXR0cmliQXJyYXkiLCJzaXplIiwiZ2V0TnVtQ29tcG9uZW50cyIsIkZMT0FUIiwidmVydGV4QXR0cmliUG9pbnRlciIsImdldEF0dHJpYnV0ZUJ1ZmZlclR5cGUiLCJnZXROdW1FbGVtZW50cyIsImRlbGV0ZUJ1ZmZlciIsImJ1ZmZlclR5cGUiLCJjb21wb25lbnRDYWNoZSIsImNyZWF0ZUF0dHJpYnV0ZUJ1ZmZlckNvbXBvbmVudHMiLCJhdHRyaWJ1dGVCdWZmZXJzIiwiYXR0cmlidXRlQnVmZmVyQmluZGluZ3MiLCJuZXdWYWx1ZXNTdHJLZXlzIiwiY29tcG9uZW50cyIsImF0dHJpYnV0ZUJ1ZmZlciIsImZyb21DYWNoZSIsImF0dHJpYnV0ZUJ1ZmZlckluZm8iLCJBdHRyaWJ1dGVCdWZmZXJJbmZvIiwiYXBwbGljYWJsZUJpbmRpbmdzIiwiZmlsdGVyIiwiYiIsImNyZWF0ZURyb3Bkb3duV2l0aEJpbmRpbmdzIiwiY3JlYXRlU2luZ2xlIiwiY29tcG9uZW50IiwidiIsImluY2x1ZGVzIiwibnciLCJjcmVhdGVBdHRyaWJ1dGVCdWZmZXJDb21wb25lbnQiLCJhdHRyaWJ1dGVCdWZmZXJUeXBlIiwiZWRpdGFibGUiLCJjdXJyZW50VmFsdWUiLCJjcmVhdGVBdHRyaWJ1dGVCdWZmZXJJbnB1dFZlYzQiLCJjcmVhdGVBdHRyaWJ1dGVCdWZmZXJOb3RTdXBwb3J0ZWQiLCJjdXN0b21WYWx1ZSIsImJpbmRpbmciLCJ1bmRlZmluZWQiLCJkaXNhYmxlZCIsInJlc3VsdCIsInBhcnNlIiwiaXNBcnJheSIsImV2ZXJ5IiwiY3JlYXRlV2ViR0xDYW52YXMiLCJjYW52YXMiLCJjYWxsYmFjayIsImdldENvbnRleHQiLCJyZWN0Iiwid2lkdGgiLCJoZWlnaHQiLCJSZXNpemVPYnNlcnZlciIsIm9ic2VydmVyRW50cnkiLCJ0YXJnZXQiLCJkb21SZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwieCIsInkiLCJvYnNlcnZlIiwidnNjb2RlQXBpIiwiYWNxdWlyZVZzQ29kZUFwaSIsImV2ZW50TGlzdGVuZXJzIiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwibGlzdGVuZXIiLCJkYXRhIiwiZ2V0U2hhZGVyRG9jdW1lbnRzIiwibWVzc2FnZUlkIiwicG9zdE1lc3NhZ2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsIm1lc3NhZ2UiLCJwYXlsb2FkIiwiZmlsZXMiLCJyZW1vdmVMaXN0ZW5lciIsImdldERvY3VtZW50VGV4dCIsImZpbGVOYW1lIiwic3Vic2NyaWJlVG9Eb2N1bWVudFNhdmUiLCJmaWxlUGF0aCIsIm1lc2hlcyIsIm1lc2hBdHRyaWJ1dGVzIiwidmlld2VyRW5kcG9pbnQiLCJ2aWV3ZXIiLCJnZXRFbGVtZW50QnlJZCIsInZpZXdlck9wdGlvbnMiLCJzaGFkZXJPcHRpb25zIiwic2hhZGVyQ29tcGlsYXRpb25FcnJvcnMiLCJ3ZWJHTENhbnZhcyIsIndlYkdMQ29udHJvbGxlciIsInNob3dDb250ZW50IiwiY29udGVudCIsInZpc2liaWxpdHkiLCJzeW5jU2hhZGVyRG9jdW1lbnRzIiwidGhlbiIsInNkIiwiZiIsInZlcnRleERyb3Bkb3duQ29udHJvbGxlciIsImZyYWdtZW50RHJvcGRvd25Db250cm9sbGVyIiwiYW5pbWF0aW9uRnJhbWVIYW5kbGUiLCJvblNoYWRlckNvbnRlbnRDaGFuZ2VkIiwic2VsZWN0ZWRGcmFnbWVudENvbnRlbnQiLCJzZWxlY3RlZFZlcnRleENvbnRlbnQiLCJ2ZXJ0ZXhTaGFkZXJDb250ZW50IiwiZnJhZ21lbnRTaGFkZXJDb250ZW50IiwiVkVSVEVYX1NIQURFUiIsIkZSQUdNRU5UX1NIQURFUiIsInZlcnRleEVycm9yIiwiZnJhZ21lbnRFcnJvciIsImNvbXBpbGVTaGFkZXJzRnJvbVNvdXJjZSIsInZlcnRleFNoYWRlckVycm9ycyIsImZyYWdtZW50U2hhZGVyRXJyb3JzIiwiZXJyb3JzIiwiam9pbiIsImZvcm1hdFNoYWRlckNvbXBpbGVFcnJvcnMiLCJwcm9ncmFtVW5pZm9ybXMiLCJudW1Vbmlmb3JtcyIsIkFDVElWRV9VTklGT1JNUyIsInVuaWZvcm0iLCJnZXRBY3RpdmVVbmlmb3JtIiwiZ2V0UHJvZ3JhbVVuaWZvcm1zIiwicHJvZ3JhbUF0dHJpYnV0ZUJ1ZmZlcnMiLCJudW1BdHRyaWJ1dGVCdWZmZXJzIiwiQUNUSVZFX0FUVFJJQlVURVMiLCJnZXRBY3RpdmVBdHRyaWIiLCJnZXRQcm9ncmFtQXR0cmlidXRlQnVmZmVycyIsInVuaWZvcm1Db21wb25lbnRzIiwidW5pZm9ybXMiLCJVbmlmb3JtSW5mbyIsInVjIiwiY3JlYXRlVW5pZm9ybUNvbXBvbmVudHMiLCJhdHRyaWJ1dGVCdWZmZXJDb21wb25lbnRzIiwiYWIiLCJhYmMiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInJlbmRlckluZm8iLCJ1c2VQcm9ncmFtIiwidmlld3BvcnQiLCJjbGVhckNvbG9yIiwiQ09MT1JfQlVGRkVSX0JJVCIsInVuaWZvcm1JbmZvcyIsInUiLCJhdHRyaWJ1dGVCdWZmZXJJbmZvcyIsInByaW1pdGl2ZVR5cGUiLCJUUklBTkdMRVMiLCJkcmF3QXJyYXlzIiwicmVuZGVyUHJvZ3JhbSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm5ld1ZlcnRleCIsInNlbGVjdGVkVmVydGV4RmlsZVdhdGNoZXJVbnN1YnNjcmliZSIsIm5ld0NvbnRlbnQiLCJ2ZXJ0ZXhEcm9wZG93bkVsZW1lbnQiLCJuZXdGcmFnbWVudCIsInNlbGVjdGVkRnJhZ21lbnRGaWxlV2F0Y2hlclVuc3Vic2NyaWJlIiwiZnJhZ21lbnREcm9wZG93bkVsZW1lbnQiLCJtZXNoRHJvcGRvd25FbGVtZW50Il0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlYixFQUFTaUIsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEUCxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sS0FRdkRyQixFQUFvQnNCLEVBQUksU0FBU0QsRUFBT0UsR0FFdkMsR0FEVSxFQUFQQSxJQUFVRixF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LHdCQUZKa1EsRUFBMEIsRUFHMUJELEksY0FqQkdzRCxFQUF1QixLQUFFeEQsRUFBMEIsS0FvQjFEYixFQUFjeE8sWUFDWmtCLEVBQVUyUixFQUF5QixvQkFHL0IsRUFBZ0R0VSxHQUFlLFdBQ25FLE9BQUFnUixPQURLdUQsRUFBbUIsS0FBd0IsS0FHM0JwVCxTQUFTeU8sSUFDaENLLEVBQWN4TyxZQUFZa0IsRUFBVTRSLEVBQXFCLFNBRXpEdEUsRUFBY3hPLFlBQVl5TyxHQUUxQk8sSSIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwiZXhwb3J0IGNvbnN0IHJlbW92ZSA9IDxUPihhcnJheTogVFtdLCBpdGVtOiBUKSA9PiB7XHJcbiAgY29uc3QgaW5kZXggPSBhcnJheS5pbmRleE9mKGl0ZW0pO1xyXG5cclxuICBpZiAoaW5kZXggPiAtMSkge1xyXG4gICAgYXJyYXkuc3BsaWNlKGluZGV4LCAxKTtcclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgcmVtb3ZlTGFzdCA9ICh0ZXh0OiBzdHJpbmcsIGNvdW50OiBudW1iZXIpID0+IHtcclxuICByZXR1cm4gdGV4dC5zdWJzdHJpbmcoMCwgdGV4dC5sZW5ndGggLSBjb3VudCk7XHJcbn07XHJcbiIsImltcG9ydCB7IFZlY3RvcjIsIFZlY3RvcjMsIFZlY3RvcjQgfSBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9pbnB1dE51bWJlclwiO1xyXG5pbXBvcnQgeyBhc3NlcnROZXZlciB9IGZyb20gXCIuLi90eXBlR3VhcmRzXCI7XHJcblxyXG5leHBvcnQgZW51bSBVbmlmb3JtVHlwZSB7XHJcbiAgRkxPQVRfVkVDMiA9IDM1NjY0LFxyXG4gIEZMT0FUX1ZFQzMgPSAzNTY2NSxcclxuICBGTE9BVF9WRUM0ID0gMzU2NjYsXHJcbiAgU0FNUExFUl8yRCA9IDM1Njc4LFxyXG59XHJcblxyXG4vLzUxMjAgKEJZVEUpLCA1MTIxIChVTlNJR05FRF9CWVRFKSwgNTEyMiAoU0hPUlQpLCA1MTIzIChVTlNJR05FRF9TSE9SVCksIDUxMjQgKElOVCksXHJcbi8vIDUxMjUgKFVOU0lHTkVEX0lOVCksIDUxMjYgKEZMT0FUKSwgMzU2NjQgKEZMT0FUX1ZFQzIpLFxyXG4vLyAsIDM1NjY3IChJTlRfVkVDMiksIDM1NjY4IChJTlRfVkVDMyksIDM1NjY5IChJTlRfVkVDNCksIDM1NjcwIChCT09MKSwgMzU2NzEgKEJPT0xfVkVDMiksIDM1NjcyIChCT09MX1ZFQzMpLCAzNTY3MyAoQk9PTF9WRUM0KSwgMzU2NzQgKEZMT0FUX01BVDIpLCAzNTY3NSAoRkxPQVRfTUFUMyksIDM1Njc2IChGTE9BVF9NQVQ0KVxyXG5cclxuZXhwb3J0IGNsYXNzIFVuaWZvcm1JbmZvPFQgPSBhbnk+IHtcclxuICBwcml2YXRlIHZhbHVlOiBUIHwgbnVsbDtcclxuICBwcml2YXRlIHNldHRlcjogKHZhbHVlOiBUKSA9PiB2b2lkO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgY29udGV4dDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LFxyXG4gICAgcHJvZ3JhbTogV2ViR0xQcm9ncmFtLFxyXG4gICAgcHJpdmF0ZSBuYW1lOiBzdHJpbmcsXHJcbiAgICBwcml2YXRlIHR5cGU6IFVuaWZvcm1UeXBlXHJcbiAgKSB7XHJcbiAgICB0aGlzLmF0dGFjaFRvUHJvZ3JhbShwcm9ncmFtKTtcclxuICB9XHJcblxyXG4gIGF0dGFjaFRvUHJvZ3JhbShwcm9ncmFtOiBXZWJHTFByb2dyYW0pIHtcclxuICAgIGNvbnN0IGxvY2F0aW9uID0gdGhpcy5jb250ZXh0LmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtLCB0aGlzLm5hbWUpO1xyXG4gICAgdGhpcy5zZXR0ZXIgPSBjcmVhdGVVbmlmb3JtU2V0dGVyKHRoaXMudHlwZSwgdGhpcy5jb250ZXh0LCBsb2NhdGlvbik7XHJcbiAgfVxyXG5cclxuICBzZXRWYWx1ZShuZXdWYWx1ZTogVCkge1xyXG4gICAgdGhpcy52YWx1ZSA9IG5ld1ZhbHVlO1xyXG4gIH1cclxuXHJcbiAgc2V0VW5pZm9ybSgpIHtcclxuICAgIGlmICh0aGlzLnZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgIHRoaXMuc2V0dGVyKHRoaXMudmFsdWUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0VW5pZm9ybVR5cGUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy50eXBlO1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHt9XHJcbn1cclxuXHJcbmNvbnN0IGNyZWF0ZVVuaWZvcm1TZXR0ZXIgPSAoXHJcbiAgdHlwZTogVW5pZm9ybVR5cGUsXHJcbiAgY29udGV4dDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LFxyXG4gIGxvY2F0aW9uOiBXZWJHTFVuaWZvcm1Mb2NhdGlvblxyXG4pOiAoKHZhbHVlOiBhbnkpID0+IHZvaWQpID0+IHtcclxuICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgIGNhc2UgVW5pZm9ybVR5cGUuRkxPQVRfVkVDMjpcclxuICAgICAgcmV0dXJuICh2YWx1ZTogVmVjdG9yMikgPT4gY29udGV4dC51bmlmb3JtMmYobG9jYXRpb24sIC4uLnZhbHVlKTtcclxuICAgIGNhc2UgVW5pZm9ybVR5cGUuRkxPQVRfVkVDMzpcclxuICAgICAgcmV0dXJuICh2YWx1ZTogVmVjdG9yMykgPT4gY29udGV4dC51bmlmb3JtM2YobG9jYXRpb24sIC4uLnZhbHVlKTtcclxuICAgIGNhc2UgVW5pZm9ybVR5cGUuRkxPQVRfVkVDNDpcclxuICAgICAgcmV0dXJuICh2YWx1ZTogVmVjdG9yNCkgPT4gY29udGV4dC51bmlmb3JtNGYobG9jYXRpb24sIC4uLnZhbHVlKTtcclxuICAgIGNhc2UgVW5pZm9ybVR5cGUuU0FNUExFUl8yRDpcclxuICAgICAgcmV0dXJuICh2YWx1ZTogeyBzbG90OiBudW1iZXI7IHRleHR1cmVEYXRhOiBib29sZWFuIH0pID0+IHtcclxuICAgICAgICAvL2NvbnRleHQudGV4aSh2YWx1ZS5zbG90KTtcclxuICAgICAgfTtcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIGFzc2VydE5ldmVyKHR5cGUpO1xyXG4gIH1cclxufTtcclxuIiwiaW1wb3J0ICogYXMgQXJyYXlVdGlscyBmcm9tIFwiLi4vLi4vLi4vY29tbW9uL2FycmF5XCI7XHJcbmV4cG9ydCB0eXBlIE9ic2VydmVyPFQ+ID0gKHZhbHVlOiBUKSA9PiB2b2lkO1xyXG5cclxuZXhwb3J0IGNsYXNzIE9ic2VydmFibGU8VD4ge1xyXG4gIG9ic2VydmVyczogT2JzZXJ2ZXI8VD5bXSA9IFtdO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHZhbHVlOiBUIHwgbnVsbCkge31cclxuXHJcbiAgYXR0YWNoKG9ic2VydmVyOiBPYnNlcnZlcjxUPikge1xyXG4gICAgdGhpcy5vYnNlcnZlcnMucHVzaChvYnNlcnZlcik7XHJcbiAgfVxyXG5cclxuICBkZXRhY2gob2JzZXJ2ZXI6IE9ic2VydmVyPFQ+KSB7XHJcbiAgICBBcnJheVV0aWxzLnJlbW92ZSh0aGlzLm9ic2VydmVycywgb2JzZXJ2ZXIpO1xyXG4gIH1cclxuXHJcbiAgZGV0YWNoQWxsKCkge1xyXG4gICAgdGhpcy5vYnNlcnZlcnMubGVuZ3RoID0gMDtcclxuICB9XHJcblxyXG4gIHNldFZhbHVlKG5ld1ZhbHVlOiBUKSB7XHJcbiAgICB0aGlzLnZhbHVlID0gbmV3VmFsdWU7XHJcbiAgICB0aGlzLm5vdGlmeSgpO1xyXG4gIH1cclxuXHJcbiAgZ2V0VmFsdWUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy52YWx1ZTtcclxuICB9XHJcblxyXG4gIGZvcmNlTm90aWZ5KCkge1xyXG4gICAgdGhpcy5ub3RpZnkoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgbm90aWZ5KCkge1xyXG4gICAgaWYgKHRoaXMudmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLnZhbHVlO1xyXG4gICAgICB0aGlzLm9ic2VydmVycy5mb3JFYWNoKG8gPT4gbyh2YWx1ZSkpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgY29uc3QgdHJhbnNsYXRpb25zID0ge1xyXG4gICAgc2hhZGVyczogXCJTSEFERVJTXCJcclxufSIsImV4cG9ydCB0eXBlIERyb3Bkb3duSXRlbSA9IHtcclxuICBpZDogc3RyaW5nO1xyXG4gIGRpc3BsYXk6IHN0cmluZztcclxufTtcclxuXHJcbmNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xyXG4gIGVtcHR5SXRlbTogdHJ1ZSxcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVEcm9wZG93biA9IChcclxuICBvbkNoYW5nZTogKGl0ZW06IERyb3Bkb3duSXRlbSB8IG51bGwpID0+IHZvaWQsXHJcbiAgY2xhc3NOYW1lPzogc3RyaW5nLFxyXG4gIG9wdGlvbnM/OiB7IGVtcHR5SXRlbTogYm9vbGVhbiB9XHJcbik6IFtcclxuICBIVE1MU2VsZWN0RWxlbWVudCxcclxuICB7XHJcbiAgICBzZXRJdGVtczogKGl0ZW1zOiBEcm9wZG93bkl0ZW1bXSkgPT4gdm9pZDtcclxuICAgIGdldEl0ZW1zOiAoKSA9PiBEcm9wZG93bkl0ZW1bXTtcclxuICAgIHNldFNlbGVjdGVkSXRlbUJ5SWQ6IChpZDogc3RyaW5nKSA9PiB2b2lkO1xyXG4gICAgc2V0U2VsZWN0ZWRJdGVtQnlJbmRleDogKGluZGV4OiBudW1iZXIpID0+IHZvaWQ7XHJcbiAgICBnZXRTZWxlY3RlZEl0ZW06ICgpID0+IERyb3Bkb3duSXRlbSB8IG51bGw7XHJcbiAgICBjbGVhclNlbGVjdGlvbjogKCkgPT4gdm9pZDtcclxuICB9XHJcbl0gPT4ge1xyXG4gIGNvbnN0IGNvbWJpbmVkT3B0aW9ucyA9IHsgLi4uZGVmYXVsdE9wdGlvbnMsIC4uLm9wdGlvbnMgfTtcclxuICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNlbGVjdFwiKTtcclxuICBlbGVtZW50LmNsYXNzTmFtZSA9IGBkcm9wZG93bi1iYXNlICR7Y2xhc3NOYW1lfWA7XHJcblxyXG4gIGxldCBzZWxlY3RlZEl0ZW06IERyb3Bkb3duSXRlbSB8IG51bGwgPSBudWxsO1xyXG4gIGxldCBpdGVtRWxlbWVudHM6IHsgZWxlbWVudDogSFRNTE9wdGlvbkVsZW1lbnQ7IGl0ZW06IERyb3Bkb3duSXRlbSB9W10gPSBbXTtcclxuICBjb25zdCBzZXRTZWxlY3RlZEl0ZW0gPSAoaXRlbTogRHJvcGRvd25JdGVtIHwgbnVsbCkgPT4ge1xyXG4gICAgc2VsZWN0ZWRJdGVtID0gaXRlbTtcclxuICAgIG9uQ2hhbmdlKHNlbGVjdGVkSXRlbSk7XHJcbiAgfTtcclxuXHJcbiAgZWxlbWVudC5vbmNoYW5nZSA9ICgpID0+IHtcclxuICAgIGNvbnN0IGZvdW5kRWxlbWVudCA9IGl0ZW1FbGVtZW50cy5maW5kKGUgPT4gZS5pdGVtLmlkID09PSBlbGVtZW50LnZhbHVlKTtcclxuXHJcbiAgICBpZiAoZm91bmRFbGVtZW50Lml0ZW0uaWQpIHNldFNlbGVjdGVkSXRlbShmb3VuZEVsZW1lbnQuaXRlbSk7XHJcbiAgICBlbHNlIHNldFNlbGVjdGVkSXRlbShudWxsKTtcclxuICB9O1xyXG5cclxuICBjb25zdCBzZXRJdGVtcyA9IChpdGVtczogRHJvcGRvd25JdGVtW10pID0+IHtcclxuICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gXCJcIjtcclxuICAgIGl0ZW1FbGVtZW50cy5sZW5ndGggPSAwO1xyXG5cclxuICAgIGlmICghaXRlbXMuZmluZChpID0+IGkuaWQgPT09IHNlbGVjdGVkSXRlbT8uaWQpKSB7XHJcbiAgICAgIHNldFNlbGVjdGVkSXRlbShudWxsKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBuZXdJdGVtcyA9IGNvbWJpbmVkT3B0aW9ucy5lbXB0eUl0ZW1cclxuICAgICAgPyBbeyBpZDogXCJcIiwgZGlzcGxheTogXCJcIiB9LCAuLi5pdGVtc11cclxuICAgICAgOiBbLi4uaXRlbXNdO1xyXG4gICAgbmV3SXRlbXMuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgY29uc3Qgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKTtcclxuICAgICAgb3B0aW9uLnZhbHVlID0gaXRlbS5pZDtcclxuICAgICAgb3B0aW9uLnRleHRDb250ZW50ID0gaXRlbS5kaXNwbGF5O1xyXG4gICAgICBvcHRpb24uc2VsZWN0ZWQgPSBpdGVtLmlkID09PSBzZWxlY3RlZEl0ZW0/LmlkO1xyXG4gICAgICBlbGVtZW50LmFwcGVuZENoaWxkKG9wdGlvbik7XHJcbiAgICAgIGl0ZW1FbGVtZW50cy5wdXNoKHsgZWxlbWVudDogb3B0aW9uLCBpdGVtIH0pO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgZ2V0SXRlbXMgPSAoKSA9PiBpdGVtRWxlbWVudHMubWFwKGllID0+IGllLml0ZW0pO1xyXG4gIGNvbnN0IHNldFNlbGVjdGVkSXRlbUJ5SWQgPSAoaWQ6IHN0cmluZykgPT4ge1xyXG4gICAgc2V0U2VsZWN0ZWRJdGVtKG51bGwpO1xyXG4gICAgaXRlbUVsZW1lbnRzLmZvckVhY2goaWUgPT4ge1xyXG4gICAgICBpZiAoaWUuaXRlbS5pZCA9PT0gaWQpIHtcclxuICAgICAgICBpZS5lbGVtZW50LnNlbGVjdGVkID0gdHJ1ZTtcclxuICAgICAgICBzZXRTZWxlY3RlZEl0ZW0oaWUuaXRlbSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWUuZWxlbWVudC5zZWxlY3RlZCA9IGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICBjb25zdCBzZXRTZWxlY3RlZEl0ZW1CeUluZGV4ID0gKGluZGV4OiBudW1iZXIpID0+XHJcbiAgICBzZXRTZWxlY3RlZEl0ZW1CeUlkKGl0ZW1FbGVtZW50c1tpbmRleF0uaXRlbS5pZCk7XHJcblxyXG4gIGNvbnN0IGdldFNlbGVjdGVkSXRlbSA9ICgpID0+IHNlbGVjdGVkSXRlbTtcclxuICBjb25zdCBjbGVhclNlbGVjdGlvbiA9ICgpID0+IHtcclxuICAgIGl0ZW1FbGVtZW50cy5mb3JFYWNoKGllID0+IChpZS5lbGVtZW50LnNlbGVjdGVkID0gZmFsc2UpKTtcclxuICAgIHNldFNlbGVjdGVkSXRlbShudWxsKTtcclxuICB9O1xyXG5cclxuICByZXR1cm4gW1xyXG4gICAgZWxlbWVudCxcclxuICAgIHtcclxuICAgICAgc2V0SXRlbXMsXHJcbiAgICAgIGdldEl0ZW1zLFxyXG4gICAgICBzZXRTZWxlY3RlZEl0ZW1CeUlkLFxyXG4gICAgICBzZXRTZWxlY3RlZEl0ZW1CeUluZGV4LFxyXG4gICAgICBnZXRTZWxlY3RlZEl0ZW0sXHJcbiAgICAgIGNsZWFyU2VsZWN0aW9uLFxyXG4gICAgfSxcclxuICBdO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGNyZWF0ZUVsZW1lbnRzRHJvcGRvd24gPSAoXHJcbiAgZWxlbWVudHM6IHsgaWQ6IHN0cmluZzsgZGlzcGxheTogc3RyaW5nOyBlbGVtZW50OiBIVE1MRWxlbWVudCB9W10sXHJcbiAgb25DaGFuZ2U/OiAoaWQ6IHN0cmluZyB8IG51bGwpID0+IHZvaWRcclxuKSA9PiB7XHJcbiAgY29uc3QgW29wdGlvbnNFbGVtZW50LCBvcHRpb25zQ29udHJvbGxlcl0gPSBjcmVhdGVEcm9wZG93bihcclxuICAgIGl0ZW0gPT4ge1xyXG4gICAgICBpZiAoIWl0ZW0pIHtcclxuICAgICAgICBvbkNoYW5nZT8uKG51bGwpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgZWxlbWVudHMuZm9yRWFjaChvZSA9PiBvZS5lbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJoaWRkZW5cIikpO1xyXG4gICAgICBlbGVtZW50cy5maW5kKGkgPT4gaS5pZCA9PT0gaXRlbS5pZCkuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiaGlkZGVuXCIpO1xyXG4gICAgICBvbkNoYW5nZT8uKGl0ZW0uaWQpO1xyXG4gICAgfSxcclxuICAgIFwiXCIsXHJcbiAgICB7IGVtcHR5SXRlbTogZmFsc2UgfVxyXG4gICk7XHJcbiAgb3B0aW9uc0NvbnRyb2xsZXIuc2V0SXRlbXMoXHJcbiAgICBlbGVtZW50cy5tYXAoZSA9PiAoe1xyXG4gICAgICBpZDogZS5pZCxcclxuICAgICAgZGlzcGxheTogZS5kaXNwbGF5LFxyXG4gICAgfSkpXHJcbiAgKTtcclxuICBvcHRpb25zQ29udHJvbGxlci5zZXRTZWxlY3RlZEl0ZW1CeUluZGV4KDApO1xyXG4gIHJldHVybiBvcHRpb25zRWxlbWVudDtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVDdXN0b21FbGVtZW50T3B0aW9uID0gKGVsZW1lbnQ6IEhUTUxFbGVtZW50KSA9PiAoe1xyXG4gIGlkOiBcImN1c3RvbVwiLFxyXG4gIGRpc3BsYXk6IFwiQ3VzdG9tXCIsXHJcbiAgZWxlbWVudCxcclxufSk7XHJcbiIsImV4cG9ydCBjb25zdCBjcmVhdGVCdXR0b24gPSAoXHJcbiAgdGV4dDogc3RyaW5nLFxyXG4gIGNsYXNzTmFtZTogc3RyaW5nLFxyXG4gIG9uQ2xpY2s6ICgpID0+IHZvaWRcclxuKSA9PiB7XHJcbiAgY29uc3QgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcclxuICBidXR0b24ub25jbGljayA9IG9uQ2xpY2s7XHJcbiAgYnV0dG9uLmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcclxuICBidXR0b24udGV4dENvbnRlbnQgPSB0ZXh0O1xyXG4gIHJldHVybiB7IGVsZW1lbnQ6IGJ1dHRvbiB9O1xyXG59O1xyXG4iLCJleHBvcnQgY29uc3Qgd2l0aExhYmVsID0gKFxyXG4gIGVsZW1lbnQ6IEhUTUxFbGVtZW50LFxyXG4gIHRleHQ6IHN0cmluZyxcclxuICBjbGFzc05hbWU/OiBzdHJpbmdcclxuKSA9PiB7XHJcbiAgY29uc3Qgd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgd3JhcHBlci5jbGFzc05hbWUgPSBgJHtjbGFzc05hbWUgPz8gXCJcIn0gb3B0aW9ucy13cmFwcGVyYDtcclxuICBjb25zdCBsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcclxuICBsYWJlbC5jbGFzc05hbWUgPSBcIm9wdGlvbnMtbGFiZWxcIjtcclxuICBsYWJlbC50ZXh0Q29udGVudCA9IHRleHQ7XHJcbiAgZWxlbWVudC5jbGFzc05hbWUgPSBgJHtlbGVtZW50LmNsYXNzTmFtZX0gb3B0aW9ucy1jb250ZW50YDtcclxuICB3cmFwcGVyLmFwcGVuZENoaWxkKGxhYmVsKTtcclxuICB3cmFwcGVyLmFwcGVuZENoaWxkKGVsZW1lbnQpO1xyXG4gIHJldHVybiB3cmFwcGVyO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGNyZWF0ZURpdiA9IChjbGFzc05hbWU6IHN0cmluZywgY2hpbGRyZW4/OiBIVE1MRWxlbWVudFtdKSA9PiB7XHJcbiAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICBkaXYuY2xhc3NOYW1lID0gY2xhc3NOYW1lO1xyXG4gIGNoaWxkcmVuPy5mb3JFYWNoKGMgPT4gZGl2LmFwcGVuZENoaWxkKGMpKTtcclxuICByZXR1cm4gZGl2O1xyXG59O1xyXG4iLCJleHBvcnQgY29uc3QgY3JlYXRlTXVsdGlOdW1iZXJJbnB1dCA9IDxUIGV4dGVuZHMgbnVtYmVyW10+KFxyXG4gIGluaXRpYWxWYWx1ZTogVCxcclxuICBvbkNoYW5nZTogKG5ld1ZhbHVlOiBUKSA9PiB2b2lkLFxyXG4gIHJvd3M6IG51bWJlcixcclxuICBjb2x1bW5zOiBudW1iZXIsXHJcbiAgaW5wdXRPcHRpb25zPzogUGFydGlhbDxIVE1MSW5wdXRFbGVtZW50PlxyXG4pOiBbXHJcbiAgSFRNTERpdkVsZW1lbnQsXHJcbiAge1xyXG4gICAgc2V0VmFsdWVzOiAodmFsdWU6IFQpID0+IHZvaWQ7XHJcbiAgICBzZXRSZWFkb25seTogKHJlYWRvbmx5OiBib29sZWFuKSA9PiB2b2lkO1xyXG4gICAgZ2V0VmFsdWVzOiAoKSA9PiBUO1xyXG4gIH1cclxuXSA9PiB7XHJcbiAgY29uc3QgaW5wdXRHcmlkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICBpbnB1dEdyaWQuY2xhc3NOYW1lID0gXCJlZGl0LWlucHV0LWdyaWRcIjtcclxuXHJcbiAgY29uc3QgaXRlbUVsZW1lbnRzOiB7IGVsZW1lbnQ6IEhUTUxJbnB1dEVsZW1lbnQ7IHZhbHVlOiBudW1iZXIgfVtdID0gW107XHJcbiAgY29uc3Qgc2V0VmFsdWVzID0gKG5ld1ZhbHVlczogVCkgPT5cclxuICAgIGl0ZW1FbGVtZW50cy5mb3JFYWNoKChpZSwgaW5kZXgpID0+IHtcclxuICAgICAgaWUudmFsdWUgPSBuZXdWYWx1ZXNbaW5kZXhdO1xyXG4gICAgICBpZS5lbGVtZW50LnZhbHVlID0gaWUudmFsdWUudG9TdHJpbmcoKTtcclxuICAgIH0pO1xyXG4gIGNvbnN0IGdldFZhbHVlcyA9ICgpID0+IGl0ZW1FbGVtZW50cy5tYXAoaWUgPT4gaWUudmFsdWUpIGFzIFQ7XHJcbiAgY29uc3Qgc2V0UmVhZG9ubHkgPSAocmVhZG9ubHk6IGJvb2xlYW4pID0+XHJcbiAgICBpdGVtRWxlbWVudHMuZm9yRWFjaChpZSA9PiAoaWUuZWxlbWVudC5yZWFkT25seSA9IHJlYWRvbmx5KSk7XHJcblxyXG4gIGZvciAobGV0IHJvdyA9IDA7IHJvdyA8IHJvd3M7IHJvdysrKSB7XHJcbiAgICBjb25zdCBpbnB1dFJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICBpbnB1dFJvdy5jbGFzc05hbWUgPSBcImVkaXQtaW5wdXQtcm93XCI7XHJcblxyXG4gICAgZm9yIChsZXQgY29sdW1uID0gMDsgY29sdW1uIDwgY29sdW1uczsgY29sdW1uKyspIHtcclxuICAgICAgY29uc3QgaW5kZXggPSByb3cgKiBjb2x1bW5zICsgY29sdW1uO1xyXG4gICAgICBjb25zdCB2YWx1ZSA9IGluaXRpYWxWYWx1ZVtpbmRleF07XHJcbiAgICAgIGNvbnN0IGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xyXG4gICAgICBjb25zdCBpdGVtRWxlbWVudCA9IHsgZWxlbWVudDogaW5wdXQsIHZhbHVlIH07XHJcbiAgICAgIE9iamVjdC5hc3NpZ24oaW5wdXQsIGlucHV0T3B0aW9ucyk7XHJcbiAgICAgIGlucHV0LmNsYXNzTmFtZSA9IFwiZWRpdC1pbnB1dFwiO1xyXG4gICAgICBpbnB1dC50eXBlID0gXCJudW1iZXJcIjtcclxuICAgICAgaW5wdXQudmFsdWUgPSB2YWx1ZT8udG9TdHJpbmcoKTtcclxuICAgICAgaW5wdXQub25pbnB1dCA9ICgpID0+IHtcclxuICAgICAgICBpdGVtRWxlbWVudHNbaW5kZXhdLnZhbHVlID0gTnVtYmVyKGlucHV0LnZhbHVlKTtcclxuICAgICAgICBvbkNoYW5nZT8uKGdldFZhbHVlcygpKTtcclxuICAgICAgfTtcclxuICAgICAgaXRlbUVsZW1lbnRzLnB1c2goaXRlbUVsZW1lbnQpO1xyXG4gICAgICBpbnB1dFJvdy5hcHBlbmRDaGlsZChpbnB1dCk7XHJcbiAgICB9XHJcblxyXG4gICAgaW5wdXRHcmlkLmFwcGVuZENoaWxkKGlucHV0Um93KTtcclxuICB9XHJcblxyXG4gIHJldHVybiBbXHJcbiAgICBpbnB1dEdyaWQsXHJcbiAgICB7XHJcbiAgICAgIHNldFZhbHVlcyxcclxuICAgICAgZ2V0VmFsdWVzLFxyXG4gICAgICBzZXRSZWFkb25seSxcclxuICAgIH0sXHJcbiAgXTtcclxufTtcclxuIiwiaW1wb3J0IHsgY3JlYXRlTXVsdGlOdW1iZXJJbnB1dCB9IGZyb20gXCIuL2hlbHBlcnNcIjtcclxuXHJcbmV4cG9ydCB0eXBlIFZlY3RvcjIgPSBbbnVtYmVyLCBudW1iZXJdO1xyXG5leHBvcnQgY29uc3QgY3JlYXRlVmVjdG9yMiA9IChvbkNoYW5nZT86IChuZXdWYWx1ZTogVmVjdG9yMikgPT4gdm9pZCkgPT5cclxuICBjcmVhdGVNdWx0aU51bWJlcklucHV0PFZlY3RvcjI+KFswLCAwXSwgb25DaGFuZ2UsIDEsIDIpO1xyXG5cclxuZXhwb3J0IHR5cGUgVmVjdG9yMyA9IFtudW1iZXIsIG51bWJlciwgbnVtYmVyXTtcclxuZXhwb3J0IGNvbnN0IGNyZWF0ZVZlY3RvcjMgPSAob25DaGFuZ2U/OiAobmV3VmFsdWU6IFZlY3RvcjMpID0+IHZvaWQpID0+XHJcbiAgY3JlYXRlTXVsdGlOdW1iZXJJbnB1dDxWZWN0b3IzPihbMCwgMCwgMF0sIG9uQ2hhbmdlLCAxLCAzKTtcclxuXHJcbmV4cG9ydCB0eXBlIFZlY3RvcjQgPSBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXTtcclxuZXhwb3J0IGNvbnN0IGNyZWF0ZVZlY3RvcjQgPSAob25DaGFuZ2U/OiAobmV3VmFsdWU6IFZlY3RvcjQpID0+IHZvaWQpID0+XHJcbiAgY3JlYXRlTXVsdGlOdW1iZXJJbnB1dDxWZWN0b3I0PihbMCwgMCwgMCwgMF0sIG9uQ2hhbmdlLCAxLCA0KTtcclxuIiwiaW1wb3J0IHsgY3JlYXRlTXVsdGlOdW1iZXJJbnB1dCB9IGZyb20gXCIuL2hlbHBlcnNcIjtcclxuaW1wb3J0IHsgY3JlYXRlRGl2IH0gZnJvbSBcIi4vd3JhcHBlcnNcIjtcclxuXHJcbmNvbnN0IGNvbG9ySW5wdXRQcm9wcyA9IHtcclxuICBtaW46IFwiMFwiLFxyXG4gIG1heDogXCIxXCIsXHJcbiAgc3RlcDogXCIwLjFcIixcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIENvbG9yNCA9IFtudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdO1xyXG5leHBvcnQgY29uc3QgY3JlYXRlQ29sb3I0ID0gKFxyXG4gIG9uQ2hhbmdlPzogKG5ld1ZhbHVlOiBDb2xvcjQpID0+IHZvaWRcclxuKTogW1xyXG4gIEhUTUxEaXZFbGVtZW50LFxyXG4gIHtcclxuICAgIHNldFZhbHVlczogKHZhbHVlOiBDb2xvcjQpID0+IHZvaWQ7XHJcbiAgICBzZXRSZWFkb25seTogKHJlYWRvbmx5OiBib29sZWFuKSA9PiB2b2lkO1xyXG4gICAgZ2V0VmFsdWVzOiAoKSA9PiBDb2xvcjQ7XHJcbiAgfVxyXG5dID0+IHtcclxuICBjb25zdCBpbml0aWFsVmFsdWUgPSBbMC41LCAwLjUsIDAuNSwgMV0gYXMgQ29sb3I0O1xyXG4gIGNvbnN0IGNvbG9yRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICBjb2xvckRpdi5jbGFzc05hbWUgPSBcImVkaXQtaW5wdXQtY29sb3JcIjtcclxuICBjb25zdCBzZXRDb2xvciA9IChjb2xvcjogQ29sb3I0KSA9PiB7XHJcbiAgICBjb2xvckRpdi5zdHlsZS5iYWNrZ3JvdW5kID0gYHJnYigke2NvbG9yWzBdICogMjU1fSwke2NvbG9yWzFdICogMjU1fSwke1xyXG4gICAgICBjb2xvclsyXSAqIDI1NVxyXG4gICAgfSwke2NvbG9yWzNdfSlgO1xyXG4gIH07XHJcblxyXG4gIHNldENvbG9yKGluaXRpYWxWYWx1ZSk7XHJcblxyXG4gIGNvbnN0IG9uQ2hhbmdlSW50ZXJuYWwgPSAoY29sb3I6IENvbG9yNCkgPT4ge1xyXG4gICAgc2V0Q29sb3IoY29sb3IpO1xyXG4gICAgb25DaGFuZ2U/Lihjb2xvcik7XHJcbiAgfTtcclxuICBjb25zdCBjb250YWluZXIgPSBjcmVhdGVEaXYoXCJyb3ctd2l0aC1nYXBcIik7XHJcbiAgY29uc3QgW2VsZW1lbnQsIGNvbnRyb2xsZXJdID0gY3JlYXRlTXVsdGlOdW1iZXJJbnB1dDxDb2xvcjQ+KFxyXG4gICAgaW5pdGlhbFZhbHVlLFxyXG4gICAgb25DaGFuZ2VJbnRlcm5hbCxcclxuICAgIDEsXHJcbiAgICA0LFxyXG4gICAgY29sb3JJbnB1dFByb3BzXHJcbiAgKTtcclxuICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XHJcbiAgY29udGFpbmVyLmFwcGVuZENoaWxkKGNvbG9yRGl2KTtcclxuICByZXR1cm4gW1xyXG4gICAgY29udGFpbmVyLFxyXG4gICAge1xyXG4gICAgICAuLi5jb250cm9sbGVyLFxyXG4gICAgICBzZXRWYWx1ZXM6ICh2YWx1ZTogQ29sb3I0KSA9PiB7XHJcbiAgICAgICAgY29udHJvbGxlci5zZXRWYWx1ZXModmFsdWUpO1xyXG4gICAgICAgIHNldENvbG9yKHZhbHVlKTtcclxuICAgICAgfSxcclxuICAgIH0sXHJcbiAgXTtcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIENvbG9yMyA9IFtudW1iZXIsIG51bWJlciwgbnVtYmVyXTtcclxuZXhwb3J0IGNvbnN0IGNyZWF0ZUNvbG9yMyA9IChcclxuICBvbkNoYW5nZT86IChuZXdWYWx1ZTogQ29sb3IzKSA9PiB2b2lkXHJcbik6IFtcclxuICBIVE1MRGl2RWxlbWVudCxcclxuICB7XHJcbiAgICBzZXRWYWx1ZXM6ICh2YWx1ZTogQ29sb3IzKSA9PiB2b2lkO1xyXG4gICAgc2V0UmVhZG9ubHk6IChyZWFkb25seTogYm9vbGVhbikgPT4gdm9pZDtcclxuICAgIGdldFZhbHVlczogKCkgPT4gQ29sb3IzO1xyXG4gIH1cclxuXSA9PiB7XHJcbiAgY29uc3QgaW5pdGlhbFZhbHVlID0gWzAuNSwgMC41LCAwLjVdIGFzIENvbG9yMztcclxuICBjb25zdCBjb2xvckRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgY29sb3JEaXYuY2xhc3NOYW1lID0gXCJlZGl0LWlucHV0LWNvbG9yXCI7XHJcbiAgY29uc3Qgc2V0Q29sb3IgPSAoY29sb3I6IENvbG9yMykgPT4ge1xyXG4gICAgY29sb3JEaXYuc3R5bGUuYmFja2dyb3VuZCA9IGByZ2IoJHtjb2xvclswXSAqIDI1NX0sJHtjb2xvclsxXSAqIDI1NX0sJHtcclxuICAgICAgY29sb3JbMl0gKiAyNTVcclxuICAgIH0sMSlgO1xyXG4gIH07XHJcblxyXG4gIHNldENvbG9yKGluaXRpYWxWYWx1ZSk7XHJcblxyXG4gIGNvbnN0IG9uQ2hhbmdlSW50ZXJuYWwgPSAoY29sb3I6IENvbG9yMykgPT4ge1xyXG4gICAgc2V0Q29sb3IoY29sb3IpO1xyXG4gICAgb25DaGFuZ2U/Lihjb2xvcik7XHJcbiAgfTtcclxuICBjb25zdCBjb250YWluZXIgPSBjcmVhdGVEaXYoXCJyb3ctd2l0aC1nYXBcIik7XHJcbiAgY29uc3QgW2VsZW1lbnQsIGNvbnRyb2xsZXJdID0gY3JlYXRlTXVsdGlOdW1iZXJJbnB1dDxDb2xvcjM+KFxyXG4gICAgaW5pdGlhbFZhbHVlLFxyXG4gICAgb25DaGFuZ2VJbnRlcm5hbCxcclxuICAgIDEsXHJcbiAgICAzLFxyXG4gICAgY29sb3JJbnB1dFByb3BzXHJcbiAgKTtcclxuICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XHJcbiAgY29udGFpbmVyLmFwcGVuZENoaWxkKGNvbG9yRGl2KTtcclxuICByZXR1cm4gW1xyXG4gICAgY29udGFpbmVyLFxyXG4gICAge1xyXG4gICAgICAuLi5jb250cm9sbGVyLFxyXG4gICAgICBzZXRWYWx1ZXM6ICh2YWx1ZTogQ29sb3IzKSA9PiB7XHJcbiAgICAgICAgY29udHJvbGxlci5zZXRWYWx1ZXModmFsdWUpO1xyXG4gICAgICAgIHNldENvbG9yKHZhbHVlKTtcclxuICAgICAgfSxcclxuICAgIH0sXHJcbiAgXTtcclxufTtcclxuIiwiZXhwb3J0IGNvbnN0IGhhc1Byb3BlcnR5ID0gPFQgZXh0ZW5kcyB7fSwgUCBleHRlbmRzIFByb3BlcnR5S2V5PihcclxuICBvYmo6IFQsXHJcbiAgcHJvcDogUFxyXG4pOiBvYmogaXMgVCAmIFJlY29yZDxQLCB1bmtub3duPiA9PiB7XHJcbiAgcmV0dXJuIG9iai5oYXNPd25Qcm9wZXJ0eShwcm9wKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBhc3NlcnROZXZlciA9ICh2YWx1ZTogbmV2ZXIpOiBuZXZlciA9PiB7XHJcbiAgdGhyb3cgbmV3IEVycm9yKGBVbmhhbmRsZWQgdW5pb24gbWVtYmVyOiAke0pTT04uc3RyaW5naWZ5KHZhbHVlKX1gKTtcclxufTtcclxuIiwiaW1wb3J0IHsgYXNzZXJ0TmV2ZXIgfSBmcm9tIFwiLi4vdHlwZUd1YXJkc1wiO1xyXG5cclxuZXhwb3J0IGVudW0gQXR0cmlidXRlQnVmZmVyVHlwZSB7XHJcbiAgRkxPQVRfVkVDMyA9IDM1NjY1LFxyXG4gIEZMT0FUX1ZFQzQgPSAzNTY2NixcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEF0dHJpYnV0ZUJ1ZmZlckluZm8ge1xyXG4gIHByaXZhdGUgYnVmZmVyOiBXZWJHTEJ1ZmZlciB8IG51bGw7XHJcbiAgcHJpdmF0ZSBsb2NhdGlvbjogbnVtYmVyO1xyXG4gIHByaXZhdGUgbnVtRWxlbWVudHM6IG51bWJlciA9IDA7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBjb250ZXh0OiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsXHJcbiAgICBwcm9ncmFtOiBXZWJHTFByb2dyYW0sXHJcbiAgICBwcml2YXRlIG5hbWU6IHN0cmluZyxcclxuICAgIHByaXZhdGUgdHlwZTogQXR0cmlidXRlQnVmZmVyVHlwZVxyXG4gICkge1xyXG4gICAgdGhpcy5hdHRhY2hUb1Byb2dyYW0ocHJvZ3JhbSk7XHJcbiAgICB0aGlzLmJ1ZmZlciA9IGNvbnRleHQuY3JlYXRlQnVmZmVyKCk7XHJcbiAgfVxyXG5cclxuICBhdHRhY2hUb1Byb2dyYW0ocHJvZ3JhbTogV2ViR0xQcm9ncmFtKSB7XHJcbiAgICB0aGlzLmxvY2F0aW9uID0gdGhpcy5jb250ZXh0LmdldEF0dHJpYkxvY2F0aW9uKHByb2dyYW0sIHRoaXMubmFtZSk7XHJcbiAgfVxyXG5cclxuICBzZXRWYWx1ZShuZXdWYWx1ZTogbnVtYmVyW11bXSkge1xyXG4gICAgdGhpcy5udW1FbGVtZW50cyA9IG5ld1ZhbHVlLmxlbmd0aDtcclxuICAgIHRoaXMuY29udGV4dC5iaW5kQnVmZmVyKHRoaXMuY29udGV4dC5BUlJBWV9CVUZGRVIsIHRoaXMuYnVmZmVyKTtcclxuICAgIGNvbnN0IGZsYXR0ZW4gPSBbXS5jb25jYXQoLi4ubmV3VmFsdWUpO1xyXG4gICAgY29uc29sZS5sb2coXCJzZXR0aW5nIHZhbHVlXCIsIGZsYXR0ZW4pO1xyXG5cclxuICAgIHRoaXMuY29udGV4dC5idWZmZXJEYXRhKFxyXG4gICAgICB0aGlzLmNvbnRleHQuQVJSQVlfQlVGRkVSLFxyXG4gICAgICBuZXcgRmxvYXQzMkFycmF5KGZsYXR0ZW4pLFxyXG4gICAgICB0aGlzLmNvbnRleHQuU1RBVElDX0RSQVdcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBzZXRBdHRyaWJ1dGVCdWZmZXIoKSB7XHJcbiAgICBpZiAodGhpcy5idWZmZXIgIT09IG51bGwpIHtcclxuICAgICAgdGhpcy5jb250ZXh0LmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHRoaXMubG9jYXRpb24pO1xyXG4gICAgICB0aGlzLmNvbnRleHQuYmluZEJ1ZmZlcih0aGlzLmNvbnRleHQuQVJSQVlfQlVGRkVSLCB0aGlzLmJ1ZmZlcik7XHJcbiAgICAgIGNvbnN0IHNpemUgPSBnZXROdW1Db21wb25lbnRzKHRoaXMudHlwZSk7IC8vIDIgY29tcG9uZW50cyBwZXIgaXRlcmF0aW9uXHJcbiAgICAgIGNvbnN0IHR5cGUgPSB0aGlzLmNvbnRleHQuRkxPQVQ7IC8vIHRoZSBkYXRhIGlzIDMyYml0IGZsb2F0c1xyXG4gICAgICBjb25zdCBub3JtYWxpemUgPSBmYWxzZTsgLy8gZG9uJ3Qgbm9ybWFsaXplIHRoZSBkYXRhXHJcbiAgICAgIGNvbnN0IHN0cmlkZSA9IDA7IC8vIDAgPSBtb3ZlIGZvcndhcmQgc2l6ZSAqIHNpemVvZih0eXBlKSBlYWNoIGl0ZXJhdGlvbiB0byBnZXQgdGhlIG5leHQgcG9zaXRpb25cclxuICAgICAgY29uc3Qgb2Zmc2V0ID0gMDsgLy8gc3RhcnQgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgYnVmZmVyXHJcbiAgICAgIHRoaXMuY29udGV4dC52ZXJ0ZXhBdHRyaWJQb2ludGVyKFxyXG4gICAgICAgIHRoaXMubG9jYXRpb24sXHJcbiAgICAgICAgc2l6ZSxcclxuICAgICAgICB0eXBlLFxyXG4gICAgICAgIG5vcm1hbGl6ZSxcclxuICAgICAgICBzdHJpZGUsXHJcbiAgICAgICAgb2Zmc2V0XHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXRBdHRyaWJ1dGVCdWZmZXJUeXBlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMudHlwZTtcclxuICB9XHJcblxyXG4gIGdldE51bUVsZW1lbnRzKCkge1xyXG4gICAgcmV0dXJuIHRoaXMubnVtRWxlbWVudHM7XHJcbiAgfVxyXG5cclxuICBkZWxldGVCdWZmZXIoKSB7XHJcbiAgICB0aGlzLmNvbnRleHQuZGVsZXRlQnVmZmVyKHRoaXMuYnVmZmVyKTtcclxuICAgIHRoaXMuYnVmZmVyID0gbnVsbDtcclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IGdldE51bUNvbXBvbmVudHMgPSAoYnVmZmVyVHlwZTogQXR0cmlidXRlQnVmZmVyVHlwZSkgPT4ge1xyXG4gIHN3aXRjaCAoYnVmZmVyVHlwZSkge1xyXG4gICAgY2FzZSBBdHRyaWJ1dGVCdWZmZXJUeXBlLkZMT0FUX1ZFQzM6XHJcbiAgICAgIHJldHVybiAzO1xyXG4gICAgY2FzZSBBdHRyaWJ1dGVCdWZmZXJUeXBlLkZMT0FUX1ZFQzQ6XHJcbiAgICAgIHJldHVybiA0O1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgYXNzZXJ0TmV2ZXIoYnVmZmVyVHlwZSk7XHJcbiAgfVxyXG59O1xyXG4iLCJleHBvcnQgY2xhc3MgQ29tcG9zaXRlS2V5TWFwPFRLZXksIFRWYWx1ZT4ge1xyXG4gIHByaXZhdGUgbWFwID0gbmV3IE1hcDxzdHJpbmcsIFRWYWx1ZT4oKTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBrZXlTZWxlY3RvcjogKGNvbXBvc2l0ZUtleTogVEtleSkgPT4gc3RyaW5nKSB7fVxyXG5cclxuICBnZXQoa2V5OiBUS2V5KSB7XHJcbiAgICByZXR1cm4gdGhpcy5tYXAuZ2V0KHRoaXMua2V5U2VsZWN0b3Ioa2V5KSk7XHJcbiAgfVxyXG5cclxuICBzZXQoa2V5OiBUS2V5LCB2YWx1ZTogVFZhbHVlKSB7XHJcbiAgICB0aGlzLm1hcC5zZXQodGhpcy5rZXlTZWxlY3RvcihrZXkpLCB2YWx1ZSk7XHJcbiAgfVxyXG5cclxuICBoYXMoa2V5OiBUS2V5KSB7XHJcbiAgICByZXR1cm4gdGhpcy5tYXAuaGFzKHRoaXMua2V5U2VsZWN0b3Ioa2V5KSk7XHJcbiAgfVxyXG5cclxuICBlbnRyaWVzU3RyS2V5KCkge1xyXG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5tYXAuZW50cmllcygpKTtcclxuICB9XHJcblxyXG4gIGRlbGV0ZVN0cktleShrZXk6IHN0cmluZykge1xyXG4gICAgdGhpcy5tYXAuZGVsZXRlKGtleSk7XHJcbiAgfVxyXG5cclxuICBkZWxldGUoa2V5OiBUS2V5KSB7XHJcbiAgICB0aGlzLm1hcC5kZWxldGUodGhpcy5rZXlTZWxlY3RvcihrZXkpKTtcclxuICB9XHJcblxyXG4gIGNsZWFyKCkge1xyXG4gICAgdGhpcy5tYXAuY2xlYXIoKTtcclxuICB9XHJcbn1cclxuIiwiLy9odHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjExNzUyM1xyXG5leHBvcnQgY29uc3QgdXVpZHY0ID0gKCkgPT4ge1xyXG4gIHJldHVybiBcInh4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eFwiLnJlcGxhY2UoL1t4eV0vZywgZnVuY3Rpb24gKGMpIHtcclxuICAgIHZhciByID0gKE1hdGgucmFuZG9tKCkgKiAxNikgfCAwLFxyXG4gICAgICB2ID0gYyA9PSBcInhcIiA/IHIgOiAociAmIDB4MykgfCAweDg7XHJcbiAgICByZXR1cm4gdi50b1N0cmluZygxNik7XHJcbiAgfSk7XHJcbn07XHJcbiIsImltcG9ydCB7XHJcbiAgY3JlYXRlVmVjdG9yMixcclxuICBjcmVhdGVWZWN0b3IzLFxyXG4gIGNyZWF0ZVZlY3RvcjQsXHJcbiAgVmVjdG9yMixcclxuICBWZWN0b3IzLFxyXG4gIFZlY3RvcjQsXHJcbn0gZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvaW5wdXROdW1iZXJcIjtcclxuaW1wb3J0IHtcclxuICBjcmVhdGVEcm9wZG93bixcclxuICBjcmVhdGVFbGVtZW50c0Ryb3Bkb3duLFxyXG59IGZyb20gXCIuLi8uLi9jb21wb25lbnRzL2Ryb3Bkb3duXCI7XHJcbmltcG9ydCB7IGNyZWF0ZUNvbG9yMywgY3JlYXRlQ29sb3I0IH0gZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvaW5wdXRDb2xvclwiO1xyXG5pbXBvcnQgeyBVbmlmb3JtSW5mbywgVW5pZm9ybVR5cGUgfSBmcm9tIFwiLi91bmlmb3JtXCI7XHJcbmltcG9ydCB7IENvbXBvc2l0ZUtleU1hcCB9IGZyb20gXCIuLi9jb21wb3NpdGVLZXlNYXBcIjtcclxuaW1wb3J0IHsgY3JlYXRlRGl2LCB3aXRoTGFiZWwgfSBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy93cmFwcGVyc1wiO1xyXG5pbXBvcnQgeyB1dWlkdjQgfSBmcm9tIFwiLi4vLi4vLi4vLi4vY29tbW9uL3V1aWRcIjtcclxuXHJcbmNvbnN0IHVuaWZvcm1Db21wb25lbnRDYWNoZSA9IG5ldyBDb21wb3NpdGVLZXlNYXA8XHJcbiAgeyBuYW1lOiBzdHJpbmc7IHR5cGU6IFVuaWZvcm1UeXBlIH0sXHJcbiAgeyBjb21wb25lbnQ6IEhUTUxFbGVtZW50OyB1bmlmb3JtSW5mbzogVW5pZm9ybUluZm8gfVxyXG4+KGtleSA9PiBgJHtrZXkubmFtZX07JHtrZXkudHlwZX1gKTtcclxuXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVVbmlmb3JtQ29tcG9uZW50cyA9IChcclxuICBjb250ZXh0OiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsXHJcbiAgcHJvZ3JhbTogV2ViR0xQcm9ncmFtLFxyXG4gIHVuaWZvcm1zOiB7IG5hbWU6IHN0cmluZzsgdHlwZTogVW5pZm9ybVR5cGUgfVtdXHJcbikgPT4ge1xyXG4gIGNvbnN0IHVuaWZvcm1Db21wb25lbnRzID0gdW5pZm9ybXMubWFwKHVuaWZvcm0gPT4ge1xyXG4gICAgY29uc3Qga2V5ID0ge1xyXG4gICAgICAuLi51bmlmb3JtLFxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBmcm9tQ2FjaGUgPSB1bmlmb3JtQ29tcG9uZW50Q2FjaGUuZ2V0KGtleSk7XHJcblxyXG4gICAgaWYgKGZyb21DYWNoZSkge1xyXG4gICAgICBmcm9tQ2FjaGUudW5pZm9ybUluZm8uYXR0YWNoVG9Qcm9ncmFtKHByb2dyYW0pO1xyXG4gICAgICByZXR1cm4geyBrZXksIHZhbHVlOiBmcm9tQ2FjaGUgfTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnN0IHVuaWZvcm1JbmZvID0gbmV3IFVuaWZvcm1JbmZvKFxyXG4gICAgICAgIGNvbnRleHQsXHJcbiAgICAgICAgcHJvZ3JhbSxcclxuICAgICAgICB1bmlmb3JtLm5hbWUsXHJcbiAgICAgICAgdW5pZm9ybS50eXBlXHJcbiAgICAgICk7XHJcbiAgICAgIGNvbnN0IGNvbXBvbmVudCA9IHdpdGhMYWJlbChcclxuICAgICAgICBjcmVhdGVVbmlmb3JtQ29tcG9uZW50KHVuaWZvcm1JbmZvKSxcclxuICAgICAgICB1bmlmb3JtLm5hbWVcclxuICAgICAgKTtcclxuICAgICAgcmV0dXJuIHsga2V5LCB2YWx1ZTogeyBjb21wb25lbnQsIHVuaWZvcm1JbmZvIH0gfTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgdW5pZm9ybUNvbXBvbmVudENhY2hlLmNsZWFyKCk7XHJcbiAgdW5pZm9ybUNvbXBvbmVudHMuZm9yRWFjaCh1YyA9PiB1bmlmb3JtQ29tcG9uZW50Q2FjaGUuc2V0KHVjLmtleSwgdWMudmFsdWUpKTtcclxuXHJcbiAgcmV0dXJuIHVuaWZvcm1Db21wb25lbnRzLm1hcCh1YyA9PiB1Yy52YWx1ZSk7XHJcbn07XHJcblxyXG5jb25zdCBjcmVhdGVVbmlmb3JtQ29tcG9uZW50ID0gKHVuaWZvcm1JbmZvOiBVbmlmb3JtSW5mbykgPT4ge1xyXG4gIHN3aXRjaCAodW5pZm9ybUluZm8uZ2V0VW5pZm9ybVR5cGUoKSkge1xyXG4gICAgY2FzZSBVbmlmb3JtVHlwZS5GTE9BVF9WRUMyOlxyXG4gICAgICByZXR1cm4gY3JlYXRlVW5pZm9ybUZvclZlYzIodmFsdWUgPT4gdW5pZm9ybUluZm8uc2V0VmFsdWUodmFsdWUpKTtcclxuICAgIGNhc2UgVW5pZm9ybVR5cGUuRkxPQVRfVkVDMzpcclxuICAgICAgcmV0dXJuIGNyZWF0ZVVuaWZvcm1Gb3JWZWMzKHZhbHVlID0+IHVuaWZvcm1JbmZvLnNldFZhbHVlKHZhbHVlKSk7XHJcbiAgICBjYXNlIFVuaWZvcm1UeXBlLkZMT0FUX1ZFQzQ6XHJcbiAgICAgIGNvbnN0IGluaXRpYWxWYWx1ZTogVmVjdG9yNCA9IFsxLCAwLCAwLCAxXTtcclxuICAgICAgdW5pZm9ybUluZm8uc2V0VmFsdWUoaW5pdGlhbFZhbHVlKTtcclxuICAgICAgcmV0dXJuIGNyZWF0ZVVuaWZvcm1Gb3JWZWM0KGluaXRpYWxWYWx1ZSwgdmFsdWUgPT5cclxuICAgICAgICB1bmlmb3JtSW5mby5zZXRWYWx1ZSh2YWx1ZSlcclxuICAgICAgKTtcclxuICAgIGNhc2UgVW5pZm9ybVR5cGUuU0FNUExFUl8yRDpcclxuICAgICAgcmV0dXJuIGNyZWF0ZVVuaWZvcm1Gb3JUZXh0dXJlKHZhbHVlID0+IHtcclxuICAgICAgICBjb25zdCBjdXJyZW50c2V0VmFsdWUgPSB1dWlkdjQoKTtcclxuICAgICAgICAvL2xvYWQgd2l0aCBkZWJvdW5jZSA9PiB0aGVuXHJcbiAgICAgICAgdW5pZm9ybUluZm8uc2V0VmFsdWUoeyBzbG90OiB2YWx1ZS5zbG90LCB0ZXh0dXJlRGF0YTogdHJ1ZSB9KTtcclxuICAgICAgfSk7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICByZXR1cm4gY3JlYXRlVW5pZm9ybU5vdFN1cHBvcnRlZCgpO1xyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVVbmlmb3JtTm90U3VwcG9ydGVkID0gKCkgPT4ge1xyXG4gIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgZGl2LmNsYXNzTmFtZSA9IFwidW5zdXBwb3J0ZWQtZXJyb3JcIjtcclxuICBkaXYuaW5uZXJUZXh0ID0gXCJOb3Qgc3VwcG9ydGVkIHVuaWZvcm1cIjtcclxuICByZXR1cm4gZGl2O1xyXG59O1xyXG5cclxuY29uc3QgY3JlYXRlVW5pZm9ybUZvclZlYzIgPSAodXBkYXRlOiAodmFsdWU6IFZlY3RvcjIpID0+IHZvaWQpID0+IHtcclxuICBjb25zdCBbY3VzdG9tRWxlbWVudCwgY3VzdG9tQ29udHJvbGxlcl0gPSBjcmVhdGVWZWN0b3IyKHVwZGF0ZSk7XHJcbiAgY3VzdG9tQ29udHJvbGxlci5zZXRWYWx1ZXMoWzAsIDBdKTtcclxuICByZXR1cm4gY3VzdG9tRWxlbWVudDtcclxufTtcclxuXHJcbmNvbnN0IGNyZWF0ZVVuaWZvcm1Gb3JUZXh0dXJlID0gKFxyXG4gIHVwZGF0ZTogKHZhbHVlOiB7IHNsb3Q6IG51bWJlcjsgdGV4dHVyZVNyYzogc3RyaW5nIH0pID0+IHZvaWRcclxuKSA9PiB7XHJcbiAgY29uc3QgW2N1c3RvbUVsZW1lbnQsIGN1c3RvbUNvbnRyb2xsZXJdID0gY3JlYXRlVmVjdG9yMygpO1xyXG4gIGN1c3RvbUNvbnRyb2xsZXIuc2V0VmFsdWVzKFswLCAwLCAwXSk7XHJcbiAgcmV0dXJuIGN1c3RvbUVsZW1lbnQ7XHJcbn07XHJcblxyXG5jb25zdCBjcmVhdGVVbmlmb3JtRm9yVmVjMyA9ICh1cGRhdGU6ICh2YWx1ZTogVmVjdG9yMykgPT4gdm9pZCkgPT4ge1xyXG4gIGNvbnN0IFtjdXN0b21FbGVtZW50LCBjdXN0b21Db250cm9sbGVyXSA9IGNyZWF0ZVZlY3RvcjModXBkYXRlKTtcclxuICBjdXN0b21Db250cm9sbGVyLnNldFZhbHVlcyhbMCwgMCwgMF0pO1xyXG5cclxuICBjb25zdCBbY29sb3JFbGVtZW50LCBjb2xvckNvbnRyb2xsZXJdID0gY3JlYXRlQ29sb3IzKHVwZGF0ZSk7XHJcbiAgY29sb3JDb250cm9sbGVyLnNldFZhbHVlcyhbMSwgMCwgMF0pO1xyXG5cclxuICBjb25zdCBvcHRpb25zRWxlbWVudCA9IGNyZWF0ZUVsZW1lbnRzRHJvcGRvd24oW1xyXG4gICAge1xyXG4gICAgICBpZDogXCJjdXN0b21cIixcclxuICAgICAgZGlzcGxheTogXCJDdXN0b21cIixcclxuICAgICAgZWxlbWVudDogY3VzdG9tRWxlbWVudCxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiBcImNvbG9yXCIsXHJcbiAgICAgIGRpc3BsYXk6IFwiQ29sb3JcIixcclxuICAgICAgZWxlbWVudDogY29sb3JFbGVtZW50LFxyXG4gICAgfSxcclxuICBdKTtcclxuXHJcbiAgcmV0dXJuIGNyZWF0ZURpdihcImNvbHVtbi13aXRoLWdhcFwiLCBbXHJcbiAgICBvcHRpb25zRWxlbWVudCxcclxuICAgIGN1c3RvbUVsZW1lbnQsXHJcbiAgICBjb2xvckVsZW1lbnQsXHJcbiAgXSk7XHJcbn07XHJcblxyXG5jb25zdCBjcmVhdGVVbmlmb3JtRm9yVmVjNCA9IChcclxuICBpbml0aWFsVmFsdWU6IFZlY3RvcjQsXHJcbiAgdXBkYXRlOiAodmFsdWU6IFZlY3RvcjQpID0+IHZvaWRcclxuKSA9PiB7XHJcbiAgY29uc3QgW2N1c3RvbUVsZW1lbnQsIGN1c3RvbUNvbnRyb2xsZXJdID0gY3JlYXRlVmVjdG9yNCh1cGRhdGUpO1xyXG4gIGN1c3RvbUNvbnRyb2xsZXIuc2V0VmFsdWVzKGluaXRpYWxWYWx1ZSk7XHJcblxyXG4gIGNvbnN0IFtjb2xvckVsZW1lbnQsIGNvbG9yQ29udHJvbGxlcl0gPSBjcmVhdGVDb2xvcjQodXBkYXRlKTtcclxuICBjb2xvckNvbnRyb2xsZXIuc2V0VmFsdWVzKGluaXRpYWxWYWx1ZSk7XHJcblxyXG4gIGNvbnN0IG9wdGlvbnNFbGVtZW50ID0gY3JlYXRlRWxlbWVudHNEcm9wZG93bihbXHJcbiAgICB7IGlkOiBcImN1c3RvbVwiLCBkaXNwbGF5OiBcIkN1c3RvbVwiLCBlbGVtZW50OiBjdXN0b21FbGVtZW50IH0sXHJcbiAgICB7IGlkOiBcImNvbG9yXCIsIGRpc3BsYXk6IFwiQ29sb3JcIiwgZWxlbWVudDogY29sb3JFbGVtZW50IH0sXHJcbiAgXSk7XHJcblxyXG4gIHJldHVybiBjcmVhdGVEaXYoXCJjb2x1bW4td2l0aC1nYXBcIiwgW1xyXG4gICAgb3B0aW9uc0VsZW1lbnQsXHJcbiAgICBjdXN0b21FbGVtZW50LFxyXG4gICAgY29sb3JFbGVtZW50LFxyXG4gIF0pO1xyXG59O1xyXG4iLCJpbXBvcnQgeyByZW1vdmVMYXN0IH0gZnJvbSBcIi4uLy4uLy4uLy4uL2NvbW1vbi9hcnJheVwiO1xyXG5pbXBvcnQgeyBoYXNQcm9wZXJ0eSB9IGZyb20gXCIuLi90eXBlR3VhcmRzXCI7XHJcbmltcG9ydCB7IEF0dHJpYnV0ZUJ1ZmZlckluZm8sIEF0dHJpYnV0ZUJ1ZmZlclR5cGUgfSBmcm9tIFwiLi9hdHRyaWJ1dGVCdWZmZXJcIjtcclxuaW1wb3J0IHsgVW5pZm9ybUluZm8sIFVuaWZvcm1UeXBlIH0gZnJvbSBcIi4vdW5pZm9ybVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGNvbXBpbGVTaGFkZXIgPSAoXHJcbiAgcmVuZGVyaW5nQ29udGV4dDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LFxyXG4gIHR5cGU6IEdMZW51bSxcclxuICBzb3VyY2U6IHN0cmluZ1xyXG4pOiBXZWJHTFNoYWRlciB8IHsgZXJyb3I6IHN0cmluZyB9ID0+IHtcclxuICBjb25zdCBzaGFkZXIgPSByZW5kZXJpbmdDb250ZXh0LmNyZWF0ZVNoYWRlcih0eXBlKTtcclxuICByZW5kZXJpbmdDb250ZXh0LnNoYWRlclNvdXJjZShzaGFkZXIsIHNvdXJjZSk7XHJcbiAgcmVuZGVyaW5nQ29udGV4dC5jb21waWxlU2hhZGVyKHNoYWRlcik7XHJcblxyXG4gIGNvbnN0IHJlc3VsdCA9IHJlbmRlcmluZ0NvbnRleHQuZ2V0U2hhZGVyUGFyYW1ldGVyKFxyXG4gICAgc2hhZGVyLFxyXG4gICAgcmVuZGVyaW5nQ29udGV4dC5DT01QSUxFX1NUQVRVU1xyXG4gICk7XHJcblxyXG4gIGlmIChyZXN1bHQpIHtcclxuICAgIHJldHVybiBzaGFkZXI7XHJcbiAgfSBlbHNlIHtcclxuICAgIGNvbnN0IGVycm9yID0gcmVuZGVyaW5nQ29udGV4dC5nZXRTaGFkZXJJbmZvTG9nKHNoYWRlcik7XHJcbiAgICByZW5kZXJpbmdDb250ZXh0LmRlbGV0ZVNoYWRlcihzaGFkZXIpO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgZXJyb3IsXHJcbiAgICB9O1xyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBjb21waWxlU2hhZGVyc0Zyb21Tb3VyY2UgPSAoXHJcbiAgY29udGV4dDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LFxyXG4gIHZlcnRleFNoYWRlckNvbnRlbnQ6IHN0cmluZyxcclxuICBmcmFnbWVudFNoYWRlckNvbnRlbnQ6IHN0cmluZ1xyXG4pID0+IHtcclxuICBjb25zdCB2ZXJ0ZXhTaGFkZXIgPSBjb21waWxlU2hhZGVyKFxyXG4gICAgY29udGV4dCxcclxuICAgIGNvbnRleHQuVkVSVEVYX1NIQURFUixcclxuICAgIHZlcnRleFNoYWRlckNvbnRlbnRcclxuICApO1xyXG5cclxuICBjb25zdCBmcmFnbWVudFNoYWRlciA9IGNvbXBpbGVTaGFkZXIoXHJcbiAgICBjb250ZXh0LFxyXG4gICAgY29udGV4dC5GUkFHTUVOVF9TSEFERVIsXHJcbiAgICBmcmFnbWVudFNoYWRlckNvbnRlbnRcclxuICApO1xyXG5cclxuICBsZXQgdmVydGV4RXJyb3I6IHN0cmluZyA9IHVuZGVmaW5lZDtcclxuICBpZiAoaGFzUHJvcGVydHkodmVydGV4U2hhZGVyLCBcImVycm9yXCIpKSB7XHJcbiAgICB2ZXJ0ZXhFcnJvciA9IHJlbW92ZUxhc3QodmVydGV4U2hhZGVyLmVycm9yLCAxKTtcclxuICB9XHJcblxyXG4gIGxldCBmcmFnbWVudEVycm9yOiBzdHJpbmcgPSB1bmRlZmluZWQ7XHJcbiAgaWYgKGhhc1Byb3BlcnR5KGZyYWdtZW50U2hhZGVyLCBcImVycm9yXCIpKSB7XHJcbiAgICBmcmFnbWVudEVycm9yID0gcmVtb3ZlTGFzdChmcmFnbWVudFNoYWRlci5lcnJvciwgMSk7XHJcbiAgfVxyXG5cclxuICBpZiAodmVydGV4RXJyb3IgfHwgZnJhZ21lbnRFcnJvcikge1xyXG4gICAgLy90b2RvIGNsZWFudXBcclxuICAgIHJldHVybiBbdmVydGV4RXJyb3IsIGZyYWdtZW50RXJyb3JdIGFzIFNoYWRlckNvbXBpbGVFcnJvcnM7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gY3JlYXRlUHJvZ3JhbShjb250ZXh0LCB2ZXJ0ZXhTaGFkZXIsIGZyYWdtZW50U2hhZGVyKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVQcm9ncmFtID0gKFxyXG4gIHJlbmRlcmluZ0NvbnRleHQ6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCxcclxuICB2ZXJ0ZXhTaGFkZXI6IFdlYkdMU2hhZGVyLFxyXG4gIGZyYWdtZW50U2hhZGVyOiBXZWJHTFNoYWRlclxyXG4pID0+IHtcclxuICBjb25zdCBwcm9ncmFtID0gcmVuZGVyaW5nQ29udGV4dC5jcmVhdGVQcm9ncmFtKCk7XHJcbiAgcmVuZGVyaW5nQ29udGV4dC5hdHRhY2hTaGFkZXIocHJvZ3JhbSwgdmVydGV4U2hhZGVyKTtcclxuICByZW5kZXJpbmdDb250ZXh0LmF0dGFjaFNoYWRlcihwcm9ncmFtLCBmcmFnbWVudFNoYWRlcik7XHJcbiAgcmVuZGVyaW5nQ29udGV4dC5saW5rUHJvZ3JhbShwcm9ncmFtKTtcclxuXHJcbiAgY29uc3QgcmVzdWx0ID0gcmVuZGVyaW5nQ29udGV4dC5nZXRQcm9ncmFtUGFyYW1ldGVyKFxyXG4gICAgcHJvZ3JhbSxcclxuICAgIHJlbmRlcmluZ0NvbnRleHQuTElOS19TVEFUVVNcclxuICApO1xyXG5cclxuICBpZiAocmVzdWx0KSB7XHJcbiAgICByZXR1cm4gcHJvZ3JhbTtcclxuICB9IGVsc2Uge1xyXG4gICAgcmVuZGVyaW5nQ29udGV4dC5kZWxldGVQcm9ncmFtKHByb2dyYW0pO1xyXG5cclxuICAgIHRocm93IG5ldyBFcnJvcihcclxuICAgICAgYENyZWF0aW5nIHByb2dyYW0gZmFpbGVkOiAke3JlbmRlcmluZ0NvbnRleHQuZ2V0UHJvZ3JhbUluZm9Mb2cocHJvZ3JhbSl9YFxyXG4gICAgKTtcclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0UHJvZ3JhbVVuaWZvcm1zID0gKFxyXG4gIGNvbnRleHQ6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCxcclxuICBwcm9ncmFtOiBXZWJHTFByb2dyYW1cclxuKSA9PiB7XHJcbiAgY29uc3QgbnVtVW5pZm9ybXMgPSBjb250ZXh0LmdldFByb2dyYW1QYXJhbWV0ZXIoXHJcbiAgICBwcm9ncmFtLFxyXG4gICAgY29udGV4dC5BQ1RJVkVfVU5JRk9STVNcclxuICApO1xyXG4gIGNvbnN0IHJlc3VsdDogeyBuYW1lOiBzdHJpbmc7IHR5cGU6IFVuaWZvcm1UeXBlIH1bXSA9IFtdO1xyXG5cclxuICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgbnVtVW5pZm9ybXM7ICsraW5kZXgpIHtcclxuICAgIGNvbnN0IHVuaWZvcm0gPSBjb250ZXh0LmdldEFjdGl2ZVVuaWZvcm0ocHJvZ3JhbSwgaW5kZXgpO1xyXG4gICAgcmVzdWx0LnB1c2goeyBuYW1lOiB1bmlmb3JtLm5hbWUsIHR5cGU6IHVuaWZvcm0udHlwZSB9KTtcclxuICB9XHJcblxyXG4gIHJldHVybiByZXN1bHQ7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0UHJvZ3JhbUF0dHJpYnV0ZUJ1ZmZlcnMgPSAoXHJcbiAgY29udGV4dDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LFxyXG4gIHByb2dyYW06IFdlYkdMUHJvZ3JhbVxyXG4pID0+IHtcclxuICBjb25zdCBudW1BdHRyaWJ1dGVCdWZmZXJzID0gY29udGV4dC5nZXRQcm9ncmFtUGFyYW1ldGVyKFxyXG4gICAgcHJvZ3JhbSxcclxuICAgIGNvbnRleHQuQUNUSVZFX0FUVFJJQlVURVNcclxuICApO1xyXG5cclxuICBjb25zdCByZXN1bHQ6IHsgbmFtZTogc3RyaW5nOyB0eXBlOiBBdHRyaWJ1dGVCdWZmZXJUeXBlIH1bXSA9IFtdO1xyXG5cclxuICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgbnVtQXR0cmlidXRlQnVmZmVyczsgKytpbmRleCkge1xyXG4gICAgY29uc3QgYXR0cmlidXRlQnVmZmVyID0gY29udGV4dC5nZXRBY3RpdmVBdHRyaWIocHJvZ3JhbSwgaW5kZXgpO1xyXG4gICAgcmVzdWx0LnB1c2goeyBuYW1lOiBhdHRyaWJ1dGVCdWZmZXIubmFtZSwgdHlwZTogYXR0cmlidXRlQnVmZmVyLnR5cGUgfSk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gcmVzdWx0O1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHJlbmRlclByb2dyYW0gPSAoXHJcbiAgY29udGV4dDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LFxyXG4gIHByb2dyYW06IFdlYkdMUHJvZ3JhbSxcclxuICByZW5kZXJJbmZvOiB7XHJcbiAgICB1bmlmb3JtSW5mb3M6IFVuaWZvcm1JbmZvW107XHJcbiAgICBhdHRyaWJ1dGVCdWZmZXJJbmZvczogQXR0cmlidXRlQnVmZmVySW5mb1tdO1xyXG4gICAgLy90ZXh0dXJlc1xyXG4gIH1cclxuKSA9PiB7XHJcbiAgY29udGV4dC51c2VQcm9ncmFtKHByb2dyYW0pO1xyXG4gIGNvbnRleHQudmlld3BvcnQoMCwgMCwgY29udGV4dC5jYW52YXMud2lkdGgsIGNvbnRleHQuY2FudmFzLmhlaWdodCk7XHJcbiAgY29udGV4dC5jbGVhckNvbG9yKDAsIDAsIDAsIDApO1xyXG4gIGNvbnRleHQuY2xlYXIoY29udGV4dC5DT0xPUl9CVUZGRVJfQklUKTtcclxuXHJcbiAgcmVuZGVySW5mby51bmlmb3JtSW5mb3MuZm9yRWFjaCh1ID0+IHUuc2V0VW5pZm9ybSgpKTtcclxuICByZW5kZXJJbmZvLmF0dHJpYnV0ZUJ1ZmZlckluZm9zLmZvckVhY2goYWIgPT4gYWIuc2V0QXR0cmlidXRlQnVmZmVyKCkpO1xyXG4gIGNvbnN0IG51bUVsZW1lbnRzID0gTWF0aC5taW4oXHJcbiAgICAuLi5yZW5kZXJJbmZvLmF0dHJpYnV0ZUJ1ZmZlckluZm9zLm1hcChhYiA9PiBhYi5nZXROdW1FbGVtZW50cygpKVxyXG4gICk7XHJcblxyXG4gIGNvbnN0IHByaW1pdGl2ZVR5cGUgPSBjb250ZXh0LlRSSUFOR0xFUztcclxuICBjb25zdCBvZmZzZXQgPSAwO1xyXG4gIGNvbnNvbGUubG9nKFwiZHJhd2luZ1wiLCBudW1FbGVtZW50cyk7XHJcblxyXG4gIGNvbnRleHQuZHJhd0FycmF5cyhwcmltaXRpdmVUeXBlLCBvZmZzZXQsIG51bUVsZW1lbnRzKTtcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIFNoYWRlckNvbXBpbGVFcnJvcnMgPSBbXHJcbiAgdmVydGV4U2hhZGVyRXJyb3JzOiBzdHJpbmcsXHJcbiAgZnJhZ21lbnRTaGFkZXJFcnJvcnM6IHN0cmluZ1xyXG5dO1xyXG5leHBvcnQgY29uc3QgZm9ybWF0U2hhZGVyQ29tcGlsZUVycm9ycyA9IChyZXN1bHQ6IFNoYWRlckNvbXBpbGVFcnJvcnMpID0+IHtcclxuICBjb25zdCBbdmVydGV4U2hhZGVyRXJyb3JzLCBmcmFnbWVudFNoYWRlckVycm9yc10gPSByZXN1bHQ7XHJcblxyXG4gIGNvbnN0IGVycm9yczogc3RyaW5nW10gPSBbXTtcclxuXHJcbiAgaWYgKHZlcnRleFNoYWRlckVycm9ycykge1xyXG4gICAgZXJyb3JzLnB1c2goXCJWRVJURVggU0hBREVSOlwiLCB2ZXJ0ZXhTaGFkZXJFcnJvcnMpO1xyXG4gIH1cclxuXHJcbiAgaWYgKGZyYWdtZW50U2hhZGVyRXJyb3JzKSB7XHJcbiAgICBlcnJvcnMucHVzaChcIkZSQUdNRU5UIFNIQURFUjpcIiwgZnJhZ21lbnRTaGFkZXJFcnJvcnMpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGVycm9ycy5qb2luKFwiXFxyXFxuXCIpO1xyXG59O1xyXG4iLCJpbXBvcnQgeyB1dWlkdjQgfSBmcm9tIFwiLi4vLi4vLi4vLi4vY29tbW9uL3V1aWRcIjtcclxuaW1wb3J0IHtcclxuICBjcmVhdGVDdXN0b21FbGVtZW50T3B0aW9uLFxyXG4gIGNyZWF0ZUVsZW1lbnRzRHJvcGRvd24sXHJcbn0gZnJvbSBcIi4vLi4vLi4vY29tcG9uZW50cy9kcm9wZG93blwiO1xyXG5pbXBvcnQgeyBDb21wb3NpdGVLZXlNYXAgfSBmcm9tIFwiLi4vLi4vdXRpbHMvY29tcG9zaXRlS2V5TWFwXCI7XHJcbmltcG9ydCB7IFZlY3RvcjMsIFZlY3RvcjQgfSBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9pbnB1dE51bWJlclwiO1xyXG5pbXBvcnQgeyBjcmVhdGVEaXYsIHdpdGhMYWJlbCB9IGZyb20gXCIuLi8uLi9jb21wb25lbnRzL3dyYXBwZXJzXCI7XHJcbmltcG9ydCB7IEF0dHJpYnV0ZUJ1ZmZlckluZm8sIEF0dHJpYnV0ZUJ1ZmZlclR5cGUgfSBmcm9tIFwiLi9hdHRyaWJ1dGVCdWZmZXJcIjtcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCIuLi9vYnNlcnZhYmxlXCI7XHJcblxyXG50eXBlIENhY2hlS2V5ID0ge1xyXG4gIG5hbWU6IHN0cmluZztcclxuICB0eXBlOiBBdHRyaWJ1dGVCdWZmZXJUeXBlO1xyXG59O1xyXG5cclxudHlwZSBDYWNoZVZhbHVlID0ge1xyXG4gIGNvbXBvbmVudDogSFRNTEVsZW1lbnQ7XHJcbiAgYXR0cmlidXRlQnVmZmVySW5mbzogQXR0cmlidXRlQnVmZmVySW5mbztcclxuICBkaXNwb3NlOiAoKSA9PiB2b2lkO1xyXG59O1xyXG5cclxuY29uc3Qga2V5U2VsZWN0b3IgPSAoa2V5OiBDYWNoZUtleSk6IHN0cmluZyA9PiBgJHtrZXkubmFtZX07JHtrZXkudHlwZX1gO1xyXG5jb25zdCBjb21wb25lbnRDYWNoZSA9IG5ldyBDb21wb3NpdGVLZXlNYXA8Q2FjaGVLZXksIENhY2hlVmFsdWU+KGtleVNlbGVjdG9yKTtcclxuXHJcbmNvbnN0IHJlYnVpbGRDYWNoZSA9IChuZXdWYWx1ZXM6IHsga2V5OiBDYWNoZUtleTsgdmFsdWU6IENhY2hlVmFsdWUgfVtdKSA9PiB7XHJcbiAgY29uc3QgbmV3VmFsdWVzU3RyS2V5cyA9IG5ld1ZhbHVlcy5tYXAodiA9PiBrZXlTZWxlY3Rvcih2LmtleSkpO1xyXG4gIGNvbnN0IGNvbXBvbmVudHNUb1JlbW92ZSA9IGNvbXBvbmVudENhY2hlXHJcbiAgICAuZW50cmllc1N0cktleSgpXHJcbiAgICAuZmlsdGVyKGUgPT4gIW5ld1ZhbHVlc1N0cktleXMuaW5jbHVkZXMoZVswXSkpO1xyXG5cclxuICBjb21wb25lbnRzVG9SZW1vdmUuZm9yRWFjaChjID0+IHtcclxuICAgIGNbMV0uZGlzcG9zZSgpO1xyXG4gICAgY29tcG9uZW50Q2FjaGUuZGVsZXRlU3RyS2V5KGNbMF0pO1xyXG4gIH0pO1xyXG5cclxuICBuZXdWYWx1ZXMuZm9yRWFjaChudyA9PiB7XHJcbiAgICBpZiAoIWNvbXBvbmVudENhY2hlLmhhcyhudy5rZXkpKSBjb21wb25lbnRDYWNoZS5zZXQobncua2V5LCBudy52YWx1ZSk7XHJcbiAgfSk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0RGVmYXVsdFZhbHVlID0gKHR5cGU6IEF0dHJpYnV0ZUJ1ZmZlclR5cGUpID0+IHtcclxuICByZXR1cm4gW1xyXG4gICAgWzAsIDAsIDAsIDFdLFxyXG4gICAgWzAsIDAuNSwgMCwgMV0sXHJcbiAgICBbMC45LCAwLCAwLCAxXSxcclxuICAgIFswLCAwLjUsIDAsIDFdLFxyXG4gICAgWzAuNywgMCwgMCwgMV0sXHJcbiAgICBbMC43LCAwLjUsIDAsIDFdLFxyXG4gIF07XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBBdHRyaWJ1dGVCdWZmZXJCaW5kaW5nID0ge1xyXG4gIG5hbWU6IHN0cmluZztcclxuICB0eXBlOiBBdHRyaWJ1dGVCdWZmZXJUeXBlO1xyXG4gIHZhbHVlOiBPYnNlcnZhYmxlPGFueT47XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgY3JlYXRlQXR0cmlidXRlQnVmZmVyQ29tcG9uZW50cyA9IChcclxuICBjb250ZXh0OiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsXHJcbiAgcHJvZ3JhbTogV2ViR0xQcm9ncmFtLFxyXG4gIGF0dHJpYnV0ZUJ1ZmZlcnM6IHsgbmFtZTogc3RyaW5nOyB0eXBlOiBBdHRyaWJ1dGVCdWZmZXJUeXBlIH1bXSxcclxuICBhdHRyaWJ1dGVCdWZmZXJCaW5kaW5nczogQXR0cmlidXRlQnVmZmVyQmluZGluZ1tdXHJcbikgPT4ge1xyXG4gIGNvbnN0IGNvbXBvbmVudHMgPSBhdHRyaWJ1dGVCdWZmZXJzLm1hcChhdHRyaWJ1dGVCdWZmZXIgPT4ge1xyXG4gICAgY29uc3Qga2V5ID0ge1xyXG4gICAgICAuLi5hdHRyaWJ1dGVCdWZmZXIsXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGZyb21DYWNoZSA9IGNvbXBvbmVudENhY2hlLmdldChrZXkpO1xyXG5cclxuICAgIGlmIChmcm9tQ2FjaGUpIHtcclxuICAgICAgZnJvbUNhY2hlLmF0dHJpYnV0ZUJ1ZmZlckluZm8uYXR0YWNoVG9Qcm9ncmFtKHByb2dyYW0pO1xyXG4gICAgICByZXR1cm4geyBrZXksIHZhbHVlOiBmcm9tQ2FjaGUgfTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnN0IGF0dHJpYnV0ZUJ1ZmZlckluZm8gPSBuZXcgQXR0cmlidXRlQnVmZmVySW5mbyhcclxuICAgICAgICBjb250ZXh0LFxyXG4gICAgICAgIHByb2dyYW0sXHJcbiAgICAgICAgYXR0cmlidXRlQnVmZmVyLm5hbWUsXHJcbiAgICAgICAgYXR0cmlidXRlQnVmZmVyLnR5cGVcclxuICAgICAgKTtcclxuXHJcbiAgICAgIGNvbnN0IGFwcGxpY2FibGVCaW5kaW5ncyA9IGF0dHJpYnV0ZUJ1ZmZlckJpbmRpbmdzLmZpbHRlcihcclxuICAgICAgICBiID0+IGIudHlwZSA9PT0gYXR0cmlidXRlQnVmZmVySW5mby5nZXRBdHRyaWJ1dGVCdWZmZXJUeXBlKClcclxuICAgICAgKTtcclxuXHJcbiAgICAgIGNvbnN0IHsgZWxlbWVudCwgZGlzcG9zZSB9ID0gYXBwbGljYWJsZUJpbmRpbmdzLmxlbmd0aFxyXG4gICAgICAgID8gY3JlYXRlRHJvcGRvd25XaXRoQmluZGluZ3MoYXR0cmlidXRlQnVmZmVySW5mbywgYXBwbGljYWJsZUJpbmRpbmdzKVxyXG4gICAgICAgIDogY3JlYXRlU2luZ2xlKGF0dHJpYnV0ZUJ1ZmZlckluZm8pO1xyXG5cclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBrZXksXHJcbiAgICAgICAgdmFsdWU6IHtcclxuICAgICAgICAgIGNvbXBvbmVudDogd2l0aExhYmVsKGVsZW1lbnQsIGF0dHJpYnV0ZUJ1ZmZlci5uYW1lKSxcclxuICAgICAgICAgIGF0dHJpYnV0ZUJ1ZmZlckluZm8sXHJcbiAgICAgICAgICBkaXNwb3NlOiAoKSA9PiB7XHJcbiAgICAgICAgICAgIGF0dHJpYnV0ZUJ1ZmZlckluZm8uZGVsZXRlQnVmZmVyKCk7XHJcbiAgICAgICAgICAgIGRpc3Bvc2U/LigpO1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICByZWJ1aWxkQ2FjaGUoY29tcG9uZW50cyk7XHJcbiAgcmV0dXJuIGNvbXBvbmVudHMubWFwKGMgPT4gYy52YWx1ZSk7XHJcbn07XHJcblxyXG5jb25zdCBjcmVhdGVBdHRyaWJ1dGVCdWZmZXJDb21wb25lbnQgPSAoXHJcbiAgYXR0cmlidXRlQnVmZmVyVHlwZTogQXR0cmlidXRlQnVmZmVyVHlwZSxcclxuICBlZGl0YWJsZTogYm9vbGVhbixcclxuICBjdXJyZW50VmFsdWU6IE9ic2VydmFibGU8YW55PlxyXG4pID0+IHtcclxuICBzd2l0Y2ggKGF0dHJpYnV0ZUJ1ZmZlclR5cGUpIHtcclxuICAgIGNhc2UgQXR0cmlidXRlQnVmZmVyVHlwZS5GTE9BVF9WRUM0OlxyXG4gICAgICByZXR1cm4gY3JlYXRlQXR0cmlidXRlQnVmZmVySW5wdXRWZWM0KGN1cnJlbnRWYWx1ZSwgZWRpdGFibGUpO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmV0dXJuIGNyZWF0ZUF0dHJpYnV0ZUJ1ZmZlck5vdFN1cHBvcnRlZCgpO1xyXG4gIH1cclxufTtcclxuXHJcbmNvbnN0IGNyZWF0ZUF0dHJpYnV0ZUJ1ZmZlck5vdFN1cHBvcnRlZCA9ICgpID0+IHtcclxuICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gIGRpdi5jbGFzc05hbWUgPSBcInVuc3VwcG9ydGVkLWVycm9yXCI7XHJcbiAgZGl2LmlubmVyVGV4dCA9IFwiTm90IHN1cHBvcnRlZCBhdHRyaWJ1dGUgYnVmZmVyXCI7XHJcbiAgcmV0dXJuIGRpdjtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVTaW5nbGUgPSAoYXR0cmlidXRlQnVmZmVySW5mbzogQXR0cmlidXRlQnVmZmVySW5mbykgPT4ge1xyXG4gIGNvbnN0IGN1c3RvbVZhbHVlID0gbmV3IE9ic2VydmFibGU8YW55PihcclxuICAgIGdldERlZmF1bHRWYWx1ZShhdHRyaWJ1dGVCdWZmZXJJbmZvLmdldEF0dHJpYnV0ZUJ1ZmZlclR5cGUoKSlcclxuICApO1xyXG4gIGN1c3RvbVZhbHVlLmF0dGFjaCgodmFsdWU6IGFueSkgPT4ge1xyXG4gICAgYXR0cmlidXRlQnVmZmVySW5mby5zZXRWYWx1ZSh2YWx1ZSk7XHJcbiAgfSk7XHJcblxyXG4gIGNvbnN0IGVsZW1lbnQgPSBjcmVhdGVBdHRyaWJ1dGVCdWZmZXJDb21wb25lbnQoXHJcbiAgICBhdHRyaWJ1dGVCdWZmZXJJbmZvLmdldEF0dHJpYnV0ZUJ1ZmZlclR5cGUoKSxcclxuICAgIHRydWUsXHJcbiAgICBjdXN0b21WYWx1ZVxyXG4gICk7XHJcblxyXG4gIHJldHVybiB7IGVsZW1lbnQsIGRpc3Bvc2U6ICgpID0+IGN1c3RvbVZhbHVlLmRldGFjaEFsbCgpIH07XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgY3JlYXRlRHJvcGRvd25XaXRoQmluZGluZ3MgPSAoXHJcbiAgYXR0cmlidXRlQnVmZmVySW5mbzogQXR0cmlidXRlQnVmZmVySW5mbyxcclxuICBhdHRyaWJ1dGVCdWZmZXJCaW5kaW5nczogQXR0cmlidXRlQnVmZmVyQmluZGluZ1tdXHJcbikgPT4ge1xyXG4gIGNvbnN0IG9wdGlvbnMgPSBhdHRyaWJ1dGVCdWZmZXJCaW5kaW5ncy5tYXAoYmluZGluZyA9PiB7XHJcbiAgICBjb25zdCBlbGVtZW50ID0gY3JlYXRlQXR0cmlidXRlQnVmZmVyQ29tcG9uZW50KFxyXG4gICAgICBhdHRyaWJ1dGVCdWZmZXJJbmZvLmdldEF0dHJpYnV0ZUJ1ZmZlclR5cGUoKSxcclxuICAgICAgZmFsc2UsXHJcbiAgICAgIGJpbmRpbmcudmFsdWVcclxuICAgICk7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgaWQ6IHV1aWR2NCgpLFxyXG4gICAgICBlbGVtZW50LFxyXG4gICAgICBkaXNwbGF5OiBiaW5kaW5nLm5hbWUsXHJcbiAgICAgIHZhbHVlOiBiaW5kaW5nLnZhbHVlLFxyXG4gICAgfTtcclxuICB9KTtcclxuXHJcbiAgY29uc3QgY3VzdG9tVmFsdWUgPSBuZXcgT2JzZXJ2YWJsZTxhbnk+KFxyXG4gICAgZ2V0RGVmYXVsdFZhbHVlKGF0dHJpYnV0ZUJ1ZmZlckluZm8uZ2V0QXR0cmlidXRlQnVmZmVyVHlwZSgpKVxyXG4gICk7XHJcbiAgY3VzdG9tVmFsdWUuYXR0YWNoKCh2YWx1ZTogYW55KSA9PiBhdHRyaWJ1dGVCdWZmZXJJbmZvLnNldFZhbHVlKHZhbHVlKSk7XHJcblxyXG4gIGxldCBjdXN0b21FbGVtZW50ID0gY3JlYXRlQXR0cmlidXRlQnVmZmVyQ29tcG9uZW50KFxyXG4gICAgYXR0cmlidXRlQnVmZmVySW5mby5nZXRBdHRyaWJ1dGVCdWZmZXJUeXBlKCksXHJcbiAgICB0cnVlLFxyXG4gICAgY3VzdG9tVmFsdWVcclxuICApO1xyXG5cclxuICBsZXQgZGV0YWNoOiAoKSA9PiB2b2lkID0gdW5kZWZpbmVkO1xyXG4gIGNvbnN0IGVsZW1lbnQgPSBjcmVhdGVEaXYoXCJjb2x1bW4td2l0aC1nYXBcIiwgW1xyXG4gICAgY3JlYXRlRWxlbWVudHNEcm9wZG93bihcclxuICAgICAgW2NyZWF0ZUN1c3RvbUVsZW1lbnRPcHRpb24oY3VzdG9tRWxlbWVudCksIC4uLm9wdGlvbnNdLFxyXG4gICAgICBpZCA9PiB7XHJcbiAgICAgICAgZGV0YWNoPy4oKTtcclxuXHJcbiAgICAgICAgY29uc3Qgb3B0aW9uID0gb3B0aW9ucy5maW5kKG8gPT4gby5pZCA9PT0gaWQpO1xyXG4gICAgICAgIGlmIChvcHRpb24pIHtcclxuICAgICAgICAgIGNvbnN0IGNhbGxiYWNrID0gKHZhbHVlOiBhbnkpID0+IGF0dHJpYnV0ZUJ1ZmZlckluZm8uc2V0VmFsdWUodmFsdWUpO1xyXG4gICAgICAgICAgb3B0aW9uLnZhbHVlLmF0dGFjaChjYWxsYmFjayk7XHJcbiAgICAgICAgICBjYWxsYmFjayhvcHRpb24udmFsdWUuZ2V0VmFsdWUoKSk7XHJcbiAgICAgICAgICBkZXRhY2ggPSAoKSA9PiBvcHRpb24udmFsdWUuZGV0YWNoKGNhbGxiYWNrKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgY3VzdG9tVmFsdWUuZm9yY2VOb3RpZnkoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICksXHJcbiAgICBjdXN0b21FbGVtZW50LFxyXG4gICAgLi4ub3B0aW9ucy5tYXAobyA9PiBvLmVsZW1lbnQpLFxyXG4gIF0pO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgZWxlbWVudCxcclxuICAgIGRpc3Bvc2U6ICgpID0+IHtcclxuICAgICAgZGV0YWNoPy4oKTtcclxuICAgICAgY3VzdG9tVmFsdWUuZGV0YWNoQWxsKCk7XHJcbiAgICB9LFxyXG4gIH07XHJcbn07XHJcblxyXG5jb25zdCBjcmVhdGVBdHRyaWJ1dGVCdWZmZXJJbnB1dFZlYzQgPSAoXHJcbiAgdmFsdWU6IE9ic2VydmFibGU8VmVjdG9yND4sXHJcbiAgZWRpdGFibGU6IGJvb2xlYW5cclxuKSA9PiB7XHJcbiAgY29uc3QgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XHJcbiAgaW5wdXQuY2xhc3NOYW1lID0gXCJlZGl0LWlucHV0XCI7XHJcbiAgaW5wdXQuZGlzYWJsZWQgPSAhZWRpdGFibGU7XHJcblxyXG4gIGlmICghZWRpdGFibGUpIHtcclxuICAgIGNvbnN0IGxpc3RlbmVyID0gKHZhbHVlOiBWZWN0b3I0KSA9PiAoaW5wdXQudmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSkpO1xyXG4gICAgdmFsdWUuYXR0YWNoKGxpc3RlbmVyKTtcclxuICB9XHJcblxyXG4gIGlucHV0LnZhbHVlID0gSlNPTi5zdHJpbmdpZnkodmFsdWUuZ2V0VmFsdWUoKSk7XHJcbiAgaW5wdXQub25pbnB1dCA9ICgpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IEpTT04ucGFyc2UoaW5wdXQudmFsdWUpO1xyXG4gICAgICAvL2NvbnNvbGUubG9nKFwicmVzdWx0XCIsIHJlc3VsdCk7XHJcblxyXG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkocmVzdWx0KSkge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwidGhpcyBpcyBub3QgYW4gYXJyYXkgdHlwZVwiKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zdCB4eHggPSByZXN1bHQuZXZlcnkoZSA9PlxyXG4gICAgICAgICAgQXJyYXkuaXNBcnJheShlKSA/IGUubGVuZ3RoID09PSA0IDogZmFsc2VcclxuICAgICAgICApO1xyXG4gICAgICAgIGlmICgheHh4KSB7XHJcbiAgICAgICAgICAvLyAgY29uc29sZS5sb2coXCJub3QgZXZlcnkgZWxlbWVudCBpZCB0aGUgYXJyYSBpcyBzYW1lIHNpemVcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHZhbHVlLnNldFZhbHVlKHJlc3VsdCk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmxvZyhcInRoaXMgaXMgbm90IGEganNvblwiKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvL1dyb25nIGZvcm1hdCEgU2hvdWxkIGJlIFtbeDEseTFdLCBbeDIseTJdLCAuLi5dXHJcbiAgcmV0dXJuIGlucHV0O1xyXG59O1xyXG4iLCJpbXBvcnQgeyBvYnNlcnZlRWxlbWVudEJvdW5kaW5nUmVjdCB9IGZyb20gXCIuLi91dGlscy9odG1sXCI7XHJcbmV4cG9ydCBjb25zdCBjcmVhdGVXZWJHTENhbnZhcyA9IChcclxuICBjbGFzc05hbWU6IHN0cmluZ1xyXG4pOiBbXHJcbiAgSFRNTENhbnZhc0VsZW1lbnQsXHJcbiAge1xyXG4gICAgY29udGV4dDogV2ViR0xSZW5kZXJpbmdDb250ZXh0O1xyXG4gIH1cclxuXSA9PiB7XHJcbiAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcclxuICBjYW52YXMuY2xhc3NOYW1lID0gY2xhc3NOYW1lO1xyXG4gIGNvbnN0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dChcIndlYmdsXCIpO1xyXG5cclxuICBvYnNlcnZlRWxlbWVudEJvdW5kaW5nUmVjdChjYW52YXMsIHJlY3QgPT4ge1xyXG4gICAgY2FudmFzLndpZHRoID0gcmVjdC53aWR0aDtcclxuICAgIGNhbnZhcy5oZWlnaHQgPSByZWN0LmhlaWdodDtcclxuICB9KTtcclxuXHJcbiAgaWYgKCFjb250ZXh0KSB7XHJcbiAgICAvL3RvZG8gbW92ZSB0byBlcnJvcnNcclxuICAgIHRocm93IG5ldyBFcnJvcihcIlVuYWJsZSB0byBjcmVhdGUgd2ViZ2wgY29udGV4dFwiKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBbXHJcbiAgICBjYW52YXMsXHJcbiAgICB7XHJcbiAgICAgIGNvbnRleHQsXHJcbiAgICB9LFxyXG4gIF07XHJcbn07XHJcbiIsImV4cG9ydCBjb25zdCBvYnNlcnZlRWxlbWVudEJvdW5kaW5nUmVjdCA9IChcclxuICBlbGVtZW50OiBFbGVtZW50LFxyXG4gIGNhbGxiYWNrOiAocmVjdGFuZ2xlOiB7XHJcbiAgICB4OiBudW1iZXI7XHJcbiAgICB5OiBudW1iZXI7XHJcbiAgICB3aWR0aDogbnVtYmVyO1xyXG4gICAgaGVpZ2h0OiBudW1iZXI7XHJcbiAgfSkgPT4gdm9pZFxyXG4pOiAoKCkgPT4gdm9pZCkgPT4ge1xyXG4gIGNvbnN0IHJlc2l6ZU9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKGVsZW1lbnRzID0+IHtcclxuICAgIGNvbnN0IG9ic2VydmVyRW50cnkgPSBlbGVtZW50cy5maW5kKGUgPT4gZS50YXJnZXQgPT09IGVsZW1lbnQpO1xyXG5cclxuICAgIGlmIChvYnNlcnZlckVudHJ5KSB7XHJcbiAgICAgIGNvbnN0IGRvbVJlY3QgPSBvYnNlcnZlckVudHJ5LnRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgY2FsbGJhY2soe1xyXG4gICAgICAgIHg6IGRvbVJlY3QueCxcclxuICAgICAgICB5OiBkb21SZWN0LnksXHJcbiAgICAgICAgd2lkdGg6IGRvbVJlY3Qud2lkdGgsXHJcbiAgICAgICAgaGVpZ2h0OiBkb21SZWN0LmhlaWdodCxcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIHJlc2l6ZU9ic2VydmVyLm9ic2VydmUoZWxlbWVudCk7XHJcbiAgcmV0dXJuICgpID0+IHJlc2l6ZU9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcclxufTtcclxuIiwiaW1wb3J0IHsgcmVtb3ZlIH0gZnJvbSBcIi4uL2FycmF5XCI7XHJcbmltcG9ydCB7IHV1aWR2NCB9IGZyb20gXCIuLi91dWlkXCI7XHJcbmltcG9ydCB7IE1lc3NhZ2VSZXF1ZXN0LCBNZXNzYWdlUmVzcG9uc2UgfSBmcm9tIFwiLi9tZXNzYWdlc1wiO1xyXG5cclxuZGVjbGFyZSBjb25zdCBhY3F1aXJlVnNDb2RlQXBpOiAoKSA9PiB7XHJcbiAgLy9nZXRTdGF0ZTogKCkgPT4gYW55O1xyXG4gIC8vc2V0U3RhdGU6IChzdGF0ZTogYW55KSA9PiB2b2lkO1xyXG4gIHBvc3RNZXNzYWdlOiAobWVzc2FnZTogTWVzc2FnZVJlcXVlc3QpID0+IHZvaWQ7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgdnNjb2RlQXBpID0gYWNxdWlyZVZzQ29kZUFwaSgpO1xyXG5cclxudHlwZSBSZXNwb25zZUxpc3RlbmVyID0gKG1lc3NhZ2U6IE1lc3NhZ2VSZXNwb25zZSkgPT4gdm9pZDtcclxuXHJcbmV4cG9ydCBjbGFzcyBWaWV3ZXJFbmRwb2ludCB7XHJcbiAgZXZlbnRMaXN0ZW5lcnM6IFJlc3BvbnNlTGlzdGVuZXJbXSA9IFtdO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCBldmVudCA9PiB7XHJcbiAgICAgIHRoaXMuZXZlbnRMaXN0ZW5lcnMuZm9yRWFjaChsaXN0ZW5lciA9PiBsaXN0ZW5lcihldmVudC5kYXRhKSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGdldFNoYWRlckRvY3VtZW50cygpIHtcclxuICAgIGNvbnN0IG1lc3NhZ2VJZCA9IHV1aWR2NCgpO1xyXG5cclxuICAgIHZzY29kZUFwaS5wb3N0TWVzc2FnZSh7XHJcbiAgICAgIHR5cGU6IFwiZ2V0U2hhZGVyRG9jdW1lbnRzXCIsXHJcbiAgICAgIGlkOiBtZXNzYWdlSWQsXHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2U8eyBmaWxlUGF0aDogc3RyaW5nOyBmaWxlTmFtZTogc3RyaW5nIH1bXT4ocmVzb2x2ZSA9PiB7XHJcbiAgICAgIGNvbnN0IGxpc3RlbmVyID0gKG1lc3NhZ2U6IE1lc3NhZ2VSZXNwb25zZSkgPT4ge1xyXG4gICAgICAgIGlmIChtZXNzYWdlLnR5cGUgPT09IFwiZ2V0U2hhZGVyRG9jdW1lbnRzXCIgJiYgbWVzc2FnZS5pZCA9PT0gbWVzc2FnZUlkKSB7XHJcbiAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UucGF5bG9hZC5maWxlcyk7XHJcbiAgICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKGxpc3RlbmVyKTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcblxyXG4gICAgICB0aGlzLmV2ZW50TGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBnZXREb2N1bWVudFRleHQoZmlsZU5hbWU6IHN0cmluZykge1xyXG4gICAgY29uc3QgbWVzc2FnZUlkID0gdXVpZHY0KCk7XHJcblxyXG4gICAgdnNjb2RlQXBpLnBvc3RNZXNzYWdlKHtcclxuICAgICAgdHlwZTogXCJnZXREb2N1bWVudFRleHRcIixcclxuICAgICAgaWQ6IG1lc3NhZ2VJZCxcclxuICAgICAgcGF5bG9hZDogeyBmaWxlTmFtZSB9LFxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPHN0cmluZz4ocmVzb2x2ZSA9PiB7XHJcbiAgICAgIGNvbnN0IGxpc3RlbmVyID0gKG1lc3NhZ2U6IE1lc3NhZ2VSZXNwb25zZSkgPT4ge1xyXG4gICAgICAgIGlmIChtZXNzYWdlLnR5cGUgPT09IFwiZ2V0RG9jdW1lbnRUZXh0XCIgJiYgbWVzc2FnZS5pZCA9PT0gbWVzc2FnZUlkKSB7XHJcbiAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UucGF5bG9hZC50ZXh0KTtcclxuICAgICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIobGlzdGVuZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIHRoaXMuZXZlbnRMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHN1YnNjcmliZVRvRG9jdW1lbnRTYXZlKFxyXG4gICAgZmlsZVBhdGg6IHN0cmluZyxcclxuICAgIGNhbGxiYWNrOiAobmV3Q29udGVudDogc3RyaW5nKSA9PiB2b2lkXHJcbiAgKTogKCkgPT4gdm9pZCB7XHJcbiAgICB2c2NvZGVBcGkucG9zdE1lc3NhZ2Uoe1xyXG4gICAgICB0eXBlOiBcInN1YnNjcmliZVRvRG9jdW1lbnRUZXh0Q2hhbmdlXCIsXHJcbiAgICAgIHBheWxvYWQ6IHsgZmlsZU5hbWU6IGZpbGVQYXRoIH0sXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBsaXN0ZW5lciA9IChtZXNzYWdlOiBNZXNzYWdlUmVzcG9uc2UpID0+IHtcclxuICAgICAgaWYgKFxyXG4gICAgICAgIG1lc3NhZ2UudHlwZSA9PT0gXCJvbkRvY3VtZW50VGV4dENoYW5nZVwiICYmXHJcbiAgICAgICAgbWVzc2FnZS5wYXlsb2FkLmZpbGVQYXRoID09PSBmaWxlUGF0aFxyXG4gICAgICApIHtcclxuICAgICAgICBjYWxsYmFjayhtZXNzYWdlLnBheWxvYWQudGV4dCk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5ldmVudExpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcclxuICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIobGlzdGVuZXIpO1xyXG4gICAgICB2c2NvZGVBcGkucG9zdE1lc3NhZ2Uoe1xyXG4gICAgICAgIHR5cGU6IFwidW5zdWJzY3JpYmVUb0RvY3VtZW50VGV4dENoYW5nZVwiLFxyXG4gICAgICAgIHBheWxvYWQ6IHsgZmlsZU5hbWU6IGZpbGVQYXRoIH0sXHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgcmVtb3ZlTGlzdGVuZXIobGlzdGVuZXI6IFJlc3BvbnNlTGlzdGVuZXIpIHtcclxuICAgIHJlbW92ZSh0aGlzLmV2ZW50TGlzdGVuZXJzLCBsaXN0ZW5lcik7XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBjb25zdCBtZXNoZXMgPSBbXHJcbiAge1xyXG4gICAgaWQ6IFwiY3ViZVwiLFxyXG4gICAgZGlzcGxheTogXCJDdWJlXCIsXHJcbiAgfSxcclxuICB7XHJcbiAgICBpZDogXCJzcGhlcmVcIixcclxuICAgIGRpc3BsYXk6IFwiU3BoZXJlXCIsXHJcbiAgfSxcclxuXTtcclxuIiwiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCIuL3V0aWxzL29ic2VydmFibGVcIjtcclxuaW1wb3J0IHsgdHJhbnNsYXRpb25zIH0gZnJvbSBcIi4uLy4uL2NvbW1vbi90cmFuc2xhdGlvbnNcIjtcclxuaW1wb3J0IHsgY3JlYXRlRHJvcGRvd24gfSBmcm9tIFwiLi9jb21wb25lbnRzL2Ryb3Bkb3duXCI7XHJcbmltcG9ydCB7IGNyZWF0ZVNlY3Rpb25UaXRsZSB9IGZyb20gXCIuL2NvbXBvbmVudHMvaGVhZGVyXCI7XHJcbmltcG9ydCB7IGNyZWF0ZUJ1dHRvbiBhcyBjcmVhdGVCdXR0b24gfSBmcm9tIFwiLi9jb21wb25lbnRzL2J1dHRvblwiO1xyXG5pbXBvcnQgeyBjcmVhdGVEaXYsIHdpdGhMYWJlbCB9IGZyb20gXCIuL2NvbXBvbmVudHMvd3JhcHBlcnNcIjtcclxuaW1wb3J0IHsgY3JlYXRlVW5pZm9ybUNvbXBvbmVudHMgfSBmcm9tIFwiLi91dGlscy93ZWJnbC91bmlmb3JtQ29tcG9uZW50XCI7XHJcbmltcG9ydCB7XHJcbiAgY29tcGlsZVNoYWRlcnNGcm9tU291cmNlLFxyXG4gIGZvcm1hdFNoYWRlckNvbXBpbGVFcnJvcnMsXHJcbiAgZ2V0UHJvZ3JhbUF0dHJpYnV0ZUJ1ZmZlcnMsXHJcbiAgZ2V0UHJvZ3JhbVVuaWZvcm1zLFxyXG4gIHJlbmRlclByb2dyYW0sXHJcbiAgU2hhZGVyQ29tcGlsZUVycm9ycyxcclxufSBmcm9tIFwiLi91dGlscy93ZWJnbC9pbmRleFwiO1xyXG5pbXBvcnQge1xyXG4gIEF0dHJpYnV0ZUJ1ZmZlckJpbmRpbmcsXHJcbiAgY3JlYXRlQXR0cmlidXRlQnVmZmVyQ29tcG9uZW50cyxcclxufSBmcm9tIFwiLi91dGlscy93ZWJnbC9hdHRyaWJ1dGVCdWZmZXJDb21wb25lbnRcIjtcclxuaW1wb3J0IHsgY3JlYXRlV2ViR0xDYW52YXMgfSBmcm9tIFwiLi9jb21wb25lbnRzL3dlYmdsQ2FudmFzXCI7XHJcbmltcG9ydCB7IFZpZXdlckVuZHBvaW50IH0gZnJvbSBcIi4uLy4uL2NvbW1vbi9jb21tdW5pY2F0aW9uL3ZpZXdlckVuZHBvaW50XCI7XHJcbmltcG9ydCB7IEF0dHJpYnV0ZUJ1ZmZlclR5cGUgfSBmcm9tIFwiLi91dGlscy93ZWJnbC9hdHRyaWJ1dGVCdWZmZXJcIjtcclxuaW1wb3J0IHsgbWVzaGVzIH0gZnJvbSBcIi4vbWVzaGVzXCI7XHJcblxyXG5jb25zdCBjcmVhdGVWaWV3ZXIgPSBhc3luYyAoKSA9PiB7XHJcbiAgY29uc3QgbWVzaEF0dHJpYnV0ZXM6IEF0dHJpYnV0ZUJ1ZmZlckJpbmRpbmdbXSA9IFtcclxuICAgIHtcclxuICAgICAgbmFtZTogXCJCaW5kaW5nIC0gQ3ViZSBub3JtYWxzXCIsXHJcbiAgICAgIHR5cGU6IEF0dHJpYnV0ZUJ1ZmZlclR5cGUuRkxPQVRfVkVDNCxcclxuICAgICAgdmFsdWU6IG5ldyBPYnNlcnZhYmxlKFtcclxuICAgICAgICBbMCwgMCwgMCwgMV0sXHJcbiAgICAgICAgWzAsIDAuNSwgMCwgMV0sXHJcbiAgICAgICAgWzAuNCwgMCwgMCwgMV0sXHJcbiAgICAgICAgWzAsIDAuNSwgMCwgMV0sXHJcbiAgICAgICAgWzAuNywgMCwgMCwgMV0sXHJcbiAgICAgICAgWzAuNywgMC41LCAwLCAxXSxcclxuICAgICAgXSksXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBuYW1lOiBcIkJpbmRpbmcgLSBDdWJlIHRhbmdlbnRzXCIsXHJcbiAgICAgIHR5cGU6IEF0dHJpYnV0ZUJ1ZmZlclR5cGUuRkxPQVRfVkVDNCxcclxuICAgICAgdmFsdWU6IG5ldyBPYnNlcnZhYmxlKFtcclxuICAgICAgICBbMCwgMCwgMCwgMV0sXHJcbiAgICAgICAgWzAsIDAuNSwgMCwgMV0sXHJcbiAgICAgICAgWzAuNSwgMCwgMCwgMV0sXHJcbiAgICAgICAgWzAsIDAuNSwgMCwgMV0sXHJcbiAgICAgICAgWzAuNywgMCwgMCwgMV0sXHJcbiAgICAgICAgWzAuNywgMC41LCAwLCAxXSxcclxuICAgICAgXSksXHJcbiAgICB9LFxyXG4gIF07XHJcblxyXG4gIC8vb25jaGFuZ2UgdWRwYXRlIGVud0xvY2FsXHJcbiAgY29uc3Qgdmlld2VyRW5kcG9pbnQgPSBuZXcgVmlld2VyRW5kcG9pbnQoKTtcclxuICBjb25zdCB2aWV3ZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInZpZXdlclwiKTtcclxuICBjb25zdCB2aWV3ZXJPcHRpb25zID0gY3JlYXRlRGl2KFwidmlld2VyLW9wdGlvbnNcIik7XHJcbiAgY29uc3Qgc2hhZGVyT3B0aW9ucyA9IGNyZWF0ZURpdihcInZpZXdlci1zaGFkZXItb3B0aW9uc1wiKTtcclxuICBjb25zdCBzaGFkZXJDb21waWxhdGlvbkVycm9ycyA9IGNyZWF0ZURpdihcInZpZXdlci1jb250ZW50IHNoYWRlci1lcnJvcnNcIik7XHJcbiAgY29uc3QgW3dlYkdMQ2FudmFzLCB3ZWJHTENvbnRyb2xsZXJdID0gY3JlYXRlV2ViR0xDYW52YXMoXCJ2aWV3ZXItY29udGVudFwiKTtcclxuXHJcbiAgdmlld2VyLmFwcGVuZENoaWxkKHdlYkdMQ2FudmFzKTtcclxuICB2aWV3ZXIuYXBwZW5kQ2hpbGQoc2hhZGVyQ29tcGlsYXRpb25FcnJvcnMpO1xyXG4gIHZpZXdlci5hcHBlbmRDaGlsZCh2aWV3ZXJPcHRpb25zKTtcclxuXHJcbiAgY29uc3Qgc2hvd0NvbnRlbnQgPSAoY29udGVudDogXCJjYW52YXNcIiB8IFwiZXJyb3JzXCIgfCBcIm5vbmVcIikgPT4ge1xyXG4gICAgd2ViR0xDYW52YXMuc3R5bGUudmlzaWJpbGl0eSA9XHJcbiAgICAgIGNvbnRlbnQgPT09IFwiY2FudmFzXCIgPyBcInZpc2libGVcIiA6IFwiY29sbGFwc2VcIjtcclxuICAgIHNoYWRlckNvbXBpbGF0aW9uRXJyb3JzLnN0eWxlLnZpc2liaWxpdHkgPVxyXG4gICAgICBjb250ZW50ID09PSBcImVycm9yc1wiID8gXCJ2aXNpYmxlXCIgOiBcImNvbGxhcHNlXCI7XHJcbiAgfTtcclxuXHJcbiAgY29uc3Qgc3luY1NoYWRlckRvY3VtZW50cyA9ICgpID0+IHtcclxuICAgIHZpZXdlckVuZHBvaW50LmdldFNoYWRlckRvY3VtZW50cygpLnRoZW4oc2QgPT4ge1xyXG4gICAgICBjb25zdCBmaWxlcyA9IHNkLm1hcChmID0+ICh7XHJcbiAgICAgICAgaWQ6IGYuZmlsZVBhdGgsXHJcbiAgICAgICAgZGlzcGxheTogZi5maWxlTmFtZSxcclxuICAgICAgfSkpO1xyXG5cclxuICAgICAgdmVydGV4RHJvcGRvd25Db250cm9sbGVyLnNldEl0ZW1zKGZpbGVzKTtcclxuICAgICAgZnJhZ21lbnREcm9wZG93bkNvbnRyb2xsZXIuc2V0SXRlbXMoZmlsZXMpO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgbGV0IHNlbGVjdGVkVmVydGV4RmlsZVdhdGNoZXJVbnN1YnNjcmliZTogKCkgPT4gdm9pZCB8IHVuZGVmaW5lZDtcclxuICBsZXQgc2VsZWN0ZWRGcmFnbWVudEZpbGVXYXRjaGVyVW5zdWJzY3JpYmU6ICgpID0+IHZvaWQgfCB1bmRlZmluZWQ7XHJcbiAgbGV0IHNlbGVjdGVkVmVydGV4Q29udGVudDogc3RyaW5nIHwgbnVsbDtcclxuICBsZXQgc2VsZWN0ZWRGcmFnbWVudENvbnRlbnQ6IHN0cmluZyB8IG51bGw7XHJcbiAgbGV0IGFuaW1hdGlvbkZyYW1lSGFuZGxlOiBudW1iZXIgPSBudWxsO1xyXG5cclxuICBjb25zdCBvblNoYWRlckNvbnRlbnRDaGFuZ2VkID0gKCkgPT4ge1xyXG4gICAgc2hhZGVyT3B0aW9ucy5pbm5lckhUTUwgPSBcIlwiO1xyXG4gICAgY29uc3QgY29udGV4dCA9IHdlYkdMQ29udHJvbGxlci5jb250ZXh0O1xyXG5cclxuICAgIGlmIChzZWxlY3RlZEZyYWdtZW50Q29udGVudCAmJiBzZWxlY3RlZFZlcnRleENvbnRlbnQpIHtcclxuICAgICAgY29uc3QgcmVzdWx0ID0gY29tcGlsZVNoYWRlcnNGcm9tU291cmNlKFxyXG4gICAgICAgIGNvbnRleHQsXHJcbiAgICAgICAgc2VsZWN0ZWRWZXJ0ZXhDb250ZW50LFxyXG4gICAgICAgIHNlbGVjdGVkRnJhZ21lbnRDb250ZW50XHJcbiAgICAgICk7XHJcblxyXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShyZXN1bHQpKSB7XHJcbiAgICAgICAgc2hvd0NvbnRlbnQoXCJlcnJvcnNcIik7XHJcbiAgICAgICAgc2hhZGVyQ29tcGlsYXRpb25FcnJvcnMuaW5uZXJUZXh0ID0gZm9ybWF0U2hhZGVyQ29tcGlsZUVycm9ycyhcclxuICAgICAgICAgIHJlc3VsdCBhcyBTaGFkZXJDb21waWxlRXJyb3JzXHJcbiAgICAgICAgKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBzaG93Q29udGVudChcImNhbnZhc1wiKTtcclxuICAgICAgICBjb25zdCBwcm9ncmFtID0gcmVzdWx0IGFzIFdlYkdMUHJvZ3JhbTtcclxuICAgICAgICBjb25zdCBwcm9ncmFtVW5pZm9ybXMgPSBnZXRQcm9ncmFtVW5pZm9ybXMoY29udGV4dCwgcHJvZ3JhbSk7XHJcbiAgICAgICAgY29uc3QgcHJvZ3JhbUF0dHJpYnV0ZUJ1ZmZlcnMgPSBnZXRQcm9ncmFtQXR0cmlidXRlQnVmZmVycyhcclxuICAgICAgICAgIGNvbnRleHQsXHJcbiAgICAgICAgICBwcm9ncmFtXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgY29uc3QgdW5pZm9ybUNvbXBvbmVudHMgPSBjcmVhdGVVbmlmb3JtQ29tcG9uZW50cyhcclxuICAgICAgICAgIGNvbnRleHQsXHJcbiAgICAgICAgICBwcm9ncmFtLFxyXG4gICAgICAgICAgcHJvZ3JhbVVuaWZvcm1zXHJcbiAgICAgICAgKTtcclxuICAgICAgICB1bmlmb3JtQ29tcG9uZW50cy5mb3JFYWNoKHVjID0+XHJcbiAgICAgICAgICBzaGFkZXJPcHRpb25zLmFwcGVuZENoaWxkKHVjLmNvbXBvbmVudClcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBjb25zdCBhdHRyaWJ1dGVCdWZmZXJDb21wb25lbnRzID0gY3JlYXRlQXR0cmlidXRlQnVmZmVyQ29tcG9uZW50cyhcclxuICAgICAgICAgIGNvbnRleHQsXHJcbiAgICAgICAgICBwcm9ncmFtLFxyXG4gICAgICAgICAgcHJvZ3JhbUF0dHJpYnV0ZUJ1ZmZlcnMsXHJcbiAgICAgICAgICBtZXNoQXR0cmlidXRlc1xyXG4gICAgICAgICk7XHJcbiAgICAgICAgYXR0cmlidXRlQnVmZmVyQ29tcG9uZW50cy5mb3JFYWNoKGFiID0+XHJcbiAgICAgICAgICBzaGFkZXJPcHRpb25zLmFwcGVuZENoaWxkKGFiLmNvbXBvbmVudClcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBjb25zdCB1bmlmb3JtSW5mb3MgPSB1bmlmb3JtQ29tcG9uZW50cy5tYXAodWMgPT4gdWMudW5pZm9ybUluZm8pO1xyXG4gICAgICAgIGNvbnN0IGF0dHJpYnV0ZUJ1ZmZlckluZm9zID0gYXR0cmlidXRlQnVmZmVyQ29tcG9uZW50cy5tYXAoXHJcbiAgICAgICAgICBhYmMgPT4gYWJjLmF0dHJpYnV0ZUJ1ZmZlckluZm9cclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBpZiAoYW5pbWF0aW9uRnJhbWVIYW5kbGUgIT09IG51bGwpXHJcbiAgICAgICAgICBjYW5jZWxBbmltYXRpb25GcmFtZShhbmltYXRpb25GcmFtZUhhbmRsZSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHJlbmRlciA9ICgpID0+IHtcclxuICAgICAgICAgIHJlbmRlclByb2dyYW0oY29udGV4dCwgcHJvZ3JhbSwge1xyXG4gICAgICAgICAgICB1bmlmb3JtSW5mb3MsXHJcbiAgICAgICAgICAgIGF0dHJpYnV0ZUJ1ZmZlckluZm9zLFxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICBhbmltYXRpb25GcmFtZUhhbmRsZSA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShyZW5kZXIpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJlbmRlcigpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBzaG93Q29udGVudChcIm5vbmVcIik7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgdmlld2VyT3B0aW9ucy5hcHBlbmRDaGlsZChcclxuICAgIGNyZWF0ZURpdihcInZpZXdlci1zaGFkZXJzLXRpdGxlXCIsIFtcclxuICAgICAgY3JlYXRlU2VjdGlvblRpdGxlKHRyYW5zbGF0aW9ucy5zaGFkZXJzLCBcIlwiKS5lbGVtZW50LFxyXG4gICAgICBjcmVhdGVCdXR0b24oXCJTeW5jXCIsIFwidmlld2VyLXJlZnJlc2gtYnV0dG9uXCIsIHN5bmNTaGFkZXJEb2N1bWVudHMpXHJcbiAgICAgICAgLmVsZW1lbnQsXHJcbiAgICBdKVxyXG4gICk7XHJcblxyXG4gIGNvbnN0IFt2ZXJ0ZXhEcm9wZG93bkVsZW1lbnQsIHZlcnRleERyb3Bkb3duQ29udHJvbGxlcl0gPSBjcmVhdGVEcm9wZG93bihcclxuICAgIGFzeW5jIG5ld1ZlcnRleCA9PiB7XHJcbiAgICAgIHNlbGVjdGVkVmVydGV4RmlsZVdhdGNoZXJVbnN1YnNjcmliZT8uKCk7XHJcblxyXG4gICAgICBpZiAobmV3VmVydGV4KSB7XHJcbiAgICAgICAgc2VsZWN0ZWRWZXJ0ZXhGaWxlV2F0Y2hlclVuc3Vic2NyaWJlID0gdmlld2VyRW5kcG9pbnQuc3Vic2NyaWJlVG9Eb2N1bWVudFNhdmUoXHJcbiAgICAgICAgICBuZXdWZXJ0ZXguaWQsXHJcbiAgICAgICAgICBuZXdDb250ZW50ID0+IHtcclxuICAgICAgICAgICAgc2VsZWN0ZWRWZXJ0ZXhDb250ZW50ID0gbmV3Q29udGVudDtcclxuICAgICAgICAgICAgb25TaGFkZXJDb250ZW50Q2hhbmdlZCgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHNlbGVjdGVkVmVydGV4Q29udGVudCA9IG5ld1ZlcnRleFxyXG4gICAgICAgID8gYXdhaXQgdmlld2VyRW5kcG9pbnQuZ2V0RG9jdW1lbnRUZXh0KG5ld1ZlcnRleC5pZClcclxuICAgICAgICA6IFwiXCI7XHJcbiAgICAgIG9uU2hhZGVyQ29udGVudENoYW5nZWQoKTtcclxuICAgIH1cclxuICApO1xyXG4gIHZpZXdlck9wdGlvbnMuYXBwZW5kQ2hpbGQod2l0aExhYmVsKHZlcnRleERyb3Bkb3duRWxlbWVudCwgXCJWZXJ0ZXggU2hhZGVyXCIpKTtcclxuXHJcbiAgY29uc3QgW2ZyYWdtZW50RHJvcGRvd25FbGVtZW50LCBmcmFnbWVudERyb3Bkb3duQ29udHJvbGxlcl0gPSBjcmVhdGVEcm9wZG93bihcclxuICAgIGFzeW5jIG5ld0ZyYWdtZW50ID0+IHtcclxuICAgICAgc2VsZWN0ZWRGcmFnbWVudEZpbGVXYXRjaGVyVW5zdWJzY3JpYmU/LigpO1xyXG5cclxuICAgICAgaWYgKG5ld0ZyYWdtZW50KSB7XHJcbiAgICAgICAgc2VsZWN0ZWRGcmFnbWVudEZpbGVXYXRjaGVyVW5zdWJzY3JpYmUgPSB2aWV3ZXJFbmRwb2ludC5zdWJzY3JpYmVUb0RvY3VtZW50U2F2ZShcclxuICAgICAgICAgIG5ld0ZyYWdtZW50LmlkLFxyXG4gICAgICAgICAgbmV3Q29udGVudCA9PiB7XHJcbiAgICAgICAgICAgIHNlbGVjdGVkRnJhZ21lbnRDb250ZW50ID0gbmV3Q29udGVudDtcclxuICAgICAgICAgICAgb25TaGFkZXJDb250ZW50Q2hhbmdlZCgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHNlbGVjdGVkRnJhZ21lbnRDb250ZW50ID0gbmV3RnJhZ21lbnRcclxuICAgICAgICA/IGF3YWl0IHZpZXdlckVuZHBvaW50LmdldERvY3VtZW50VGV4dChuZXdGcmFnbWVudC5pZClcclxuICAgICAgICA6IFwiXCI7XHJcbiAgICAgIG9uU2hhZGVyQ29udGVudENoYW5nZWQoKTtcclxuICAgIH1cclxuICApO1xyXG4gIHZpZXdlck9wdGlvbnMuYXBwZW5kQ2hpbGQoXHJcbiAgICB3aXRoTGFiZWwoZnJhZ21lbnREcm9wZG93bkVsZW1lbnQsIFwiRnJhZ21lbnQgU2hhZGVyXCIpXHJcbiAgKTtcclxuXHJcbiAgY29uc3QgW21lc2hEcm9wZG93bkVsZW1lbnQsIG1lc2hEcm9wZG93bkNvbnRyb2xsZXJdID0gY3JlYXRlRHJvcGRvd24oKCkgPT5cclxuICAgIG9uU2hhZGVyQ29udGVudENoYW5nZWQoKVxyXG4gICk7XHJcbiAgbWVzaERyb3Bkb3duQ29udHJvbGxlci5zZXRJdGVtcyhtZXNoZXMpO1xyXG4gIHZpZXdlck9wdGlvbnMuYXBwZW5kQ2hpbGQod2l0aExhYmVsKG1lc2hEcm9wZG93bkVsZW1lbnQsIFwiTWVzaFwiKSk7XHJcblxyXG4gIHZpZXdlck9wdGlvbnMuYXBwZW5kQ2hpbGQoc2hhZGVyT3B0aW9ucyk7XHJcblxyXG4gIHN5bmNTaGFkZXJEb2N1bWVudHMoKTtcclxufTtcclxuXHJcbmNyZWF0ZVZpZXdlcigpO1xyXG4iLCJleHBvcnQgY29uc3QgY3JlYXRlU2VjdGlvblRpdGxlID0gKHRleHQ6IHN0cmluZywgY2xhc3NOYW1lOiBzdHJpbmcpID0+IHtcclxuICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImgzXCIpO1xyXG4gIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0O1xyXG4gIGVsZW1lbnQuY2xhc3NOYW1lID0gYCR7Y2xhc3NOYW1lfSBzZWN0aW9uLXRpdGxlYDtcclxuICByZXR1cm4geyBlbGVtZW50IH07XHJcbn07XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=