!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);var r,o="SHADERS",a=function(){return(a=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},i=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var a=arguments[t],i=0,u=a.length;i<u;i++,o++)r[o]=a[i];return r},u={emptyItem:!0},c=function(e,t,n){var r=a(a({},u),n),o=document.createElement("select");o.className="dropdown-base "+t;var c=null,s=[],l=function(t){e(c=t)};o.onchange=function(){var e=s.find((function(e){return e.item.id===o.value}));e.item.id?l(e.item):l(null)};return[o,{setItems:function(e){o.innerHTML="",s.length=0,e.find((function(e){return e.id===(null==c?void 0:c.id)}))||l(null),(r.emptyItem?i([{id:"",display:""}],e):i(e)).forEach((function(e){var t=document.createElement("option");t.value=e.id,t.textContent=e.display,t.selected=e.id===(null==c?void 0:c.id),o.appendChild(t),s.push({element:t,item:e})}))},getItems:function(){return s.map((function(e){return e.item}))},setSelectedItemById:function(e){l(null),s.forEach((function(t){t.item.id===e?(t.element.selected=!0,l(t.item)):t.element.selected=!1}))},getSelectedItem:function(){return c},clearSelection:function(){s.forEach((function(e){return e.element.selected=!1})),l(null)}}]},s=function(e,t){return e.substring(0,e.length-t)},l=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){var t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}))},f=function(e,t){return e.hasOwnProperty(t)},d=function(e){throw new Error("Unhandled union member: "+JSON.stringify(e))},p=acquireVsCodeApi(),m=function(){function e(){var e=this;this.eventListeners=[],window.addEventListener("message",(function(t){e.eventListeners.forEach((function(e){return e(t.data)}))}))}return e.prototype.getShaderDocuments=function(){var e=this,t=l();return p.postMessage({type:"getShaderDocuments",id:t}),new Promise((function(n){var r=function(o){"getShaderDocuments"===o.type&&o.id===t&&(n(o.payload.files),e.removeListener(r))};e.eventListeners.push(r)}))},e.prototype.getDocumentText=function(e){var t=this,n=l();return p.postMessage({type:"getDocumentText",id:n,payload:{fileName:e}}),new Promise((function(e){var r=function(o){"getDocumentText"===o.type&&o.id===n&&(e(o.payload.text),t.removeListener(r))};t.eventListeners.push(r)}))},e.prototype.subscribeToDocumentSave=function(e,t){var n=this;p.postMessage({type:"subscribeToDocumentTextChange",payload:{fileName:e}});var r=function(n){"onDocumentTextChange"===n.type&&n.payload.filePath===e&&t(n.payload.text)};return this.eventListeners.push(r),function(){n.removeListener(r),p.postMessage({type:"unsubscribeToDocumentTextChange",payload:{fileName:e}})}},e.prototype.removeListener=function(e){var t,n,r;t=this.eventListeners,n=e,(r=t.indexOf(n))>-1&&t.splice(r,1)},e}(),v=function(e,t,n){var r=document.createElement("button");return r.onclick=n,r.className=t,r.textContent=e,{element:r}},h=function(e,t,n){var r=document.createElement("div");r.className=t+" options-wrapper";var o=document.createElement("label");return o.className="options-label",o.textContent=n,e.className=e.className+" options-content",r.appendChild(o),r.appendChild(e),r},y=function(e,t,n,r,o){var a=document.createElement("div");a.className="edit-input-grid";for(var i=[],u=function(){return i.map((function(e){return e.value}))},c=0;c<n;c++){var s=document.createElement("div");s.className="edit-input-row";for(var l=function(n){var a=c*r+n,l=e[a],f=document.createElement("input"),d={element:f,value:l};Object.assign(f,o),f.className="edit-input",f.type="number",f.value=null==l?void 0:l.toString(),f.oninput=function(){i[a].value=Number(f.value),null==t||t(u())},i.push(d),s.appendChild(f)},f=0;f<r;f++)l(f);a.appendChild(s)}return[a,{setValues:function(e){return i.forEach((function(t,n){t.value=e[n],t.element.value=t.value.toString()}))},getValues:u,setReadonly:function(e){return i.forEach((function(t){return t.element.readOnly=e}))}}]},g=function(e){return y([0,0,0],e,1,3)},b=function(e,t){var n=document.createElement("div");return n.className=e,null==t||t.forEach((function(e){return n.appendChild(e)})),n},E=function(){return(E=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},x={min:"0",max:"1",step:"0.1"},A=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var a=arguments[t],i=0,u=a.length;i<u;i++,o++)r[o]=a[i];return r};!function(e){e[e.FLOAT_VEC2=35664]="FLOAT_VEC2",e[e.FLOAT_VEC3=35665]="FLOAT_VEC3",e[e.FLOAT_VEC4=35666]="FLOAT_VEC4",e[e.SAMPLER_2D=35678]="SAMPLER_2D"}(r||(r={}));var w,C=function(e,t){for(var n=e.getProgramParameter(t,e.ACTIVE_UNIFORMS),o=[],a=function(n){var a=e.getActiveUniform(t,n),i=e.getUniformLocation(t,a.name),u=function(e,t,n){switch(e){case r.FLOAT_VEC2:return function(e){return t.uniform2f.apply(t,A([n],e))};case r.FLOAT_VEC3:return function(e){return t.uniform3f.apply(t,A([n],e))};case r.FLOAT_VEC4:return function(e){return t.uniform4f.apply(t,A([n],e))};case r.SAMPLER_2D:return function(e){};default:d(e)}}(a.type,e,i),c=void 0;o.push({name:a.name,type:a.type,update:function(e){return c=e},onRender:function(){return u(c)}})},i=0;i<n;++i)a(i);return o},T=function(){var e=document.createElement("div");return e.className="unsupported-error",e.innerText="Not supported uniform",e},S=function(e){var t=c((function(t){t&&(Object.values(e).forEach((function(e){return e.element.classList.add("hidden")})),e[t.id].element.classList.remove("hidden"))}),"",{emptyItem:!1}),n=t[0],r=t[1];return r.setItems(Object.entries(e).map((function(e){return{id:e[0],display:e[1].display}}))),r.setSelectedItemById("custom"),n},O=function(e){var t=y([0,0],e,1,2),n=t[0];return t[1].setValues([0,0]),n},L=function(e){var t=g(),n=t[0];return t[1].setValues([0,0,0]),n},_=function(e){var t=g(e),n=t[0];t[1].setValues([0,0,0]);var r=function(e){var t=[.5,.5,.5],n=document.createElement("div");n.className="edit-input-color";var r=function(e){n.style.background="rgb("+255*e[0]+","+255*e[1]+","+255*e[2]+",1)"};r(t);var o=b("row-with-gap"),a=y(t,(function(t){r(t),null==e||e(t)}),1,3,x),i=a[0],u=a[1];return o.appendChild(i),o.appendChild(n),[o,E(E({},u),{setValues:function(e){u.setValues(e),r(e)}})]}(e),o=r[0];r[1].setValues([1,0,0]);var a=S({custom:{display:"Custom",element:n},color:{display:"Color",element:o}});return b("column-with-gap",[a,n,o])},V=function(e){var t=y([0,0,0,0],e,1,4),n=t[0];t[1].setValues([0,0,0,0]);var r=function(e){var t=[.5,.5,.5,1],n=document.createElement("div");n.className="edit-input-color";var r=function(e){n.style.background="rgb("+255*e[0]+","+255*e[1]+","+255*e[2]+","+e[3]+")"};r(t);var o=b("row-with-gap"),a=y(t,(function(t){r(t),null==e||e(t)}),1,4,x),i=a[0],u=a[1];return o.appendChild(i),o.appendChild(n),[o,E(E({},u),{setValues:function(e){u.setValues(e),r(e)}})]}(e),o=r[0];r[1].setValues([1,0,0,1]);var a=S({custom:{display:"Custom",element:n},color:{display:"Color",element:o}});return b("column-with-gap",[a,n,o])},F=function(){function e(e){this.keySelector=e,this.map=new Map}return e.prototype.get=function(e){return this.map.get(this.keySelector(e))},e.prototype.set=function(e,t){this.map.set(this.keySelector(e),t)},e.prototype.clear=function(){this.map.clear()},e}();!function(e){e[e.FLOAT_VEC3=35665]="FLOAT_VEC3",e[e.FLOAT_VEC4=35666]="FLOAT_VEC4"}(w||(w={}));var N=function(e,t){for(var n=e.getProgramParameter(t,e.ACTIVE_ATTRIBUTES),r=[],o=function(n){var o=e.getActiveAttrib(t,n),a=e.getAttribLocation(t,o.name),i=e.createBuffer();!function(e){switch(e){case w.FLOAT_VEC3:return 3;case w.FLOAT_VEC4:return 4;default:d(e)}}(o.type);r.push({name:o.name,type:o.type,update:function(t){e.bindBuffer(e.ARRAY_BUFFER,i);[].concat.apply([],t);e.bufferData(e.ARRAY_BUFFER,new Float32Array([0,0,0,.5,.7,0]),e.STATIC_DRAW)},onRender:function(){e.enableVertexAttribArray(a),e.bindBuffer(e.ARRAY_BUFFER,i);var t=e.FLOAT;e.vertexAttribPointer(a,2,t,!1,0,0)}})},a=0;a<n;++a)o(a);return r},R=function(){var e=document.createElement("div");return e.className="unsupported-error",e.innerText="Not supported attribute buffer",e},P=function(e){var t=document.createElement("input");return t.className="edit-input",t.oninput=function(){try{var n=JSON.parse(t.value);if(console.log("result",n),Array.isArray(n))n.every((function(e){return!!Array.isArray(e)&&3===e.length}))||console.log("not every element id the arra is same size");else console.log("this is not an array type");e(n)}catch(e){console.log("this is not a json")}},t},D=function(e){var t=document.createElement("input");return t.className="edit-input",t.oninput=function(){try{var n=JSON.parse(t.value);if(console.log("result",n),Array.isArray(n))n.every((function(e){return!!Array.isArray(e)&&4===e.length}))||console.log("not every element id the arra is same size");else console.log("this is not an array type");e(n)}catch(e){console.log("this is not a json")}},t},I=function(){return(I=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},M=new F((function(e){return e.name+";"+e.type})),j=new F((function(e){return e.name+";"+e.type})),B=function(e,t){t.uniforms.map((function(e){var n=M.get(I({},e));if(n)return n;var o=h(function(e,t){switch(e.type){case r.FLOAT_VEC2:return O((function(n){e.update(n),t()}));case r.FLOAT_VEC3:return _((function(n){e.update(n),t()}));case r.FLOAT_VEC4:return V((function(n){e.update(n),t()}));case r.SAMPLER_2D:return L((function(n){l();e.update({slot:n.slot,textureData:!0}),t()}));default:return T()}}(e,t.render),"",e.name);return M.set(I({},e),o),o})).forEach((function(t){return e.appendChild(t)})),t.attributeBuffers.map((function(e){var n=j.get(I({},e));if(n)return n;var r=h(function(e,t){switch(e.type){case w.FLOAT_VEC3:return P((function(n){e.update(n),t()}));case w.FLOAT_VEC4:return D((function(n){e.update(n),t()}));default:return R()}}(e,t.render),"",e.name);return j.set(I({},e),r),r})).forEach((function(t){return e.appendChild(t)}))},U=function(e,t,n){var r=e.createShader(t);if(e.shaderSource(r,n),e.compileShader(r),e.getShaderParameter(r,e.COMPILE_STATUS))return r;var o=e.getShaderInfoLog(r);return e.deleteShader(r),{error:o}},k=function(e){var t=document.createElement("canvas");t.className=e;var n=t.getContext("webgl");if(!n)throw new Error("Unable to create webgl context");return[t,{compileShaders:function(e,t){var r=U(n,n.VERTEX_SHADER,e),o=U(n,n.FRAGMENT_SHADER,t),a=void 0;f(r,"error")&&(a=s(r.error,1));var i=void 0;if(f(o,"error")&&(i=s(o.error,1)),a||i)return[a,i];var u=function(e,t,n){var r=e.createProgram();if(e.attachShader(r,t),e.attachShader(r,n),e.linkProgram(r),e.getProgramParameter(r,e.LINK_STATUS))return r;throw e.deleteProgram(r),new Error("Creating program failed: "+e.getProgramInfoLog(r))}(n,r,o),c=C(n,u),l=N(n,u);return{render:function(){console.log("rendering"),n.useProgram(u),n.viewport(0,0,n.canvas.width,n.canvas.height),n.clearColor(0,0,0,0),n.clear(n.COLOR_BUFFER_BIT),c.forEach((function(e){return e.onRender()})),l.forEach((function(e){return e.onRender()}));var e=n.TRIANGLES;n.drawArrays(e,0,3)},uniforms:c,attributeBuffers:l}}}]},H=function(e,t,n,r){return new(n||(n=Promise))((function(o,a){function i(e){try{c(r.next(e))}catch(e){a(e)}}function u(e){try{c(r.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}c((r=r.apply(e,t||[])).next())}))},G=function(e,t){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function u(a){return function(u){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!(o=i.trys,(o=o.length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],r=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,u])}}};H(void 0,void 0,void 0,(function(){var e,t,n,r,a,i,u,s,l,f,d,p,y,g,E,x,A,w,C,T;return G(this,(function(S){var O,L,_;return e=new m,t=document.getElementById("viewer"),n=b("viewer-options"),r=b("viewer-shader-options"),a=b("viewer-content shader-errors"),i=k("viewer-content"),u=i[0],s=i[1],t.appendChild(u),t.appendChild(a),t.appendChild(n),l=function(e){u.style.visibility="canvas"===e?"visible":"collapse",a.style.visibility="errors"===e?"visible":"collapse"},g=function(){if(r.innerHTML="",y&&p){var e=s.compileShaders(p,y);if(Array.isArray(e)){l("errors");var t=e,n=t[0],o=t[1],i=[];n&&i.push("VERTEX SHADER:",n),o&&i.push("FRAGMENT SHADER:",o),a.innerText=i.join("\r\n")}else l("canvas"),B(r,e)}else l("none")},n.appendChild(b("viewer-shaders-title",[(O=o,L="",_=document.createElement("h3"),_.textContent=O,_.className=L+" section-title",{element:_}).element,v("Sync","viewer-refresh-button",(function(){e.getShaderDocuments().then((function(e){var t=e.map((function(e){return{id:e.filePath,display:e.fileName}}));A.setItems(t),T.setItems(t)}))})).element])),E=c((function(t){return H(void 0,void 0,void 0,(function(){var n;return G(this,(function(r){switch(r.label){case 0:return null==f||f(),t&&(f=e.subscribeToDocumentSave(t.id,(function(e){p=e,g()}))),t?[4,e.getDocumentText(t.id)]:[3,2];case 1:return n=r.sent(),[3,3];case 2:n="",r.label=3;case 3:return p=n,g(),[2]}}))}))})),x=E[0],A=E[1],n.appendChild(h(x,"viewer-vertex-shader-selector","Vertex Shader")),w=c((function(t){return H(void 0,void 0,void 0,(function(){var n;return G(this,(function(r){switch(r.label){case 0:return null==d||d(),t&&(d=e.subscribeToDocumentSave(t.id,(function(e){y=e,g()}))),t?[4,e.getDocumentText(t.id)]:[3,2];case 1:return n=r.sent(),[3,3];case 2:n="",r.label=3;case 3:return y=n,g(),[2]}}))}))})),C=w[0],T=w[1],n.appendChild(h(C,"viewer-fragment-shader-selector","Fragment Shader")),n.appendChild(r),[2]}))}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,