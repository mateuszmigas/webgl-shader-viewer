!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=33)}([function(e,t,n){"use strict";e.exports=n(34)},function(e,t,n){"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";n.r(t),n.d(t,"Provider",(function(){return c})),n.d(t,"connectAdvanced",(function(){return E})),n.d(t,"ReactReduxContext",(function(){return a})),n.d(t,"connect",(function(){return V})),n.d(t,"batch",(function(){return G.unstable_batchedUpdates})),n.d(t,"useDispatch",(function(){return q})),n.d(t,"createDispatchHook",(function(){return $})),n.d(t,"useSelector",(function(){return X})),n.d(t,"createSelectorHook",(function(){return K})),n.d(t,"useStore",(function(){return H})),n.d(t,"createStoreHook",(function(){return W})),n.d(t,"shallowEqual",(function(){return O}));var r=n(0),o=n.n(r),a=(n(40),o.a.createContext(null));var i=function(e){e()},u={notify:function(){}};function l(){var e=i,t=null,n=null;return{clear:function(){t=null,n=null},notify:function(){e((function(){for(var e=t;e;)e.callback(),e=e.next}))},get:function(){for(var e=[],n=t;n;)e.push(n),n=n.next;return e},subscribe:function(e){var r=!0,o=n={callback:e,next:null,prev:n};return o.prev?o.prev.next=o:t=o,function(){r&&null!==t&&(r=!1,o.next?o.next.prev=o.prev:n=o.prev,o.prev?o.prev.next=o.next:t=o.next)}}}}var s=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=u,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=l())},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=u)},e}();var c=function(e){var t=e.store,n=e.context,i=e.children,u=Object(r.useMemo)((function(){var e=new s(t);return e.onStateChange=e.notifyNestedSubs,{store:t,subscription:e}}),[t]),l=Object(r.useMemo)((function(){return t.getState()}),[t]);Object(r.useEffect)((function(){var e=u.subscription;return e.trySubscribe(),l!==t.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[u,l]);var c=n||a;return o.a.createElement(c.Provider,{value:u},i)},f=n(1),d=n(2),p=n(14),h=n.n(p),m=n(12),v="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?r.useLayoutEffect:r.useEffect,g=[],y=[null,null];function b(e,t){var n=e[1];return[t.payload,n+1]}function w(e,t,n){v((function(){return e.apply(void 0,t)}),n)}function S(e,t,n,r,o,a,i){e.current=r,t.current=o,n.current=!1,a.current&&(a.current=null,i())}function _(e,t,n,r,o,a,i,u,l,s){if(e){var c=!1,f=null,d=function(){if(!c){var e,n,d=t.getState();try{e=r(d,o.current)}catch(e){n=e,f=e}n||(f=null),e===a.current?i.current||l():(a.current=e,u.current=e,i.current=!0,s({type:"STORE_UPDATED",payload:{error:n}}))}};n.onStateChange=d,n.trySubscribe(),d();return function(){if(c=!0,n.tryUnsubscribe(),n.onStateChange=null,f)throw f}}}var x=function(){return[null,0]};function E(e,t){void 0===t&&(t={});var n=t,i=n.getDisplayName,u=void 0===i?function(e){return"ConnectAdvanced("+e+")"}:i,l=n.methodName,c=void 0===l?"connectAdvanced":l,p=n.renderCountProp,v=void 0===p?void 0:p,E=n.shouldHandleStateChanges,k=void 0===E||E,O=n.storeKey,C=void 0===O?"store":O,P=(n.withRef,n.forwardRef),I=void 0!==P&&P,M=n.context,T=void 0===M?a:M,R=Object(d.a)(n,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"]),N=T;return function(t){var n=t.displayName||t.name||"Component",a=u(n),i=Object(f.a)({},R,{getDisplayName:u,methodName:c,renderCountProp:v,shouldHandleStateChanges:k,storeKey:C,displayName:a,wrappedComponentName:n,WrappedComponent:t}),l=R.pure;var p=l?r.useMemo:function(e){return e()};function E(n){var a=Object(r.useMemo)((function(){var e=n.reactReduxForwardedRef,t=Object(d.a)(n,["reactReduxForwardedRef"]);return[n.context,e,t]}),[n]),u=a[0],l=a[1],c=a[2],h=Object(r.useMemo)((function(){return u&&u.Consumer&&Object(m.isContextConsumer)(o.a.createElement(u.Consumer,null))?u:N}),[u,N]),v=Object(r.useContext)(h),E=Boolean(n.store)&&Boolean(n.store.getState)&&Boolean(n.store.dispatch);Boolean(v)&&Boolean(v.store);var O=E?n.store:v.store,C=Object(r.useMemo)((function(){return function(t){return e(t.dispatch,i)}(O)}),[O]),P=Object(r.useMemo)((function(){if(!k)return y;var e=new s(O,E?null:v.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]}),[O,E,v]),I=P[0],M=P[1],T=Object(r.useMemo)((function(){return E?v:Object(f.a)({},v,{subscription:I})}),[E,v,I]),R=Object(r.useReducer)(b,g,x),L=R[0][0],j=R[1];if(L&&L.error)throw L.error;var F=Object(r.useRef)(),z=Object(r.useRef)(c),D=Object(r.useRef)(),A=Object(r.useRef)(!1),U=p((function(){return D.current&&c===z.current?D.current:C(O.getState(),c)}),[O,L,c]);w(S,[z,F,A,c,U,D,M]),w(_,[k,O,I,C,z,F,A,D,M,j],[O,I,C]);var V=Object(r.useMemo)((function(){return o.a.createElement(t,Object(f.a)({},U,{ref:l}))}),[l,t,U]);return Object(r.useMemo)((function(){return k?o.a.createElement(h.Provider,{value:T},V):V}),[h,V,T])}var O=l?o.a.memo(E):E;if(O.WrappedComponent=t,O.displayName=a,I){var P=o.a.forwardRef((function(e,t){return o.a.createElement(O,Object(f.a)({},e,{reactReduxForwardedRef:t}))}));return P.displayName=a,P.WrappedComponent=t,h()(P,t)}return h()(O,t)}}function k(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function O(e,t){if(k(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!Object.prototype.hasOwnProperty.call(t,n[o])||!k(e[n[o]],t[n[o]]))return!1;return!0}var C=n(11);function P(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function I(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function M(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=I(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=I(o),o=r(t,n)),o},r}}var T=[function(e){return"function"==typeof e?M(e):void 0},function(e){return e?void 0:P((function(e){return{dispatch:e}}))},function(e){return e&&"object"==typeof e?P((function(t){return Object(C.bindActionCreators)(e,t)})):void 0}];var R=[function(e){return"function"==typeof e?M(e):void 0},function(e){return e?void 0:P((function(){return{}}))}];function N(e,t,n){return Object(f.a)({},n,e,t)}var L=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,o=n.pure,a=n.areMergedPropsEqual,i=!1;return function(t,n,u){var l=e(t,n,u);return i?o&&a(l,r)||(r=l):(i=!0,r=l),r}}}(e):void 0},function(e){return e?void 0:function(){return N}}];function j(e,t,n,r){return function(o,a){return n(e(o,a),t(r,a),a)}}function F(e,t,n,r,o){var a,i,u,l,s,c=o.areStatesEqual,f=o.areOwnPropsEqual,d=o.areStatePropsEqual,p=!1;function h(o,p){var h,m,v=!f(p,i),g=!c(o,a);return a=o,i=p,v&&g?(u=e(a,i),t.dependsOnOwnProps&&(l=t(r,i)),s=n(u,l,i)):v?(e.dependsOnOwnProps&&(u=e(a,i)),t.dependsOnOwnProps&&(l=t(r,i)),s=n(u,l,i)):g?(h=e(a,i),m=!d(h,u),u=h,m&&(s=n(u,l,i)),s):s}return function(o,c){return p?h(o,c):(u=e(a=o,i=c),l=t(r,i),s=n(u,l,i),p=!0,s)}}function z(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,a=Object(d.a)(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),i=n(e,a),u=r(e,a),l=o(e,a);return(a.pure?F:j)(i,u,l,e,a)}function D(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function A(e,t){return e===t}function U(e){var t=void 0===e?{}:e,n=t.connectHOC,r=void 0===n?E:n,o=t.mapStateToPropsFactories,a=void 0===o?R:o,i=t.mapDispatchToPropsFactories,u=void 0===i?T:i,l=t.mergePropsFactories,s=void 0===l?L:l,c=t.selectorFactory,p=void 0===c?z:c;return function(e,t,n,o){void 0===o&&(o={});var i=o,l=i.pure,c=void 0===l||l,h=i.areStatesEqual,m=void 0===h?A:h,v=i.areOwnPropsEqual,g=void 0===v?O:v,y=i.areStatePropsEqual,b=void 0===y?O:y,w=i.areMergedPropsEqual,S=void 0===w?O:w,_=Object(d.a)(i,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),x=D(e,a,"mapStateToProps"),E=D(t,u,"mapDispatchToProps"),k=D(n,s,"mergeProps");return r(p,Object(f.a)({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:x,initMapDispatchToProps:E,initMergeProps:k,pure:c,areStatesEqual:m,areOwnPropsEqual:g,areStatePropsEqual:b,areMergedPropsEqual:S},_))}}var V=U();function B(){return Object(r.useContext)(a)}function W(e){void 0===e&&(e=a);var t=e===a?B:function(){return Object(r.useContext)(e)};return function(){return t().store}}var H=W();function $(e){void 0===e&&(e=a);var t=e===a?H:W(e);return function(){return t().dispatch}}var q=$(),Q=function(e,t){return e===t};function K(e){void 0===e&&(e=a);var t=e===a?B:function(){return Object(r.useContext)(e)};return function(e,n){void 0===n&&(n=Q);var o=t(),a=function(e,t,n,o){var a,i=Object(r.useReducer)((function(e){return e+1}),0)[1],u=Object(r.useMemo)((function(){return new s(n,o)}),[n,o]),l=Object(r.useRef)(),c=Object(r.useRef)(),f=Object(r.useRef)(),d=Object(r.useRef)(),p=n.getState();try{a=e!==c.current||p!==f.current||l.current?e(p):d.current}catch(e){throw l.current&&(e.message+="\nThe error may be correlated with this previous error:\n"+l.current.stack+"\n\n"),e}return v((function(){c.current=e,f.current=p,d.current=a,l.current=void 0})),v((function(){function e(){try{var e=c.current(n.getState());if(t(e,d.current))return;d.current=e}catch(e){l.current=e}i()}return u.onStateChange=e,u.trySubscribe(),e(),function(){return u.tryUnsubscribe()}}),[n,u]),a}(e,n,o.store,o.subscription);return Object(r.useDebugValue)(a),a}}var Y,X=K(),G=n(8);Y=G.unstable_batchedUpdates,i=Y},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.translations=void 0,t.translations={shaders:"Shaders",vertexShader:"Vertex Shader",fragmentShader:"Fragment Shader",drawOptions:"Draw options",textures:"Textures",uniforms:"Uniforms",attributeBuffers:"Attribute Buffers",custom:"Custom"}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.SectionTitle=void 0;var o=r(n(0));t.SectionTitle=o.default.memo((function(e){var t;return o.default.createElement("div",{className:"viewer-options-section-title"},o.default.createElement("h3",null,e.text),null!==(t=e.children)&&void 0!==t?t:null)}))},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.SectionField=void 0;var o=r(n(0));t.SectionField=o.default.memo((function(e){return o.default.createElement("div",{className:"viewer-options-section-field"},o.default.createElement("label",null,e.text),e.children)}))},function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||t.hasOwnProperty(n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),o(n(25),t),o(n(64),t),o(n(65),t),o(n(66),t),o(n(67),t),o(n(68),t),o(n(69),t),o(n(70),t),o(n(28),t),o(n(71),t),o(n(29),t)},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(35)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.repeat=t.range=t.removeLast=t.remove=void 0;t.remove=function(e,t){var n=e.indexOf(t);n>-1&&e.splice(n,1)};t.removeLast=function(e,t){return e.substring(0,e.length-t)};t.range=function(e,t){return Array(t-e).fill({}).map((function(t,n){return e+n}))};t.repeat=function(e,t){return Array(e).fill(t)}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var a=arguments[t],i=0,u=a.length;i<u;i++,o++)r[o]=a[i];return r};Object.defineProperty(t,"__esModule",{value:!0}),t.clamp=t.areShallowEqual=t.overriddenProps=t.omitKeys=t.overrideDefinedPropsOnly=void 0,t.overrideDefinedPropsOnly=function(e,t){for(var n=r({},e),o=0,a=Object.keys(t);o<a.length;o++){var i=a[o],u=t[i];void 0!==u&&(n[i]=u)}return n},t.omitKeys=function(e,t){return Object.keys(e).filter((function(e){return!t.includes(e)})).reduce((function(t,n){var r;return Object.assign(t,((r={})[n]=e[n],r)),t}),{})},t.overriddenProps=function(e,t){return o(Object.keys(e),Object.keys(t)).reduce((function(n,r){var o=r;return e[o]!==t[o]&&(n[o]=t[o]),n}),{})},t.areShallowEqual=function(e,t){var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0,a=n;o<a.length;o++){var i=a[o];if(e[i]!==t[i])return!1}return!0},t.clamp=function(e,t,n){return e<t?t:e>n?n:e}},function(e,t,n){"use strict";n.r(t),n.d(t,"__DO_NOT_USE__ActionTypes",(function(){return a})),n.d(t,"applyMiddleware",(function(){return v})),n.d(t,"bindActionCreators",(function(){return f})),n.d(t,"combineReducers",(function(){return s})),n.d(t,"compose",(function(){return m})),n.d(t,"createStore",(function(){return u}));var r=n(13),o=function(){return Math.random().toString(36).substring(7).split("").join(".")},a={INIT:"@@redux/INIT"+o(),REPLACE:"@@redux/REPLACE"+o(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+o()}};function i(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function u(e,t,n){var o;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(u)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var l=e,s=t,c=[],f=c,d=!1;function p(){f===c&&(f=c.slice())}function h(){if(d)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return s}function m(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(d)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var t=!0;return p(),f.push(e),function(){if(t){if(d)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");t=!1,p();var n=f.indexOf(e);f.splice(n,1),c=null}}}function v(e){if(!i(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(d)throw new Error("Reducers may not dispatch actions.");try{d=!0,s=l(s,e)}finally{d=!1}for(var t=c=f,n=0;n<t.length;n++){(0,t[n])()}return e}function g(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");l=e,v({type:a.REPLACE})}function y(){var e,t=m;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(h())}return n(),{unsubscribe:t(n)}}})[r.a]=function(){return this},e}return v({type:a.INIT}),(o={dispatch:v,subscribe:m,getState:h,replaceReducer:g})[r.a]=y,o}function l(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function s(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];0,"function"==typeof e[o]&&(n[o]=e[o])}var i,u=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:a.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:a.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+a.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(n)}catch(e){i=e}return function(e,t){if(void 0===e&&(e={}),i)throw i;for(var r=!1,o={},a=0;a<u.length;a++){var s=u[a],c=n[s],f=e[s],d=c(f,t);if(void 0===d){var p=l(s,t);throw new Error(p)}o[s]=d,r=r||d!==f}return(r=r||u.length!==Object.keys(e).length)?o:e}}function c(e,t){return function(){return t(e.apply(this,arguments))}}function f(e,t){if("function"==typeof e)return c(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var n={};for(var r in e){var o=e[r];"function"==typeof o&&(n[r]=c(o,t))}return n}function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){var n=Object.keys(e);return Object.getOwnPropertySymbols&&n.push.apply(n,Object.getOwnPropertySymbols(e)),t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n}function h(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(n,!0).forEach((function(t){d(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function v(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},a=t.map((function(e){return e(o)}));return h({},n,{dispatch:r=m.apply(void 0,a)(n.dispatch)})}}}},function(e,t,n){"use strict";e.exports=n(43)},function(e,t,n){"use strict";(function(e,r){var o,a=n(32);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var i=Object(a.a)(o);t.a=i}).call(this,n(38),n(39)(e))},function(e,t,n){"use strict";var r=n(12),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},u={};function l(e){return r.isMemo(e)?i:u[e.$$typeof]||o}u[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},u[r.Memo]=i;var s=Object.defineProperty,c=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var i=c(n);f&&(i=i.concat(f(n)));for(var u=l(t),m=l(n),v=0;v<i.length;++v){var g=i[v];if(!(a[g]||r&&r[g]||m&&m[g]||u&&u[g])){var y=d(n,g);try{s(t,g,y)}catch(e){}}}}return t}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;function i(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,u,l=i(e),s=1;s<arguments.length;s++){for(var c in n=Object(arguments[s]))o.call(n,c)&&(l[c]=n[c]);if(r){u=r(n);for(var f=0;f<u.length;f++)a.call(n,u[f])&&(l[u[f]]=n[u[f]])}}return l}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.setExtensionState=t.getExtensionState=void 0;var o=n(9),a=n(17),i={vertexFilePath:null,fragmentFilePath:null,uniformValues:{},attributeBufferValues:{},textureValues:{},cameraPosition:o.repeat(16,0)};t.getExtensionState=function(){return r(r({},i),a.vscodeApi.getState())};t.setExtensionState=function(e){return a.vscodeApi.setState(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.vscodeApi=void 0,t.vscodeApi=acquireVsCodeApi()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.viewerEndpoint=void 0;var r=n(9),o=n(19),a=n(17),i=function(){function e(){var e=this;this.eventListeners=[],window.addEventListener("message",(function(t){e.eventListeners.forEach((function(e){return e(t.data)}))}))}return e.prototype.getWorkspaceFilesOfTypes=function(e){var t=this,n=o.uuidv4();return a.vscodeApi.postMessage({type:"getWorkspaceFilesOfTypes",id:n,payload:{extensions:e}}),new Promise((function(e){var r=function(o){"getWorkspaceFilesOfTypes"===o.type&&o.id===n&&(e(o.payload.files),t.removeListener(r))};t.eventListeners.push(r)}))},e.prototype.getDocumentText=function(e){var t=this,n=o.uuidv4();return a.vscodeApi.postMessage({type:"getDocumentText",id:n,payload:{fileName:e}}),new Promise((function(e){var r=function(o){"getDocumentText"===o.type&&o.id===n&&(e(o.payload.text),t.removeListener(r))};t.eventListeners.push(r)}))},e.prototype.getExtensionFileUri=function(e){var t=this,n=o.uuidv4();return a.vscodeApi.postMessage({type:"getExtensionFileUri",id:n,payload:{fileName:e}}),new Promise((function(e){var r=function(o){"getExtensionFileUri"===o.type&&o.id===n&&(e(o.payload.uri),t.removeListener(r))};t.eventListeners.push(r)}))},e.prototype.subscribeToDocumentSave=function(e,t){var n=this;a.vscodeApi.postMessage({type:"subscribeToDocumentTextChange",payload:{fileName:e}});var r=function(n){"onDocumentTextChange"===n.type&&n.payload.filePath===e&&t(n.payload.text)};return this.eventListeners.push(r),function(){n.removeListener(r),a.vscodeApi.postMessage({type:"unsubscribeToDocumentTextChange",payload:{fileName:e}})}},e.prototype.showWebViewDevTools=function(){a.vscodeApi.postMessage({type:"showWebViewDevTools"})},e.prototype.removeListener=function(e){r.remove(this.eventListeners,e)},e}();t.viewerEndpoint=new i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.uuidv4=void 0;t.uuidv4=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){var t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.assertNever=t.hasProperty=void 0;t.hasProperty=function(e,t){return e.hasOwnProperty(t)};t.assertNever=function(e){throw new Error("Unhandled union member: "+JSON.stringify(e))}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.CameraPositionManipulator=t.cameraPositionToVector3=void 0;t.cameraPositionToVector3=function(e){var t=e.radius*Math.sin(e.latitude),n=e.radius*Math.cos(e.latitude),r=n*Math.cos(e.longitude);return{x:n*Math.sin(e.longitude),y:t,z:r}};var o=function(e){return Math.min(Math.max(e,1),10)},a=function(){function e(e,t,n){var a=this;this.element=e,this.positionProvider=t,this.onPositionChange=n,this.pointerPosition={x:0,y:0},this.eventListeners=new Map,this.isMoving=!1,this.dispatchAction=function(e){var t=function(e,t){switch(t.type){case"orbitRotate":return r(r({},e),{latitude:(a=e.latitude+t.deltaLatitude,Math.min(Math.max(a,-Math.PI/2+.1),Math.PI/2-.1)),longitude:(n=e.longitude+t.deltaLongitude,n>Math.PI?n-2*Math.PI:n<-Math.PI?n+2*Math.PI:n)});case"zoomInAt":return r(r({},e),{radius:o(e.radius-.1)});case"zoomOutAt":return r(r({},e),{radius:o(e.radius+.1)});default:return e}var n,a}(a.positionProvider(),e);a.onPositionChange(t)},this.onMouseDown=function(e){0===e.button&&(a.pointerPosition={x:e.offsetX,y:e.offsetY},a.isMoving=!0)},this.onMouseMove=function(e){if(a.isMoving){a.dispatchAction({type:"orbitRotate",deltaLongitude:.01*-(e.offsetX-a.pointerPosition.x),deltaLatitude:.01*(e.offsetY-a.pointerPosition.y)})}a.pointerPosition={x:e.offsetX,y:e.offsetY}},this.onMouseUp=function(){a.isMoving=!1},this.onMouseLeave=function(){a.isMoving=!1},this.onWheel=function(e){var t=e.deltaY<0?"zoomInAt":"zoomOutAt";a.dispatchAction({type:t})},this.registerEvent("mousedown",this.onMouseDown),this.registerEvent("mousemove",this.onMouseMove),this.registerEvent("mouseup",this.onMouseUp),this.registerEvent("mouseleave",this.onMouseLeave),this.registerEvent("wheel",this.onWheel)}return e.prototype.dispose=function(){var e=this;this.eventListeners.forEach((function(t,n){return e.element.removeEventListener(n,t)}))},e.prototype.registerEvent=function(e,t){this.element.addEventListener(e,t),this.eventListeners.set(e,t)},e}();t.CameraPositionManipulator=a},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.usePerspectiveCamera=void 0;var o=r(n(0)),a=n(21),i=n(51);t.usePerspectiveCamera=function(e,t,n){o.default.useEffect((function(){if(e){var r={longitude:1,latitude:1,radius:2};new a.CameraPositionManipulator(e,(function(){return r}),(function(e){r=e;var o=45*Math.PI/180,u=t.width/t.height,l=i.mat4.create();i.mat4.perspective(l,o,u,.1,100);var s=i.mat4.create(),c=a.cameraPositionToVector3(r);i.mat4.lookAt(s,[c.x,c.y,c.z],[0,0,0],[0,1,0]);var f=i.mat4.create();i.mat4.multiply(f,l,s),n(Array.from(f))}))}}),[e])}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.defaultTextureUrl=t.customOptionId=t.extensionTextures=t.imageExtensions=t.shaderExtensions=void 0,t.shaderExtensions=["glsl"],t.imageExtensions=["jpg","bmp"],t.extensionTextures=["texture1.jpg","texture2.jpg"],t.customOptionId="custom",t.defaultTextureUrl="https://raw.githubusercontent.com/mateuszmigas/webgl-shader-viewer/main/docs/images/screenshot1.jpg"},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Dropdown=void 0;var a=o(n(0)),i=n(61);t.Dropdown=a.default.memo((function(e){var t=e.selectedItemId,n=e.onChange,o=e.options,s=i.useDropdownState(o.length,{selectedIndexes:[]},{},(function(e){void 0!==e.selectedIndexes&&n(e.selectedIndexes.length>0?o[e.selectedIndexes[0]].id:null)})),c=s[0],f=s[1],d=o.findIndex((function(e){return e.id===t})),p=d>=0?d:null,h=a.default.useRef(null),m=a.default.useRef(null);i.useDropdownCloseWhenClickedOutside(h,f),i.useFocusOnStateChange(m,c.isOpen,!0);var v=i.useDropdownListKeyboardNavigator(f);return a.default.createElement("div",{ref:h,className:"dropdown-container"},a.default.createElement(u,r({},c,{dispatch:f,showClearButton:!1,itemRenderer:function(){return a.default.createElement("div",null,null!==p?o[p].display:"")}})),c.isOpen&&a.default.createElement("div",{className:"dropdown-list",onKeyDown:v,ref:m,tabIndex:0},a.default.createElement(i.VirtualizedList,{itemCount:o.length,itemHeight:25,highlightedIndex:c.highlightedIndex,maxHeight:200,itemRenderer:function(e){return a.default.createElement(l,{text:o[e].display,index:e,isSelected:p===e,isHighlighted:c.highlightedIndex===e,dispatch:f})}})))}));var u=function(e){var t=e.isOpen,n=e.itemRenderer,r=e.showClearButton,o=void 0===r||r,u=e.dispatch,l=a.default.useRef(null),s=a.default.useCallback((function(){return u([t?"CloseList":"OpenList"])}),[t,u]),c=a.default.useCallback((function(){return u(["ClearSelection"])}),[u]);return i.useFocusOnStateChange(l,t,!1),a.default.createElement("div",{className:"dropdown-main"},a.default.createElement("button",{ref:l,className:"dropdown-select",onClick:s},n(),a.default.createElement("i",{className:"fa "+(t?"fa-caret-up":"fa-caret-down")})),o&&a.default.createElement("button",{className:"dropdown-clear",onClick:c},a.default.createElement("i",{className:"fa fa-times"})))},l=function(e){var t=e.text,n=e.index,r=e.isSelected,o=e.isHighlighted,i=e.dispatch,u="dropdown-list-item "+(r?"selected":"")+"  "+(o?"highlighted":"");return a.default.createElement("div",{key:n,onClick:function(){return i([{type:"SelectIndex",index:n},"CloseList"])},className:u},a.default.createElement("div",{className:"dropdown-list-item-text"},t))}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var a=arguments[t],i=0,u=a.length;i<u;i++,o++)r[o]=a[i];return r},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useUnionState=void 0;var i=a(n(0)),u=n(10);t.useUnionState=function(e,t,n,a){var l=i.default.useState(u.omitKeys(e,Object.keys(t))),s=l[0],c=l[1],f=i.default.useRef(s);return[s,i.default.useCallback((function(e){var o=u.overrideDefinedPropsOnly(f.current,t),i=e.reduce((function(e,t){return n(e,t)}),r({},o)),l=u.overriddenProps(o,i),s=u.omitKeys(i,Object.keys(t));u.areShallowEqual(f.current,s)||(f.current=s,c(f.current)),null==a||a(l)}),o(Object.values(t),[n,a]))]}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.reducer=void 0;var o=n(10),a=n(27),i=function(e,t,n){return n>0?o.clamp(e+t,0,n-1):null};t.reducer=function(e,t,n){if("string"==typeof n)switch(n){case"CloseList":return r(r({},e),{isOpen:!1});case"OpenList":return r(r({},e),{isOpen:!0});case"HighlightFirstIndex":return r(r({},e),{highlightedIndex:t>0?0:null});case"HighlightPreviousIndex":return r(r({},e),{highlightedIndex:null!=e.highlightedIndex?i(e.highlightedIndex,-1,t):0});case"HighlightNextIndex":return r(r({},e),{highlightedIndex:null!=e.highlightedIndex?i(e.highlightedIndex,1,t):0});case"HighlightLastIndex":return r(r({},e),{highlightedIndex:t>0?t-1:null});case"SelectHighlightedIndex":return r(r({},e),{selectedIndexes:null!=e.highlightedIndex&&null!=e.highlightedIndex?[e.highlightedIndex]:[]});case"ClearSelection":return r(r({},e),{selectedIndexes:[],highlightedIndex:t>0?0:null});default:return a.assertNever(n)}else switch(n.type){case"SelectIndex":return r(r({},e),{selectedIndexes:[n.index],highlightedIndex:n.index});case"ToggleSelectedIndex":return r(r({},e),{selectedIndexes:e.selectedIndexes.filter((function(e){return e!==n.index})).concat(e.selectedIndexes.includes(n.index)?[]:[n.index]),highlightedIndex:n.index});case"HighlightIndex":return r(r({},e),{highlightedIndex:null===n.index?n.index:o.clamp(n.index,0,t-1)});default:return a.assertNever(n)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.hasProperty=t.assertNever=void 0,t.assertNever=function(e){throw new Error("Unexpected object: "+e)},t.hasProperty=function(e,t){return e.hasOwnProperty(t)}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useFocusOutHandler=void 0;var o=r(n(0));t.useFocusOutHandler=function(e,t){o.default.useEffect((function(){var n;function r(n){var r;(null===(r=e.current)||void 0===r?void 0:r.contains(n.relatedTarget))||t()}return null===(n=e.current)||void 0===n||n.addEventListener("focusout",r),function(){var t;null===(t=e.current)||void 0===t||t.removeEventListener("focusout",r)}}),[t])}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.usePreviousValue=void 0;var o=r(n(0));t.usePreviousValue=function(e){var t=o.default.useRef();return o.default.useEffect((function(){t.current=e})),t.current}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createListKeyboardNavigator=void 0,t.createListKeyboardNavigator=function(e){return function(t){switch(t.key){case" ":break;case"Enter":e(["SelectHighlightedIndex","CloseList"]);break;case"Esc":case"Escape":case"Tab":e(["CloseList"]);break;case"Down":case"ArrowDown":t.preventDefault(),e(["HighlightNextIndex"]);break;case"Up":case"ArrowUp":t.preventDefault(),e(["HighlightPreviousIndex"]);break;case"Home":e(["HighlightFirstIndex"]);break;case"End":e(["HighlightLastIndex"]);break;default:return}}}},function(e,t,n){"use strict";n.r(t),n.d(t,"VariableSizeGrid",(function(){return C})),n.d(t,"VariableSizeList",(function(){return j})),n.d(t,"FixedSizeGrid",(function(){return F})),n.d(t,"FixedSizeList",(function(){return z})),n.d(t,"areEqual",(function(){return A})),n.d(t,"shouldComponentUpdate",(function(){return U}));var r=n(1);function o(e,t){return(o=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function a(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,o(e,t)}function i(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function u(e,t){if(e.length!==t.length)return!1;for(var n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}var l=function(e,t){var n;void 0===t&&(t=u);var r,o=[],a=!1;return function(){for(var i=[],u=0;u<arguments.length;u++)i[u]=arguments[u];return a&&n===this&&t(i,o)||(r=e.apply(this,i),a=!0,n=this,o=i),r}},s=n(0),c=n(2),f="object"==typeof performance&&"function"==typeof performance.now?function(){return performance.now()}:function(){return Date.now()};function d(e){cancelAnimationFrame(e.id)}function p(e,t){var n=f();var r={id:requestAnimationFrame((function o(){f()-n>=t?e.call(null):r.id=requestAnimationFrame(o)}))};return r}var h=-1;var m=null;function v(e){if(void 0===e&&(e=!1),null===m||e){var t=document.createElement("div"),n=t.style;n.width="50px",n.height="50px",n.overflow="scroll",n.direction="rtl";var r=document.createElement("div"),o=r.style;return o.width="100px",o.height="100px",t.appendChild(r),document.body.appendChild(t),t.scrollLeft>0?m="positive-descending":(t.scrollLeft=1,m=0===t.scrollLeft?"negative":"positive-ascending"),document.body.removeChild(t),m}return m}var g=function(e){var t=e.columnIndex;e.data;return e.rowIndex+":"+t};function y(e){var t,n,o=e.getColumnOffset,u=e.getColumnStartIndexForOffset,c=e.getColumnStopIndexForStartIndex,f=e.getColumnWidth,m=e.getEstimatedTotalHeight,y=e.getEstimatedTotalWidth,w=e.getOffsetForColumnAndAlignment,S=e.getOffsetForRowAndAlignment,_=e.getRowHeight,x=e.getRowOffset,E=e.getRowStartIndexForOffset,k=e.getRowStopIndexForStartIndex,O=e.initInstanceProps,C=e.shouldResetStyleCacheOnItemSizeChange,P=e.validateProps;return n=t=function(e){function t(t){var n;return(n=e.call(this,t)||this)._instanceProps=O(n.props,i(i(n))),n._resetIsScrollingTimeoutId=null,n._outerRef=void 0,n.state={instance:i(i(n)),isScrolling:!1,horizontalScrollDirection:"forward",scrollLeft:"number"==typeof n.props.initialScrollLeft?n.props.initialScrollLeft:0,scrollTop:"number"==typeof n.props.initialScrollTop?n.props.initialScrollTop:0,scrollUpdateWasRequested:!1,verticalScrollDirection:"forward"},n._callOnItemsRendered=void 0,n._callOnItemsRendered=l((function(e,t,r,o,a,i,u,l){return n.props.onItemsRendered({overscanColumnStartIndex:e,overscanColumnStopIndex:t,overscanRowStartIndex:r,overscanRowStopIndex:o,visibleColumnStartIndex:a,visibleColumnStopIndex:i,visibleRowStartIndex:u,visibleRowStopIndex:l})})),n._callOnScroll=void 0,n._callOnScroll=l((function(e,t,r,o,a){return n.props.onScroll({horizontalScrollDirection:r,scrollLeft:e,scrollTop:t,verticalScrollDirection:o,scrollUpdateWasRequested:a})})),n._getItemStyle=void 0,n._getItemStyle=function(e,t){var r,a=n.props,i=a.columnWidth,u=a.direction,l=a.rowHeight,s=n._getItemStyleCache(C&&i,C&&u,C&&l),c=e+":"+t;if(s.hasOwnProperty(c))r=s[c];else{var d=o(n.props,t,n._instanceProps),p="rtl"===u;s[c]=r={position:"absolute",left:p?void 0:d,right:p?d:void 0,top:x(n.props,e,n._instanceProps),height:_(n.props,e,n._instanceProps),width:f(n.props,t,n._instanceProps)}}return r},n._getItemStyleCache=void 0,n._getItemStyleCache=l((function(e,t,n){return{}})),n._onScroll=function(e){var t=e.currentTarget,r=t.clientHeight,o=t.clientWidth,a=t.scrollLeft,i=t.scrollTop,u=t.scrollHeight,l=t.scrollWidth;n.setState((function(e){if(e.scrollLeft===a&&e.scrollTop===i)return null;var t=n.props.direction,s=a;if("rtl"===t)switch(v()){case"negative":s=-a;break;case"positive-descending":s=l-o-a}s=Math.max(0,Math.min(s,l-o));var c=Math.max(0,Math.min(i,u-r));return{isScrolling:!0,horizontalScrollDirection:e.scrollLeft<a?"forward":"backward",scrollLeft:s,scrollTop:c,verticalScrollDirection:e.scrollTop<i?"forward":"backward",scrollUpdateWasRequested:!1}}),n._resetIsScrollingDebounced)},n._outerRefSetter=function(e){var t=n.props.outerRef;n._outerRef=e,"function"==typeof t?t(e):null!=t&&"object"==typeof t&&t.hasOwnProperty("current")&&(t.current=e)},n._resetIsScrollingDebounced=function(){null!==n._resetIsScrollingTimeoutId&&d(n._resetIsScrollingTimeoutId),n._resetIsScrollingTimeoutId=p(n._resetIsScrolling,150)},n._resetIsScrolling=function(){n._resetIsScrollingTimeoutId=null,n.setState({isScrolling:!1},(function(){n._getItemStyleCache(-1)}))},n}a(t,e),t.getDerivedStateFromProps=function(e,t){return b(e,t),P(e),null};var n=t.prototype;return n.scrollTo=function(e){var t=e.scrollLeft,n=e.scrollTop;void 0!==t&&(t=Math.max(0,t)),void 0!==n&&(n=Math.max(0,n)),this.setState((function(e){return void 0===t&&(t=e.scrollLeft),void 0===n&&(n=e.scrollTop),e.scrollLeft===t&&e.scrollTop===n?null:{horizontalScrollDirection:e.scrollLeft<t?"forward":"backward",scrollLeft:t,scrollTop:n,scrollUpdateWasRequested:!0,verticalScrollDirection:e.scrollTop<n?"forward":"backward"}}),this._resetIsScrollingDebounced)},n.scrollToItem=function(e){var t=e.align,n=void 0===t?"auto":t,r=e.columnIndex,o=e.rowIndex,a=this.props,i=a.columnCount,u=a.height,l=a.rowCount,s=a.width,c=this.state,f=c.scrollLeft,d=c.scrollTop,p=function(e){if(void 0===e&&(e=!1),-1===h||e){var t=document.createElement("div"),n=t.style;n.width="50px",n.height="50px",n.overflow="scroll",document.body.appendChild(t),h=t.offsetWidth-t.clientWidth,document.body.removeChild(t)}return h}();void 0!==r&&(r=Math.max(0,Math.min(r,i-1))),void 0!==o&&(o=Math.max(0,Math.min(o,l-1)));var v=m(this.props,this._instanceProps),g=y(this.props,this._instanceProps)>s?p:0,b=v>u?p:0;this.scrollTo({scrollLeft:void 0!==r?w(this.props,r,n,f,this._instanceProps,b):f,scrollTop:void 0!==o?S(this.props,o,n,d,this._instanceProps,g):d})},n.componentDidMount=function(){var e=this.props,t=e.initialScrollLeft,n=e.initialScrollTop;if(null!=this._outerRef){var r=this._outerRef;"number"==typeof t&&(r.scrollLeft=t),"number"==typeof n&&(r.scrollTop=n)}this._callPropsCallbacks()},n.componentDidUpdate=function(){var e=this.props.direction,t=this.state,n=t.scrollLeft,r=t.scrollTop;if(t.scrollUpdateWasRequested&&null!=this._outerRef){var o=this._outerRef;if("rtl"===e)switch(v()){case"negative":o.scrollLeft=-n;break;case"positive-ascending":o.scrollLeft=n;break;default:var a=o.clientWidth,i=o.scrollWidth;o.scrollLeft=i-a-n}else o.scrollLeft=Math.max(0,n);o.scrollTop=Math.max(0,r)}this._callPropsCallbacks()},n.componentWillUnmount=function(){null!==this._resetIsScrollingTimeoutId&&d(this._resetIsScrollingTimeoutId)},n.render=function(){var e=this.props,t=e.children,n=e.className,o=e.columnCount,a=e.direction,i=e.height,u=e.innerRef,l=e.innerElementType,c=e.innerTagName,f=e.itemData,d=e.itemKey,p=void 0===d?g:d,h=e.outerElementType,v=e.outerTagName,b=e.rowCount,w=e.style,S=e.useIsScrolling,_=e.width,x=this.state.isScrolling,E=this._getHorizontalRangeToRender(),k=E[0],O=E[1],C=this._getVerticalRangeToRender(),P=C[0],I=C[1],M=[];if(o>0&&b)for(var T=P;T<=I;T++)for(var R=k;R<=O;R++)M.push(Object(s.createElement)(t,{columnIndex:R,data:f,isScrolling:S?x:void 0,key:p({columnIndex:R,data:f,rowIndex:T}),rowIndex:T,style:this._getItemStyle(T,R)}));var N=m(this.props,this._instanceProps),L=y(this.props,this._instanceProps);return Object(s.createElement)(h||v||"div",{className:n,onScroll:this._onScroll,ref:this._outerRefSetter,style:Object(r.a)({position:"relative",height:i,width:_,overflow:"auto",WebkitOverflowScrolling:"touch",willChange:"transform",direction:a},w)},Object(s.createElement)(l||c||"div",{children:M,ref:u,style:{height:N,pointerEvents:x?"none":void 0,width:L}}))},n._callPropsCallbacks=function(){var e=this.props,t=e.columnCount,n=e.onItemsRendered,r=e.onScroll,o=e.rowCount;if("function"==typeof n&&t>0&&o>0){var a=this._getHorizontalRangeToRender(),i=a[0],u=a[1],l=a[2],s=a[3],c=this._getVerticalRangeToRender(),f=c[0],d=c[1],p=c[2],h=c[3];this._callOnItemsRendered(i,u,f,d,l,s,p,h)}if("function"==typeof r){var m=this.state,v=m.horizontalScrollDirection,g=m.scrollLeft,y=m.scrollTop,b=m.scrollUpdateWasRequested,w=m.verticalScrollDirection;this._callOnScroll(g,y,v,w,b)}},n._getHorizontalRangeToRender=function(){var e=this.props,t=e.columnCount,n=e.overscanColumnCount,r=e.overscanColumnsCount,o=e.overscanCount,a=e.rowCount,i=this.state,l=i.horizontalScrollDirection,s=i.isScrolling,f=i.scrollLeft,d=n||r||o||1;if(0===t||0===a)return[0,0,0,0];var p=u(this.props,f,this._instanceProps),h=c(this.props,p,f,this._instanceProps),m=s&&"backward"!==l?1:Math.max(1,d),v=s&&"forward"!==l?1:Math.max(1,d);return[Math.max(0,p-m),Math.max(0,Math.min(t-1,h+v)),p,h]},n._getVerticalRangeToRender=function(){var e=this.props,t=e.columnCount,n=e.overscanCount,r=e.overscanRowCount,o=e.overscanRowsCount,a=e.rowCount,i=this.state,u=i.isScrolling,l=i.verticalScrollDirection,s=i.scrollTop,c=r||o||n||1;if(0===t||0===a)return[0,0,0,0];var f=E(this.props,s,this._instanceProps),d=k(this.props,f,s,this._instanceProps),p=u&&"backward"!==l?1:Math.max(1,c),h=u&&"forward"!==l?1:Math.max(1,c);return[Math.max(0,f-p),Math.max(0,Math.min(a-1,d+h)),f,d]},t}(s.PureComponent),t.defaultProps={direction:"ltr",itemData:void 0,useIsScrolling:!1},n}var b=function(e,t){e.children,e.direction,e.height,e.innerTagName,e.outerTagName,e.overscanColumnsCount,e.overscanCount,e.overscanRowsCount,e.width,t.instance},w=function(e,t){var n=e.rowCount,r=t.rowMetadataMap,o=t.estimatedRowHeight,a=t.lastMeasuredRowIndex,i=0;if(a>=n&&(a=n-1),a>=0){var u=r[a];i=u.offset+u.size}return i+(n-a-1)*o},S=function(e,t){var n=e.columnCount,r=t.columnMetadataMap,o=t.estimatedColumnWidth,a=t.lastMeasuredColumnIndex,i=0;if(a>=n&&(a=n-1),a>=0){var u=r[a];i=u.offset+u.size}return i+(n-a-1)*o},_=function(e,t,n,r){var o,a,i;if("column"===e?(o=r.columnMetadataMap,a=t.columnWidth,i=r.lastMeasuredColumnIndex):(o=r.rowMetadataMap,a=t.rowHeight,i=r.lastMeasuredRowIndex),n>i){var u=0;if(i>=0){var l=o[i];u=l.offset+l.size}for(var s=i+1;s<=n;s++){var c=a(s);o[s]={offset:u,size:c},u+=c}"column"===e?r.lastMeasuredColumnIndex=n:r.lastMeasuredRowIndex=n}return o[n]},x=function(e,t,n,r){var o,a;return"column"===e?(o=n.columnMetadataMap,a=n.lastMeasuredColumnIndex):(o=n.rowMetadataMap,a=n.lastMeasuredRowIndex),(a>0?o[a].offset:0)>=r?E(e,t,n,a,0,r):k(e,t,n,Math.max(0,a),r)},E=function(e,t,n,r,o,a){for(;o<=r;){var i=o+Math.floor((r-o)/2),u=_(e,t,i,n).offset;if(u===a)return i;u<a?o=i+1:u>a&&(r=i-1)}return o>0?o-1:0},k=function(e,t,n,r,o){for(var a="column"===e?t.columnCount:t.rowCount,i=1;r<a&&_(e,t,r,n).offset<o;)r+=i,i*=2;return E(e,t,n,Math.min(r,a-1),Math.floor(r/2),o)},O=function(e,t,n,r,o,a,i){var u="column"===e?t.width:t.height,l=_(e,t,n,a),s="column"===e?S(t,a):w(t,a),c=Math.max(0,Math.min(s-u,l.offset)),f=Math.max(0,l.offset-u+i+l.size);switch("smart"===r&&(r=o>=f-u&&o<=c+u?"auto":"center"),r){case"start":return c;case"end":return f;case"center":return Math.round(f+(c-f)/2);case"auto":default:return o>=f&&o<=c?o:f>c||o<f?f:c}},C=y({getColumnOffset:function(e,t,n){return _("column",e,t,n).offset},getColumnStartIndexForOffset:function(e,t,n){return x("column",e,n,t)},getColumnStopIndexForStartIndex:function(e,t,n,r){for(var o=e.columnCount,a=e.width,i=_("column",e,t,r),u=n+a,l=i.offset+i.size,s=t;s<o-1&&l<u;)s++,l+=_("column",e,s,r).size;return s},getColumnWidth:function(e,t,n){return n.columnMetadataMap[t].size},getEstimatedTotalHeight:w,getEstimatedTotalWidth:S,getOffsetForColumnAndAlignment:function(e,t,n,r,o,a){return O("column",e,t,n,r,o,a)},getOffsetForRowAndAlignment:function(e,t,n,r,o,a){return O("row",e,t,n,r,o,a)},getRowOffset:function(e,t,n){return _("row",e,t,n).offset},getRowHeight:function(e,t,n){return n.rowMetadataMap[t].size},getRowStartIndexForOffset:function(e,t,n){return x("row",e,n,t)},getRowStopIndexForStartIndex:function(e,t,n,r){for(var o=e.rowCount,a=e.height,i=_("row",e,t,r),u=n+a,l=i.offset+i.size,s=t;s<o-1&&l<u;)s++,l+=_("row",e,s,r).size;return s},initInstanceProps:function(e,t){var n=e,r={columnMetadataMap:{},estimatedColumnWidth:n.estimatedColumnWidth||50,estimatedRowHeight:n.estimatedRowHeight||50,lastMeasuredColumnIndex:-1,lastMeasuredRowIndex:-1,rowMetadataMap:{}};return t.resetAfterColumnIndex=function(e,n){void 0===n&&(n=!0),t.resetAfterIndices({columnIndex:e,shouldForceUpdate:n})},t.resetAfterRowIndex=function(e,n){void 0===n&&(n=!0),t.resetAfterIndices({rowIndex:e,shouldForceUpdate:n})},t.resetAfterIndices=function(e){var n=e.columnIndex,o=e.rowIndex,a=e.shouldForceUpdate,i=void 0===a||a;"number"==typeof n&&(r.lastMeasuredColumnIndex=Math.min(r.lastMeasuredColumnIndex,n-1)),"number"==typeof o&&(r.lastMeasuredRowIndex=Math.min(r.lastMeasuredRowIndex,o-1)),t._getItemStyleCache(-1),i&&t.forceUpdate()},r},shouldResetStyleCacheOnItemSizeChange:!1,validateProps:function(e){e.columnWidth,e.rowHeight}}),P=function(e,t){return e};function I(e){var t,n,o=e.getItemOffset,u=e.getEstimatedTotalSize,c=e.getItemSize,f=e.getOffsetForIndexAndAlignment,h=e.getStartIndexForOffset,m=e.getStopIndexForStartIndex,g=e.initInstanceProps,y=e.shouldResetStyleCacheOnItemSizeChange,b=e.validateProps;return n=t=function(e){function t(t){var n;return(n=e.call(this,t)||this)._instanceProps=g(n.props,i(i(n))),n._outerRef=void 0,n._resetIsScrollingTimeoutId=null,n.state={instance:i(i(n)),isScrolling:!1,scrollDirection:"forward",scrollOffset:"number"==typeof n.props.initialScrollOffset?n.props.initialScrollOffset:0,scrollUpdateWasRequested:!1},n._callOnItemsRendered=void 0,n._callOnItemsRendered=l((function(e,t,r,o){return n.props.onItemsRendered({overscanStartIndex:e,overscanStopIndex:t,visibleStartIndex:r,visibleStopIndex:o})})),n._callOnScroll=void 0,n._callOnScroll=l((function(e,t,r){return n.props.onScroll({scrollDirection:e,scrollOffset:t,scrollUpdateWasRequested:r})})),n._getItemStyle=void 0,n._getItemStyle=function(e){var t,r=n.props,a=r.direction,i=r.itemSize,u=r.layout,l=n._getItemStyleCache(y&&i,y&&u,y&&a);if(l.hasOwnProperty(e))t=l[e];else{var s=o(n.props,e,n._instanceProps),f=c(n.props,e,n._instanceProps),d="horizontal"===a||"horizontal"===u,p="rtl"===a,h=d?s:0;l[e]=t={position:"absolute",left:p?void 0:h,right:p?h:void 0,top:d?0:s,height:d?"100%":f,width:d?f:"100%"}}return t},n._getItemStyleCache=void 0,n._getItemStyleCache=l((function(e,t,n){return{}})),n._onScrollHorizontal=function(e){var t=e.currentTarget,r=t.clientWidth,o=t.scrollLeft,a=t.scrollWidth;n.setState((function(e){if(e.scrollOffset===o)return null;var t=n.props.direction,i=o;if("rtl"===t)switch(v()){case"negative":i=-o;break;case"positive-descending":i=a-r-o}return i=Math.max(0,Math.min(i,a-r)),{isScrolling:!0,scrollDirection:e.scrollOffset<o?"forward":"backward",scrollOffset:i,scrollUpdateWasRequested:!1}}),n._resetIsScrollingDebounced)},n._onScrollVertical=function(e){var t=e.currentTarget,r=t.clientHeight,o=t.scrollHeight,a=t.scrollTop;n.setState((function(e){if(e.scrollOffset===a)return null;var t=Math.max(0,Math.min(a,o-r));return{isScrolling:!0,scrollDirection:e.scrollOffset<t?"forward":"backward",scrollOffset:t,scrollUpdateWasRequested:!1}}),n._resetIsScrollingDebounced)},n._outerRefSetter=function(e){var t=n.props.outerRef;n._outerRef=e,"function"==typeof t?t(e):null!=t&&"object"==typeof t&&t.hasOwnProperty("current")&&(t.current=e)},n._resetIsScrollingDebounced=function(){null!==n._resetIsScrollingTimeoutId&&d(n._resetIsScrollingTimeoutId),n._resetIsScrollingTimeoutId=p(n._resetIsScrolling,150)},n._resetIsScrolling=function(){n._resetIsScrollingTimeoutId=null,n.setState({isScrolling:!1},(function(){n._getItemStyleCache(-1,null)}))},n}a(t,e),t.getDerivedStateFromProps=function(e,t){return M(e,t),b(e),null};var n=t.prototype;return n.scrollTo=function(e){e=Math.max(0,e),this.setState((function(t){return t.scrollOffset===e?null:{scrollDirection:t.scrollOffset<e?"forward":"backward",scrollOffset:e,scrollUpdateWasRequested:!0}}),this._resetIsScrollingDebounced)},n.scrollToItem=function(e,t){void 0===t&&(t="auto");var n=this.props.itemCount,r=this.state.scrollOffset;e=Math.max(0,Math.min(e,n-1)),this.scrollTo(f(this.props,e,t,r,this._instanceProps))},n.componentDidMount=function(){var e=this.props,t=e.direction,n=e.initialScrollOffset,r=e.layout;if("number"==typeof n&&null!=this._outerRef){var o=this._outerRef;"horizontal"===t||"horizontal"===r?o.scrollLeft=n:o.scrollTop=n}this._callPropsCallbacks()},n.componentDidUpdate=function(){var e=this.props,t=e.direction,n=e.layout,r=this.state,o=r.scrollOffset;if(r.scrollUpdateWasRequested&&null!=this._outerRef){var a=this._outerRef;if("horizontal"===t||"horizontal"===n)if("rtl"===t)switch(v()){case"negative":a.scrollLeft=-o;break;case"positive-ascending":a.scrollLeft=o;break;default:var i=a.clientWidth,u=a.scrollWidth;a.scrollLeft=u-i-o}else a.scrollLeft=o;else a.scrollTop=o}this._callPropsCallbacks()},n.componentWillUnmount=function(){null!==this._resetIsScrollingTimeoutId&&d(this._resetIsScrollingTimeoutId)},n.render=function(){var e=this.props,t=e.children,n=e.className,o=e.direction,a=e.height,i=e.innerRef,l=e.innerElementType,c=e.innerTagName,f=e.itemCount,d=e.itemData,p=e.itemKey,h=void 0===p?P:p,m=e.layout,v=e.outerElementType,g=e.outerTagName,y=e.style,b=e.useIsScrolling,w=e.width,S=this.state.isScrolling,_="horizontal"===o||"horizontal"===m,x=_?this._onScrollHorizontal:this._onScrollVertical,E=this._getRangeToRender(),k=E[0],O=E[1],C=[];if(f>0)for(var I=k;I<=O;I++)C.push(Object(s.createElement)(t,{data:d,key:h(I,d),index:I,isScrolling:b?S:void 0,style:this._getItemStyle(I)}));var M=u(this.props,this._instanceProps);return Object(s.createElement)(v||g||"div",{className:n,onScroll:x,ref:this._outerRefSetter,style:Object(r.a)({position:"relative",height:a,width:w,overflow:"auto",WebkitOverflowScrolling:"touch",willChange:"transform",direction:o},y)},Object(s.createElement)(l||c||"div",{children:C,ref:i,style:{height:_?"100%":M,pointerEvents:S?"none":void 0,width:_?M:"100%"}}))},n._callPropsCallbacks=function(){if("function"==typeof this.props.onItemsRendered&&this.props.itemCount>0){var e=this._getRangeToRender(),t=e[0],n=e[1],r=e[2],o=e[3];this._callOnItemsRendered(t,n,r,o)}if("function"==typeof this.props.onScroll){var a=this.state,i=a.scrollDirection,u=a.scrollOffset,l=a.scrollUpdateWasRequested;this._callOnScroll(i,u,l)}},n._getRangeToRender=function(){var e=this.props,t=e.itemCount,n=e.overscanCount,r=this.state,o=r.isScrolling,a=r.scrollDirection,i=r.scrollOffset;if(0===t)return[0,0,0,0];var u=h(this.props,i,this._instanceProps),l=m(this.props,u,i,this._instanceProps),s=o&&"backward"!==a?1:Math.max(1,n),c=o&&"forward"!==a?1:Math.max(1,n);return[Math.max(0,u-s),Math.max(0,Math.min(t-1,l+c)),u,l]},t}(s.PureComponent),t.defaultProps={direction:"ltr",itemData:void 0,layout:"vertical",overscanCount:2,useIsScrolling:!1},n}var M=function(e,t){e.children,e.direction,e.height,e.layout,e.innerTagName,e.outerTagName,e.width,t.instance},T=function(e,t,n){var r=e.itemSize,o=n.itemMetadataMap,a=n.lastMeasuredIndex;if(t>a){var i=0;if(a>=0){var u=o[a];i=u.offset+u.size}for(var l=a+1;l<=t;l++){var s=r(l);o[l]={offset:i,size:s},i+=s}n.lastMeasuredIndex=t}return o[t]},R=function(e,t,n,r,o){for(;r<=n;){var a=r+Math.floor((n-r)/2),i=T(e,a,t).offset;if(i===o)return a;i<o?r=a+1:i>o&&(n=a-1)}return r>0?r-1:0},N=function(e,t,n,r){for(var o=e.itemCount,a=1;n<o&&T(e,n,t).offset<r;)n+=a,a*=2;return R(e,t,Math.min(n,o-1),Math.floor(n/2),r)},L=function(e,t){var n=e.itemCount,r=t.itemMetadataMap,o=t.estimatedItemSize,a=t.lastMeasuredIndex,i=0;if(a>=n&&(a=n-1),a>=0){var u=r[a];i=u.offset+u.size}return i+(n-a-1)*o},j=I({getItemOffset:function(e,t,n){return T(e,t,n).offset},getItemSize:function(e,t,n){return n.itemMetadataMap[t].size},getEstimatedTotalSize:L,getOffsetForIndexAndAlignment:function(e,t,n,r,o){var a=e.direction,i=e.height,u=e.layout,l=e.width,s="horizontal"===a||"horizontal"===u?l:i,c=T(e,t,o),f=L(e,o),d=Math.max(0,Math.min(f-s,c.offset)),p=Math.max(0,c.offset-s+c.size);switch("smart"===n&&(n=r>=p-s&&r<=d+s?"auto":"center"),n){case"start":return d;case"end":return p;case"center":return Math.round(p+(d-p)/2);case"auto":default:return r>=p&&r<=d?r:r<p?p:d}},getStartIndexForOffset:function(e,t,n){return function(e,t,n){var r=t.itemMetadataMap,o=t.lastMeasuredIndex;return(o>0?r[o].offset:0)>=n?R(e,t,o,0,n):N(e,t,Math.max(0,o),n)}(e,n,t)},getStopIndexForStartIndex:function(e,t,n,r){for(var o=e.direction,a=e.height,i=e.itemCount,u=e.layout,l=e.width,s="horizontal"===o||"horizontal"===u?l:a,c=T(e,t,r),f=n+s,d=c.offset+c.size,p=t;p<i-1&&d<f;)p++,d+=T(e,p,r).size;return p},initInstanceProps:function(e,t){var n={itemMetadataMap:{},estimatedItemSize:e.estimatedItemSize||50,lastMeasuredIndex:-1};return t.resetAfterIndex=function(e,r){void 0===r&&(r=!0),n.lastMeasuredIndex=Math.min(n.lastMeasuredIndex,e-1),t._getItemStyleCache(-1),r&&t.forceUpdate()},n},shouldResetStyleCacheOnItemSizeChange:!1,validateProps:function(e){e.itemSize}}),F=y({getColumnOffset:function(e,t){return t*e.columnWidth},getColumnWidth:function(e,t){return e.columnWidth},getRowOffset:function(e,t){return t*e.rowHeight},getRowHeight:function(e,t){return e.rowHeight},getEstimatedTotalHeight:function(e){var t=e.rowCount;return e.rowHeight*t},getEstimatedTotalWidth:function(e){var t=e.columnCount;return e.columnWidth*t},getOffsetForColumnAndAlignment:function(e,t,n,r,o,a){var i=e.columnCount,u=e.columnWidth,l=e.width,s=Math.max(0,i*u-l),c=Math.min(s,t*u),f=Math.max(0,t*u-l+a+u);switch("smart"===n&&(n=r>=f-l&&r<=c+l?"auto":"center"),n){case"start":return c;case"end":return f;case"center":var d=Math.round(f+(c-f)/2);return d<Math.ceil(l/2)?0:d>s+Math.floor(l/2)?s:d;case"auto":default:return r>=f&&r<=c?r:f>c||r<f?f:c}},getOffsetForRowAndAlignment:function(e,t,n,r,o,a){var i=e.rowHeight,u=e.height,l=e.rowCount,s=Math.max(0,l*i-u),c=Math.min(s,t*i),f=Math.max(0,t*i-u+a+i);switch("smart"===n&&(n=r>=f-u&&r<=c+u?"auto":"center"),n){case"start":return c;case"end":return f;case"center":var d=Math.round(f+(c-f)/2);return d<Math.ceil(u/2)?0:d>s+Math.floor(u/2)?s:d;case"auto":default:return r>=f&&r<=c?r:f>c||r<f?f:c}},getColumnStartIndexForOffset:function(e,t){var n=e.columnWidth,r=e.columnCount;return Math.max(0,Math.min(r-1,Math.floor(t/n)))},getColumnStopIndexForStartIndex:function(e,t,n){var r=e.columnWidth,o=e.columnCount,a=e.width,i=t*r,u=Math.ceil((a+n-i)/r);return Math.max(0,Math.min(o-1,t+u-1))},getRowStartIndexForOffset:function(e,t){var n=e.rowHeight,r=e.rowCount;return Math.max(0,Math.min(r-1,Math.floor(t/n)))},getRowStopIndexForStartIndex:function(e,t,n){var r=e.rowHeight,o=e.rowCount,a=e.height,i=t*r,u=Math.ceil((a+n-i)/r);return Math.max(0,Math.min(o-1,t+u-1))},initInstanceProps:function(e){},shouldResetStyleCacheOnItemSizeChange:!0,validateProps:function(e){e.columnWidth,e.rowHeight}}),z=I({getItemOffset:function(e,t){return t*e.itemSize},getItemSize:function(e,t){return e.itemSize},getEstimatedTotalSize:function(e){var t=e.itemCount;return e.itemSize*t},getOffsetForIndexAndAlignment:function(e,t,n,r){var o=e.direction,a=e.height,i=e.itemCount,u=e.itemSize,l=e.layout,s=e.width,c="horizontal"===o||"horizontal"===l?s:a,f=Math.max(0,i*u-c),d=Math.min(f,t*u),p=Math.max(0,t*u-c+u);switch("smart"===n&&(n=r>=p-c&&r<=d+c?"auto":"center"),n){case"start":return d;case"end":return p;case"center":var h=Math.round(p+(d-p)/2);return h<Math.ceil(c/2)?0:h>f+Math.floor(c/2)?f:h;case"auto":default:return r>=p&&r<=d?r:r<p?p:d}},getStartIndexForOffset:function(e,t){var n=e.itemCount,r=e.itemSize;return Math.max(0,Math.min(n-1,Math.floor(t/r)))},getStopIndexForStartIndex:function(e,t,n){var r=e.direction,o=e.height,a=e.itemCount,i=e.itemSize,u=e.layout,l=e.width,s=t*i,c="horizontal"===r||"horizontal"===u?l:o,f=Math.ceil((c+n-s)/i);return Math.max(0,Math.min(a-1,t+f-1))},initInstanceProps:function(e){},shouldResetStyleCacheOnItemSizeChange:!0,validateProps:function(e){e.itemSize}});function D(e,t){for(var n in e)if(!(n in t))return!0;for(var r in t)if(e[r]!==t[r])return!0;return!1}function A(e,t){var n=e.style,r=Object(c.a)(e,["style"]),o=t.style,a=Object(c.a)(t,["style"]);return!D(n,o)&&!D(r,a)}function U(e,t){return!A(this.props,e)||D(this.state,t)}},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";var r=this&&this.__rest||function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=o(n(0)),i=o(n(8)),u=n(16),l=n(11),s=n(3),c=n(44),f=n(45),d=l.createStore(c.reducer);d.subscribe((function(){var e=d.getState(),t=(e.counter,r(e,["counter"]));u.setExtensionState(t)})),i.default.render(a.default.createElement(s.Provider,{store:d},a.default.createElement(f.Viewer,null)),document.getElementById("viewer"))},function(e,t,n){"use strict";
/** @license React v17.0.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(15),o=60103,a=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var i=60109,u=60110,l=60112;t.Suspense=60113;var s=60115,c=60116;if("function"==typeof Symbol&&Symbol.for){var f=Symbol.for;o=f("react.element"),a=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),i=f("react.provider"),u=f("react.context"),l=f("react.forward_ref"),t.Suspense=f("react.suspense"),s=f("react.memo"),c=f("react.lazy")}var d="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m={};function v(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}function g(){}function y(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=v.prototype;var b=y.prototype=new g;b.constructor=y,r(b,v.prototype),b.isPureReactComponent=!0;var w={current:null},S=Object.prototype.hasOwnProperty,_={key:!0,ref:!0,__self:!0,__source:!0};function x(e,t,n){var r,a={},i=null,u=null;if(null!=t)for(r in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(i=""+t.key),t)S.call(t,r)&&!_.hasOwnProperty(r)&&(a[r]=t[r]);var l=arguments.length-2;if(1===l)a.children=n;else if(1<l){for(var s=Array(l),c=0;c<l;c++)s[c]=arguments[c+2];a.children=s}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===a[r]&&(a[r]=l[r]);return{$$typeof:o,type:e,key:i,ref:u,props:a,_owner:w.current}}function E(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var k=/\/+/g;function O(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function C(e,t,n,r,i){var u=typeof e;"undefined"!==u&&"boolean"!==u||(e=null);var l=!1;if(null===e)l=!0;else switch(u){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case o:case a:l=!0}}if(l)return i=i(l=e),e=""===r?"."+O(l,0):r,Array.isArray(i)?(n="",null!=e&&(n=e.replace(k,"$&/")+"/"),C(i,t,n,"",(function(e){return e}))):null!=i&&(E(i)&&(i=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,n+(!i.key||l&&l.key===i.key?"":(""+i.key).replace(k,"$&/")+"/")+e)),t.push(i)),1;if(l=0,r=""===r?".":r+":",Array.isArray(e))for(var s=0;s<e.length;s++){var c=r+O(u=e[s],s);l+=C(u,t,n,c,i)}else if("function"==typeof(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e)))for(e=c.call(e),s=0;!(u=e.next()).done;)l+=C(u=u.value,t,n,c=r+O(u,s++),i);else if("object"===u)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return l}function P(e,t,n){if(null==e)return e;var r=[],o=0;return C(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function I(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var M={current:null};function T(){var e=M.current;if(null===e)throw Error(p(321));return e}var R={ReactCurrentDispatcher:M,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:P,forEach:function(e,t,n){P(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return P(e,(function(){t++})),t},toArray:function(e){return P(e,(function(e){return e}))||[]},only:function(e){if(!E(e))throw Error(p(143));return e}},t.Component=v,t.PureComponent=y,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=R,t.cloneElement=function(e,t,n){if(null==e)throw Error(p(267,e));var a=r({},e.props),i=e.key,u=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(u=t.ref,l=w.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(c in t)S.call(t,c)&&!_.hasOwnProperty(c)&&(a[c]=void 0===t[c]&&void 0!==s?s[c]:t[c])}var c=arguments.length-2;if(1===c)a.children=n;else if(1<c){s=Array(c);for(var f=0;f<c;f++)s[f]=arguments[f+2];a.children=s}return{$$typeof:o,type:e.type,key:i,ref:u,props:a,_owner:l}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:u,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},t.createElement=x,t.createFactory=function(e){var t=x.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:l,render:e}},t.isValidElement=E,t.lazy=function(e){return{$$typeof:c,_payload:{_status:-1,_result:e},_init:I}},t.memo=function(e,t){return{$$typeof:s,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return T().useCallback(e,t)},t.useContext=function(e,t){return T().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return T().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return T().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return T().useLayoutEffect(e,t)},t.useMemo=function(e,t){return T().useMemo(e,t)},t.useReducer=function(e,t,n){return T().useReducer(e,t,n)},t.useRef=function(e){return T().useRef(e)},t.useState=function(e){return T().useState(e)},t.version="17.0.1"},function(e,t,n){"use strict";
/** @license React v17.0.1
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),o=n(15),a=n(36);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(i(227));var u=new Set,l={};function s(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(l[e]=t,e=0;e<t.length;e++)u.add(t[e])}var f=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,h={},m={};function v(e,t,n,r,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new v(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new v(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new v(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new v(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new v(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new v(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new v(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new v(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new v(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function w(e,t,n,r){var o=g.hasOwnProperty(t)?g[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!p.call(m,e)||!p.call(h,e)&&(d.test(e)?m[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,b);g[t]=new v(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,b);g[t]=new v(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,b);g[t]=new v(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new v(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new v(e,1,!1,e.toLowerCase(),null,!0,!0)}));var S=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,_=60103,x=60106,E=60107,k=60108,O=60114,C=60109,P=60110,I=60112,M=60113,T=60120,R=60115,N=60116,L=60121,j=60128,F=60129,z=60130,D=60131;if("function"==typeof Symbol&&Symbol.for){var A=Symbol.for;_=A("react.element"),x=A("react.portal"),E=A("react.fragment"),k=A("react.strict_mode"),O=A("react.profiler"),C=A("react.provider"),P=A("react.context"),I=A("react.forward_ref"),M=A("react.suspense"),T=A("react.suspense_list"),R=A("react.memo"),N=A("react.lazy"),L=A("react.block"),A("react.scope"),j=A("react.opaque.id"),F=A("react.debug_trace_mode"),z=A("react.offscreen"),D=A("react.legacy_hidden")}var U,V="function"==typeof Symbol&&Symbol.iterator;function B(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=V&&e[V]||e["@@iterator"])?e:null}function W(e){if(void 0===U)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);U=t&&t[1]||""}return"\n"+U+e}var H=!1;function $(e,t){if(!e||H)return"";H=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var o=e.stack.split("\n"),a=r.stack.split("\n"),i=o.length-1,u=a.length-1;1<=i&&0<=u&&o[i]!==a[u];)u--;for(;1<=i&&0<=u;i--,u--)if(o[i]!==a[u]){if(1!==i||1!==u)do{if(i--,0>--u||o[i]!==a[u])return"\n"+o[i].replace(" at new "," at ")}while(1<=i&&0<=u);break}}}finally{H=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?W(e):""}function q(e){switch(e.tag){case 5:return W(e.type);case 16:return W("Lazy");case 13:return W("Suspense");case 19:return W("SuspenseList");case 0:case 2:case 15:return e=$(e.type,!1);case 11:return e=$(e.type.render,!1);case 22:return e=$(e.type._render,!1);case 1:return e=$(e.type,!0);default:return""}}function Q(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case E:return"Fragment";case x:return"Portal";case O:return"Profiler";case k:return"StrictMode";case M:return"Suspense";case T:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case P:return(e.displayName||"Context")+".Consumer";case C:return(e._context.displayName||"Context")+".Provider";case I:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case R:return Q(e.type);case L:return Q(e._render);case N:t=e._payload,e=e._init;try{return Q(e(t))}catch(e){}}return null}function K(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Y(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function X(e){e._valueTracker||(e._valueTracker=function(e){var t=Y(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function G(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Y(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Z(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function J(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=K(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&w(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=K(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?oe(e,t.type,n):t.hasOwnProperty("defaultValue")&&oe(e,t.type,K(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function oe(e,t,n){"number"===t&&Z(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function ae(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ie(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+K(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function ue(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function le(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(i(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(i(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:K(n)}}function se(e,t){var n=K(t.value),r=K(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ce(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var fe="http://www.w3.org/1999/xhtml",de="http://www.w3.org/2000/svg";function pe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function he(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?pe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var me,ve=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==de||"innerHTML"in e)e.innerHTML=t;else{for((me=me||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=me.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function ge(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ye={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},be=["Webkit","ms","Moz","O"];function we(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ye.hasOwnProperty(e)&&ye[e]?(""+t).trim():t+"px"}function Se(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=we(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ye).forEach((function(e){be.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ye[t]=ye[e]}))}));var _e=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function xe(e,t){if(t){if(_e[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62))}}function Ee(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function ke(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Oe=null,Ce=null,Pe=null;function Ie(e){if(e=Zr(e)){if("function"!=typeof Oe)throw Error(i(280));var t=e.stateNode;t&&(t=eo(t),Oe(e.stateNode,e.type,t))}}function Me(e){Ce?Pe?Pe.push(e):Pe=[e]:Ce=e}function Te(){if(Ce){var e=Ce,t=Pe;if(Pe=Ce=null,Ie(e),t)for(e=0;e<t.length;e++)Ie(t[e])}}function Re(e,t){return e(t)}function Ne(e,t,n,r,o){return e(t,n,r,o)}function Le(){}var je=Re,Fe=!1,ze=!1;function De(){null===Ce&&null===Pe||(Le(),Te())}function Ae(e,t){var n=e.stateNode;if(null===n)return null;var r=eo(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var Ue=!1;if(f)try{var Ve={};Object.defineProperty(Ve,"passive",{get:function(){Ue=!0}}),window.addEventListener("test",Ve,Ve),window.removeEventListener("test",Ve,Ve)}catch(e){Ue=!1}function Be(e,t,n,r,o,a,i,u,l){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var We=!1,He=null,$e=!1,qe=null,Qe={onError:function(e){We=!0,He=e}};function Ke(e,t,n,r,o,a,i,u,l){We=!1,He=null,Be.apply(Qe,arguments)}function Ye(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Xe(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function Ge(e){if(Ye(e)!==e)throw Error(i(188))}function Ze(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ye(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){n=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===n)return Ge(o),e;if(a===r)return Ge(o),t;a=a.sibling}throw Error(i(188))}if(n.return!==r.return)n=o,r=a;else{for(var u=!1,l=o.child;l;){if(l===n){u=!0,n=o,r=a;break}if(l===r){u=!0,r=o,n=a;break}l=l.sibling}if(!u){for(l=a.child;l;){if(l===n){u=!0,n=a,r=o;break}if(l===r){u=!0,r=a,n=o;break}l=l.sibling}if(!u)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Je(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var et,tt,nt,rt,ot=!1,at=[],it=null,ut=null,lt=null,st=new Map,ct=new Map,ft=[],dt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function pt(e,t,n,r,o){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:o,targetContainers:[r]}}function ht(e,t){switch(e){case"focusin":case"focusout":it=null;break;case"dragenter":case"dragleave":ut=null;break;case"mouseover":case"mouseout":lt=null;break;case"pointerover":case"pointerout":st.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ct.delete(t.pointerId)}}function mt(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e=pt(t,n,r,o,a),null!==t&&(null!==(t=Zr(t))&&tt(t)),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function vt(e){var t=Gr(e.target);if(null!==t){var n=Ye(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Xe(n)))return e.blockedOn=t,void rt(e.lanePriority,(function(){a.unstable_runWithPriority(e.priority,(function(){nt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function gt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Zt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=Zr(n))&&tt(t),e.blockedOn=n,!1;t.shift()}return!0}function yt(e,t,n){gt(e)&&n.delete(t)}function bt(){for(ot=!1;0<at.length;){var e=at[0];if(null!==e.blockedOn){null!==(e=Zr(e.blockedOn))&&et(e);break}for(var t=e.targetContainers;0<t.length;){var n=Zt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&at.shift()}null!==it&&gt(it)&&(it=null),null!==ut&&gt(ut)&&(ut=null),null!==lt&&gt(lt)&&(lt=null),st.forEach(yt),ct.forEach(yt)}function wt(e,t){e.blockedOn===t&&(e.blockedOn=null,ot||(ot=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,bt)))}function St(e){function t(t){return wt(t,e)}if(0<at.length){wt(at[0],e);for(var n=1;n<at.length;n++){var r=at[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==it&&wt(it,e),null!==ut&&wt(ut,e),null!==lt&&wt(lt,e),st.forEach(t),ct.forEach(t),n=0;n<ft.length;n++)(r=ft[n]).blockedOn===e&&(r.blockedOn=null);for(;0<ft.length&&null===(n=ft[0]).blockedOn;)vt(n),null===n.blockedOn&&ft.shift()}function _t(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var xt={animationend:_t("Animation","AnimationEnd"),animationiteration:_t("Animation","AnimationIteration"),animationstart:_t("Animation","AnimationStart"),transitionend:_t("Transition","TransitionEnd")},Et={},kt={};function Ot(e){if(Et[e])return Et[e];if(!xt[e])return e;var t,n=xt[e];for(t in n)if(n.hasOwnProperty(t)&&t in kt)return Et[e]=n[t];return e}f&&(kt=document.createElement("div").style,"AnimationEvent"in window||(delete xt.animationend.animation,delete xt.animationiteration.animation,delete xt.animationstart.animation),"TransitionEvent"in window||delete xt.transitionend.transition);var Ct=Ot("animationend"),Pt=Ot("animationiteration"),It=Ot("animationstart"),Mt=Ot("transitionend"),Tt=new Map,Rt=new Map,Nt=["abort","abort",Ct,"animationEnd",Pt,"animationIteration",It,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Mt,"transitionEnd","waiting","waiting"];function Lt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1];o="on"+(o[0].toUpperCase()+o.slice(1)),Rt.set(r,t),Tt.set(r,o),s(o,[r])}}(0,a.unstable_now)();var jt=8;function Ft(e){if(0!=(1&e))return jt=15,1;if(0!=(2&e))return jt=14,2;if(0!=(4&e))return jt=13,4;var t=24&e;return 0!==t?(jt=12,t):0!=(32&e)?(jt=11,32):0!==(t=192&e)?(jt=10,t):0!=(256&e)?(jt=9,256):0!==(t=3584&e)?(jt=8,t):0!=(4096&e)?(jt=7,4096):0!==(t=4186112&e)?(jt=6,t):0!==(t=62914560&e)?(jt=5,t):67108864&e?(jt=4,67108864):0!=(134217728&e)?(jt=3,134217728):0!==(t=805306368&e)?(jt=2,t):0!=(1073741824&e)?(jt=1,1073741824):(jt=8,e)}function zt(e,t){var n=e.pendingLanes;if(0===n)return jt=0;var r=0,o=0,a=e.expiredLanes,i=e.suspendedLanes,u=e.pingedLanes;if(0!==a)r=a,o=jt=15;else if(0!==(a=134217727&n)){var l=a&~i;0!==l?(r=Ft(l),o=jt):0!==(u&=a)&&(r=Ft(u),o=jt)}else 0!==(a=n&~i)?(r=Ft(a),o=jt):0!==u&&(r=Ft(u),o=jt);if(0===r)return 0;if(r=n&((0>(r=31-Wt(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&i)){if(Ft(t),o<=jt)return t;jt=o}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-Wt(t)),r|=e[n],t&=~o;return r}function Dt(e){return 0!==(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function At(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Ut(24&~t))?At(10,t):e;case 10:return 0===(e=Ut(192&~t))?At(8,t):e;case 8:return 0===(e=Ut(3584&~t))&&(0===(e=Ut(4186112&~t))&&(e=512)),e;case 2:return 0===(t=Ut(805306368&~t))&&(t=268435456),t}throw Error(i(358,e))}function Ut(e){return e&-e}function Vt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Bt(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-Wt(t)]=n}var Wt=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Ht(e)/$t|0)|0},Ht=Math.log,$t=Math.LN2;var qt=a.unstable_UserBlockingPriority,Qt=a.unstable_runWithPriority,Kt=!0;function Yt(e,t,n,r){Fe||Le();var o=Gt,a=Fe;Fe=!0;try{Ne(o,e,t,n,r)}finally{(Fe=a)||De()}}function Xt(e,t,n,r){Qt(qt,Gt.bind(null,e,t,n,r))}function Gt(e,t,n,r){var o;if(Kt)if((o=0==(4&t))&&0<at.length&&-1<dt.indexOf(e))e=pt(null,e,t,n,r),at.push(e);else{var a=Zt(e,t,n,r);if(null===a)o&&ht(e,r);else{if(o){if(-1<dt.indexOf(e))return e=pt(a,e,t,n,r),void at.push(e);if(function(e,t,n,r,o){switch(t){case"focusin":return it=mt(it,e,t,n,r,o),!0;case"dragenter":return ut=mt(ut,e,t,n,r,o),!0;case"mouseover":return lt=mt(lt,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return st.set(a,mt(st.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,ct.set(a,mt(ct.get(a)||null,e,t,n,r,o)),!0}return!1}(a,e,t,n,r))return;ht(e,r)}Mr(e,t,r,null,n)}}}function Zt(e,t,n,r){var o=ke(r);if(null!==(o=Gr(o))){var a=Ye(o);if(null===a)o=null;else{var i=a.tag;if(13===i){if(null!==(o=Xe(a)))return o;o=null}else if(3===i){if(a.stateNode.hydrate)return 3===a.tag?a.stateNode.containerInfo:null;o=null}else a!==o&&(o=null)}}return Mr(e,t,r,o,n),null}var Jt=null,en=null,tn=null;function nn(){if(tn)return tn;var e,t,n=en,r=n.length,o="value"in Jt?Jt.value:Jt.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return tn=o.slice(e,1<t?1-t:void 0)}function rn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function on(){return!0}function an(){return!1}function un(e){function t(t,n,r,o,a){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?on:an,this.isPropagationStopped=an,this}return o(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=on)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=on)},persist:function(){},isPersistent:on}),t}var ln,sn,cn,fn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},dn=un(fn),pn=o({},fn,{view:0,detail:0}),hn=un(pn),mn=o({},pn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:On,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==cn&&(cn&&"mousemove"===e.type?(ln=e.screenX-cn.screenX,sn=e.screenY-cn.screenY):sn=ln=0,cn=e),ln)},movementY:function(e){return"movementY"in e?e.movementY:sn}}),vn=un(mn),gn=un(o({},mn,{dataTransfer:0})),yn=un(o({},pn,{relatedTarget:0})),bn=un(o({},fn,{animationName:0,elapsedTime:0,pseudoElement:0})),wn=un(o({},fn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),Sn=un(o({},fn,{data:0})),_n={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},xn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},En={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function kn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=En[e])&&!!t[e]}function On(){return kn}var Cn=un(o({},pn,{key:function(e){if(e.key){var t=_n[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=rn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?xn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:On,charCode:function(e){return"keypress"===e.type?rn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?rn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),Pn=un(o({},mn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),In=un(o({},pn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:On})),Mn=un(o({},fn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Tn=un(o({},mn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),Rn=[9,13,27,32],Nn=f&&"CompositionEvent"in window,Ln=null;f&&"documentMode"in document&&(Ln=document.documentMode);var jn=f&&"TextEvent"in window&&!Ln,Fn=f&&(!Nn||Ln&&8<Ln&&11>=Ln),zn=String.fromCharCode(32),Dn=!1;function An(e,t){switch(e){case"keyup":return-1!==Rn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Un(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Vn=!1;var Bn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Wn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Bn[e.type]:"textarea"===t}function Hn(e,t,n,r){Me(r),0<(t=Rr(t,"onChange")).length&&(n=new dn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var $n=null,qn=null;function Qn(e){Er(e,0)}function Kn(e){if(G(Jr(e)))return e}function Yn(e,t){if("change"===e)return t}var Xn=!1;if(f){var Gn;if(f){var Zn="oninput"in document;if(!Zn){var Jn=document.createElement("div");Jn.setAttribute("oninput","return;"),Zn="function"==typeof Jn.oninput}Gn=Zn}else Gn=!1;Xn=Gn&&(!document.documentMode||9<document.documentMode)}function er(){$n&&($n.detachEvent("onpropertychange",tr),qn=$n=null)}function tr(e){if("value"===e.propertyName&&Kn(qn)){var t=[];if(Hn(t,qn,e,ke(e)),e=Qn,Fe)e(t);else{Fe=!0;try{Re(e,t)}finally{Fe=!1,De()}}}}function nr(e,t,n){"focusin"===e?(er(),qn=n,($n=t).attachEvent("onpropertychange",tr)):"focusout"===e&&er()}function rr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Kn(qn)}function or(e,t){if("click"===e)return Kn(t)}function ar(e,t){if("input"===e||"change"===e)return Kn(t)}var ir="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},ur=Object.prototype.hasOwnProperty;function lr(e,t){if(ir(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!ur.call(t,n[r])||!ir(e[n[r]],t[n[r]]))return!1;return!0}function sr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=sr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=sr(r)}}function fr(){for(var e=window,t=Z();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Z((e=t.contentWindow).document)}return t}function dr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var pr=f&&"documentMode"in document&&11>=document.documentMode,hr=null,mr=null,vr=null,gr=!1;function yr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;gr||null==hr||hr!==Z(r)||("selectionStart"in(r=hr)&&dr(r)?r={start:r.selectionStart,end:r.selectionEnd}:r={anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},vr&&lr(vr,r)||(vr=r,0<(r=Rr(mr,"onSelect")).length&&(t=new dn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=hr)))}Lt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Lt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Lt(Nt,2);for(var br="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),wr=0;wr<br.length;wr++)Rt.set(br[wr],0);c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),s("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),s("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),s("onBeforeInput",["compositionend","keypress","textInput","paste"]),s("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Sr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),_r=new Set("cancel close invalid load scroll toggle".split(" ").concat(Sr));function xr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,a,u,l,s){if(Ke.apply(this,arguments),We){if(!We)throw Error(i(198));var c=He;We=!1,He=null,$e||($e=!0,qe=c)}}(r,t,void 0,e),e.currentTarget=null}function Er(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var i=r.length-1;0<=i;i--){var u=r[i],l=u.instance,s=u.currentTarget;if(u=u.listener,l!==a&&o.isPropagationStopped())break e;xr(o,u,s),a=l}else for(i=0;i<r.length;i++){if(l=(u=r[i]).instance,s=u.currentTarget,u=u.listener,l!==a&&o.isPropagationStopped())break e;xr(o,u,s),a=l}}}if($e)throw e=qe,$e=!1,qe=null,e}function kr(e,t){var n=to(t),r=e+"__bubble";n.has(r)||(Ir(t,e,2,!1),n.add(r))}var Or="_reactListening"+Math.random().toString(36).slice(2);function Cr(e){e[Or]||(e[Or]=!0,u.forEach((function(t){_r.has(t)||Pr(t,!1,e,null),Pr(t,!0,e,null)})))}function Pr(e,t,n,r){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,a=n;if("selectionchange"===e&&9!==n.nodeType&&(a=n.ownerDocument),null!==r&&!t&&_r.has(e)){if("scroll"!==e)return;o|=2,a=r}var i=to(a),u=e+"__"+(t?"capture":"bubble");i.has(u)||(t&&(o|=4),Ir(a,e,o,t),i.add(u))}function Ir(e,t,n,r){var o=Rt.get(t);switch(void 0===o?2:o){case 0:o=Yt;break;case 1:o=Xt;break;default:o=Gt}n=o.bind(null,t,n,e),o=void 0,!Ue||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Mr(e,t,n,r,o){var a=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var u=r.stateNode.containerInfo;if(u===o||8===u.nodeType&&u.parentNode===o)break;if(4===i)for(i=r.return;null!==i;){var l=i.tag;if((3===l||4===l)&&((l=i.stateNode.containerInfo)===o||8===l.nodeType&&l.parentNode===o))return;i=i.return}for(;null!==u;){if(null===(i=Gr(u)))return;if(5===(l=i.tag)||6===l){r=a=i;continue e}u=u.parentNode}}r=r.return}!function(e,t,n){if(ze)return e(t,n);ze=!0;try{je(e,t,n)}finally{ze=!1,De()}}((function(){var r=a,o=ke(n),i=[];e:{var u=Tt.get(e);if(void 0!==u){var l=dn,s=e;switch(e){case"keypress":if(0===rn(n))break e;case"keydown":case"keyup":l=Cn;break;case"focusin":s="focus",l=yn;break;case"focusout":s="blur",l=yn;break;case"beforeblur":case"afterblur":l=yn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=vn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=gn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=In;break;case Ct:case Pt:case It:l=bn;break;case Mt:l=Mn;break;case"scroll":l=hn;break;case"wheel":l=Tn;break;case"copy":case"cut":case"paste":l=wn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=Pn}var c=0!=(4&t),f=!c&&"scroll"===e,d=c?null!==u?u+"Capture":null:u;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&(null!=(m=Ae(h,d))&&c.push(Tr(h,m,p)))),f)break;h=h.return}0<c.length&&(u=new l(u,s,null,n,o),i.push({event:u,listeners:c}))}}if(0==(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(u="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(s=n.relatedTarget||n.fromElement)||!Gr(s)&&!s[Yr])&&(l||u)&&(u=o.window===o?o:(u=o.ownerDocument)?u.defaultView||u.parentWindow:window,l?(l=r,null!==(s=(s=n.relatedTarget||n.toElement)?Gr(s):null)&&(s!==(f=Ye(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(l=null,s=r),l!==s)){if(c=vn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Pn,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==l?u:Jr(l),p=null==s?u:Jr(s),(u=new c(m,h+"leave",l,n,o)).target=f,u.relatedTarget=p,m=null,Gr(o)===r&&((c=new c(d,h+"enter",s,n,o)).target=p,c.relatedTarget=f,m=c),f=m,l&&s)e:{for(d=s,h=0,p=c=l;p;p=Nr(p))h++;for(p=0,m=d;m;m=Nr(m))p++;for(;0<h-p;)c=Nr(c),h--;for(;0<p-h;)d=Nr(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=Nr(c),d=Nr(d)}c=null}else c=null;null!==l&&Lr(i,u,l,c,!1),null!==s&&null!==f&&Lr(i,f,s,c,!0)}if("select"===(l=(u=r?Jr(r):window).nodeName&&u.nodeName.toLowerCase())||"input"===l&&"file"===u.type)var v=Yn;else if(Wn(u))if(Xn)v=ar;else{v=rr;var g=nr}else(l=u.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===u.type||"radio"===u.type)&&(v=or);switch(v&&(v=v(e,r))?Hn(i,v,n,o):(g&&g(e,u,r),"focusout"===e&&(g=u._wrapperState)&&g.controlled&&"number"===u.type&&oe(u,"number",u.value)),g=r?Jr(r):window,e){case"focusin":(Wn(g)||"true"===g.contentEditable)&&(hr=g,mr=r,vr=null);break;case"focusout":vr=mr=hr=null;break;case"mousedown":gr=!0;break;case"contextmenu":case"mouseup":case"dragend":gr=!1,yr(i,n,o);break;case"selectionchange":if(pr)break;case"keydown":case"keyup":yr(i,n,o)}var y;if(Nn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Vn?An(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Fn&&"ko"!==n.locale&&(Vn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Vn&&(y=nn()):(en="value"in(Jt=o)?Jt.value:Jt.textContent,Vn=!0)),0<(g=Rr(r,b)).length&&(b=new Sn(b,e,null,n,o),i.push({event:b,listeners:g}),y?b.data=y:null!==(y=Un(n))&&(b.data=y))),(y=jn?function(e,t){switch(e){case"compositionend":return Un(t);case"keypress":return 32!==t.which?null:(Dn=!0,zn);case"textInput":return(e=t.data)===zn&&Dn?null:e;default:return null}}(e,n):function(e,t){if(Vn)return"compositionend"===e||!Nn&&An(e,t)?(e=nn(),tn=en=Jt=null,Vn=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Fn&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))&&(0<(r=Rr(r,"onBeforeInput")).length&&(o=new Sn("onBeforeInput","beforeinput",null,n,o),i.push({event:o,listeners:r}),o.data=y))}Er(i,t)}))}function Tr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Rr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,a=o.stateNode;5===o.tag&&null!==a&&(o=a,null!=(a=Ae(e,n))&&r.unshift(Tr(e,a,o)),null!=(a=Ae(e,t))&&r.push(Tr(e,a,o))),e=e.return}return r}function Nr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Lr(e,t,n,r,o){for(var a=t._reactName,i=[];null!==n&&n!==r;){var u=n,l=u.alternate,s=u.stateNode;if(null!==l&&l===r)break;5===u.tag&&null!==s&&(u=s,o?null!=(l=Ae(n,a))&&i.unshift(Tr(n,l,u)):o||null!=(l=Ae(n,a))&&i.push(Tr(n,l,u))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}function jr(){}var Fr=null,zr=null;function Dr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Ar(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Ur="function"==typeof setTimeout?setTimeout:void 0,Vr="function"==typeof clearTimeout?clearTimeout:void 0;function Br(e){1===e.nodeType?e.textContent="":9===e.nodeType&&(null!=(e=e.body)&&(e.textContent=""))}function Wr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Hr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var $r=0;var qr=Math.random().toString(36).slice(2),Qr="__reactFiber$"+qr,Kr="__reactProps$"+qr,Yr="__reactContainer$"+qr,Xr="__reactEvents$"+qr;function Gr(e){var t=e[Qr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Yr]||n[Qr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Hr(e);null!==e;){if(n=e[Qr])return n;e=Hr(e)}return t}n=(e=n).parentNode}return null}function Zr(e){return!(e=e[Qr]||e[Yr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Jr(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function eo(e){return e[Kr]||null}function to(e){var t=e[Xr];return void 0===t&&(t=e[Xr]=new Set),t}var no=[],ro=-1;function oo(e){return{current:e}}function ao(e){0>ro||(e.current=no[ro],no[ro]=null,ro--)}function io(e,t){ro++,no[ro]=e.current,e.current=t}var uo={},lo=oo(uo),so=oo(!1),co=uo;function fo(e,t){var n=e.type.contextTypes;if(!n)return uo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function po(e){return null!=(e=e.childContextTypes)}function ho(){ao(so),ao(lo)}function mo(e,t,n){if(lo.current!==uo)throw Error(i(168));io(lo,t),io(so,n)}function vo(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in e))throw Error(i(108,Q(t)||"Unknown",a));return o({},n,r)}function go(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||uo,co=lo.current,io(lo,e),io(so,so.current),!0}function yo(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(e=vo(e,t,co),r.__reactInternalMemoizedMergedChildContext=e,ao(so),ao(lo),io(lo,e)):ao(so),io(so,n)}var bo=null,wo=null,So=a.unstable_runWithPriority,_o=a.unstable_scheduleCallback,xo=a.unstable_cancelCallback,Eo=a.unstable_shouldYield,ko=a.unstable_requestPaint,Oo=a.unstable_now,Co=a.unstable_getCurrentPriorityLevel,Po=a.unstable_ImmediatePriority,Io=a.unstable_UserBlockingPriority,Mo=a.unstable_NormalPriority,To=a.unstable_LowPriority,Ro=a.unstable_IdlePriority,No={},Lo=void 0!==ko?ko:function(){},jo=null,Fo=null,zo=!1,Do=Oo(),Ao=1e4>Do?Oo:function(){return Oo()-Do};function Uo(){switch(Co()){case Po:return 99;case Io:return 98;case Mo:return 97;case To:return 96;case Ro:return 95;default:throw Error(i(332))}}function Vo(e){switch(e){case 99:return Po;case 98:return Io;case 97:return Mo;case 96:return To;case 95:return Ro;default:throw Error(i(332))}}function Bo(e,t){return e=Vo(e),So(e,t)}function Wo(e,t,n){return e=Vo(e),_o(e,t,n)}function Ho(){if(null!==Fo){var e=Fo;Fo=null,xo(e)}$o()}function $o(){if(!zo&&null!==jo){zo=!0;var e=0;try{var t=jo;Bo(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),jo=null}catch(t){throw null!==jo&&(jo=jo.slice(e+1)),_o(Po,Ho),t}finally{zo=!1}}}var qo=S.ReactCurrentBatchConfig;function Qo(e,t){if(e&&e.defaultProps){for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Ko=oo(null),Yo=null,Xo=null,Go=null;function Zo(){Go=Xo=Yo=null}function Jo(e){var t=Ko.current;ao(Ko),e.type._context._currentValue=t}function ea(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function ta(e,t){Yo=e,Go=Xo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Ri=!0),e.firstContext=null)}function na(e,t){if(Go!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Go=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Xo){if(null===Yo)throw Error(i(308));Xo=t,Yo.dependencies={lanes:0,firstContext:t,responders:null}}else Xo=Xo.next=t;return e._currentValue}var ra=!1;function oa(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function aa(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ia(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function ua(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function la(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===a?o=a=i:a=a.next=i,n=n.next}while(null!==n);null===a?o=a=t:a=a.next=t}else o=a=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function sa(e,t,n,r){var a=e.updateQueue;ra=!1;var i=a.firstBaseUpdate,u=a.lastBaseUpdate,l=a.shared.pending;if(null!==l){a.shared.pending=null;var s=l,c=s.next;s.next=null,null===u?i=c:u.next=c,u=s;var f=e.alternate;if(null!==f){var d=(f=f.updateQueue).lastBaseUpdate;d!==u&&(null===d?f.firstBaseUpdate=c:d.next=c,f.lastBaseUpdate=s)}}if(null!==i){for(d=a.baseState,u=0,f=c=s=null;;){l=i.lane;var p=i.eventTime;if((r&l)===l){null!==f&&(f=f.next={eventTime:p,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var h=e,m=i;switch(l=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){d=h.call(p,d,l);break e}d=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null==(l="function"==typeof(h=m.payload)?h.call(p,d,l):h))break e;d=o({},d,l);break e;case 2:ra=!0}}null!==i.callback&&(e.flags|=32,null===(l=a.effects)?a.effects=[i]:l.push(i))}else p={eventTime:p,lane:l,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===f?(c=f=p,s=d):f=f.next=p,u|=l;if(null===(i=i.next)){if(null===(l=a.shared.pending))break;i=l.next,l.next=null,a.lastBaseUpdate=l,a.shared.pending=null}}null===f&&(s=d),a.baseState=s,a.firstBaseUpdate=c,a.lastBaseUpdate=f,Lu|=u,e.lanes=u,e.memoizedState=d}}function ca(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(i(191,o));o.call(r)}}}var fa=(new r.Component).refs;function da(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var pa={isMounted:function(e){return!!(e=e._reactInternals)&&Ye(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=al(),o=il(e),a=ia(r,o);a.payload=t,null!=n&&(a.callback=n),ua(e,a),ul(e,o,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=al(),o=il(e),a=ia(r,o);a.tag=1,a.payload=t,null!=n&&(a.callback=n),ua(e,a),ul(e,o,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=al(),r=il(e),o=ia(n,r);o.tag=2,null!=t&&(o.callback=t),ua(e,o),ul(e,r,n)}};function ha(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!t.prototype||!t.prototype.isPureReactComponent||(!lr(n,r)||!lr(o,a))}function ma(e,t,n){var r=!1,o=uo,a=t.contextType;return"object"==typeof a&&null!==a?a=na(a):(o=po(t)?co:lo.current,a=(r=null!=(r=t.contextTypes))?fo(e,o):uo),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=pa,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function va(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&pa.enqueueReplaceState(t,t.state,null)}function ga(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=fa,oa(e);var a=t.contextType;"object"==typeof a&&null!==a?o.context=na(a):(a=po(t)?co:lo.current,o.context=fo(e,a)),sa(e,n,o,r),o.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(da(e,t,a,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&pa.enqueueReplaceState(o,o.state,null),sa(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4)}var ya=Array.isArray;function ba(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===fa&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function wa(e,t){if("textarea"!==e.type)throw Error(i(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function Sa(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Al(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function u(t){return e&&null===t.alternate&&(t.flags=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Wl(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function s(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=ba(e,t,n),r.return=e,r):((r=Ul(n.type,n.key,n.props,null,e.mode,r)).ref=ba(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Hl(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,a){return null===t||7!==t.tag?((t=Vl(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Wl(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case _:return(n=Ul(t.type,t.key,t.props,null,e.mode,n)).ref=ba(e,null,t),n.return=e,n;case x:return(t=Hl(t,e.mode,n)).return=e,t}if(ya(t)||B(t))return(t=Vl(t,e.mode,n,null)).return=e,t;wa(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case _:return n.key===o?n.type===E?f(e,t,n.props.children,r,o):s(e,t,n,r):null;case x:return n.key===o?c(e,t,n,r):null}if(ya(n)||B(n))return null!==o?null:f(e,t,n,r,null);wa(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case _:return e=e.get(null===r.key?n:r.key)||null,r.type===E?f(t,e,r.props.children,o,r.key):s(t,e,r,o);case x:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(ya(r)||B(r))return f(t,e=e.get(n)||null,r,o,null);wa(t,r)}return null}function m(o,i,u,l){for(var s=null,c=null,f=i,m=i=0,v=null;null!==f&&m<u.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var g=p(o,f,u[m],l);if(null===g){null===f&&(f=v);break}e&&f&&null===g.alternate&&t(o,f),i=a(g,i,m),null===c?s=g:c.sibling=g,c=g,f=v}if(m===u.length)return n(o,f),s;if(null===f){for(;m<u.length;m++)null!==(f=d(o,u[m],l))&&(i=a(f,i,m),null===c?s=f:c.sibling=f,c=f);return s}for(f=r(o,f);m<u.length;m++)null!==(v=h(f,o,m,u[m],l))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),i=a(v,i,m),null===c?s=v:c.sibling=v,c=v);return e&&f.forEach((function(e){return t(o,e)})),s}function v(o,u,l,s){var c=B(l);if("function"!=typeof c)throw Error(i(150));if(null==(l=c.call(l)))throw Error(i(151));for(var f=c=null,m=u,v=u=0,g=null,y=l.next();null!==m&&!y.done;v++,y=l.next()){m.index>v?(g=m,m=null):g=m.sibling;var b=p(o,m,y.value,s);if(null===b){null===m&&(m=g);break}e&&m&&null===b.alternate&&t(o,m),u=a(b,u,v),null===f?c=b:f.sibling=b,f=b,m=g}if(y.done)return n(o,m),c;if(null===m){for(;!y.done;v++,y=l.next())null!==(y=d(o,y.value,s))&&(u=a(y,u,v),null===f?c=y:f.sibling=y,f=y);return c}for(m=r(o,m);!y.done;v++,y=l.next())null!==(y=h(m,o,v,y.value,s))&&(e&&null!==y.alternate&&m.delete(null===y.key?v:y.key),u=a(y,u,v),null===f?c=y:f.sibling=y,f=y);return e&&m.forEach((function(e){return t(o,e)})),c}return function(e,r,a,l){var s="object"==typeof a&&null!==a&&a.type===E&&null===a.key;s&&(a=a.props.children);var c="object"==typeof a&&null!==a;if(c)switch(a.$$typeof){case _:e:{for(c=a.key,s=r;null!==s;){if(s.key===c){switch(s.tag){case 7:if(a.type===E){n(e,s.sibling),(r=o(s,a.props.children)).return=e,e=r;break e}break;default:if(s.elementType===a.type){n(e,s.sibling),(r=o(s,a.props)).ref=ba(e,s,a),r.return=e,e=r;break e}}n(e,s);break}t(e,s),s=s.sibling}a.type===E?((r=Vl(a.props.children,e.mode,l,a.key)).return=e,e=r):((l=Ul(a.type,a.key,a.props,null,e.mode,l)).ref=ba(e,r,a),l.return=e,e=l)}return u(e);case x:e:{for(s=a.key;null!==r;){if(r.key===s){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){n(e,r.sibling),(r=o(r,a.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Hl(a,e.mode,l)).return=e,e=r}return u(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,a)).return=e,e=r):(n(e,r),(r=Wl(a,e.mode,l)).return=e,e=r),u(e);if(ya(a))return m(e,r,a,l);if(B(a))return v(e,r,a,l);if(c&&wa(e,a),void 0===a&&!s)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(i(152,Q(e.type)||"Component"))}return n(e,r)}}var _a=Sa(!0),xa=Sa(!1),Ea={},ka=oo(Ea),Oa=oo(Ea),Ca=oo(Ea);function Pa(e){if(e===Ea)throw Error(i(174));return e}function Ia(e,t){switch(io(Ca,t),io(Oa,e),io(ka,Ea),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:he(null,"");break;default:t=he(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}ao(ka),io(ka,t)}function Ma(){ao(ka),ao(Oa),ao(Ca)}function Ta(e){Pa(Ca.current);var t=Pa(ka.current),n=he(t,e.type);t!==n&&(io(Oa,e),io(ka,n))}function Ra(e){Oa.current===e&&(ao(ka),ao(Oa))}var Na=oo(0);function La(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ja=null,Fa=null,za=!1;function Da(e,t){var n=zl(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Aa(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Ua(e){if(za){var t=Fa;if(t){var n=t;if(!Aa(e,t)){if(!(t=Wr(n.nextSibling))||!Aa(e,t))return e.flags=-1025&e.flags|2,za=!1,void(ja=e);Da(ja,n)}ja=e,Fa=Wr(t.firstChild)}else e.flags=-1025&e.flags|2,za=!1,ja=e}}function Va(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ja=e}function Ba(e){if(e!==ja)return!1;if(!za)return Va(e),za=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Ar(t,e.memoizedProps))for(t=Fa;t;)Da(e,t),t=Wr(t.nextSibling);if(Va(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Fa=Wr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Fa=null}}else Fa=ja?Wr(e.stateNode.nextSibling):null;return!0}function Wa(){Fa=ja=null,za=!1}var Ha=[];function $a(){for(var e=0;e<Ha.length;e++)Ha[e]._workInProgressVersionPrimary=null;Ha.length=0}var qa=S.ReactCurrentDispatcher,Qa=S.ReactCurrentBatchConfig,Ka=0,Ya=null,Xa=null,Ga=null,Za=!1,Ja=!1;function ei(){throw Error(i(321))}function ti(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ir(e[n],t[n]))return!1;return!0}function ni(e,t,n,r,o,a){if(Ka=a,Ya=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,qa.current=null===e||null===e.memoizedState?Pi:Ii,e=n(r,o),Ja){a=0;do{if(Ja=!1,!(25>a))throw Error(i(301));a+=1,Ga=Xa=null,t.updateQueue=null,qa.current=Mi,e=n(r,o)}while(Ja)}if(qa.current=Ci,t=null!==Xa&&null!==Xa.next,Ka=0,Ga=Xa=Ya=null,Za=!1,t)throw Error(i(300));return e}function ri(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Ga?Ya.memoizedState=Ga=e:Ga=Ga.next=e,Ga}function oi(){if(null===Xa){var e=Ya.alternate;e=null!==e?e.memoizedState:null}else e=Xa.next;var t=null===Ga?Ya.memoizedState:Ga.next;if(null!==t)Ga=t,Xa=e;else{if(null===e)throw Error(i(310));e={memoizedState:(Xa=e).memoizedState,baseState:Xa.baseState,baseQueue:Xa.baseQueue,queue:Xa.queue,next:null},null===Ga?Ya.memoizedState=Ga=e:Ga=Ga.next=e}return Ga}function ai(e,t){return"function"==typeof t?t(e):t}function ii(e){var t=oi(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=Xa,o=r.baseQueue,a=n.pending;if(null!==a){if(null!==o){var u=o.next;o.next=a.next,a.next=u}r.baseQueue=o=a,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var l=u=a=null,s=o;do{var c=s.lane;if((Ka&c)===c)null!==l&&(l=l.next={lane:0,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null}),r=s.eagerReducer===e?s.eagerState:e(r,s.action);else{var f={lane:c,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null};null===l?(u=l=f,a=r):l=l.next=f,Ya.lanes|=c,Lu|=c}s=s.next}while(null!==s&&s!==o);null===l?a=r:l.next=u,ir(r,t.memoizedState)||(Ri=!0),t.memoizedState=r,t.baseState=a,t.baseQueue=l,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function ui(e){var t=oi(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,a=t.memoizedState;if(null!==o){n.pending=null;var u=o=o.next;do{a=e(a,u.action),u=u.next}while(u!==o);ir(a,t.memoizedState)||(Ri=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function li(e,t,n){var r=t._getVersion;r=r(t._source);var o=t._workInProgressVersionPrimary;if(null!==o?e=o===r:(e=e.mutableReadLanes,(e=(Ka&e)===e)&&(t._workInProgressVersionPrimary=r,Ha.push(t))),e)return n(t._source);throw Ha.push(t),Error(i(350))}function si(e,t,n,r){var o=Ou;if(null===o)throw Error(i(349));var a=t._getVersion,u=a(t._source),l=qa.current,s=l.useState((function(){return li(o,t,n)})),c=s[1],f=s[0];s=Ga;var d=e.memoizedState,p=d.refs,h=p.getSnapshot,m=d.source;d=d.subscribe;var v=Ya;return e.memoizedState={refs:p,source:t,subscribe:r},l.useEffect((function(){p.getSnapshot=n,p.setSnapshot=c;var e=a(t._source);if(!ir(u,e)){e=n(t._source),ir(f,e)||(c(e),e=il(v),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var r=o.entanglements,i=e;0<i;){var l=31-Wt(i),s=1<<l;r[l]|=e,i&=~s}}}),[n,t,r]),l.useEffect((function(){return r(t._source,(function(){var e=p.getSnapshot,n=p.setSnapshot;try{n(e(t._source));var r=il(v);o.mutableReadLanes|=r&o.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),ir(h,n)&&ir(m,t)&&ir(d,r)||((e={pending:null,dispatch:null,lastRenderedReducer:ai,lastRenderedState:f}).dispatch=c=Oi.bind(null,Ya,e),s.queue=e,s.baseQueue=null,f=li(o,t,n),s.memoizedState=s.baseState=f),f}function ci(e,t,n){return si(oi(),e,t,n)}function fi(e){var t=ri();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:ai,lastRenderedState:e}).dispatch=Oi.bind(null,Ya,e),[t.memoizedState,e]}function di(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Ya.updateQueue)?(t={lastEffect:null},Ya.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function pi(e){return e={current:e},ri().memoizedState=e}function hi(){return oi().memoizedState}function mi(e,t,n,r){var o=ri();Ya.flags|=e,o.memoizedState=di(1|t,n,void 0,void 0===r?null:r)}function vi(e,t,n,r){var o=oi();r=void 0===r?null:r;var a=void 0;if(null!==Xa){var i=Xa.memoizedState;if(a=i.destroy,null!==r&&ti(r,i.deps))return void di(t,n,a,r)}Ya.flags|=e,o.memoizedState=di(1|t,n,a,r)}function gi(e,t){return mi(516,4,e,t)}function yi(e,t){return vi(516,4,e,t)}function bi(e,t){return vi(4,2,e,t)}function wi(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Si(e,t,n){return n=null!=n?n.concat([e]):null,vi(4,2,wi.bind(null,t,e),n)}function _i(){}function xi(e,t){var n=oi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ti(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Ei(e,t){var n=oi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ti(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function ki(e,t){var n=Uo();Bo(98>n?98:n,(function(){e(!0)})),Bo(97<n?97:n,(function(){var n=Qa.transition;Qa.transition=1;try{e(!1),t()}finally{Qa.transition=n}}))}function Oi(e,t,n){var r=al(),o=il(e),a={lane:o,action:n,eagerReducer:null,eagerState:null,next:null},i=t.pending;if(null===i?a.next=a:(a.next=i.next,i.next=a),t.pending=a,i=e.alternate,e===Ya||null!==i&&i===Ya)Ja=Za=!0;else{if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var u=t.lastRenderedState,l=i(u,n);if(a.eagerReducer=i,a.eagerState=l,ir(l,u))return}catch(e){}ul(e,o,r)}}var Ci={readContext:na,useCallback:ei,useContext:ei,useEffect:ei,useImperativeHandle:ei,useLayoutEffect:ei,useMemo:ei,useReducer:ei,useRef:ei,useState:ei,useDebugValue:ei,useDeferredValue:ei,useTransition:ei,useMutableSource:ei,useOpaqueIdentifier:ei,unstable_isNewReconciler:!1},Pi={readContext:na,useCallback:function(e,t){return ri().memoizedState=[e,void 0===t?null:t],e},useContext:na,useEffect:gi,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,mi(4,2,wi.bind(null,t,e),n)},useLayoutEffect:function(e,t){return mi(4,2,e,t)},useMemo:function(e,t){var n=ri();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=ri();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Oi.bind(null,Ya,e),[r.memoizedState,e]},useRef:pi,useState:fi,useDebugValue:_i,useDeferredValue:function(e){var t=fi(e),n=t[0],r=t[1];return gi((function(){var t=Qa.transition;Qa.transition=1;try{r(e)}finally{Qa.transition=t}}),[e]),n},useTransition:function(){var e=fi(!1),t=e[0];return pi(e=ki.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=ri();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},si(r,e,t,n)},useOpaqueIdentifier:function(){if(za){var e=!1,t=function(e){return{$$typeof:j,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+($r++).toString(36))),Error(i(355))})),n=fi(t)[1];return 0==(2&Ya.mode)&&(Ya.flags|=516,di(5,(function(){n("r:"+($r++).toString(36))}),void 0,null)),t}return fi(t="r:"+($r++).toString(36)),t},unstable_isNewReconciler:!1},Ii={readContext:na,useCallback:xi,useContext:na,useEffect:yi,useImperativeHandle:Si,useLayoutEffect:bi,useMemo:Ei,useReducer:ii,useRef:hi,useState:function(){return ii(ai)},useDebugValue:_i,useDeferredValue:function(e){var t=ii(ai),n=t[0],r=t[1];return yi((function(){var t=Qa.transition;Qa.transition=1;try{r(e)}finally{Qa.transition=t}}),[e]),n},useTransition:function(){var e=ii(ai)[0];return[hi().current,e]},useMutableSource:ci,useOpaqueIdentifier:function(){return ii(ai)[0]},unstable_isNewReconciler:!1},Mi={readContext:na,useCallback:xi,useContext:na,useEffect:yi,useImperativeHandle:Si,useLayoutEffect:bi,useMemo:Ei,useReducer:ui,useRef:hi,useState:function(){return ui(ai)},useDebugValue:_i,useDeferredValue:function(e){var t=ui(ai),n=t[0],r=t[1];return yi((function(){var t=Qa.transition;Qa.transition=1;try{r(e)}finally{Qa.transition=t}}),[e]),n},useTransition:function(){var e=ui(ai)[0];return[hi().current,e]},useMutableSource:ci,useOpaqueIdentifier:function(){return ui(ai)[0]},unstable_isNewReconciler:!1},Ti=S.ReactCurrentOwner,Ri=!1;function Ni(e,t,n,r){t.child=null===e?xa(t,null,n,r):_a(t,e.child,n,r)}function Li(e,t,n,r,o){n=n.render;var a=t.ref;return ta(t,o),r=ni(e,t,n,r,a,o),null===e||Ri?(t.flags|=1,Ni(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,eu(e,t,o))}function ji(e,t,n,r,o,a){if(null===e){var i=n.type;return"function"!=typeof i||Dl(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ul(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,Fi(e,t,i,r,o,a))}return i=e.child,0==(o&a)&&(o=i.memoizedProps,(n=null!==(n=n.compare)?n:lr)(o,r)&&e.ref===t.ref)?eu(e,t,a):(t.flags|=1,(e=Al(i,r)).ref=t.ref,e.return=t,t.child=e)}function Fi(e,t,n,r,o,a){if(null!==e&&lr(e.memoizedProps,r)&&e.ref===t.ref){if(Ri=!1,0==(a&o))return t.lanes=e.lanes,eu(e,t,a);0!=(16384&e.flags)&&(Ri=!0)}return Ai(e,t,n,r,a)}function zi(e,t,n){var r=t.pendingProps,o=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},ml(t,n);else{if(0==(1073741824&n))return e=null!==a?a.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},ml(t,e),null;t.memoizedState={baseLanes:0},ml(t,null!==a?a.baseLanes:n)}else null!==a?(r=a.baseLanes|n,t.memoizedState=null):r=n,ml(t,r);return Ni(e,t,o,n),t.child}function Di(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function Ai(e,t,n,r,o){var a=po(n)?co:lo.current;return a=fo(t,a),ta(t,o),n=ni(e,t,n,r,a,o),null===e||Ri?(t.flags|=1,Ni(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,eu(e,t,o))}function Ui(e,t,n,r,o){if(po(n)){var a=!0;go(t)}else a=!1;if(ta(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),ma(t,n,r),ga(t,n,r,o),r=!0;else if(null===e){var i=t.stateNode,u=t.memoizedProps;i.props=u;var l=i.context,s=n.contextType;"object"==typeof s&&null!==s?s=na(s):s=fo(t,s=po(n)?co:lo.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(u!==r||l!==s)&&va(t,i,r,s),ra=!1;var d=t.memoizedState;i.state=d,sa(t,r,i,o),l=t.memoizedState,u!==r||d!==l||so.current||ra?("function"==typeof c&&(da(t,n,c,r),l=t.memoizedState),(u=ra||ha(t,n,u,r,d,l,s))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4)):("function"==typeof i.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=l),i.props=r,i.state=l,i.context=s,r=u):("function"==typeof i.componentDidMount&&(t.flags|=4),r=!1)}else{i=t.stateNode,aa(e,t),u=t.memoizedProps,s=t.type===t.elementType?u:Qo(t.type,u),i.props=s,f=t.pendingProps,d=i.context,"object"==typeof(l=n.contextType)&&null!==l?l=na(l):l=fo(t,l=po(n)?co:lo.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(u!==f||d!==l)&&va(t,i,r,l),ra=!1,d=t.memoizedState,i.state=d,sa(t,r,i,o);var h=t.memoizedState;u!==f||d!==h||so.current||ra?("function"==typeof p&&(da(t,n,p,r),h=t.memoizedState),(s=ra||ha(t,n,s,r,d,h,l))?(c||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,h,l),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,h,l)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof i.componentDidUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=h),i.props=r,i.state=h,i.context=l,r=s):("function"!=typeof i.componentDidUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),r=!1)}return Vi(e,t,n,r,a,o)}function Vi(e,t,n,r,o,a){Di(e,t);var i=0!=(64&t.flags);if(!r&&!i)return o&&yo(t,n,!1),eu(e,t,a);r=t.stateNode,Ti.current=t;var u=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=_a(t,e.child,null,a),t.child=_a(t,null,u,a)):Ni(e,t,u,a),t.memoizedState=r.state,o&&yo(t,n,!0),t.child}function Bi(e){var t=e.stateNode;t.pendingContext?mo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&mo(0,t.context,!1),Ia(e,t.containerInfo)}var Wi,Hi,$i,qi={dehydrated:null,retryLane:0};function Qi(e,t,n){var r,o=t.pendingProps,a=Na.current,i=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&a)),r?(i=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(a|=1),io(Na,1&a),null===e?(void 0!==o.fallback&&Ua(t),e=o.children,a=o.fallback,i?(e=Ki(t,e,a,n),t.child.memoizedState={baseLanes:n},t.memoizedState=qi,e):"number"==typeof o.unstable_expectedLoadTime?(e=Ki(t,e,a,n),t.child.memoizedState={baseLanes:n},t.memoizedState=qi,t.lanes=33554432,e):((n=Bl({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,i?(o=Xi(e,t,o.children,o.fallback,n),i=t.child,a=e.child.memoizedState,i.memoizedState=null===a?{baseLanes:n}:{baseLanes:a.baseLanes|n},i.childLanes=e.childLanes&~n,t.memoizedState=qi,o):(n=Yi(e,t,o.children,n),t.memoizedState=null,n))}function Ki(e,t,n,r){var o=e.mode,a=e.child;return t={mode:"hidden",children:t},0==(2&o)&&null!==a?(a.childLanes=0,a.pendingProps=t):a=Bl(t,o,0,null),n=Vl(n,o,r,null),a.return=e,n.return=e,a.sibling=n,e.child=a,n}function Yi(e,t,n,r){var o=e.child;return e=o.sibling,n=Al(o,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}function Xi(e,t,n,r,o){var a=t.mode,i=e.child;e=i.sibling;var u={mode:"hidden",children:n};return 0==(2&a)&&t.child!==i?((n=t.child).childLanes=0,n.pendingProps=u,null!==(i=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=i,i.nextEffect=null):t.firstEffect=t.lastEffect=null):n=Al(i,u),null!==e?r=Al(e,r):(r=Vl(r,a,o,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}function Gi(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),ea(e.return,t)}function Zi(e,t,n,r,o,a){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o,lastEffect:a}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=o,i.lastEffect=a)}function Ji(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(Ni(e,t,r.children,n),0!=(2&(r=Na.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Gi(e,n);else if(19===e.tag)Gi(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(io(Na,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===La(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Zi(t,!1,o,n,a,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===La(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Zi(t,!0,n,null,a,t.lastEffect);break;case"together":Zi(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function eu(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Lu|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=Al(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Al(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function tu(e,t){if(!za)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function nu(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return po(t.type)&&ho(),null;case 3:return Ma(),ao(so),ao(lo),$a(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Ba(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:Ra(t);var a=Pa(Ca.current);if(n=t.type,null!==e&&null!=t.stateNode)Hi(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(i(166));return null}if(e=Pa(ka.current),Ba(t)){r=t.stateNode,n=t.type;var u=t.memoizedProps;switch(r[Qr]=t,r[Kr]=u,n){case"dialog":kr("cancel",r),kr("close",r);break;case"iframe":case"object":case"embed":kr("load",r);break;case"video":case"audio":for(e=0;e<Sr.length;e++)kr(Sr[e],r);break;case"source":kr("error",r);break;case"img":case"image":case"link":kr("error",r),kr("load",r);break;case"details":kr("toggle",r);break;case"input":ee(r,u),kr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!u.multiple},kr("invalid",r);break;case"textarea":le(r,u),kr("invalid",r)}for(var s in xe(n,u),e=null,u)u.hasOwnProperty(s)&&(a=u[s],"children"===s?"string"==typeof a?r.textContent!==a&&(e=["children",a]):"number"==typeof a&&r.textContent!==""+a&&(e=["children",""+a]):l.hasOwnProperty(s)&&null!=a&&"onScroll"===s&&kr("scroll",r));switch(n){case"input":X(r),re(r,u,!0);break;case"textarea":X(r),ce(r);break;case"select":case"option":break;default:"function"==typeof u.onClick&&(r.onclick=jr)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(s=9===a.nodeType?a:a.ownerDocument,e===fe&&(e=pe(n)),e===fe?"script"===n?((e=s.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=s.createElement(n,{is:r.is}):(e=s.createElement(n),"select"===n&&(s=e,r.multiple?s.multiple=!0:r.size&&(s.size=r.size))):e=s.createElementNS(e,n),e[Qr]=t,e[Kr]=r,Wi(e,t),t.stateNode=e,s=Ee(n,r),n){case"dialog":kr("cancel",e),kr("close",e),a=r;break;case"iframe":case"object":case"embed":kr("load",e),a=r;break;case"video":case"audio":for(a=0;a<Sr.length;a++)kr(Sr[a],e);a=r;break;case"source":kr("error",e),a=r;break;case"img":case"image":case"link":kr("error",e),kr("load",e),a=r;break;case"details":kr("toggle",e),a=r;break;case"input":ee(e,r),a=J(e,r),kr("invalid",e);break;case"option":a=ae(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=o({},r,{value:void 0}),kr("invalid",e);break;case"textarea":le(e,r),a=ue(e,r),kr("invalid",e);break;default:a=r}xe(n,a);var c=a;for(u in c)if(c.hasOwnProperty(u)){var f=c[u];"style"===u?Se(e,f):"dangerouslySetInnerHTML"===u?null!=(f=f?f.__html:void 0)&&ve(e,f):"children"===u?"string"==typeof f?("textarea"!==n||""!==f)&&ge(e,f):"number"==typeof f&&ge(e,""+f):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(l.hasOwnProperty(u)?null!=f&&"onScroll"===u&&kr("scroll",e):null!=f&&w(e,u,f,s))}switch(n){case"input":X(e),re(e,r,!1);break;case"textarea":X(e),ce(e);break;case"option":null!=r.value&&e.setAttribute("value",""+K(r.value));break;case"select":e.multiple=!!r.multiple,null!=(u=r.value)?ie(e,!!r.multiple,u,!1):null!=r.defaultValue&&ie(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=jr)}Dr(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)$i(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));n=Pa(Ca.current),Pa(ka.current),Ba(t)?(r=t.stateNode,n=t.memoizedProps,r[Qr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Qr]=t,t.stateNode=r)}return null;case 13:return ao(Na),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Ba(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Na.current)?0===Tu&&(Tu=3):(0!==Tu&&3!==Tu||(Tu=4),null===Ou||0==(134217727&Lu)&&0==(134217727&ju)||fl(Ou,Pu))),(r||n)&&(t.flags|=4),null);case 4:return Ma(),null===e&&Cr(t.stateNode.containerInfo),null;case 10:return Jo(t),null;case 17:return po(t.type)&&ho(),null;case 19:if(ao(Na),null===(r=t.memoizedState))return null;if(u=0!=(64&t.flags),null===(s=r.rendering))if(u)tu(r,!1);else{if(0!==Tu||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(s=La(e))){for(t.flags|=64,tu(r,!1),null!==(u=s.updateQueue)&&(t.updateQueue=u,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(u=n).flags&=2,u.nextEffect=null,u.firstEffect=null,u.lastEffect=null,null===(s=u.alternate)?(u.childLanes=0,u.lanes=e,u.child=null,u.memoizedProps=null,u.memoizedState=null,u.updateQueue=null,u.dependencies=null,u.stateNode=null):(u.childLanes=s.childLanes,u.lanes=s.lanes,u.child=s.child,u.memoizedProps=s.memoizedProps,u.memoizedState=s.memoizedState,u.updateQueue=s.updateQueue,u.type=s.type,e=s.dependencies,u.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return io(Na,1&Na.current|2),t.child}e=e.sibling}null!==r.tail&&Ao()>Au&&(t.flags|=64,u=!0,tu(r,!1),t.lanes=33554432)}else{if(!u)if(null!==(e=La(s))){if(t.flags|=64,u=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),tu(r,!0),null===r.tail&&"hidden"===r.tailMode&&!s.alternate&&!za)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Ao()-r.renderingStartTime>Au&&1073741824!==n&&(t.flags|=64,u=!0,tu(r,!1),t.lanes=33554432);r.isBackwards?(s.sibling=t.child,t.child=s):(null!==(n=r.last)?n.sibling=s:t.child=s,r.last=s)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Ao(),n.sibling=null,t=Na.current,io(Na,u?1&t|2:1&t),n):null;case 23:case 24:return vl(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(i(156,t.tag))}function ru(e){switch(e.tag){case 1:po(e.type)&&ho();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Ma(),ao(so),ao(lo),$a(),0!=(64&(t=e.flags)))throw Error(i(285));return e.flags=-4097&t|64,e;case 5:return Ra(e),null;case 13:return ao(Na),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return ao(Na),null;case 4:return Ma(),null;case 10:return Jo(e),null;case 23:case 24:return vl(),null;default:return null}}function ou(e,t){try{var n="",r=t;do{n+=q(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o}}function au(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Wi=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Hi=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,Pa(ka.current);var i,u=null;switch(n){case"input":a=J(e,a),r=J(e,r),u=[];break;case"option":a=ae(e,a),r=ae(e,r),u=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),u=[];break;case"textarea":a=ue(e,a),r=ue(e,r),u=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=jr)}for(f in xe(n,r),n=null,a)if(!r.hasOwnProperty(f)&&a.hasOwnProperty(f)&&null!=a[f])if("style"===f){var s=a[f];for(i in s)s.hasOwnProperty(i)&&(n||(n={}),n[i]="")}else"dangerouslySetInnerHTML"!==f&&"children"!==f&&"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(l.hasOwnProperty(f)?u||(u=[]):(u=u||[]).push(f,null));for(f in r){var c=r[f];if(s=null!=a?a[f]:void 0,r.hasOwnProperty(f)&&c!==s&&(null!=c||null!=s))if("style"===f)if(s){for(i in s)!s.hasOwnProperty(i)||c&&c.hasOwnProperty(i)||(n||(n={}),n[i]="");for(i in c)c.hasOwnProperty(i)&&s[i]!==c[i]&&(n||(n={}),n[i]=c[i])}else n||(u||(u=[]),u.push(f,n)),n=c;else"dangerouslySetInnerHTML"===f?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(u=u||[]).push(f,c)):"children"===f?"string"!=typeof c&&"number"!=typeof c||(u=u||[]).push(f,""+c):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&(l.hasOwnProperty(f)?(null!=c&&"onScroll"===f&&kr("scroll",e),u||s===c||(u=[])):"object"==typeof c&&null!==c&&c.$$typeof===j?c.toString():(u=u||[]).push(f,c))}n&&(u=u||[]).push("style",n);var f=u;(t.updateQueue=f)&&(t.flags|=4)}},$i=function(e,t,n,r){n!==r&&(t.flags|=4)};var iu="function"==typeof WeakMap?WeakMap:Map;function uu(e,t,n){(n=ia(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Wu||(Wu=!0,Hu=r),au(0,t)},n}function lu(e,t,n){(n=ia(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return au(0,t),r(o)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===$u?$u=new Set([this]):$u.add(this),au(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var su="function"==typeof WeakSet?WeakSet:Set;function cu(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Nl(e,t)}else t.current=null}function fu(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Qo(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Br(t.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(i(163))}function du(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var o=e;r=o.next,0!=(4&(o=o.tag))&&0!=(1&o)&&(Ml(n,e),Il(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Qo(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&ca(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}ca(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Dr(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&St(n)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(i(163))}function pu(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=we("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function hu(e,t){if(wo&&"function"==typeof wo.onCommitFiberUnmount)try{wo.onCommitFiberUnmount(bo,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,o=r.destroy;if(r=r.tag,void 0!==o)if(0!=(4&r))Ml(t,n);else{r=t;try{o()}catch(e){Nl(r,e)}}n=n.next}while(n!==e)}break;case 1:if(cu(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Nl(t,e)}break;case 5:cu(t);break;case 4:yu(e,t)}}function mu(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function vu(e){return 5===e.tag||3===e.tag||4===e.tag}function gu(e){e:{for(var t=e.return;null!==t;){if(vu(t))break e;t=t.return}throw Error(i(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(i(161))}16&n.flags&&(ge(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||vu(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?function e(t,n,r){var o=t.tag,a=5===o||6===o;if(a)t=a?t.stateNode:t.stateNode.instance,n?8===r.nodeType?r.parentNode.insertBefore(t,n):r.insertBefore(t,n):(8===r.nodeType?(n=r.parentNode).insertBefore(t,r):(n=r).appendChild(t),null!==(r=r._reactRootContainer)&&void 0!==r||null!==n.onclick||(n.onclick=jr));else if(4!==o&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t):function e(t,n,r){var o=t.tag,a=5===o||6===o;if(a)t=a?t.stateNode:t.stateNode.instance,n?r.insertBefore(t,n):r.appendChild(t);else if(4!==o&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t)}function yu(e,t){for(var n,r,o=t,a=!1;;){if(!a){a=o.return;e:for(;;){if(null===a)throw Error(i(160));switch(n=a.stateNode,a.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}a=a.return}a=!0}if(5===o.tag||6===o.tag){e:for(var u=e,l=o,s=l;;)if(hu(u,s),null!==s.child&&4!==s.tag)s.child.return=s,s=s.child;else{if(s===l)break e;for(;null===s.sibling;){if(null===s.return||s.return===l)break e;s=s.return}s.sibling.return=s.return,s=s.sibling}r?(u=n,l=o.stateNode,8===u.nodeType?u.parentNode.removeChild(l):u.removeChild(l)):n.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){n=o.stateNode.containerInfo,r=!0,o.child.return=o,o=o.child;continue}}else if(hu(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(a=!1)}o.sibling.return=o.return,o=o.sibling}}function bu(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var o=null!==e?e.memoizedProps:r;e=t.type;var a=t.updateQueue;if(t.updateQueue=null,null!==a){for(n[Kr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),Ee(e,o),t=Ee(e,r),o=0;o<a.length;o+=2){var u=a[o],l=a[o+1];"style"===u?Se(n,l):"dangerouslySetInnerHTML"===u?ve(n,l):"children"===u?ge(n,l):w(n,u,l,t)}switch(e){case"input":ne(n,r);break;case"textarea":se(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(a=r.value)?ie(n,!!r.multiple,a,!1):e!==!!r.multiple&&(null!=r.defaultValue?ie(n,!!r.multiple,r.defaultValue,!0):ie(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(i(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,St(n.containerInfo)));case 12:return;case 13:return null!==t.memoizedState&&(Du=Ao(),pu(t.child,!0)),void wu(t);case 19:return void wu(t);case 17:return;case 23:case 24:return void pu(t,null!==t.memoizedState)}throw Error(i(163))}function wu(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new su),t.forEach((function(t){var r=jl.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function Su(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&(null!==(t=t.memoizedState)&&null===t.dehydrated)}var _u=Math.ceil,xu=S.ReactCurrentDispatcher,Eu=S.ReactCurrentOwner,ku=0,Ou=null,Cu=null,Pu=0,Iu=0,Mu=oo(0),Tu=0,Ru=null,Nu=0,Lu=0,ju=0,Fu=0,zu=null,Du=0,Au=1/0;function Uu(){Au=Ao()+500}var Vu,Bu=null,Wu=!1,Hu=null,$u=null,qu=!1,Qu=null,Ku=90,Yu=[],Xu=[],Gu=null,Zu=0,Ju=null,el=-1,tl=0,nl=0,rl=null,ol=!1;function al(){return 0!=(48&ku)?Ao():-1!==el?el:el=Ao()}function il(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Uo()?1:2;if(0===tl&&(tl=Nu),0!==qo.transition){0!==nl&&(nl=null!==zu?zu.pendingLanes:0),e=tl;var t=4186112&~nl;return 0===(t&=-t)&&(0===(t=(e=4186112&~e)&-e)&&(t=8192)),t}return e=Uo(),0!=(4&ku)&&98===e?e=At(12,tl):e=At(e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),tl),e}function ul(e,t,n){if(50<Zu)throw Zu=0,Ju=null,Error(i(185));if(null===(e=ll(e,t)))return null;Bt(e,t,n),e===Ou&&(ju|=t,4===Tu&&fl(e,Pu));var r=Uo();1===t?0!=(8&ku)&&0==(48&ku)?dl(e):(sl(e,n),0===ku&&(Uu(),Ho())):(0==(4&ku)||98!==r&&99!==r||(null===Gu?Gu=new Set([e]):Gu.add(e)),sl(e,n)),zu=e}function ll(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function sl(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,o=e.pingedLanes,a=e.expirationTimes,u=e.pendingLanes;0<u;){var l=31-Wt(u),s=1<<l,c=a[l];if(-1===c){if(0==(s&r)||0!=(s&o)){c=t,Ft(s);var f=jt;a[l]=10<=f?c+250:6<=f?c+5e3:-1}}else c<=t&&(e.expiredLanes|=s);u&=~s}if(r=zt(e,e===Ou?Pu:0),t=jt,0===r)null!==n&&(n!==No&&xo(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==No&&xo(n)}15===t?(n=dl.bind(null,e),null===jo?(jo=[n],Fo=_o(Po,$o)):jo.push(n),n=No):14===t?n=Wo(99,dl.bind(null,e)):n=Wo(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(i(358,e))}}(t),cl.bind(null,e)),e.callbackPriority=t,e.callbackNode=n}}function cl(e){if(el=-1,nl=tl=0,0!=(48&ku))throw Error(i(327));var t=e.callbackNode;if(Pl()&&e.callbackNode!==t)return null;var n=zt(e,e===Ou?Pu:0);if(0===n)return null;var r=n,o=ku;ku|=16;var a=bl();for(Ou===e&&Pu===r||(Uu(),gl(e,r));;)try{_l();break}catch(t){yl(e,t)}if(Zo(),xu.current=a,ku=o,null!==Cu?r=0:(Ou=null,Pu=0,r=Tu),0!=(Nu&ju))gl(e,0);else if(0!==r){if(2===r&&(ku|=64,e.hydrate&&(e.hydrate=!1,Br(e.containerInfo)),0!==(n=Dt(e))&&(r=wl(e,n))),1===r)throw t=Ru,gl(e,0),fl(e,n),sl(e,Ao()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(i(345));case 2:kl(e);break;case 3:if(fl(e,n),(62914560&n)===n&&10<(r=Du+500-Ao())){if(0!==zt(e,0))break;if(((o=e.suspendedLanes)&n)!==n){al(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=Ur(kl.bind(null,e),r);break}kl(e);break;case 4:if(fl(e,n),(4186112&n)===n)break;for(r=e.eventTimes,o=-1;0<n;){var u=31-Wt(n);a=1<<u,(u=r[u])>o&&(o=u),n&=~a}if(n=o,10<(n=(120>(n=Ao()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*_u(n/1960))-n)){e.timeoutHandle=Ur(kl.bind(null,e),n);break}kl(e);break;case 5:kl(e);break;default:throw Error(i(329))}}return sl(e,Ao()),e.callbackNode===t?cl.bind(null,e):null}function fl(e,t){for(t&=~Fu,t&=~ju,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Wt(t),r=1<<n;e[n]=-1,t&=~r}}function dl(e){if(0!=(48&ku))throw Error(i(327));if(Pl(),e===Ou&&0!=(e.expiredLanes&Pu)){var t=Pu,n=wl(e,t);0!=(Nu&ju)&&(n=wl(e,t=zt(e,t)))}else n=wl(e,t=zt(e,0));if(0!==e.tag&&2===n&&(ku|=64,e.hydrate&&(e.hydrate=!1,Br(e.containerInfo)),0!==(t=Dt(e))&&(n=wl(e,t))),1===n)throw n=Ru,gl(e,0),fl(e,t),sl(e,Ao()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,kl(e),sl(e,Ao()),null}function pl(e,t){var n=ku;ku|=1;try{return e(t)}finally{0===(ku=n)&&(Uu(),Ho())}}function hl(e,t){var n=ku;ku&=-2,ku|=8;try{return e(t)}finally{0===(ku=n)&&(Uu(),Ho())}}function ml(e,t){io(Mu,Iu),Iu|=t,Nu|=t}function vl(){Iu=Mu.current,ao(Mu)}function gl(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Vr(n)),null!==Cu)for(n=Cu.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&ho();break;case 3:Ma(),ao(so),ao(lo),$a();break;case 5:Ra(r);break;case 4:Ma();break;case 13:case 19:ao(Na);break;case 10:Jo(r);break;case 23:case 24:vl()}n=n.return}Ou=e,Cu=Al(e.current,null),Pu=Iu=Nu=t,Tu=0,Ru=null,Fu=ju=Lu=0}function yl(e,t){for(;;){var n=Cu;try{if(Zo(),qa.current=Ci,Za){for(var r=Ya.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}Za=!1}if(Ka=0,Ga=Xa=Ya=null,Ja=!1,Eu.current=null,null===n||null===n.return){Tu=1,Ru=t,Cu=null;break}e:{var a=e,i=n.return,u=n,l=t;if(t=Pu,u.flags|=2048,u.firstEffect=u.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var s=l;if(0==(2&u.mode)){var c=u.alternate;c?(u.updateQueue=c.updateQueue,u.memoizedState=c.memoizedState,u.lanes=c.lanes):(u.updateQueue=null,u.memoizedState=null)}var f=0!=(1&Na.current),d=i;do{var p;if(p=13===d.tag){var h=d.memoizedState;if(null!==h)p=null!==h.dehydrated;else{var m=d.memoizedProps;p=void 0!==m.fallback&&(!0!==m.unstable_avoidThisFallback||!f)}}if(p){var v=d.updateQueue;if(null===v){var g=new Set;g.add(s),d.updateQueue=g}else v.add(s);if(0==(2&d.mode)){if(d.flags|=64,u.flags|=16384,u.flags&=-2981,1===u.tag)if(null===u.alternate)u.tag=17;else{var y=ia(-1,1);y.tag=2,ua(u,y)}u.lanes|=1;break e}l=void 0,u=t;var b=a.pingCache;if(null===b?(b=a.pingCache=new iu,l=new Set,b.set(s,l)):void 0===(l=b.get(s))&&(l=new Set,b.set(s,l)),!l.has(u)){l.add(u);var w=Ll.bind(null,a,s,u);s.then(w,w)}d.flags|=4096,d.lanes=t;break e}d=d.return}while(null!==d);l=Error((Q(u.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Tu&&(Tu=2),l=ou(l,u),d=i;do{switch(d.tag){case 3:a=l,d.flags|=4096,t&=-t,d.lanes|=t,la(d,uu(0,a,t));break e;case 1:a=l;var S=d.type,_=d.stateNode;if(0==(64&d.flags)&&("function"==typeof S.getDerivedStateFromError||null!==_&&"function"==typeof _.componentDidCatch&&(null===$u||!$u.has(_)))){d.flags|=4096,t&=-t,d.lanes|=t,la(d,lu(d,a,t));break e}}d=d.return}while(null!==d)}El(n)}catch(e){t=e,Cu===n&&null!==n&&(Cu=n=n.return);continue}break}}function bl(){var e=xu.current;return xu.current=Ci,null===e?Ci:e}function wl(e,t){var n=ku;ku|=16;var r=bl();for(Ou===e&&Pu===t||gl(e,t);;)try{Sl();break}catch(t){yl(e,t)}if(Zo(),ku=n,xu.current=r,null!==Cu)throw Error(i(261));return Ou=null,Pu=0,Tu}function Sl(){for(;null!==Cu;)xl(Cu)}function _l(){for(;null!==Cu&&!Eo();)xl(Cu)}function xl(e){var t=Vu(e.alternate,e,Iu);e.memoizedProps=e.pendingProps,null===t?El(e):Cu=t,Eu.current=null}function El(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=nu(n,t,Iu)))return void(Cu=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Iu)||0==(4&n.mode)){for(var r=0,o=n.child;null!==o;)r|=o.lanes|o.childLanes,o=o.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=ru(t)))return n.flags&=2047,void(Cu=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Cu=t);Cu=t=e}while(null!==t);0===Tu&&(Tu=5)}function kl(e){var t=Uo();return Bo(99,Ol.bind(null,e,t)),null}function Ol(e,t){do{Pl()}while(null!==Qu);if(0!=(48&ku))throw Error(i(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(i(177));e.callbackNode=null;var r=n.lanes|n.childLanes,o=r,a=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var u=e.eventTimes,l=e.expirationTimes;0<a;){var s=31-Wt(a),c=1<<s;o[s]=0,u[s]=-1,l[s]=-1,a&=~c}if(null!==Gu&&0==(24&r)&&Gu.has(e)&&Gu.delete(e),e===Ou&&(Cu=Ou=null,Pu=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(o=ku,ku|=32,Eu.current=null,Fr=Kt,dr(u=fr())){if("selectionStart"in u)l={start:u.selectionStart,end:u.selectionEnd};else e:if(l=(l=u.ownerDocument)&&l.defaultView||window,(c=l.getSelection&&l.getSelection())&&0!==c.rangeCount){l=c.anchorNode,a=c.anchorOffset,s=c.focusNode,c=c.focusOffset;try{l.nodeType,s.nodeType}catch(e){l=null;break e}var f=0,d=-1,p=-1,h=0,m=0,v=u,g=null;t:for(;;){for(var y;v!==l||0!==a&&3!==v.nodeType||(d=f+a),v!==s||0!==c&&3!==v.nodeType||(p=f+c),3===v.nodeType&&(f+=v.nodeValue.length),null!==(y=v.firstChild);)g=v,v=y;for(;;){if(v===u)break t;if(g===l&&++h===a&&(d=f),g===s&&++m===c&&(p=f),null!==(y=v.nextSibling))break;g=(v=g).parentNode}v=y}l=-1===d||-1===p?null:{start:d,end:p}}else l=null;l=l||{start:0,end:0}}else l=null;zr={focusedElem:u,selectionRange:l},Kt=!1,rl=null,ol=!1,Bu=r;do{try{Cl()}catch(e){if(null===Bu)throw Error(i(330));Nl(Bu,e),Bu=Bu.nextEffect}}while(null!==Bu);rl=null,Bu=r;do{try{for(u=e;null!==Bu;){var b=Bu.flags;if(16&b&&ge(Bu.stateNode,""),128&b){var w=Bu.alternate;if(null!==w){var S=w.ref;null!==S&&("function"==typeof S?S(null):S.current=null)}}switch(1038&b){case 2:gu(Bu),Bu.flags&=-3;break;case 6:gu(Bu),Bu.flags&=-3,bu(Bu.alternate,Bu);break;case 1024:Bu.flags&=-1025;break;case 1028:Bu.flags&=-1025,bu(Bu.alternate,Bu);break;case 4:bu(Bu.alternate,Bu);break;case 8:yu(u,l=Bu);var _=l.alternate;mu(l),null!==_&&mu(_)}Bu=Bu.nextEffect}}catch(e){if(null===Bu)throw Error(i(330));Nl(Bu,e),Bu=Bu.nextEffect}}while(null!==Bu);if(S=zr,w=fr(),b=S.focusedElem,u=S.selectionRange,w!==b&&b&&b.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(b.ownerDocument.documentElement,b)){null!==u&&dr(b)&&(w=u.start,void 0===(S=u.end)&&(S=w),"selectionStart"in b?(b.selectionStart=w,b.selectionEnd=Math.min(S,b.value.length)):(S=(w=b.ownerDocument||document)&&w.defaultView||window).getSelection&&(S=S.getSelection(),l=b.textContent.length,_=Math.min(u.start,l),u=void 0===u.end?_:Math.min(u.end,l),!S.extend&&_>u&&(l=u,u=_,_=l),l=cr(b,_),a=cr(b,u),l&&a&&(1!==S.rangeCount||S.anchorNode!==l.node||S.anchorOffset!==l.offset||S.focusNode!==a.node||S.focusOffset!==a.offset)&&((w=w.createRange()).setStart(l.node,l.offset),S.removeAllRanges(),_>u?(S.addRange(w),S.extend(a.node,a.offset)):(w.setEnd(a.node,a.offset),S.addRange(w))))),w=[];for(S=b;S=S.parentNode;)1===S.nodeType&&w.push({element:S,left:S.scrollLeft,top:S.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<w.length;b++)(S=w[b]).element.scrollLeft=S.left,S.element.scrollTop=S.top}Kt=!!Fr,zr=Fr=null,e.current=n,Bu=r;do{try{for(b=e;null!==Bu;){var x=Bu.flags;if(36&x&&du(b,Bu.alternate,Bu),128&x){w=void 0;var E=Bu.ref;if(null!==E){var k=Bu.stateNode;switch(Bu.tag){case 5:w=k;break;default:w=k}"function"==typeof E?E(w):E.current=w}}Bu=Bu.nextEffect}}catch(e){if(null===Bu)throw Error(i(330));Nl(Bu,e),Bu=Bu.nextEffect}}while(null!==Bu);Bu=null,Lo(),ku=o}else e.current=n;if(qu)qu=!1,Qu=e,Ku=t;else for(Bu=r;null!==Bu;)t=Bu.nextEffect,Bu.nextEffect=null,8&Bu.flags&&((x=Bu).sibling=null,x.stateNode=null),Bu=t;if(0===(r=e.pendingLanes)&&($u=null),1===r?e===Ju?Zu++:(Zu=0,Ju=e):Zu=0,n=n.stateNode,wo&&"function"==typeof wo.onCommitFiberRoot)try{wo.onCommitFiberRoot(bo,n,void 0,64==(64&n.current.flags))}catch(e){}if(sl(e,Ao()),Wu)throw Wu=!1,e=Hu,Hu=null,e;return 0!=(8&ku)||Ho(),null}function Cl(){for(;null!==Bu;){var e=Bu.alternate;ol||null===rl||(0!=(8&Bu.flags)?Je(Bu,rl)&&(ol=!0):13===Bu.tag&&Su(e,Bu)&&Je(Bu,rl)&&(ol=!0));var t=Bu.flags;0!=(256&t)&&fu(e,Bu),0==(512&t)||qu||(qu=!0,Wo(97,(function(){return Pl(),null}))),Bu=Bu.nextEffect}}function Pl(){if(90!==Ku){var e=97<Ku?97:Ku;return Ku=90,Bo(e,Tl)}return!1}function Il(e,t){Yu.push(t,e),qu||(qu=!0,Wo(97,(function(){return Pl(),null})))}function Ml(e,t){Xu.push(t,e),qu||(qu=!0,Wo(97,(function(){return Pl(),null})))}function Tl(){if(null===Qu)return!1;var e=Qu;if(Qu=null,0!=(48&ku))throw Error(i(331));var t=ku;ku|=32;var n=Xu;Xu=[];for(var r=0;r<n.length;r+=2){var o=n[r],a=n[r+1],u=o.destroy;if(o.destroy=void 0,"function"==typeof u)try{u()}catch(e){if(null===a)throw Error(i(330));Nl(a,e)}}for(n=Yu,Yu=[],r=0;r<n.length;r+=2){o=n[r],a=n[r+1];try{var l=o.create;o.destroy=l()}catch(e){if(null===a)throw Error(i(330));Nl(a,e)}}for(l=e.current.firstEffect;null!==l;)e=l.nextEffect,l.nextEffect=null,8&l.flags&&(l.sibling=null,l.stateNode=null),l=e;return ku=t,Ho(),!0}function Rl(e,t,n){ua(e,t=uu(0,t=ou(n,t),1)),t=al(),null!==(e=ll(e,1))&&(Bt(e,1,t),sl(e,t))}function Nl(e,t){if(3===e.tag)Rl(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Rl(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===$u||!$u.has(r))){var o=lu(n,e=ou(t,e),1);if(ua(n,o),o=al(),null!==(n=ll(n,1)))Bt(n,1,o),sl(n,o);else if("function"==typeof r.componentDidCatch&&(null===$u||!$u.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function Ll(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=al(),e.pingedLanes|=e.suspendedLanes&n,Ou===e&&(Pu&n)===n&&(4===Tu||3===Tu&&(62914560&Pu)===Pu&&500>Ao()-Du?gl(e,0):Fu|=n),sl(e,t)}function jl(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Uo()?1:2:(0===tl&&(tl=Nu),0===(t=Ut(62914560&~tl))&&(t=4194304))),n=al(),null!==(e=ll(e,t))&&(Bt(e,t,n),sl(e,n))}function Fl(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function zl(e,t,n,r){return new Fl(e,t,n,r)}function Dl(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Al(e,t){var n=e.alternate;return null===n?((n=zl(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ul(e,t,n,r,o,a){var u=2;if(r=e,"function"==typeof e)Dl(e)&&(u=1);else if("string"==typeof e)u=5;else e:switch(e){case E:return Vl(n.children,o,a,t);case F:u=8,o|=16;break;case k:u=8,o|=1;break;case O:return(e=zl(12,n,t,8|o)).elementType=O,e.type=O,e.lanes=a,e;case M:return(e=zl(13,n,t,o)).type=M,e.elementType=M,e.lanes=a,e;case T:return(e=zl(19,n,t,o)).elementType=T,e.lanes=a,e;case z:return Bl(n,o,a,t);case D:return(e=zl(24,n,t,o)).elementType=D,e.lanes=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case C:u=10;break e;case P:u=9;break e;case I:u=11;break e;case R:u=14;break e;case N:u=16,r=null;break e;case L:u=22;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=zl(u,n,t,o)).elementType=e,t.type=r,t.lanes=a,t}function Vl(e,t,n,r){return(e=zl(7,e,r,t)).lanes=n,e}function Bl(e,t,n,r){return(e=zl(23,e,r,t)).elementType=z,e.lanes=n,e}function Wl(e,t,n){return(e=zl(6,e,null,t)).lanes=n,e}function Hl(e,t,n){return(t=zl(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function $l(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Vt(0),this.expirationTimes=Vt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Vt(0),this.mutableSourceEagerHydrationData=null}function ql(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:x,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Ql(e,t,n,r){var o=t.current,a=al(),u=il(o);e:if(n){t:{if(Ye(n=n._reactInternals)!==n||1!==n.tag)throw Error(i(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(po(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);throw Error(i(171))}if(1===n.tag){var s=n.type;if(po(s)){n=vo(n,s,l);break e}}n=l}else n=uo;return null===t.context?t.context=n:t.pendingContext=n,(t=ia(a,u)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),ua(o,t),ul(o,u,a),u}function Kl(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Yl(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Xl(e,t){Yl(e,t),(e=e.alternate)&&Yl(e,t)}function Gl(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new $l(e,t,null!=n&&!0===n.hydrate),t=zl(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,oa(t),e[Yr]=n.current,Cr(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var o=(t=r[e])._getVersion;o=o(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,o]:n.mutableSourceEagerHydrationData.push(t,o)}this._internalRoot=n}function Zl(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Jl(e,t,n,r,o){var a=n._reactRootContainer;if(a){var i=a._internalRoot;if("function"==typeof o){var u=o;o=function(){var e=Kl(i);u.call(e)}}Ql(t,i,e,o)}else{if(a=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Gl(e,0,t?{hydrate:!0}:void 0)}(n,r),i=a._internalRoot,"function"==typeof o){var l=o;o=function(){var e=Kl(i);l.call(e)}}hl((function(){Ql(t,i,e,o)}))}return Kl(i)}function es(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Zl(t))throw Error(i(200));return ql(e,t,null,n)}Vu=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||so.current)Ri=!0;else{if(0==(n&r)){switch(Ri=!1,t.tag){case 3:Bi(t),Wa();break;case 5:Ta(t);break;case 1:po(t.type)&&go(t);break;case 4:Ia(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var o=t.type._context;io(Ko,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Qi(e,t,n):(io(Na,1&Na.current),null!==(t=eu(e,t,n))?t.sibling:null);io(Na,1&Na.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return Ji(e,t,n);t.flags|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),io(Na,Na.current),r)break;return null;case 23:case 24:return t.lanes=0,zi(e,t,n)}return eu(e,t,n)}Ri=0!=(16384&e.flags)}else Ri=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=fo(t,lo.current),ta(t,n),o=ni(null,t,r,e,o,n),t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,po(r)){var a=!0;go(t)}else a=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,oa(t);var u=r.getDerivedStateFromProps;"function"==typeof u&&da(t,r,u,e),o.updater=pa,t.stateNode=o,o._reactInternals=t,ga(t,r,e,n),t=Vi(null,t,r,!0,a,n)}else t.tag=0,Ni(null,t,o,n),t=t.child;return t;case 16:o=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=(a=o._init)(o._payload),t.type=o,a=t.tag=function(e){if("function"==typeof e)return Dl(e)?1:0;if(null!=e){if((e=e.$$typeof)===I)return 11;if(e===R)return 14}return 2}(o),e=Qo(o,e),a){case 0:t=Ai(null,t,o,e,n);break e;case 1:t=Ui(null,t,o,e,n);break e;case 11:t=Li(null,t,o,e,n);break e;case 14:t=ji(null,t,o,Qo(o.type,e),r,n);break e}throw Error(i(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,Ai(e,t,r,o=t.elementType===r?o:Qo(r,o),n);case 1:return r=t.type,o=t.pendingProps,Ui(e,t,r,o=t.elementType===r?o:Qo(r,o),n);case 3:if(Bi(t),r=t.updateQueue,null===e||null===r)throw Error(i(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,aa(e,t),sa(t,r,null,n),(r=t.memoizedState.element)===o)Wa(),t=eu(e,t,n);else{if((a=(o=t.stateNode).hydrate)&&(Fa=Wr(t.stateNode.containerInfo.firstChild),ja=t,a=za=!0),a){if(null!=(e=o.mutableSourceEagerHydrationData))for(o=0;o<e.length;o+=2)(a=e[o])._workInProgressVersionPrimary=e[o+1],Ha.push(a);for(n=xa(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Ni(e,t,r,n),Wa();t=t.child}return t;case 5:return Ta(t),null===e&&Ua(t),r=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,u=o.children,Ar(r,o)?u=null:null!==a&&Ar(r,a)&&(t.flags|=16),Di(e,t),Ni(e,t,u,n),t.child;case 6:return null===e&&Ua(t),null;case 13:return Qi(e,t,n);case 4:return Ia(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=_a(t,null,r,n):Ni(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Li(e,t,r,o=t.elementType===r?o:Qo(r,o),n);case 7:return Ni(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ni(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,u=t.memoizedProps,a=o.value;var l=t.type._context;if(io(Ko,l._currentValue),l._currentValue=a,null!==u)if(l=u.value,0===(a=ir(l,a)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,a):1073741823))){if(u.children===o.children&&!so.current){t=eu(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var s=l.dependencies;if(null!==s){u=l.child;for(var c=s.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&a)){1===l.tag&&((c=ia(-1,n&-n)).tag=2,ua(l,c)),l.lanes|=n,null!==(c=l.alternate)&&(c.lanes|=n),ea(l.return,n),s.lanes|=n;break}c=c.next}}else u=10===l.tag&&l.type===t.type?null:l.child;if(null!==u)u.return=l;else for(u=l;null!==u;){if(u===t){u=null;break}if(null!==(l=u.sibling)){l.return=u.return,u=l;break}u=u.return}l=u}Ni(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(a=t.pendingProps).children,ta(t,n),r=r(o=na(o,a.unstable_observedBits)),t.flags|=1,Ni(e,t,r,n),t.child;case 14:return a=Qo(o=t.type,t.pendingProps),ji(e,t,o,a=Qo(o.type,a),r,n);case 15:return Fi(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Qo(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,po(r)?(e=!0,go(t)):e=!1,ta(t,n),ma(t,r,o),ga(t,r,o,n),Vi(null,t,r,!0,e,n);case 19:return Ji(e,t,n);case 23:case 24:return zi(e,t,n)}throw Error(i(156,t.tag))},Gl.prototype.render=function(e){Ql(e,this._internalRoot,null,null)},Gl.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Ql(null,e,null,(function(){t[Yr]=null}))},et=function(e){13===e.tag&&(ul(e,4,al()),Xl(e,4))},tt=function(e){13===e.tag&&(ul(e,67108864,al()),Xl(e,67108864))},nt=function(e){if(13===e.tag){var t=al(),n=il(e);ul(e,n,t),Xl(e,n)}},rt=function(e,t){return t()},Oe=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=eo(r);if(!o)throw Error(i(90));G(r),ne(r,o)}}}break;case"textarea":se(e,n);break;case"select":null!=(t=n.value)&&ie(e,!!n.multiple,t,!1)}},Re=pl,Ne=function(e,t,n,r,o){var a=ku;ku|=4;try{return Bo(98,e.bind(null,t,n,r,o))}finally{0===(ku=a)&&(Uu(),Ho())}},Le=function(){0==(49&ku)&&(function(){if(null!==Gu){var e=Gu;Gu=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,sl(e,Ao())}))}Ho()}(),Pl())},je=function(e,t){var n=ku;ku|=2;try{return e(t)}finally{0===(ku=n)&&(Uu(),Ho())}};var ts={Events:[Zr,Jr,eo,Me,Te,Pl,{current:!1}]},ns={findFiberByHostInstance:Gr,bundleType:0,version:"17.0.1",rendererPackageName:"react-dom"},rs={bundleType:ns.bundleType,version:ns.version,rendererPackageName:ns.rendererPackageName,rendererConfig:ns.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:S.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ze(e))?null:e.stateNode},findFiberByHostInstance:ns.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var os=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!os.isDisabled&&os.supportsFiber)try{bo=os.inject(rs),wo=os}catch(e){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ts,t.createPortal=es,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw Error(i(268,Object.keys(e)))}return e=null===(e=Ze(t))?null:e.stateNode},t.flushSync=function(e,t){var n=ku;if(0!=(48&n))return e(t);ku|=1;try{if(e)return Bo(99,e.bind(null,t))}finally{ku=n,Ho()}},t.hydrate=function(e,t,n){if(!Zl(t))throw Error(i(200));return Jl(null,e,t,!0,n)},t.render=function(e,t,n){if(!Zl(t))throw Error(i(200));return Jl(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Zl(e))throw Error(i(40));return!!e._reactRootContainer&&(hl((function(){Jl(null,null,e,!1,(function(){e._reactRootContainer=null,e[Yr]=null}))})),!0)},t.unstable_batchedUpdates=pl,t.unstable_createPortal=function(e,t){return es(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Zl(n))throw Error(i(200));if(null==e||void 0===e._reactInternals)throw Error(i(38));return Jl(e,t,n,!1,r)},t.version="17.0.1"},function(e,t,n){"use strict";e.exports=n(37)},function(e,t,n){"use strict";
/** @license React v0.20.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,o,a,i;if("object"==typeof performance&&"function"==typeof performance.now){var u=performance;t.unstable_now=function(){return u.now()}}else{var l=Date,s=l.now();t.unstable_now=function(){return l.now()-s}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var c=null,f=null,d=function(){if(null!==c)try{var e=t.unstable_now();c(!0,e),c=null}catch(e){throw setTimeout(d,0),e}};r=function(e){null!==c?setTimeout(r,0,e):(c=e,setTimeout(d,0))},o=function(e,t){f=setTimeout(e,t)},a=function(){clearTimeout(f)},t.unstable_shouldYield=function(){return!1},i=t.unstable_forceFrameRate=function(){}}else{var p=window.setTimeout,h=window.clearTimeout;if("undefined"!=typeof console){var m=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof m&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var v=!1,g=null,y=-1,b=5,w=0;t.unstable_shouldYield=function(){return t.unstable_now()>=w},i=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):b=0<e?Math.floor(1e3/e):5};var S=new MessageChannel,_=S.port2;S.port1.onmessage=function(){if(null!==g){var e=t.unstable_now();w=e+b;try{g(!0,e)?_.postMessage(null):(v=!1,g=null)}catch(e){throw _.postMessage(null),e}}else v=!1},r=function(e){g=e,v||(v=!0,_.postMessage(null))},o=function(e,n){y=p((function(){e(t.unstable_now())}),n)},a=function(){h(y),y=-1}}function x(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<O(o,t)))break e;e[r]=t,e[n]=o,n=r}}function E(e){return void 0===(e=e[0])?null:e}function k(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var a=2*(r+1)-1,i=e[a],u=a+1,l=e[u];if(void 0!==i&&0>O(i,n))void 0!==l&&0>O(l,i)?(e[r]=l,e[u]=n,r=u):(e[r]=i,e[a]=n,r=a);else{if(!(void 0!==l&&0>O(l,n)))break e;e[r]=l,e[u]=n,r=u}}}return t}return null}function O(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var C=[],P=[],I=1,M=null,T=3,R=!1,N=!1,L=!1;function j(e){for(var t=E(P);null!==t;){if(null===t.callback)k(P);else{if(!(t.startTime<=e))break;k(P),t.sortIndex=t.expirationTime,x(C,t)}t=E(P)}}function F(e){if(L=!1,j(e),!N)if(null!==E(C))N=!0,r(z);else{var t=E(P);null!==t&&o(F,t.startTime-e)}}function z(e,n){N=!1,L&&(L=!1,a()),R=!0;var r=T;try{for(j(n),M=E(C);null!==M&&(!(M.expirationTime>n)||e&&!t.unstable_shouldYield());){var i=M.callback;if("function"==typeof i){M.callback=null,T=M.priorityLevel;var u=i(M.expirationTime<=n);n=t.unstable_now(),"function"==typeof u?M.callback=u:M===E(C)&&k(C),j(n)}else k(C);M=E(C)}if(null!==M)var l=!0;else{var s=E(P);null!==s&&o(F,s.startTime-n),l=!1}return l}finally{M=null,T=r,R=!1}}var D=i;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){N||R||(N=!0,r(z))},t.unstable_getCurrentPriorityLevel=function(){return T},t.unstable_getFirstCallbackNode=function(){return E(C)},t.unstable_next=function(e){switch(T){case 1:case 2:case 3:var t=3;break;default:t=T}var n=T;T=t;try{return e()}finally{T=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=D,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=T;T=e;try{return t()}finally{T=n}},t.unstable_scheduleCallback=function(e,n,i){var u=t.unstable_now();switch("object"==typeof i&&null!==i?i="number"==typeof(i=i.delay)&&0<i?u+i:u:i=u,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:I++,callback:n,priorityLevel:e,startTime:i,expirationTime:l=i+l,sortIndex:-1},i>u?(e.sortIndex=i,x(P,e),null===E(C)&&e===E(P)&&(L?a():L=!0,o(F,i-u))):(e.sortIndex=l,x(C,e),N||R||(N=!0,r(z))),e},t.unstable_wrapCallback=function(e){var t=T;return function(){var n=T;T=t;try{return e.apply(this,arguments)}finally{T=n}}}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){e.exports=n(41)()},function(e,t,n){"use strict";var r=n(42);function o(){}function a(){}a.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,a,i){if(i!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:a,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,a=r?Symbol.for("react.portal"):60106,i=r?Symbol.for("react.fragment"):60107,u=r?Symbol.for("react.strict_mode"):60108,l=r?Symbol.for("react.profiler"):60114,s=r?Symbol.for("react.provider"):60109,c=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,d=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,m=r?Symbol.for("react.suspense_list"):60120,v=r?Symbol.for("react.memo"):60115,g=r?Symbol.for("react.lazy"):60116,y=r?Symbol.for("react.block"):60121,b=r?Symbol.for("react.fundamental"):60117,w=r?Symbol.for("react.responder"):60118,S=r?Symbol.for("react.scope"):60119;function _(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case f:case d:case i:case l:case u:case h:return e;default:switch(e=e&&e.$$typeof){case c:case p:case g:case v:case s:return e;default:return t}}case a:return t}}}function x(e){return _(e)===d}t.AsyncMode=f,t.ConcurrentMode=d,t.ContextConsumer=c,t.ContextProvider=s,t.Element=o,t.ForwardRef=p,t.Fragment=i,t.Lazy=g,t.Memo=v,t.Portal=a,t.Profiler=l,t.StrictMode=u,t.Suspense=h,t.isAsyncMode=function(e){return x(e)||_(e)===f},t.isConcurrentMode=x,t.isContextConsumer=function(e){return _(e)===c},t.isContextProvider=function(e){return _(e)===s},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return _(e)===p},t.isFragment=function(e){return _(e)===i},t.isLazy=function(e){return _(e)===g},t.isMemo=function(e){return _(e)===v},t.isPortal=function(e){return _(e)===a},t.isProfiler=function(e){return _(e)===l},t.isStrictMode=function(e){return _(e)===u},t.isSuspense=function(e){return _(e)===h},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===d||e===l||e===u||e===h||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===v||e.$$typeof===s||e.$$typeof===c||e.$$typeof===p||e.$$typeof===b||e.$$typeof===w||e.$$typeof===S||e.$$typeof===y)},t.typeOf=_},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__rest||function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n};Object.defineProperty(t,"__esModule",{value:!0}),t.reducer=void 0;var a=n(16),i=r(r({},a.getExtensionState()),{counter:0});t.reducer=function(e,t){var n,a,u;switch(void 0===e&&(e=i),t.type){case"SET_VERTEX_FILE_PATH":return r(r({},e),{vertexFilePath:t.payload.path});case"SET_FRAGMENT_FILE_PATH":return r(r({},e),{fragmentFilePath:t.payload.path});case"SET_UNIFORM":var l=t.payload,s=l.name,c=o(l,["name"]);return r(r({},e),{uniformValues:r(r({},e.uniformValues),(n={},n[s]=c,n))});case"SET_ATTRIBUTE_BUFFER":var f=t.payload,d=f.name;c=o(f,["name"]);return r(r({},e),{attributeBufferValues:r(r({},e.attributeBufferValues),(a={},a[d]=c,a))});case"SET_TEXTURE":var p=t.payload,h=p.name;c=o(p,["name"]);return r(r({},e),{textureValues:r(r({},e.textureValues),(u={},u[h]=c,u))});case"SET_CAMERA_POSITION":return r({},e);case"UPADTE_COUNTER":return r(r({},e),{counter:t.payload.value});default:return e}}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useDocumentWatcher=t.Viewer=void 0;var a=o(n(0)),i=n(3),u=n(18),l=n(46),s=n(47),c=n(48),f=n(56),d=n(57),p=n(58),h=n(60),m=n(78),v=n(79),g=n(85),y=n(22);t.Viewer=i.connect((function(e){return{selectedVertexFileId:e.vertexFilePath,selectedFragmentFileId:e.fragmentFilePath}}),(function(e){return{updateCameraPosition:function(t){return e({type:"SET_CAMERA_POSITION",payload:{position:t}})}}}))((function(e){var n=e.selectedVertexFileId,o=e.selectedFragmentFileId,i=e.updateCameraPosition,b=a.default.useState(""),w=b[0],S=b[1],_=a.default.useState(""),x=_[0],E=_[1],k=a.default.useState(""),O=k[0],C=k[1],P=a.default.useState([]),I=P[0],M=P[1],T=a.default.useState([]),R=T[0],N=T[1],L=a.default.useState([]),j=L[0],F=L[1],z=a.default.useState({width:0,height:0}),D=z[0],A=z[1],U=a.default.useRef(null),V=a.default.useRef(null),B=a.default.useRef(null),W=a.default.useRef(null),H=a.default.useRef(null);return a.default.useEffect((function(){if(B.current=V.current.getContext("webgl"),!B.current)throw new Error("Unable to create webgl context");W.current=new f.IndexBufferInfo(B.current),l.observeElementBoundingRect(U.current,(function(e){V.current.width=e.width,V.current.height=e.height,A(r({},e))})),u.viewerEndpoint.getDocumentText(n).then(E),u.viewerEndpoint.getDocumentText(o).then(C),u.viewerEndpoint.showWebViewDevTools()}),[]),a.default.useEffect((function(){if(x&&O){var e=s.compileShadersFromSource(B.current,x,O);if(!Array.isArray(e)){S("");var t=e,n=s.getProgramUniforms(B.current,t),r=s.getProgramAttributeBuffers(B.current,t);N(n.dataUniforms),F(n.textureUniforms),M(r);var o=c.getFromCacheOrCreate(B.current,t,r),a=function(){s.renderProgram(B.current,t,{uniformInfos:[],textureInfos:[],attributeBufferInfos:o,indexBufferInfo:W.current},{drawMode:"arrays"}),H.current=requestAnimationFrame(a)};return a(),function(){console.log("deleting prog"),cancelAnimationFrame(H.current),B.current.deleteProgram(e)}}S(s.formatShaderCompileErrors(e))}}),[x,O]),y.usePerspectiveCamera(U.current,D,i),t.useDocumentWatcher(n,E),t.useDocumentWatcher(o,C),a.default.createElement("div",{className:"viewer-grid"},a.default.createElement("div",{className:"viewer-options"},a.default.createElement(h.ShadersSelectorSection,null),a.default.createElement(p.DrawOptionsSection,null),a.default.createElement(v.UniformSection,{uniformFields:R}),a.default.createElement(d.AttributeBufferSection,{attributeBufferFields:I}),a.default.createElement(m.TextureSection,{textureFields:j})),a.default.createElement("div",{ref:U,className:"viewer-content"},w&&a.default.createElement(g.ShadersCompileResultArea,{errors:w}),a.default.createElement("canvas",{className:"viewer-canvas",ref:V})))}));t.useDocumentWatcher=function(e,t){a.default.useEffect((function(){var n=u.viewerEndpoint.subscribeToDocumentSave(e,t);return function(){return n()}}),[e])}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.observeElementBoundingRect=void 0;t.observeElementBoundingRect=function(e,t){var n=new ResizeObserver((function(n){var r=n.find((function(t){return t.target===e}));if(r){var o=r.target.getBoundingClientRect();t({x:o.x,y:o.y,width:o.width,height:o.height})}}));return n.observe(e),function(){return n.disconnect()}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.formatShaderCompileErrors=t.renderProgram=t.getProgramAttributeBuffers=t.getProgramUniforms=t.createProgram=t.compileShadersFromSource=t.compileShader=void 0;var r=n(9),o=n(20);t.compileShader=function(e,t,n){var r=e.createShader(t);if(e.shaderSource(r,n),e.compileShader(r),e.getShaderParameter(r,e.COMPILE_STATUS))return r;var o=e.getShaderInfoLog(r);return e.deleteShader(r),{error:o}};t.compileShadersFromSource=function(e,n,a){var i=t.compileShader(e,e.VERTEX_SHADER,n),u=t.compileShader(e,e.FRAGMENT_SHADER,a),l=void 0;o.hasProperty(i,"error")&&(l=r.removeLast(i.error,1));var s=void 0;return o.hasProperty(u,"error")&&(s=r.removeLast(u.error,1)),l||s?[l,s]:t.createProgram(e,i,u)};t.createProgram=function(e,t,n){var r=e.createProgram();if(e.attachShader(r,t),e.attachShader(r,n),e.linkProgram(r),e.getProgramParameter(r,e.LINK_STATUS))return r;var o=e.getProgramInfoLog(r);throw e.deleteProgram(r),new Error("Creating program failed: "+o)};t.getProgramUniforms=function(e,t){for(var n=e.getProgramParameter(t,e.ACTIVE_UNIFORMS),r=[],o=[],a=0;a<n;++a){var i=e.getActiveUniform(t,a);35678===i.type?o.push({name:i.name,unit:o.length}):r.push({name:i.name,type:i.type})}return{dataUniforms:r,textureUniforms:o}};t.getProgramAttributeBuffers=function(e,t){for(var n=e.getProgramParameter(t,e.ACTIVE_ATTRIBUTES),r=[],o=0;o<n;++o){var a=e.getActiveAttrib(t,o);r.push({name:a.name,type:a.type})}return r};t.renderProgram=function(e,t,n,r){e.useProgram(t),e.viewport(0,0,e.canvas.width,e.canvas.height),e.clearColor(1,1,0,1),e.clearDepth(1),e.enable(e.DEPTH_TEST),e.depthFunc(e.LEQUAL),e.clear(e.COLOR_BUFFER_BIT|e.DEPTH_BUFFER_BIT),n.uniformInfos.forEach((function(e){return e.prepareForRender()})),n.textureInfos.forEach((function(e){return e.prepareForRender()})),n.attributeBufferInfos.forEach((function(e){return e.setAttributeBuffer()}));var o=e.TRIANGLES;if("arrays"===r.drawMode){var a=Math.min.apply(Math,n.attributeBufferInfos.map((function(e){return e.getCount()})));e.drawArrays(o,0,a)}else n.indexBufferInfo.setIndexBuffer(),e.drawElements(o,n.indexBufferInfo.getCount(),e.UNSIGNED_SHORT,0)};t.formatShaderCompileErrors=function(e){var t=e[0],n=e[1],r=[];return t&&r.push("VERTEX SHADER:",t),n&&r.push("FRAGMENT SHADER:",n),r.join("\r\n")}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.getFromCacheOrCreate=t.getByName=void 0;var o=n(49),a=n(50),i=function(e){return e.name+";"+e.type},u=new o.CompositeKeyMap(i);t.getByName=function(e,t){return u.get({name:e,type:t})};t.getFromCacheOrCreate=function(e,t,n){var o,l,s=n.map((function(n){var o=r({},n),i=u.get(o);if(i)return i.attributeBufferInfo.attachToProgram(t),{key:o,value:i};var l=new a.AttributeBufferInfo(e,t,n.name,n.type);return{key:o,value:{attributeBufferInfo:l,dispose:function(){return l.deleteBuffer()}}}}));return l=(o=s).map((function(e){return i(e.key)})),u.entriesStrKey().filter((function(e){return!l.includes(e[0])})).forEach((function(e){e[1].dispose(),u.deleteStrKey(e[0])})),o.forEach((function(e){u.has(e.key)||u.set(e.key,e.value)})),s.map((function(e){return e.value.attributeBufferInfo}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CompositeKeyMap=void 0;var r=function(){function e(e){this.keySelector=e,this.map=new Map}return e.prototype.get=function(e){return this.map.get(this.keySelector(e))},e.prototype.set=function(e,t){this.map.set(this.keySelector(e),t)},e.prototype.has=function(e){return this.map.has(this.keySelector(e))},e.prototype.entriesStrKey=function(){return Array.from(this.map.entries())},e.prototype.deleteStrKey=function(e){this.map.delete(e)},e.prototype.delete=function(e){this.map.delete(this.keySelector(e))},e.prototype.clear=function(){this.map.clear()},e}();t.CompositeKeyMap=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AttributeBufferInfo=t.AttributeBufferType=void 0;var r,o=n(20);!function(e){e[e.FLOAT_VEC2=35664]="FLOAT_VEC2",e[e.FLOAT_VEC3=35665]="FLOAT_VEC3",e[e.FLOAT_VEC4=35666]="FLOAT_VEC4"}(r=t.AttributeBufferType||(t.AttributeBufferType={}));var a=function(){function e(e,t,n,r){this.context=e,this.name=n,this.type=r,this.count=0,this.attachToProgram(t),this.buffer=e.createBuffer()}return e.prototype.attachToProgram=function(e){this.location=this.context.getAttribLocation(e,this.name)},e.prototype.setValue=function(e){this.count=e.length,this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffer);var t=[].concat.apply([],e);this.context.bufferData(this.context.ARRAY_BUFFER,new Float32Array(t),this.context.STATIC_DRAW)},e.prototype.setAttributeBuffer=function(){if(null!==this.buffer){this.context.enableVertexAttribArray(this.location),this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffer);var e=i(this.type),t=this.context.FLOAT;this.context.vertexAttribPointer(this.location,e,t,!1,0,0)}},e.prototype.getAttributeBufferType=function(){return this.type},e.prototype.getCount=function(){return this.count},e.prototype.deleteBuffer=function(){this.context.deleteBuffer(this.buffer),this.buffer=null},e}();t.AttributeBufferInfo=a;var i=function(e){switch(e){case r.FLOAT_VEC2:return 2;case r.FLOAT_VEC3:return 3;case r.FLOAT_VEC4:return 4;default:o.assertNever(e)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.mat4=t.isPowerOf2=void 0;t.isPowerOf2=function(e){return 0==(e&e-1)},function(e){e.create=function(){var e=new Float32Array(16);return e[0]=1,e[5]=1,e[10]=1,e[15]=1,e},e.perspective=function(e,t,n,r,o){var a,i=1/Math.tan(t/2);return e[0]=i/n,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=i,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,null!=o&&o!==1/0?(a=1/(r-o),e[10]=(o+r)*a,e[14]=2*o*r*a):(e[10]=-1,e[14]=-2*r),e},e.lookAt=function(e,t,n,r){var o,a,i,u,l,s,c,f,d,p,h=t[0],m=t[1],v=t[2],g=r[0],y=r[1],b=r[2],w=n[0],S=n[1],_=n[2];return Math.abs(h-w)<1e-6&&Math.abs(m-S)<1e-6&&Math.abs(v-_)<1e-6?function(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}(e):(c=h-w,f=m-S,d=v-_,o=y*(d*=p=1/Math.hypot(c,f,d))-b*(f*=p),a=b*(c*=p)-g*d,i=g*f-y*c,(p=Math.hypot(o,a,i))?(o*=p=1/p,a*=p,i*=p):(o=0,a=0,i=0),u=f*i-d*a,l=d*o-c*i,s=c*a-f*o,(p=Math.hypot(u,l,s))?(u*=p=1/p,l*=p,s*=p):(u=0,l=0,s=0),e[0]=o,e[1]=u,e[2]=c,e[3]=0,e[4]=a,e[5]=l,e[6]=f,e[7]=0,e[8]=i,e[9]=s,e[10]=d,e[11]=0,e[12]=-(o*h+a*m+i*v),e[13]=-(u*h+l*m+s*v),e[14]=-(c*h+f*m+d*v),e[15]=1,e)},e.multiply=function(e,t,n){var r=t[0],o=t[1],a=t[2],i=t[3],u=t[4],l=t[5],s=t[6],c=t[7],f=t[8],d=t[9],p=t[10],h=t[11],m=t[12],v=t[13],g=t[14],y=t[15],b=n[0],w=n[1],S=n[2],_=n[3];return e[0]=b*r+w*u+S*f+_*m,e[1]=b*o+w*l+S*d+_*v,e[2]=b*a+w*s+S*p+_*g,e[3]=b*i+w*c+S*h+_*y,b=n[4],w=n[5],S=n[6],_=n[7],e[4]=b*r+w*u+S*f+_*m,e[5]=b*o+w*l+S*d+_*v,e[6]=b*a+w*s+S*p+_*g,e[7]=b*i+w*c+S*h+_*y,b=n[8],w=n[9],S=n[10],_=n[11],e[8]=b*r+w*u+S*f+_*m,e[9]=b*o+w*l+S*d+_*v,e[10]=b*a+w*s+S*p+_*g,e[11]=b*i+w*c+S*h+_*y,b=n[12],w=n[13],S=n[14],_=n[15],e[12]=b*r+w*u+S*f+_*m,e[13]=b*o+w*l+S*d+_*v,e[14]=b*a+w*s+S*p+_*g,e[15]=b*i+w*c+S*h+_*y,e}}(t.mat4||(t.mat4={}))},,,,,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.IndexBufferInfo=void 0;var r=function(){function e(e){this.context=e,this.count=0,this.buffer=e.createBuffer()}return e.prototype.setValue=function(e){this.count=e.length,this.context.bindBuffer(this.context.ELEMENT_ARRAY_BUFFER,this.buffer),this.context.bufferData(this.context.ELEMENT_ARRAY_BUFFER,new Uint16Array(e),this.context.STATIC_DRAW)},e.prototype.setIndexBuffer=function(){this.context.bindBuffer(this.context.ELEMENT_ARRAY_BUFFER,this.buffer)},e.prototype.getCount=function(){return this.count},e.prototype.deleteBuffer=function(){this.context.deleteBuffer(this.buffer),this.buffer=null},e}();t.IndexBufferInfo=r},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.AttributeBufferSection=void 0;var o=r(n(0)),a=n(3),i=n(4),u=n(6),l=n(5);t.AttributeBufferSection=o.default.memo(a.connect((function(e){return{values:e.attributeBufferValues}}),(function(e){return{setValue:function(t,n,r){return e({type:"SET_ATTRIBUTE_BUFFER",payload:{name:t,type:n,value:r}})}}}))((function(e){var t=e.attributeBufferFields,n=e.values,r=e.setValue;return o.default.createElement("div",{className:"viewer-options-section"},o.default.createElement(l.SectionTitle,{text:i.translations.attributeBuffers}),t.map((function(e){var t;return o.default.createElement(u.SectionField,{text:e.name},o.default.createElement("input",{value:null===(t=n[e.name])||void 0===t?void 0:t.value,onChange:function(t){r(e.name,2,t.target.value)}}))})))})))},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.DrawOptionsSection=void 0;var o=r(n(0)),a=n(4),i=n(5);t.DrawOptionsSection=o.default.memo((function(){return o.default.createElement("div",{className:"viewer-options-section"},o.default.createElement(i.SectionTitle,{text:a.translations.drawOptions}))}))},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.MultiNumberInput=void 0;var o=r(n(0)),a=n(9);t.MultiNumberInput=o.default.memo((function(e){var t=e.rows,n=e.columns,r=e.value,i=void 0===r?[]:r,u=e.onChange,l=e.readonly,s=void 0!==l&&l;return o.default.createElement("div",{className:"edit-input-grid"},a.range(0,t).map((function(e){return o.default.createElement("div",{className:"edit-input-row"},a.range(0,n).map((function(t){var r=e*n+t;return o.default.createElement("input",{className:"edit-input",type:"number",disabled:s,value:i[r],onChange:function(e){return u(i.map((function(t,n){return n===r?Number(e.target.value):t})))}})})))})))}))},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ShadersSelectorSection=void 0;var o=r(n(0)),a=n(3),i=n(18),u=n(23),l=n(4),s=n(24),c=n(6),f=n(5);t.ShadersSelectorSection=o.default.memo(a.connect((function(e){return{selectedVertexFileId:e.vertexFilePath,selectedFragmentFileId:e.fragmentFilePath}}),(function(e){return{setSelectedVertexFileId:function(t){return e({type:"SET_VERTEX_FILE_PATH",payload:{path:t}})},setSelectedFragmentFileId:function(t){return e({type:"SET_FRAGMENT_FILE_PATH",payload:{path:t}})}}}))((function(e){var t=e.selectedVertexFileId,n=e.selectedFragmentFileId,r=e.setSelectedVertexFileId,a=e.setSelectedFragmentFileId,d=o.default.useState([]),p=d[0],h=d[1],m=o.default.useCallback((function(){i.viewerEndpoint.getWorkspaceFilesOfTypes(u.shaderExtensions).then((function(e){h(e.map((function(e){return{id:e.filePath,display:e.fileName}})))}))}),[]);return o.default.useEffect((function(){return m()}),[]),o.default.createElement("div",{className:"viewer-options-section"},o.default.createElement(f.SectionTitle,{text:l.translations.shaders},o.default.createElement("button",{onClick:m},"Sync")),o.default.createElement(c.SectionField,{text:l.translations.vertexShader},o.default.createElement(s.Dropdown,{selectedItemId:t,onChange:r,options:p})),o.default.createElement(c.SectionField,{text:l.translations.fragmentShader},o.default.createElement(s.Dropdown,{selectedItemId:n,onChange:a,options:p})))})))},function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||t.hasOwnProperty(n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),o(n(62),t),o(n(7),t),o(n(74),t)},function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||t.hasOwnProperty(n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),o(n(63),t),o(n(72),t)},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.VirtualizedList=void 0;var o=r(n(0)),a=n(31),i=n(7),u=o.default.memo((function(e){var t=e.index,n=e.style,r=e.data.itemRenderer;return o.default.createElement("div",{style:n},r(t))}));t.VirtualizedList=function(e){var t=e.itemCount,n=e.itemHeight,r=e.maxHeight,l=e.itemRenderer,s=e.width,c=void 0===s?"100%":s,f=e.className,d=Math.min(t*n,r),p=o.default.useMemo((function(){return{itemRenderer:l}}),[l]),h=o.default.useRef(null);return i.useScrollListToIndex(h,e.highlightedIndex),o.default.createElement(a.FixedSizeList,{className:f,ref:h,height:d,itemCount:t,itemSize:n,width:c,itemData:p},u)}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useDropdownState=void 0;var o=r(n(0)),a=n(26),i=n(10),u=n(25),l={selectedIndexes:[],highlightedIndex:null,isOpen:!1},s=function(e,t,n){return a.reducer(e,t,n)};t.useDropdownState=function(e,t,n,r,a){void 0===a&&(a=s);var c=o.default.useCallback((function(t,n){return a(t,e,n)}),[e,a]),f=n?i.overrideDefinedPropsOnly(l,n):l;return u.useUnionState(f,t,c,r)}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useScrollListToIndex=void 0;var o=r(n(0)),a=n(27);t.useScrollListToIndex=function(e,t){o.default.useEffect((function(){if(null!==t&&e.current){var n=e.current;(a.hasProperty(n,"_listRef")?n._listRef:n).scrollToItem(t,"smart")}}),[t])}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useDropdownCloseWhenClickedOutside=void 0;var o=r(n(0)),a=n(7);t.useDropdownCloseWhenClickedOutside=function(e,t){var n=o.default.useCallback((function(){return t(["CloseList"])}),[t]);a.useClickedOutsideHandler(e,n)}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useDropdownCloseWhenFocusOut=void 0;var o=r(n(0)),a=n(28);t.useDropdownCloseWhenFocusOut=function(e,t){var n=o.default.useCallback((function(){return t(["CloseList"])}),[t]);a.useFocusOutHandler(e,n)}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useFocusOnStateChange=void 0;var o=r(n(0)),a=n(29);t.useFocusOnStateChange=function(e,t,n){var r=o.default.useRef(!0),i=a.usePreviousValue(t);o.default.useEffect((function(){t===i||t!==n||r.current||null!==e.current&&e.current.focus(),r.current=!1}),[t])}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useClickedOutsideHandler=void 0;var o=r(n(0));t.useClickedOutsideHandler=function(e,t){o.default.useEffect((function(){function n(n){var r;(null===(r=e.current)||void 0===r?void 0:r.contains(n.target))||t()}return document.addEventListener("mousedown",n),function(){document.removeEventListener("mousedown",n)}}),[t])}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useChunkLoader=void 0;var o=r(n(0));t.useChunkLoader=function(e,t){var n=o.default.useMemo((function(){return Array(e).fill({value:null,isLoaded:!1})}),[e]),r=o.default.useCallback((function(e){return n[e].isLoaded}),[n]),a=o.default.useCallback((function(e,r){return t(e,r).then((function(t){for(var o=e,a=0;o<=r;o++,a++)n[o]={value:t[a],isLoaded:!0}}))}),[n]);return{items:n,isItemLoaded:r,loadMoreItems:a}}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useDropdownListKeyboardNavigator=void 0;var o=r(n(0)),a=n(30);t.useDropdownListKeyboardNavigator=function(e){return o.default.useMemo((function(){return a.createListKeyboardNavigator(e)}),[e])}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.VirtualizedLazyLoadingList=void 0;var o=r(n(0)),a=n(31),i=n(7),u=r(n(73)),l=o.default.memo((function(e){var t=e.index,n=e.style,r=e.data,a=r.itemRenderer,i=r.isItemLoaded;return o.default.createElement("div",{style:n},a(t,i(t)))}));t.VirtualizedLazyLoadingList=function(e){var t=e.itemCount,n=e.itemHeight,r=e.maxHeight,s=e.itemRenderer,c=e.width,f=void 0===c?"100%":c,d=e.isItemLoaded,p=e.loadMoreItems,h=e.highlightedIndex,m=e.className,v=Math.min(t*n,r),g=o.default.useMemo((function(){return{itemRenderer:s,isItemLoaded:d}}),[s,d]),y=o.default.useRef(null);return i.useScrollListToIndex(y,h),o.default.createElement(u.default,{ref:y,isItemLoaded:d,itemCount:t,loadMoreItems:p},(function(e){var r=e.onItemsRendered,i=e.ref;return o.default.createElement(a.FixedSizeList,{className:m,ref:i,height:v,itemCount:t,itemSize:n,onItemsRendered:r,width:f,itemData:g},l)}))}},function(e,t,n){"use strict";n.r(t);var r=n(0);var o=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t},u=function(e){function t(){var e,n,r;o(this,t);for(var a=arguments.length,u=Array(a),l=0;l<a;l++)u[l]=arguments[l];return n=r=i(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(u))),r._lastRenderedStartIndex=-1,r._lastRenderedStopIndex=-1,r._memoizedUnloadedRanges=[],r._onItemsRendered=function(e){var t=e.visibleStartIndex,n=e.visibleStopIndex;r._lastRenderedStartIndex=t,r._lastRenderedStopIndex=n,r._ensureRowsLoaded(t,n)},r._setRef=function(e){r._listRef=e},i(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"resetloadMoreItemsCache",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];this._memoizedUnloadedRanges=[],e&&this._ensureRowsLoaded(this._lastRenderedStartIndex,this._lastRenderedStopIndex)}},{key:"componentDidMount",value:function(){0}},{key:"render",value:function(){return(0,this.props.children)({onItemsRendered:this._onItemsRendered,ref:this._setRef})}},{key:"_ensureRowsLoaded",value:function(e,t){var n=this.props,r=n.isItemLoaded,o=n.itemCount,a=n.minimumBatchSize,i=void 0===a?10:a,u=n.threshold,l=void 0===u?15:u,s=function(e){for(var t=e.isItemLoaded,n=e.itemCount,r=e.minimumBatchSize,o=e.startIndex,a=e.stopIndex,i=[],u=null,l=null,s=o;s<=a;s++){t(s)?null!==l&&(i.push(u,l),u=l=null):(l=s,null===u&&(u=s))}if(null!==l){for(var c=Math.min(Math.max(l,u+r-1),n-1),f=l+1;f<=c&&!t(f);f++)l=f;i.push(u,l)}if(i.length)for(;i[1]-i[0]+1<r&&i[0]>0;){var d=i[0]-1;if(t(d))break;i[0]=d}return i}({isItemLoaded:r,itemCount:o,minimumBatchSize:i,startIndex:Math.max(0,e-l),stopIndex:Math.min(o-1,t+l)});(this._memoizedUnloadedRanges.length!==s.length||this._memoizedUnloadedRanges.some((function(e,t){return s[t]!==e})))&&(this._memoizedUnloadedRanges=s,this._loadUnloadedRanges(s))}},{key:"_loadUnloadedRanges",value:function(e){for(var t=this,n=this.props.loadMoreItems||this.props.loadMoreRows,r=function(r){var o=e[r],a=e[r+1],i=n(o,a);null!=i&&i.then((function(){if(function(e){var t=e.lastRenderedStartIndex,n=e.lastRenderedStopIndex,r=e.startIndex,o=e.stopIndex;return!(r>n||o<t)}({lastRenderedStartIndex:t._lastRenderedStartIndex,lastRenderedStopIndex:t._lastRenderedStopIndex,startIndex:o,stopIndex:a})){if(null==t._listRef)return;"function"==typeof t._listRef.resetAfterIndex?t._listRef.resetAfterIndex(o,!0):("function"==typeof t._listRef._getItemStyleCache&&t._listRef._getItemStyleCache(-1),t._listRef.forceUpdate())}}))},o=0;o<e.length;o+=2)r(o)}}]),t}(r.PureComponent);t.default=u},function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||t.hasOwnProperty(n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),o(n(75),t),o(n(76),t),o(n(30),t),o(n(26),t),o(n(77),t)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,n){"use strict";var r=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var a=arguments[t],i=0,u=a.length;i<u;i++,o++)r[o]=a[i];return r},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.TextureSection=void 0;var a=o(n(0)),i=n(3),u=n(23),l=n(4),s=n(24),c=n(6),f=n(5),d=r([{id:u.customOptionId,display:l.translations.custom}],u.extensionTextures.map((function(e){return{id:e,display:e}})));t.TextureSection=a.default.memo(i.connect((function(e){return{values:e.textureValues}}),(function(e){return{setValue:function(t,n,r){return e({type:"SET_TEXTURE",payload:{name:t,optionId:n,optionValue:r}})}}}))((function(e){var t=e.textureFields,n=e.values,r=e.setValue;return a.default.createElement("div",{className:"viewer-options-section"},a.default.createElement(f.SectionTitle,{text:l.translations.textures}),t.map((function(e){var t,o;return a.default.createElement(c.SectionField,{text:e.name},a.default.createElement(p,{selectedOptionId:null===(t=n[e.name])||void 0===t?void 0:t.optionId,selectedOptionValue:null===(o=n[e.name])||void 0===o?void 0:o.optionValue,onChange:function(t,n){return r(e.name,t,n)}}))})))})));var p=function(e){var t=e.selectedOptionId,n=e.selectedOptionValue,r=e.onChange;return a.default.createElement("div",null,a.default.createElement(s.Dropdown,{selectedItemId:t,onChange:function(e){return r(e,t===u.customOptionId?n:"")},options:d}),t===u.customOptionId&&a.default.createElement("input",{value:n,onChange:function(e){return r(t,e.target.value)}}))}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.UniformSection=void 0;var o=r(n(0)),a=n(3),i=n(4),u=n(80),l=n(86),s=n(6),c=n(5);t.UniformSection=o.default.memo(a.connect((function(e){return{values:e.uniformValues}}),(function(e){return{setValue:function(t,n,r){return e({type:"SET_UNIFORM",payload:{name:t,type:n,value:r}})}}}))((function(e){var t=e.uniformFields,n=e.values,r=e.setValue;return o.default.createElement("div",{className:"viewer-options-section"},o.default.createElement(c.SectionTitle,{text:i.translations.uniforms}),t.map((function(e){var t;return o.default.createElement(s.SectionField,{text:e.name},f(e.type,null===(t=n[e.name])||void 0===t?void 0:t.value,(function(t){return r(e.name,e.type,t)})))})))})));var f=function(e,t,n){switch(e){case u.UniformType.FLOAT_VEC2:return o.default.createElement(l.Vector2NumberInput,{value:t,onChange:n});case u.UniformType.FLOAT_VEC3:return o.default.createElement(l.Vector3NumberInput,{value:t,onChange:n});case u.UniformType.FLOAT_VEC4:return o.default.createElement(l.Vector4NumberInput,{value:t,onChange:n});case u.UniformType.FLOAT_MAT4:return o.default.createElement(l.Matrix4x4NumberInput,{value:t,onChange:n});default:return o.default.createElement("div",null,"not supporter")}}},function(e,t,n){"use strict";var r=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var a=arguments[t],i=0,u=a.length;i<u;i++,o++)r[o]=a[i];return r};Object.defineProperty(t,"__esModule",{value:!0}),t.UniformInfo=t.UniformType=void 0;var o,a=n(20);!function(e){e[e.FLOAT_VEC2=35664]="FLOAT_VEC2",e[e.FLOAT_VEC3=35665]="FLOAT_VEC3",e[e.FLOAT_VEC4=35666]="FLOAT_VEC4",e[e.FLOAT_MAT4=35676]="FLOAT_MAT4"}(o=t.UniformType||(t.UniformType={}));var i=function(){function e(e,t,n,r){this.context=e,this.name=n,this.type=r,this.attachToProgram(t)}return e.prototype.attachToProgram=function(e){var t=this.context.getUniformLocation(e,this.name);this.setter=u(this.type,this.context,t)},e.prototype.setValue=function(e){this.value=e},e.prototype.prepareForRender=function(){null!==this.value&&this.setter(this.value)},e.prototype.getUniformType=function(){return this.type},e.prototype.getUniformName=function(){return this.name},e.prototype.dispose=function(){},e}();t.UniformInfo=i;var u=function(e,t,n){switch(e){case o.FLOAT_VEC2:return function(e){return t.uniform2f.apply(t,r([n],e))};case o.FLOAT_VEC3:return function(e){return t.uniform3f.apply(t,r([n],e))};case o.FLOAT_VEC4:return function(e){return t.uniform4f.apply(t,r([n],e))};case o.FLOAT_MAT4:return function(e){return t.uniformMatrix4fv(n,!1,e)};default:a.assertNever(e)}}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Matrix4x4NumberInput=void 0;var a=o(n(0)),i=n(9),u=n(59),l=i.repeat(16,0);t.Matrix4x4NumberInput=function(e){var t;return a.default.createElement(u.MultiNumberInput,r({},e,{rows:4,columns:4,value:null!==(t=e.value)&&void 0!==t?t:l}))}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Vector4NumberInput=void 0;var a=o(n(0)),i=n(59),u=[0,0,0,0];t.Vector4NumberInput=function(e){var t;return a.default.createElement(i.MultiNumberInput,r({},e,{rows:1,columns:4,value:null!==(t=e.value)&&void 0!==t?t:u}))}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Vector2NumberInput=void 0;var a=o(n(0)),i=n(59),u=[0,0];t.Vector2NumberInput=function(e){var t;return a.default.createElement(i.MultiNumberInput,r({},e,{rows:1,columns:2,value:null!==(t=e.value)&&void 0!==t?t:u}))}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Vector3NumberInput=void 0;var a=o(n(0)),i=n(59),u=[0,0,0];t.Vector3NumberInput=function(e){var t;return a.default.createElement(i.MultiNumberInput,r({},e,{rows:1,columns:3,value:null!==(t=e.value)&&void 0!==t?t:u}))}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ShadersCompileResultArea=void 0;var o=r(n(0));t.ShadersCompileResultArea=function(e){return o.default.createElement("div",{className:"shader-compile-errors-area"},e.errors)}},function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),o(n(81),t),o(n(83),t),o(n(84),t),o(n(82),t)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvQ29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9iYXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9TdWJzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9Qcm92aWRlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0LmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvY29ubmVjdEFkdmFuY2VkLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL3NoYWxsb3dFcXVhbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L3dyYXBNYXBUb1Byb3BzLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWFwRGlzcGF0Y2hUb1Byb3BzLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWFwU3RhdGVUb1Byb3BzLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWVyZ2VQcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L3NlbGVjdG9yRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L2Nvbm5lY3QuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlUmVkdXhDb250ZXh0LmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2hvb2tzL3VzZVN0b3JlLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2hvb2tzL3VzZURpc3BhdGNoLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2hvb2tzL3VzZVNlbGVjdG9yLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvc3JjL3RyYW5zbGF0aW9ucy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL3NyYy9jb21wb25lbnRzL1NlY3Rpb25UaXRsZS50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvY29tcG9uZW50cy9TZWN0aW9uRmllbGQudHN4Iiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvbm9kZV9tb2R1bGVzL0BtYXRldXN6bWlnYXMvcmVhY3QtZHJvcGRvd24vbGliL0hvb2tzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2FycmF5LnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvbm9kZV9tb2R1bGVzL0BtYXRldXN6bWlnYXMvcmVhY3QtZHJvcGRvd24vbGliL0NvbW1vbi9oZWxwZXJzLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvbm9kZV9tb2R1bGVzL3JlZHV4L2VzL3JlZHV4LmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbW1vbi9leHRlbnNpb25TdGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2NvbW11bmljYXRpb24vdnNjb2RlQXBpLnRzIiwid2VicGFjazovLy8uL3NyYy9jb21tb24vY29tbXVuaWNhdGlvbi92aWV3ZXJFbmRwb2ludC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL3V1aWQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvdXRpbHMvdHlwZUd1YXJkcy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL3NyYy91dGlscy9jYW1lcmFNYW5pcHVsYXRvci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL3NyYy9jb21wb25lbnRzL2hvb2tzL3VzZVBlcnNwZWN0aXZlQ2FtZXJhLnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvc3JjL2NvbnN0YW50cy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL3NyYy9jb21wb25lbnRzL0Ryb3Bkb3duLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9AbWF0ZXVzem1pZ2FzL3JlYWN0LWRyb3Bkb3duL2xpYi9Ib29rcy91c2VVbmlvblN0YXRlLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvbm9kZV9tb2R1bGVzL0BtYXRldXN6bWlnYXMvcmVhY3QtZHJvcGRvd24vbGliL0NvbW1vbi9yZWR1Y2VyLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvbm9kZV9tb2R1bGVzL0BtYXRldXN6bWlnYXMvcmVhY3QtZHJvcGRvd24vbGliL0NvbW1vbi90eXBlTmFycm93aW5nLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvbm9kZV9tb2R1bGVzL0BtYXRldXN6bWlnYXMvcmVhY3QtZHJvcGRvd24vbGliL0hvb2tzL3VzZUZvY3VzT3V0SGFuZGxlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9AbWF0ZXVzem1pZ2FzL3JlYWN0LWRyb3Bkb3duL2xpYi9Ib29rcy91c2VQcmV2aW91c1ZhbHVlLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvbm9kZV9tb2R1bGVzL0BtYXRldXN6bWlnYXMvcmVhY3QtZHJvcGRvd24vbGliL0NvbW1vbi9rZXlib2FyZE5hdmlnYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9tZW1vaXplLW9uZS9kaXN0L21lbW9pemUtb25lLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9yZWFjdC13aW5kb3cvZGlzdC9pbmRleC5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvcG9ueWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvaW5kZXgudHN4Iiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vaGFybW9ueS1tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvc3RvcmUvcmVkdWNlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL3NyYy9jb21wb25lbnRzL1ZpZXdlci50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvdXRpbHMvaHRtbC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL3NyYy91dGlscy93ZWJnbC9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL3NyYy91dGlscy93ZWJnbC9hdHRyaWJ1dGVCdWZmZXJDb21wb25lbnQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvdXRpbHMvY29tcG9zaXRlS2V5TWFwLnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvc3JjL3V0aWxzL3dlYmdsL2F0dHJpYnV0ZUJ1ZmZlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL3NyYy91dGlscy9tYXRoLnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvc3JjL3V0aWxzL3dlYmdsL2luZGV4QnVmZmVyLnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvc3JjL2NvbXBvbmVudHMvQXR0cmlidXRlQnVmZmVyU2VjdGlvbi50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvY29tcG9uZW50cy9EcmF3T3B0aW9uc1NlY3Rpb24udHN4Iiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvc3JjL2NvbXBvbmVudHMvY29tbW9uL011bHRpTnVtYmVySW5wdXQudHN4Iiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvc3JjL2NvbXBvbmVudHMvU2hhZGVyc1NlbGVjdG9yU2VjdGlvbi50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9ub2RlX21vZHVsZXMvQG1hdGV1c3ptaWdhcy9yZWFjdC1kcm9wZG93bi9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9ub2RlX21vZHVsZXMvQG1hdGV1c3ptaWdhcy9yZWFjdC1kcm9wZG93bi9saWIvQ29tcG9uZW50cy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9AbWF0ZXVzem1pZ2FzL3JlYWN0LWRyb3Bkb3duL2xpYi9Db21wb25lbnRzL1ZpcnR1YWxpemVkTGlzdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9AbWF0ZXVzem1pZ2FzL3JlYWN0LWRyb3Bkb3duL2xpYi9Ib29rcy91c2VEcm9wZG93blN0YXRlLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvbm9kZV9tb2R1bGVzL0BtYXRldXN6bWlnYXMvcmVhY3QtZHJvcGRvd24vbGliL0hvb2tzL3VzZVNjcm9sbExpc3RUb0luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvbm9kZV9tb2R1bGVzL0BtYXRldXN6bWlnYXMvcmVhY3QtZHJvcGRvd24vbGliL0hvb2tzL3VzZURyb3Bkb3duQ2xvc2VXaGVuQ2xpY2tlZE91dHNpZGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9ub2RlX21vZHVsZXMvQG1hdGV1c3ptaWdhcy9yZWFjdC1kcm9wZG93bi9saWIvSG9va3MvdXNlRHJvcGRvd25DbG9zZVdoZW5Gb2N1c091dC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9AbWF0ZXVzem1pZ2FzL3JlYWN0LWRyb3Bkb3duL2xpYi9Ib29rcy91c2VGb2N1c09uU3RhdGVDaGFuZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9ub2RlX21vZHVsZXMvQG1hdGV1c3ptaWdhcy9yZWFjdC1kcm9wZG93bi9saWIvSG9va3MvdXNlQ2xpY2tlZE91dHNpZGVIYW5kbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvbm9kZV9tb2R1bGVzL0BtYXRldXN6bWlnYXMvcmVhY3QtZHJvcGRvd24vbGliL0hvb2tzL3VzZUNodW5rTG9hZGVyLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvbm9kZV9tb2R1bGVzL0BtYXRldXN6bWlnYXMvcmVhY3QtZHJvcGRvd24vbGliL0hvb2tzL3VzZURyb3Bkb3duTGlzdEtleWJvYXJkTmF2aWdhdG9yLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvbm9kZV9tb2R1bGVzL0BtYXRldXN6bWlnYXMvcmVhY3QtZHJvcGRvd24vbGliL0NvbXBvbmVudHMvVmlydHVhbGl6ZWRMYXp5TG9hZGluZ0xpc3QuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9ub2RlX21vZHVsZXMvcmVhY3Qtd2luZG93LWluZmluaXRlLWxvYWRlci9kaXN0L2luZGV4LmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9AbWF0ZXVzem1pZ2FzL3JlYWN0LWRyb3Bkb3duL2xpYi9Db21tb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9ub2RlX21vZHVsZXMvQG1hdGV1c3ptaWdhcy9yZWFjdC1kcm9wZG93bi9saWIvQ29tbW9uL2FjdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9ub2RlX21vZHVsZXMvQG1hdGV1c3ptaWdhcy9yZWFjdC1kcm9wZG93bi9saWIvQ29tbW9uL2Rpc3BhdGNoLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvbm9kZV9tb2R1bGVzL0BtYXRldXN6bWlnYXMvcmVhY3QtZHJvcGRvd24vbGliL0NvbW1vbi9zdGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL3NyYy9jb21wb25lbnRzL1RleHR1cmVzU2VjdGlvbi50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvY29tcG9uZW50cy9Vbmlmb3Jtc1NlY3Rpb24udHN4Iiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvc3JjL3V0aWxzL3dlYmdsL3VuaWZvcm0udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvY29tcG9uZW50cy9jb21tb24vTWF0cml4NHg0TnVtYmVySW5wdXQudHN4Iiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvc3JjL2NvbXBvbmVudHMvY29tbW9uL1ZlY3RvcjROdW1iZXJJbnB1dC50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvY29tcG9uZW50cy9jb21tb24vVmVjdG9yMk51bWJlcklucHV0LnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL3NyYy9jb21wb25lbnRzL2NvbW1vbi9WZWN0b3IzTnVtYmVySW5wdXQudHN4Iiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvc3JjL2NvbXBvbmVudHMvU2hhZGVyc0NvbXBpbGVSZXN1bHRBcmVhLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL3NyYy9jb21wb25lbnRzL2NvbW1vbi9pbmRleC50cyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIl9leHRlbmRzIiwiYXNzaWduIiwidGFyZ2V0IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwiYXBwbHkiLCJ0aGlzIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJleGNsdWRlZCIsInNvdXJjZUtleXMiLCJrZXlzIiwiaW5kZXhPZiIsIlJlYWN0UmVkdXhDb250ZXh0IiwiY3JlYXRlQ29udGV4dCIsImNhbGxiYWNrIiwibnVsbExpc3RlbmVycyIsIm5vdGlmeSIsImNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbiIsImJhdGNoIiwiZmlyc3QiLCJsYXN0IiwiY2xlYXIiLCJsaXN0ZW5lciIsIm5leHQiLCJsaXN0ZW5lcnMiLCJwdXNoIiwic3Vic2NyaWJlIiwiaXNTdWJzY3JpYmVkIiwicHJldiIsIlN1YnNjcmlwdGlvbiIsInN0b3JlIiwicGFyZW50U3ViIiwidW5zdWJzY3JpYmUiLCJoYW5kbGVDaGFuZ2VXcmFwcGVyIiwiX3Byb3RvIiwiYWRkTmVzdGVkU3ViIiwidHJ5U3Vic2NyaWJlIiwibm90aWZ5TmVzdGVkU3VicyIsIm9uU3RhdGVDaGFuZ2UiLCJCb29sZWFuIiwidHJ5VW5zdWJzY3JpYmUiLCJfcmVmIiwiY29udGV4dCIsImNoaWxkcmVuIiwiY29udGV4dFZhbHVlIiwic3Vic2NyaXB0aW9uIiwicHJldmlvdXNTdGF0ZSIsImdldFN0YXRlIiwiQ29udGV4dCIsImNyZWF0ZUVsZW1lbnQiLCJQcm92aWRlciIsInVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QiLCJ3aW5kb3ciLCJkb2N1bWVudCIsIkVNUFRZX0FSUkFZIiwiTk9fU1VCU0NSSVBUSU9OX0FSUkFZIiwic3RvcmVTdGF0ZVVwZGF0ZXNSZWR1Y2VyIiwic3RhdGUiLCJhY3Rpb24iLCJ1cGRhdGVDb3VudCIsInBheWxvYWQiLCJ1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0V2l0aEFyZ3MiLCJlZmZlY3RGdW5jIiwiZWZmZWN0QXJncyIsImRlcGVuZGVuY2llcyIsImNhcHR1cmVXcmFwcGVyUHJvcHMiLCJsYXN0V3JhcHBlclByb3BzIiwibGFzdENoaWxkUHJvcHMiLCJyZW5kZXJJc1NjaGVkdWxlZCIsIndyYXBwZXJQcm9wcyIsImFjdHVhbENoaWxkUHJvcHMiLCJjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlIiwiY3VycmVudCIsInN1YnNjcmliZVVwZGF0ZXMiLCJzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMiLCJjaGlsZFByb3BzU2VsZWN0b3IiLCJmb3JjZUNvbXBvbmVudFVwZGF0ZURpc3BhdGNoIiwiZGlkVW5zdWJzY3JpYmUiLCJsYXN0VGhyb3duRXJyb3IiLCJjaGVja0ZvclVwZGF0ZXMiLCJuZXdDaGlsZFByb3BzIiwiZXJyb3IiLCJsYXRlc3RTdG9yZVN0YXRlIiwiZSIsInR5cGUiLCJpbml0U3RhdGVVcGRhdGVzIiwiY29ubmVjdEFkdmFuY2VkIiwic2VsZWN0b3JGYWN0b3J5IiwiX3JlZjIiLCJfcmVmMiRnZXREaXNwbGF5TmFtZSIsImdldERpc3BsYXlOYW1lIiwiX3JlZjIkbWV0aG9kTmFtZSIsIm1ldGhvZE5hbWUiLCJfcmVmMiRyZW5kZXJDb3VudFByb3AiLCJyZW5kZXJDb3VudFByb3AiLCJ1bmRlZmluZWQiLCJfcmVmMiRzaG91bGRIYW5kbGVTdGEiLCJfcmVmMiRzdG9yZUtleSIsInN0b3JlS2V5IiwiX3JlZjIkZm9yd2FyZFJlZiIsIndpdGhSZWYiLCJmb3J3YXJkUmVmIiwiX3JlZjIkY29udGV4dCIsImNvbm5lY3RPcHRpb25zIiwiV3JhcHBlZENvbXBvbmVudCIsIndyYXBwZWRDb21wb25lbnROYW1lIiwiZGlzcGxheU5hbWUiLCJzZWxlY3RvckZhY3RvcnlPcHRpb25zIiwicHVyZSIsInVzZVB1cmVPbmx5TWVtbyIsIkNvbm5lY3RGdW5jdGlvbiIsInByb3BzIiwiX3VzZU1lbW8iLCJyZWFjdFJlZHV4Rm9yd2FyZGVkUmVmIiwicHJvcHNDb250ZXh0IiwiQ29udGV4dFRvVXNlIiwiQ29uc3VtZXIiLCJkaWRTdG9yZUNvbWVGcm9tUHJvcHMiLCJkaXNwYXRjaCIsImNyZWF0ZUNoaWxkU2VsZWN0b3IiLCJfdXNlTWVtbzIiLCJvdmVycmlkZGVuQ29udGV4dFZhbHVlIiwiX3VzZVJlZHVjZXIiLCJwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0IiwicmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50IiwicmVmIiwiQ29ubmVjdCIsIm1lbW8iLCJmb3J3YXJkZWQiLCJpcyIsIngiLCJ5Iiwic2hhbGxvd0VxdWFsIiwib2JqQSIsIm9iakIiLCJrZXlzQSIsImtleXNCIiwid3JhcE1hcFRvUHJvcHNDb25zdGFudCIsImdldENvbnN0YW50Iiwib3B0aW9ucyIsImNvbnN0YW50IiwiY29uc3RhbnRTZWxlY3RvciIsImRlcGVuZHNPbk93blByb3BzIiwiZ2V0RGVwZW5kc09uT3duUHJvcHMiLCJtYXBUb1Byb3BzIiwid3JhcE1hcFRvUHJvcHNGdW5jIiwicHJveHkiLCJzdGF0ZU9yRGlzcGF0Y2giLCJvd25Qcm9wcyIsIm1hcERpc3BhdGNoVG9Qcm9wcyIsIm1hcFN0YXRlVG9Qcm9wcyIsImRlZmF1bHRNZXJnZVByb3BzIiwic3RhdGVQcm9wcyIsImRpc3BhdGNoUHJvcHMiLCJtZXJnZVByb3BzIiwibWVyZ2VkUHJvcHMiLCJhcmVNZXJnZWRQcm9wc0VxdWFsIiwiaGFzUnVuT25jZSIsIm5leHRNZXJnZWRQcm9wcyIsIndyYXBNZXJnZVByb3BzRnVuYyIsImltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsImFyZVN0YXRlc0VxdWFsIiwiYXJlT3duUHJvcHNFcXVhbCIsImFyZVN0YXRlUHJvcHNFcXVhbCIsImhhc1J1bkF0TGVhc3RPbmNlIiwiaGFuZGxlU3Vic2VxdWVudENhbGxzIiwibmV4dFN0YXRlIiwibmV4dE93blByb3BzIiwibmV4dFN0YXRlUHJvcHMiLCJzdGF0ZVByb3BzQ2hhbmdlZCIsInByb3BzQ2hhbmdlZCIsInN0YXRlQ2hhbmdlZCIsImZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJpbml0TWFwU3RhdGVUb1Byb3BzIiwiaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyIsImluaXRNZXJnZVByb3BzIiwibWF0Y2giLCJhcmciLCJmYWN0b3JpZXMiLCJyZXN1bHQiLCJFcnJvciIsInN0cmljdEVxdWFsIiwiYSIsImIiLCJjcmVhdGVDb25uZWN0IiwiX3RlbXAiLCJfcmVmJGNvbm5lY3RIT0MiLCJjb25uZWN0SE9DIiwiX3JlZiRtYXBTdGF0ZVRvUHJvcHNGIiwibWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzIiwiX3JlZiRtYXBEaXNwYXRjaFRvUHJvIiwibWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIiwiX3JlZiRtZXJnZVByb3BzRmFjdG9yIiwibWVyZ2VQcm9wc0ZhY3RvcmllcyIsIl9yZWYkc2VsZWN0b3JGYWN0b3J5IiwiX3JlZjMiLCJfcmVmMyRwdXJlIiwiX3JlZjMkYXJlU3RhdGVzRXF1YWwiLCJfcmVmMyRhcmVPd25Qcm9wc0VxdWEiLCJfcmVmMyRhcmVTdGF0ZVByb3BzRXEiLCJfcmVmMyRhcmVNZXJnZWRQcm9wc0UiLCJleHRyYU9wdGlvbnMiLCJjcmVhdGVTdG9yZUhvb2siLCJ1c2VSZWR1eENvbnRleHQiLCJjcmVhdGVEaXNwYXRjaEhvb2siLCJ1c2VTdG9yZSIsInVzZURpc3BhdGNoIiwicmVmRXF1YWxpdHkiLCJjcmVhdGVTZWxlY3Rvckhvb2siLCJzZWxlY3RvciIsImVxdWFsaXR5Rm4iLCJfdXNlUmVkdXhDb250ZXh0Iiwic2VsZWN0ZWRTdGF0ZSIsImNvbnRleHRTdWIiLCJmb3JjZVJlbmRlciIsImxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IiLCJsYXRlc3RTZWxlY3RvciIsImxhdGVzdFNlbGVjdGVkU3RhdGUiLCJzdG9yZVN0YXRlIiwiZXJyIiwibWVzc2FnZSIsInN0YWNrIiwibmV3U2VsZWN0ZWRTdGF0ZSIsInVzZVNlbGVjdG9yV2l0aFN0b3JlQW5kU3Vic2NyaXB0aW9uIiwibmV3QmF0Y2giLCJ0cmFuc2xhdGlvbnMiLCJzaGFkZXJzIiwidmVydGV4U2hhZGVyIiwiZnJhZ21lbnRTaGFkZXIiLCJkcmF3T3B0aW9ucyIsInRleHR1cmVzIiwidW5pZm9ybXMiLCJhdHRyaWJ1dGVCdWZmZXJzIiwiY3VzdG9tIiwiU2VjdGlvblRpdGxlIiwiY2xhc3NOYW1lIiwidGV4dCIsIlNlY3Rpb25GaWVsZCIsIl9fY3JlYXRlQmluZGluZyIsImsiLCJrMiIsIl9fZXhwb3J0U3RhciIsImNoZWNrRENFIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiY29uc29sZSIsInJlbW92ZSIsImFycmF5IiwiaXRlbSIsImluZGV4Iiwic3BsaWNlIiwicmVtb3ZlTGFzdCIsImNvdW50Iiwic3Vic3RyaW5nIiwicmFuZ2UiLCJzdGFydCIsImVuZCIsIkFycmF5IiwiZmlsbCIsIm1hcCIsIl8iLCJyZXBlYXQiLCJfX2Fzc2lnbiIsIl9fc3ByZWFkQXJyYXlzIiwiaWwiLCJqIiwiamwiLCJjbGFtcCIsImFyZVNoYWxsb3dFcXVhbCIsIm92ZXJyaWRkZW5Qcm9wcyIsIm9taXRLZXlzIiwib3ZlcnJpZGVEZWZpbmVkUHJvcHNPbmx5IiwibGVmdCIsInJpZ2h0IiwiX2kiLCJfYSIsInZhbCIsIm9iaiIsImZpbHRlciIsImluY2x1ZGVzIiwicmVkdWNlIiwib2JqZWN0S2V5Iiwia2V5c0xlZnQiLCJrZXlzUmlnaHQiLCJrZXlzTGVmdF8xIiwibWluIiwibWF4IiwicmFuZG9tU3RyaW5nIiwiTWF0aCIsInJhbmRvbSIsInRvU3RyaW5nIiwic3BsaXQiLCJqb2luIiwiQWN0aW9uVHlwZXMiLCJJTklUIiwiUkVQTEFDRSIsIlBST0JFX1VOS05PV05fQUNUSU9OIiwiaXNQbGFpbk9iamVjdCIsInByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJjcmVhdGVTdG9yZSIsInJlZHVjZXIiLCJwcmVsb2FkZWRTdGF0ZSIsImVuaGFuY2VyIiwiY3VycmVudFJlZHVjZXIiLCJjdXJyZW50U3RhdGUiLCJjdXJyZW50TGlzdGVuZXJzIiwibmV4dExpc3RlbmVycyIsImlzRGlzcGF0Y2hpbmciLCJlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzIiwic2xpY2UiLCJyZXBsYWNlUmVkdWNlciIsIm5leHRSZWR1Y2VyIiwib2JzZXJ2YWJsZSIsIm91dGVyU3Vic2NyaWJlIiwib2JzZXJ2ZXIiLCJUeXBlRXJyb3IiLCJvYnNlcnZlU3RhdGUiLCJnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZSIsImFjdGlvblR5cGUiLCJTdHJpbmciLCJjb21iaW5lUmVkdWNlcnMiLCJyZWR1Y2VycyIsInJlZHVjZXJLZXlzIiwiZmluYWxSZWR1Y2VycyIsInNoYXBlQXNzZXJ0aW9uRXJyb3IiLCJmaW5hbFJlZHVjZXJLZXlzIiwiZm9yRWFjaCIsImFzc2VydFJlZHVjZXJTaGFwZSIsImhhc0NoYW5nZWQiLCJfa2V5IiwicHJldmlvdXNTdGF0ZUZvcktleSIsIm5leHRTdGF0ZUZvcktleSIsImVycm9yTWVzc2FnZSIsImJpbmRBY3Rpb25DcmVhdG9yIiwiYWN0aW9uQ3JlYXRvciIsImJpbmRBY3Rpb25DcmVhdG9ycyIsImFjdGlvbkNyZWF0b3JzIiwiYm91bmRBY3Rpb25DcmVhdG9ycyIsIl9kZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwib3duS2V5cyIsImVudW1lcmFibGVPbmx5IiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic3ltIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX29iamVjdFNwcmVhZDIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsImNvbXBvc2UiLCJfbGVuIiwiZnVuY3MiLCJhcHBseU1pZGRsZXdhcmUiLCJtaWRkbGV3YXJlcyIsIl9kaXNwYXRjaCIsIm1pZGRsZXdhcmVBUEkiLCJjaGFpbiIsIm1pZGRsZXdhcmUiLCJyb290Iiwic2VsZiIsImdsb2JhbCIsInJlYWN0SXMiLCJSRUFDVF9TVEFUSUNTIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJjb250ZXh0VHlwZSIsImNvbnRleHRUeXBlcyIsImRlZmF1bHRQcm9wcyIsImdldERlZmF1bHRQcm9wcyIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIm1peGlucyIsInByb3BUeXBlcyIsIktOT1dOX1NUQVRJQ1MiLCJjYWxsZXIiLCJjYWxsZWUiLCJhcml0eSIsIk1FTU9fU1RBVElDUyIsImNvbXBhcmUiLCJUWVBFX1NUQVRJQ1MiLCJnZXRTdGF0aWNzIiwiY29tcG9uZW50IiwiaXNNZW1vIiwiRm9yd2FyZFJlZiIsInJlbmRlciIsIk1lbW8iLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwib2JqZWN0UHJvdG90eXBlIiwiaG9pc3ROb25SZWFjdFN0YXRpY3MiLCJ0YXJnZXRDb21wb25lbnQiLCJzb3VyY2VDb21wb25lbnQiLCJibGFja2xpc3QiLCJpbmhlcml0ZWRDb21wb25lbnQiLCJjb25jYXQiLCJ0YXJnZXRTdGF0aWNzIiwic291cmNlU3RhdGljcyIsImRlc2NyaXB0b3IiLCJwcm9wSXNFbnVtZXJhYmxlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJ0b09iamVjdCIsInRlc3QxIiwidGVzdDIiLCJmcm9tQ2hhckNvZGUiLCJ0ZXN0MyIsImxldHRlciIsInNob3VsZFVzZU5hdGl2ZSIsImZyb20iLCJzeW1ib2xzIiwidG8iLCJkZWZhdWx0U3RhdGUiLCJ2ZXJ0ZXhGaWxlUGF0aCIsImZyYWdtZW50RmlsZVBhdGgiLCJ1bmlmb3JtVmFsdWVzIiwiYXR0cmlidXRlQnVmZmVyVmFsdWVzIiwidGV4dHVyZVZhbHVlcyIsImNhbWVyYVBvc2l0aW9uIiwiZ2V0RXh0ZW5zaW9uU3RhdGUiLCJ2c2NvZGVBcGkiLCJzZXRFeHRlbnNpb25TdGF0ZSIsIm5ld1N0YXRlIiwic2V0U3RhdGUiLCJhY3F1aXJlVnNDb2RlQXBpIiwiZXZlbnRMaXN0ZW5lcnMiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJkYXRhIiwiZ2V0V29ya3NwYWNlRmlsZXNPZlR5cGVzIiwiZXh0ZW5zaW9ucyIsIm1lc3NhZ2VJZCIsInV1aWR2NCIsInBvc3RNZXNzYWdlIiwiaWQiLCJQcm9taXNlIiwicmVzb2x2ZSIsImZpbGVzIiwicmVtb3ZlTGlzdGVuZXIiLCJnZXREb2N1bWVudFRleHQiLCJmaWxlTmFtZSIsImdldEV4dGVuc2lvbkZpbGVVcmkiLCJ1cmkiLCJzdWJzY3JpYmVUb0RvY3VtZW50U2F2ZSIsImZpbGVQYXRoIiwic2hvd1dlYlZpZXdEZXZUb29scyIsInZpZXdlckVuZHBvaW50IiwiVmlld2VyRW5kcG9pbnQiLCJyZXBsYWNlIiwiaGFzUHJvcGVydHkiLCJwcm9wIiwiYXNzZXJ0TmV2ZXIiLCJKU09OIiwic3RyaW5naWZ5IiwiY2FtZXJhUG9zaXRpb25Ub1ZlY3RvcjMiLCJyYWRpdXMiLCJzaW4iLCJsYXRpdHVkZSIsImNvcyIsInoiLCJsb25naXR1ZGUiLCJjbGFtcFJhZGl1cyIsImVsZW1lbnQiLCJwb3NpdGlvblByb3ZpZGVyIiwib25Qb3NpdGlvbkNoYW5nZSIsInBvaW50ZXJQb3NpdGlvbiIsIk1hcCIsImlzTW92aW5nIiwiZGlzcGF0Y2hBY3Rpb24iLCJuZXdWaWV3cG9ydCIsInBvc2l0aW9uIiwiZGVsdGFMYXRpdHVkZSIsIlBJIiwiZGVsdGFMb25naXR1ZGUiLCJvbk1vdXNlRG93biIsImJ1dHRvbiIsIm9mZnNldFgiLCJvZmZzZXRZIiwib25Nb3VzZU1vdmUiLCJvbk1vdXNlVXAiLCJvbk1vdXNlTGVhdmUiLCJvbldoZWVsIiwiZGVsdGFZIiwicmVnaXN0ZXJFdmVudCIsImRpc3Bvc2UiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaGFuZGxlciIsInNldCIsIkNhbWVyYVBvc2l0aW9uTWFuaXB1bGF0b3IiLCJ1c2VQZXJzcGVjdGl2ZUNhbWVyYSIsInNpemUiLCJvbkNoYW5nZSIsInVzZUVmZmVjdCIsIm5ld1Bvc2l0aW9uIiwiZmllbGRPZlZpZXciLCJhc3BlY3QiLCJwcm9qZWN0aW9uTWF0cml4IiwibWF0NCIsInBlcnNwZWN0aXZlIiwibW9kZWxWaWV3TWF0cml4IiwidmVjIiwibG9va0F0IiwicmVzIiwibXVsdGlwbHkiLCJzaGFkZXJFeHRlbnNpb25zIiwiaW1hZ2VFeHRlbnNpb25zIiwiZXh0ZW5zaW9uVGV4dHVyZXMiLCJjdXN0b21PcHRpb25JZCIsImRlZmF1bHRUZXh0dXJlVXJsIiwiRHJvcGRvd24iLCJzZWxlY3RlZEl0ZW1JZCIsInVzZURyb3Bkb3duU3RhdGUiLCJzZWxlY3RlZEluZGV4ZXMiLCJjaGFuZ2VzIiwiZm91bmRJbmRleCIsImZpbmRJbmRleCIsInNlbGVjdGVkSW5kZXgiLCJjb250YWluZXJSZWYiLCJ1c2VSZWYiLCJsaXN0UmVmIiwidXNlRHJvcGRvd25DbG9zZVdoZW5DbGlja2VkT3V0c2lkZSIsInVzZUZvY3VzT25TdGF0ZUNoYW5nZSIsImlzT3BlbiIsImxpc3RLZXlib2FyZEhhbmRsZXIiLCJ1c2VEcm9wZG93bkxpc3RLZXlib2FyZE5hdmlnYXRvciIsIkRyb3Bkb3duTWFpbiIsInNob3dDbGVhckJ1dHRvbiIsIml0ZW1SZW5kZXJlciIsImRpc3BsYXkiLCJvbktleURvd24iLCJ0YWJJbmRleCIsIlZpcnR1YWxpemVkTGlzdCIsIml0ZW1Db3VudCIsIml0ZW1IZWlnaHQiLCJoaWdobGlnaHRlZEluZGV4IiwibWF4SGVpZ2h0IiwiRHJvcGRvd25JdGVtIiwiaXNTZWxlY3RlZCIsImlzSGlnaGxpZ2h0ZWQiLCJkcm9wZG93blNlbGVjdFJlZiIsImhhbmRsZVNlbGVjdCIsInVzZUNhbGxiYWNrIiwiaGFuZGxlQ2xlYXIiLCJvbkNsaWNrIiwic3R5bGUiLCJfX2ltcG9ydERlZmF1bHQiLCJtb2QiLCJ1c2VVbmlvblN0YXRlIiwicmVhY3RfMSIsImhlbHBlcnNfMSIsImluaXRpYWxJbnRlcm5hbFN0YXRlIiwiZXh0ZXJuYWxTdGF0ZSIsImRlZmF1bHQiLCJ1c2VTdGF0ZSIsImludGVybmFsU3RhdGUiLCJzZXRJbnRlcm5hbFN0YXRlIiwiaW50ZXJuYWxTdGF0ZVJlZiIsImFjdGlvbnMiLCJvbGRTdGF0ZSIsIm5ld0ludGVybmFsU3RhdGUiLCJ2YWx1ZXMiLCJ0eXBlTmFycm93aW5nXzEiLCJtb3ZlSW5kZXgiLCJvZmZzZXQiLCJ1c2VGb2N1c091dEhhbmRsZXIiLCJlbGVtZW50UmVmIiwiZm9jdXNPdXRIYW5kbGVyIiwiY29udGFpbnMiLCJyZWxhdGVkVGFyZ2V0IiwidXNlUHJldmlvdXNWYWx1ZSIsInZhbHVlUmVmIiwiY3JlYXRlTGlzdEtleWJvYXJkTmF2aWdhdG9yIiwicHJldmVudERlZmF1bHQiLCJfc2V0UHJvdG90eXBlT2YiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIl9pbmhlcml0c0xvb3NlIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY29uc3RydWN0b3IiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiUmVmZXJlbmNlRXJyb3IiLCJhcmVJbnB1dHNFcXVhbCIsIm5ld0lucHV0cyIsImxhc3RJbnB1dHMiLCJyZXN1bHRGbiIsImlzRXF1YWwiLCJsYXN0VGhpcyIsImxhc3RSZXN1bHQiLCJsYXN0QXJncyIsImNhbGxlZE9uY2UiLCJuZXdBcmdzIiwibm93IiwicGVyZm9ybWFuY2UiLCJEYXRlIiwiY2FuY2VsVGltZW91dCIsInRpbWVvdXRJRCIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwicmVxdWVzdFRpbWVvdXQiLCJkZWxheSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInRpY2siLCJjYWNoZWRSVExSZXN1bHQiLCJnZXRSVExPZmZzZXRUeXBlIiwicmVjYWxjdWxhdGUiLCJvdXRlckRpdiIsIm91dGVyU3R5bGUiLCJ3aWR0aCIsImhlaWdodCIsIm92ZXJmbG93IiwiZGlyZWN0aW9uIiwiaW5uZXJEaXYiLCJpbm5lclN0eWxlIiwiYXBwZW5kQ2hpbGQiLCJib2R5Iiwic2Nyb2xsTGVmdCIsInJlbW92ZUNoaWxkIiwiZGVmYXVsdEl0ZW1LZXkiLCJjb2x1bW5JbmRleCIsInJvd0luZGV4IiwiY3JlYXRlR3JpZENvbXBvbmVudCIsIl9jbGFzcyIsImdldENvbHVtbk9mZnNldCIsImdldENvbHVtblN0YXJ0SW5kZXhGb3JPZmZzZXQiLCJnZXRDb2x1bW5TdG9wSW5kZXhGb3JTdGFydEluZGV4IiwiZ2V0Q29sdW1uV2lkdGgiLCJnZXRFc3RpbWF0ZWRUb3RhbEhlaWdodCIsImdldEVzdGltYXRlZFRvdGFsV2lkdGgiLCJnZXRPZmZzZXRGb3JDb2x1bW5BbmRBbGlnbm1lbnQiLCJnZXRPZmZzZXRGb3JSb3dBbmRBbGlnbm1lbnQiLCJnZXRSb3dIZWlnaHQiLCJnZXRSb3dPZmZzZXQiLCJnZXRSb3dTdGFydEluZGV4Rm9yT2Zmc2V0IiwiZ2V0Um93U3RvcEluZGV4Rm9yU3RhcnRJbmRleCIsImluaXRJbnN0YW5jZVByb3BzIiwic2hvdWxkUmVzZXRTdHlsZUNhY2hlT25JdGVtU2l6ZUNoYW5nZSIsInZhbGlkYXRlUHJvcHMiLCJfUHVyZUNvbXBvbmVudCIsIkdyaWQiLCJfdGhpcyIsIl9pbnN0YW5jZVByb3BzIiwiX3Jlc2V0SXNTY3JvbGxpbmdUaW1lb3V0SWQiLCJfb3V0ZXJSZWYiLCJpbnN0YW5jZSIsImlzU2Nyb2xsaW5nIiwiaG9yaXpvbnRhbFNjcm9sbERpcmVjdGlvbiIsImluaXRpYWxTY3JvbGxMZWZ0Iiwic2Nyb2xsVG9wIiwiaW5pdGlhbFNjcm9sbFRvcCIsInNjcm9sbFVwZGF0ZVdhc1JlcXVlc3RlZCIsInZlcnRpY2FsU2Nyb2xsRGlyZWN0aW9uIiwiX2NhbGxPbkl0ZW1zUmVuZGVyZWQiLCJvdmVyc2NhbkNvbHVtblN0YXJ0SW5kZXgiLCJvdmVyc2NhbkNvbHVtblN0b3BJbmRleCIsIm92ZXJzY2FuUm93U3RhcnRJbmRleCIsIm92ZXJzY2FuUm93U3RvcEluZGV4IiwidmlzaWJsZUNvbHVtblN0YXJ0SW5kZXgiLCJ2aXNpYmxlQ29sdW1uU3RvcEluZGV4IiwidmlzaWJsZVJvd1N0YXJ0SW5kZXgiLCJ2aXNpYmxlUm93U3RvcEluZGV4Iiwib25JdGVtc1JlbmRlcmVkIiwiX2NhbGxPblNjcm9sbCIsIm9uU2Nyb2xsIiwiX2dldEl0ZW1TdHlsZSIsIl90aGlzJHByb3BzIiwiY29sdW1uV2lkdGgiLCJyb3dIZWlnaHQiLCJpdGVtU3R5bGVDYWNoZSIsIl9nZXRJdGVtU3R5bGVDYWNoZSIsIl9vZmZzZXQiLCJpc1J0bCIsInRvcCIsIl9fIiwiX19fIiwiX29uU2Nyb2xsIiwiX2V2ZW50JGN1cnJlbnRUYXJnZXQiLCJjdXJyZW50VGFyZ2V0IiwiY2xpZW50SGVpZ2h0IiwiY2xpZW50V2lkdGgiLCJzY3JvbGxIZWlnaHQiLCJzY3JvbGxXaWR0aCIsInByZXZTdGF0ZSIsImNhbGN1bGF0ZWRTY3JvbGxMZWZ0IiwiY2FsY3VsYXRlZFNjcm9sbFRvcCIsIl9yZXNldElzU2Nyb2xsaW5nRGVib3VuY2VkIiwiX291dGVyUmVmU2V0dGVyIiwib3V0ZXJSZWYiLCJfcmVzZXRJc1Njcm9sbGluZyIsIm5leHRQcm9wcyIsInZhbGlkYXRlU2hhcmVkUHJvcHMiLCJzY3JvbGxUbyIsInNjcm9sbFRvSXRlbSIsIl9yZWY0IiwiX3JlZjQkYWxpZ24iLCJhbGlnbiIsIl90aGlzJHByb3BzMiIsImNvbHVtbkNvdW50Iiwicm93Q291bnQiLCJfdGhpcyRzdGF0ZSIsInNjcm9sbGJhclNpemUiLCJkaXYiLCJvZmZzZXRXaWR0aCIsImdldFNjcm9sbGJhclNpemUiLCJlc3RpbWF0ZWRUb3RhbEhlaWdodCIsImhvcml6b250YWxTY3JvbGxiYXJTaXplIiwidmVydGljYWxTY3JvbGxiYXJTaXplIiwiY29tcG9uZW50RGlkTW91bnQiLCJfdGhpcyRwcm9wczMiLCJfY2FsbFByb3BzQ2FsbGJhY2tzIiwiY29tcG9uZW50RGlkVXBkYXRlIiwiX3RoaXMkc3RhdGUyIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJfdGhpcyRwcm9wczQiLCJpbm5lclJlZiIsImlubmVyRWxlbWVudFR5cGUiLCJpbm5lclRhZ05hbWUiLCJpdGVtRGF0YSIsIl90aGlzJHByb3BzNCRpdGVtS2V5IiwiaXRlbUtleSIsIm91dGVyRWxlbWVudFR5cGUiLCJvdXRlclRhZ05hbWUiLCJ1c2VJc1Njcm9sbGluZyIsIl90aGlzJF9nZXRIb3Jpem9udGFsUiIsIl9nZXRIb3Jpem9udGFsUmFuZ2VUb1JlbmRlciIsImNvbHVtblN0YXJ0SW5kZXgiLCJjb2x1bW5TdG9wSW5kZXgiLCJfdGhpcyRfZ2V0VmVydGljYWxSYW4iLCJfZ2V0VmVydGljYWxSYW5nZVRvUmVuZGVyIiwicm93U3RhcnRJbmRleCIsInJvd1N0b3BJbmRleCIsIml0ZW1zIiwiX3Jvd0luZGV4IiwiX2NvbHVtbkluZGV4IiwiZXN0aW1hdGVkVG90YWxXaWR0aCIsIldlYmtpdE92ZXJmbG93U2Nyb2xsaW5nIiwid2lsbENoYW5nZSIsInBvaW50ZXJFdmVudHMiLCJfdGhpcyRwcm9wczUiLCJfdGhpcyRfZ2V0SG9yaXpvbnRhbFIyIiwiX292ZXJzY2FuQ29sdW1uU3RhcnRJbmRleCIsIl9vdmVyc2NhbkNvbHVtblN0b3BJbmRleCIsIl92aXNpYmxlQ29sdW1uU3RhcnRJbmRleCIsIl92aXNpYmxlQ29sdW1uU3RvcEluZGV4IiwiX3RoaXMkX2dldFZlcnRpY2FsUmFuMiIsIl9vdmVyc2NhblJvd1N0YXJ0SW5kZXgiLCJfb3ZlcnNjYW5Sb3dTdG9wSW5kZXgiLCJfdmlzaWJsZVJvd1N0YXJ0SW5kZXgiLCJfdmlzaWJsZVJvd1N0b3BJbmRleCIsIl90aGlzJHN0YXRlMyIsIl9ob3Jpem9udGFsU2Nyb2xsRGlyZWN0aW9uIiwiX3Njcm9sbExlZnQiLCJfc2Nyb2xsVG9wIiwiX3Njcm9sbFVwZGF0ZVdhc1JlcXVlc3RlZCIsIl92ZXJ0aWNhbFNjcm9sbERpcmVjdGlvbiIsIl90aGlzJHByb3BzNiIsIm92ZXJzY2FuQ29sdW1uQ291bnQiLCJvdmVyc2NhbkNvbHVtbnNDb3VudCIsIm92ZXJzY2FuQ291bnQiLCJfdGhpcyRzdGF0ZTQiLCJvdmVyc2NhbkNvdW50UmVzb2x2ZWQiLCJzdGFydEluZGV4Iiwic3RvcEluZGV4Iiwib3ZlcnNjYW5CYWNrd2FyZCIsIm92ZXJzY2FuRm9yd2FyZCIsIl90aGlzJHByb3BzNyIsIm92ZXJzY2FuUm93Q291bnQiLCJvdmVyc2NhblJvd3NDb3VudCIsIl90aGlzJHN0YXRlNSIsIl9yZWY1IiwiX3JlZjYiLCJyb3dNZXRhZGF0YU1hcCIsImVzdGltYXRlZFJvd0hlaWdodCIsImxhc3RNZWFzdXJlZFJvd0luZGV4IiwidG90YWxTaXplT2ZNZWFzdXJlZFJvd3MiLCJpdGVtTWV0YWRhdGEiLCJjb2x1bW5NZXRhZGF0YU1hcCIsImVzdGltYXRlZENvbHVtbldpZHRoIiwibGFzdE1lYXN1cmVkQ29sdW1uSW5kZXgiLCJnZXRJdGVtTWV0YWRhdGEiLCJpdGVtVHlwZSIsImluc3RhbmNlUHJvcHMiLCJpdGVtTWV0YWRhdGFNYXAiLCJpdGVtU2l6ZSIsImxhc3RNZWFzdXJlZEluZGV4IiwiZmluZE5lYXJlc3RJdGVtIiwiZmluZE5lYXJlc3RJdGVtQmluYXJ5U2VhcmNoIiwiZmluZE5lYXJlc3RJdGVtRXhwb25lbnRpYWxTZWFyY2giLCJoaWdoIiwibG93IiwibWlkZGxlIiwiZmxvb3IiLCJjdXJyZW50T2Zmc2V0IiwiaW50ZXJ2YWwiLCJzY3JvbGxPZmZzZXQiLCJlc3RpbWF0ZWRUb3RhbFNpemUiLCJtYXhPZmZzZXQiLCJtaW5PZmZzZXQiLCJyb3VuZCIsIlZhcmlhYmxlU2l6ZUdyaWQiLCJyZXNldEFmdGVyQ29sdW1uSW5kZXgiLCJzaG91bGRGb3JjZVVwZGF0ZSIsInJlc2V0QWZ0ZXJJbmRpY2VzIiwicmVzZXRBZnRlclJvd0luZGV4IiwiX3JlZjYkc2hvdWxkRm9yY2VVcGRhIiwiZm9yY2VVcGRhdGUiLCJfcmVmNyIsImRlZmF1bHRJdGVtS2V5JDEiLCJjcmVhdGVMaXN0Q29tcG9uZW50IiwiZ2V0SXRlbU9mZnNldCIsImdldEVzdGltYXRlZFRvdGFsU2l6ZSIsImdldEl0ZW1TaXplIiwiZ2V0T2Zmc2V0Rm9ySW5kZXhBbmRBbGlnbm1lbnQiLCJnZXRTdGFydEluZGV4Rm9yT2Zmc2V0IiwiZ2V0U3RvcEluZGV4Rm9yU3RhcnRJbmRleCIsIkxpc3QiLCJzY3JvbGxEaXJlY3Rpb24iLCJpbml0aWFsU2Nyb2xsT2Zmc2V0Iiwib3ZlcnNjYW5TdGFydEluZGV4Iiwib3ZlcnNjYW5TdG9wSW5kZXgiLCJ2aXNpYmxlU3RhcnRJbmRleCIsInZpc2libGVTdG9wSW5kZXgiLCJsYXlvdXQiLCJpc0hvcml6b250YWwiLCJvZmZzZXRIb3Jpem9udGFsIiwiX29uU2Nyb2xsSG9yaXpvbnRhbCIsIl9vblNjcm9sbFZlcnRpY2FsIiwiX2V2ZW50JGN1cnJlbnRUYXJnZXQyIiwidmFsaWRhdGVTaGFyZWRQcm9wcyQxIiwiX3RoaXMkX2dldFJhbmdlVG9SZW5kIiwiX2dldFJhbmdlVG9SZW5kZXIiLCJfaW5kZXgiLCJfdGhpcyRfZ2V0UmFuZ2VUb1JlbmQyIiwiX292ZXJzY2FuU3RhcnRJbmRleCIsIl9vdmVyc2NhblN0b3BJbmRleCIsIl92aXNpYmxlU3RhcnRJbmRleCIsIl92aXNpYmxlU3RvcEluZGV4IiwiX3Njcm9sbERpcmVjdGlvbiIsIl9zY3JvbGxPZmZzZXQiLCJnZXRJdGVtTWV0YWRhdGEkMSIsImZpbmROZWFyZXN0SXRlbUJpbmFyeVNlYXJjaCQxIiwiZmluZE5lYXJlc3RJdGVtRXhwb25lbnRpYWxTZWFyY2gkMSIsImVzdGltYXRlZEl0ZW1TaXplIiwidG90YWxTaXplT2ZNZWFzdXJlZEl0ZW1zIiwiVmFyaWFibGVTaXplTGlzdCIsImZpbmROZWFyZXN0SXRlbSQxIiwicmVzZXRBZnRlckluZGV4IiwiRml4ZWRTaXplR3JpZCIsImxhc3RDb2x1bW5PZmZzZXQiLCJtaWRkbGVPZmZzZXQiLCJjZWlsIiwiX3JlZjgiLCJsYXN0Um93T2Zmc2V0IiwiX3JlZjkiLCJfcmVmMTAiLCJudW1WaXNpYmxlQ29sdW1ucyIsIl9yZWYxMSIsIl9yZWYxMiIsIm51bVZpc2libGVSb3dzIiwiX3JlZjEzIiwiRml4ZWRTaXplTGlzdCIsImxhc3RJdGVtT2Zmc2V0IiwibnVtVmlzaWJsZUl0ZW1zIiwic2hhbGxvd0RpZmZlcnMiLCJhdHRyaWJ1dGUiLCJfYXR0cmlidXRlIiwiYXJlRXF1YWwiLCJwcmV2UHJvcHMiLCJwcmV2U3R5bGUiLCJwcmV2UmVzdCIsIm5leHRTdHlsZSIsIm5leHRSZXN0Iiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwic3ltYm9sT2JzZXJ2YWJsZVBvbnlmaWxsIiwiVmlld2VyIiwiZ2V0RWxlbWVudEJ5SWQiLCJGcmFnbWVudCIsIlN0cmljdE1vZGUiLCJQcm9maWxlciIsInEiLCJTdXNwZW5zZSIsInUiLCJ2IiwiZm9yIiwidyIsIml0ZXJhdG9yIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiQSIsImlzTW91bnRlZCIsImVucXVldWVGb3JjZVVwZGF0ZSIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlU2V0U3RhdGUiLCJCIiwiQyIsInJlZnMiLCJ1cGRhdGVyIiwiRCIsIkUiLCJpc1JlYWN0Q29tcG9uZW50IiwiRiIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiRyIsIkgiLCJJIiwiX19zZWxmIiwiX19zb3VyY2UiLCJKIiwiaCIsImciLCJmIiwiJCR0eXBlb2YiLCJfb3duZXIiLCJMIiwiTSIsIk4iLCJlc2NhcGUiLCJPIiwiaXNBcnJheSIsIksiLCJkb25lIiwiUCIsIlEiLCJfc3RhdHVzIiwiX3Jlc3VsdCIsInRoZW4iLCJSIiwiUyIsIlQiLCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyIiwiUmVhY3RDdXJyZW50QmF0Y2hDb25maWciLCJ0cmFuc2l0aW9uIiwiUmVhY3RDdXJyZW50T3duZXIiLCJJc1NvbWVSZW5kZXJlckFjdGluZyIsIkNoaWxkcmVuIiwidG9BcnJheSIsIm9ubHkiLCJDb21wb25lbnQiLCJQdXJlQ29tcG9uZW50IiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJjbG9uZUVsZW1lbnQiLCJfY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfY3VycmVudFZhbHVlIiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJfY29udGV4dCIsImNyZWF0ZUZhY3RvcnkiLCJjcmVhdGVSZWYiLCJpc1ZhbGlkRWxlbWVudCIsImxhenkiLCJfcGF5bG9hZCIsIl9pbml0IiwidXNlQ29udGV4dCIsInVzZURlYnVnVmFsdWUiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwidXNlTGF5b3V0RWZmZWN0IiwidXNlTWVtbyIsInVzZVJlZHVjZXIiLCJ2ZXJzaW9uIiwiYWEiLCJiYSIsIlNldCIsImNhIiwiZGEiLCJlYSIsImFkZCIsImZhIiwiaGEiLCJpYSIsImphIiwia2EiLCJhY2NlcHRzQm9vbGVhbnMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwibXVzdFVzZVByb3BlcnR5IiwicHJvcGVydHlOYW1lIiwic2FuaXRpemVVUkwiLCJyZW1vdmVFbXB0eVN0cmluZyIsInRvTG93ZXJDYXNlIiwib2EiLCJwYSIsInRvVXBwZXJDYXNlIiwicWEiLCJtYSIsImlzTmFOIiwibmEiLCJ0ZXN0IiwibGEiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGVOUyIsInhsaW5rSHJlZiIsInJhIiwic2EiLCJ0YSIsInVhIiwid2EiLCJ4YSIsInlhIiwiemEiLCJBYSIsIkJhIiwiQ2EiLCJEYSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwiSWEiLCJKYSIsIk1hIiwiS2EiLCJMYSIsIk5hIiwidHJpbSIsIk9hIiwiUGEiLCJwcmVwYXJlU3RhY2tUcmFjZSIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJRYSIsInRhZyIsIl9yZW5kZXIiLCJSYSIsIlNhIiwiVGEiLCJub2RlTmFtZSIsIlZhIiwiX3ZhbHVlVHJhY2tlciIsImdldFZhbHVlIiwic2V0VmFsdWUiLCJzdG9wVHJhY2tpbmciLCJVYSIsIldhIiwiY2hlY2tlZCIsIlhhIiwiYWN0aXZlRWxlbWVudCIsIllhIiwiZGVmYXVsdENoZWNrZWQiLCJkZWZhdWx0VmFsdWUiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJaYSIsImluaXRpYWxWYWx1ZSIsImNvbnRyb2xsZWQiLCIkYSIsImFiIiwiYmIiLCJjYiIsIm93bmVyRG9jdW1lbnQiLCJlYiIsImRiIiwiZmIiLCJzZWxlY3RlZCIsImRlZmF1bHRTZWxlY3RlZCIsImRpc2FibGVkIiwiZ2IiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsImhiIiwiaWIiLCJqYiIsInRleHRDb250ZW50Iiwia2IiLCJsYiIsIm1iIiwibmIiLCJvYiIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJuYW1lc3BhY2VVUkkiLCJpbm5lckhUTUwiLCJ2YWx1ZU9mIiwiZmlyc3RDaGlsZCIsInBiIiwibGFzdENoaWxkIiwibm9kZVR5cGUiLCJub2RlVmFsdWUiLCJxYiIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRBcmVhIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJmb250V2VpZ2h0IiwibGluZUNsYW1wIiwibGluZUhlaWdodCIsIm9wYWNpdHkiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsInJiIiwic2IiLCJ0YiIsInNldFByb3BlcnR5IiwiY2hhckF0IiwidWIiLCJtZW51aXRlbSIsImFyZWEiLCJiYXNlIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwiaW5wdXQiLCJrZXlnZW4iLCJsaW5rIiwibWV0YSIsInBhcmFtIiwidHJhY2siLCJ3YnIiLCJ2YiIsIndiIiwieGIiLCJzcmNFbGVtZW50IiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJwYXJlbnROb2RlIiwieWIiLCJ6YiIsIkFiIiwiQmIiLCJDYiIsInN0YXRlTm9kZSIsIkRiIiwiRWIiLCJGYiIsIkdiIiwiSGIiLCJJYiIsIkpiIiwiS2IiLCJMYiIsIk1iIiwiT2IiLCJQYiIsIlFiIiwiUmIiLCJvbkVycm9yIiwiU2IiLCJUYiIsIlViIiwiVmIiLCJXYiIsIlhiIiwiWmIiLCJhbHRlcm5hdGUiLCJyZXR1cm4iLCJmbGFncyIsIiRiIiwibWVtb2l6ZWRTdGF0ZSIsImRlaHlkcmF0ZWQiLCJhYyIsImNjIiwiY2hpbGQiLCJzaWJsaW5nIiwiYmMiLCJkYyIsImVjIiwiZmMiLCJnYyIsImhjIiwiaWMiLCJqYyIsImtjIiwibGMiLCJtYyIsIm5jIiwib2MiLCJwYyIsInFjIiwicmMiLCJibG9ja2VkT24iLCJkb21FdmVudE5hbWUiLCJldmVudFN5c3RlbUZsYWdzIiwibmF0aXZlRXZlbnQiLCJ0YXJnZXRDb250YWluZXJzIiwic2MiLCJkZWxldGUiLCJwb2ludGVySWQiLCJ0YyIsInZjIiwid2MiLCJsYW5lUHJpb3JpdHkiLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCJwcmlvcml0eSIsImh5ZHJhdGUiLCJjb250YWluZXJJbmZvIiwieGMiLCJ5YyIsInNoaWZ0IiwiemMiLCJBYyIsIkJjIiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwiQ2MiLCJEYyIsIkVjIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiRmMiLCJHYyIsIkhjIiwiYW5pbWF0aW9uIiwiSWMiLCJKYyIsIktjIiwiTGMiLCJNYyIsIk5jIiwiT2MiLCJQYyIsIlFjIiwidW5zdGFibGVfbm93IiwiUmMiLCJVYyIsInBlbmRpbmdMYW5lcyIsImV4cGlyZWRMYW5lcyIsInN1c3BlbmRlZExhbmVzIiwicGluZ2VkTGFuZXMiLCJWYyIsImVudGFuZ2xlZExhbmVzIiwiZW50YW5nbGVtZW50cyIsIldjIiwiWGMiLCJZYyIsIlpjIiwiJGMiLCJldmVudFRpbWVzIiwiY2x6MzIiLCJiZCIsImNkIiwibG9nIiwiTE4yIiwiZGQiLCJ1bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSIsImVkIiwiZmQiLCJnZCIsImhkIiwidWMiLCJqZCIsImtkIiwibGQiLCJtZCIsIm5kIiwib2QiLCJrZXlDb2RlIiwiY2hhckNvZGUiLCJwZCIsInFkIiwicmQiLCJfcmVhY3ROYW1lIiwiX3RhcmdldEluc3QiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsInN0b3BQcm9wYWdhdGlvbiIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJpc1BlcnNpc3RlbnQiLCJ3ZCIsInhkIiwieWQiLCJzZCIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsImlzVHJ1c3RlZCIsInRkIiwidWQiLCJ2aWV3IiwiZGV0YWlsIiwidmQiLCJBZCIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJwYWdlWCIsInBhZ2VZIiwiY3RybEtleSIsInNoaWZ0S2V5IiwiYWx0S2V5IiwibWV0YUtleSIsImdldE1vZGlmaWVyU3RhdGUiLCJ6ZCIsImJ1dHRvbnMiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsIkJkIiwiRGQiLCJkYXRhVHJhbnNmZXIiLCJGZCIsIkhkIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsIkpkIiwiY2xpcGJvYXJkRGF0YSIsIkxkIiwiTWQiLCJFc2MiLCJTcGFjZWJhciIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5IiwiTmQiLCI4IiwiOSIsIjEyIiwiMTMiLCIxNiIsIjE3IiwiMTgiLCIxOSIsIjIwIiwiMjciLCIzMiIsIjMzIiwiMzQiLCIzNSIsIjM2IiwiMzciLCIzOCIsIjM5IiwiNDAiLCI0NSIsIjQ2IiwiMTEyIiwiMTEzIiwiMTE0IiwiMTE1IiwiMTE2IiwiMTE3IiwiMTE4IiwiMTE5IiwiMTIwIiwiMTIxIiwiMTIyIiwiMTIzIiwiMTQ0IiwiMTQ1IiwiMjI0IiwiT2QiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwiUGQiLCJSZCIsImNvZGUiLCJsb2NhdGlvbiIsImxvY2FsZSIsIndoaWNoIiwiVGQiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwiVmQiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwiWGQiLCJaZCIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwiJGQiLCJhZSIsImJlIiwiZG9jdW1lbnRNb2RlIiwiY2UiLCJkZSIsImVlIiwiZmUiLCJnZSIsImhlIiwiaWUiLCJsZSIsImNvbG9yIiwiZGF0ZSIsImRhdGV0aW1lIiwiZW1haWwiLCJtb250aCIsIm51bWJlciIsInBhc3N3b3JkIiwic2VhcmNoIiwidGVsIiwidGltZSIsInVybCIsIndlZWsiLCJtZSIsIm5lIiwib2UiLCJwZSIsInFlIiwicmUiLCJzZSIsInRlIiwidWUiLCJ2ZSIsIndlIiwieGUiLCJ5ZSIsInplIiwib25pbnB1dCIsIkFlIiwiZGV0YWNoRXZlbnQiLCJCZSIsIkNlIiwiYXR0YWNoRXZlbnQiLCJEZSIsIkVlIiwiRmUiLCJIZSIsIkllIiwiSmUiLCJLZSIsIkxlIiwibm9kZSIsIm5leHRTaWJsaW5nIiwiTmUiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnRXaW5kb3ciLCJocmVmIiwiT2UiLCJjb250ZW50RWRpdGFibGUiLCJQZSIsIlFlIiwiUmUiLCJTZSIsIlRlIiwiVWUiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsImFuY2hvck5vZGUiLCJkZWZhdWx0VmlldyIsImdldFNlbGVjdGlvbiIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwiVmUiLCJXZSIsIlhlIiwiWWUiLCJaZSIsIlliIiwiJGUiLCJoYXMiLCJhZiIsImJmIiwiY2YiLCJkZiIsImNhcHR1cmUiLCJwYXNzaXZlIiwiTmIiLCJlZiIsImZmIiwicGFyZW50V2luZG93IiwiZ2YiLCJoZiIsImplIiwiY2hhciIsImtlIiwidW5zaGlmdCIsImpmIiwia2YiLCJsZiIsIm1mIiwiYXV0b0ZvY3VzIiwibmYiLCJfX2h0bWwiLCJvZiIsInNldFRpbWVvdXQiLCJwZiIsImNsZWFyVGltZW91dCIsInFmIiwicmYiLCJzZiIsInByZXZpb3VzU2libGluZyIsInRmIiwidmYiLCJ3ZiIsInhmIiwieWYiLCJ6ZiIsIkFmIiwiQmYiLCJDZiIsIkRmIiwiRWYiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJGZiIsIkdmIiwiSGYiLCJJZiIsImdldENoaWxkQ29udGV4dCIsIkpmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJLZiIsIkxmIiwiTWYiLCJOZiIsIk9mIiwiUGYiLCJ1bnN0YWJsZV9jYW5jZWxDYWxsYmFjayIsIlFmIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJSZiIsInVuc3RhYmxlX3JlcXVlc3RQYWludCIsIlNmIiwiVGYiLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsIlVmIiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJWZiIsIldmIiwiWGYiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsIllmIiwidW5zdGFibGVfSWRsZVByaW9yaXR5IiwiWmYiLCIkZiIsImFnIiwiYmciLCJjZyIsImRnIiwiZWciLCJmZyIsImdnIiwiaGciLCJpZyIsImpnIiwia2ciLCJsZyIsIm1nIiwibmciLCJvZyIsInBnIiwicWciLCJyZyIsInNnIiwiY2hpbGRMYW5lcyIsInRnIiwiZmlyc3RDb250ZXh0IiwibGFuZXMiLCJ1ZyIsInZnIiwib2JzZXJ2ZWRCaXRzIiwicmVzcG9uZGVycyIsIndnIiwieGciLCJ1cGRhdGVRdWV1ZSIsImJhc2VTdGF0ZSIsImZpcnN0QmFzZVVwZGF0ZSIsImxhc3RCYXNlVXBkYXRlIiwic2hhcmVkIiwicGVuZGluZyIsImVmZmVjdHMiLCJ5ZyIsInpnIiwiZXZlbnRUaW1lIiwibGFuZSIsIkFnIiwiQmciLCJDZyIsIkRnIiwiRWciLCJGZyIsIkdnIiwiS2ciLCJfcmVhY3RJbnRlcm5hbHMiLCJIZyIsIklnIiwiSmciLCJMZyIsIk1nIiwiTmciLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJPZyIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudFdpbGxNb3VudCIsIlBnIiwiUWciLCJfc3RyaW5nUmVmIiwiUmciLCJTZyIsImxhc3RFZmZlY3QiLCJuZXh0RWZmZWN0IiwiZmlyc3RFZmZlY3QiLCJUZyIsIlVnIiwiZWxlbWVudFR5cGUiLCJWZyIsImltcGxlbWVudGF0aW9uIiwiV2ciLCJYZyIsIllnIiwiWmciLCIkZyIsImFoIiwiYmgiLCJjaCIsImRoIiwiZWgiLCJkb2N1bWVudEVsZW1lbnQiLCJ0YWdOYW1lIiwiZmgiLCJnaCIsImhoIiwiaWgiLCJtZW1vaXplZFByb3BzIiwicmV2ZWFsT3JkZXIiLCJqaCIsImtoIiwibGgiLCJtaCIsIm5oIiwib2giLCJwZW5kaW5nUHJvcHMiLCJwaCIsInFoIiwicmgiLCJzaCIsInRoIiwidWgiLCJfd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeSIsInZoIiwid2giLCJ4aCIsInloIiwiemgiLCJBaCIsIkJoIiwiQ2giLCJEaCIsIkVoIiwiRmgiLCJHaCIsIkhoIiwiYmFzZVF1ZXVlIiwicXVldWUiLCJJaCIsIkpoIiwiS2giLCJsYXN0UmVuZGVyZWRSZWR1Y2VyIiwiZWFnZXJSZWR1Y2VyIiwiZWFnZXJTdGF0ZSIsImxhc3RSZW5kZXJlZFN0YXRlIiwiTGgiLCJNaCIsIl9nZXRWZXJzaW9uIiwiX3NvdXJjZSIsIm11dGFibGVSZWFkTGFuZXMiLCJOaCIsIlUiLCJnZXRTbmFwc2hvdCIsInNldFNuYXBzaG90IiwiT2giLCJQaCIsIlFoIiwiUmgiLCJkZXN0cm95IiwiZGVwcyIsIlNoIiwiVGgiLCJVaCIsIlZoIiwiV2giLCJYaCIsIlloIiwiWmgiLCIkaCIsImFpIiwiYmkiLCJjaSIsImRpIiwicmVhZENvbnRleHQiLCJ1c2VEZWZlcnJlZFZhbHVlIiwidXNlVHJhbnNpdGlvbiIsInVzZU11dGFibGVTb3VyY2UiLCJ1c2VPcGFxdWVJZGVudGlmaWVyIiwidW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyIiwidWYiLCJlaSIsImZpIiwiZ2kiLCJoaSIsImlpIiwiamkiLCJraSIsImxpIiwibWkiLCJiYXNlTGFuZXMiLCJuaSIsIm9pIiwicGkiLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJxaSIsInJpIiwicGVuZGluZ0NvbnRleHQiLCJCaSIsIkRpIiwiRWkiLCJzaSIsInJldHJ5TGFuZSIsInRpIiwiZmFsbGJhY2siLCJ1bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjayIsInVpIiwidW5zdGFibGVfZXhwZWN0ZWRMb2FkVGltZSIsInZpIiwid2kiLCJ4aSIsInlpIiwiemkiLCJpc0JhY2t3YXJkcyIsInJlbmRlcmluZyIsInJlbmRlcmluZ1N0YXJ0VGltZSIsInRhaWwiLCJ0YWlsTW9kZSIsIkFpIiwiRmkiLCJHaSIsIndhc011bHRpcGxlIiwibXVsdGlwbGUiLCJvbmNsaWNrIiwiY3JlYXRlRWxlbWVudE5TIiwiY3JlYXRlVGV4dE5vZGUiLCJWIiwiSGkiLCJJaSIsIlciLCJKaSIsIktpIiwiTGkiLCJNaSIsIk5pIiwiT2kiLCJXZWFrTWFwIiwiUGkiLCJRaSIsIlJpIiwiU2kiLCJjb21wb25lbnREaWRDYXRjaCIsIlRpIiwiY29tcG9uZW50U3RhY2siLCJVaSIsIldlYWtTZXQiLCJWaSIsIldpIiwiWGkiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIllpIiwiWmkiLCIkaSIsImZvY3VzIiwiYWoiLCJiaiIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiY2oiLCJkaiIsImVqIiwiZmoiLCJnaiIsImluc2VydEJlZm9yZSIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJoaiIsImlqIiwiamoiLCJraiIsImxqIiwibWoiLCJuaiIsIm9qIiwicGoiLCJYIiwiWSIsInFqIiwicmoiLCJzaiIsInRqIiwidWoiLCJ2aiIsIkluZmluaXR5Iiwid2oiLCJjayIsIloiLCJ4aiIsInlqIiwiemoiLCJBaiIsIkJqIiwiQ2oiLCJEaiIsIkVqIiwiRmoiLCJHaiIsIkhqIiwiSWoiLCJKaiIsIlNjIiwiS2oiLCJMaiIsIk1qIiwiY2FsbGJhY2tOb2RlIiwiZXhwaXJhdGlvblRpbWVzIiwiY2FsbGJhY2tQcmlvcml0eSIsIlRjIiwiTmoiLCJPaiIsIlBqIiwiUWoiLCJSaiIsIlNqIiwiVGoiLCJmaW5pc2hlZFdvcmsiLCJmaW5pc2hlZExhbmVzIiwiVWoiLCJ0aW1lb3V0SGFuZGxlIiwiV2oiLCJYaiIsInBpbmdDYWNoZSIsIllqIiwiWmoiLCJ2YSIsImFrIiwiYmsiLCJkayIsInJhbmdlQ291bnQiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwiZWsiLCJNZSIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiZXh0ZW5kIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwib25Db21taXRGaWJlclJvb3QiLCJmayIsImdrIiwiaWsiLCJwZW5kaW5nQ2hpbGRyZW4iLCJqayIsIm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEiLCJrayIsImxrIiwibWsiLCJuayIsIm9rIiwicWsiLCJoeWRyYXRpb25PcHRpb25zIiwibXV0YWJsZVNvdXJjZXMiLCJfaW50ZXJuYWxSb290IiwicmsiLCJ0ayIsImhhc0F0dHJpYnV0ZSIsInNrIiwidWsiLCJoayIsInVuc3RhYmxlX29ic2VydmVkQml0cyIsInVubW91bnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9ybSIsIlZqIiwidmsiLCJFdmVudHMiLCJ3ayIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiYnVuZGxlVHlwZSIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJ4ayIsInJlbmRlcmVyQ29uZmlnIiwib3ZlcnJpZGVIb29rU3RhdGUiLCJvdmVycmlkZUhvb2tTdGF0ZURlbGV0ZVBhdGgiLCJvdmVycmlkZUhvb2tTdGF0ZVJlbmFtZVBhdGgiLCJvdmVycmlkZVByb3BzIiwib3ZlcnJpZGVQcm9wc0RlbGV0ZVBhdGgiLCJvdmVycmlkZVByb3BzUmVuYW1lUGF0aCIsInNldFN1c3BlbnNlSGFuZGxlciIsInNjaGVkdWxlVXBkYXRlIiwiY3VycmVudERpc3BhdGNoZXJSZWYiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsImZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaCIsInNjaGVkdWxlUmVmcmVzaCIsInNjaGVkdWxlUm9vdCIsInNldFJlZnJlc2hIYW5kbGVyIiwiZ2V0Q3VycmVudEZpYmVyIiwieWsiLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsImNyZWF0ZVBvcnRhbCIsImZpbmRET01Ob2RlIiwiZmx1c2hTeW5jIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJNZXNzYWdlQ2hhbm5lbCIsInVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvcCIsInNvcnRJbmRleCIsInN0YXJ0VGltZSIsImV4cGlyYXRpb25UaW1lIiwicHJpb3JpdHlMZXZlbCIsInVuc3RhYmxlX1Byb2ZpbGluZyIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGUiLCJ1bnN0YWJsZV9uZXh0IiwidW5zdGFibGVfcGF1c2VFeGVjdXRpb24iLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJGdW5jdGlvbiIsIm9yaWdpbmFsTW9kdWxlIiwid2VicGFja1BvbHlmaWxsIiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJlbXB0eUZ1bmN0aW9uIiwiZW1wdHlGdW5jdGlvbldpdGhSZXNldCIsInJlc2V0V2FybmluZ0NhY2hlIiwic2hpbSIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsInByb3BGdWxsTmFtZSIsInNlY3JldCIsImdldFNoaW0iLCJpc1JlcXVpcmVkIiwiUmVhY3RQcm9wVHlwZXMiLCJib29sIiwiZnVuYyIsInN0cmluZyIsInN5bWJvbCIsImFueSIsImFycmF5T2YiLCJpbnN0YW5jZU9mIiwib2JqZWN0T2YiLCJvbmVPZiIsIm9uZU9mVHlwZSIsInNoYXBlIiwiZXhhY3QiLCJjaGVja1Byb3BUeXBlcyIsIlByb3BUeXBlcyIsIkFzeW5jTW9kZSIsIkNvbmN1cnJlbnRNb2RlIiwiQ29udGV4dENvbnN1bWVyIiwiQ29udGV4dFByb3ZpZGVyIiwiRWxlbWVudCIsIkxhenkiLCJQb3J0YWwiLCJpc0FzeW5jTW9kZSIsImlzQ29uY3VycmVudE1vZGUiLCJpc0NvbnRleHRDb25zdW1lciIsImlzQ29udGV4dFByb3ZpZGVyIiwiaXNFbGVtZW50IiwiaXNGb3J3YXJkUmVmIiwiaXNGcmFnbWVudCIsImlzTGF6eSIsImlzUG9ydGFsIiwiaXNQcm9maWxlciIsImlzU3RyaWN0TW9kZSIsImlzU3VzcGVuc2UiLCJpc1ZhbGlkRWxlbWVudFR5cGUiLCJ0eXBlT2YiLCJpbml0aWFsU3RhdGUiLCJjb3VudGVyIiwicGF0aCIsInJlc3QiLCJjb25uZWN0Iiwic2VsZWN0ZWRWZXJ0ZXhGaWxlSWQiLCJzZWxlY3RlZEZyYWdtZW50RmlsZUlkIiwidXBkYXRlQ2FtZXJhUG9zaXRpb24iLCJzaGFkZXJDb21waWxlRXJyb3JzIiwic2V0U2hhZGVyQ29tcGlsZUVycm9ycyIsInNlbGVjdGVkVmVydGV4RmlsZVRleHQiLCJzZXRTZWxlY3RlZFZlcnRleEZpbGVUZXh0Iiwic2VsZWN0ZWRGcmFnbWVudEZpbGVUZXh0Iiwic2V0U2VsZWN0ZWRGcmFnbWVudEZpbGVUZXh0IiwiYXR0cmlidXRlQnVmZmVyRmllbGRzSW5mbyIsInNldEF0dHJpYnV0ZUJ1ZmZlckZpZWxkc0luZm8iLCJ1bmlmb3JtRmllbGRzSW5mbyIsInNldFVuaWZvcm1GaWVsZHNJbmZvIiwidGV4dHVyZUZpZWxkc0luZm8iLCJzZXRUZXh0dXJlRmllbGRzSW5mbyIsInZpZXdlclNpemUiLCJzZXRWaWV3ZXJTaXplIiwiY29udGVudFJlZiIsImNhbnZhc1JlZiIsImNvbnRleHRSZWYiLCJpbmRleEJ1ZmZlckluZm9SZWYiLCJhbmltYXRpb25GcmFtZUhhbmRsZVJlZiIsImdldENvbnRleHQiLCJJbmRleEJ1ZmZlckluZm8iLCJvYnNlcnZlRWxlbWVudEJvdW5kaW5nUmVjdCIsInJlY3QiLCJjb21waWxlU2hhZGVyc0Zyb21Tb3VyY2UiLCJwcm9ncmFtVW5pZm9ybXMiLCJnZXRQcm9ncmFtVW5pZm9ybXMiLCJwcm9ncmFtQXR0cmlidXRlQnVmZmVycyIsImdldFByb2dyYW1BdHRyaWJ1dGVCdWZmZXJzIiwiZGF0YVVuaWZvcm1zIiwidGV4dHVyZVVuaWZvcm1zIiwiZ2V0RnJvbUNhY2hlT3JDcmVhdGUiLCJyZW5kZXJQcm9ncmFtIiwidW5pZm9ybUluZm9zIiwidGV4dHVyZUluZm9zIiwiYXR0cmlidXRlQnVmZmVySW5mb3MiLCJpbmRleEJ1ZmZlckluZm8iLCJkcmF3TW9kZSIsImRlbGV0ZVByb2dyYW0iLCJmb3JtYXRTaGFkZXJDb21waWxlRXJyb3JzIiwidXNlRG9jdW1lbnRXYXRjaGVyIiwiU2hhZGVyc1NlbGVjdG9yU2VjdGlvbiIsIkRyYXdPcHRpb25zU2VjdGlvbiIsIlVuaWZvcm1TZWN0aW9uIiwidW5pZm9ybUZpZWxkcyIsIkF0dHJpYnV0ZUJ1ZmZlclNlY3Rpb24iLCJhdHRyaWJ1dGVCdWZmZXJGaWVsZHMiLCJUZXh0dXJlU2VjdGlvbiIsInRleHR1cmVGaWVsZHMiLCJTaGFkZXJzQ29tcGlsZVJlc3VsdEFyZWEiLCJlcnJvcnMiLCJyZXNpemVPYnNlcnZlciIsIlJlc2l6ZU9ic2VydmVyIiwiZWxlbWVudHMiLCJvYnNlcnZlckVudHJ5IiwiZmluZCIsImRvbVJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJvYnNlcnZlIiwiZGlzY29ubmVjdCIsImNvbXBpbGVTaGFkZXIiLCJyZW5kZXJpbmdDb250ZXh0Iiwic2hhZGVyIiwiY3JlYXRlU2hhZGVyIiwic2hhZGVyU291cmNlIiwiZ2V0U2hhZGVyUGFyYW1ldGVyIiwiQ09NUElMRV9TVEFUVVMiLCJnZXRTaGFkZXJJbmZvTG9nIiwiZGVsZXRlU2hhZGVyIiwidmVydGV4U2hhZGVyQ29udGVudCIsImZyYWdtZW50U2hhZGVyQ29udGVudCIsIlZFUlRFWF9TSEFERVIiLCJGUkFHTUVOVF9TSEFERVIiLCJ2ZXJ0ZXhFcnJvciIsImZyYWdtZW50RXJyb3IiLCJjcmVhdGVQcm9ncmFtIiwicHJvZ3JhbSIsImF0dGFjaFNoYWRlciIsImxpbmtQcm9ncmFtIiwiZ2V0UHJvZ3JhbVBhcmFtZXRlciIsIkxJTktfU1RBVFVTIiwiaW5mb0xvZyIsImdldFByb2dyYW1JbmZvTG9nIiwibnVtVW5pZm9ybXMiLCJBQ1RJVkVfVU5JRk9STVMiLCJ1bmlmb3JtIiwiZ2V0QWN0aXZlVW5pZm9ybSIsInVuaXQiLCJudW1BdHRyaWJ1dGVCdWZmZXJzIiwiQUNUSVZFX0FUVFJJQlVURVMiLCJhdHRyaWJ1dGVCdWZmZXIiLCJnZXRBY3RpdmVBdHRyaWIiLCJyZW5kZXJJbmZvIiwidXNlUHJvZ3JhbSIsInZpZXdwb3J0IiwiY2FudmFzIiwiY2xlYXJDb2xvciIsImNsZWFyRGVwdGgiLCJlbmFibGUiLCJERVBUSF9URVNUIiwiZGVwdGhGdW5jIiwiTEVRVUFMIiwiQ09MT1JfQlVGRkVSX0JJVCIsIkRFUFRIX0JVRkZFUl9CSVQiLCJwcmVwYXJlRm9yUmVuZGVyIiwic2V0QXR0cmlidXRlQnVmZmVyIiwicHJpbWl0aXZlVHlwZSIsIlRSSUFOR0xFUyIsIm51bUVsZW1lbnRzIiwiZ2V0Q291bnQiLCJkcmF3QXJyYXlzIiwic2V0SW5kZXhCdWZmZXIiLCJkcmF3RWxlbWVudHMiLCJVTlNJR05FRF9TSE9SVCIsInZlcnRleFNoYWRlckVycm9ycyIsImZyYWdtZW50U2hhZGVyRXJyb3JzIiwia2V5U2VsZWN0b3IiLCJjb21wb25lbnRDYWNoZSIsIkNvbXBvc2l0ZUtleU1hcCIsImdldEJ5TmFtZSIsIm5ld1ZhbHVlcyIsIm5ld1ZhbHVlc1N0cktleXMiLCJjb21wb25lbnRzIiwiZnJvbUNhY2hlIiwiYXR0cmlidXRlQnVmZmVySW5mbyIsImF0dGFjaFRvUHJvZ3JhbSIsIkF0dHJpYnV0ZUJ1ZmZlckluZm8iLCJkZWxldGVCdWZmZXIiLCJlbnRyaWVzU3RyS2V5IiwiZGVsZXRlU3RyS2V5IiwibnciLCJlbnRyaWVzIiwiQXR0cmlidXRlQnVmZmVyVHlwZSIsImJ1ZmZlciIsImNyZWF0ZUJ1ZmZlciIsImdldEF0dHJpYkxvY2F0aW9uIiwibmV3VmFsdWUiLCJiaW5kQnVmZmVyIiwiQVJSQVlfQlVGRkVSIiwiZmxhdHRlbiIsImJ1ZmZlckRhdGEiLCJGbG9hdDMyQXJyYXkiLCJTVEFUSUNfRFJBVyIsImVuYWJsZVZlcnRleEF0dHJpYkFycmF5IiwiZ2V0TnVtQ29tcG9uZW50cyIsIkZMT0FUIiwidmVydGV4QXR0cmliUG9pbnRlciIsImdldEF0dHJpYnV0ZUJ1ZmZlclR5cGUiLCJidWZmZXJUeXBlIiwiRkxPQVRfVkVDMiIsIkZMT0FUX1ZFQzMiLCJGTE9BVF9WRUM0IiwiaXNQb3dlck9mMiIsIm91dCIsImZvdnkiLCJuZWFyIiwiZmFyIiwidGFuIiwiZXllIiwiY2VudGVyIiwidXAiLCJ4MCIsIngxIiwieDIiLCJ5MCIsInkxIiwieTIiLCJ6MCIsInoxIiwiejIiLCJsZW4iLCJleWV4IiwiZXlleSIsImV5ZXoiLCJ1cHgiLCJ1cHkiLCJ1cHoiLCJjZW50ZXJ4IiwiY2VudGVyeSIsImNlbnRlcnoiLCJhYnMiLCJpZGVudGl0eTMiLCJoeXBvdCIsImEwMCIsImEwMSIsImEwMiIsImEwMyIsImExMCIsImExMSIsImExMiIsImExMyIsImEyMCIsImEyMSIsImEyMiIsImEyMyIsImEzMCIsImEzMSIsImEzMiIsImEzMyIsImIwIiwiYjEiLCJiMiIsImIzIiwiRUxFTUVOVF9BUlJBWV9CVUZGRVIiLCJVaW50MTZBcnJheSIsImFiaSIsIk11bHRpTnVtYmVySW5wdXQiLCJyb3dzIiwicmVhZG9ubHkiLCJyb3ciLCJjb2x1bW4iLCJOdW1iZXIiLCJzZXRTZWxlY3RlZFZlcnRleEZpbGVJZCIsInNldFNlbGVjdGVkRnJhZ21lbnRGaWxlSWQiLCJzaGFkZXJGaWxlT3B0aW9ucyIsInNldFNoYWRlckZpbGVPcHRpb25zIiwic3luY1NoYWRlckRvY3VtZW50cyIsImZpbGUiLCJyZWFjdF93aW5kb3dfMSIsIkhvb2tzXzEiLCJtZW1vaXplZFJvdyIsInVzZVNjcm9sbExpc3RUb0luZGV4IiwicmVkdWNlcl8xIiwidXNlVW5pb25TdGF0ZV8xIiwiZGVmYXVsdEluaXRpYWxTdGF0ZSIsImRlZmF1bHREcm9wZG93blJlZHVjZXIiLCJkZWZhdWx0SW50ZXJuYWxTdGF0ZSIsInN0YXRlUmVkdWNlciIsIl9saXN0UmVmIiwiXzEiLCJjbGlja0hhbmRsZXIiLCJ1c2VDbGlja2VkT3V0c2lkZUhhbmRsZXIiLCJ1c2VEcm9wZG93bkNsb3NlV2hlbkZvY3VzT3V0IiwidXNlRm9jdXNPdXRIYW5kbGVyXzEiLCJ1c2VQcmV2aW91c1ZhbHVlXzEiLCJ2YWx1ZVRvVHJpZ2dlciIsImluaXRpYWxSZW5kZXIiLCJtb3VzZUhhbmRsZXIiLCJ1c2VDaHVua0xvYWRlciIsImxvYWQiLCJpc0xvYWRlZCIsImlzSXRlbUxvYWRlZCIsImxvYWRNb3JlSXRlbXMiLCJlbmRJbmRleCIsIm5ld0l0ZW1zIiwiaXRlbXNJbmRleCIsImtleWJvYXJkTmF2aWdhdG9yXzEiLCJWaXJ0dWFsaXplZExhenlMb2FkaW5nTGlzdCIsInJlYWN0X3dpbmRvd19pbmZpbml0ZV9sb2FkZXJfMSIsImxvYWRlclJlZiIsImNsYXNzQ2FsbENoZWNrIiwiQ29uc3RydWN0b3IiLCJjcmVhdGVDbGFzcyIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsInBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJJbmZpbml0ZUxvYWRlciIsImFyZ3MiLCJfbGFzdFJlbmRlcmVkU3RhcnRJbmRleCIsIl9sYXN0UmVuZGVyZWRTdG9wSW5kZXgiLCJfbWVtb2l6ZWRVbmxvYWRlZFJhbmdlcyIsIl9vbkl0ZW1zUmVuZGVyZWQiLCJfZW5zdXJlUm93c0xvYWRlZCIsIl9zZXRSZWYiLCJpbmhlcml0cyIsImF1dG9SZWxvYWQiLCJfcHJvcHMiLCJfcHJvcHMkbWluaW11bUJhdGNoU2kiLCJtaW5pbXVtQmF0Y2hTaXplIiwiX3Byb3BzJHRocmVzaG9sZCIsInRocmVzaG9sZCIsInVubG9hZGVkUmFuZ2VzIiwicmFuZ2VTdGFydEluZGV4IiwicmFuZ2VTdG9wSW5kZXgiLCJwb3RlbnRpYWxTdG9wSW5kZXgiLCJfaW5kZXgyIiwiX2luZGV4MyIsInNjYW5Gb3JVbmxvYWRlZFJhbmdlcyIsInNvbWUiLCJzdGFydE9yU3RvcCIsIl9sb2FkVW5sb2FkZWRSYW5nZXMiLCJfdGhpczIiLCJsb2FkTW9yZVJvd3MiLCJfbG9vcCIsInByb21pc2UiLCJsYXN0UmVuZGVyZWRTdGFydEluZGV4IiwibGFzdFJlbmRlcmVkU3RvcEluZGV4IiwiaXNSYW5nZVZpc2libGUiLCJldCIsIm9wdGlvbklkIiwib3B0aW9uVmFsdWUiLCJUZXh0dXJlSW5wdXQiLCJzZWxlY3RlZE9wdGlvbklkIiwic2VsZWN0ZWRPcHRpb25WYWx1ZSIsIlVuaWZvcm1GaWVsZHMiLCJyZW5kZXJVbmlmb3JtSW5wdXQiLCJ1bmlmb3JtVHlwZSIsIlVuaWZvcm1UeXBlIiwiVmVjdG9yMk51bWJlcklucHV0IiwiVmVjdG9yM051bWJlcklucHV0IiwiVmVjdG9yNE51bWJlcklucHV0IiwiRkxPQVRfTUFUNCIsIk1hdHJpeDR4NE51bWJlcklucHV0IiwiZ2V0VW5pZm9ybUxvY2F0aW9uIiwic2V0dGVyIiwiY3JlYXRlVW5pZm9ybVNldHRlciIsImdldFVuaWZvcm1UeXBlIiwiZ2V0VW5pZm9ybU5hbWUiLCJVbmlmb3JtSW5mbyIsInVuaWZvcm0yZiIsInVuaWZvcm0zZiIsInVuaWZvcm00ZiIsInVuaWZvcm1NYXRyaXg0ZnYiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxLQVF2RHJCLEVBQW9Cc0IsRUFBSSxTQUFTRCxFQUFPRSxHQUV2QyxHQURVLEVBQVBBLElBQVVGLEVBQVFyQixFQUFvQnFCLElBQy9CLEVBQVBFLEVBQVUsT0FBT0YsRUFDcEIsR0FBVyxFQUFQRSxHQUE4QixpQkFBVkYsR0FBc0JBLEdBQVNBLEVBQU1HLFdBQVksT0FBT0gsRUFDaEYsSUFBSUksRUFBS1gsT0FBT1ksT0FBTyxNQUd2QixHQUZBMUIsRUFBb0JrQixFQUFFTyxHQUN0QlgsT0FBT0MsZUFBZVUsRUFBSSxVQUFXLENBQUVULFlBQVksRUFBTUssTUFBT0EsSUFDdEQsRUFBUEUsR0FBNEIsaUJBQVRGLEVBQW1CLElBQUksSUFBSU0sS0FBT04sRUFBT3JCLEVBQW9CVSxFQUFFZSxFQUFJRSxFQUFLLFNBQVNBLEdBQU8sT0FBT04sRUFBTU0sSUFBUUMsS0FBSyxLQUFNRCxJQUM5SSxPQUFPRixHQUlSekIsRUFBb0I2QixFQUFJLFNBQVMxQixHQUNoQyxJQUFJUyxFQUFTVCxHQUFVQSxFQUFPcUIsV0FDN0IsV0FBd0IsT0FBT3JCLEVBQWdCLFNBQy9DLFdBQThCLE9BQU9BLEdBRXRDLE9BREFILEVBQW9CVSxFQUFFRSxFQUFRLElBQUtBLEdBQzVCQSxHQUlSWixFQUFvQmEsRUFBSSxTQUFTaUIsRUFBUUMsR0FBWSxPQUFPakIsT0FBT2tCLFVBQVVDLGVBQWUxQixLQUFLdUIsRUFBUUMsSUFHekcvQixFQUFvQmtDLEVBQUksR0FJakJsQyxFQUFvQkEsRUFBb0JtQyxFQUFJLEksK0JDL0VuRGhDLEVBQU9ELFFBQVUsRUFBUSxLLDZCQ0haLFNBQVNrQyxJQWV0QixPQWRBQSxFQUFXdEIsT0FBT3VCLFFBQVUsU0FBVUMsR0FDcEMsSUFBSyxJQUFJbEMsRUFBSSxFQUFHQSxFQUFJbUMsVUFBVUMsT0FBUXBDLElBQUssQ0FDekMsSUFBSXFDLEVBQVNGLFVBQVVuQyxHQUV2QixJQUFLLElBQUl1QixLQUFPYyxFQUNWM0IsT0FBT2tCLFVBQVVDLGVBQWUxQixLQUFLa0MsRUFBUWQsS0FDL0NXLEVBQU9YLEdBQU9jLEVBQU9kLElBSzNCLE9BQU9XLElBR09JLE1BQU1DLEtBQU1KLFdBZjlCLG1DLDZCQ0FlLFNBQVNLLEVBQThCSCxFQUFRSSxHQUM1RCxHQUFjLE1BQVZKLEVBQWdCLE1BQU8sR0FDM0IsSUFFSWQsRUFBS3ZCLEVBRkxrQyxFQUFTLEdBQ1RRLEVBQWFoQyxPQUFPaUMsS0FBS04sR0FHN0IsSUFBS3JDLEVBQUksRUFBR0EsRUFBSTBDLEVBQVdOLE9BQVFwQyxJQUNqQ3VCLEVBQU1tQixFQUFXMUMsR0FDYnlDLEVBQVNHLFFBQVFyQixJQUFRLElBQzdCVyxFQUFPWCxHQUFPYyxFQUFPZCxJQUd2QixPQUFPVyxFQVpULG1DLDZtQkNDV1csRyxNQUFpQyxJQUFNQyxjQUFjLE9DSWhFLElBQUksRUFKSixTQUEwQkMsR0FDeEJBLEtDRUVDLEVBQWdCLENBQ2xCQyxPQUFRLGNBR1YsU0FBU0MsSUFDUCxJQUFJQyxFREdHLEVDRkhDLEVBQVEsS0FDUkMsRUFBTyxLQUNYLE1BQU8sQ0FDTEMsTUFBTyxXQUNMRixFQUFRLEtBQ1JDLEVBQU8sTUFFVEosT0FBUSxXQUNORSxHQUFNLFdBR0osSUFGQSxJQUFJSSxFQUFXSCxFQUVSRyxHQUNMQSxFQUFTUixXQUNUUSxFQUFXQSxFQUFTQyxTQUkxQjNDLElBQUssV0FJSCxJQUhBLElBQUk0QyxFQUFZLEdBQ1pGLEVBQVdILEVBRVJHLEdBQ0xFLEVBQVVDLEtBQUtILEdBQ2ZBLEVBQVdBLEVBQVNDLEtBR3RCLE9BQU9DLEdBRVRFLFVBQVcsU0FBbUJaLEdBQzVCLElBQUlhLEdBQWUsRUFDZkwsRUFBV0YsRUFBTyxDQUNwQk4sU0FBVUEsRUFDVlMsS0FBTSxLQUNOSyxLQUFNUixHQVNSLE9BTklFLEVBQVNNLEtBQ1hOLEVBQVNNLEtBQUtMLEtBQU9ELEVBRXJCSCxFQUFRRyxFQUdILFdBQ0FLLEdBQTBCLE9BQVZSLElBQ3JCUSxHQUFlLEVBRVhMLEVBQVNDLEtBQ1hELEVBQVNDLEtBQUtLLEtBQU9OLEVBQVNNLEtBRTlCUixFQUFPRSxFQUFTTSxLQUdkTixFQUFTTSxLQUNYTixFQUFTTSxLQUFLTCxLQUFPRCxFQUFTQyxLQUU5QkosRUFBUUcsRUFBU0MsU0FPM0IsSUFBSU0sRUFBNEIsV0FDOUIsU0FBU0EsRUFBYUMsRUFBT0MsR0FDM0J6QixLQUFLd0IsTUFBUUEsRUFDYnhCLEtBQUt5QixVQUFZQSxFQUNqQnpCLEtBQUswQixZQUFjLEtBQ25CMUIsS0FBS2tCLFVBQVlULEVBQ2pCVCxLQUFLMkIsb0JBQXNCM0IsS0FBSzJCLG9CQUFvQjFDLEtBQUtlLE1BRzNELElBQUk0QixFQUFTTCxFQUFhbEMsVUFxQzFCLE9BbkNBdUMsRUFBT0MsYUFBZSxTQUFzQmIsR0FFMUMsT0FEQWhCLEtBQUs4QixlQUNFOUIsS0FBS2tCLFVBQVVFLFVBQVVKLElBR2xDWSxFQUFPRyxpQkFBbUIsV0FDeEIvQixLQUFLa0IsVUFBVVIsVUFHakJrQixFQUFPRCxvQkFBc0IsV0FDdkIzQixLQUFLZ0MsZUFDUGhDLEtBQUtnQyxpQkFJVEosRUFBT1AsYUFBZSxXQUNwQixPQUFPWSxRQUFRakMsS0FBSzBCLGNBR3RCRSxFQUFPRSxhQUFlLFdBQ2Y5QixLQUFLMEIsY0FDUjFCLEtBQUswQixZQUFjMUIsS0FBS3lCLFVBQVl6QixLQUFLeUIsVUFBVUksYUFBYTdCLEtBQUsyQixxQkFBdUIzQixLQUFLd0IsTUFBTUosVUFBVXBCLEtBQUsyQixxQkFDdEgzQixLQUFLa0IsVUFBWVAsTUFJckJpQixFQUFPTSxlQUFpQixXQUNsQmxDLEtBQUswQixjQUNQMUIsS0FBSzBCLGNBQ0wxQixLQUFLMEIsWUFBYyxLQUNuQjFCLEtBQUtrQixVQUFVSCxRQUNmZixLQUFLa0IsVUFBWVQsSUFJZGMsRUE5Q3VCLEdDckJqQixNQTlDZixTQUFrQlksR0FDaEIsSUFBSVgsRUFBUVcsRUFBS1gsTUFDYlksRUFBVUQsRUFBS0MsUUFDZkMsRUFBV0YsRUFBS0UsU0FDaEJDLEVBQWUsbUJBQVEsV0FDekIsSUFBSUMsRUFBZSxJQUFJaEIsRUFBYUMsR0FFcEMsT0FEQWUsRUFBYVAsY0FBZ0JPLEVBQWFSLGlCQUNuQyxDQUNMUCxNQUFPQSxFQUNQZSxhQUFjQSxLQUVmLENBQUNmLElBQ0FnQixFQUFnQixtQkFBUSxXQUMxQixPQUFPaEIsRUFBTWlCLGFBQ1osQ0FBQ2pCLElBQ0oscUJBQVUsV0FDUixJQUFJZSxFQUFlRCxFQUFhQyxhQU9oQyxPQU5BQSxFQUFhVCxlQUVUVSxJQUFrQmhCLEVBQU1pQixZQUMxQkYsRUFBYVIsbUJBR1IsV0FDTFEsRUFBYUwsaUJBQ2JLLEVBQWFQLGNBQWdCLFFBRTlCLENBQUNNLEVBQWNFLElBQ2xCLElBQUlFLEVBQVVOLEdBQVc5QixFQUN6QixPQUFvQixJQUFNcUMsY0FBY0QsRUFBUUUsU0FBVSxDQUN4RGxFLE1BQU80RCxHQUNORCxJLHVDQzNCTVEsRUFBOEMsb0JBQVhDLGFBQXFELElBQXBCQSxPQUFPQyxlQUFxRSxJQUFsQ0QsT0FBT0MsU0FBU0osY0FBZ0Msa0JBQWtCLFlDQXZMSyxFQUFjLEdBQ2RDLEVBQXdCLENBQUMsS0FBTSxNQVVuQyxTQUFTQyxFQUF5QkMsRUFBT0MsR0FDdkMsSUFBSUMsRUFBY0YsRUFBTSxHQUN4QixNQUFPLENBQUNDLEVBQU9FLFFBQVNELEVBQWMsR0FHeEMsU0FBU0UsRUFBa0NDLEVBQVlDLEVBQVlDLEdBQ2pFYixHQUEwQixXQUN4QixPQUFPVyxFQUFXekQsV0FBTSxFQUFRMEQsS0FDL0JDLEdBR0wsU0FBU0MsRUFBb0JDLEVBQWtCQyxFQUFnQkMsRUFBbUJDLEVBQWNDLEVBQWtCQyxFQUEyQmxDLEdBRTNJNkIsRUFBaUJNLFFBQVVILEVBQzNCRixFQUFlSyxRQUFVRixFQUN6QkYsRUFBa0JJLFNBQVUsRUFFeEJELEVBQTBCQyxVQUM1QkQsRUFBMEJDLFFBQVUsS0FDcENuQyxLQUlKLFNBQVNvQyxFQUFpQkMsRUFBMEI1QyxFQUFPZSxFQUFjOEIsRUFBb0JULEVBQWtCQyxFQUFnQkMsRUFBbUJHLEVBQTJCbEMsRUFBa0J1QyxHQUU3TCxHQUFLRixFQUFMLENBRUEsSUFBSUcsR0FBaUIsRUFDakJDLEVBQWtCLEtBRWxCQyxFQUFrQixXQUNwQixJQUFJRixFQUFKLENBTUEsSUFDSUcsRUFBZUMsRUFEZkMsRUFBbUJwRCxFQUFNaUIsV0FHN0IsSUFHRWlDLEVBQWdCTCxFQUFtQk8sRUFBa0JoQixFQUFpQk0sU0FDdEUsTUFBT1csR0FDUEYsRUFBUUUsRUFDUkwsRUFBa0JLLEVBR2ZGLElBQ0hILEVBQWtCLE1BSWhCRSxJQUFrQmIsRUFBZUssUUFDOUJKLEVBQWtCSSxTQUNyQm5DLEtBT0Y4QixFQUFlSyxRQUFVUSxFQUN6QlQsRUFBMEJDLFFBQVVRLEVBQ3BDWixFQUFrQkksU0FBVSxFQUU1QkksRUFBNkIsQ0FDM0JRLEtBQU0sZ0JBQ054QixRQUFTLENBQ1BxQixNQUFPQSxRQU9mcEMsRUFBYVAsY0FBZ0J5QyxFQUM3QmxDLEVBQWFULGVBR2IyQyxJQWlCQSxPQWZ5QixXQUt2QixHQUpBRixHQUFpQixFQUNqQmhDLEVBQWFMLGlCQUNiSyxFQUFhUCxjQUFnQixLQUV6QndDLEVBTUYsTUFBTUEsSUFPWixJQUFJTyxFQUFtQixXQUNyQixNQUFPLENBQUMsS0FBTSxJQUdELFNBQVNDLEVBZXhCQyxFQUNBOUMsUUFDZSxJQUFUQSxJQUNGQSxFQUFPLElBR1QsSUFBSStDLEVBQVEvQyxFQUNSZ0QsRUFBdUJELEVBQU1FLGVBQzdCQSxPQUEwQyxJQUF6QkQsRUFBa0MsU0FBVW5ILEdBQy9ELE1BQU8sbUJBQXFCQSxFQUFPLEtBQ2pDbUgsRUFDQUUsRUFBbUJILEVBQU1JLFdBQ3pCQSxPQUFrQyxJQUFyQkQsRUFBOEIsa0JBQW9CQSxFQUMvREUsRUFBd0JMLEVBQU1NLGdCQUM5QkEsT0FBNEMsSUFBMUJELE9BQW1DRSxFQUFZRixFQUNqRUcsRUFBd0JSLEVBQU1kLHlCQUM5QkEsT0FBcUQsSUFBMUJzQixHQUEwQ0EsRUFDckVDLEVBQWlCVCxFQUFNVSxTQUN2QkEsT0FBOEIsSUFBbkJELEVBQTRCLFFBQVVBLEVBR2pERSxHQUZnQlgsRUFBTVksUUFFSFosRUFBTWEsWUFDekJBLE9BQWtDLElBQXJCRixHQUFzQ0EsRUFDbkRHLEVBQWdCZCxFQUFNOUMsUUFDdEJBLE9BQTRCLElBQWxCNEQsRUFBMkIxRixFQUFvQjBGLEVBQ3pEQyxFQUFpQixZQUE4QmYsRUFBTyxDQUFDLGlCQUFrQixhQUFjLGtCQUFtQiwyQkFBNEIsV0FBWSxVQUFXLGFBQWMsWUFrQjNLeEMsRUFBVU4sRUFDZCxPQUFPLFNBQXlCOEQsR0FLOUIsSUFBSUMsRUFBdUJELEVBQWlCRSxhQUFlRixFQUFpQmxJLE1BQVEsWUFDaEZvSSxFQUFjaEIsRUFBZWUsR0FFN0JFLEVBQXlCLFlBQVMsR0FBSUosRUFBZ0IsQ0FDeERiLGVBQWdCQSxFQUNoQkUsV0FBWUEsRUFDWkUsZ0JBQWlCQSxFQUNqQnBCLHlCQUEwQkEsRUFDMUJ3QixTQUFVQSxFQUNWUSxZQUFhQSxFQUNiRCxxQkFBc0JBLEVBQ3RCRCxpQkFBa0JBLElBR2hCSSxFQUFPTCxFQUFlSyxLQVMxQixJQUFJQyxFQUFrQkQsRUFBTyxVQUFVLFNBQVU5RixHQUMvQyxPQUFPQSxLQUdULFNBQVNnRyxFQUFnQkMsR0FDdkIsSUFBSUMsRUFBVyxtQkFBUSxXQUlyQixJQUFJQyxFQUF5QkYsRUFBTUUsdUJBQy9CNUMsRUFBZSxZQUE4QjBDLEVBQU8sQ0FBQywyQkFFekQsTUFBTyxDQUFDQSxFQUFNckUsUUFBU3VFLEVBQXdCNUMsS0FDOUMsQ0FBQzBDLElBQ0FHLEVBQWVGLEVBQVMsR0FDeEJDLEVBQXlCRCxFQUFTLEdBQ2xDM0MsRUFBZTJDLEVBQVMsR0FFeEJHLEVBQWUsbUJBQVEsV0FHekIsT0FBT0QsR0FBZ0JBLEVBQWFFLFVBQVksNEJBQWdDLElBQU1uRSxjQUFjaUUsRUFBYUUsU0FBVSxPQUFTRixFQUFlbEUsSUFDbEosQ0FBQ2tFLEVBQWNsRSxJQUVkSixFQUFlLHFCQUFXdUUsR0FJMUJFLEVBQXdCOUUsUUFBUXdFLEVBQU1qRixRQUFVUyxRQUFRd0UsRUFBTWpGLE1BQU1pQixXQUFhUixRQUFRd0UsRUFBTWpGLE1BQU13RixVQUMzRS9FLFFBQVFLLElBQWlCTCxRQUFRSyxFQUFhZCxPQU81RSxJQUFJQSxFQUFRdUYsRUFBd0JOLEVBQU1qRixNQUFRYyxFQUFhZCxNQUMzRDZDLEVBQXFCLG1CQUFRLFdBRy9CLE9BL0NKLFNBQTZCN0MsR0FDM0IsT0FBT3lELEVBQWdCekQsRUFBTXdGLFNBQVVYLEdBOEM5QlksQ0FBb0J6RixLQUMxQixDQUFDQSxJQUVBMEYsRUFBWSxtQkFBUSxXQUN0QixJQUFLOUMsRUFBMEIsT0FBT25CLEVBR3RDLElBQUlWLEVBQWUsSUFBSWhCLEVBQWFDLEVBQU91RixFQUF3QixLQUFPekUsRUFBYUMsY0FLbkZSLEVBQW1CUSxFQUFhUixpQkFBaUI5QyxLQUFLc0QsR0FDMUQsTUFBTyxDQUFDQSxFQUFjUixLQUNyQixDQUFDUCxFQUFPdUYsRUFBdUJ6RSxJQUM5QkMsRUFBZTJFLEVBQVUsR0FDekJuRixFQUFtQm1GLEVBQVUsR0FJN0JDLEVBQXlCLG1CQUFRLFdBQ25DLE9BQUlKLEVBSUt6RSxFQUtGLFlBQVMsR0FBSUEsRUFBYyxDQUNoQ0MsYUFBY0EsTUFFZixDQUFDd0UsRUFBdUJ6RSxFQUFjQyxJQUdyQzZFLEVBQWMscUJBQVdsRSxFQUEwQkYsRUFBYStCLEdBRWhFc0MsRUFEZUQsRUFBWSxHQUNjLEdBQ3pDOUMsRUFBK0I4QyxFQUFZLEdBRy9DLEdBQUlDLEdBQTZCQSxFQUEwQjFDLE1BQ3pELE1BQU0wQyxFQUEwQjFDLE1BSWxDLElBQUlkLEVBQWlCLG1CQUNqQkQsRUFBbUIsaUJBQU9HLEdBQzFCRSxFQUE0QixtQkFDNUJILEVBQW9CLGtCQUFPLEdBQzNCRSxFQUFtQnVDLEdBQWdCLFdBT3JDLE9BQUl0QyxFQUEwQkMsU0FBV0gsSUFBaUJILEVBQWlCTSxRQUNsRUQsRUFBMEJDLFFBTzVCRyxFQUFtQjdDLEVBQU1pQixXQUFZc0IsS0FDM0MsQ0FBQ3ZDLEVBQU82RixFQUEyQnRELElBSXRDUixFQUFrQ0ksRUFBcUIsQ0FBQ0MsRUFBa0JDLEVBQWdCQyxFQUFtQkMsRUFBY0MsRUFBa0JDLEVBQTJCbEMsSUFFeEt3QixFQUFrQ1ksRUFBa0IsQ0FBQ0MsRUFBMEI1QyxFQUFPZSxFQUFjOEIsRUFBb0JULEVBQWtCQyxFQUFnQkMsRUFBbUJHLEVBQTJCbEMsRUFBa0J1QyxHQUErQixDQUFDOUMsRUFBT2UsRUFBYzhCLElBRy9RLElBQUlpRCxFQUEyQixtQkFBUSxXQUNyQyxPQUFvQixJQUFNM0UsY0FBY3VELEVBQWtCLFlBQVMsR0FBSWxDLEVBQWtCLENBQ3ZGdUQsSUFBS1osT0FFTixDQUFDQSxFQUF3QlQsRUFBa0JsQyxJQWU5QyxPQVpvQixtQkFBUSxXQUMxQixPQUFJSSxFQUlrQixJQUFNekIsY0FBY2tFLEVBQWFqRSxTQUFVLENBQzdEbEUsTUFBT3lJLEdBQ05HLEdBR0VBLElBQ04sQ0FBQ1QsRUFBY1MsRUFBMEJILElBSzlDLElBQUlLLEVBQVVsQixFQUFPLElBQU1tQixLQUFLakIsR0FBbUJBLEVBSW5ELEdBSEFnQixFQUFRdEIsaUJBQW1CQSxFQUMzQnNCLEVBQVFwQixZQUFjQSxFQUVsQkwsRUFBWSxDQUNkLElBQUkyQixFQUFZLElBQU0zQixZQUFXLFNBQTJCVSxFQUFPYyxHQUNqRSxPQUFvQixJQUFNNUUsY0FBYzZFLEVBQVMsWUFBUyxHQUFJZixFQUFPLENBQ25FRSx1QkFBd0JZLFFBSzVCLE9BRkFHLEVBQVV0QixZQUFjQSxFQUN4QnNCLEVBQVV4QixpQkFBbUJBLEVBQ3RCLElBQWF3QixFQUFXeEIsR0FHakMsT0FBTyxJQUFhc0IsRUFBU3RCLElDOVdqQyxTQUFTeUIsRUFBR0MsRUFBR0MsR0FDYixPQUFJRCxJQUFNQyxFQUNLLElBQU5ELEdBQWlCLElBQU5DLEdBQVcsRUFBSUQsR0FBTSxFQUFJQyxFQUVwQ0QsR0FBTUEsR0FBS0MsR0FBTUEsRUFJYixTQUFTQyxFQUFhQyxFQUFNQyxHQUN6QyxHQUFJTCxFQUFHSSxFQUFNQyxHQUFPLE9BQU8sRUFFM0IsR0FBb0IsaUJBQVRELEdBQThCLE9BQVRBLEdBQWlDLGlCQUFUQyxHQUE4QixPQUFUQSxFQUMzRSxPQUFPLEVBR1QsSUFBSUMsRUFBUTlKLE9BQU9pQyxLQUFLMkgsR0FDcEJHLEVBQVEvSixPQUFPaUMsS0FBSzRILEdBQ3hCLEdBQUlDLEVBQU1wSSxTQUFXcUksRUFBTXJJLE9BQVEsT0FBTyxFQUUxQyxJQUFLLElBQUlwQyxFQUFJLEVBQUdBLEVBQUl3SyxFQUFNcEksT0FBUXBDLElBQ2hDLElBQUtVLE9BQU9rQixVQUFVQyxlQUFlMUIsS0FBS29LLEVBQU1DLEVBQU14SyxNQUFRa0ssRUFBR0ksRUFBS0UsRUFBTXhLLElBQUt1SyxFQUFLQyxFQUFNeEssS0FDMUYsT0FBTyxFQUlYLE9BQU8sRSxZQ3hCRixTQUFTMEssRUFBdUJDLEdBQ3JDLE9BQU8sU0FBOEJwQixFQUFVcUIsR0FDN0MsSUFBSUMsRUFBV0YsRUFBWXBCLEVBQVVxQixHQUVyQyxTQUFTRSxJQUNQLE9BQU9ELEVBSVQsT0FEQUMsRUFBaUJDLG1CQUFvQixFQUM5QkQsR0FVSixTQUFTRSxFQUFxQkMsR0FDbkMsT0FBd0MsT0FBakNBLEVBQVdGLHdCQUErRC9DLElBQWpDaUQsRUFBV0Ysa0JBQWtDdkcsUUFBUXlHLEVBQVdGLG1CQUEyQyxJQUF0QkUsRUFBVzdJLE9BYzNJLFNBQVM4SSxFQUFtQkQsRUFBWXBELEdBQzdDLE9BQU8sU0FBMkIwQixFQUFVN0UsR0FDeEJBLEVBQUtpRSxZQUF2QixJQUVJd0MsRUFBUSxTQUF5QkMsRUFBaUJDLEdBQ3BELE9BQU9GLEVBQU1KLGtCQUFvQkksRUFBTUYsV0FBV0csRUFBaUJDLEdBQVlGLEVBQU1GLFdBQVdHLElBcUJsRyxPQWpCQUQsRUFBTUosbUJBQW9CLEVBRTFCSSxFQUFNRixXQUFhLFNBQWdDRyxFQUFpQkMsR0FDbEVGLEVBQU1GLFdBQWFBLEVBQ25CRSxFQUFNSixrQkFBb0JDLEVBQXFCQyxHQUMvQyxJQUFJakMsRUFBUW1DLEVBQU1DLEVBQWlCQyxHQVNuQyxNQVBxQixtQkFBVnJDLElBQ1RtQyxFQUFNRixXQUFhakMsRUFDbkJtQyxFQUFNSixrQkFBb0JDLEVBQXFCaEMsR0FDL0NBLEVBQVFtQyxFQUFNQyxFQUFpQkMsSUFJMUJyQyxHQUdGbUMsR0M1Q0ksT0FmUixTQUEwQ0csR0FDL0MsTUFBcUMsbUJBQXZCQSxFQUFvQ0osRUFBbUJJLFFBQTRDdEQsR0FFNUcsU0FBeUNzRCxHQUM5QyxPQUFRQSxPQUlIdEQsRUFKd0IwQyxHQUF1QixTQUFVbkIsR0FDNUQsTUFBTyxDQUNMQSxTQUFVQSxPQUlULFNBQXdDK0IsR0FDN0MsT0FBT0EsR0FBb0QsaUJBQXZCQSxFQUFrQ1osR0FBdUIsU0FBVW5CLEdBQ3JHLE9BQU8sNkJBQW1CK0IsRUFBb0IvQixXQUMzQ3ZCLElDTlEsT0FSUixTQUF1Q3VELEdBQzVDLE1BQWtDLG1CQUFwQkEsRUFBaUNMLEVBQW1CSyxRQUFzQ3ZELEdBRW5HLFNBQXNDdUQsR0FDM0MsT0FBUUEsT0FFSHZELEVBRnFCMEMsR0FBdUIsV0FDL0MsTUFBTyxRQ0pKLFNBQVNjLEVBQWtCQyxFQUFZQyxFQUFlTCxHQUMzRCxPQUFPLFlBQVMsR0FBSUEsRUFBVUksRUFBWUMsR0FnQzdCLE9BUlIsU0FBa0NDLEdBQ3ZDLE1BQTZCLG1CQUFmQSxFQXZCVCxTQUE0QkEsR0FDakMsT0FBTyxTQUE2QnBDLEVBQVU3RSxHQUMxQkEsRUFBS2lFLFlBQXZCLElBSUlpRCxFQUhBL0MsRUFBT25FLEVBQUttRSxLQUNaZ0QsRUFBc0JuSCxFQUFLbUgsb0JBQzNCQyxHQUFhLEVBRWpCLE9BQU8sU0FBeUJMLEVBQVlDLEVBQWVMLEdBQ3pELElBQUlVLEVBQWtCSixFQUFXRixFQUFZQyxFQUFlTCxHQVU1RCxPQVJJUyxFQUNHakQsR0FBU2dELEVBQW9CRSxFQUFpQkgsS0FBY0EsRUFBY0csSUFFL0VELEdBQWEsRUFDYkYsRUFBY0csR0FJVEgsSUFLK0JJLENBQW1CTCxRQUFjM0QsR0FFdEUsU0FBaUMyRCxHQUN0QyxPQUFRQSxPQUVKM0QsRUFGaUIsV0FDbkIsT0FBT3dELEtDOUJKLFNBQVNTLEVBQWdDVixFQUFpQkQsRUFBb0JLLEVBQVlwQyxHQUMvRixPQUFPLFNBQWtDN0QsRUFBTzJGLEdBQzlDLE9BQU9NLEVBQVdKLEVBQWdCN0YsRUFBTzJGLEdBQVdDLEVBQW1CL0IsRUFBVThCLEdBQVdBLElBR3pGLFNBQVNhLEVBQThCWCxFQUFpQkQsRUFBb0JLLEVBQVlwQyxFQUFVN0UsR0FDdkcsSUFJSWdCLEVBQ0EyRixFQUNBSSxFQUNBQyxFQUNBRSxFQVJBTyxFQUFpQnpILEVBQUt5SCxlQUN0QkMsRUFBbUIxSCxFQUFLMEgsaUJBQ3hCQyxFQUFxQjNILEVBQUsySCxtQkFDMUJDLEdBQW9CLEVBdUN4QixTQUFTQyxFQUFzQkMsRUFBV0MsR0FDeEMsSUFSSUMsRUFDQUMsRUFPQUMsR0FBZ0JSLEVBQWlCSyxFQUFjcEIsR0FDL0N3QixHQUFnQlYsRUFBZUssRUFBVzlHLEdBRzlDLE9BRkFBLEVBQVE4RyxFQUNSbkIsRUFBV29CLEVBQ1BHLEdBQWdCQyxHQTFCcEJwQixFQUFhRixFQUFnQjdGLEVBQU8yRixHQUNoQ0MsRUFBbUJQLG9CQUFtQlcsRUFBZ0JKLEVBQW1CL0IsRUFBVThCLElBQ3ZGTyxFQUFjRCxFQUFXRixFQUFZQyxFQUFlTCxJQXlCaER1QixHQXBCQXJCLEVBQWdCUixvQkFBbUJVLEVBQWFGLEVBQWdCN0YsRUFBTzJGLElBQ3ZFQyxFQUFtQlAsb0JBQW1CVyxFQUFnQkosRUFBbUIvQixFQUFVOEIsSUFDdkZPLEVBQWNELEVBQVdGLEVBQVlDLEVBQWVMLElBbUJoRHdCLEdBZEFILEVBQWlCbkIsRUFBZ0I3RixFQUFPMkYsR0FDeENzQixHQUFxQk4sRUFBbUJLLEVBQWdCakIsR0FDNURBLEVBQWFpQixFQUNUQyxJQUFtQmYsRUFBY0QsRUFBV0YsRUFBWUMsRUFBZUwsSUFDcEVPLEdBV0FBLEVBR1QsT0FBTyxTQUFnQ1ksRUFBV0MsR0FDaEQsT0FBT0gsRUFBb0JDLEVBQXNCQyxFQUFXQyxJQXpDNURoQixFQUFhRixFQUZiN0YsRUEyQzRGOEcsRUExQzVGbkIsRUEwQ3VHb0IsR0F4Q3ZHZixFQUFnQkosRUFBbUIvQixFQUFVOEIsR0FDN0NPLEVBQWNELEVBQVdGLEVBQVlDLEVBQWVMLEdBQ3BEaUIsR0FBb0IsRUFDYlYsSUE2Q0ksU0FBU2tCLEVBQTBCdkQsRUFBVTlCLEdBQzFELElBQUlzRixFQUFzQnRGLEVBQU1zRixvQkFDNUJDLEVBQXlCdkYsRUFBTXVGLHVCQUMvQkMsRUFBaUJ4RixFQUFNd0YsZUFDdkJyQyxFQUFVLFlBQThCbkQsRUFBTyxDQUFDLHNCQUF1Qix5QkFBMEIsbUJBRWpHOEQsRUFBa0J3QixFQUFvQnhELEVBQVVxQixHQUNoRFUsRUFBcUIwQixFQUF1QnpELEVBQVVxQixHQUN0RGUsRUFBYXNCLEVBQWUxRCxFQUFVcUIsR0FPMUMsT0FEc0JBLEVBQVEvQixLQUFPcUQsRUFBZ0NELEdBQzlDVixFQUFpQkQsRUFBb0JLLEVBQVlwQyxFQUFVcUIsR0M1RHBGLFNBQVNzQyxFQUFNQyxFQUFLQyxFQUFXN00sR0FDN0IsSUFBSyxJQUFJUCxFQUFJb04sRUFBVWhMLE9BQVMsRUFBR3BDLEdBQUssRUFBR0EsSUFBSyxDQUM5QyxJQUFJcU4sRUFBU0QsRUFBVXBOLEdBQUdtTixHQUMxQixHQUFJRSxFQUFRLE9BQU9BLEVBR3JCLE9BQU8sU0FBVTlELEVBQVVxQixHQUN6QixNQUFNLElBQUkwQyxNQUFNLGdDQUFrQ0gsRUFBTSxRQUFVNU0sRUFBTyx1Q0FBeUNxSyxFQUFRbEMscUJBQXVCLE1BSXJKLFNBQVM2RSxFQUFZQyxFQUFHQyxHQUN0QixPQUFPRCxJQUFNQyxFQUtSLFNBQVNDLEVBQWNDLEdBQzVCLElBQUlqSixPQUFpQixJQUFWaUosRUFBbUIsR0FBS0EsRUFDL0JDLEVBQWtCbEosRUFBS21KLFdBQ3ZCQSxPQUFpQyxJQUFwQkQsRUFBNkJyRyxFQUFrQnFHLEVBQzVERSxFQUF3QnBKLEVBQUtxSix5QkFDN0JBLE9BQXFELElBQTFCRCxFQUFtQyxFQUFrQ0EsRUFDaEdFLEVBQXdCdEosRUFBS3VKLDRCQUM3QkEsT0FBd0QsSUFBMUJELEVBQW1DLEVBQXFDQSxFQUN0R0UsRUFBd0J4SixFQUFLeUosb0JBQzdCQSxPQUFnRCxJQUExQkQsRUFBbUMsRUFBNkJBLEVBQ3RGRSxFQUF1QjFKLEVBQUs4QyxnQkFDNUJBLE9BQTJDLElBQXpCNEcsRUFBa0MsRUFBeUJBLEVBRWpGLE9BQU8sU0FBaUI3QyxFQUFpQkQsRUFBb0JLLEVBQVlsRSxRQUN6RCxJQUFWQSxJQUNGQSxFQUFRLElBR1YsSUFBSTRHLEVBQVE1RyxFQUNSNkcsRUFBYUQsRUFBTXhGLEtBQ25CQSxPQUFzQixJQUFmeUYsR0FBK0JBLEVBQ3RDQyxFQUF1QkYsRUFBTWxDLGVBQzdCQSxPQUEwQyxJQUF6Qm9DLEVBQWtDaEIsRUFBY2dCLEVBQ2pFQyxFQUF3QkgsRUFBTWpDLGlCQUM5QkEsT0FBNkMsSUFBMUJvQyxFQUFtQ25FLEVBQWVtRSxFQUNyRUMsRUFBd0JKLEVBQU1oQyxtQkFDOUJBLE9BQStDLElBQTFCb0MsRUFBbUNwRSxFQUFlb0UsRUFDdkVDLEVBQXdCTCxFQUFNeEMsb0JBQzlCQSxPQUFnRCxJQUExQjZDLEVBQW1DckUsRUFBZXFFLEVBQ3hFQyxFQUFlLFlBQThCTixFQUFPLENBQUMsT0FBUSxpQkFBa0IsbUJBQW9CLHFCQUFzQix3QkFFekh0QixFQUFzQkcsRUFBTTNCLEVBQWlCd0MsRUFBMEIsbUJBQ3ZFZixFQUF5QkUsRUFBTTVCLEVBQW9CMkMsRUFBNkIsc0JBQ2hGaEIsRUFBaUJDLEVBQU12QixFQUFZd0MsRUFBcUIsY0FDNUQsT0FBT04sRUFBV3JHLEVBQWlCLFlBQVMsQ0FFMUNLLFdBQVksVUFFWkYsZUFBZ0IsU0FBd0JwSCxHQUN0QyxNQUFPLFdBQWFBLEVBQU8sS0FHN0JvRyx5QkFBMEJuQyxRQUFRK0csR0FFbEN3QixvQkFBcUJBLEVBQ3JCQyx1QkFBd0JBLEVBQ3hCQyxlQUFnQkEsRUFDaEJwRSxLQUFNQSxFQUNOc0QsZUFBZ0JBLEVBQ2hCQyxpQkFBa0JBLEVBQ2xCQyxtQkFBb0JBLEVBQ3BCUixvQkFBcUJBLEdBQ3BCOEMsS0FHcUIsTUFBQWpCLElDOUVyQixTQUFTLElBT2QsT0FObUIscUJBQVc3SyxHQ1Z6QixTQUFTK0wsRUFBZ0JqSyxRQUNkLElBQVpBLElBQ0ZBLEVBQVU5QixHQUdaLElBQUlnTSxFQUFrQmxLLElBQVk5QixFQUFvQixFQUF5QixXQUM3RSxPQUFPLHFCQUFXOEIsSUFFcEIsT0FBTyxXQUlMLE9BSHVCa0ssSUFDTTlLLE9BcUIxQixJQUFJLEVBQXdCNkssSUNoQzVCLFNBQVNFLEVBQW1CbkssUUFDakIsSUFBWkEsSUFDRkEsRUFBVTlCLEdBR1osSUFBSWtNLEVBQVdwSyxJQUFZOUIsRUFBb0IsRUFBa0IrTCxFQUFnQmpLLEdBQ2pGLE9BQU8sV0FFTCxPQURZb0ssSUFDQ3hGLFVBeUJWLElBQUl5RixFQUEyQkYsSUNwQ2xDRyxFQUFjLFNBQXFCekIsRUFBR0MsR0FDeEMsT0FBT0QsSUFBTUMsR0E2RVIsU0FBU3lCLEVBQW1CdkssUUFDakIsSUFBWkEsSUFDRkEsRUFBVTlCLEdBR1osSUFBSWdNLEVBQWtCbEssSUFBWTlCLEVBQW9CLEVBQXlCLFdBQzdFLE9BQU8scUJBQVc4QixJQUVwQixPQUFPLFNBQXFCd0ssRUFBVUMsUUFDakIsSUFBZkEsSUFDRkEsRUFBYUgsR0FPZixJQUFJSSxFQUFtQlIsSUFJbkJTLEVBL0ZSLFNBQTZDSCxFQUFVQyxFQUFZckwsRUFBT3dMLEdBQ3hFLElBYUlELEVBVkFFLEVBSGMsc0JBQVcsU0FBVXpOLEdBQ3JDLE9BQU9BLEVBQUksSUFDVixHQUMyQixHQUUxQitDLEVBQWUsbUJBQVEsV0FDekIsT0FBTyxJQUFJaEIsRUFBYUMsRUFBT3dMLEtBQzlCLENBQUN4TCxFQUFPd0wsSUFDUEUsRUFBa0MsbUJBQ2xDQyxFQUFpQixtQkFDakJ2SSxFQUFtQixtQkFDbkJ3SSxFQUFzQixtQkFDdEJDLEVBQWE3TCxFQUFNaUIsV0FHdkIsSUFFSXNLLEVBREVILElBQWFPLEVBQWVqSixTQUFXbUosSUFBZXpJLEVBQWlCVixTQUFXZ0osRUFBZ0NoSixRQUNwRzBJLEVBQVNTLEdBRVRELEVBQW9CbEosUUFFdEMsTUFBT29KLEdBS1AsTUFKSUosRUFBZ0NoSixVQUNsQ29KLEVBQUlDLFNBQVcsNERBQThETCxFQUFnQ2hKLFFBQVFzSixNQUFRLFFBR3pIRixFQXFDUixPQWxDQXpLLEdBQTBCLFdBQ3hCc0ssRUFBZWpKLFFBQVUwSSxFQUN6QmhJLEVBQWlCVixRQUFVbUosRUFDM0JELEVBQW9CbEosUUFBVTZJLEVBQzlCRyxFQUFnQ2hKLGFBQVV1QixLQUU1QzVDLEdBQTBCLFdBQ3hCLFNBQVM0QixJQUNQLElBQ0UsSUFBSWdKLEVBQW1CTixFQUFlakosUUFBUTFDLEVBQU1pQixZQUVwRCxHQUFJb0ssRUFBV1ksRUFBa0JMLEVBQW9CbEosU0FDbkQsT0FHRmtKLEVBQW9CbEosUUFBVXVKLEVBQzlCLE1BQU9ILEdBS1BKLEVBQWdDaEosUUFBVW9KLEVBRzVDTCxJQU1GLE9BSEExSyxFQUFhUCxjQUFnQnlDLEVBQzdCbEMsRUFBYVQsZUFDYjJDLElBQ08sV0FDTCxPQUFPbEMsRUFBYUwsb0JBRXJCLENBQUNWLEVBQU9lLElBQ0p3SyxFQStCZVcsQ0FBb0NkLEVBQVVDLEVBSHREQyxFQUFpQnRMLE1BQ1pzTCxFQUFpQnZLLGNBSWxDLE9BREEsd0JBQWN3SyxHQUNQQSxHQTJCSixJZi9IaUNZLEVlK0g3QixFQUEyQmhCLEksT2YvSEVnQixFZ0JHL0IsMEJoQkZBLEVBQVFBLEcsb0dpQlJKLEVBQUFDLGFBQWUsQ0FDMUJDLFFBQVMsVUFDVEMsYUFBYyxnQkFDZEMsZUFBZ0Isa0JBQ2hCQyxZQUFhLGVBQ2JDLFNBQVUsV0FDVkMsU0FBVSxXQUNWQyxpQkFBa0Isb0JBQ2xCQyxPQUFRLFcsd0xDUlYsY0FFYSxFQUFBQyxhQUFlLFVBQU01RyxNQUFLLFNBQUNoQixHLE1BQ3RDLE9BQ0UsK0JBQUs2SCxVQUFVLGdDQUNiLGtDQUFLN0gsRUFBTThILE1BQ0ksUUFETSxFQUNwQjlILEVBQU1wRSxnQkFBUSxRQUFJLFUsd0xDTnpCLGNBRWEsRUFBQW1NLGFBQWUsVUFBTS9HLE1BQUssU0FBQ2hCLEdBQ3RDLE9BQ0UsK0JBQUs2SCxVQUFVLGdDQUNiLHFDQUFRN0gsRUFBTThILE1BQ2I5SCxFQUFNcEUsYyw2QkNMYixJQUFJb00sRUFBbUJ6TyxNQUFRQSxLQUFLeU8sa0JBQXFCdFEsT0FBT1ksT0FBUyxTQUFVYixFQUFHTCxFQUFHNlEsRUFBR0MsUUFDN0VsSixJQUFQa0osSUFBa0JBLEVBQUtELEdBQzNCdlEsT0FBT0MsZUFBZUYsRUFBR3lRLEVBQUksQ0FBRXRRLFlBQVksRUFBTUMsSUFBSyxXQUFhLE9BQU9ULEVBQUU2USxPQUMzRSxTQUFVeFEsRUFBR0wsRUFBRzZRLEVBQUdDLFFBQ1RsSixJQUFQa0osSUFBa0JBLEVBQUtELEdBQzNCeFEsRUFBRXlRLEdBQU05USxFQUFFNlEsS0FFVkUsRUFBZ0I1TyxNQUFRQSxLQUFLNE8sY0FBaUIsU0FBUy9RLEVBQUdOLEdBQzFELElBQUssSUFBSWdDLEtBQUsxQixFQUFhLFlBQU4wQixHQUFvQmhDLEVBQVErQixlQUFlQyxJQUFJa1AsRUFBZ0JsUixFQUFTTSxFQUFHMEIsSUFFcEdwQixPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sSUFDdERrUSxFQUFhLEVBQVEsSUFBb0JyUixHQUN6Q3FSLEVBQWEsRUFBUSxJQUF1QnJSLEdBQzVDcVIsRUFBYSxFQUFRLElBQTJCclIsR0FDaERxUixFQUFhLEVBQVEsSUFBeUNyUixHQUM5RHFSLEVBQWEsRUFBUSxJQUFtQ3JSLEdBQ3hEcVIsRUFBYSxFQUFRLElBQTRCclIsR0FDakRxUixFQUFhLEVBQVEsSUFBK0JyUixHQUNwRHFSLEVBQWEsRUFBUSxJQUFxQnJSLEdBQzFDcVIsRUFBYSxFQUFRLElBQXlCclIsR0FDOUNxUixFQUFhLEVBQVEsSUFBdUNyUixHQUM1RHFSLEVBQWEsRUFBUSxJQUF1QnJSLEksOEJDcEI1QyxTQUFTc1IsSUFFUCxHQUM0QyxvQkFBbkNDLGdDQUM0QyxtQkFBNUNBLCtCQUErQkQsU0FGeEMsQ0FNSSxFQVVKLElBRUVDLCtCQUErQkQsU0FBU0EsR0FDeEMsTUFBT3ZCLEdBR1B5QixRQUFRcEssTUFBTTJJLEtBT2hCdUIsR0FDQXJSLEVBQU9ELFFBQVUsRUFBUSxLLDRIQ2xDZCxFQUFBeVIsT0FBUyxTQUFJQyxFQUFZQyxHQUNwQyxJQUFNQyxFQUFRRixFQUFNNU8sUUFBUTZPLEdBRXhCQyxHQUFTLEdBQ1hGLEVBQU1HLE9BQU9ELEVBQU8sSUFJWCxFQUFBRSxXQUFhLFNBQUNkLEVBQWNlLEdBQ3ZDLE9BQU9mLEVBQUtnQixVQUFVLEVBQUdoQixFQUFLMU8sT0FBU3lQLElBRzVCLEVBQUFFLE1BQVEsU0FBQ0MsRUFBZUMsR0FDbkMsT0FBQUMsTUFBTUQsRUFBTUQsR0FDVEcsS0FBSyxJQUNMQyxLQUFJLFNBQUNDLEVBQUdyUyxHQUFNLE9BQUFnUyxFQUFRaFMsTUFFZCxFQUFBc1MsT0FBUyxTQUFJVCxFQUFlNVEsR0FBa0IsT0FBQWlSLE1BQU1MLEdBQU9NLEtBQUtsUixLLDZCQ2Q3RSxJQUFJc1IsRUFBWWhRLE1BQVFBLEtBQUtnUSxVQUFhLFdBU3RDLE9BUkFBLEVBQVc3UixPQUFPdUIsUUFBVSxTQUFTZixHQUNqQyxJQUFLLElBQUlhLEVBQUcvQixFQUFJLEVBQUd5QixFQUFJVSxVQUFVQyxPQUFRcEMsRUFBSXlCLEVBQUd6QixJQUU1QyxJQUFLLElBQUk4QixLQURUQyxFQUFJSSxVQUFVbkMsR0FDT1UsT0FBT2tCLFVBQVVDLGVBQWUxQixLQUFLNEIsRUFBR0QsS0FDekRaLEVBQUVZLEdBQUtDLEVBQUVELElBRWpCLE9BQU9aLElBRUtvQixNQUFNQyxLQUFNSixZQUU1QnFRLEVBQWtCalEsTUFBUUEsS0FBS2lRLGdCQUFtQixXQUNsRCxJQUFLLElBQUl6USxFQUFJLEVBQUcvQixFQUFJLEVBQUd5UyxFQUFLdFEsVUFBVUMsT0FBUXBDLEVBQUl5UyxFQUFJelMsSUFBSytCLEdBQUtJLFVBQVVuQyxHQUFHb0MsT0FDeEUsSUFBSXRCLEVBQUlvUixNQUFNblEsR0FBSWtQLEVBQUksRUFBM0IsSUFBOEJqUixFQUFJLEVBQUdBLEVBQUl5UyxFQUFJelMsSUFDekMsSUFBSyxJQUFJd04sRUFBSXJMLFVBQVVuQyxHQUFJMFMsRUFBSSxFQUFHQyxFQUFLbkYsRUFBRXBMLE9BQVFzUSxFQUFJQyxFQUFJRCxJQUFLekIsSUFDMURuUSxFQUFFbVEsR0FBS3pELEVBQUVrRixHQUNqQixPQUFPNVIsR0FFWEosT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQUVtQixPQUFPLElBQ3REbkIsRUFBUThTLE1BQVE5UyxFQUFRK1MsZ0JBQWtCL1MsRUFBUWdULGdCQUFrQmhULEVBQVFpVCxTQUFXalQsRUFBUWtULDhCQUEyQixFQUMxSGxULEVBQVFrVCx5QkFBMkIsU0FBVUMsRUFBTUMsR0FFL0MsSUFEQSxJQUFJN0YsRUFBU2tGLEVBQVMsR0FBSVUsR0FDakJFLEVBQUssRUFBR0MsRUFBSzFTLE9BQU9pQyxLQUFLdVEsR0FBUUMsRUFBS0MsRUFBR2hSLE9BQVErUSxJQUFNLENBQzVELElBQUk1UixFQUFNNlIsRUFBR0QsR0FDVEUsRUFBTUgsRUFBTTNSLFFBQ0p5RyxJQUFScUwsSUFDQWhHLEVBQU85TCxHQUFPOFIsR0FHdEIsT0FBT2hHLEdBRVh2TixFQUFRaVQsU0FBVyxTQUFVTyxFQUFLM1EsR0FDOUIsT0FBT2pDLE9BQU9pQyxLQUFLMlEsR0FDZEMsUUFBTyxTQUFVaFMsR0FBTyxPQUFRb0IsRUFBSzZRLFNBQVNqUyxNQUM5Q2tTLFFBQU8sU0FBVXBHLEVBQVE5TCxHQUMxQixJQUFJNlIsRUFFSixPQURBMVMsT0FBT3VCLE9BQU9vTCxJQUFTK0YsRUFBSyxJQUFPN1IsR0FBTytSLEVBQUkvUixHQUFNNlIsSUFDN0MvRixJQUNSLEtBRVB2TixFQUFRZ1QsZ0JBQWtCLFNBQVVHLEVBQU1DLEdBQ3RDLE9BQU9WLEVBQWU5UixPQUFPaUMsS0FBS3NRLEdBQU92UyxPQUFPaUMsS0FBS3VRLElBQVFPLFFBQU8sU0FBVXBHLEVBQVFxRyxHQUNsRixJQUFJblMsRUFBTW1TLEVBSVYsT0FISVQsRUFBSzFSLEtBQVMyUixFQUFNM1IsS0FDcEI4TCxFQUFPOUwsR0FBTzJSLEVBQU0zUixJQUVqQjhMLElBQ1IsS0FFUHZOLEVBQVErUyxnQkFBa0IsU0FBVUksRUFBTUMsR0FDdEMsSUFBSVMsRUFBV2pULE9BQU9pQyxLQUFLc1EsR0FDdkJXLEVBQVlsVCxPQUFPaUMsS0FBS3VRLEdBQzVCLEdBQUlTLEVBQVN2UixTQUFXd1IsRUFBVXhSLE9BQzlCLE9BQU8sRUFFWCxJQUFLLElBQUkrUSxFQUFLLEVBQUdVLEVBQWFGLEVBQVVSLEVBQUtVLEVBQVd6UixPQUFRK1EsSUFBTSxDQUNsRSxJQUFJNVIsRUFBTXNTLEVBQVdWLEdBQ3JCLEdBQUlGLEVBQUsxUixLQUFTMlIsRUFBTTNSLEdBQ3BCLE9BQU8sRUFHZixPQUFPLEdBRVh6QixFQUFROFMsTUFBUSxTQUFVM1IsRUFBTzZTLEVBQUtDLEdBQ2xDLE9BQUk5UyxFQUFRNlMsRUFDREEsRUFDRjdTLEVBQVE4UyxFQUNOQSxFQUVBOVMsSSw2QkN4RWYsb1RBUUkrUyxFQUFlLFdBQ2pCLE9BQU9DLEtBQUtDLFNBQVNDLFNBQVMsSUFBSXJDLFVBQVUsR0FBR3NDLE1BQU0sSUFBSUMsS0FBSyxNQUc1REMsRUFBYyxDQUNoQkMsS0FBTSxlQUFpQlAsSUFDdkJRLFFBQVMsa0JBQW9CUixJQUM3QlMscUJBQXNCLFdBQ3BCLE1BQU8sK0JBQWlDVCxNQVE1QyxTQUFTVSxFQUFjcEIsR0FDckIsR0FBbUIsaUJBQVJBLEdBQTRCLE9BQVJBLEVBQWMsT0FBTyxFQUdwRCxJQUZBLElBQUlxQixFQUFRckIsRUFFNEIsT0FBakM1UyxPQUFPa1UsZUFBZUQsSUFDM0JBLEVBQVFqVSxPQUFPa1UsZUFBZUQsR0FHaEMsT0FBT2pVLE9BQU9rVSxlQUFldEIsS0FBU3FCLEVBNkJ4QyxTQUFTRSxFQUFZQyxFQUFTQyxFQUFnQkMsR0FDNUMsSUFBSXZOLEVBRUosR0FBOEIsbUJBQW5Cc04sR0FBcUQsbUJBQWJDLEdBQStDLG1CQUFiQSxHQUFtRCxtQkFBakI3UyxVQUFVLEdBQy9ILE1BQU0sSUFBSW1MLE1BQU0sdUpBUWxCLEdBTDhCLG1CQUFuQnlILFFBQXFELElBQWJDLElBQ2pEQSxFQUFXRCxFQUNYQSxPQUFpQi9NLFFBR0ssSUFBYmdOLEVBQTBCLENBQ25DLEdBQXdCLG1CQUFiQSxFQUNULE1BQU0sSUFBSTFILE1BQU0sMkNBR2xCLE9BQU8wSCxFQUFTSCxFQUFURyxDQUFzQkYsRUFBU0MsR0FHeEMsR0FBdUIsbUJBQVpELEVBQ1QsTUFBTSxJQUFJeEgsTUFBTSwwQ0FHbEIsSUFBSTJILEVBQWlCSCxFQUNqQkksRUFBZUgsRUFDZkksRUFBbUIsR0FDbkJDLEVBQWdCRCxFQUNoQkUsR0FBZ0IsRUFTcEIsU0FBU0MsSUFDSEYsSUFBa0JELElBQ3BCQyxFQUFnQkQsRUFBaUJJLFNBVXJDLFNBQVN2USxJQUNQLEdBQUlxUSxFQUNGLE1BQU0sSUFBSS9ILE1BQU0sd01BR2xCLE9BQU80SCxFQTJCVCxTQUFTdlIsRUFBVUosR0FDakIsR0FBd0IsbUJBQWJBLEVBQ1QsTUFBTSxJQUFJK0osTUFBTSwyQ0FHbEIsR0FBSStILEVBQ0YsTUFBTSxJQUFJL0gsTUFBTSw2VEFHbEIsSUFBSTFKLEdBQWUsRUFHbkIsT0FGQTBSLElBQ0FGLEVBQWMxUixLQUFLSCxHQUNaLFdBQ0wsR0FBS0ssRUFBTCxDQUlBLEdBQUl5UixFQUNGLE1BQU0sSUFBSS9ILE1BQU0sa0tBR2xCMUosR0FBZSxFQUNmMFIsSUFDQSxJQUFJNUQsRUFBUTBELEVBQWN4UyxRQUFRVyxHQUNsQzZSLEVBQWN6RCxPQUFPRCxFQUFPLEdBQzVCeUQsRUFBbUIsT0E4QnZCLFNBQVM1TCxFQUFTNUQsR0FDaEIsSUFBSytPLEVBQWMvTyxHQUNqQixNQUFNLElBQUkySCxNQUFNLDJFQUdsQixRQUEyQixJQUFoQjNILEVBQU8wQixLQUNoQixNQUFNLElBQUlpRyxNQUFNLHNGQUdsQixHQUFJK0gsRUFDRixNQUFNLElBQUkvSCxNQUFNLHNDQUdsQixJQUNFK0gsR0FBZ0IsRUFDaEJILEVBQWVELEVBQWVDLEVBQWN2UCxHQUM1QyxRQUNBMFAsR0FBZ0IsRUFLbEIsSUFGQSxJQUFJNVIsRUFBWTBSLEVBQW1CQyxFQUUxQnBWLEVBQUksRUFBR0EsRUFBSXlELEVBQVVyQixPQUFRcEMsSUFBSyxFQUV6Q3VELEVBRGVFLEVBQVV6RCxNQUkzQixPQUFPMkYsRUFjVCxTQUFTNlAsRUFBZUMsR0FDdEIsR0FBMkIsbUJBQWhCQSxFQUNULE1BQU0sSUFBSW5JLE1BQU0sOENBR2xCMkgsRUFBaUJRLEVBS2pCbE0sRUFBUyxDQUNQbEMsS0FBTWlOLEVBQVlFLFVBV3RCLFNBQVNrQixJQUNQLElBQUloUixFQUVBaVIsRUFBaUJoUyxFQUNyQixPQUFPZSxFQUFPLENBU1pmLFVBQVcsU0FBbUJpUyxHQUM1QixHQUF3QixpQkFBYkEsR0FBc0MsT0FBYkEsRUFDbEMsTUFBTSxJQUFJQyxVQUFVLDBDQUd0QixTQUFTQyxJQUNIRixFQUFTcFMsTUFDWG9TLEVBQVNwUyxLQUFLd0IsS0FNbEIsT0FGQThRLElBRU8sQ0FDTDdSLFlBRmdCMFIsRUFBZUcsT0FLN0IsS0FBZ0IsV0FDdEIsT0FBT3ZULE1BQ05tQyxFQVNMLE9BSEE2RSxFQUFTLENBQ1BsQyxLQUFNaU4sRUFBWUMsUUFFYjlNLEVBQVEsQ0FDYjhCLFNBQVVBLEVBQ1Y1RixVQUFXQSxFQUNYcUIsU0FBVUEsRUFDVndRLGVBQWdCQSxJQUNULEtBQWdCRSxFQUFZak8sRUEwQnZDLFNBQVNzTyxFQUE4QnhVLEVBQUtvRSxHQUMxQyxJQUFJcVEsRUFBYXJRLEdBQVVBLEVBQU8wQixLQUVsQyxNQUFPLFVBRGlCMk8sR0FBYyxXQUFjQyxPQUFPRCxHQUFjLEtBQVEsYUFDM0MsY0FBaUJ6VSxFQUFoRCxpTEFnRVQsU0FBUzJVLEVBQWdCQyxHQUl2QixJQUhBLElBQUlDLEVBQWMxVixPQUFPaUMsS0FBS3dULEdBQzFCRSxFQUFnQixHQUVYclcsRUFBSSxFQUFHQSxFQUFJb1csRUFBWWhVLE9BQVFwQyxJQUFLLENBQzNDLElBQUl1QixFQUFNNlUsRUFBWXBXLEdBRWxCLEVBTXlCLG1CQUFsQm1XLEVBQVM1VSxLQUNsQjhVLEVBQWM5VSxHQUFPNFUsRUFBUzVVLElBSWxDLElBU0krVSxFQVRBQyxFQUFtQjdWLE9BQU9pQyxLQUFLMFQsR0FXbkMsS0FqRUYsU0FBNEJGLEdBQzFCelYsT0FBT2lDLEtBQUt3VCxHQUFVSyxTQUFRLFNBQVVqVixHQUN0QyxJQUFJdVQsRUFBVXFCLEVBQVM1VSxHQUt2QixRQUE0QixJQUpUdVQsT0FBUTlNLEVBQVcsQ0FDcENYLEtBQU1pTixFQUFZQyxPQUlsQixNQUFNLElBQUlqSCxNQUFNLFlBQWUvTCxFQUFmLGlSQUdsQixRQUVPLElBRkl1VCxPQUFROU0sRUFBVyxDQUM1QlgsS0FBTWlOLEVBQVlHLHlCQUVsQixNQUFNLElBQUluSCxNQUFNLFlBQWUvTCxFQUFmLDZFQUEwRytTLEVBQVlDLEtBQXRILGtUQW9EbEJrQyxDQUFtQkosR0FDbkIsTUFBT2pQLEdBQ1BrUCxFQUFzQmxQLEVBR3hCLE9BQU8sU0FBcUIxQixFQUFPQyxHQUtqQyxRQUpjLElBQVZELElBQ0ZBLEVBQVEsSUFHTjRRLEVBQ0YsTUFBTUEsRUFjUixJQVgyQyxJQVF2Q0ksR0FBYSxFQUNibEssRUFBWSxHQUVQMkcsRUFBSyxFQUFHQSxFQUFLb0QsRUFBaUJuVSxPQUFRK1EsSUFBTSxDQUNuRCxJQUFJd0QsRUFBT0osRUFBaUJwRCxHQUN4QjJCLEVBQVV1QixFQUFjTSxHQUN4QkMsRUFBc0JsUixFQUFNaVIsR0FDNUJFLEVBQWtCL0IsRUFBUThCLEVBQXFCalIsR0FFbkQsUUFBK0IsSUFBcEJrUixFQUFpQyxDQUMxQyxJQUFJQyxFQUFlZixFQUE4QlksRUFBTWhSLEdBQ3ZELE1BQU0sSUFBSTJILE1BQU13SixHQUdsQnRLLEVBQVVtSyxHQUFRRSxFQUNsQkgsRUFBYUEsR0FBY0csSUFBb0JELEVBSWpELE9BREFGLEVBQWFBLEdBQWNILEVBQWlCblUsU0FBVzFCLE9BQU9pQyxLQUFLK0MsR0FBT3RELFFBQ3REb0ssRUFBWTlHLEdBSXBDLFNBQVNxUixFQUFrQkMsRUFBZXpOLEdBQ3hDLE9BQU8sV0FDTCxPQUFPQSxFQUFTeU4sRUFBYzFVLE1BQU1DLEtBQU1KLGFBMEI5QyxTQUFTOFUsRUFBbUJDLEVBQWdCM04sR0FDMUMsR0FBOEIsbUJBQW5CMk4sRUFDVCxPQUFPSCxFQUFrQkcsRUFBZ0IzTixHQUczQyxHQUE4QixpQkFBbkIyTixHQUFrRCxPQUFuQkEsRUFDeEMsTUFBTSxJQUFJNUosTUFBTSwwRUFBK0YsT0FBbkI0SixFQUEwQixjQUFnQkEsR0FBdEgsOEZBR2xCLElBQUlDLEVBQXNCLEdBRTFCLElBQUssSUFBSTVWLEtBQU8yVixFQUFnQixDQUM5QixJQUFJRixFQUFnQkUsRUFBZTNWLEdBRU4sbUJBQWxCeVYsSUFDVEcsRUFBb0I1VixHQUFPd1YsRUFBa0JDLEVBQWV6TixJQUloRSxPQUFPNE4sRUFHVCxTQUFTQyxFQUFnQjlELEVBQUsvUixFQUFLTixHQVlqQyxPQVhJTSxLQUFPK1IsRUFDVDVTLE9BQU9DLGVBQWUyUyxFQUFLL1IsRUFBSyxDQUM5Qk4sTUFBT0EsRUFDUEwsWUFBWSxFQUNaeVcsY0FBYyxFQUNkQyxVQUFVLElBR1poRSxFQUFJL1IsR0FBT04sRUFHTnFTLEVBR1QsU0FBU2lFLEVBQVE3VixFQUFROFYsR0FDdkIsSUFBSTdVLEVBQU9qQyxPQUFPaUMsS0FBS2pCLEdBU3ZCLE9BUEloQixPQUFPK1csdUJBQ1Q5VSxFQUFLZSxLQUFLcEIsTUFBTUssRUFBTWpDLE9BQU8rVyxzQkFBc0IvVixJQUdqRDhWLElBQWdCN1UsRUFBT0EsRUFBSzRRLFFBQU8sU0FBVW1FLEdBQy9DLE9BQU9oWCxPQUFPaVgseUJBQXlCalcsRUFBUWdXLEdBQUs5VyxlQUUvQytCLEVBR1QsU0FBU2lWLEVBQWUxVixHQUN0QixJQUFLLElBQUlsQyxFQUFJLEVBQUdBLEVBQUltQyxVQUFVQyxPQUFRcEMsSUFBSyxDQUN6QyxJQUFJcUMsRUFBeUIsTUFBaEJGLFVBQVVuQyxHQUFhbUMsVUFBVW5DLEdBQUssR0FFL0NBLEVBQUksRUFDTnVYLEVBQVFsVixHQUFRLEdBQU1tVSxTQUFRLFNBQVVqVixHQUN0QzZWLEVBQWdCbFYsRUFBUVgsRUFBS2MsRUFBT2QsT0FFN0JiLE9BQU9tWCwwQkFDaEJuWCxPQUFPb1gsaUJBQWlCNVYsRUFBUXhCLE9BQU9tWCwwQkFBMEJ4VixJQUVqRWtWLEVBQVFsVixHQUFRbVUsU0FBUSxTQUFValYsR0FDaENiLE9BQU9DLGVBQWV1QixFQUFRWCxFQUFLYixPQUFPaVgseUJBQXlCdFYsRUFBUWQsT0FLakYsT0FBT1csRUFhVCxTQUFTNlYsSUFDUCxJQUFLLElBQUlDLEVBQU83VixVQUFVQyxPQUFRNlYsRUFBUSxJQUFJL0YsTUFBTThGLEdBQU9yQixFQUFPLEVBQUdBLEVBQU9xQixFQUFNckIsSUFDaEZzQixFQUFNdEIsR0FBUXhVLFVBQVV3VSxHQUcxQixPQUFxQixJQUFqQnNCLEVBQU03VixPQUNELFNBQVUrSyxHQUNmLE9BQU9BLEdBSVUsSUFBakI4SyxFQUFNN1YsT0FDRDZWLEVBQU0sR0FHUkEsRUFBTXhFLFFBQU8sU0FBVWpHLEVBQUdDLEdBQy9CLE9BQU8sV0FDTCxPQUFPRCxFQUFFQyxFQUFFbkwsV0FBTSxFQUFRSCxnQkFzQi9CLFNBQVMrVixJQUNQLElBQUssSUFBSUYsRUFBTzdWLFVBQVVDLE9BQVErVixFQUFjLElBQUlqRyxNQUFNOEYsR0FBT3JCLEVBQU8sRUFBR0EsRUFBT3FCLEVBQU1yQixJQUN0RndCLEVBQVl4QixHQUFReFUsVUFBVXdVLEdBR2hDLE9BQU8sU0FBVTlCLEdBQ2YsT0FBTyxXQUNMLElBQUk5USxFQUFROFEsRUFBWXZTLFdBQU0sRUFBUUgsV0FFbENpVyxFQUFZLFdBQ2QsTUFBTSxJQUFJOUssTUFBTSwySEFHZCtLLEVBQWdCLENBQ2xCclQsU0FBVWpCLEVBQU1pQixTQUNoQnVFLFNBQVUsV0FDUixPQUFPNk8sRUFBVTlWLFdBQU0sRUFBUUgsYUFHL0JtVyxFQUFRSCxFQUFZL0YsS0FBSSxTQUFVbUcsR0FDcEMsT0FBT0EsRUFBV0YsTUFHcEIsT0FBT1QsRUFBZSxHQUFJN1QsRUFBTyxDQUMvQndGLFNBRkY2TyxFQUFZTCxFQUFRelYsV0FBTSxFQUFRZ1csRUFBdEJQLENBQTZCaFUsRUFBTXdGLGdCLDZCQ2hvQm5EeEosRUFBT0QsUUFBVSxFQUFRLEssOEJDSDNCLGtCQUdJMFksRUFISixRQU1FQSxFQURrQixvQkFBVEMsS0FDRkEsS0FDb0Isb0JBQVhwVCxPQUNUQSxZQUNvQixJQUFYcVQsRUFDVEEsRUFFQTNZLEVBS1QsSUFBSXNOLEVBQVMsWUFBU21MLEdBQ1AsUSx3RENoQmYsSUFBSUcsRUFBVSxFQUFRLElBTWxCQyxFQUFnQixDQUNsQkMsbUJBQW1CLEVBQ25CQyxhQUFhLEVBQ2JDLGNBQWMsRUFDZEMsY0FBYyxFQUNkclEsYUFBYSxFQUNic1EsaUJBQWlCLEVBQ2pCQywwQkFBMEIsRUFDMUJDLDBCQUEwQixFQUMxQkMsUUFBUSxFQUNSQyxXQUFXLEVBQ1hoUyxNQUFNLEdBRUppUyxFQUFnQixDQUNsQi9ZLE1BQU0sRUFDTjZCLFFBQVEsRUFDUlIsV0FBVyxFQUNYMlgsUUFBUSxFQUNSQyxRQUFRLEVBQ1JyWCxXQUFXLEVBQ1hzWCxPQUFPLEdBU0xDLEVBQWUsQ0FDakIsVUFBWSxFQUNaQyxTQUFTLEVBQ1RYLGNBQWMsRUFDZHJRLGFBQWEsRUFDYjBRLFdBQVcsRUFDWGhTLE1BQU0sR0FFSnVTLEVBQWUsR0FJbkIsU0FBU0MsRUFBV0MsR0FFbEIsT0FBSW5CLEVBQVFvQixPQUFPRCxHQUNWSixFQUlGRSxFQUFhRSxFQUFvQixXQUFNbEIsRUFWaERnQixFQUFhakIsRUFBUXFCLFlBaEJLLENBQ3hCLFVBQVksRUFDWkMsUUFBUSxFQUNSakIsY0FBYyxFQUNkclEsYUFBYSxFQUNiMFEsV0FBVyxHQVliTyxFQUFhakIsRUFBUXVCLE1BQVFSLEVBWTdCLElBQUkvWSxFQUFpQkQsT0FBT0MsZUFDeEJ3WixFQUFzQnpaLE9BQU95WixvQkFDN0IxQyxFQUF3Qi9XLE9BQU8rVyxzQkFDL0JFLEVBQTJCalgsT0FBT2lYLHlCQUNsQy9DLEVBQWlCbFUsT0FBT2tVLGVBQ3hCd0YsRUFBa0IxWixPQUFPa0IsVUFzQzdCN0IsRUFBT0QsUUFyQ1AsU0FBU3VhLEVBQXFCQyxFQUFpQkMsRUFBaUJDLEdBQzlELEdBQStCLGlCQUFwQkQsRUFBOEIsQ0FFdkMsR0FBSUgsRUFBaUIsQ0FDbkIsSUFBSUssRUFBcUI3RixFQUFlMkYsR0FFcENFLEdBQXNCQSxJQUF1QkwsR0FDL0NDLEVBQXFCQyxFQUFpQkcsRUFBb0JELEdBSTlELElBQUk3WCxFQUFPd1gsRUFBb0JJLEdBRTNCOUMsSUFDRjlVLEVBQU9BLEVBQUsrWCxPQUFPakQsRUFBc0I4QyxLQU0zQyxJQUhBLElBQUlJLEVBQWdCZCxFQUFXUyxHQUMzQk0sRUFBZ0JmLEVBQVdVLEdBRXRCdmEsRUFBSSxFQUFHQSxFQUFJMkMsRUFBS1AsU0FBVXBDLEVBQUcsQ0FDcEMsSUFBSXVCLEVBQU1vQixFQUFLM0MsR0FFZixLQUFLc1osRUFBYy9YLElBQVVpWixHQUFhQSxFQUFValosSUFBV3FaLEdBQWlCQSxFQUFjclosSUFBV29aLEdBQWlCQSxFQUFjcFosSUFBTyxDQUM3SSxJQUFJc1osRUFBYWxELEVBQXlCNEMsRUFBaUJoWixHQUUzRCxJQUVFWixFQUFlMlosRUFBaUIvWSxFQUFLc1osR0FDckMsTUFBT3pULE9BS2YsT0FBT2tULEk7Ozs7O0VDM0ZULElBQUk3QyxFQUF3Qi9XLE9BQU8rVyxzQkFDL0I1VixFQUFpQm5CLE9BQU9rQixVQUFVQyxlQUNsQ2laLEVBQW1CcGEsT0FBT2tCLFVBQVVtWixxQkFFeEMsU0FBU0MsRUFBUzNILEdBQ2pCLEdBQUlBLFFBQ0gsTUFBTSxJQUFJd0MsVUFBVSx5REFHckIsT0FBT25WLE9BQU8yUyxHQStDZnRULEVBQU9ELFFBNUNQLFdBQ0MsSUFDQyxJQUFLWSxPQUFPdUIsT0FDWCxPQUFPLEVBTVIsSUFBSWdaLEVBQVEsSUFBSWhGLE9BQU8sT0FFdkIsR0FEQWdGLEVBQU0sR0FBSyxLQUNrQyxNQUF6Q3ZhLE9BQU95WixvQkFBb0JjLEdBQU8sR0FDckMsT0FBTyxFQUtSLElBREEsSUFBSUMsRUFBUSxHQUNIbGIsRUFBSSxFQUFHQSxFQUFJLEdBQUlBLElBQ3ZCa2IsRUFBTSxJQUFNakYsT0FBT2tGLGFBQWFuYixJQUFNQSxFQUt2QyxHQUF3QixlQUhYVSxPQUFPeVosb0JBQW9CZSxHQUFPOUksS0FBSSxTQUFVM1EsR0FDNUQsT0FBT3laLEVBQU16WixNQUVINFMsS0FBSyxJQUNmLE9BQU8sRUFJUixJQUFJK0csRUFBUSxHQUlaLE1BSEEsdUJBQXVCaEgsTUFBTSxJQUFJb0MsU0FBUSxTQUFVNkUsR0FDbERELEVBQU1DLEdBQVVBLEtBR2YseUJBREUzYSxPQUFPaUMsS0FBS2pDLE9BQU91QixPQUFPLEdBQUltWixJQUFRL0csS0FBSyxJQU05QyxNQUFPeEUsR0FFUixPQUFPLEdBSVF5TCxHQUFvQjVhLE9BQU91QixPQUFTLFNBQVVDLEVBQVFHLEdBS3RFLElBSkEsSUFBSWtaLEVBRUFDLEVBREFDLEVBQUtULEVBQVM5WSxHQUdUSCxFQUFJLEVBQUdBLEVBQUlJLFVBQVVDLE9BQVFMLElBQUssQ0FHMUMsSUFBSyxJQUFJUixLQUZUZ2EsRUFBTzdhLE9BQU95QixVQUFVSixJQUduQkYsRUFBZTFCLEtBQUtvYixFQUFNaGEsS0FDN0JrYSxFQUFHbGEsR0FBT2dhLEVBQUtoYSxJQUlqQixHQUFJa1csRUFBdUIsQ0FDMUIrRCxFQUFVL0QsRUFBc0I4RCxHQUNoQyxJQUFLLElBQUl2YixFQUFJLEVBQUdBLEVBQUl3YixFQUFRcFosT0FBUXBDLElBQy9COGEsRUFBaUIzYSxLQUFLb2IsRUFBTUMsRUFBUXhiLE1BQ3ZDeWIsRUFBR0QsRUFBUXhiLElBQU11YixFQUFLQyxFQUFReGIsTUFNbEMsT0FBT3liLEkscVdDeEZSLFdBRUEsUUFhTUMsRUFBK0IsQ0FDbkNDLGVBQWdCLEtBQ2hCQyxpQkFBa0IsS0FDbEJDLGNBQWUsR0FDZkMsc0JBQXVCLEdBQ3ZCQyxjQUFlLEdBQ2ZDLGVBQWdCLEVBQUExSixPQUFPLEdBQUksSUFLaEIsRUFBQTJKLGtCQUFvQixXQUFzQixjQUNsRFAsR0FDQSxFQUFBUSxVQUFVbFgsYUFFRixFQUFBbVgsa0JBQW9CLFNBQUNDLEdBQ2hDLFNBQUFGLFVBQVVHLFNBQVNELEssaUdDdkJSLEVBQUFGLFVBQVlJLG9CLHNHQ1B6QixXQUNBLFFBRUEsUUFJQSxhQUdFLHdCQUZBLEtBQUFDLGVBQXFDLEdBR25DbFgsT0FBT21YLGlCQUFpQixXQUFXLFNBQUFDLEdBQ2pDLEVBQUtGLGVBQWUvRixTQUFRLFNBQUFqVCxHQUFZLE9BQUFBLEVBQVNrWixFQUFNQyxZQWdIN0QsT0E1R0UsWUFBQUMseUJBQUEsU0FBeUJDLEdBQXpCLFdBQ1FDLEVBQVksRUFBQUMsU0FRbEIsT0FOQSxFQUFBWixVQUFVYSxZQUFZLENBQ3BCMVYsS0FBTSwyQkFDTjJWLEdBQUlILEVBQ0poWCxRQUFTLENBQUUrVyxXQUFVLEtBR2hCLElBQUlLLFNBQ1QsU0FBQUMsR0FDRSxJQUFNM1osRUFBVyxTQUFDdU0sR0FFRyw2QkFBakJBLEVBQVF6SSxNQUNSeUksRUFBUWtOLEtBQU9ILElBRWZLLEVBQVFwTixFQUFRakssUUFBUXNYLE9BQ3hCLEVBQUtDLGVBQWU3WixLQUl4QixFQUFLZ1osZUFBZTdZLEtBQUtILE9BSy9CLFlBQUE4WixnQkFBQSxTQUFnQkMsR0FBaEIsV0FDUVQsRUFBWSxFQUFBQyxTQVFsQixPQU5BLEVBQUFaLFVBQVVhLFlBQVksQ0FDcEIxVixLQUFNLGtCQUNOMlYsR0FBSUgsRUFDSmhYLFFBQVMsQ0FBRXlYLFNBQVEsS0FHZCxJQUFJTCxTQUFnQixTQUFBQyxHQUN6QixJQUFNM1osRUFBVyxTQUFDdU0sR0FDSyxvQkFBakJBLEVBQVF6SSxNQUE4QnlJLEVBQVFrTixLQUFPSCxJQUN2REssRUFBUXBOLEVBQVFqSyxRQUFRaUwsTUFDeEIsRUFBS3NNLGVBQWU3WixLQUl4QixFQUFLZ1osZUFBZTdZLEtBQUtILE9BSTdCLFlBQUFnYSxvQkFBQSxTQUFvQkQsR0FBcEIsV0FDUVQsRUFBWSxFQUFBQyxTQVFsQixPQU5BLEVBQUFaLFVBQVVhLFlBQVksQ0FDcEIxVixLQUFNLHNCQUNOMlYsR0FBSUgsRUFDSmhYLFFBQVMsQ0FBRXlYLFNBQVEsS0FHZCxJQUFJTCxTQUFnQixTQUFBQyxHQUN6QixJQUFNM1osRUFBVyxTQUFDdU0sR0FFRyx3QkFBakJBLEVBQVF6SSxNQUNSeUksRUFBUWtOLEtBQU9ILElBRWZLLEVBQVFwTixFQUFRakssUUFBUTJYLEtBQ3hCLEVBQUtKLGVBQWU3WixLQUl4QixFQUFLZ1osZUFBZTdZLEtBQUtILE9BSTdCLFlBQUFrYSx3QkFBQSxTQUNFQyxFQUNBM2EsR0FGRixXQUlFLEVBQUFtWixVQUFVYSxZQUFZLENBQ3BCMVYsS0FBTSxnQ0FDTnhCLFFBQVMsQ0FBRXlYLFNBQVVJLEtBR3ZCLElBQU1uYSxFQUFXLFNBQUN1TSxHQUVHLHlCQUFqQkEsRUFBUXpJLE1BQ1J5SSxFQUFRakssUUFBUTZYLFdBQWFBLEdBRTdCM2EsRUFBUytNLEVBQVFqSyxRQUFRaUwsT0FLN0IsT0FEQXZPLEtBQUtnYSxlQUFlN1ksS0FBS0gsR0FDbEIsV0FDTCxFQUFLNlosZUFBZTdaLEdBQ3BCLEVBQUEyWSxVQUFVYSxZQUFZLENBQ3BCMVYsS0FBTSxrQ0FDTnhCLFFBQVMsQ0FBRXlYLFNBQVVJLE9BSzNCLFlBQUFDLG9CQUFBLFdBQ0UsRUFBQXpCLFVBQVVhLFlBQVksQ0FDcEIxVixLQUFNLHlCQUlGLFlBQUErVixlQUFSLFNBQXVCN1osR0FDckIsRUFBQWdPLE9BQU9oUCxLQUFLZ2EsZUFBZ0JoWixJQUVoQyxFQXJIQSxHQXVIYSxFQUFBcWEsZUFBaUIsSUFBSUMsRyw4RkM5SHJCLEVBQUFmLE9BQVMsV0FDcEIsTUFBTyx1Q0FBdUNnQixRQUFRLFNBQVMsU0FBVXpkLEdBQ3ZFLElBQUlTLEVBQXFCLEdBQWhCbVQsS0FBS0MsU0FBaUIsRUFFL0IsT0FEVyxLQUFMN1QsRUFBV1MsRUFBUyxFQUFKQSxFQUFXLEdBQ3hCcVQsU0FBUyxTLGlIQ0xULEVBQUE0SixZQUFjLFNBQ3pCekssRUFDQTBLLEdBRUEsT0FBTzFLLEVBQUl6UixlQUFlbWMsSUFHZixFQUFBQyxZQUFjLFNBQUNoZCxHQUMxQixNQUFNLElBQUlxTSxNQUFNLDJCQUEyQjRRLEtBQUtDLFVBQVVsZCxNLG1YQ0gvQyxFQUFBbWQsd0JBQTBCLFNBQ3JDcEMsR0FFQSxJQUFNNVIsRUFBSTRSLEVBQWVxQyxPQUFTcEssS0FBS3FLLElBQUl0QyxFQUFldUMsVUFDcER6ZCxFQUFJa2IsRUFBZXFDLE9BQVNwSyxLQUFLdUssSUFBSXhDLEVBQWV1QyxVQUNwREUsRUFBSTNkLEVBQUltVCxLQUFLdUssSUFBSXhDLEVBQWUwQyxXQUV0QyxNQUFPLENBQUV2VSxFQURDckosRUFBSW1ULEtBQUtxSyxJQUFJdEMsRUFBZTBDLFdBQzFCdFUsRUFBQyxFQUFFcVUsRUFBQyxJQWtCbEIsSUFhTUUsRUFBYyxTQUFDTixHQUNuQixPQUFPcEssS0FBS0gsSUFBSUcsS0FBS0YsSUFBSXNLLEVBQVEsR0FBSSxLQTZCdkMsYUFLRSxXQUNZTyxFQUNGQyxFQUNBQyxHQUhWLFdBQ1ksS0FBQUYsVUFDRixLQUFBQyxtQkFDQSxLQUFBQyxtQkFQRixLQUFBQyxnQkFBa0IsQ0FBRTVVLEVBQUcsRUFBR0MsRUFBRyxHQUNyQyxLQUFBbVMsZUFBaUIsSUFBSXlDLElBQ2IsS0FBQUMsVUFBVyxFQTRCWCxLQUFBQyxlQUFpQixTQUFDdlosR0FDeEIsSUFBTXdaLEVBMURNLFNBQUNDLEVBQTBCelosR0FDekMsT0FBUUEsRUFBTzBCLE1BQ2IsSUFBSyxjQUNILE9BQU8sRUFBUCxLQUNLK1gsR0FBUSxDQUNYYixVQXRCZUEsRUFzQlNhLEVBQVNiLFNBQVc1WSxFQUFPMFosY0FyQmxEcEwsS0FBS0gsSUFDVkcsS0FBS0YsSUFBSXdLLEdBQVd0SyxLQUFLcUwsR0FBSyxFQUFNLElBQ3BDckwsS0FBS3FMLEdBQUssRUFBTSxLQW9CWlosV0FoQmdCQSxFQWdCVVUsRUFBU1YsVUFBWS9ZLEVBQU80WixlQWZ4RGIsRUFBWXpLLEtBQUtxTCxHQUFXWixFQUFzQixFQUFWekssS0FBS3FMLEdBQ3hDWixHQUFhekssS0FBS3FMLEdBQVdaLEVBQXNCLEVBQVZ6SyxLQUFLcUwsR0FDM0NaLEtBZ0JWLElBQUssV0FDSCxPQUFPLEVBQVAsS0FDS1UsR0FBUSxDQUNYZixPQUFRTSxFQUFZUyxFQUFTZixPQUFTLE1BRzFDLElBQUssWUFDSCxPQUFPLEVBQVAsS0FDS2UsR0FBUSxDQUNYZixPQUFRTSxFQUFZUyxFQUFTZixPQUFTLE1BRzFDLFFBQ0UsT0FBT2UsRUFoQ1UsSUFBQ1YsRUFQREgsRUEyRUN6SixDQUFRLEVBQUsrSixtQkFBb0JsWixHQUNyRCxFQUFLbVosaUJBQWlCSyxJQUdoQixLQUFBSyxZQUFjLFNBQUNwWSxHQUNKLElBQWJBLEVBQUVxWSxTQUNKLEVBQUtWLGdCQUFrQixDQUFFNVUsRUFBRy9DLEVBQUVzWSxRQUFTdFYsRUFBR2hELEVBQUV1WSxTQUM1QyxFQUFLVixVQUFXLElBSVosS0FBQVcsWUFBYyxTQUFDeFksR0FDckIsR0FBSSxFQUFLNlgsU0FBVSxDQUVqQixFQUFLQyxlQUFlLENBQ2xCN1gsS0FBTSxjQUNOa1ksZUFIaUIsTUFHQ25ZLEVBQUVzWSxRQUFVLEVBQUtYLGdCQUFnQjVVLEdBQ25Ea1YsY0FKaUIsS0FJRGpZLEVBQUV1WSxRQUFVLEVBQUtaLGdCQUFnQjNVLEtBSXJELEVBQUsyVSxnQkFBa0IsQ0FBRTVVLEVBQUcvQyxFQUFFc1ksUUFBU3RWLEVBQUdoRCxFQUFFdVksVUFHdEMsS0FBQUUsVUFBWSxXQUNsQixFQUFLWixVQUFXLEdBR1YsS0FBQWEsYUFBZSxXQUNyQixFQUFLYixVQUFXLEdBR1YsS0FBQWMsUUFBVSxTQUFDM1ksR0FDakIsSUFBTXpCLEVBQVN5QixFQUFFNFksT0FBUyxFQUFJLFdBQWEsWUFFM0MsRUFBS2QsZUFBZSxDQUNsQjdYLEtBQU0xQixLQTFEUnBELEtBQUswZCxjQUFjLFlBQWExZCxLQUFLaWQsYUFDckNqZCxLQUFLMGQsY0FBYyxZQUFhMWQsS0FBS3FkLGFBQ3JDcmQsS0FBSzBkLGNBQWMsVUFBVzFkLEtBQUtzZCxXQUNuQ3RkLEtBQUswZCxjQUFjLGFBQWMxZCxLQUFLdWQsY0FDdEN2ZCxLQUFLMGQsY0FBYyxRQUFTMWQsS0FBS3dkLFNBeURyQyxPQXRERSxZQUFBRyxRQUFBLHNCQUNFM2QsS0FBS2dhLGVBQWUvRixTQUFRLFNBQUN2VixFQUFPTSxHQUNsQyxTQUFLcWQsUUFBUXVCLG9CQUFvQjVlLEVBQUtOLE9BSWxDLFlBQUFnZixjQUFSLFNBQ0U1WSxFQUNBK1ksR0FFQTdkLEtBQUtxYyxRQUFRcEMsaUJBQWlCblYsRUFBTStZLEdBQ3BDN2QsS0FBS2dhLGVBQWU4RCxJQUFJaFosRUFBTStZLElBMkNsQyxFQXZFQSxHQUFhLEVBQUFFLDZCLGdNQ3hFYixjQUNBLFFBS0EsUUFFYSxFQUFBQyxxQkFBdUIsU0FDbEMzQixFQUNBNEIsRUFDQUMsR0FFQSxVQUFNQyxXQUFVLFdBQ2QsR0FBSzlCLEVBQUwsQ0FFQSxJQUFJNUMsRUFBaUMsQ0FBRTBDLFVBQVcsRUFBR0gsU0FBVSxFQUFHRixPQUFRLEdBQzFFLElBQUksRUFBQWlDLDBCQUNGMUIsR0FDQSxXQUFNLE9BQUE1QyxLQUNOLFNBQUEyRSxHQUNFM0UsRUFBaUIyRSxFQUNqQixJQUFNQyxFQUFlLEdBQUszTSxLQUFLcUwsR0FBTSxJQUUvQnVCLEVBRG9CTCxFQUFJLE1BQUpBLEVBQUksT0FJeEJNLEVBQW1CLEVBQUFDLEtBQUt6ZixTQUM5QixFQUFBeWYsS0FBS0MsWUFBWUYsRUFBa0JGLEVBQWFDLEVBSGxDLEdBQ0QsS0FHYixJQUFNSSxFQUFrQixFQUFBRixLQUFLemYsU0FDdkI0ZixFQUFNLEVBQUE5Qyx3QkFBd0JwQyxHQUNwQyxFQUFBK0UsS0FBS0ksT0FBT0YsRUFBaUIsQ0FBQ0MsRUFBSS9XLEVBQUcrVyxFQUFJOVcsRUFBRzhXLEVBQUl6QyxHQUFJLENBQUMsRUFBRyxFQUFHLEdBQUksQ0FBQyxFQUFHLEVBQUcsSUFDdEUsSUFBTTJDLEVBQU0sRUFBQUwsS0FBS3pmLFNBQ2pCLEVBQUF5ZixLQUFLTSxTQUFTRCxFQUFLTixFQUFrQkcsR0FDckNSLEVBQVN2TyxNQUFNcUosS0FBSzZGLFVBR3ZCLENBQUN4QyxNLG1MQ3RDTyxFQUFBMEMsaUJBQW1CLENBQUMsUUFDcEIsRUFBQUMsZ0JBQWtCLENBQUMsTUFBTyxPQUMxQixFQUFBQyxrQkFBb0IsQ0FBQyxlQUFnQixnQkFDckMsRUFBQUMsZUFBaUIsU0FDakIsRUFBQUMsa0JBQ1gsdUcsd1pDTEYsY0FDQSxRQWVhLEVBQUFDLFNBQVcsVUFBTTNYLE1BQzVCLFNBQUNoQixHQUtTLElBQUE0WSxFQUFzQzVZLEVBQUssZUFBM0J5WCxFQUFzQnpYLEVBQUssU0FBakI0QixFQUFZNUIsRUFBSyxRQUU3QyxFQUFvQixFQUFBNlksaUJBQ3hCalgsRUFBUXhJLE9BQ1IsQ0FBRTBmLGdCQUFpQixJQUNuQixJQUNBLFNBQUFDLFFBQ2tDL1osSUFBNUIrWixFQUFRRCxpQkFDVnJCLEVBQ0VzQixFQUFRRCxnQkFBZ0IxZixPQUFTLEVBQUl3SSxFQUFRbVgsRUFBUUQsZ0JBQWdCLElBQUk5RSxHQUFLLFNBUC9FdFgsRUFBSyxLQUFFNkQsRUFBUSxLQWFoQnlZLEVBQWFwWCxFQUFRcVgsV0FBVSxTQUFBamlCLEdBQUssT0FBQUEsRUFBRWdkLEtBQU80RSxLQUM3Q00sRUFBZ0JGLEdBQWMsRUFBSUEsRUFBYSxLQUMvQ0csRUFBZSxVQUFNQyxPQUF1QixNQUM1Q0MsRUFBVSxVQUFNRCxPQUF1QixNQUU3QyxFQUFBRSxtQ0FBbUNILEVBQWM1WSxHQUNqRCxFQUFBZ1osc0JBQXNCRixFQUFTM2MsRUFBTThjLFFBQVEsR0FFN0MsSUFBTUMsRUFBc0IsRUFBQUMsaUNBQWlDblosR0FFN0QsT0FDRSwrQkFBS08sSUFBS3FZLEVBQWN0UixVQUFVLHNCQUNoQyx3QkFBQzhSLEVBQVksS0FDUGpkLEVBQUssQ0FDVDZELFNBQVVBLEVBQ1ZxWixpQkFBaUIsRUFDakJDLGFBQWMsV0FBTSxPQUNsQixtQ0FBd0IsT0FBbEJYLEVBQXlCdFgsRUFBUXNYLEdBQWVZLFFBQVUsUUFHbkVwZCxFQUFNOGMsUUFDTCwrQkFBSzNSLFVBQVUsZ0JBQWdCa1MsVUFBV04sRUFBcUIzWSxJQUFLdVksRUFBU1csU0FBVSxHQUNyRix3QkFBQyxFQUFBQyxnQkFBZSxDQUNkQyxVQUFXdFksRUFBUXhJLE9BQ25CK2dCLFdBQVksR0FDWkMsaUJBQWtCMWQsRUFBTTBkLGlCQUN4QkMsVUFBVyxJQUNYUixhQUFjLFNBQUFuUixHQUFTLE9BQ3JCLHdCQUFDNFIsRUFBWSxDQUNYeFMsS0FBTWxHLEVBQVE4RyxHQUFPb1IsUUFDckJwUixNQUFPQSxFQUNQNlIsV0FBWXJCLElBQWtCeFEsRUFDOUI4UixjQUFlOWQsRUFBTTBkLG1CQUFxQjFSLEVBQzFDbkksU0FBVUEsWUFXNUIsSUFBTW9aLEVBQWUsU0FBQzNaLEdBTVosSUFBQXdaLEVBQTJEeFosRUFBSyxPQUF4RDZaLEVBQW1EN1osRUFBSyxhQUExQyxFQUFxQ0EsRUFBSyxnQkFBMUM0WixPQUFlLElBQUcsR0FBSSxFQUFFclosRUFBYVAsRUFBSyxTQUNsRXlhLEVBQW9CLFVBQU1yQixPQUFPLE1BQ2pDc0IsRUFBZSxVQUFNQyxhQUFZLFdBQU0sT0FBQXBhLEVBQVMsQ0FBQ2laLEVBQVMsWUFBYyxlQUFjLENBQzFGQSxFQUNBalosSUFFSXFhLEVBQWMsVUFBTUQsYUFBWSxXQUFNLE9BQUFwYSxFQUFTLENBQUMscUJBQW9CLENBQUNBLElBSTNFLE9BRkEsRUFBQWdaLHNCQUFzQmtCLEVBQW1CakIsR0FBUSxHQUcvQywrQkFBSzNSLFVBQVUsaUJBQ2Isa0NBQVEvRyxJQUFLMlosRUFBbUI1UyxVQUFVLGtCQUFrQmdULFFBQVNILEdBQ2xFYixJQUNELDZCQUFHaFMsVUFBVyxPQUFNMlIsRUFBUyxjQUFnQixvQkFFOUNJLEdBQ0Msa0NBQVEvUixVQUFVLGlCQUFpQmdULFFBQVNELEdBQzFDLDZCQUFHL1MsVUFBVSxtQkFPakJ5UyxFQUFlLFNBQUN0YSxHQU9aLElBQUE4SCxFQUFxRDlILEVBQUssS0FBcEQwSSxFQUErQzFJLEVBQUssTUFBN0N1YSxFQUF3Q3ZhLEVBQUssV0FBakN3YSxFQUE0QnhhLEVBQUssY0FBbEJPLEVBQWFQLEVBQUssU0FDNUQ4YSxFQUFRLHVCQUFzQlAsRUFBYSxXQUFhLElBQUUsTUFDOURDLEVBQWdCLGNBQWdCLElBR2xDLE9BQ0UsK0JBQ0VqaUIsSUFBS21RLEVBQ0xtUyxRQUFTLFdBQU0sT0FBQXRhLEVBQVMsQ0FBQyxDQUFFbEMsS0FBTSxjQUFlcUssTUFBSyxHQUFJLGVBQ3pEYixVQUFXaVQsR0FFWCwrQkFBS2pULFVBQVUsMkJBQTJCQyxNLDZCQ2pJaEQsSUFBSXlCLEVBQVloUSxNQUFRQSxLQUFLZ1EsVUFBYSxXQVN0QyxPQVJBQSxFQUFXN1IsT0FBT3VCLFFBQVUsU0FBU2YsR0FDakMsSUFBSyxJQUFJYSxFQUFHL0IsRUFBSSxFQUFHeUIsRUFBSVUsVUFBVUMsT0FBUXBDLEVBQUl5QixFQUFHekIsSUFFNUMsSUFBSyxJQUFJOEIsS0FEVEMsRUFBSUksVUFBVW5DLEdBQ09VLE9BQU9rQixVQUFVQyxlQUFlMUIsS0FBSzRCLEVBQUdELEtBQ3pEWixFQUFFWSxHQUFLQyxFQUFFRCxJQUVqQixPQUFPWixJQUVLb0IsTUFBTUMsS0FBTUosWUFFNUJxUSxFQUFrQmpRLE1BQVFBLEtBQUtpUSxnQkFBbUIsV0FDbEQsSUFBSyxJQUFJelEsRUFBSSxFQUFHL0IsRUFBSSxFQUFHeVMsRUFBS3RRLFVBQVVDLE9BQVFwQyxFQUFJeVMsRUFBSXpTLElBQUsrQixHQUFLSSxVQUFVbkMsR0FBR29DLE9BQ3hFLElBQUl0QixFQUFJb1IsTUFBTW5RLEdBQUlrUCxFQUFJLEVBQTNCLElBQThCalIsRUFBSSxFQUFHQSxFQUFJeVMsRUFBSXpTLElBQ3pDLElBQUssSUFBSXdOLEVBQUlyTCxVQUFVbkMsR0FBSTBTLEVBQUksRUFBR0MsRUFBS25GLEVBQUVwTCxPQUFRc1EsRUFBSUMsRUFBSUQsSUFBS3pCLElBQzFEblEsRUFBRW1RLEdBQUt6RCxFQUFFa0YsR0FDakIsT0FBTzVSLEdBRVBpakIsRUFBbUJ4aEIsTUFBUUEsS0FBS3doQixpQkFBb0IsU0FBVUMsR0FDOUQsT0FBUUEsR0FBT0EsRUFBSTVpQixXQUFjNGlCLEVBQU0sQ0FBRSxRQUFXQSxJQUV4RHRqQixPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sSUFDdERuQixFQUFRbWtCLG1CQUFnQixFQUN4QixJQUFJQyxFQUFVSCxFQUFnQixFQUFRLElBQ2xDSSxFQUFZLEVBQVEsSUFDeEJya0IsRUFBUW1rQixjQUFnQixTQUFVRyxFQUFzQkMsRUFBZXZQLEVBQVMyTCxHQUM1RSxJQUFJck4sRUFBSzhRLEVBQVFJLFFBQVFDLFNBQVNKLEVBQVVwUixTQUFTcVIsRUFBc0IxakIsT0FBT2lDLEtBQUswaEIsS0FBa0JHLEVBQWdCcFIsRUFBRyxHQUFJcVIsRUFBbUJyUixFQUFHLEdBRWxKc1IsRUFBbUJSLEVBQVFJLFFBQVFsQyxPQUFPb0MsR0FZOUMsTUFBTyxDQUFDQSxFQVhPTixFQUFRSSxRQUFRWCxhQUFZLFNBQVVnQixHQUNqRCxJQUFJQyxFQUFXVCxFQUFVblIseUJBQXlCMFIsRUFBaUJqZSxRQUFTNGQsR0FDeEVqSSxFQUFXdUksRUFBUWxSLFFBQU8sU0FBVS9OLEVBQU9DLEdBQVUsT0FBT21QLEVBQVFwUCxFQUFPQyxLQUFZNE0sRUFBUyxHQUFJcVMsSUFDcEc3QyxFQUFVb0MsRUFBVXJSLGdCQUFnQjhSLEVBQVV4SSxHQUM5Q3lJLEVBQW1CVixFQUFVcFIsU0FBU3FKLEVBQVUxYixPQUFPaUMsS0FBSzBoQixJQUMzREYsRUFBVXRSLGdCQUFnQjZSLEVBQWlCamUsUUFBU29lLEtBQ3JESCxFQUFpQmplLFFBQVVvZSxFQUMzQkosRUFBaUJDLEVBQWlCamUsVUFFdENnYSxTQUFvREEsRUFBU3NCLEtBQzlEdlAsRUFBZTlSLE9BQU9va0IsT0FBT1QsR0FBZ0IsQ0FBQ3ZQLEVBQVMyTCxRLDZCQ3ZDOUQsSUFBSWxPLEVBQVloUSxNQUFRQSxLQUFLZ1EsVUFBYSxXQVN0QyxPQVJBQSxFQUFXN1IsT0FBT3VCLFFBQVUsU0FBU2YsR0FDakMsSUFBSyxJQUFJYSxFQUFHL0IsRUFBSSxFQUFHeUIsRUFBSVUsVUFBVUMsT0FBUXBDLEVBQUl5QixFQUFHekIsSUFFNUMsSUFBSyxJQUFJOEIsS0FEVEMsRUFBSUksVUFBVW5DLEdBQ09VLE9BQU9rQixVQUFVQyxlQUFlMUIsS0FBSzRCLEVBQUdELEtBQ3pEWixFQUFFWSxHQUFLQyxFQUFFRCxJQUVqQixPQUFPWixJQUVLb0IsTUFBTUMsS0FBTUosWUFFaEN6QixPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sSUFDdERuQixFQUFRZ1YsYUFBVSxFQUNsQixJQUFJcVAsRUFBWSxFQUFRLElBQ3BCWSxFQUFrQixFQUFRLElBQzFCQyxFQUFZLFNBQVV2ZSxFQUFTd2UsRUFBUWxSLEdBQ3ZDLE9BQU9BLEVBQU0sRUFBSW9RLEVBQVV2UixNQUFNbk0sRUFBVXdlLEVBQVEsRUFBR2xSLEVBQU0sR0FBSyxNQUVyRWpVLEVBQVFnVixRQUFVLFNBQVVwUCxFQUFPd2QsRUFBV3ZkLEdBQzFDLEdBQXNCLGlCQUFYQSxFQUNQLE9BQVFBLEdBQ0osSUFBSyxZQUNELE9BQU80TSxFQUFTQSxFQUFTLEdBQUk3TSxHQUFRLENBQUU4YyxRQUFRLElBQ25ELElBQUssV0FDRCxPQUFPalEsRUFBU0EsRUFBUyxHQUFJN00sR0FBUSxDQUFFOGMsUUFBUSxJQUNuRCxJQUFLLHNCQUNELE9BQU9qUSxFQUFTQSxFQUFTLEdBQUk3TSxHQUFRLENBQUUwZCxpQkFBa0JGLEVBQVksRUFBSSxFQUFJLE9BQ2pGLElBQUsseUJBQ0QsT0FBTzNRLEVBQVNBLEVBQVMsR0FBSTdNLEdBQVEsQ0FBRTBkLGlCQUE0QyxNQUExQjFkLEVBQU0wZCxpQkFDckQ0QixFQUFVdGYsRUFBTTBkLGtCQUFtQixFQUFHRixHQUN0QyxJQUVkLElBQUsscUJBQ0QsT0FBTzNRLEVBQVNBLEVBQVMsR0FBSTdNLEdBQVEsQ0FBRTBkLGlCQUE0QyxNQUExQjFkLEVBQU0wZCxpQkFDckQ0QixFQUFVdGYsRUFBTTBkLGlCQUFrQixFQUFHRixHQUNyQyxJQUVkLElBQUsscUJBQ0QsT0FBTzNRLEVBQVNBLEVBQVMsR0FBSTdNLEdBQVEsQ0FBRTBkLGlCQUFrQkYsRUFBWSxFQUFJQSxFQUFZLEVBQUksT0FDN0YsSUFBSyx5QkFDRCxPQUFPM1EsRUFBU0EsRUFBUyxHQUFJN00sR0FBUSxDQUFFb2MsZ0JBQTJDLE1BQTFCcGMsRUFBTTBkLGtCQUM1QnBiLE1BQTFCdEMsRUFBTTBkLGlCQUNKLENBQUMxZCxFQUFNMGQsa0JBQ1AsS0FFZCxJQUFLLGlCQUNELE9BQU83USxFQUFTQSxFQUFTLEdBQUk3TSxHQUFRLENBQUVvYyxnQkFBaUIsR0FBSXNCLGlCQUFrQkYsRUFBWSxFQUFJLEVBQUksT0FFdEcsUUFDSSxPQUFPNkIsRUFBZ0I5RyxZQUFZdFksUUFJM0MsT0FBUUEsRUFBTzBCLE1BQ1gsSUFBSyxjQUNELE9BQU9rTCxFQUFTQSxFQUFTLEdBQUk3TSxHQUFRLENBQUVvYyxnQkFBaUIsQ0FBQ25jLEVBQU8rTCxPQUFRMFIsaUJBQWtCemQsRUFBTytMLFFBRXJHLElBQUssc0JBQ0QsT0FBT2EsRUFBU0EsRUFBUyxHQUFJN00sR0FBUSxDQUFFb2MsZ0JBQWlCcGMsRUFBTW9jLGdCQUNyRHZPLFFBQU8sU0FBVXZULEdBQUssT0FBT0EsSUFBTTJGLEVBQU8rTCxTQUMxQ2dKLE9BQU9oVixFQUFNb2MsZ0JBQWdCdE8sU0FBUzdOLEVBQU8rTCxPQUFTLEdBQUssQ0FBQy9MLEVBQU8rTCxRQUFTMFIsaUJBQWtCemQsRUFBTytMLFFBRWxILElBQUssaUJBQ0QsT0FBT2EsRUFBU0EsRUFBUyxHQUFJN00sR0FBUSxDQUFFMGQsaUJBQW1DLE9BQWpCemQsRUFBTytMLE1BQ3REL0wsRUFBTytMLE1BQ1B5UyxFQUFVdlIsTUFBTWpOLEVBQU8rTCxNQUFPLEVBQUd3UixFQUFZLEtBRTNELFFBQ0ksT0FBTzZCLEVBQWdCOUcsWUFBWXRZLE0sNkJDcEVuRGpGLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxJQUN0RG5CLEVBQVFpZSxZQUFjamUsRUFBUW1lLGlCQUFjLEVBQzVDbmUsRUFBUW1lLFlBQWMsU0FBVWhkLEdBQzVCLE1BQU0sSUFBSXFNLE1BQU0sc0JBQXdCck0sSUFFNUNuQixFQUFRaWUsWUFBYyxTQUFVekssRUFBSzBLLEdBQ2pDLE9BQU8xSyxFQUFJelIsZUFBZW1jLEssNkJDTjlCLElBQUkrRixFQUFtQnhoQixNQUFRQSxLQUFLd2hCLGlCQUFvQixTQUFVQyxHQUM5RCxPQUFRQSxHQUFPQSxFQUFJNWlCLFdBQWM0aUIsRUFBTSxDQUFFLFFBQVdBLElBRXhEdGpCLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxJQUN0RG5CLEVBQVFvbEIsd0JBQXFCLEVBQzdCLElBQUloQixFQUFVSCxFQUFnQixFQUFRLElBQ3RDamtCLEVBQVFvbEIsbUJBQXFCLFNBQVVDLEVBQVkvRSxHQUMvQzhELEVBQVFJLFFBQVE1RCxXQUFVLFdBQ3RCLElBQUl0TixFQUNKLFNBQVNnUyxFQUFnQmhlLEdBQ3JCLElBQUlnTSxHQUNnQyxRQUE3QkEsRUFBSytSLEVBQVcxZSxlQUE0QixJQUFQMk0sT0FBZ0IsRUFBU0EsRUFBR2lTLFNBQVNqZSxFQUFFa2UsaUJBQy9FbEYsSUFJUixPQUQ4QixRQUE3QmhOLEVBQUsrUixFQUFXMWUsZUFBNEIsSUFBUDJNLEdBQXlCQSxFQUFHb0osaUJBQWlCLFdBQVk0SSxHQUN4RixXQUNILElBQUloUyxFQUMwQixRQUE3QkEsRUFBSytSLEVBQVcxZSxlQUE0QixJQUFQMk0sR0FBeUJBLEVBQUcrTSxvQkFBb0IsV0FBWWlGLE1BRXZHLENBQUNoRixNLDZCQ3BCUixJQUFJMkQsRUFBbUJ4aEIsTUFBUUEsS0FBS3doQixpQkFBb0IsU0FBVUMsR0FDOUQsT0FBUUEsR0FBT0EsRUFBSTVpQixXQUFjNGlCLEVBQU0sQ0FBRSxRQUFXQSxJQUV4RHRqQixPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sSUFDdERuQixFQUFReWxCLHNCQUFtQixFQUMzQixJQUFJckIsRUFBVUgsRUFBZ0IsRUFBUSxJQUN0Q2prQixFQUFReWxCLGlCQUFtQixTQUFVdGtCLEdBQ2pDLElBQUl1a0IsRUFBV3RCLEVBQVFJLFFBQVFsQyxTQUkvQixPQUhBOEIsRUFBUUksUUFBUTVELFdBQVUsV0FDdEI4RSxFQUFTL2UsUUFBVXhGLEtBRWhCdWtCLEVBQVMvZSxVLDZCQ1hwQi9GLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxJQUN0RG5CLEVBQVEybEIsaUNBQThCLEVBQ3RDM2xCLEVBQVEybEIsNEJBQThCLFNBQVVsYyxHQUFZLE9BQU8sU0FBVW5DLEdBQ3pFLE9BQVFBLEVBQUU3RixLQUNOLElBQUssSUFDRCxNQUNKLElBQUssUUFDRGdJLEVBQVMsQ0FBQyx5QkFBMEIsY0FDcEMsTUFDSixJQUFLLE1BQ0wsSUFBSyxTQUNMLElBQUssTUFDREEsRUFBUyxDQUFDLGNBQ1YsTUFDSixJQUFLLE9BQ0wsSUFBSyxZQUNEbkMsRUFBRXNlLGlCQUNGbmMsRUFBUyxDQUFDLHVCQUNWLE1BQ0osSUFBSyxLQUNMLElBQUssVUFDRG5DLEVBQUVzZSxpQkFDRm5jLEVBQVMsQ0FBQywyQkFDVixNQUNKLElBQUssT0FDREEsRUFBUyxDQUFDLHdCQUNWLE1BRUosSUFBSyxNQUNEQSxFQUFTLENBQUMsdUJBQ1YsTUFFSixRQUNJLFcsNFVDbENHLFNBQVNvYyxFQUFnQmxsQixFQUFHcUIsR0FNekMsT0FMQTZqQixFQUFrQmpsQixPQUFPa2xCLGdCQUFrQixTQUF5Qm5sQixFQUFHcUIsR0FFckUsT0FEQXJCLEVBQUVvbEIsVUFBWS9qQixFQUNQckIsSUFHY0EsRUFBR3FCLEdDTGIsU0FBU2drQixFQUFlQyxFQUFVQyxHQUMvQ0QsRUFBU25rQixVQUFZbEIsT0FBT1ksT0FBTzBrQixFQUFXcGtCLFdBQzlDbWtCLEVBQVNua0IsVUFBVXFrQixZQUFjRixFQUNqQyxFQUFlQSxFQUFVQyxHQ0paLFNBQVNFLEVBQXVCek4sR0FDN0MsUUFBYSxJQUFUQSxFQUNGLE1BQU0sSUFBSTBOLGVBQWUsNkRBRzNCLE9BQU8xTixFQ0xULFNBQVMyTixFQUFlQyxFQUFXQyxHQUMvQixHQUFJRCxFQUFVamtCLFNBQVdra0IsRUFBV2xrQixPQUNoQyxPQUFPLEVBRVgsSUFBSyxJQUFJcEMsRUFBSSxFQUFHQSxFQUFJcW1CLEVBQVVqa0IsT0FBUXBDLElBQ2xDLEdBQUlxbUIsRUFBVXJtQixLQUFPc21CLEVBQVd0bUIsR0FDNUIsT0FBTyxFQUdmLE9BQU8sRUEwQkksTUF2QmYsU0FBb0J1bUIsRUFBVUMsR0FFMUIsSUFBSUMsT0FEWSxJQUFaRCxJQUFzQkEsRUFBVUosR0FFcEMsSUFDSU0sRUFEQUMsRUFBVyxHQUVYQyxHQUFhLEVBZWpCLE9BZEEsV0FFSSxJQURBLElBQUlDLEVBQVUsR0FDTDFULEVBQUssRUFBR0EsRUFBS2hSLFVBQVVDLE9BQVErUSxJQUNwQzBULEVBQVExVCxHQUFNaFIsVUFBVWdSLEdBRTVCLE9BQUl5VCxHQUFjSCxJQUFhbGtCLE1BQVFpa0IsRUFBUUssRUFBU0YsS0FHeERELEVBQWFILEVBQVNqa0IsTUFBTUMsS0FBTXNrQixHQUNsQ0QsR0FBYSxFQUNiSCxFQUFXbGtCLEtBQ1hva0IsRUFBV0UsR0FMQUgsSSxjQ2RmSSxFQURpRCxpQkFBaEJDLGFBQXVELG1CQUFwQkEsWUFBWUQsSUFDaEQsV0FDbEMsT0FBT0MsWUFBWUQsT0FDakIsV0FDRixPQUFPRSxLQUFLRixPQUVkLFNBQVNHLEVBQWNDLEdBQ3JCQyxxQkFBcUJELEVBQVVsSyxJQUVqQyxTQUFTb0ssRUFBZXJrQixFQUFVc2tCLEdBQ2hDLElBQUlyVixFQUFROFUsSUFVWixJQUFJSSxFQUFZLENBQ2RsSyxHQUFJc0ssdUJBVE4sU0FBU0MsSUFDSFQsSUFBUTlVLEdBQVNxVixFQUNuQnRrQixFQUFTNUMsS0FBSyxNQUVkK21CLEVBQVVsSyxHQUFLc0ssc0JBQXNCQyxPQU96QyxPQUFPTCxFQUdULElBQUkxRyxHQUFRLEVBb0JaLElBQUlnSCxFQUFrQixLQU90QixTQUFTQyxFQUFpQkMsR0FLeEIsUUFKb0IsSUFBaEJBLElBQ0ZBLEdBQWMsR0FHUSxPQUFwQkYsR0FBNEJFLEVBQWEsQ0FDM0MsSUFBSUMsRUFBV3JpQixTQUFTSixjQUFjLE9BQ2xDMGlCLEVBQWFELEVBQVM3RCxNQUMxQjhELEVBQVdDLE1BQVEsT0FDbkJELEVBQVdFLE9BQVMsT0FDcEJGLEVBQVdHLFNBQVcsU0FDdEJILEVBQVdJLFVBQVksTUFDdkIsSUFBSUMsRUFBVzNpQixTQUFTSixjQUFjLE9BQ2xDZ2pCLEVBQWFELEVBQVNuRSxNQW1CMUIsT0FsQkFvRSxFQUFXTCxNQUFRLFFBQ25CSyxFQUFXSixPQUFTLFFBQ3BCSCxFQUFTUSxZQUFZRixHQUNyQjNpQixTQUFTOGlCLEtBQUtELFlBQVlSLEdBRXRCQSxFQUFTVSxXQUFhLEVBQ3hCYixFQUFrQix1QkFFbEJHLEVBQVNVLFdBQWEsRUFHcEJiLEVBRDBCLElBQXhCRyxFQUFTVSxXQUNPLFdBRUEsc0JBSXRCL2lCLFNBQVM4aUIsS0FBS0UsWUFBWVgsR0FDbkJILEVBR1QsT0FBT0EsRUFHVCxJQUVJZSxFQUFpQixTQUF3QjdqQixHQUMzQyxJQUFJOGpCLEVBQWM5akIsRUFBSzhqQixZQUNaOWpCLEVBQUtnWSxLQUVoQixPQURlaFksRUFBSytqQixTQUNGLElBQU1ELEdBdUIxQixTQUFTRSxFQUFvQmpoQixHQUMzQixJQUFJa2hCLEVBQVFoYixFQUVSaWIsRUFBa0JuaEIsRUFBTW1oQixnQkFDeEJDLEVBQStCcGhCLEVBQU1vaEIsNkJBQ3JDQyxFQUFrQ3JoQixFQUFNcWhCLGdDQUN4Q0MsRUFBaUJ0aEIsRUFBTXNoQixlQUN2QkMsRUFBMEJ2aEIsRUFBTXVoQix3QkFDaENDLEVBQXlCeGhCLEVBQU13aEIsdUJBQy9CQyxFQUFpQ3poQixFQUFNeWhCLCtCQUN2Q0MsRUFBOEIxaEIsRUFBTTBoQiw0QkFDcENDLEVBQWUzaEIsRUFBTTJoQixhQUNyQkMsRUFBZTVoQixFQUFNNGhCLGFBQ3JCQyxFQUE0QjdoQixFQUFNNmhCLDBCQUNsQ0MsRUFBK0I5aEIsRUFBTThoQiw2QkFDckNDLEVBQW9CL2hCLEVBQU0raEIsa0JBQzFCQyxFQUF3Q2hpQixFQUFNZ2lCLHNDQUM5Q0MsRUFBZ0JqaUIsRUFBTWlpQixjQUMxQixPQUFPL2IsRUFBUWdiLEVBRWYsU0FBVWdCLEdBTVIsU0FBU0MsRUFBSzVnQixHQUNaLElBQUk2Z0IsRUE0SkosT0ExSkFBLEVBQVFGLEVBQWV4cEIsS0FBS29DLEtBQU15RyxJQUFVekcsTUFDdEN1bkIsZUFBaUJOLEVBQWtCSyxFQUFNN2dCLE1BQU9rZCxFQUF1QkEsRUFBdUIyRCxLQUNwR0EsRUFBTUUsMkJBQTZCLEtBQ25DRixFQUFNRyxlQUFZLEVBQ2xCSCxFQUFNbmtCLE1BQVEsQ0FDWnVrQixTQUFVL0QsRUFBdUJBLEVBQXVCMkQsSUFDeERLLGFBQWEsRUFDYkMsMEJBQTJCLFVBQzNCOUIsV0FBcUQsaUJBQWxDd0IsRUFBTTdnQixNQUFNb2hCLGtCQUFpQ1AsRUFBTTdnQixNQUFNb2hCLGtCQUFvQixFQUNoR0MsVUFBbUQsaUJBQWpDUixFQUFNN2dCLE1BQU1zaEIsaUJBQWdDVCxFQUFNN2dCLE1BQU1zaEIsaUJBQW1CLEVBQzdGQywwQkFBMEIsRUFDMUJDLHdCQUF5QixXQUUzQlgsRUFBTVksMEJBQXVCLEVBQzdCWixFQUFNWSxxQkFBdUIsR0FBVyxTQUFVQyxFQUEwQkMsRUFBeUJDLEVBQXVCQyxFQUFzQkMsRUFBeUJDLEVBQXdCQyxFQUFzQkMsR0FDdk4sT0FBT3BCLEVBQU03Z0IsTUFBTWtpQixnQkFBZ0IsQ0FDakNSLHlCQUEwQkEsRUFDMUJDLHdCQUF5QkEsRUFDekJDLHNCQUF1QkEsRUFDdkJDLHFCQUFzQkEsRUFDdEJDLHdCQUF5QkEsRUFDekJDLHVCQUF3QkEsRUFDeEJDLHFCQUFzQkEsRUFDdEJDLG9CQUFxQkEsT0FHekJwQixFQUFNc0IsbUJBQWdCLEVBQ3RCdEIsRUFBTXNCLGNBQWdCLEdBQVcsU0FBVTlDLEVBQVlnQyxFQUFXRixFQUEyQkssRUFBeUJELEdBQ3BILE9BQU9WLEVBQU03Z0IsTUFBTW9pQixTQUFTLENBQzFCakIsMEJBQTJCQSxFQUMzQjlCLFdBQVlBLEVBQ1pnQyxVQUFXQSxFQUNYRyx3QkFBeUJBLEVBQ3pCRCx5QkFBMEJBLE9BRzlCVixFQUFNd0IsbUJBQWdCLEVBRXRCeEIsRUFBTXdCLGNBQWdCLFNBQVU1QyxFQUFVRCxHQUN4QyxJQVFJMUUsRUFSQXdILEVBQWN6QixFQUFNN2dCLE1BQ3BCdWlCLEVBQWNELEVBQVlDLFlBQzFCdkQsRUFBWXNELEVBQVl0RCxVQUN4QndELEVBQVlGLEVBQVlFLFVBRXhCQyxFQUFpQjVCLEVBQU02QixtQkFBbUJqQyxHQUF5QzhCLEVBQWE5QixHQUF5Q3pCLEVBQVd5QixHQUF5QytCLEdBRTdManFCLEVBQU1rbkIsRUFBVyxJQUFNRCxFQUczQixHQUFJaUQsRUFBZTVwQixlQUFlTixHQUNoQ3VpQixFQUFRMkgsRUFBZWxxQixPQUNsQixDQUNMLElBQUlvcUIsRUFBVS9DLEVBQWdCaUIsRUFBTTdnQixNQUFPd2YsRUFBYXFCLEVBQU1DLGdCQUUxRDhCLEVBQXNCLFFBQWQ1RCxFQUNaeUQsRUFBZWxxQixHQUFPdWlCLEVBQVEsQ0FDNUIxRSxTQUFVLFdBQ1ZuTSxLQUFNMlksT0FBUTVqQixFQUFZMmpCLEVBQzFCelksTUFBTzBZLEVBQVFELE9BQVUzakIsRUFDekI2akIsSUFBS3hDLEVBQWFRLEVBQU03Z0IsTUFBT3lmLEVBQVVvQixFQUFNQyxnQkFDL0NoQyxPQUFRc0IsRUFBYVMsRUFBTTdnQixNQUFPeWYsRUFBVW9CLEVBQU1DLGdCQUNsRGpDLE1BQU9rQixFQUFlYyxFQUFNN2dCLE1BQU93ZixFQUFhcUIsRUFBTUMsaUJBSTFELE9BQU9oRyxHQUdUK0YsRUFBTTZCLHdCQUFxQixFQUMzQjdCLEVBQU02QixtQkFBcUIsR0FBVyxTQUFVclosRUFBR3laLEVBQUlDLEdBQ3JELE1BQU8sTUFHVGxDLEVBQU1tQyxVQUFZLFNBQVV2UCxHQUMxQixJQUFJd1AsRUFBdUJ4UCxFQUFNeVAsY0FDN0JDLEVBQWVGLEVBQXFCRSxhQUNwQ0MsRUFBY0gsRUFBcUJHLFlBQ25DL0QsRUFBYTRELEVBQXFCNUQsV0FDbENnQyxFQUFZNEIsRUFBcUI1QixVQUNqQ2dDLEVBQWVKLEVBQXFCSSxhQUNwQ0MsRUFBY0wsRUFBcUJLLFlBRXZDekMsRUFBTXhOLFVBQVMsU0FBVWtRLEdBQ3ZCLEdBQUlBLEVBQVVsRSxhQUFlQSxHQUFja0UsRUFBVWxDLFlBQWNBLEVBSWpFLE9BQU8sS0FHVCxJQUFJckMsRUFBWTZCLEVBQU03Z0IsTUFBTWdmLFVBS3hCd0UsRUFBdUJuRSxFQUUzQixHQUFrQixRQUFkTCxFQUNGLE9BQVFQLEtBQ04sSUFBSyxXQUNIK0UsR0FBd0JuRSxFQUN4QixNQUVGLElBQUssc0JBQ0htRSxFQUF1QkYsRUFBY0YsRUFBYy9ELEVBTXpEbUUsRUFBdUJ2WSxLQUFLRixJQUFJLEVBQUdFLEtBQUtILElBQUkwWSxFQUFzQkYsRUFBY0YsSUFDaEYsSUFBSUssRUFBc0J4WSxLQUFLRixJQUFJLEVBQUdFLEtBQUtILElBQUl1VyxFQUFXZ0MsRUFBZUYsSUFDekUsTUFBTyxDQUNMakMsYUFBYSxFQUNiQywwQkFBMkJvQyxFQUFVbEUsV0FBYUEsRUFBYSxVQUFZLFdBQzNFQSxXQUFZbUUsRUFDWm5DLFVBQVdvQyxFQUNYakMsd0JBQXlCK0IsRUFBVWxDLFVBQVlBLEVBQVksVUFBWSxXQUN2RUUsMEJBQTBCLEtBRTNCVixFQUFNNkMsNkJBR1g3QyxFQUFNOEMsZ0JBQWtCLFNBQVU3aUIsR0FDaEMsSUFBSThpQixFQUFXL0MsRUFBTTdnQixNQUFNNGpCLFNBQzNCL0MsRUFBTUcsVUFBWWxnQixFQUVNLG1CQUFiOGlCLEVBQ1RBLEVBQVM5aUIsR0FDWSxNQUFaOGlCLEdBQXdDLGlCQUFiQSxHQUF5QkEsRUFBUy9xQixlQUFlLGFBQ3JGK3FCLEVBQVNubUIsUUFBVXFELElBSXZCK2YsRUFBTTZDLDJCQUE2QixXQUNRLE9BQXJDN0MsRUFBTUUsNEJBQ1I5QyxFQUFjNEMsRUFBTUUsNEJBR3RCRixFQUFNRSwyQkFBNkIzQyxFQUFleUMsRUFBTWdELGtCQXJNM0IsTUF3TS9CaEQsRUFBTWdELGtCQUFvQixXQUN4QmhELEVBQU1FLDJCQUE2QixLQUVuQ0YsRUFBTXhOLFNBQVMsQ0FDYjZOLGFBQWEsSUFDWixXQUdETCxFQUFNNkIsb0JBQW9CLE9BSXZCN0IsRUFsS1QvRCxFQUFlOEQsRUFBTUQsR0FxS3JCQyxFQUFLelEseUJBQTJCLFNBQWtDMlQsRUFBV1AsR0FHM0UsT0FGQVEsRUFBb0JELEVBQVdQLEdBQy9CN0MsRUFBY29ELEdBQ1AsTUFHVCxJQUFJM29CLEVBQVN5bEIsRUFBS2hvQixVQXFUbEIsT0FuVEF1QyxFQUFPNm9CLFNBQVcsU0FBa0IzZSxHQUNsQyxJQUFJZ2EsRUFBYWhhLEVBQU1nYSxXQUNuQmdDLEVBQVloYyxFQUFNZ2MsZUFFSHJpQixJQUFmcWdCLElBQ0ZBLEVBQWFwVSxLQUFLRixJQUFJLEVBQUdzVSxTQUdUcmdCLElBQWRxaUIsSUFDRkEsRUFBWXBXLEtBQUtGLElBQUksRUFBR3NXLElBRzFCOW5CLEtBQUs4WixVQUFTLFNBQVVrUSxHQVN0QixZQVJtQnZrQixJQUFmcWdCLElBQ0ZBLEVBQWFrRSxFQUFVbEUsaUJBR1ByZ0IsSUFBZHFpQixJQUNGQSxFQUFZa0MsRUFBVWxDLFdBR3BCa0MsRUFBVWxFLGFBQWVBLEdBQWNrRSxFQUFVbEMsWUFBY0EsRUFDMUQsS0FHRixDQUNMRiwwQkFBMkJvQyxFQUFVbEUsV0FBYUEsRUFBYSxVQUFZLFdBQzNFQSxXQUFZQSxFQUNaZ0MsVUFBV0EsRUFDWEUsMEJBQTBCLEVBQzFCQyx3QkFBeUIrQixFQUFVbEMsVUFBWUEsRUFBWSxVQUFZLGNBRXhFOW5CLEtBQUttcUIsNkJBR1Z2b0IsRUFBTzhvQixhQUFlLFNBQXNCQyxHQUMxQyxJQUFJQyxFQUFjRCxFQUFNRSxNQUNwQkEsT0FBd0IsSUFBaEJELEVBQXlCLE9BQVNBLEVBQzFDM0UsRUFBYzBFLEVBQU0xRSxZQUNwQkMsRUFBV3lFLEVBQU16RSxTQUNqQjRFLEVBQWU5cUIsS0FBS3lHLE1BQ3BCc2tCLEVBQWNELEVBQWFDLFlBQzNCeEYsRUFBU3VGLEVBQWF2RixPQUN0QnlGLEVBQVdGLEVBQWFFLFNBQ3hCMUYsRUFBUXdGLEVBQWF4RixNQUNyQjJGLEVBQWNqckIsS0FBS21ELE1BQ25CMmlCLEVBQWFtRixFQUFZbkYsV0FDekJnQyxFQUFZbUQsRUFBWW5ELFVBQ3hCb0QsRUE5VVYsU0FBMEIvRixHQUt4QixRQUpvQixJQUFoQkEsSUFDRkEsR0FBYyxJQUdGLElBQVZsSCxHQUFla0gsRUFBYSxDQUM5QixJQUFJZ0csRUFBTXBvQixTQUFTSixjQUFjLE9BQzdCNGUsRUFBUTRKLEVBQUk1SixNQUNoQkEsRUFBTStELE1BQVEsT0FDZC9ELEVBQU1nRSxPQUFTLE9BQ2ZoRSxFQUFNaUUsU0FBVyxTQUNqQnppQixTQUFTOGlCLEtBQUtELFlBQVl1RixHQUMxQmxOLEVBQU9rTixFQUFJQyxZQUFjRCxFQUFJdEIsWUFDN0I5bUIsU0FBUzhpQixLQUFLRSxZQUFZb0YsR0FHNUIsT0FBT2xOLEVBOFRpQm9OLFFBRUE1bEIsSUFBaEJ3Z0IsSUFDRkEsRUFBY3ZVLEtBQUtGLElBQUksRUFBR0UsS0FBS0gsSUFBSTBVLEVBQWE4RSxFQUFjLFVBRy9DdGxCLElBQWJ5Z0IsSUFDRkEsRUFBV3hVLEtBQUtGLElBQUksRUFBR0UsS0FBS0gsSUFBSTJVLEVBQVU4RSxFQUFXLEtBR3ZELElBQUlNLEVBQXVCN0UsRUFBd0J6bUIsS0FBS3lHLE1BQU96RyxLQUFLdW5CLGdCQUtoRWdFLEVBSnNCN0UsRUFBdUIxbUIsS0FBS3lHLE1BQU96RyxLQUFLdW5CLGdCQUlkakMsRUFBUTRGLEVBQWdCLEVBQ3hFTSxFQUF3QkYsRUFBdUIvRixFQUFTMkYsRUFBZ0IsRUFDNUVsckIsS0FBS3lxQixTQUFTLENBQ1ozRSxnQkFBNEJyZ0IsSUFBaEJ3Z0IsRUFBNEJVLEVBQStCM21CLEtBQUt5RyxNQUFPd2YsRUFBYTRFLEVBQU8vRSxFQUFZOWxCLEtBQUt1bkIsZUFBZ0JpRSxHQUF5QjFGLEVBQ2pLZ0MsZUFBd0JyaUIsSUFBYnlnQixFQUF5QlUsRUFBNEI1bUIsS0FBS3lHLE1BQU95ZixFQUFVMkUsRUFBTy9DLEVBQVc5bkIsS0FBS3VuQixlQUFnQmdFLEdBQTJCekQsS0FJNUpsbUIsRUFBTzZwQixrQkFBb0IsV0FDekIsSUFBSUMsRUFBZTFyQixLQUFLeUcsTUFDcEJvaEIsRUFBb0I2RCxFQUFhN0Qsa0JBQ2pDRSxFQUFtQjJELEVBQWEzRCxpQkFFcEMsR0FBc0IsTUFBbEIvbkIsS0FBS3luQixVQUFtQixDQUMxQixJQUFJNEMsRUFBV3JxQixLQUFLeW5CLFVBRWEsaUJBQXRCSSxJQUNUd0MsRUFBU3ZFLFdBQWErQixHQUdRLGlCQUFyQkUsSUFDVHNDLEVBQVN2QyxVQUFZQyxHQUl6Qi9uQixLQUFLMnJCLHVCQUdQL3BCLEVBQU9ncUIsbUJBQXFCLFdBQzFCLElBQUluRyxFQUFZemxCLEtBQUt5RyxNQUFNZ2YsVUFDdkJvRyxFQUFlN3JCLEtBQUttRCxNQUNwQjJpQixFQUFhK0YsRUFBYS9GLFdBQzFCZ0MsRUFBWStELEVBQWEvRCxVQUc3QixHQUYrQitELEVBQWE3RCwwQkFFTSxNQUFsQmhvQixLQUFLeW5CLFVBQW1CLENBSXRELElBQUk0QyxFQUFXcnFCLEtBQUt5bkIsVUFFcEIsR0FBa0IsUUFBZGhDLEVBQ0YsT0FBUVAsS0FDTixJQUFLLFdBQ0htRixFQUFTdkUsWUFBY0EsRUFDdkIsTUFFRixJQUFLLHFCQUNIdUUsRUFBU3ZFLFdBQWFBLEVBQ3RCLE1BRUYsUUFDRSxJQUFJK0QsRUFBY1EsRUFBU1IsWUFDdkJFLEVBQWNNLEVBQVNOLFlBQzNCTSxFQUFTdkUsV0FBYWlFLEVBQWNGLEVBQWMvRCxPQUl0RHVFLEVBQVN2RSxXQUFhcFUsS0FBS0YsSUFBSSxFQUFHc1UsR0FHcEN1RSxFQUFTdkMsVUFBWXBXLEtBQUtGLElBQUksRUFBR3NXLEdBR25DOW5CLEtBQUsyckIsdUJBR1AvcEIsRUFBT2txQixxQkFBdUIsV0FDWSxPQUFwQzlyQixLQUFLd25CLDRCQUNQOUMsRUFBYzFrQixLQUFLd25CLDZCQUl2QjVsQixFQUFPOFYsT0FBUyxXQUNkLElBQUlxVSxFQUFlL3JCLEtBQUt5RyxNQUNwQnBFLEVBQVcwcEIsRUFBYTFwQixTQUN4QmlNLEVBQVl5ZCxFQUFhemQsVUFDekJ5YyxFQUFjZ0IsRUFBYWhCLFlBQzNCdEYsRUFBWXNHLEVBQWF0RyxVQUN6QkYsRUFBU3dHLEVBQWF4RyxPQUN0QnlHLEVBQVdELEVBQWFDLFNBQ3hCQyxFQUFtQkYsRUFBYUUsaUJBQ2hDQyxFQUFlSCxFQUFhRyxhQUM1QkMsRUFBV0osRUFBYUksU0FDeEJDLEVBQXVCTCxFQUFhTSxRQUNwQ0EsT0FBbUMsSUFBekJELEVBQWtDcEcsRUFBaUJvRyxFQUM3REUsRUFBbUJQLEVBQWFPLGlCQUNoQ0MsRUFBZVIsRUFBYVEsYUFDNUJ2QixFQUFXZSxFQUFhZixTQUN4QnpKLEVBQVF3SyxFQUFheEssTUFDckJpTCxFQUFpQlQsRUFBYVMsZUFDOUJsSCxFQUFReUcsRUFBYXpHLE1BQ3JCcUMsRUFBYzNuQixLQUFLbUQsTUFBTXdrQixZQUV6QjhFLEVBQXdCenNCLEtBQUswc0IsOEJBQzdCQyxFQUFtQkYsRUFBc0IsR0FDekNHLEVBQWtCSCxFQUFzQixHQUV4Q0ksRUFBd0I3c0IsS0FBSzhzQiw0QkFDN0JDLEVBQWdCRixFQUFzQixHQUN0Q0csRUFBZUgsRUFBc0IsR0FFckNJLEVBQVEsR0FFWixHQUFJbEMsRUFBYyxHQUFLQyxFQUNyQixJQUFLLElBQUlrQyxFQUFZSCxFQUFlRyxHQUFhRixFQUFjRSxJQUM3RCxJQUFLLElBQUlDLEVBQWVSLEVBQWtCUSxHQUFnQlAsRUFBaUJPLElBQ3pFRixFQUFNOXJCLEtBQUssd0JBQWNrQixFQUFVLENBQ2pDNGpCLFlBQWFrSCxFQUNiaFQsS0FBTWdTLEVBQ054RSxZQUFhNkUsRUFBaUI3RSxPQUFjbGlCLEVBQzVDekcsSUFBS3F0QixFQUFRLENBQ1hwRyxZQUFha0gsRUFDYmhULEtBQU1nUyxFQUNOakcsU0FBVWdILElBRVpoSCxTQUFVZ0gsRUFDVjNMLE1BQU92aEIsS0FBSzhvQixjQUFjb0UsRUFBV0MsTUFRN0MsSUFBSTdCLEVBQXVCN0UsRUFBd0J6bUIsS0FBS3lHLE1BQU96RyxLQUFLdW5CLGdCQUNoRTZGLEVBQXNCMUcsRUFBdUIxbUIsS0FBS3lHLE1BQU96RyxLQUFLdW5CLGdCQUNsRSxPQUFPLHdCQUFjK0UsR0FBb0JDLEdBQWdCLE1BQU8sQ0FDOURqZSxVQUFXQSxFQUNYdWEsU0FBVTdvQixLQUFLeXBCLFVBQ2ZsaUIsSUFBS3ZILEtBQUtvcUIsZ0JBQ1Y3SSxNQUFPLFlBQVMsQ0FDZDFFLFNBQVUsV0FDVjBJLE9BQVFBLEVBQ1JELE1BQU9BLEVBQ1BFLFNBQVUsT0FDVjZILHdCQUF5QixRQUN6QkMsV0FBWSxZQUNaN0gsVUFBV0EsR0FDVmxFLElBQ0Ysd0JBQWMwSyxHQUFvQkMsR0FBZ0IsTUFBTyxDQUMxRDdwQixTQUFVNHFCLEVBQ1YxbEIsSUFBS3lrQixFQUNMekssTUFBTyxDQUNMZ0UsT0FBUStGLEVBQ1JpQyxjQUFlNUYsRUFBYyxZQUFTbGlCLEVBQ3RDNmYsTUFBTzhILE9BS2J4ckIsRUFBTytwQixvQkFBc0IsV0FDM0IsSUFBSTZCLEVBQWV4dEIsS0FBS3lHLE1BQ3BCc2tCLEVBQWN5QyxFQUFhekMsWUFDM0JwQyxFQUFrQjZFLEVBQWE3RSxnQkFDL0JFLEVBQVcyRSxFQUFhM0UsU0FDeEJtQyxFQUFXd0MsRUFBYXhDLFNBRTVCLEdBQStCLG1CQUFwQnJDLEdBQ0xvQyxFQUFjLEdBQUtDLEVBQVcsRUFBRyxDQUNuQyxJQUFJeUMsRUFBeUJ6dEIsS0FBSzBzQiw4QkFDOUJnQixFQUE0QkQsRUFBdUIsR0FDbkRFLEVBQTJCRixFQUF1QixHQUNsREcsRUFBMkJILEVBQXVCLEdBQ2xESSxFQUEwQkosRUFBdUIsR0FFakRLLEVBQXlCOXRCLEtBQUs4c0IsNEJBQzlCaUIsRUFBeUJELEVBQXVCLEdBQ2hERSxFQUF3QkYsRUFBdUIsR0FDL0NHLEVBQXdCSCxFQUF1QixHQUMvQ0ksRUFBdUJKLEVBQXVCLEdBRWxEOXRCLEtBQUtrb0IscUJBQXFCd0YsRUFBMkJDLEVBQTBCSSxFQUF3QkMsRUFBdUJKLEVBQTBCQyxFQUF5QkksRUFBdUJDLEdBSTVNLEdBQXdCLG1CQUFickYsRUFBeUIsQ0FDbEMsSUFBSXNGLEVBQWVudUIsS0FBS21ELE1BQ3BCaXJCLEVBQTZCRCxFQUFhdkcsMEJBQzFDeUcsRUFBY0YsRUFBYXJJLFdBQzNCd0ksRUFBYUgsRUFBYXJHLFVBQzFCeUcsRUFBNEJKLEVBQWFuRyx5QkFDekN3RyxFQUEyQkwsRUFBYWxHLHdCQUU1Q2pvQixLQUFLNG9CLGNBQWN5RixFQUFhQyxFQUFZRixFQUE0QkksRUFBMEJELEtBUXRHM3NCLEVBQU84cUIsNEJBQThCLFdBQ25DLElBQUkrQixFQUFlenVCLEtBQUt5RyxNQUNwQnNrQixFQUFjMEQsRUFBYTFELFlBQzNCMkQsRUFBc0JELEVBQWFDLG9CQUNuQ0MsRUFBdUJGLEVBQWFFLHFCQUNwQ0MsRUFBZ0JILEVBQWFHLGNBQzdCNUQsRUFBV3lELEVBQWF6RCxTQUN4QjZELEVBQWU3dUIsS0FBS21ELE1BQ3BCeWtCLEVBQTRCaUgsRUFBYWpILDBCQUN6Q0QsRUFBY2tILEVBQWFsSCxZQUMzQjdCLEVBQWErSSxFQUFhL0ksV0FDMUJnSixFQUF3QkosR0FBdUJDLEdBQXdCQyxHQUFpQixFQUU1RixHQUFvQixJQUFoQjdELEdBQWtDLElBQWJDLEVBQ3ZCLE1BQU8sQ0FBQyxFQUFHLEVBQUcsRUFBRyxHQUduQixJQUFJK0QsRUFBYXpJLEVBQTZCdG1CLEtBQUt5RyxNQUFPcWYsRUFBWTlsQixLQUFLdW5CLGdCQUN2RXlILEVBQVl6SSxFQUFnQ3ZtQixLQUFLeUcsTUFBT3NvQixFQUFZakosRUFBWTlsQixLQUFLdW5CLGdCQUdyRjBILEVBQW9CdEgsR0FBNkMsYUFBOUJDLEVBQWdGLEVBQXJDbFcsS0FBS0YsSUFBSSxFQUFHc2QsR0FDMUZJLEVBQW1CdkgsR0FBNkMsWUFBOUJDLEVBQStFLEVBQXJDbFcsS0FBS0YsSUFBSSxFQUFHc2QsR0FDNUYsTUFBTyxDQUFDcGQsS0FBS0YsSUFBSSxFQUFHdWQsRUFBYUUsR0FBbUJ2ZCxLQUFLRixJQUFJLEVBQUdFLEtBQUtILElBQUl3WixFQUFjLEVBQUdpRSxFQUFZRSxJQUFtQkgsRUFBWUMsSUFHdklwdEIsRUFBT2tyQiwwQkFBNEIsV0FDakMsSUFBSXFDLEVBQWVudkIsS0FBS3lHLE1BQ3BCc2tCLEVBQWNvRSxFQUFhcEUsWUFDM0I2RCxFQUFnQk8sRUFBYVAsY0FDN0JRLEVBQW1CRCxFQUFhQyxpQkFDaENDLEVBQW9CRixFQUFhRSxrQkFDakNyRSxFQUFXbUUsRUFBYW5FLFNBQ3hCc0UsRUFBZXR2QixLQUFLbUQsTUFDcEJ3a0IsRUFBYzJILEVBQWEzSCxZQUMzQk0sRUFBMEJxSCxFQUFhckgsd0JBQ3ZDSCxFQUFZd0gsRUFBYXhILFVBQ3pCZ0gsRUFBd0JNLEdBQW9CQyxHQUFxQlQsR0FBaUIsRUFFdEYsR0FBb0IsSUFBaEI3RCxHQUFrQyxJQUFiQyxFQUN2QixNQUFPLENBQUMsRUFBRyxFQUFHLEVBQUcsR0FHbkIsSUFBSStELEVBQWFoSSxFQUEwQi9tQixLQUFLeUcsTUFBT3FoQixFQUFXOW5CLEtBQUt1bkIsZ0JBQ25FeUgsRUFBWWhJLEVBQTZCaG5CLEtBQUt5RyxNQUFPc29CLEVBQVlqSCxFQUFXOW5CLEtBQUt1bkIsZ0JBR2pGMEgsRUFBb0J0SCxHQUEyQyxhQUE1Qk0sRUFBOEUsRUFBckN2VyxLQUFLRixJQUFJLEVBQUdzZCxHQUN4RkksRUFBbUJ2SCxHQUEyQyxZQUE1Qk0sRUFBNkUsRUFBckN2VyxLQUFLRixJQUFJLEVBQUdzZCxHQUMxRixNQUFPLENBQUNwZCxLQUFLRixJQUFJLEVBQUd1ZCxFQUFhRSxHQUFtQnZkLEtBQUtGLElBQUksRUFBR0UsS0FBS0gsSUFBSXlaLEVBQVcsRUFBR2dFLEVBQVlFLElBQW1CSCxFQUFZQyxJQUc3SDNILEVBamVULENBa2VFLGlCQUFnQmpCLEVBQU8zUCxhQUFlLENBQ3RDZ1AsVUFBVyxNQUNYMEcsY0FBVTFtQixFQUNWK21CLGdCQUFnQixHQUNmcGhCLEVBR0wsSUFBSW9mLEVBQXNCLFNBQTZCK0UsRUFBT0MsR0FDN0NELEVBQU1sdEIsU0FDTGt0QixFQUFNOUosVUFDVDhKLEVBQU1oSyxPQUNBZ0ssRUFBTXJELGFBQ05xRCxFQUFNaEQsYUFDRWdELEVBQU1aLHFCQUNiWSxFQUFNWCxjQUNGVyxFQUFNRixrQkFDbEJFLEVBQU1qSyxNQUNIa0ssRUFBTTlILFVBa0RuQixFQUEwQixTQUFpQ3ZsQixFQUFNK0MsR0FDbkUsSUFBSThsQixFQUFXN29CLEVBQUs2b0IsU0FDaEJ5RSxFQUFpQnZxQixFQUFNdXFCLGVBQ3ZCQyxFQUFxQnhxQixFQUFNd3FCLG1CQUMzQkMsRUFBdUJ6cUIsRUFBTXlxQixxQkFDN0JDLEVBQTBCLEVBTzlCLEdBSklELEdBQXdCM0UsSUFDMUIyRSxFQUF1QjNFLEVBQVcsR0FHaEMyRSxHQUF3QixFQUFHLENBQzdCLElBQUlFLEVBQWVKLEVBQWVFLEdBQ2xDQyxFQUEwQkMsRUFBYW5OLE9BQVNtTixFQUFhNVIsS0FLL0QsT0FBTzJSLEdBRmtCNUUsRUFBVzJFLEVBQXVCLEdBQ0xELEdBSXBELEVBQXlCLFNBQWdDNWpCLEVBQU82ZSxHQUNsRSxJQUFJSSxFQUFjamYsRUFBTWlmLFlBQ3BCK0UsRUFBb0JuRixFQUFNbUYsa0JBQzFCQyxFQUF1QnBGLEVBQU1vRixxQkFDN0JDLEVBQTBCckYsRUFBTXFGLHdCQUNoQ0osRUFBMEIsRUFPOUIsR0FKSUksR0FBMkJqRixJQUM3QmlGLEVBQTBCakYsRUFBYyxHQUd0Q2lGLEdBQTJCLEVBQUcsQ0FDaEMsSUFBSUgsRUFBZUMsRUFBa0JFLEdBQ3JDSixFQUEwQkMsRUFBYW5OLE9BQVNtTixFQUFhNVIsS0FLL0QsT0FBTzJSLEdBRmtCN0UsRUFBY2lGLEVBQTBCLEdBQ1hELEdBSXBERSxFQUFrQixTQUF5QkMsRUFBVXpwQixFQUFPMEksRUFBT2doQixHQUNyRSxJQUFJQyxFQUFpQkMsRUFBVUMsRUFZL0IsR0FWaUIsV0FBYkosR0FDRkUsRUFBa0JELEVBQWNMLGtCQUNoQ08sRUFBVzVwQixFQUFNdWlCLFlBQ2pCc0gsRUFBb0JILEVBQWNILDBCQUVsQ0ksRUFBa0JELEVBQWNWLGVBQ2hDWSxFQUFXNXBCLEVBQU13aUIsVUFDakJxSCxFQUFvQkgsRUFBY1Isc0JBR2hDeGdCLEVBQVFtaEIsRUFBbUIsQ0FDN0IsSUFBSTVOLEVBQVMsRUFFYixHQUFJNE4sR0FBcUIsRUFBRyxDQUMxQixJQUFJVCxFQUFlTyxFQUFnQkUsR0FDbkM1TixFQUFTbU4sRUFBYW5OLE9BQVNtTixFQUFhNVIsS0FHOUMsSUFBSyxJQUFJeGdCLEVBQUk2eUIsRUFBb0IsRUFBRzd5QixHQUFLMFIsRUFBTzFSLElBQUssQ0FDbkQsSUFBSXdnQixFQUFPb1MsRUFBUzV5QixHQUNwQjJ5QixFQUFnQjN5QixHQUFLLENBQ25CaWxCLE9BQVFBLEVBQ1J6RSxLQUFNQSxHQUVSeUUsR0FBVXpFLEVBR0ssV0FBYmlTLEVBQ0ZDLEVBQWNILHdCQUEwQjdnQixFQUV4Q2doQixFQUFjUixxQkFBdUJ4Z0IsRUFJekMsT0FBT2loQixFQUFnQmpoQixJQUdyQm9oQixFQUFrQixTQUF5QkwsRUFBVXpwQixFQUFPMHBCLEVBQWV6TixHQUM3RSxJQUFJME4sRUFBaUJFLEVBWXJCLE1BVmlCLFdBQWJKLEdBQ0ZFLEVBQWtCRCxFQUFjTCxrQkFDaENRLEVBQW9CSCxFQUFjSCwwQkFFbENJLEVBQWtCRCxFQUFjVixlQUNoQ2EsRUFBb0JILEVBQWNSLHVCQUdQVyxFQUFvQixFQUFJRixFQUFnQkUsR0FBbUI1TixPQUFTLElBRW5FQSxFQUVyQjhOLEVBQTRCTixFQUFVenBCLEVBQU8wcEIsRUFBZUcsRUFBbUIsRUFBRzVOLEdBS2xGK04sRUFBaUNQLEVBQVV6cEIsRUFBTzBwQixFQUFlemUsS0FBS0YsSUFBSSxFQUFHOGUsR0FBb0I1TixJQUl4RzhOLEVBQThCLFNBQXFDTixFQUFVenBCLEVBQU8wcEIsRUFBZU8sRUFBTUMsRUFBS2pPLEdBQ2hILEtBQU9pTyxHQUFPRCxHQUFNLENBQ2xCLElBQUlFLEVBQVNELEVBQU1qZixLQUFLbWYsT0FBT0gsRUFBT0MsR0FBTyxHQUN6Q0csRUFBZ0JiLEVBQWdCQyxFQUFVenBCLEVBQU9tcUIsRUFBUVQsR0FBZXpOLE9BRTVFLEdBQUlvTyxJQUFrQnBPLEVBQ3BCLE9BQU9rTyxFQUNFRSxFQUFnQnBPLEVBQ3pCaU8sRUFBTUMsRUFBUyxFQUNORSxFQUFnQnBPLElBQ3pCZ08sRUFBT0UsRUFBUyxHQUlwQixPQUFJRCxFQUFNLEVBQ0RBLEVBQU0sRUFFTixHQUlQRixFQUFtQyxTQUEwQ1AsRUFBVXpwQixFQUFPMHBCLEVBQWVoaEIsRUFBT3VULEdBSXRILElBSEEsSUFBSS9CLEVBQXlCLFdBQWJ1UCxFQUF3QnpwQixFQUFNc2tCLFlBQWN0a0IsRUFBTXVrQixTQUM5RCtGLEVBQVcsRUFFUjVoQixFQUFRd1IsR0FBYXNQLEVBQWdCQyxFQUFVenBCLEVBQU8wSSxFQUFPZ2hCLEdBQWV6TixPQUFTQSxHQUMxRnZULEdBQVM0aEIsRUFDVEEsR0FBWSxFQUdkLE9BQU9QLEVBQTRCTixFQUFVenBCLEVBQU8wcEIsRUFBZXplLEtBQUtILElBQUlwQyxFQUFPd1IsRUFBWSxHQUFJalAsS0FBS21mLE1BQU0xaEIsRUFBUSxHQUFJdVQsSUFHeEgsRUFBZ0MsU0FBdUN3TixFQUFVenBCLEVBQU8wSSxFQUFPMGIsRUFBT21HLEVBQWNiLEVBQWVqRixHQUNySSxJQUFJak4sRUFBb0IsV0FBYmlTLEVBQXdCenBCLEVBQU02ZSxNQUFRN2UsRUFBTThlLE9BQ25Ec0ssRUFBZUksRUFBZ0JDLEVBQVV6cEIsRUFBTzBJLEVBQU9naEIsR0FHdkRjLEVBQWtDLFdBQWJmLEVBQXdCLEVBQXVCenBCLEVBQU8wcEIsR0FBaUIsRUFBd0IxcEIsRUFBTzBwQixHQUMzSGUsRUFBWXhmLEtBQUtGLElBQUksRUFBR0UsS0FBS0gsSUFBSTBmLEVBQXFCaFQsRUFBTTRSLEVBQWFuTixTQUN6RXlPLEVBQVl6ZixLQUFLRixJQUFJLEVBQUdxZSxFQUFhbk4sT0FBU3pFLEVBQU9pTixFQUFnQjJFLEVBQWE1UixNQVV0RixPQVJjLFVBQVY0TSxJQUVBQSxFQURFbUcsR0FBZ0JHLEVBQVlsVCxHQUFRK1MsR0FBZ0JFLEVBQVlqVCxFQUMxRCxPQUVBLFVBSUo0TSxHQUNOLElBQUssUUFDSCxPQUFPcUcsRUFFVCxJQUFLLE1BQ0gsT0FBT0MsRUFFVCxJQUFLLFNBQ0gsT0FBT3pmLEtBQUswZixNQUFNRCxHQUFhRCxFQUFZQyxHQUFhLEdBRTFELElBQUssT0FDTCxRQUNFLE9BQUlILEdBQWdCRyxHQUFhSCxHQUFnQkUsRUFDeENGLEVBQ0VHLEVBQVlELEdBSVpGLEVBQWVHLEVBRGpCQSxFQUlBRCxJQU1YRyxFQUVKbEwsRUFBb0IsQ0FDbEJFLGdCQUFpQixTQUF5QjVmLEVBQU8wSSxFQUFPZ2hCLEdBQ3RELE9BQU9GLEVBQWdCLFNBQVV4cEIsRUFBTzBJLEVBQU9naEIsR0FBZXpOLFFBRWhFNEQsNkJBQThCLFNBQXNDN2YsRUFBT3FmLEVBQVlxSyxHQUNyRixPQUFPSSxFQUFnQixTQUFVOXBCLEVBQU8wcEIsRUFBZXJLLElBRXpEUyxnQ0FBaUMsU0FBeUM5ZixFQUFPc29CLEVBQVlqSixFQUFZcUssR0FRdkcsSUFQQSxJQUFJcEYsRUFBY3RrQixFQUFNc2tCLFlBQ3BCekYsRUFBUTdlLEVBQU02ZSxNQUNkdUssRUFBZUksRUFBZ0IsU0FBVXhwQixFQUFPc29CLEVBQVlvQixHQUM1RGUsRUFBWXBMLEVBQWFSLEVBQ3pCNUMsRUFBU21OLEVBQWFuTixPQUFTbU4sRUFBYTVSLEtBQzVDK1EsRUFBWUQsRUFFVEMsRUFBWWpFLEVBQWMsR0FBS3JJLEVBQVN3TyxHQUM3Q2xDLElBQ0F0TSxHQUFVdU4sRUFBZ0IsU0FBVXhwQixFQUFPdW9CLEVBQVdtQixHQUFlbFMsS0FHdkUsT0FBTytRLEdBRVR4SSxlQUFnQixTQUF3Qi9mLEVBQU8wSSxFQUFPZ2hCLEdBQ3BELE9BQU9BLEVBQWNMLGtCQUFrQjNnQixHQUFPOE8sTUFFaER3SSx3QkFBeUIsRUFDekJDLHVCQUF3QixFQUN4QkMsK0JBQWdDLFNBQXdDbGdCLEVBQU8wSSxFQUFPMGIsRUFBT21HLEVBQWNiLEVBQWVqRixHQUN4SCxPQUFPLEVBQThCLFNBQVV6a0IsRUFBTzBJLEVBQU8wYixFQUFPbUcsRUFBY2IsRUFBZWpGLElBRW5HdEUsNEJBQTZCLFNBQXFDbmdCLEVBQU8wSSxFQUFPMGIsRUFBT21HLEVBQWNiLEVBQWVqRixHQUNsSCxPQUFPLEVBQThCLE1BQU96a0IsRUFBTzBJLEVBQU8wYixFQUFPbUcsRUFBY2IsRUFBZWpGLElBRWhHcEUsYUFBYyxTQUFzQnJnQixFQUFPMEksRUFBT2doQixHQUNoRCxPQUFPRixFQUFnQixNQUFPeHBCLEVBQU8wSSxFQUFPZ2hCLEdBQWV6TixRQUU3RG1FLGFBQWMsU0FBc0JwZ0IsRUFBTzBJLEVBQU9naEIsR0FDaEQsT0FBT0EsRUFBY1YsZUFBZXRnQixHQUFPOE8sTUFFN0M4SSwwQkFBMkIsU0FBbUN0Z0IsRUFBT3FoQixFQUFXcUksR0FDOUUsT0FBT0ksRUFBZ0IsTUFBTzlwQixFQUFPMHBCLEVBQWVySSxJQUV0RGQsNkJBQThCLFNBQXNDdmdCLEVBQU9zb0IsRUFBWWpILEVBQVdxSSxHQVFoRyxJQVBBLElBQUluRixFQUFXdmtCLEVBQU11a0IsU0FDakJ6RixFQUFTOWUsRUFBTThlLE9BQ2ZzSyxFQUFlSSxFQUFnQixNQUFPeHBCLEVBQU9zb0IsRUFBWW9CLEdBQ3pEZSxFQUFZcEosRUFBWXZDLEVBQ3hCN0MsRUFBU21OLEVBQWFuTixPQUFTbU4sRUFBYTVSLEtBQzVDK1EsRUFBWUQsRUFFVEMsRUFBWWhFLEVBQVcsR0FBS3RJLEVBQVN3TyxHQUMxQ2xDLElBQ0F0TSxHQUFVdU4sRUFBZ0IsTUFBT3hwQixFQUFPdW9CLEVBQVdtQixHQUFlbFMsS0FHcEUsT0FBTytRLEdBRVQvSCxrQkFBbUIsU0FBMkJ4Z0IsRUFBT2loQixHQUNuRCxJQUFJNkgsRUFBUTlvQixFQUdSMHBCLEVBQWdCLENBQ2xCTCxrQkFBbUIsR0FDbkJDLHFCQUp5QlIsRUFBTVEsc0JBeFBILEdBNlA1QkwsbUJBSnVCSCxFQUFNRyxvQkF6UEQsR0E4UDVCTSx5QkFBMEIsRUFDMUJMLHNCQUF1QixFQUN2QkYsZUFBZ0IsSUFrRGxCLE9BL0NBL0gsRUFBUzRKLHNCQUF3QixTQUFVckwsRUFBYXNMLFFBQzVCLElBQXRCQSxJQUNGQSxHQUFvQixHQUd0QjdKLEVBQVM4SixrQkFBa0IsQ0FDekJ2TCxZQUFhQSxFQUNic0wsa0JBQW1CQSxLQUl2QjdKLEVBQVMrSixtQkFBcUIsU0FBVXZMLEVBQVVxTCxRQUN0QixJQUF0QkEsSUFDRkEsR0FBb0IsR0FHdEI3SixFQUFTOEosa0JBQWtCLENBQ3pCdEwsU0FBVUEsRUFDVnFMLGtCQUFtQkEsS0FJdkI3SixFQUFTOEosa0JBQW9CLFNBQVVoQyxHQUNyQyxJQUFJdkosRUFBY3VKLEVBQU12SixZQUNwQkMsRUFBV3NKLEVBQU10SixTQUNqQndMLEVBQXdCbEMsRUFBTStCLGtCQUM5QkEsT0FBOEMsSUFBMUJHLEdBQTBDQSxFQUV2QyxpQkFBaEJ6TCxJQUNUa0ssRUFBY0gsd0JBQTBCdGUsS0FBS0gsSUFBSTRlLEVBQWNILHdCQUF5Qi9KLEVBQWMsSUFHaEYsaUJBQWJDLElBQ1RpSyxFQUFjUixxQkFBdUJqZSxLQUFLSCxJQUFJNGUsRUFBY1IscUJBQXNCekosRUFBVyxJQU8vRndCLEVBQVN5QixvQkFBb0IsR0FFekJvSSxHQUNGN0osRUFBU2lLLGVBSU54QixHQUVUakosdUNBQXVDLEVBQ3ZDQyxjQUFlLFNBQXVCeUssR0FDbEJBLEVBQU01SSxZQUNSNEksRUFBTTNJLGFBY3RCNEksRUFBbUIsU0FBd0IxaUIsRUFBT2dMLEdBQ3BELE9BQU9oTCxHQW1CVCxTQUFTMmlCLEVBQW9CM3ZCLEdBQzNCLElBQUlpa0IsRUFBUWhiLEVBRVIybUIsRUFBZ0I1dkIsRUFBSzR2QixjQUNyQkMsRUFBd0I3dkIsRUFBSzZ2QixzQkFDN0JDLEVBQWM5dkIsRUFBSzh2QixZQUNuQkMsRUFBZ0MvdkIsRUFBSyt2Qiw4QkFDckNDLEVBQXlCaHdCLEVBQUtnd0IsdUJBQzlCQyxFQUE0Qmp3QixFQUFLaXdCLDBCQUNqQ25MLEVBQW9COWtCLEVBQUs4a0Isa0JBQ3pCQyxFQUF3Qy9rQixFQUFLK2tCLHNDQUM3Q0MsRUFBZ0JobEIsRUFBS2dsQixjQUN6QixPQUFPL2IsRUFBUWdiLEVBRWYsU0FBVWdCLEdBTVIsU0FBU2lMLEVBQUs1ckIsR0FDWixJQUFJNmdCLEVBMEtKLE9BeEtBQSxFQUFRRixFQUFleHBCLEtBQUtvQyxLQUFNeUcsSUFBVXpHLE1BQ3RDdW5CLGVBQWlCTixFQUFrQkssRUFBTTdnQixNQUFPa2QsRUFBdUJBLEVBQXVCMkQsS0FDcEdBLEVBQU1HLGVBQVksRUFDbEJILEVBQU1FLDJCQUE2QixLQUNuQ0YsRUFBTW5rQixNQUFRLENBQ1p1a0IsU0FBVS9ELEVBQXVCQSxFQUF1QjJELElBQ3hESyxhQUFhLEVBQ2IySyxnQkFBaUIsVUFDakJ0QixhQUF5RCxpQkFBcEMxSixFQUFNN2dCLE1BQU04ckIsb0JBQW1DakwsRUFBTTdnQixNQUFNOHJCLG9CQUFzQixFQUN0R3ZLLDBCQUEwQixHQUU1QlYsRUFBTVksMEJBQXVCLEVBQzdCWixFQUFNWSxxQkFBdUIsR0FBVyxTQUFVc0ssRUFBb0JDLEVBQW1CQyxFQUFtQkMsR0FDMUcsT0FBT3JMLEVBQU03Z0IsTUFBTWtpQixnQkFBZ0IsQ0FDakM2SixtQkFBb0JBLEVBQ3BCQyxrQkFBbUJBLEVBQ25CQyxrQkFBbUJBLEVBQ25CQyxpQkFBa0JBLE9BR3RCckwsRUFBTXNCLG1CQUFnQixFQUN0QnRCLEVBQU1zQixjQUFnQixHQUFXLFNBQVUwSixFQUFpQnRCLEVBQWNoSixHQUN4RSxPQUFPVixFQUFNN2dCLE1BQU1vaUIsU0FBUyxDQUMxQnlKLGdCQUFpQkEsRUFDakJ0QixhQUFjQSxFQUNkaEoseUJBQTBCQSxPQUc5QlYsRUFBTXdCLG1CQUFnQixFQUV0QnhCLEVBQU13QixjQUFnQixTQUFVM1osR0FDOUIsSUFPSW9TLEVBUEF3SCxFQUFjekIsRUFBTTdnQixNQUNwQmdmLEVBQVlzRCxFQUFZdEQsVUFDeEI0SyxFQUFXdEgsRUFBWXNILFNBQ3ZCdUMsRUFBUzdKLEVBQVk2SixPQUVyQjFKLEVBQWlCNUIsRUFBTTZCLG1CQUFtQmpDLEdBQXlDbUosRUFBVW5KLEdBQXlDMEwsRUFBUTFMLEdBQXlDekIsR0FJM0wsR0FBSXlELEVBQWU1cEIsZUFBZTZQLEdBQ2hDb1MsRUFBUTJILEVBQWUvWixPQUNsQixDQUNMLElBQUlpYSxFQUFVMkksRUFBY3pLLEVBQU03Z0IsTUFBTzBJLEVBQU9tWSxFQUFNQyxnQkFFbER0SixFQUFPZ1UsRUFBWTNLLEVBQU03Z0IsTUFBTzBJLEVBQU9tWSxFQUFNQyxnQkFFN0NzTCxFQUE2QixlQUFkcE4sR0FBeUMsZUFBWG1OLEVBQzdDdkosRUFBc0IsUUFBZDVELEVBQ1JxTixFQUFtQkQsRUFBZXpKLEVBQVUsRUFDaERGLEVBQWUvWixHQUFTb1MsRUFBUSxDQUM5QjFFLFNBQVUsV0FDVm5NLEtBQU0yWSxPQUFRNWpCLEVBQVlxdEIsRUFDMUJuaUIsTUFBTzBZLEVBQVF5SixPQUFtQnJ0QixFQUNsQzZqQixJQUFNdUosRUFBeUIsRUFBVnpKLEVBQ3JCN0QsT0FBU3NOLEVBQXNCLE9BQVA1VSxFQUN4QnFILE1BQU91TixFQUFlNVUsRUFBTyxRQUlqQyxPQUFPc0QsR0FHVCtGLEVBQU02Qix3QkFBcUIsRUFDM0I3QixFQUFNNkIsbUJBQXFCLEdBQVcsU0FBVXJaLEVBQUd5WixFQUFJQyxHQUNyRCxNQUFPLE1BR1RsQyxFQUFNeUwsb0JBQXNCLFNBQVU3WSxHQUNwQyxJQUFJd1AsRUFBdUJ4UCxFQUFNeVAsY0FDN0JFLEVBQWNILEVBQXFCRyxZQUNuQy9ELEVBQWE0RCxFQUFxQjVELFdBQ2xDaUUsRUFBY0wsRUFBcUJLLFlBRXZDekMsRUFBTXhOLFVBQVMsU0FBVWtRLEdBQ3ZCLEdBQUlBLEVBQVVnSCxlQUFpQmxMLEVBSTdCLE9BQU8sS0FHVCxJQUFJTCxFQUFZNkIsRUFBTTdnQixNQUFNZ2YsVUFDeEJ1TCxFQUFlbEwsRUFFbkIsR0FBa0IsUUFBZEwsRUFLRixPQUFRUCxLQUNOLElBQUssV0FDSDhMLEdBQWdCbEwsRUFDaEIsTUFFRixJQUFLLHNCQUNIa0wsRUFBZWpILEVBQWNGLEVBQWMvRCxFQU9qRCxPQURBa0wsRUFBZXRmLEtBQUtGLElBQUksRUFBR0UsS0FBS0gsSUFBSXlmLEVBQWNqSCxFQUFjRixJQUN6RCxDQUNMbEMsYUFBYSxFQUNiMkssZ0JBQWlCdEksRUFBVWdILGFBQWVsTCxFQUFhLFVBQVksV0FDbkVrTCxhQUFjQSxFQUNkaEosMEJBQTBCLEtBRTNCVixFQUFNNkMsNkJBR1g3QyxFQUFNMEwsa0JBQW9CLFNBQVU5WSxHQUNsQyxJQUFJK1ksRUFBd0IvWSxFQUFNeVAsY0FDOUJDLEVBQWVxSixFQUFzQnJKLGFBQ3JDRSxFQUFlbUosRUFBc0JuSixhQUNyQ2hDLEVBQVltTCxFQUFzQm5MLFVBRXRDUixFQUFNeE4sVUFBUyxTQUFVa1EsR0FDdkIsR0FBSUEsRUFBVWdILGVBQWlCbEosRUFJN0IsT0FBTyxLQUlULElBQUlrSixFQUFldGYsS0FBS0YsSUFBSSxFQUFHRSxLQUFLSCxJQUFJdVcsRUFBV2dDLEVBQWVGLElBQ2xFLE1BQU8sQ0FDTGpDLGFBQWEsRUFDYjJLLGdCQUFpQnRJLEVBQVVnSCxhQUFlQSxFQUFlLFVBQVksV0FDckVBLGFBQWNBLEVBQ2RoSiwwQkFBMEIsS0FFM0JWLEVBQU02Qyw2QkFHWDdDLEVBQU04QyxnQkFBa0IsU0FBVTdpQixHQUNoQyxJQUFJOGlCLEVBQVcvQyxFQUFNN2dCLE1BQU00akIsU0FDM0IvQyxFQUFNRyxVQUFZbGdCLEVBRU0sbUJBQWI4aUIsRUFDVEEsRUFBUzlpQixHQUNZLE1BQVo4aUIsR0FBd0MsaUJBQWJBLEdBQXlCQSxFQUFTL3FCLGVBQWUsYUFDckYrcUIsRUFBU25tQixRQUFVcUQsSUFJdkIrZixFQUFNNkMsMkJBQTZCLFdBQ1EsT0FBckM3QyxFQUFNRSw0QkFDUjlDLEVBQWM0QyxFQUFNRSw0QkFHdEJGLEVBQU1FLDJCQUE2QjNDLEVBQWV5QyxFQUFNZ0Qsa0JBdE16QixNQXlNakNoRCxFQUFNZ0Qsa0JBQW9CLFdBQ3hCaEQsRUFBTUUsMkJBQTZCLEtBRW5DRixFQUFNeE4sU0FBUyxDQUNiNk4sYUFBYSxJQUNaLFdBR0RMLEVBQU02QixvQkFBb0IsRUFBRyxVQUkxQjdCLEVBaExUL0QsRUFBZThPLEVBQU1qTCxHQW1MckJpTCxFQUFLemIseUJBQTJCLFNBQWtDMlQsRUFBV1AsR0FHM0UsT0FGQWtKLEVBQXNCM0ksRUFBV1AsR0FDakM3QyxFQUFjb0QsR0FDUCxNQUdULElBQUkzb0IsRUFBU3l3QixFQUFLaHpCLFVBdU5sQixPQXJOQXVDLEVBQU82b0IsU0FBVyxTQUFrQnVHLEdBQ2xDQSxFQUFldGYsS0FBS0YsSUFBSSxFQUFHd2YsR0FDM0JoeEIsS0FBSzhaLFVBQVMsU0FBVWtRLEdBQ3RCLE9BQUlBLEVBQVVnSCxlQUFpQkEsRUFDdEIsS0FHRixDQUNMc0IsZ0JBQWlCdEksRUFBVWdILGFBQWVBLEVBQWUsVUFBWSxXQUNyRUEsYUFBY0EsRUFDZGhKLDBCQUEwQixLQUUzQmhvQixLQUFLbXFCLDZCQUdWdm9CLEVBQU84b0IsYUFBZSxTQUFzQnZiLEVBQU8wYixRQUNuQyxJQUFWQSxJQUNGQSxFQUFRLFFBR1YsSUFBSWxLLEVBQVkzZ0IsS0FBS3lHLE1BQU1rYSxVQUN2QnFRLEVBQWVoeEIsS0FBS21ELE1BQU02dEIsYUFDOUI3aEIsRUFBUXVDLEtBQUtGLElBQUksRUFBR0UsS0FBS0gsSUFBSXBDLEVBQU93UixFQUFZLElBQ2hEM2dCLEtBQUt5cUIsU0FBU3lILEVBQThCbHlCLEtBQUt5RyxNQUFPMEksRUFBTzBiLEVBQU9tRyxFQUFjaHhCLEtBQUt1bkIsa0JBRzNGM2xCLEVBQU82cEIsa0JBQW9CLFdBQ3pCLElBQUlYLEVBQWU5cUIsS0FBS3lHLE1BQ3BCZ2YsRUFBWXFGLEVBQWFyRixVQUN6QjhNLEVBQXNCekgsRUFBYXlILG9CQUNuQ0ssRUFBUzlILEVBQWE4SCxPQUUxQixHQUFtQyxpQkFBeEJMLEdBQXNELE1BQWxCdnlCLEtBQUt5bkIsVUFBbUIsQ0FDckUsSUFBSTRDLEVBQVdycUIsS0FBS3luQixVQUVGLGVBQWRoQyxHQUF5QyxlQUFYbU4sRUFDaEN2SSxFQUFTdkUsV0FBYXlNLEVBRXRCbEksRUFBU3ZDLFVBQVl5SyxFQUl6QnZ5QixLQUFLMnJCLHVCQUdQL3BCLEVBQU9ncUIsbUJBQXFCLFdBQzFCLElBQUlGLEVBQWUxckIsS0FBS3lHLE1BQ3BCZ2YsRUFBWWlHLEVBQWFqRyxVQUN6Qm1OLEVBQVNsSCxFQUFha0gsT0FDdEIzSCxFQUFjanJCLEtBQUttRCxNQUNuQjZ0QixFQUFlL0YsRUFBWStGLGFBRy9CLEdBRitCL0YsRUFBWWpELDBCQUVPLE1BQWxCaG9CLEtBQUt5bkIsVUFBbUIsQ0FDdEQsSUFBSTRDLEVBQVdycUIsS0FBS3luQixVQUVwQixHQUFrQixlQUFkaEMsR0FBeUMsZUFBWG1OLEVBQ2hDLEdBQWtCLFFBQWRuTixFQUlGLE9BQVFQLEtBQ04sSUFBSyxXQUNIbUYsRUFBU3ZFLFlBQWNrTCxFQUN2QixNQUVGLElBQUsscUJBQ0gzRyxFQUFTdkUsV0FBYWtMLEVBQ3RCLE1BRUYsUUFDRSxJQUFJbkgsRUFBY1EsRUFBU1IsWUFDdkJFLEVBQWNNLEVBQVNOLFlBQzNCTSxFQUFTdkUsV0FBYWlFLEVBQWNGLEVBQWNtSCxPQUl0RDNHLEVBQVN2RSxXQUFha0wsT0FHeEIzRyxFQUFTdkMsVUFBWWtKLEVBSXpCaHhCLEtBQUsyckIsdUJBR1AvcEIsRUFBT2txQixxQkFBdUIsV0FDWSxPQUFwQzlyQixLQUFLd25CLDRCQUNQOUMsRUFBYzFrQixLQUFLd25CLDZCQUl2QjVsQixFQUFPOFYsT0FBUyxXQUNkLElBQUlxVSxFQUFlL3JCLEtBQUt5RyxNQUNwQnBFLEVBQVcwcEIsRUFBYTFwQixTQUN4QmlNLEVBQVl5ZCxFQUFhemQsVUFDekJtWCxFQUFZc0csRUFBYXRHLFVBQ3pCRixFQUFTd0csRUFBYXhHLE9BQ3RCeUcsRUFBV0QsRUFBYUMsU0FDeEJDLEVBQW1CRixFQUFhRSxpQkFDaENDLEVBQWVILEVBQWFHLGFBQzVCdkwsRUFBWW9MLEVBQWFwTCxVQUN6QndMLEVBQVdKLEVBQWFJLFNBQ3hCQyxFQUF1QkwsRUFBYU0sUUFDcENBLE9BQW1DLElBQXpCRCxFQUFrQ3lGLEVBQW1CekYsRUFDL0R3RyxFQUFTN0csRUFBYTZHLE9BQ3RCdEcsRUFBbUJQLEVBQWFPLGlCQUNoQ0MsRUFBZVIsRUFBYVEsYUFDNUJoTCxFQUFRd0ssRUFBYXhLLE1BQ3JCaUwsRUFBaUJULEVBQWFTLGVBQzlCbEgsRUFBUXlHLEVBQWF6RyxNQUNyQnFDLEVBQWMzbkIsS0FBS21ELE1BQU13a0IsWUFFekJrTCxFQUE2QixlQUFkcE4sR0FBeUMsZUFBWG1OLEVBQzdDL0osRUFBV2dLLEVBQWU3eUIsS0FBSyt5QixvQkFBc0IveUIsS0FBS2d6QixrQkFFMURHLEVBQXdCbnpCLEtBQUtvekIsb0JBQzdCckUsRUFBYW9FLEVBQXNCLEdBQ25DbkUsRUFBWW1FLEVBQXNCLEdBRWxDbEcsRUFBUSxHQUVaLEdBQUl0TSxFQUFZLEVBQ2QsSUFBSyxJQUFJMFMsRUFBU3RFLEVBQVlzRSxHQUFVckUsRUFBV3FFLElBQ2pEcEcsRUFBTTlyQixLQUFLLHdCQUFja0IsRUFBVSxDQUNqQzhYLEtBQU1nUyxFQUNObnRCLElBQUtxdEIsRUFBUWdILEVBQVFsSCxHQUNyQmhkLE1BQU9ra0IsRUFDUDFMLFlBQWE2RSxFQUFpQjdFLE9BQWNsaUIsRUFDNUM4YixNQUFPdmhCLEtBQUs4b0IsY0FBY3VLLE1BT2hDLElBQUlwQyxFQUFxQmUsRUFBc0JoeUIsS0FBS3lHLE1BQU96RyxLQUFLdW5CLGdCQUNoRSxPQUFPLHdCQUFjK0UsR0FBb0JDLEdBQWdCLE1BQU8sQ0FDOURqZSxVQUFXQSxFQUNYdWEsU0FBVUEsRUFDVnRoQixJQUFLdkgsS0FBS29xQixnQkFDVjdJLE1BQU8sWUFBUyxDQUNkMUUsU0FBVSxXQUNWMEksT0FBUUEsRUFDUkQsTUFBT0EsRUFDUEUsU0FBVSxPQUNWNkgsd0JBQXlCLFFBQ3pCQyxXQUFZLFlBQ1o3SCxVQUFXQSxHQUNWbEUsSUFDRix3QkFBYzBLLEdBQW9CQyxHQUFnQixNQUFPLENBQzFEN3BCLFNBQVU0cUIsRUFDVjFsQixJQUFLeWtCLEVBQ0x6SyxNQUFPLENBQ0xnRSxPQUFRc04sRUFBZSxPQUFTNUIsRUFDaEMxRCxjQUFlNUYsRUFBYyxZQUFTbGlCLEVBQ3RDNmYsTUFBT3VOLEVBQWU1QixFQUFxQixZQUtqRHJ2QixFQUFPK3BCLG9CQUFzQixXQUMzQixHQUEwQyxtQkFBL0IzckIsS0FBS3lHLE1BQU1raUIsaUJBQ0ozb0IsS0FBS3lHLE1BQU1rYSxVQUVYLEVBQUcsQ0FDakIsSUFBSTJTLEVBQXlCdHpCLEtBQUtvekIsb0JBQzlCRyxFQUFzQkQsRUFBdUIsR0FDN0NFLEVBQXFCRixFQUF1QixHQUM1Q0csRUFBcUJILEVBQXVCLEdBQzVDSSxFQUFvQkosRUFBdUIsR0FFL0N0ekIsS0FBS2tvQixxQkFBcUJxTCxFQUFxQkMsRUFBb0JDLEVBQW9CQyxHQUkzRixHQUFtQyxtQkFBeEIxekIsS0FBS3lHLE1BQU1vaUIsU0FBeUIsQ0FDN0MsSUFBSWdELEVBQWU3ckIsS0FBS21ELE1BQ3BCd3dCLEVBQW1COUgsRUFBYXlHLGdCQUNoQ3NCLEVBQWdCL0gsRUFBYW1GLGFBQzdCekMsRUFBNEIxQyxFQUFhN0QseUJBRTdDaG9CLEtBQUs0b0IsY0FBYytLLEVBQWtCQyxFQUFlckYsS0FReEQzc0IsRUFBT3d4QixrQkFBb0IsV0FDekIsSUFBSTVGLEVBQWV4dEIsS0FBS3lHLE1BQ3BCa2EsRUFBWTZNLEVBQWE3TSxVQUN6QmlPLEVBQWdCcEIsRUFBYW9CLGNBQzdCVCxFQUFlbnVCLEtBQUttRCxNQUNwQndrQixFQUFjd0csRUFBYXhHLFlBQzNCMkssRUFBa0JuRSxFQUFhbUUsZ0JBQy9CdEIsRUFBZTdDLEVBQWE2QyxhQUVoQyxHQUFrQixJQUFkclEsRUFDRixNQUFPLENBQUMsRUFBRyxFQUFHLEVBQUcsR0FHbkIsSUFBSW9PLEVBQWFvRCxFQUF1Qm55QixLQUFLeUcsTUFBT3VxQixFQUFjaHhCLEtBQUt1bkIsZ0JBQ25FeUgsRUFBWW9ELEVBQTBCcHlCLEtBQUt5RyxNQUFPc29CLEVBQVlpQyxFQUFjaHhCLEtBQUt1bkIsZ0JBR2pGMEgsRUFBb0J0SCxHQUFtQyxhQUFwQjJLLEVBQThELEVBQTdCNWdCLEtBQUtGLElBQUksRUFBR29kLEdBQ2hGTSxFQUFtQnZILEdBQW1DLFlBQXBCMkssRUFBNkQsRUFBN0I1Z0IsS0FBS0YsSUFBSSxFQUFHb2QsR0FDbEYsTUFBTyxDQUFDbGQsS0FBS0YsSUFBSSxFQUFHdWQsRUFBYUUsR0FBbUJ2ZCxLQUFLRixJQUFJLEVBQUdFLEtBQUtILElBQUlvUCxFQUFZLEVBQUdxTyxFQUFZRSxJQUFtQkgsRUFBWUMsSUFHOUhxRCxFQWpaVCxDQWtaRSxpQkFBZ0JqTSxFQUFPM1AsYUFBZSxDQUN0Q2dQLFVBQVcsTUFDWDBHLGNBQVUxbUIsRUFDVm10QixPQUFRLFdBQ1JoRSxjQUFlLEVBQ2ZwQyxnQkFBZ0IsR0FDZnBoQixFQU9MLElBQUk4bkIsRUFBd0IsU0FBNkJodUIsRUFBTzRHLEdBQy9DNUcsRUFBTTdDLFNBQ0w2QyxFQUFNdWdCLFVBQ1R2Z0IsRUFBTXFnQixPQUNOcmdCLEVBQU0wdEIsT0FDQTF0QixFQUFNZ25CLGFBQ05obkIsRUFBTXFuQixhQUNicm5CLEVBQU1vZ0IsTUFDSHhaLEVBQU00YixVQXdEbkJtTSxFQUFvQixTQUF5QnB0QixFQUFPMEksRUFBT2doQixHQUM3RCxJQUNJRSxFQURPNXBCLEVBQ1M0cEIsU0FDaEJELEVBQWtCRCxFQUFjQyxnQkFDaENFLEVBQW9CSCxFQUFjRyxrQkFFdEMsR0FBSW5oQixFQUFRbWhCLEVBQW1CLENBQzdCLElBQUk1TixFQUFTLEVBRWIsR0FBSTROLEdBQXFCLEVBQUcsQ0FDMUIsSUFBSVQsRUFBZU8sRUFBZ0JFLEdBQ25DNU4sRUFBU21OLEVBQWFuTixPQUFTbU4sRUFBYTVSLEtBRzlDLElBQUssSUFBSXhnQixFQUFJNnlCLEVBQW9CLEVBQUc3eUIsR0FBSzBSLEVBQU8xUixJQUFLLENBQ25ELElBQUl3Z0IsRUFBT29TLEVBQVM1eUIsR0FDcEIyeUIsRUFBZ0IzeUIsR0FBSyxDQUNuQmlsQixPQUFRQSxFQUNSekUsS0FBTUEsR0FFUnlFLEdBQVV6RSxFQUdaa1MsRUFBY0csa0JBQW9CbmhCLEVBR3BDLE9BQU9paEIsRUFBZ0JqaEIsSUFtQnJCMmtCLEVBQWdDLFNBQXFDcnRCLEVBQU8wcEIsRUFBZU8sRUFBTUMsRUFBS2pPLEdBQ3hHLEtBQU9pTyxHQUFPRCxHQUFNLENBQ2xCLElBQUlFLEVBQVNELEVBQU1qZixLQUFLbWYsT0FBT0gsRUFBT0MsR0FBTyxHQUN6Q0csRUFBZ0IrQyxFQUFrQnB0QixFQUFPbXFCLEVBQVFULEdBQWV6TixPQUVwRSxHQUFJb08sSUFBa0JwTyxFQUNwQixPQUFPa08sRUFDRUUsRUFBZ0JwTyxFQUN6QmlPLEVBQU1DLEVBQVMsRUFDTkUsRUFBZ0JwTyxJQUN6QmdPLEVBQU9FLEVBQVMsR0FJcEIsT0FBSUQsRUFBTSxFQUNEQSxFQUFNLEVBRU4sR0FJUG9ELEVBQXFDLFNBQTBDdHRCLEVBQU8wcEIsRUFBZWhoQixFQUFPdVQsR0FJOUcsSUFIQSxJQUFJL0IsRUFBWWxhLEVBQU1rYSxVQUNsQm9RLEVBQVcsRUFFUjVoQixFQUFRd1IsR0FBYWtULEVBQWtCcHRCLEVBQU8wSSxFQUFPZ2hCLEdBQWV6TixPQUFTQSxHQUNsRnZULEdBQVM0aEIsRUFDVEEsR0FBWSxFQUdkLE9BQU8rQyxFQUE4QnJ0QixFQUFPMHBCLEVBQWV6ZSxLQUFLSCxJQUFJcEMsRUFBT3dSLEVBQVksR0FBSWpQLEtBQUttZixNQUFNMWhCLEVBQVEsR0FBSXVULElBR2hILEVBQXdCLFNBQStCeGQsRUFBTzRHLEdBQ2hFLElBQUk2VSxFQUFZemIsRUFBTXliLFVBQ2xCeVAsRUFBa0J0a0IsRUFBTXNrQixnQkFDeEI0RCxFQUFvQmxvQixFQUFNa29CLGtCQUMxQjFELEVBQW9CeGtCLEVBQU13a0Isa0JBQzFCMkQsRUFBMkIsRUFPL0IsR0FKSTNELEdBQXFCM1AsSUFDdkIyUCxFQUFvQjNQLEVBQVksR0FHOUIyUCxHQUFxQixFQUFHLENBQzFCLElBQUlULEVBQWVPLEVBQWdCRSxHQUNuQzJELEVBQTJCcEUsRUFBYW5OLE9BQVNtTixFQUFhNVIsS0FLaEUsT0FBT2dXLEdBRmtCdFQsRUFBWTJQLEVBQW9CLEdBQ0gwRCxHQUlwREUsRUFFSnBDLEVBQW9CLENBQ2xCQyxjQUFlLFNBQXVCdHJCLEVBQU8wSSxFQUFPZ2hCLEdBQ2xELE9BQU8wRCxFQUFrQnB0QixFQUFPMEksRUFBT2doQixHQUFlek4sUUFFeER1UCxZQUFhLFNBQXFCeHJCLEVBQU8wSSxFQUFPZ2hCLEdBQzlDLE9BQU9BLEVBQWNDLGdCQUFnQmpoQixHQUFPOE8sTUFFOUMrVCxzQkFBdUIsRUFDdkJFLDhCQUErQixTQUF1Q3pyQixFQUFPMEksRUFBTzBiLEVBQU9tRyxFQUFjYixHQUN2RyxJQUFJMUssRUFBWWhmLEVBQU1nZixVQUNsQkYsRUFBUzllLEVBQU04ZSxPQUNmcU4sRUFBU25zQixFQUFNbXNCLE9BQ2Z0TixFQUFRN2UsRUFBTTZlLE1BR2RySCxFQUQ2QixlQUFkd0gsR0FBeUMsZUFBWG1OLEVBQ3ZCdE4sRUFBUUMsRUFDOUJzSyxFQUFlZ0UsRUFBa0JwdEIsRUFBTzBJLEVBQU9naEIsR0FHL0NjLEVBQXFCLEVBQXNCeHFCLEVBQU8wcEIsR0FDbERlLEVBQVl4ZixLQUFLRixJQUFJLEVBQUdFLEtBQUtILElBQUkwZixFQUFxQmhULEVBQU00UixFQUFhbk4sU0FDekV5TyxFQUFZemYsS0FBS0YsSUFBSSxFQUFHcWUsRUFBYW5OLE9BQVN6RSxFQUFPNFIsRUFBYTVSLE1BVXRFLE9BUmMsVUFBVjRNLElBRUFBLEVBREVtRyxHQUFnQkcsRUFBWWxULEdBQVErUyxHQUFnQkUsRUFBWWpULEVBQzFELE9BRUEsVUFJSjRNLEdBQ04sSUFBSyxRQUNILE9BQU9xRyxFQUVULElBQUssTUFDSCxPQUFPQyxFQUVULElBQUssU0FDSCxPQUFPemYsS0FBSzBmLE1BQU1ELEdBQWFELEVBQVlDLEdBQWEsR0FFMUQsSUFBSyxPQUNMLFFBQ0UsT0FBSUgsR0FBZ0JHLEdBQWFILEdBQWdCRSxFQUN4Q0YsRUFDRUEsRUFBZUcsRUFDakJBLEVBRUFELElBS2ZpQix1QkFBd0IsU0FBZ0MxckIsRUFBT2ljLEVBQVF5TixHQUNyRSxPQS9Ib0IsU0FBeUIxcEIsRUFBTzBwQixFQUFlek4sR0FDckUsSUFBSTBOLEVBQWtCRCxFQUFjQyxnQkFDaENFLEVBQW9CSCxFQUFjRyxrQkFHdEMsT0FGNkJBLEVBQW9CLEVBQUlGLEVBQWdCRSxHQUFtQjVOLE9BQVMsSUFFbkVBLEVBRXJCb1IsRUFBOEJydEIsRUFBTzBwQixFQUFlRyxFQUFtQixFQUFHNU4sR0FLMUVxUixFQUFtQ3R0QixFQUFPMHBCLEVBQWV6ZSxLQUFLRixJQUFJLEVBQUc4ZSxHQUFvQjVOLEdBbUh6RnlSLENBQWtCMXRCLEVBQU8wcEIsRUFBZXpOLElBRWpEMFAsMEJBQTJCLFNBQW1DM3JCLEVBQU9zb0IsRUFBWWlDLEVBQWNiLEdBYzdGLElBYkEsSUFBSTFLLEVBQVloZixFQUFNZ2YsVUFDbEJGLEVBQVM5ZSxFQUFNOGUsT0FDZjVFLEVBQVlsYSxFQUFNa2EsVUFDbEJpUyxFQUFTbnNCLEVBQU1tc0IsT0FDZnROLEVBQVE3ZSxFQUFNNmUsTUFHZHJILEVBRDZCLGVBQWR3SCxHQUF5QyxlQUFYbU4sRUFDdkJ0TixFQUFRQyxFQUM5QnNLLEVBQWVnRSxFQUFrQnB0QixFQUFPc29CLEVBQVlvQixHQUNwRGUsRUFBWUYsRUFBZS9TLEVBQzNCeUUsRUFBU21OLEVBQWFuTixPQUFTbU4sRUFBYTVSLEtBQzVDK1EsRUFBWUQsRUFFVEMsRUFBWXJPLEVBQVksR0FBSytCLEVBQVN3TyxHQUMzQ2xDLElBQ0F0TSxHQUFVbVIsRUFBa0JwdEIsRUFBT3VvQixFQUFXbUIsR0FBZWxTLEtBRy9ELE9BQU8rUSxHQUVUL0gsa0JBQW1CLFNBQTJCeGdCLEVBQU9paEIsR0FDbkQsSUFFSXlJLEVBQWdCLENBQ2xCQyxnQkFBaUIsR0FDakI0RCxrQkFKVXZ0QixFQUNrQnV0QixtQkF2TEUsR0EyTDlCMUQsbUJBQW9CLEdBb0J0QixPQWpCQTVJLEVBQVMwTSxnQkFBa0IsU0FBVWpsQixFQUFPb2lCLFFBQ2hCLElBQXRCQSxJQUNGQSxHQUFvQixHQUd0QnBCLEVBQWNHLGtCQUFvQjVlLEtBQUtILElBQUk0ZSxFQUFjRyxrQkFBbUJuaEIsRUFBUSxHQUtwRnVZLEVBQVN5QixvQkFBb0IsR0FFekJvSSxHQUNGN0osRUFBU2lLLGVBSU54QixHQUVUakosdUNBQXVDLEVBQ3ZDQyxjQUFlLFNBQXVCb0ksR0FDckJBLEVBQU1jLFlBVXJCZ0UsRUFFSmxPLEVBQW9CLENBQ2xCRSxnQkFBaUIsU0FBeUJsa0IsRUFBTWdOLEdBRTlDLE9BQU9BLEVBRFdoTixFQUFLNm1CLGFBR3pCeEMsZUFBZ0IsU0FBd0J0aEIsRUFBT2lLLEdBRTdDLE9BRGtCakssRUFBTThqQixhQUcxQmxDLGFBQWMsU0FBc0JoYixFQUFPcUQsR0FFekMsT0FBT0EsRUFEU3JELEVBQU1tZCxXQUd4QnBDLGFBQWMsU0FBc0I4RCxFQUFPeGIsR0FFekMsT0FEZ0J3YixFQUFNMUIsV0FHeEJ4Qyx3QkFBeUIsU0FBaUM4SSxHQUN4RCxJQUFJdkUsRUFBV3VFLEVBQU12RSxTQUVyQixPQURnQnVFLEVBQU10RyxVQUNIK0IsR0FFckJ0RSx1QkFBd0IsU0FBZ0M4SSxHQUN0RCxJQUFJekUsRUFBY3lFLEVBQU16RSxZQUV4QixPQURrQnlFLEVBQU14RyxZQUNIK0IsR0FFdkJwRSwrQkFBZ0MsU0FBd0NpTCxFQUFPM0wsRUFBYTRFLEVBQU8vRSxFQUFZcUssRUFBZWpGLEdBQzVILElBQUlILEVBQWM2RyxFQUFNN0csWUFDcEIvQixFQUFjNEksRUFBTTVJLFlBQ3BCMUQsRUFBUXNNLEVBQU10TSxNQUNkZ1AsRUFBbUI1aUIsS0FBS0YsSUFBSSxFQUFHdVosRUFBYy9CLEVBQWMxRCxHQUMzRDRMLEVBQVl4ZixLQUFLSCxJQUFJK2lCLEVBQWtCck8sRUFBYytDLEdBQ3JEbUksRUFBWXpmLEtBQUtGLElBQUksRUFBR3lVLEVBQWMrQyxFQUFjMUQsRUFBUTRGLEVBQWdCbEMsR0FVaEYsT0FSYyxVQUFWNkIsSUFFQUEsRUFERS9FLEdBQWNxTCxFQUFZN0wsR0FBU1EsR0FBY29MLEVBQVk1TCxFQUN2RCxPQUVBLFVBSUp1RixHQUNOLElBQUssUUFDSCxPQUFPcUcsRUFFVCxJQUFLLE1BQ0gsT0FBT0MsRUFFVCxJQUFLLFNBR0gsSUFBSW9ELEVBQWU3aUIsS0FBSzBmLE1BQU1ELEdBQWFELEVBQVlDLEdBQWEsR0FFcEUsT0FBSW9ELEVBQWU3aUIsS0FBSzhpQixLQUFLbFAsRUFBUSxHQUM1QixFQUNFaVAsRUFBZUQsRUFBbUI1aUIsS0FBS21mLE1BQU12TCxFQUFRLEdBQ3ZEZ1AsRUFFQUMsRUFHWCxJQUFLLE9BQ0wsUUFDRSxPQUFJek8sR0FBY3FMLEdBQWFyTCxHQUFjb0wsRUFDcENwTCxFQUNFcUwsRUFBWUQsR0FJWnBMLEVBQWFxTCxFQURmQSxFQUlBRCxJQUtmdEssNEJBQTZCLFNBQXFDNk4sRUFBT3ZPLEVBQVUyRSxFQUFPL0MsRUFBV3FJLEVBQWVqRixHQUNsSCxJQUFJakMsRUFBWXdMLEVBQU14TCxVQUNsQjFELEVBQVNrUCxFQUFNbFAsT0FDZnlGLEVBQVd5SixFQUFNekosU0FDakIwSixFQUFnQmhqQixLQUFLRixJQUFJLEVBQUd3WixFQUFXL0IsRUFBWTFELEdBQ25EMkwsRUFBWXhmLEtBQUtILElBQUltakIsRUFBZXhPLEVBQVcrQyxHQUMvQ2tJLEVBQVl6ZixLQUFLRixJQUFJLEVBQUcwVSxFQUFXK0MsRUFBWTFELEVBQVMyRixFQUFnQmpDLEdBVTVFLE9BUmMsVUFBVjRCLElBRUFBLEVBREUvQyxHQUFhcUosRUFBWTVMLEdBQVV1QyxHQUFhb0osRUFBWTNMLEVBQ3RELE9BRUEsVUFJSnNGLEdBQ04sSUFBSyxRQUNILE9BQU9xRyxFQUVULElBQUssTUFDSCxPQUFPQyxFQUVULElBQUssU0FHSCxJQUFJb0QsRUFBZTdpQixLQUFLMGYsTUFBTUQsR0FBYUQsRUFBWUMsR0FBYSxHQUVwRSxPQUFJb0QsRUFBZTdpQixLQUFLOGlCLEtBQUtqUCxFQUFTLEdBQzdCLEVBQ0VnUCxFQUFlRyxFQUFnQmhqQixLQUFLbWYsTUFBTXRMLEVBQVMsR0FDckRtUCxFQUVBSCxFQUdYLElBQUssT0FDTCxRQUNFLE9BQUl6TSxHQUFhcUosR0FBYXJKLEdBQWFvSixFQUNsQ3BKLEVBQ0VxSixFQUFZRCxHQUlacEosRUFBWXFKLEVBRGRBLEVBSUFELElBS2Y1Syw2QkFBOEIsU0FBc0NxTyxFQUFPN08sR0FDekUsSUFBSWtELEVBQWMyTCxFQUFNM0wsWUFDcEIrQixFQUFjNEosRUFBTTVKLFlBQ3hCLE9BQU9yWixLQUFLRixJQUFJLEVBQUdFLEtBQUtILElBQUl3WixFQUFjLEVBQUdyWixLQUFLbWYsTUFBTS9LLEVBQWFrRCxNQUV2RXpDLGdDQUFpQyxTQUF5Q3FPLEVBQVE3RixFQUFZakosR0FDNUYsSUFBSWtELEVBQWM0TCxFQUFPNUwsWUFDckIrQixFQUFjNkosRUFBTzdKLFlBQ3JCekYsRUFBUXNQLEVBQU90UCxNQUNmNVUsRUFBT3FlLEVBQWEvRixFQUNwQjZMLEVBQW9CbmpCLEtBQUs4aUIsTUFBTWxQLEVBQVFRLEVBQWFwVixHQUFRc1ksR0FDaEUsT0FBT3RYLEtBQUtGLElBQUksRUFBR0UsS0FBS0gsSUFBSXdaLEVBQWMsRUFBR2dFLEVBQWE4RixFQUFvQixLQUdoRjlOLDBCQUEyQixTQUFtQytOLEVBQVFoTixHQUNwRSxJQUFJbUIsRUFBWTZMLEVBQU83TCxVQUNuQitCLEVBQVc4SixFQUFPOUosU0FDdEIsT0FBT3RaLEtBQUtGLElBQUksRUFBR0UsS0FBS0gsSUFBSXlaLEVBQVcsRUFBR3RaLEtBQUttZixNQUFNL0ksRUFBWW1CLE1BRW5FakMsNkJBQThCLFNBQXNDK04sRUFBUWhHLEVBQVlqSCxHQUN0RixJQUFJbUIsRUFBWThMLEVBQU85TCxVQUNuQitCLEVBQVcrSixFQUFPL0osU0FDbEJ6RixFQUFTd1AsRUFBT3hQLE9BQ2hCK0QsRUFBTXlGLEVBQWE5RixFQUNuQitMLEVBQWlCdGpCLEtBQUs4aUIsTUFBTWpQLEVBQVN1QyxFQUFZd0IsR0FBT0wsR0FDNUQsT0FBT3ZYLEtBQUtGLElBQUksRUFBR0UsS0FBS0gsSUFBSXlaLEVBQVcsRUFBRytELEVBQWFpRyxFQUFpQixLQUcxRS9OLGtCQUFtQixTQUEyQnhnQixLQUU5Q3lnQix1Q0FBdUMsRUFDdkNDLGNBQWUsU0FBdUI4TixHQUNsQkEsRUFBT2pNLFlBQ1RpTSxFQUFPaE0sYUFjdkJpTSxFQUVKcEQsRUFBb0IsQ0FDbEJDLGNBQWUsU0FBdUI1dkIsRUFBTWdOLEdBRTFDLE9BQU9BLEVBRFFoTixFQUFLa3VCLFVBR3RCNEIsWUFBYSxTQUFxQi9zQixFQUFPaUssR0FFdkMsT0FEZWpLLEVBQU1tckIsVUFHdkIyQixzQkFBdUIsU0FBK0JsbUIsR0FDcEQsSUFBSTZVLEVBQVk3VSxFQUFNNlUsVUFFdEIsT0FEZTdVLEVBQU11a0IsU0FDSDFQLEdBRXBCdVIsOEJBQStCLFNBQXVDdkgsRUFBT3hiLEVBQU8wYixFQUFPbUcsR0FDekYsSUFBSXZMLEVBQVlrRixFQUFNbEYsVUFDbEJGLEVBQVNvRixFQUFNcEYsT0FDZjVFLEVBQVlnSyxFQUFNaEssVUFDbEIwUCxFQUFXMUYsRUFBTTBGLFNBQ2pCdUMsRUFBU2pJLEVBQU1pSSxPQUNmdE4sRUFBUXFGLEVBQU1yRixNQUdkckgsRUFENkIsZUFBZHdILEdBQXlDLGVBQVhtTixFQUN2QnROLEVBQVFDLEVBQzlCNFAsRUFBaUJ6akIsS0FBS0YsSUFBSSxFQUFHbVAsRUFBWTBQLEVBQVdwUyxHQUNwRGlULEVBQVl4ZixLQUFLSCxJQUFJNGpCLEVBQWdCaG1CLEVBQVFraEIsR0FDN0NjLEVBQVl6ZixLQUFLRixJQUFJLEVBQUdyQyxFQUFRa2hCLEVBQVdwUyxFQUFPb1MsR0FVdEQsT0FSYyxVQUFWeEYsSUFFQUEsRUFERW1HLEdBQWdCRyxFQUFZbFQsR0FBUStTLEdBQWdCRSxFQUFZalQsRUFDMUQsT0FFQSxVQUlKNE0sR0FDTixJQUFLLFFBQ0gsT0FBT3FHLEVBRVQsSUFBSyxNQUNILE9BQU9DLEVBRVQsSUFBSyxTQUlELElBQUlvRCxFQUFlN2lCLEtBQUswZixNQUFNRCxHQUFhRCxFQUFZQyxHQUFhLEdBRXBFLE9BQUlvRCxFQUFlN2lCLEtBQUs4aUIsS0FBS3ZXLEVBQU8sR0FDM0IsRUFDRXNXLEVBQWVZLEVBQWlCempCLEtBQUttZixNQUFNNVMsRUFBTyxHQUNwRGtYLEVBRUFaLEVBSWIsSUFBSyxPQUNMLFFBQ0UsT0FBSXZELEdBQWdCRyxHQUFhSCxHQUFnQkUsRUFDeENGLEVBQ0VBLEVBQWVHLEVBQ2pCQSxFQUVBRCxJQUtmaUIsdUJBQXdCLFNBQWdDNUMsRUFBTzdNLEdBQzdELElBQUkvQixFQUFZNE8sRUFBTTVPLFVBQ2xCMFAsRUFBV2QsRUFBTWMsU0FDckIsT0FBTzNlLEtBQUtGLElBQUksRUFBR0UsS0FBS0gsSUFBSW9QLEVBQVksRUFBR2pQLEtBQUttZixNQUFNbk8sRUFBUzJOLE1BRWpFK0IsMEJBQTJCLFNBQW1DNUMsRUFBT1QsRUFBWWlDLEdBQy9FLElBQUl2TCxFQUFZK0osRUFBTS9KLFVBQ2xCRixFQUFTaUssRUFBTWpLLE9BQ2Y1RSxFQUFZNk8sRUFBTTdPLFVBQ2xCMFAsRUFBV2IsRUFBTWEsU0FDakJ1QyxFQUFTcEQsRUFBTW9ELE9BQ2Z0TixFQUFRa0ssRUFBTWxLLE1BR2Q1QyxFQUFTcU0sRUFBYXNCLEVBQ3RCcFMsRUFGNkIsZUFBZHdILEdBQXlDLGVBQVhtTixFQUV2QnROLEVBQVFDLEVBQzlCNlAsRUFBa0IxakIsS0FBSzhpQixNQUFNdlcsRUFBTytTLEVBQWV0TyxHQUFVMk4sR0FDakUsT0FBTzNlLEtBQUtGLElBQUksRUFBR0UsS0FBS0gsSUFBSW9QLEVBQVksRUFBR29PLEVBQWFxRyxFQUFrQixLQUc1RW5PLGtCQUFtQixTQUEyQnhnQixLQUU5Q3lnQix1Q0FBdUMsRUFDdkNDLGNBQWUsU0FBdUJ5SyxHQUNyQkEsRUFBTXZCLFlBWXpCLFNBQVNnRixFQUFlL3pCLEVBQU1MLEdBQzVCLElBQUssSUFBSXEwQixLQUFhaDBCLEVBQ3BCLEtBQU1nMEIsS0FBYXIwQixHQUNqQixPQUFPLEVBSVgsSUFBSyxJQUFJczBCLEtBQWN0MEIsRUFDckIsR0FBSUssRUFBS2kwQixLQUFnQnQwQixFQUFLczBCLEdBQzVCLE9BQU8sRUFJWCxPQUFPLEVBTVQsU0FBU0MsRUFBU0MsRUFBV2xMLEdBQzNCLElBQUltTCxFQUFZRCxFQUFVbFUsTUFDdEJvVSxFQUFXLFlBQThCRixFQUFXLENBQUMsVUFFckRHLEVBQVlyTCxFQUFVaEosTUFDdEJzVSxFQUFXLFlBQThCdEwsRUFBVyxDQUFDLFVBRXpELE9BQVE4SyxFQUFlSyxFQUFXRSxLQUFlUCxFQUFlTSxFQUFVRSxHQU01RSxTQUFTQyxFQUFzQnZMLEVBQVd0Z0IsR0FDeEMsT0FBUXVyQixFQUFTeDFCLEtBQUt5RyxNQUFPOGpCLElBQWM4SyxFQUFlcjFCLEtBQUttRCxNQUFPOEcsSyw2QkMxaEV6RCxTQUFTOHJCLEVBQXlCOWYsR0FDaEQsSUFBSW5MLEVBQ0F0TSxFQUFTeVgsRUFBS3pYLE9BYWxCLE1BWHNCLG1CQUFYQSxFQUNOQSxFQUFPMlUsV0FDVnJJLEVBQVN0TSxFQUFPMlUsWUFFaEJySSxFQUFTdE0sRUFBTyxjQUNoQkEsRUFBTzJVLFdBQWFySSxHQUdyQkEsRUFBUyxlQUdIQSxFQWZSLG1DLGlnQkNBQSxjQUNBLFVBQ0EsUUFDQSxRQUNBLE9BQ0EsUUFHQSxRQUVNdEosRUFBMEMsRUFBQThRLFlBQVksRUFBQUMsU0FDNUQvUSxFQUFNSixXQUFVLFdBQ2QsSUFBTSxFQUF3QkksRUFBTWlCLFdBQWhCVSxHQUFMLFVBQVUsSUFBbkIsY0FDTixFQUFBeVcsa0JBQWtCelcsTUFHcEIsVUFBU3VVLE9BQ1Asd0JBQUMsRUFBQTlVLFNBQVEsQ0FBQ3BCLE1BQU9BLEdBQ2Ysd0JBQUMsRUFBQXcwQixPQUFNLE9BRVRqekIsU0FBU2t6QixlQUFlLFk7Ozs7Ozs7O0dDWmIsSUFBSXY0QixFQUFFLEVBQVEsSUFBaUJ3QixFQUFFLE1BQU1LLEVBQUUsTUFBTWhDLEVBQVEyNEIsU0FBUyxNQUFNMzRCLEVBQVE0NEIsV0FBVyxNQUFNNTRCLEVBQVE2NEIsU0FBUyxNQUFNLElBQUlDLEVBQUUsTUFBTTkzQixFQUFFLE1BQU1JLEVBQUUsTUFBTXBCLEVBQVErNEIsU0FBUyxNQUFNLElBQUlDLEVBQUUsTUFBTUMsRUFBRSxNQUNwTSxHQUFHLG1CQUFvQmg0QixRQUFRQSxPQUFPaTRCLElBQUksQ0FBQyxJQUFJQyxFQUFFbDRCLE9BQU9pNEIsSUFBSXYzQixFQUFFdzNCLEVBQUUsaUJBQWlCbjNCLEVBQUVtM0IsRUFBRSxnQkFBZ0JuNUIsRUFBUTI0QixTQUFTUSxFQUFFLGtCQUFrQm41QixFQUFRNDRCLFdBQVdPLEVBQUUscUJBQXFCbjVCLEVBQVE2NEIsU0FBU00sRUFBRSxrQkFBa0JMLEVBQUVLLEVBQUUsa0JBQWtCbjRCLEVBQUVtNEIsRUFBRSxpQkFBaUIvM0IsRUFBRSszQixFQUFFLHFCQUFxQm41QixFQUFRKzRCLFNBQVNJLEVBQUUsa0JBQWtCSCxFQUFFRyxFQUFFLGNBQWNGLEVBQUVFLEVBQUUsY0FBYyxJQUFJOXVCLEVBQUUsbUJBQW9CcEosUUFBUUEsT0FBT200QixTQUN0UixTQUFTemEsRUFBRWpSLEdBQUcsSUFBSSxJQUFJQyxFQUFFLHlEQUF5REQsRUFBRW5OLEVBQUUsRUFBRUEsRUFBRThCLFVBQVVDLE9BQU8vQixJQUFJb04sR0FBRyxXQUFXMHJCLG1CQUFtQmgzQixVQUFVOUIsSUFBSSxNQUFNLHlCQUF5Qm1OLEVBQUUsV0FBV0MsRUFBRSxpSEFDcFUsSUFBSTJyQixFQUFFLENBQUNDLFVBQVUsV0FBVyxPQUFNLEdBQUlDLG1CQUFtQixhQUFhQyxvQkFBb0IsYUFBYUMsZ0JBQWdCLGNBQWNDLEVBQUUsR0FBRyxTQUFTQyxFQUFFbHNCLEVBQUVDLEVBQUVwTixHQUFHa0MsS0FBS3lHLE1BQU13RSxFQUFFakwsS0FBS29DLFFBQVE4SSxFQUFFbEwsS0FBS28zQixLQUFLRixFQUFFbDNCLEtBQUtxM0IsUUFBUXY1QixHQUFHKzRCLEVBQ3BOLFNBQVNTLEtBQTZCLFNBQVNDLEVBQUV0c0IsRUFBRUMsRUFBRXBOLEdBQUdrQyxLQUFLeUcsTUFBTXdFLEVBQUVqTCxLQUFLb0MsUUFBUThJLEVBQUVsTCxLQUFLbzNCLEtBQUtGLEVBQUVsM0IsS0FBS3EzQixRQUFRdjVCLEdBQUcrNEIsRUFEc0dNLEVBQUU5M0IsVUFBVW00QixpQkFBaUIsR0FBR0wsRUFBRTkzQixVQUFVeWEsU0FBUyxTQUFTN08sRUFBRUMsR0FBRyxHQUFHLGlCQUFrQkQsR0FBRyxtQkFBb0JBLEdBQUcsTUFBTUEsRUFBRSxNQUFNRixNQUFNbVIsRUFBRSxLQUFLbGMsS0FBS3EzQixRQUFRSixnQkFBZ0JqM0IsS0FBS2lMLEVBQUVDLEVBQUUsYUFBYWlzQixFQUFFOTNCLFVBQVVzeUIsWUFBWSxTQUFTMW1CLEdBQUdqTCxLQUFLcTNCLFFBQVFOLG1CQUFtQi8yQixLQUFLaUwsRUFBRSxnQkFDbmRxc0IsRUFBRWo0QixVQUFVODNCLEVBQUU5M0IsVUFBc0YsSUFBSW80QixFQUFFRixFQUFFbDRCLFVBQVUsSUFBSWk0QixFQUFFRyxFQUFFL1QsWUFBWTZULEVBQUU3NUIsRUFBRSs1QixFQUFFTixFQUFFOTNCLFdBQVdvNEIsRUFBRUMsc0JBQXFCLEVBQUcsSUFBSUMsRUFBRSxDQUFDenpCLFFBQVEsTUFBTTB6QixFQUFFejVCLE9BQU9rQixVQUFVQyxlQUFldTRCLEVBQUUsQ0FBQzc0QixLQUFJLEVBQUd1SSxLQUFJLEVBQUd1d0IsUUFBTyxFQUFHQyxVQUFTLEdBQ2hTLFNBQVNDLEVBQUUvc0IsRUFBRUMsRUFBRXBOLEdBQUcsSUFBSStHLEVBQUU5RyxFQUFFLEdBQUcyUSxFQUFFLEtBQUt1cEIsRUFBRSxLQUFLLEdBQUcsTUFBTS9zQixFQUFFLElBQUlyRyxVQUFLLElBQVNxRyxFQUFFM0QsTUFBTTB3QixFQUFFL3NCLEVBQUUzRCxVQUFLLElBQVMyRCxFQUFFbE0sTUFBTTBQLEVBQUUsR0FBR3hELEVBQUVsTSxLQUFLa00sRUFBRTBzQixFQUFFaDZCLEtBQUtzTixFQUFFckcsS0FBS2d6QixFQUFFdjRCLGVBQWV1RixLQUFLOUcsRUFBRThHLEdBQUdxRyxFQUFFckcsSUFBSSxJQUFJcXpCLEVBQUV0NEIsVUFBVUMsT0FBTyxFQUFFLEdBQUcsSUFBSXE0QixFQUFFbjZCLEVBQUVzRSxTQUFTdkUsT0FBTyxHQUFHLEVBQUVvNkIsRUFBRSxDQUFDLElBQUksSUFBSUMsRUFBRXhvQixNQUFNdW9CLEdBQUdyNkIsRUFBRSxFQUFFQSxFQUFFcTZCLEVBQUVyNkIsSUFBSXM2QixFQUFFdDZCLEdBQUcrQixVQUFVL0IsRUFBRSxHQUFHRSxFQUFFc0UsU0FBUzgxQixFQUFFLEdBQUdsdEIsR0FBR0EsRUFBRXdMLGFBQWEsSUFBSTVSLEtBQUtxekIsRUFBRWp0QixFQUFFd0wsa0JBQWUsSUFBUzFZLEVBQUU4RyxLQUFLOUcsRUFBRThHLEdBQUdxekIsRUFBRXJ6QixJQUFJLE1BQU0sQ0FBQ3V6QixTQUFTbDVCLEVBQUU0RixLQUFLbUcsRUFBRWpNLElBQUkwUCxFQUFFbkgsSUFBSTB3QixFQUFFeHhCLE1BQU0xSSxFQUFFczZCLE9BQU9WLEVBQUV6ekIsU0FDeFUsU0FBU28wQixFQUFFcnRCLEdBQUcsTUFBTSxpQkFBa0JBLEdBQUcsT0FBT0EsR0FBR0EsRUFBRW10QixXQUFXbDVCLEVBQXFHLElBQUlxNUIsRUFBRSxPQUFPLFNBQVNDLEVBQUV2dEIsRUFBRUMsR0FBRyxNQUFNLGlCQUFrQkQsR0FBRyxPQUFPQSxHQUFHLE1BQU1BLEVBQUVqTSxJQUE3SyxTQUFnQmlNLEdBQUcsSUFBSUMsRUFBRSxDQUFDLElBQUksS0FBSyxJQUFJLE1BQU0sTUFBTSxJQUFJRCxFQUFFc1EsUUFBUSxTQUFRLFNBQVN0USxHQUFHLE9BQU9DLEVBQUVELE1BQW1Gd3RCLENBQU8sR0FBR3h0QixFQUFFak0sS0FBS2tNLEVBQUUwRyxTQUFTLElBQzVXLFNBQVM4bUIsRUFBRXp0QixFQUFFQyxFQUFFcE4sRUFBRStHLEVBQUU5RyxHQUFHLElBQUkyUSxTQUFTekQsRUFBSyxjQUFjeUQsR0FBRyxZQUFZQSxJQUFFekQsRUFBRSxNQUFLLElBQUlndEIsR0FBRSxFQUFHLEdBQUcsT0FBT2h0QixFQUFFZ3RCLEdBQUUsT0FBUSxPQUFPdnBCLEdBQUcsSUFBSyxTQUFTLElBQUssU0FBU3VwQixHQUFFLEVBQUcsTUFBTSxJQUFLLFNBQVMsT0FBT2h0QixFQUFFbXRCLFVBQVUsS0FBS2w1QixFQUFFLEtBQUtLLEVBQUUwNEIsR0FBRSxHQUFJLEdBQUdBLEVBQUUsT0FBV2w2QixFQUFFQSxFQUFOazZCLEVBQUVodEIsR0FBU0EsRUFBRSxLQUFLcEcsRUFBRSxJQUFJMnpCLEVBQUVQLEVBQUUsR0FBR3B6QixFQUFFOEssTUFBTWdwQixRQUFRNTZCLElBQUlELEVBQUUsR0FBRyxNQUFNbU4sSUFBSW5OLEVBQUVtTixFQUFFc1EsUUFBUWdkLEVBQUUsT0FBTyxLQUFLRyxFQUFFMzZCLEVBQUVtTixFQUFFcE4sRUFBRSxJQUFHLFNBQVNtTixHQUFHLE9BQU9BLE1BQUssTUFBTWxOLElBQUl1NkIsRUFBRXY2QixLQUFLQSxFQUQvVyxTQUFXa04sRUFBRUMsR0FBRyxNQUFNLENBQUNrdEIsU0FBU2w1QixFQUFFNEYsS0FBS21HLEVBQUVuRyxLQUFLOUYsSUFBSWtNLEVBQUUzRCxJQUFJMEQsRUFBRTFELElBQUlkLE1BQU13RSxFQUFFeEUsTUFBTTR4QixPQUFPcHRCLEVBQUVvdEIsUUFDNFJPLENBQUU3NkIsRUFBRUQsSUFBSUMsRUFBRWlCLEtBQUtpNUIsR0FBR0EsRUFBRWo1QixNQUFNakIsRUFBRWlCLElBQUksSUFBSSxHQUFHakIsRUFBRWlCLEtBQUt1YyxRQUFRZ2QsRUFBRSxPQUFPLEtBQUt0dEIsSUFBSUMsRUFBRS9KLEtBQUtwRCxJQUFJLEVBQXlCLEdBQXZCazZCLEVBQUUsRUFBRXB6QixFQUFFLEtBQUtBLEVBQUUsSUFBSUEsRUFBRSxJQUFPOEssTUFBTWdwQixRQUFRMXRCLEdBQUcsSUFBSSxJQUFJaXRCLEVBQ3pmLEVBQUVBLEVBQUVqdEIsRUFBRXBMLE9BQU9xNEIsSUFBSSxDQUFRLElBQUlDLEVBQUV0ekIsRUFBRTJ6QixFQUFmOXBCLEVBQUV6RCxFQUFFaXRCLEdBQWVBLEdBQUdELEdBQUdTLEVBQUVocUIsRUFBRXhELEVBQUVwTixFQUFFcTZCLEVBQUVwNkIsUUFBUSxHQUFVLG1CQUFQbzZCLEVBTmhFLFNBQVdsdEIsR0FBRyxPQUFHLE9BQU9BLEdBQUcsaUJBQWtCQSxFQUFTLEtBQXNDLG1CQUFqQ0EsRUFBRXJELEdBQUdxRCxFQUFFckQsSUFBSXFELEVBQUUsZUFBMENBLEVBQUUsS0FNbERwRCxDQUFFb0QsSUFBeUIsSUFBSUEsRUFBRWt0QixFQUFFdjZCLEtBQUtxTixHQUFHaXRCLEVBQUUsSUFBSXhwQixFQUFFekQsRUFBRWhLLFFBQVE0M0IsTUFBNkJaLEdBQUdTLEVBQTFCaHFCLEVBQUVBLEVBQUVoUSxNQUEwQndNLEVBQUVwTixFQUF0QnE2QixFQUFFdHpCLEVBQUUyekIsRUFBRTlwQixFQUFFd3BCLEtBQWtCbjZCLFFBQVEsR0FBRyxXQUFXMlEsRUFBRSxNQUFNeEQsRUFBRSxHQUFHRCxFQUFFRixNQUFNbVIsRUFBRSxHQUFHLG9CQUFvQmhSLEVBQUUscUJBQXFCL00sT0FBT2lDLEtBQUs2SyxHQUFHNkcsS0FBSyxNQUFNLElBQUk1RyxJQUFJLE9BQU8rc0IsRUFBRSxTQUFTYSxFQUFFN3RCLEVBQUVDLEVBQUVwTixHQUFHLEdBQUcsTUFBTW1OLEVBQUUsT0FBT0EsRUFBRSxJQUFJcEcsRUFBRSxHQUFHOUcsRUFBRSxFQUFtRCxPQUFqRDI2QixFQUFFenRCLEVBQUVwRyxFQUFFLEdBQUcsSUFBRyxTQUFTb0csR0FBRyxPQUFPQyxFQUFFdE4sS0FBS0UsRUFBRW1OLEVBQUVsTixRQUFjOEcsRUFDMVosU0FBU2swQixFQUFFOXRCLEdBQUcsSUFBSSxJQUFJQSxFQUFFK3RCLFFBQVEsQ0FBQyxJQUFJOXRCLEVBQUVELEVBQUVndUIsUUFBUS90QixFQUFFQSxJQUFJRCxFQUFFK3RCLFFBQVEsRUFBRS90QixFQUFFZ3VCLFFBQVEvdEIsRUFBRUEsRUFBRWd1QixNQUFLLFNBQVNodUIsR0FBRyxJQUFJRCxFQUFFK3RCLFVBQVU5dEIsRUFBRUEsRUFBRTZXLFFBQVE5VyxFQUFFK3RCLFFBQVEsRUFBRS90QixFQUFFZ3VCLFFBQVEvdEIsTUFBSSxTQUFTQSxHQUFHLElBQUlELEVBQUUrdEIsVUFBVS90QixFQUFFK3RCLFFBQVEsRUFBRS90QixFQUFFZ3VCLFFBQVEvdEIsTUFBSyxHQUFHLElBQUlELEVBQUUrdEIsUUFBUSxPQUFPL3RCLEVBQUVndUIsUUFBUSxNQUFNaHVCLEVBQUVndUIsUUFBUyxJQUFJRSxFQUFFLENBQUNqMUIsUUFBUSxNQUFNLFNBQVNrMUIsSUFBSSxJQUFJbnVCLEVBQUVrdUIsRUFBRWoxQixRQUFRLEdBQUcsT0FBTytHLEVBQUUsTUFBTUYsTUFBTW1SLEVBQUUsTUFBTSxPQUFPalIsRUFBRSxJQUFJb3VCLEVBQUUsQ0FBQ0MsdUJBQXVCSCxFQUFFSSx3QkFBd0IsQ0FBQ0MsV0FBVyxHQUFHQyxrQkFBa0I5QixFQUFFK0IscUJBQXFCLENBQUN4MUIsU0FBUSxHQUFJeEUsT0FBT2hDLEdBQ2plSCxFQUFRbzhCLFNBQVMsQ0FBQzlwQixJQUFJaXBCLEVBQUU3a0IsUUFBUSxTQUFTaEosRUFBRUMsRUFBRXBOLEdBQUdnN0IsRUFBRTd0QixHQUFFLFdBQVdDLEVBQUVuTCxNQUFNQyxLQUFLSixhQUFZOUIsSUFBSXdSLE1BQU0sU0FBU3JFLEdBQUcsSUFBSUMsRUFBRSxFQUF1QixPQUFyQjR0QixFQUFFN3RCLEdBQUUsV0FBV0MsT0FBYUEsR0FBRzB1QixRQUFRLFNBQVMzdUIsR0FBRyxPQUFPNnRCLEVBQUU3dEIsR0FBRSxTQUFTQSxHQUFHLE9BQU9BLE1BQUssSUFBSTR1QixLQUFLLFNBQVM1dUIsR0FBRyxJQUFJcXRCLEVBQUVydEIsR0FBRyxNQUFNRixNQUFNbVIsRUFBRSxNQUFNLE9BQU9qUixJQUFJMU4sRUFBUXU4QixVQUFVM0MsRUFBRTU1QixFQUFRdzhCLGNBQWN4QyxFQUFFaDZCLEVBQVF5OEIsbURBQW1EWCxFQUNoWDk3QixFQUFRMDhCLGFBQWEsU0FBU2h2QixFQUFFQyxFQUFFcE4sR0FBRyxHQUFHLE1BQU9tTixFQUFjLE1BQU1GLE1BQU1tUixFQUFFLElBQUlqUixJQUFJLElBQUlwRyxFQUFFbkgsRUFBRSxHQUFHdU4sRUFBRXhFLE9BQU8xSSxFQUFFa04sRUFBRWpNLElBQUkwUCxFQUFFekQsRUFBRTFELElBQUkwd0IsRUFBRWh0QixFQUFFb3RCLE9BQU8sR0FBRyxNQUFNbnRCLEVBQUUsQ0FBb0UsUUFBbkUsSUFBU0EsRUFBRTNELE1BQU1tSCxFQUFFeEQsRUFBRTNELElBQUkwd0IsRUFBRU4sRUFBRXp6QixjQUFTLElBQVNnSCxFQUFFbE0sTUFBTWpCLEVBQUUsR0FBR21OLEVBQUVsTSxLQUFRaU0sRUFBRW5HLE1BQU1tRyxFQUFFbkcsS0FBSzJSLGFBQWEsSUFBSXloQixFQUFFanRCLEVBQUVuRyxLQUFLMlIsYUFBYSxJQUFJMGhCLEtBQUtqdEIsRUFBRTBzQixFQUFFaDZCLEtBQUtzTixFQUFFaXRCLEtBQUtOLEVBQUV2NEIsZUFBZTY0QixLQUFLdHpCLEVBQUVzekIsUUFBRyxJQUFTanRCLEVBQUVpdEIsU0FBSSxJQUFTRCxFQUFFQSxFQUFFQyxHQUFHanRCLEVBQUVpdEIsSUFBSSxJQUFJQSxFQUFFdjRCLFVBQVVDLE9BQU8sRUFBRSxHQUFHLElBQUlzNEIsRUFBRXR6QixFQUFFeEMsU0FBU3ZFLE9BQU8sR0FBRyxFQUFFcTZCLEVBQUUsQ0FBQ0QsRUFBRXZvQixNQUFNd29CLEdBQUcsSUFBSSxJQUFJdDZCLEVBQUUsRUFBRUEsRUFBRXM2QixFQUFFdDZCLElBQUlxNkIsRUFBRXI2QixHQUFHK0IsVUFBVS9CLEVBQUUsR0FBR2dILEVBQUV4QyxTQUFTNjFCLEVBQUUsTUFBTSxDQUFDRSxTQUFTbDVCLEVBQUU0RixLQUFLbUcsRUFBRW5HLEtBQ3hmOUYsSUFBSWpCLEVBQUV3SixJQUFJbUgsRUFBRWpJLE1BQU01QixFQUFFd3pCLE9BQU9KLElBQUkxNkIsRUFBUWdELGNBQWMsU0FBUzBLLEVBQUVDLEdBQThLLFlBQTNLLElBQVNBLElBQUlBLEVBQUUsT0FBTUQsRUFBRSxDQUFDbXRCLFNBQVM3NUIsRUFBRTI3QixzQkFBc0JodkIsRUFBRWl2QixjQUFjbHZCLEVBQUVtdkIsZUFBZW52QixFQUFFb3ZCLGFBQWEsRUFBRXozQixTQUFTLEtBQUtrRSxTQUFTLE9BQVFsRSxTQUFTLENBQUN3MUIsU0FBUy9CLEVBQUVpRSxTQUFTcnZCLEdBQVVBLEVBQUVuRSxTQUFTbUUsR0FBRzFOLEVBQVFvRixjQUFjcTFCLEVBQUV6NkIsRUFBUWc5QixjQUFjLFNBQVN0dkIsR0FBRyxJQUFJQyxFQUFFOHNCLEVBQUUvNEIsS0FBSyxLQUFLZ00sR0FBWSxPQUFUQyxFQUFFcEcsS0FBS21HLEVBQVNDLEdBQUczTixFQUFRaTlCLFVBQVUsV0FBVyxNQUFNLENBQUN0MkIsUUFBUSxPQUFPM0csRUFBUXdJLFdBQVcsU0FBU2tGLEdBQUcsTUFBTSxDQUFDbXRCLFNBQVN6NUIsRUFBRStZLE9BQU96TSxJQUFJMU4sRUFBUWs5QixlQUFlbkMsRUFDM2UvNkIsRUFBUW05QixLQUFLLFNBQVN6dkIsR0FBRyxNQUFNLENBQUNtdEIsU0FBUzVCLEVBQUVtRSxTQUFTLENBQUMzQixTQUFTLEVBQUVDLFFBQVFodUIsR0FBRzJ2QixNQUFNN0IsSUFBSXg3QixFQUFRa0ssS0FBSyxTQUFTd0QsRUFBRUMsR0FBRyxNQUFNLENBQUNrdEIsU0FBUzdCLEVBQUV6eEIsS0FBS21HLEVBQUVtTSxhQUFRLElBQVNsTSxFQUFFLEtBQUtBLElBQUkzTixFQUFRNmpCLFlBQVksU0FBU25XLEVBQUVDLEdBQUcsT0FBT2t1QixJQUFJaFksWUFBWW5XLEVBQUVDLElBQUkzTixFQUFRczlCLFdBQVcsU0FBUzV2QixFQUFFQyxHQUFHLE9BQU9rdUIsSUFBSXlCLFdBQVc1dkIsRUFBRUMsSUFBSTNOLEVBQVF1OUIsY0FBYyxhQUFhdjlCLEVBQVE0Z0IsVUFBVSxTQUFTbFQsRUFBRUMsR0FBRyxPQUFPa3VCLElBQUlqYixVQUFVbFQsRUFBRUMsSUFBSTNOLEVBQVF3OUIsb0JBQW9CLFNBQVM5dkIsRUFBRUMsRUFBRXBOLEdBQUcsT0FBT3M3QixJQUFJMkIsb0JBQW9COXZCLEVBQUVDLEVBQUVwTixJQUM5Y1AsRUFBUXk5QixnQkFBZ0IsU0FBUy92QixFQUFFQyxHQUFHLE9BQU9rdUIsSUFBSTRCLGdCQUFnQi92QixFQUFFQyxJQUFJM04sRUFBUTA5QixRQUFRLFNBQVNod0IsRUFBRUMsR0FBRyxPQUFPa3VCLElBQUk2QixRQUFRaHdCLEVBQUVDLElBQUkzTixFQUFRMjlCLFdBQVcsU0FBU2p3QixFQUFFQyxFQUFFcE4sR0FBRyxPQUFPczdCLElBQUk4QixXQUFXandCLEVBQUVDLEVBQUVwTixJQUFJUCxFQUFRc2lCLE9BQU8sU0FBUzVVLEdBQUcsT0FBT211QixJQUFJdlosT0FBTzVVLElBQUkxTixFQUFReWtCLFNBQVMsU0FBUy9XLEdBQUcsT0FBT211QixJQUFJcFgsU0FBUy9XLElBQUkxTixFQUFRNDlCLFFBQVEsVTs7Ozs7Ozs7R0NYeFMsSUFBSUMsRUFBRyxFQUFRLEdBQVN2OUIsRUFBRSxFQUFRLElBQWlCVSxFQUFFLEVBQVEsSUFBYSxTQUFTc0osRUFBRW9ELEdBQUcsSUFBSSxJQUFJQyxFQUFFLHlEQUF5REQsRUFBRW5OLEVBQUUsRUFBRUEsRUFBRThCLFVBQVVDLE9BQU8vQixJQUFJb04sR0FBRyxXQUFXMHJCLG1CQUFtQmgzQixVQUFVOUIsSUFBSSxNQUFNLHlCQUF5Qm1OLEVBQUUsV0FBV0MsRUFBRSxpSEFBaUgsSUFBSWt3QixFQUFHLE1BQU1yd0IsTUFBTWxELEVBQUUsTUFBTSxJQUFJd3pCLEVBQUcsSUFBSUMsSUFBSUMsRUFBRyxHQUFHLFNBQVNDLEVBQUd2d0IsRUFBRUMsR0FBR3V3QixFQUFHeHdCLEVBQUVDLEdBQUd1d0IsRUFBR3h3QixFQUFFLFVBQVVDLEdBQzNlLFNBQVN1d0IsRUFBR3h3QixFQUFFQyxHQUFXLElBQVJxd0IsRUFBR3R3QixHQUFHQyxFQUFNRCxFQUFFLEVBQUVBLEVBQUVDLEVBQUVyTCxPQUFPb0wsSUFBSW93QixFQUFHSyxJQUFJeHdCLEVBQUVELElBQ3pELElBQUkwd0IsSUFBSyxvQkFBcUI3NEIsYUFBUSxJQUFxQkEsT0FBT0MsZUFBVSxJQUFxQkQsT0FBT0MsU0FBU0osZUFBZWk1QixFQUFHLDhWQUE4VkMsRUFBRzE5QixPQUFPa0IsVUFBVUMsZUFDcmZ3OEIsRUFBRyxHQUFHQyxFQUFHLEdBQytNLFNBQVM3RSxFQUFFanNCLEVBQUVDLEVBQUVwTixFQUFFQyxFQUFFOEcsRUFBRXN6QixFQUFFRCxHQUFHbDRCLEtBQUtnOEIsZ0JBQWdCLElBQUk5d0IsR0FBRyxJQUFJQSxHQUFHLElBQUlBLEVBQUVsTCxLQUFLaThCLGNBQWNsK0IsRUFBRWlDLEtBQUtrOEIsbUJBQW1CcjNCLEVBQUU3RSxLQUFLbThCLGdCQUFnQnIrQixFQUFFa0MsS0FBS284QixhQUFhbnhCLEVBQUVqTCxLQUFLOEUsS0FBS29HLEVBQUVsTCxLQUFLcThCLFlBQVlsRSxFQUFFbjRCLEtBQUtzOEIsa0JBQWtCcEUsRUFBRSxJQUFJWixFQUFFLEdBQ25iLHVJQUF1SXpsQixNQUFNLEtBQUtvQyxTQUFRLFNBQVNoSixHQUFHcXNCLEVBQUVyc0IsR0FBRyxJQUFJaXNCLEVBQUVqc0IsRUFBRSxHQUFFLEVBQUdBLEVBQUUsTUFBSyxHQUFHLE1BQU0sQ0FBQyxDQUFDLGdCQUFnQixrQkFBa0IsQ0FBQyxZQUFZLFNBQVMsQ0FBQyxVQUFVLE9BQU8sQ0FBQyxZQUFZLGVBQWVnSixTQUFRLFNBQVNoSixHQUFHLElBQUlDLEVBQUVELEVBQUUsR0FBR3FzQixFQUFFcHNCLEdBQUcsSUFBSWdzQixFQUFFaHNCLEVBQUUsR0FBRSxFQUFHRCxFQUFFLEdBQUcsTUFBSyxHQUFHLE1BQU0sQ0FBQyxrQkFBa0IsWUFBWSxhQUFhLFNBQVNnSixTQUFRLFNBQVNoSixHQUFHcXNCLEVBQUVyc0IsR0FBRyxJQUFJaXNCLEVBQUVqc0IsRUFBRSxHQUFFLEVBQUdBLEVBQUVzeEIsY0FBYyxNQUFLLEdBQUcsTUFDdmUsQ0FBQyxjQUFjLDRCQUE0QixZQUFZLGlCQUFpQnRvQixTQUFRLFNBQVNoSixHQUFHcXNCLEVBQUVyc0IsR0FBRyxJQUFJaXNCLEVBQUVqc0IsRUFBRSxHQUFFLEVBQUdBLEVBQUUsTUFBSyxHQUFHLE1BQU0sOE9BQThPNEcsTUFBTSxLQUFLb0MsU0FBUSxTQUFTaEosR0FBR3FzQixFQUFFcnNCLEdBQUcsSUFBSWlzQixFQUFFanNCLEVBQUUsR0FBRSxFQUFHQSxFQUFFc3hCLGNBQWMsTUFBSyxHQUFHLE1BQ3JiLENBQUMsVUFBVSxXQUFXLFFBQVEsWUFBWXRvQixTQUFRLFNBQVNoSixHQUFHcXNCLEVBQUVyc0IsR0FBRyxJQUFJaXNCLEVBQUVqc0IsRUFBRSxHQUFFLEVBQUdBLEVBQUUsTUFBSyxHQUFHLE1BQU0sQ0FBQyxVQUFVLFlBQVlnSixTQUFRLFNBQVNoSixHQUFHcXNCLEVBQUVyc0IsR0FBRyxJQUFJaXNCLEVBQUVqc0IsRUFBRSxHQUFFLEVBQUdBLEVBQUUsTUFBSyxHQUFHLE1BQU0sQ0FBQyxPQUFPLE9BQU8sT0FBTyxRQUFRZ0osU0FBUSxTQUFTaEosR0FBR3FzQixFQUFFcnNCLEdBQUcsSUFBSWlzQixFQUFFanNCLEVBQUUsR0FBRSxFQUFHQSxFQUFFLE1BQUssR0FBRyxNQUFNLENBQUMsVUFBVSxTQUFTZ0osU0FBUSxTQUFTaEosR0FBR3FzQixFQUFFcnNCLEdBQUcsSUFBSWlzQixFQUFFanNCLEVBQUUsR0FBRSxFQUFHQSxFQUFFc3hCLGNBQWMsTUFBSyxHQUFHLE1BQU0sSUFBSUMsRUFBRyxnQkFBZ0IsU0FBU0MsRUFBR3h4QixHQUFHLE9BQU9BLEVBQUUsR0FBR3l4QixjQUkzWSxTQUFTQyxFQUFHMXhCLEVBQUVDLEVBQUVwTixFQUFFQyxHQUFHLElBQUk4RyxFQUFFeXlCLEVBQUVoNEIsZUFBZTRMLEdBQUdvc0IsRUFBRXBzQixHQUFHLE1BQVcsT0FBT3JHLEVBQUUsSUFBSUEsRUFBRUMsTUFBSy9HLElBQU8sRUFBRW1OLEVBQUVyTCxTQUFTLE1BQU1xTCxFQUFFLElBQUksTUFBTUEsRUFBRSxNQUFJLE1BQU1BLEVBQUUsSUFBSSxNQUFNQSxFQUFFLFFBUG5KLFNBQVlELEVBQUVDLEVBQUVwTixFQUFFQyxHQUFHLEdBQUcsTUFBT21OLEdBRGdHLFNBQVlELEVBQUVDLEVBQUVwTixFQUFFQyxHQUFHLEdBQUcsT0FBT0QsR0FBRyxJQUFJQSxFQUFFZ0gsS0FBSyxPQUFNLEVBQUcsY0FBY29HLEdBQUcsSUFBSyxXQUFXLElBQUssU0FBUyxPQUFNLEVBQUcsSUFBSyxVQUFVLE9BQUduTixJQUFjLE9BQU9ELEdBQVNBLEVBQUVrK0IsZ0JBQW1ELFdBQW5DL3dCLEVBQUVBLEVBQUVzeEIsY0FBY3ZwQixNQUFNLEVBQUUsS0FBc0IsVUFBVS9ILEdBQUUsUUFBUSxPQUFNLEdBQy9UMnhCLENBQUczeEIsRUFBRUMsRUFBRXBOLEVBQUVDLEdBQUcsT0FBTSxFQUFHLEdBQUdBLEVBQUUsT0FBTSxFQUFHLEdBQUcsT0FBT0QsRUFBRSxPQUFPQSxFQUFFZ0gsTUFBTSxLQUFLLEVBQUUsT0FBT29HLEVBQUUsS0FBSyxFQUFFLE9BQU0sSUFBS0EsRUFBRSxLQUFLLEVBQUUsT0FBTzJ4QixNQUFNM3hCLEdBQUcsS0FBSyxFQUFFLE9BQU8yeEIsTUFBTTN4QixJQUFJLEVBQUVBLEVBQUUsT0FBTSxFQU9yRDR4QixDQUFHNXhCLEVBQUVwTixFQUFFK0csRUFBRTlHLEtBQUtELEVBQUUsTUFBTUMsR0FBRyxPQUFPOEcsRUFScEwsU0FBWW9HLEdBQUcsUUFBRzR3QixFQUFHaitCLEtBQUttK0IsRUFBRzl3QixLQUFlNHdCLEVBQUdqK0IsS0FBS2srQixFQUFHN3dCLEtBQWUyd0IsRUFBR21CLEtBQUs5eEIsR0FBVTh3QixFQUFHOXdCLElBQUcsR0FBRzZ3QixFQUFHN3dCLElBQUcsR0FBUyxJQVFzRSt4QixDQUFHOXhCLEtBQUssT0FBT3BOLEVBQUVtTixFQUFFZ3lCLGdCQUFnQi94QixHQUFHRCxFQUFFaXlCLGFBQWFoeUIsRUFBRSxHQUFHcE4sSUFBSStHLEVBQUVzM0IsZ0JBQWdCbHhCLEVBQUVwRyxFQUFFdTNCLGNBQWMsT0FBT3QrQixFQUFFLElBQUkrRyxFQUFFQyxNQUFRLEdBQUdoSCxHQUFHb04sRUFBRXJHLEVBQUVvM0IsY0FBY2wrQixFQUFFOEcsRUFBRXEzQixtQkFBbUIsT0FBT3ArQixFQUFFbU4sRUFBRWd5QixnQkFBZ0IveEIsSUFBYXBOLEVBQUUsS0FBWCtHLEVBQUVBLEVBQUVDLE9BQWMsSUFBSUQsSUFBRyxJQUFLL0csRUFBRSxHQUFHLEdBQUdBLEVBQUVDLEVBQUVrTixFQUFFa3lCLGVBQWVwL0IsRUFBRW1OLEVBQUVwTixHQUFHbU4sRUFBRWl5QixhQUFhaHlCLEVBQUVwTixNQUg1ZCwwakNBQTBqQytULE1BQU0sS0FBS29DLFNBQVEsU0FBU2hKLEdBQUcsSUFBSUMsRUFBRUQsRUFBRXNRLFFBQVFpaEIsRUFDem1DQyxHQUFJbkYsRUFBRXBzQixHQUFHLElBQUlnc0IsRUFBRWhzQixFQUFFLEdBQUUsRUFBR0QsRUFBRSxNQUFLLEdBQUcsTUFBTSwyRUFBMkU0RyxNQUFNLEtBQUtvQyxTQUFRLFNBQVNoSixHQUFHLElBQUlDLEVBQUVELEVBQUVzUSxRQUFRaWhCLEVBQUdDLEdBQUluRixFQUFFcHNCLEdBQUcsSUFBSWdzQixFQUFFaHNCLEVBQUUsR0FBRSxFQUFHRCxFQUFFLGdDQUErQixHQUFHLE1BQU0sQ0FBQyxXQUFXLFdBQVcsYUFBYWdKLFNBQVEsU0FBU2hKLEdBQUcsSUFBSUMsRUFBRUQsRUFBRXNRLFFBQVFpaEIsRUFBR0MsR0FBSW5GLEVBQUVwc0IsR0FBRyxJQUFJZ3NCLEVBQUVoc0IsRUFBRSxHQUFFLEVBQUdELEVBQUUsd0NBQXVDLEdBQUcsTUFBTSxDQUFDLFdBQVcsZUFBZWdKLFNBQVEsU0FBU2hKLEdBQUdxc0IsRUFBRXJzQixHQUFHLElBQUlpc0IsRUFBRWpzQixFQUFFLEdBQUUsRUFBR0EsRUFBRXN4QixjQUFjLE1BQUssR0FBRyxNQUMvY2pGLEVBQUU4RixVQUFVLElBQUlsRyxFQUFFLFlBQVksR0FBRSxFQUFHLGFBQWEsZ0NBQStCLEdBQUcsR0FBSSxDQUFDLE1BQU0sT0FBTyxTQUFTLGNBQWNqakIsU0FBUSxTQUFTaEosR0FBR3FzQixFQUFFcnNCLEdBQUcsSUFBSWlzQixFQUFFanNCLEVBQUUsR0FBRSxFQUFHQSxFQUFFc3hCLGNBQWMsTUFBSyxHQUFHLE1BRXpMLElBQUljLEVBQUdqQyxFQUFHcEIsbURBQW1Ec0QsRUFBRyxNQUFNQyxFQUFHLE1BQU1DLEVBQUcsTUFBTUMsRUFBRyxNQUFNQyxFQUFHLE1BQU1DLEVBQUcsTUFBTUMsRUFBRyxNQUFNQyxFQUFHLE1BQU1DLEVBQUcsTUFBTUMsRUFBRyxNQUFNQyxFQUFHLE1BQU1DLEVBQUcsTUFBTUMsRUFBRyxNQUFNQyxFQUFHLE1BQU1DLEVBQUcsTUFBTUMsRUFBRyxNQUFNQyxFQUFHLE1BQ2hOLEdBQUcsbUJBQW9COS9CLFFBQVFBLE9BQU9pNEIsSUFBSSxDQUFDLElBQUljLEVBQUUvNEIsT0FBT2k0QixJQUFJNkcsRUFBRy9GLEVBQUUsaUJBQWlCZ0csRUFBR2hHLEVBQUUsZ0JBQWdCaUcsRUFBR2pHLEVBQUUsa0JBQWtCa0csRUFBR2xHLEVBQUUscUJBQXFCbUcsRUFBR25HLEVBQUUsa0JBQWtCb0csRUFBR3BHLEVBQUUsa0JBQWtCcUcsRUFBR3JHLEVBQUUsaUJBQWlCc0csRUFBR3RHLEVBQUUscUJBQXFCdUcsRUFBR3ZHLEVBQUUsa0JBQWtCd0csRUFBR3hHLEVBQUUsdUJBQXVCeUcsRUFBR3pHLEVBQUUsY0FBYzBHLEVBQUcxRyxFQUFFLGNBQWMyRyxFQUFHM0csRUFBRSxlQUFlQSxFQUFFLGVBQWU0RyxFQUFHNUcsRUFBRSxtQkFBbUI2RyxFQUFHN0csRUFBRSwwQkFBMEI4RyxFQUFHOUcsRUFBRSxtQkFBbUIrRyxFQUFHL0csRUFBRSx1QkFDeGMsSUFBbUxnSCxFQUEvS0MsRUFBRyxtQkFBb0JoZ0MsUUFBUUEsT0FBT200QixTQUFTLFNBQVM4SCxFQUFHeHpCLEdBQUcsT0FBRyxPQUFPQSxHQUFHLGlCQUFrQkEsRUFBUyxLQUF3QyxtQkFBbkNBLEVBQUV1ekIsR0FBSXZ6QixFQUFFdXpCLElBQUt2ekIsRUFBRSxlQUEwQ0EsRUFBRSxLQUFZLFNBQVN5ekIsRUFBR3p6QixHQUFHLFFBQUcsSUFBU3N6QixFQUFHLElBQUksTUFBTXh6QixRQUFTLE1BQU1qTixHQUFHLElBQUlvTixFQUFFcE4sRUFBRTBQLE1BQU1teEIsT0FBT2gwQixNQUFNLGdCQUFnQjR6QixFQUFHcnpCLEdBQUdBLEVBQUUsSUFBSSxHQUFHLE1BQU0sS0FBS3F6QixFQUFHdHpCLEVBQUUsSUFBSTJ6QixHQUFHLEVBQ2pVLFNBQVNDLEVBQUc1ekIsRUFBRUMsR0FBRyxJQUFJRCxHQUFHMnpCLEVBQUcsTUFBTSxHQUFHQSxHQUFHLEVBQUcsSUFBSTlnQyxFQUFFaU4sTUFBTSt6QixrQkFBa0IvekIsTUFBTSt6Qix1QkFBa0IsRUFBTyxJQUFJLEdBQUc1ekIsRUFBRSxHQUFHQSxFQUFFLFdBQVcsTUFBTUgsU0FBVTVNLE9BQU9DLGVBQWU4TSxFQUFFN0wsVUFBVSxRQUFRLENBQUN5ZSxJQUFJLFdBQVcsTUFBTS9TLFdBQVksaUJBQWtCZzBCLFNBQVNBLFFBQVFDLFVBQVUsQ0FBQyxJQUFJRCxRQUFRQyxVQUFVOXpCLEVBQUUsSUFBSSxNQUFNd0QsR0FBRyxJQUFJM1EsRUFBRTJRLEVBQUVxd0IsUUFBUUMsVUFBVS96QixFQUFFLEdBQUdDLE9BQU8sQ0FBQyxJQUFJQSxFQUFFdE4sT0FBTyxNQUFNOFEsR0FBRzNRLEVBQUUyUSxFQUFFekQsRUFBRXJOLEtBQUtzTixFQUFFN0wsZUFBZSxDQUFDLElBQUksTUFBTTBMLFFBQVMsTUFBTTJELEdBQUczUSxFQUFFMlEsRUFBRXpELEtBQUssTUFBTXlELEdBQUcsR0FBR0EsR0FBRzNRLEdBQUcsaUJBQWtCMlEsRUFBRWxCLE1BQU0sQ0FBQyxJQUFJLElBQUkzSSxFQUFFNkosRUFBRWxCLE1BQU1xRSxNQUFNLE1BQ25mc21CLEVBQUVwNkIsRUFBRXlQLE1BQU1xRSxNQUFNLE1BQU1xbUIsRUFBRXJ6QixFQUFFaEYsT0FBTyxFQUFFbzRCLEVBQUVFLEVBQUV0NEIsT0FBTyxFQUFFLEdBQUdxNEIsR0FBRyxHQUFHRCxHQUFHcHpCLEVBQUVxekIsS0FBS0MsRUFBRUYsSUFBSUEsSUFBSSxLQUFLLEdBQUdDLEdBQUcsR0FBR0QsRUFBRUMsSUFBSUQsSUFBSSxHQUFHcHpCLEVBQUVxekIsS0FBS0MsRUFBRUYsR0FBRyxDQUFDLEdBQUcsSUFBSUMsR0FBRyxJQUFJRCxFQUFHLEdBQUcsR0FBR0MsSUFBUSxJQUFKRCxHQUFTcHpCLEVBQUVxekIsS0FBS0MsRUFBRUYsR0FBRyxNQUFNLEtBQUtwekIsRUFBRXF6QixHQUFHM2MsUUFBUSxXQUFXLGNBQWMsR0FBRzJjLEdBQUcsR0FBR0QsR0FBRyxRQUFRLFFBQVEyRyxHQUFHLEVBQUc3ekIsTUFBTSt6QixrQkFBa0JoaEMsRUFBRSxPQUFPbU4sRUFBRUEsRUFBRUEsRUFBRTdFLGFBQWE2RSxFQUFFak4sS0FBSyxJQUFJMGdDLEVBQUd6ekIsR0FBRyxHQUM3VCxTQUFTZzBCLEVBQUdoMEIsR0FBRyxPQUFPQSxFQUFFaTBCLEtBQUssS0FBSyxFQUFFLE9BQU9SLEVBQUd6ekIsRUFBRW5HLE1BQU0sS0FBSyxHQUFHLE9BQU80NUIsRUFBRyxRQUFRLEtBQUssR0FBRyxPQUFPQSxFQUFHLFlBQVksS0FBSyxHQUFHLE9BQU9BLEVBQUcsZ0JBQWdCLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxHQUFHLE9BQU96ekIsRUFBRTR6QixFQUFHNXpCLEVBQUVuRyxNQUFLLEdBQU0sS0FBSyxHQUFHLE9BQU9tRyxFQUFFNHpCLEVBQUc1ekIsRUFBRW5HLEtBQUs0UyxRQUFPLEdBQU0sS0FBSyxHQUFHLE9BQU96TSxFQUFFNHpCLEVBQUc1ekIsRUFBRW5HLEtBQUtxNkIsU0FBUSxHQUFNLEtBQUssRUFBRSxPQUFPbDBCLEVBQUU0ekIsRUFBRzV6QixFQUFFbkcsTUFBSyxHQUFNLFFBQVEsTUFBTSxJQUM5VCxTQUFTczZCLEVBQUduMEIsR0FBRyxHQUFHLE1BQU1BLEVBQUUsT0FBTyxLQUFLLEdBQUcsbUJBQW9CQSxFQUFFLE9BQU9BLEVBQUU3RSxhQUFhNkUsRUFBRWpOLE1BQU0sS0FBSyxHQUFHLGlCQUFrQmlOLEVBQUUsT0FBT0EsRUFBRSxPQUFPQSxHQUFHLEtBQUt1eUIsRUFBRyxNQUFNLFdBQVcsS0FBS0QsRUFBRyxNQUFNLFNBQVMsS0FBS0csRUFBRyxNQUFNLFdBQVcsS0FBS0QsRUFBRyxNQUFNLGFBQWEsS0FBS0ssRUFBRyxNQUFNLFdBQVcsS0FBS0MsRUFBRyxNQUFNLGVBQWUsR0FBRyxpQkFBa0I5eUIsRUFBRSxPQUFPQSxFQUFFbXRCLFVBQVUsS0FBS3dGLEVBQUcsT0FBTzN5QixFQUFFN0UsYUFBYSxXQUFXLFlBQVksS0FBS3UzQixFQUFHLE9BQU8xeUIsRUFBRXF2QixTQUFTbDBCLGFBQWEsV0FBVyxZQUFZLEtBQUt5M0IsRUFBRyxJQUFJM3lCLEVBQUVELEVBQUV5TSxPQUNuZCxPQUQwZHhNLEVBQUVBLEVBQUU5RSxhQUFhOEUsRUFBRWxOLE1BQU0sR0FDNWVpTixFQUFFN0UsY0FBYyxLQUFLOEUsRUFBRSxjQUFjQSxFQUFFLElBQUksY0FBYyxLQUFLOHlCLEVBQUcsT0FBT29CLEVBQUduMEIsRUFBRW5HLE1BQU0sS0FBS281QixFQUFHLE9BQU9rQixFQUFHbjBCLEVBQUVrMEIsU0FBUyxLQUFLbEIsRUFBRy95QixFQUFFRCxFQUFFMHZCLFNBQVMxdkIsRUFBRUEsRUFBRTJ2QixNQUFNLElBQUksT0FBT3dFLEVBQUduMEIsRUFBRUMsSUFBSSxNQUFNcE4sS0FBSyxPQUFPLEtBQUssU0FBU3VoQyxFQUFHcDBCLEdBQUcsY0FBY0EsR0FBRyxJQUFLLFVBQVUsSUFBSyxTQUFTLElBQUssU0FBUyxJQUFLLFNBQVMsSUFBSyxZQUFZLE9BQU9BLEVBQUUsUUFBUSxNQUFNLElBQUksU0FBU3EwQixFQUFHcjBCLEdBQUcsSUFBSUMsRUFBRUQsRUFBRW5HLEtBQUssT0FBT21HLEVBQUVBLEVBQUVzMEIsV0FBVyxVQUFVdDBCLEVBQUVzeEIsZ0JBQWdCLGFBQWFyeEIsR0FBRyxVQUFVQSxHQUUxWixTQUFTczBCLEVBQUd2MEIsR0FBR0EsRUFBRXcwQixnQkFBZ0J4MEIsRUFBRXcwQixjQUR2RCxTQUFZeDBCLEdBQUcsSUFBSUMsRUFBRW8wQixFQUFHcjBCLEdBQUcsVUFBVSxRQUFRbk4sRUFBRUssT0FBT2lYLHlCQUF5Qm5LLEVBQUV5WSxZQUFZcmtCLFVBQVU2TCxHQUFHbk4sRUFBRSxHQUFHa04sRUFBRUMsR0FBRyxJQUFJRCxFQUFFM0wsZUFBZTRMLFNBQUksSUFBcUJwTixHQUFHLG1CQUFvQkEsRUFBRVEsS0FBSyxtQkFBb0JSLEVBQUVnZ0IsSUFBSSxDQUFDLElBQUlqWixFQUFFL0csRUFBRVEsSUFBSTY1QixFQUFFcjZCLEVBQUVnZ0IsSUFBaUwsT0FBN0szZixPQUFPQyxlQUFlNk0sRUFBRUMsRUFBRSxDQUFDNEosY0FBYSxFQUFHeFcsSUFBSSxXQUFXLE9BQU91RyxFQUFFakgsS0FBS29DLE9BQU84ZCxJQUFJLFNBQVM3UyxHQUFHbE4sRUFBRSxHQUFHa04sRUFBRWt0QixFQUFFdjZCLEtBQUtvQyxLQUFLaUwsTUFBTTlNLE9BQU9DLGVBQWU2TSxFQUFFQyxFQUFFLENBQUM3TSxXQUFXUCxFQUFFTyxhQUFtQixDQUFDcWhDLFNBQVMsV0FBVyxPQUFPM2hDLEdBQUc0aEMsU0FBUyxTQUFTMTBCLEdBQUdsTixFQUFFLEdBQUdrTixHQUFHMjBCLGFBQWEsV0FBVzMwQixFQUFFdzBCLGNBQ3hmLFlBQVl4MEIsRUFBRUMsTUFBdUQyMEIsQ0FBRzUwQixJQUFJLFNBQVM2MEIsRUFBRzcwQixHQUFHLElBQUlBLEVBQUUsT0FBTSxFQUFHLElBQUlDLEVBQUVELEVBQUV3MEIsY0FBYyxJQUFJdjBCLEVBQUUsT0FBTSxFQUFHLElBQUlwTixFQUFFb04sRUFBRXcwQixXQUFlM2hDLEVBQUUsR0FBcUQsT0FBbERrTixJQUFJbE4sRUFBRXVoQyxFQUFHcjBCLEdBQUdBLEVBQUU4MEIsUUFBUSxPQUFPLFFBQVE5MEIsRUFBRXZNLFFBQU91TSxFQUFFbE4sS0FBYUQsSUFBR29OLEVBQUV5MEIsU0FBUzEwQixJQUFHLEdBQU8sU0FBUyswQixFQUFHLzBCLEdBQXdELFFBQUcsS0FBeERBLEVBQUVBLElBQUksb0JBQXFCbEksU0FBU0EsY0FBUyxJQUFrQyxPQUFPLEtBQUssSUFBSSxPQUFPa0ksRUFBRWcxQixlQUFlaDFCLEVBQUU0YSxLQUFLLE1BQU0zYSxHQUFHLE9BQU9ELEVBQUU0YSxNQUMvWixTQUFTcWEsRUFBR2oxQixFQUFFQyxHQUFHLElBQUlwTixFQUFFb04sRUFBRTYwQixRQUFRLE9BQU9saUMsRUFBRSxHQUFHcU4sRUFBRSxDQUFDaTFCLG9CQUFlLEVBQU9DLGtCQUFhLEVBQU8xaEMsV0FBTSxFQUFPcWhDLFFBQVEsTUFBTWppQyxFQUFFQSxFQUFFbU4sRUFBRW8xQixjQUFjQyxpQkFBaUIsU0FBU0MsR0FBR3QxQixFQUFFQyxHQUFHLElBQUlwTixFQUFFLE1BQU1vTixFQUFFazFCLGFBQWEsR0FBR2wxQixFQUFFazFCLGFBQWFyaUMsRUFBRSxNQUFNbU4sRUFBRTYwQixRQUFRNzBCLEVBQUU2MEIsUUFBUTcwQixFQUFFaTFCLGVBQWVyaUMsRUFBRXVoQyxFQUFHLE1BQU1uMEIsRUFBRXhNLE1BQU13TSxFQUFFeE0sTUFBTVosR0FBR21OLEVBQUVvMUIsY0FBYyxDQUFDQyxlQUFldmlDLEVBQUV5aUMsYUFBYTFpQyxFQUFFMmlDLFdBQVcsYUFBYXYxQixFQUFFcEcsTUFBTSxVQUFVb0csRUFBRXBHLEtBQUssTUFBTW9HLEVBQUU2MEIsUUFBUSxNQUFNNzBCLEVBQUV4TSxPQUFPLFNBQVNnaUMsR0FBR3oxQixFQUFFQyxHQUFlLE9BQVpBLEVBQUVBLEVBQUU2MEIsVUFBaUJwRCxFQUFHMXhCLEVBQUUsVUFBVUMsR0FBRSxHQUMzZCxTQUFTeTFCLEdBQUcxMUIsRUFBRUMsR0FBR3cxQixHQUFHejFCLEVBQUVDLEdBQUcsSUFBSXBOLEVBQUV1aEMsRUFBR24wQixFQUFFeE0sT0FBT1gsRUFBRW1OLEVBQUVwRyxLQUFLLEdBQUcsTUFBTWhILEVBQUssV0FBV0MsR0FBTSxJQUFJRCxHQUFHLEtBQUttTixFQUFFdk0sT0FBT3VNLEVBQUV2TSxPQUFPWixLQUFFbU4sRUFBRXZNLE1BQU0sR0FBR1osR0FBT21OLEVBQUV2TSxRQUFRLEdBQUdaLElBQUltTixFQUFFdk0sTUFBTSxHQUFHWixRQUFRLEdBQUcsV0FBV0MsR0FBRyxVQUFVQSxFQUE4QixZQUEzQmtOLEVBQUVneUIsZ0JBQWdCLFNBQWdCL3hCLEVBQUU1TCxlQUFlLFNBQVNzaEMsR0FBRzMxQixFQUFFQyxFQUFFcEcsS0FBS2hILEdBQUdvTixFQUFFNUwsZUFBZSxpQkFBaUJzaEMsR0FBRzMxQixFQUFFQyxFQUFFcEcsS0FBS3U2QixFQUFHbjBCLEVBQUVrMUIsZUFBZSxNQUFNbDFCLEVBQUU2MEIsU0FBUyxNQUFNNzBCLEVBQUVpMUIsaUJBQWlCbDFCLEVBQUVrMUIsaUJBQWlCajFCLEVBQUVpMUIsZ0JBQ25aLFNBQVNVLEdBQUc1MUIsRUFBRUMsRUFBRXBOLEdBQUcsR0FBR29OLEVBQUU1TCxlQUFlLFVBQVU0TCxFQUFFNUwsZUFBZSxnQkFBZ0IsQ0FBQyxJQUFJdkIsRUFBRW1OLEVBQUVwRyxLQUFLLEtBQUssV0FBVy9HLEdBQUcsVUFBVUEsUUFBRyxJQUFTbU4sRUFBRXhNLE9BQU8sT0FBT3dNLEVBQUV4TSxPQUFPLE9BQU93TSxFQUFFLEdBQUdELEVBQUVvMUIsY0FBY0csYUFBYTFpQyxHQUFHb04sSUFBSUQsRUFBRXZNLFFBQVF1TSxFQUFFdk0sTUFBTXdNLEdBQUdELEVBQUVtMUIsYUFBYWwxQixFQUFXLE1BQVRwTixFQUFFbU4sRUFBRWpOLFFBQWNpTixFQUFFak4sS0FBSyxJQUFJaU4sRUFBRWsxQixpQkFBaUJsMUIsRUFBRW8xQixjQUFjQyxlQUFlLEtBQUt4aUMsSUFBSW1OLEVBQUVqTixLQUFLRixHQUN2VixTQUFTOGlDLEdBQUczMUIsRUFBRUMsRUFBRXBOLEdBQU0sV0FBV29OLEdBQUc4MEIsRUFBRy8wQixFQUFFNjFCLGlCQUFpQjcxQixJQUFFLE1BQU1uTixFQUFFbU4sRUFBRW0xQixhQUFhLEdBQUduMUIsRUFBRW8xQixjQUFjRyxhQUFhdjFCLEVBQUVtMUIsZUFBZSxHQUFHdGlDLElBQUltTixFQUFFbTFCLGFBQWEsR0FBR3RpQyxJQUF3RixTQUFTaWpDLEdBQUc5MUIsRUFBRUMsR0FBNkQsT0FBMURELEVBQUVwTixFQUFFLENBQUN3RSxjQUFTLEdBQVE2SSxJQUFNQSxFQUFsSSxTQUFZRCxHQUFHLElBQUlDLEVBQUUsR0FBdUQsT0FBcERrd0IsRUFBR3pCLFNBQVMxbEIsUUFBUWhKLEdBQUUsU0FBU0EsR0FBRyxNQUFNQSxJQUFJQyxHQUFHRCxNQUFZQyxFQUFpRDgxQixDQUFHOTFCLEVBQUU3SSxhQUFVNEksRUFBRTVJLFNBQVM2SSxHQUFTRCxFQUN2VSxTQUFTZzJCLEdBQUdoMkIsRUFBRUMsRUFBRXBOLEVBQUVDLEdBQWUsR0FBWmtOLEVBQUVBLEVBQUU1QyxRQUFXNkMsRUFBRSxDQUFDQSxFQUFFLEdBQUcsSUFBSSxJQUFJckcsRUFBRSxFQUFFQSxFQUFFL0csRUFBRStCLE9BQU9nRixJQUFJcUcsRUFBRSxJQUFJcE4sRUFBRStHLEtBQUksRUFBRyxJQUFJL0csRUFBRSxFQUFFQSxFQUFFbU4sRUFBRXBMLE9BQU8vQixJQUFJK0csRUFBRXFHLEVBQUU1TCxlQUFlLElBQUkyTCxFQUFFbk4sR0FBR1ksT0FBT3VNLEVBQUVuTixHQUFHb2pDLFdBQVdyOEIsSUFBSW9HLEVBQUVuTixHQUFHb2pDLFNBQVNyOEIsR0FBR0EsR0FBRzlHLElBQUlrTixFQUFFbk4sR0FBR3FqQyxpQkFBZ0IsT0FBUSxDQUFtQixJQUFsQnJqQyxFQUFFLEdBQUd1aEMsRUFBR3ZoQyxHQUFHb04sRUFBRSxLQUFTckcsRUFBRSxFQUFFQSxFQUFFb0csRUFBRXBMLE9BQU9nRixJQUFJLENBQUMsR0FBR29HLEVBQUVwRyxHQUFHbkcsUUFBUVosRUFBaUQsT0FBOUNtTixFQUFFcEcsR0FBR3E4QixVQUFTLE9BQUduakMsSUFBSWtOLEVBQUVwRyxHQUFHczhCLGlCQUFnQixJQUFXLE9BQU9qMkIsR0FBR0QsRUFBRXBHLEdBQUd1OEIsV0FBV2wyQixFQUFFRCxFQUFFcEcsSUFBSSxPQUFPcUcsSUFBSUEsRUFBRWcyQixVQUFTLElBQ3BZLFNBQVNHLEdBQUdwMkIsRUFBRUMsR0FBRyxHQUFHLE1BQU1BLEVBQUVvMkIsd0JBQXdCLE1BQU12MkIsTUFBTWxELEVBQUUsS0FBSyxPQUFPaEssRUFBRSxHQUFHcU4sRUFBRSxDQUFDeE0sV0FBTSxFQUFPMGhDLGtCQUFhLEVBQU8vOUIsU0FBUyxHQUFHNEksRUFBRW8xQixjQUFjRyxlQUFlLFNBQVNlLEdBQUd0MkIsRUFBRUMsR0FBRyxJQUFJcE4sRUFBRW9OLEVBQUV4TSxNQUFNLEdBQUcsTUFBTVosRUFBRSxDQUErQixHQUE5QkEsRUFBRW9OLEVBQUU3SSxTQUFTNkksRUFBRUEsRUFBRWsxQixhQUFnQixNQUFNdGlDLEVBQUUsQ0FBQyxHQUFHLE1BQU1vTixFQUFFLE1BQU1ILE1BQU1sRCxFQUFFLEtBQUssR0FBRzhILE1BQU1ncEIsUUFBUTc2QixHQUFHLENBQUMsS0FBSyxHQUFHQSxFQUFFK0IsUUFBUSxNQUFNa0wsTUFBTWxELEVBQUUsS0FBSy9KLEVBQUVBLEVBQUUsR0FBR29OLEVBQUVwTixFQUFFLE1BQU1vTixJQUFJQSxFQUFFLElBQUlwTixFQUFFb04sRUFBRUQsRUFBRW8xQixjQUFjLENBQUNHLGFBQWFuQixFQUFHdmhDLElBQy9ZLFNBQVMwakMsR0FBR3YyQixFQUFFQyxHQUFHLElBQUlwTixFQUFFdWhDLEVBQUduMEIsRUFBRXhNLE9BQU9YLEVBQUVzaEMsRUFBR24wQixFQUFFazFCLGNBQWMsTUFBTXRpQyxLQUFJQSxFQUFFLEdBQUdBLEtBQU1tTixFQUFFdk0sUUFBUXVNLEVBQUV2TSxNQUFNWixHQUFHLE1BQU1vTixFQUFFazFCLGNBQWNuMUIsRUFBRW0xQixlQUFldGlDLElBQUltTixFQUFFbTFCLGFBQWF0aUMsSUFBSSxNQUFNQyxJQUFJa04sRUFBRW0xQixhQUFhLEdBQUdyaUMsR0FBRyxTQUFTMGpDLEdBQUd4MkIsR0FBRyxJQUFJQyxFQUFFRCxFQUFFeTJCLFlBQVl4MkIsSUFBSUQsRUFBRW8xQixjQUFjRyxjQUFjLEtBQUt0MUIsR0FBRyxPQUFPQSxJQUFJRCxFQUFFdk0sTUFBTXdNLEdBQUcsSUFBSXkyQixHQUFTLCtCQUFUQSxHQUF3Riw2QkFDOVgsU0FBU0MsR0FBRzMyQixHQUFHLE9BQU9BLEdBQUcsSUFBSyxNQUFNLE1BQU0sNkJBQTZCLElBQUssT0FBTyxNQUFNLHFDQUFxQyxRQUFRLE1BQU0sZ0NBQWdDLFNBQVM0MkIsR0FBRzUyQixFQUFFQyxHQUFHLE9BQU8sTUFBTUQsR0FBRyxpQ0FBaUNBLEVBQUUyMkIsR0FBRzEyQixHQUFHLCtCQUErQkQsR0FBRyxrQkFBa0JDLEVBQUUsK0JBQStCRCxFQUMzVSxJQUFJNjJCLEdBQUdDLEdBQUcsU0FBUzkyQixHQUFHLE1BQU0sb0JBQXFCKzJCLE9BQU9BLE1BQU1DLHdCQUF3QixTQUFTLzJCLEVBQUVwTixFQUFFQyxFQUFFOEcsR0FBR205QixNQUFNQyx5QkFBd0IsV0FBVyxPQUFPaDNCLEVBQUVDLEVBQUVwTixPQUFVbU4sRUFBNUosRUFBK0osU0FBU0EsRUFBRUMsR0FBRyxHQUFHRCxFQUFFaTNCLGVBQWVQLElBQVEsY0FBYzEyQixFQUFFQSxFQUFFazNCLFVBQVVqM0IsTUFBTSxDQUEyRixLQUExRjQyQixHQUFHQSxJQUFJLytCLFNBQVNKLGNBQWMsUUFBVXcvQixVQUFVLFFBQVFqM0IsRUFBRWszQixVQUFVeHdCLFdBQVcsU0FBYTFHLEVBQUU0MkIsR0FBR08sV0FBV3AzQixFQUFFbzNCLFlBQVlwM0IsRUFBRThhLFlBQVk5YSxFQUFFbzNCLFlBQVksS0FBS24zQixFQUFFbTNCLFlBQVlwM0IsRUFBRTJhLFlBQVkxYSxFQUFFbTNCLGdCQUNqYixTQUFTQyxHQUFHcjNCLEVBQUVDLEdBQUcsR0FBR0EsRUFBRSxDQUFDLElBQUlwTixFQUFFbU4sRUFBRW8zQixXQUFXLEdBQUd2a0MsR0FBR0EsSUFBSW1OLEVBQUVzM0IsV0FBVyxJQUFJemtDLEVBQUUwa0MsU0FBd0IsWUFBZDFrQyxFQUFFMmtDLFVBQVV2M0IsR0FBVUQsRUFBRXkyQixZQUFZeDJCLEVBQ3JILElBQUl3M0IsR0FBRyxDQUFDQyx5QkFBd0IsRUFBR0MsbUJBQWtCLEVBQUdDLGtCQUFpQixFQUFHQyxrQkFBaUIsRUFBR0MsU0FBUSxFQUFHQyxjQUFhLEVBQUdDLGlCQUFnQixFQUFHbFksYUFBWSxFQUFHbVksU0FBUSxFQUFHQyxNQUFLLEVBQUdDLFVBQVMsRUFBR0MsY0FBYSxFQUFHQyxZQUFXLEVBQUdDLGNBQWEsRUFBR0MsV0FBVSxFQUFHQyxVQUFTLEVBQUdDLFNBQVEsRUFBR0MsWUFBVyxFQUFHQyxhQUFZLEVBQUdDLGNBQWEsRUFBR0MsWUFBVyxFQUFHQyxlQUFjLEVBQUdDLGdCQUFlLEVBQUdDLGlCQUFnQixFQUFHQyxZQUFXLEVBQUdDLFdBQVUsRUFBR0MsWUFBVyxFQUFHQyxTQUFRLEVBQUdDLE9BQU0sRUFBR0MsU0FBUSxFQUFHQyxTQUFRLEVBQUdDLFFBQU8sRUFBR0MsUUFBTyxFQUFHQyxNQUFLLEVBQUdDLGFBQVksRUFDMWZDLGNBQWEsRUFBR0MsYUFBWSxFQUFHQyxpQkFBZ0IsRUFBR0Msa0JBQWlCLEVBQUdDLGtCQUFpQixFQUFHQyxlQUFjLEVBQUdDLGFBQVksR0FBSUMsR0FBRyxDQUFDLFNBQVMsS0FBSyxNQUFNLEtBQTZILFNBQVNDLEdBQUdwNkIsRUFBRUMsRUFBRXBOLEdBQUcsT0FBTyxNQUFNb04sR0FBRyxrQkFBbUJBLEdBQUcsS0FBS0EsRUFBRSxHQUFHcE4sR0FBRyxpQkFBa0JvTixHQUFHLElBQUlBLEdBQUd3M0IsR0FBR3BqQyxlQUFlMkwsSUFBSXkzQixHQUFHejNCLElBQUksR0FBR0MsR0FBR3l6QixPQUFPenpCLEVBQUUsS0FDOVosU0FBU282QixHQUFHcjZCLEVBQUVDLEdBQWEsSUFBSSxJQUFJcE4sS0FBbEJtTixFQUFFQSxFQUFFc1csTUFBbUJyVyxFQUFFLEdBQUdBLEVBQUU1TCxlQUFleEIsR0FBRyxDQUFDLElBQUlDLEVBQUUsSUFBSUQsRUFBRXVDLFFBQVEsTUFBTXdFLEVBQUV3Z0MsR0FBR3ZuQyxFQUFFb04sRUFBRXBOLEdBQUdDLEdBQUcsVUFBVUQsSUFBSUEsRUFBRSxZQUFZQyxFQUFFa04sRUFBRXM2QixZQUFZem5DLEVBQUUrRyxHQUFHb0csRUFBRW5OLEdBQUcrRyxHQURUMUcsT0FBT2lDLEtBQUtzaUMsSUFBSXp1QixTQUFRLFNBQVNoSixHQUFHbTZCLEdBQUdueEIsU0FBUSxTQUFTL0ksR0FBR0EsRUFBRUEsRUFBRUQsRUFBRXU2QixPQUFPLEdBQUc5SSxjQUFjenhCLEVBQUVzRSxVQUFVLEdBQUdtekIsR0FBR3gzQixHQUFHdzNCLEdBQUd6M0IsU0FDckcsSUFBSXc2QixHQUFHNW5DLEVBQUUsQ0FBQzZuQyxVQUFTLEdBQUksQ0FBQ0MsTUFBSyxFQUFHQyxNQUFLLEVBQUdDLElBQUcsRUFBR0MsS0FBSSxFQUFHQyxPQUFNLEVBQUdDLElBQUcsRUFBR0MsS0FBSSxFQUFHQyxPQUFNLEVBQUdDLFFBQU8sRUFBR0MsTUFBSyxFQUFHQyxNQUFLLEVBQUdDLE9BQU0sRUFBR3htQyxRQUFPLEVBQUd5bUMsT0FBTSxFQUFHQyxLQUFJLElBQ2xULFNBQVNDLEdBQUd4N0IsRUFBRUMsR0FBRyxHQUFHQSxFQUFFLENBQUMsR0FBR3U2QixHQUFHeDZCLEtBQUssTUFBTUMsRUFBRTdJLFVBQVUsTUFBTTZJLEVBQUVvMkIseUJBQXlCLE1BQU12MkIsTUFBTWxELEVBQUUsSUFBSW9ELElBQUksR0FBRyxNQUFNQyxFQUFFbzJCLHdCQUF3QixDQUFDLEdBQUcsTUFBTXAyQixFQUFFN0ksU0FBUyxNQUFNMEksTUFBTWxELEVBQUUsS0FBSyxHQUFLLGlCQUFrQnFELEVBQUVvMkIsMkJBQXlCLFdBQVdwMkIsRUFBRW8yQix5QkFBeUIsTUFBTXYyQixNQUFNbEQsRUFBRSxLQUFNLEdBQUcsTUFBTXFELEVBQUVxVyxPQUFPLGlCQUFrQnJXLEVBQUVxVyxNQUFNLE1BQU14VyxNQUFNbEQsRUFBRSxNQUM1VixTQUFTNitCLEdBQUd6N0IsRUFBRUMsR0FBRyxJQUFJLElBQUlELEVBQUU1SyxRQUFRLEtBQUssTUFBTSxpQkFBa0I2SyxFQUFFdkQsR0FBRyxPQUFPc0QsR0FBRyxJQUFLLGlCQUFpQixJQUFLLGdCQUFnQixJQUFLLFlBQVksSUFBSyxnQkFBZ0IsSUFBSyxnQkFBZ0IsSUFBSyxtQkFBbUIsSUFBSyxpQkFBaUIsSUFBSyxnQkFBZ0IsT0FBTSxFQUFHLFFBQVEsT0FBTSxHQUFJLFNBQVMwN0IsR0FBRzE3QixHQUE2RixPQUExRkEsRUFBRUEsRUFBRXRMLFFBQVFzTCxFQUFFMjdCLFlBQVk5akMsUUFBUytqQywwQkFBMEI1N0IsRUFBRUEsRUFBRTQ3Qix5QkFBZ0MsSUFBSTU3QixFQUFFdTNCLFNBQVN2M0IsRUFBRTY3QixXQUFXNzdCLEVBQUUsSUFBSTg3QixHQUFHLEtBQUtDLEdBQUcsS0FBS0MsR0FBRyxLQUN4YixTQUFTQyxHQUFHajhCLEdBQUcsR0FBR0EsRUFBRWs4QixHQUFHbDhCLEdBQUcsQ0FBQyxHQUFHLG1CQUFvQjg3QixHQUFHLE1BQU1oOEIsTUFBTWxELEVBQUUsTUFBTSxJQUFJcUQsRUFBRUQsRUFBRW04QixVQUFVbDhCLElBQUlBLEVBQUVtOEIsR0FBR244QixHQUFHNjdCLEdBQUc5N0IsRUFBRW04QixVQUFVbjhCLEVBQUVuRyxLQUFLb0csS0FBSyxTQUFTbzhCLEdBQUdyOEIsR0FBRys3QixHQUFHQyxHQUFHQSxHQUFHOWxDLEtBQUs4SixHQUFHZzhCLEdBQUcsQ0FBQ2g4QixHQUFHKzdCLEdBQUcvN0IsRUFBRSxTQUFTczhCLEtBQUssR0FBR1AsR0FBRyxDQUFDLElBQUkvN0IsRUFBRSs3QixHQUFHOTdCLEVBQUUrN0IsR0FBb0IsR0FBakJBLEdBQUdELEdBQUcsS0FBS0UsR0FBR2o4QixHQUFNQyxFQUFFLElBQUlELEVBQUUsRUFBRUEsRUFBRUMsRUFBRXJMLE9BQU9vTCxJQUFJaThCLEdBQUdoOEIsRUFBRUQsS0FBSyxTQUFTdThCLEdBQUd2OEIsRUFBRUMsR0FBRyxPQUFPRCxFQUFFQyxHQUFHLFNBQVN1OEIsR0FBR3g4QixFQUFFQyxFQUFFcE4sRUFBRUMsRUFBRThHLEdBQUcsT0FBT29HLEVBQUVDLEVBQUVwTixFQUFFQyxFQUFFOEcsR0FBRyxTQUFTNmlDLE1BQU0sSUFBSUMsR0FBR0gsR0FBR0ksSUFBRyxFQUFHQyxJQUFHLEVBQUcsU0FBU0MsS0FBUSxPQUFPZCxJQUFJLE9BQU9DLEtBQUdTLEtBQUtILE1BRTlaLFNBQVNRLEdBQUc5OEIsRUFBRUMsR0FBRyxJQUFJcE4sRUFBRW1OLEVBQUVtOEIsVUFBVSxHQUFHLE9BQU90cEMsRUFBRSxPQUFPLEtBQUssSUFBSUMsRUFBRXNwQyxHQUFHdnBDLEdBQUcsR0FBRyxPQUFPQyxFQUFFLE9BQU8sS0FBS0QsRUFBRUMsRUFBRW1OLEdBQUdELEVBQUUsT0FBT0MsR0FBRyxJQUFLLFVBQVUsSUFBSyxpQkFBaUIsSUFBSyxnQkFBZ0IsSUFBSyx1QkFBdUIsSUFBSyxjQUFjLElBQUsscUJBQXFCLElBQUssY0FBYyxJQUFLLHFCQUFxQixJQUFLLFlBQVksSUFBSyxtQkFBbUIsSUFBSyxnQkFBZ0JuTixHQUFHQSxFQUFFcWpDLFlBQXFCcmpDLElBQUksWUFBYmtOLEVBQUVBLEVBQUVuRyxPQUF1QixVQUFVbUcsR0FBRyxXQUFXQSxHQUFHLGFBQWFBLElBQUlBLEdBQUdsTixFQUFFLE1BQU1rTixFQUFFLFFBQVFBLEdBQUUsRUFBRyxHQUFHQSxFQUFFLE9BQU8sS0FBSyxHQUFHbk4sR0FBRyxtQkFDbGVBLEVBQUUsTUFBTWlOLE1BQU1sRCxFQUFFLElBQUlxRCxTQUFTcE4sSUFBSSxPQUFPQSxFQUFFLElBQUlrcUMsSUFBRyxFQUFHLEdBQUdyTSxFQUFHLElBQUksSUFBSXNNLEdBQUcsR0FBRzlwQyxPQUFPQyxlQUFlNnBDLEdBQUcsVUFBVSxDQUFDM3BDLElBQUksV0FBVzBwQyxJQUFHLEtBQU1sbEMsT0FBT21YLGlCQUFpQixPQUFPZ3VCLEdBQUdBLElBQUlubEMsT0FBTzhhLG9CQUFvQixPQUFPcXFCLEdBQUdBLElBQUksTUFBTWg5QixHQUFHKzhCLElBQUcsRUFBRyxTQUFTRSxHQUFHajlCLEVBQUVDLEVBQUVwTixFQUFFQyxFQUFFOEcsRUFBRXN6QixFQUFFRCxFQUFFRCxFQUFFdnBCLEdBQUcsSUFBSWhSLEVBQUVpUyxNQUFNdFEsVUFBVTJULE1BQU1wVixLQUFLZ0MsVUFBVSxHQUFHLElBQUlzTCxFQUFFbkwsTUFBTWpDLEVBQUVKLEdBQUcsTUFBTXdCLEdBQUdjLEtBQUttb0MsUUFBUWpwQyxJQUFJLElBQUlrcEMsSUFBRyxFQUFHQyxHQUFHLEtBQUtDLElBQUcsRUFBR0MsR0FBRyxLQUFLQyxHQUFHLENBQUNMLFFBQVEsU0FBU2w5QixHQUFHbTlCLElBQUcsRUFBR0MsR0FBR3A5QixJQUFJLFNBQVN3OUIsR0FBR3g5QixFQUFFQyxFQUFFcE4sRUFBRUMsRUFBRThHLEVBQUVzekIsRUFBRUQsRUFBRUQsRUFBRXZwQixHQUFHMDVCLElBQUcsRUFBR0MsR0FBRyxLQUFLSCxHQUFHbm9DLE1BQU15b0MsR0FBRzVvQyxXQUN2VixTQUFTOG9DLEdBQUd6OUIsR0FBRyxJQUFJQyxFQUFFRCxFQUFFbk4sRUFBRW1OLEVBQUUsR0FBR0EsRUFBRTA5QixVQUFVLEtBQUt6OUIsRUFBRTA5QixRQUFRMTlCLEVBQUVBLEVBQUUwOUIsV0FBVyxDQUFDMzlCLEVBQUVDLEVBQUUsR0FBTyxJQUFhLE1BQWpCQSxFQUFFRCxHQUFTNDlCLFNBQWMvcUMsRUFBRW9OLEVBQUUwOUIsUUFBUTM5QixFQUFFQyxFQUFFMDlCLGFBQWEzOUIsR0FBRyxPQUFPLElBQUlDLEVBQUVnMEIsSUFBSXBoQyxFQUFFLEtBQUssU0FBU2dyQyxHQUFHNzlCLEdBQUcsR0FBRyxLQUFLQSxFQUFFaTBCLElBQUksQ0FBQyxJQUFJaDBCLEVBQUVELEVBQUU4OUIsY0FBc0UsR0FBeEQsT0FBTzc5QixJQUFrQixRQUFkRCxFQUFFQSxFQUFFMDlCLGFBQXFCejlCLEVBQUVELEVBQUU4OUIsZ0JBQW1CLE9BQU83OUIsRUFBRSxPQUFPQSxFQUFFODlCLFdBQVcsT0FBTyxLQUFLLFNBQVNDLEdBQUdoK0IsR0FBRyxHQUFHeTlCLEdBQUd6OUIsS0FBS0EsRUFBRSxNQUFNRixNQUFNbEQsRUFBRSxNQUVwUyxTQUFTcWhDLEdBQUdqK0IsR0FBVyxLQUFSQSxFQUR0TixTQUFZQSxHQUFHLElBQUlDLEVBQUVELEVBQUUwOUIsVUFBVSxJQUFJejlCLEVBQUUsQ0FBUyxHQUFHLFFBQVhBLEVBQUV3OUIsR0FBR3o5QixJQUFlLE1BQU1GLE1BQU1sRCxFQUFFLE1BQU0sT0FBT3FELElBQUlELEVBQUUsS0FBS0EsRUFBRSxJQUFJLElBQUluTixFQUFFbU4sRUFBRWxOLEVBQUVtTixJQUFJLENBQUMsSUFBSXJHLEVBQUUvRyxFQUFFOHFDLE9BQU8sR0FBRyxPQUFPL2pDLEVBQUUsTUFBTSxJQUFJc3pCLEVBQUV0ekIsRUFBRThqQyxVQUFVLEdBQUcsT0FBT3hRLEVBQUUsQ0FBWSxHQUFHLFFBQWRwNkIsRUFBRThHLEVBQUUrakMsUUFBbUIsQ0FBQzlxQyxFQUFFQyxFQUFFLFNBQVMsTUFBTSxHQUFHOEcsRUFBRXNrQyxRQUFRaFIsRUFBRWdSLE1BQU0sQ0FBQyxJQUFJaFIsRUFBRXR6QixFQUFFc2tDLE1BQU1oUixHQUFHLENBQUMsR0FBR0EsSUFBSXI2QixFQUFFLE9BQU9tckMsR0FBR3BrQyxHQUFHb0csRUFBRSxHQUFHa3RCLElBQUlwNkIsRUFBRSxPQUFPa3JDLEdBQUdwa0MsR0FBR3FHLEVBQUVpdEIsRUFBRUEsRUFBRWlSLFFBQVEsTUFBTXIrQixNQUFNbEQsRUFBRSxNQUFPLEdBQUcvSixFQUFFOHFDLFNBQVM3cUMsRUFBRTZxQyxPQUFPOXFDLEVBQUUrRyxFQUFFOUcsRUFBRW82QixNQUFNLENBQUMsSUFBSSxJQUFJRCxHQUFFLEVBQUdELEVBQUVwekIsRUFBRXNrQyxNQUFNbFIsR0FBRyxDQUFDLEdBQUdBLElBQUluNkIsRUFBRSxDQUFDbzZCLEdBQUUsRUFBR3A2QixFQUFFK0csRUFBRTlHLEVBQUVvNkIsRUFBRSxNQUFNLEdBQUdGLElBQUlsNkIsRUFBRSxDQUFDbTZCLEdBQUUsRUFBR242QixFQUFFOEcsRUFBRS9HLEVBQUVxNkIsRUFBRSxNQUFNRixFQUFFQSxFQUFFbVIsUUFBUSxJQUFJbFIsRUFBRSxDQUFDLElBQUlELEVBQUVFLEVBQUVnUixNQUFNbFIsR0FBRyxDQUFDLEdBQUdBLElBQzVmbjZCLEVBQUUsQ0FBQ282QixHQUFFLEVBQUdwNkIsRUFBRXE2QixFQUFFcDZCLEVBQUU4RyxFQUFFLE1BQU0sR0FBR296QixJQUFJbDZCLEVBQUUsQ0FBQ202QixHQUFFLEVBQUduNkIsRUFBRW82QixFQUFFcjZCLEVBQUUrRyxFQUFFLE1BQU1vekIsRUFBRUEsRUFBRW1SLFFBQVEsSUFBSWxSLEVBQUUsTUFBTW50QixNQUFNbEQsRUFBRSxPQUFRLEdBQUcvSixFQUFFNnFDLFlBQVk1cUMsRUFBRSxNQUFNZ04sTUFBTWxELEVBQUUsTUFBTyxHQUFHLElBQUkvSixFQUFFb2hDLElBQUksTUFBTW4wQixNQUFNbEQsRUFBRSxNQUFNLE9BQU8vSixFQUFFc3BDLFVBQVVsakMsVUFBVXBHLEVBQUVtTixFQUFFQyxFQUFtQm0rQixDQUFHcCtCLElBQVMsT0FBTyxLQUFLLElBQUksSUFBSUMsRUFBRUQsSUFBSSxDQUFDLEdBQUcsSUFBSUMsRUFBRWcwQixLQUFLLElBQUloMEIsRUFBRWcwQixJQUFJLE9BQU9oMEIsRUFBRSxHQUFHQSxFQUFFaStCLE1BQU1qK0IsRUFBRWkrQixNQUFNUCxPQUFPMTlCLEVBQUVBLEVBQUVBLEVBQUVpK0IsVUFBVSxDQUFDLEdBQUdqK0IsSUFBSUQsRUFBRSxNQUFNLE1BQU1DLEVBQUVrK0IsU0FBUyxDQUFDLElBQUlsK0IsRUFBRTA5QixRQUFRMTlCLEVBQUUwOUIsU0FBUzM5QixFQUFFLE9BQU8sS0FBS0MsRUFBRUEsRUFBRTA5QixPQUFPMTlCLEVBQUVrK0IsUUFBUVIsT0FBTzE5QixFQUFFMDlCLE9BQU8xOUIsRUFBRUEsRUFBRWsrQixTQUFTLE9BQU8sS0FDNWMsU0FBU0UsR0FBR3IrQixFQUFFQyxHQUFHLElBQUksSUFBSXBOLEVBQUVtTixFQUFFMDlCLFVBQVUsT0FBT3o5QixHQUFHLENBQUMsR0FBR0EsSUFBSUQsR0FBR0MsSUFBSXBOLEVBQUUsT0FBTSxFQUFHb04sRUFBRUEsRUFBRTA5QixPQUFPLE9BQU0sRUFBRyxJQUFJVyxHQUFHQyxHQUFHQyxHQUFHQyxHQUFHQyxJQUFHLEVBQUdDLEdBQUcsR0FBR0MsR0FBRyxLQUFLQyxHQUFHLEtBQUtDLEdBQUcsS0FBS0MsR0FBRyxJQUFJdnRCLElBQUl3dEIsR0FBRyxJQUFJeHRCLElBQUl5dEIsR0FBRyxHQUFHQyxHQUFHLDZQQUE2UHQ0QixNQUFNLEtBQ3JiLFNBQVN1NEIsR0FBR24vQixFQUFFQyxFQUFFcE4sRUFBRUMsRUFBRThHLEdBQUcsTUFBTSxDQUFDd2xDLFVBQVVwL0IsRUFBRXEvQixhQUFhcC9CLEVBQUVxL0IsaUJBQW1CLEdBQUZ6c0MsRUFBSzBzQyxZQUFZM2xDLEVBQUU0bEMsaUJBQWlCLENBQUMxc0MsSUFBSSxTQUFTMnNDLEdBQUd6L0IsRUFBRUMsR0FBRyxPQUFPRCxHQUFHLElBQUssVUFBVSxJQUFLLFdBQVc0K0IsR0FBRyxLQUFLLE1BQU0sSUFBSyxZQUFZLElBQUssWUFBWUMsR0FBRyxLQUFLLE1BQU0sSUFBSyxZQUFZLElBQUssV0FBV0MsR0FBRyxLQUFLLE1BQU0sSUFBSyxjQUFjLElBQUssYUFBYUMsR0FBR1csT0FBT3ovQixFQUFFMC9CLFdBQVcsTUFBTSxJQUFLLG9CQUFvQixJQUFLLHFCQUFxQlgsR0FBR1UsT0FBT3ovQixFQUFFMC9CLFlBQzNaLFNBQVNDLEdBQUc1L0IsRUFBRUMsRUFBRXBOLEVBQUVDLEVBQUU4RyxFQUFFc3pCLEdBQUcsT0FBRyxPQUFPbHRCLEdBQUdBLEVBQUV1L0IsY0FBY3JTLEdBQVNsdEIsRUFBRW0vQixHQUFHbC9CLEVBQUVwTixFQUFFQyxFQUFFOEcsRUFBRXN6QixHQUFHLE9BQU9qdEIsSUFBWSxRQUFSQSxFQUFFaThCLEdBQUdqOEIsS0FBYXMrQixHQUFHdCtCLElBQUlELElBQUVBLEVBQUVzL0Isa0JBQWtCeHNDLEVBQUVtTixFQUFFRCxFQUFFdy9CLGlCQUFpQixPQUFPNWxDLElBQUksSUFBSXFHLEVBQUU3SyxRQUFRd0UsSUFBSXFHLEVBQUUvSixLQUFLMEQsR0FBVW9HLEdBRTlNLFNBQVM2L0IsR0FBRzcvQixHQUFHLElBQUlDLEVBQUU2L0IsR0FBRzkvQixFQUFFdEwsUUFBUSxHQUFHLE9BQU91TCxFQUFFLENBQUMsSUFBSXBOLEVBQUU0cUMsR0FBR3g5QixHQUFHLEdBQUcsT0FBT3BOLEVBQUUsR0FBVyxNQUFSb04sRUFBRXBOLEVBQUVvaEMsTUFBWSxHQUFXLFFBQVJoMEIsRUFBRTQ5QixHQUFHaHJDLElBQW1ILE9BQXRHbU4sRUFBRW8vQixVQUFVbi9CLE9BQUV3K0IsR0FBR3orQixFQUFFKy9CLGNBQWEsV0FBV3pzQyxFQUFFMHNDLHlCQUF5QmhnQyxFQUFFaWdDLFVBQVMsV0FBV3pCLEdBQUczckMsY0FBb0IsR0FBRyxJQUFJb04sR0FBR3BOLEVBQUVzcEMsVUFBVStELFFBQThELFlBQXJEbGdDLEVBQUVvL0IsVUFBVSxJQUFJdnNDLEVBQUVvaEMsSUFBSXBoQyxFQUFFc3BDLFVBQVVnRSxjQUFjLE1BQWFuZ0MsRUFBRW8vQixVQUFVLEtBQzFVLFNBQVNnQixHQUFHcGdDLEdBQUcsR0FBRyxPQUFPQSxFQUFFby9CLFVBQVUsT0FBTSxFQUFHLElBQUksSUFBSW4vQixFQUFFRCxFQUFFdy9CLGlCQUFpQixFQUFFdi9CLEVBQUVyTCxRQUFRLENBQUMsSUFBSS9CLEVBQUV3dEMsR0FBR3JnQyxFQUFFcS9CLGFBQWFyL0IsRUFBRXMvQixpQkFBaUJyL0IsRUFBRSxHQUFHRCxFQUFFdS9CLGFBQWEsR0FBRyxPQUFPMXNDLEVBQUUsT0FBZSxRQUFSb04sRUFBRWk4QixHQUFHcnBDLEtBQWEwckMsR0FBR3QrQixHQUFHRCxFQUFFby9CLFVBQVV2c0MsR0FBRSxFQUFHb04sRUFBRXFnQyxRQUFRLE9BQU0sRUFBRyxTQUFTQyxHQUFHdmdDLEVBQUVDLEVBQUVwTixHQUFHdXRDLEdBQUdwZ0MsSUFBSW5OLEVBQUU2c0MsT0FBT3ovQixHQUN6USxTQUFTdWdDLEtBQUssSUFBSTlCLElBQUcsRUFBRyxFQUFFQyxHQUFHL3BDLFFBQVEsQ0FBQyxJQUFJb0wsRUFBRTIrQixHQUFHLEdBQUcsR0FBRyxPQUFPMytCLEVBQUVvL0IsVUFBVSxDQUFtQixRQUFsQnAvQixFQUFFazhCLEdBQUdsOEIsRUFBRW8vQixhQUFxQmQsR0FBR3QrQixHQUFHLE1BQU0sSUFBSSxJQUFJQyxFQUFFRCxFQUFFdy9CLGlCQUFpQixFQUFFdi9CLEVBQUVyTCxRQUFRLENBQUMsSUFBSS9CLEVBQUV3dEMsR0FBR3JnQyxFQUFFcS9CLGFBQWFyL0IsRUFBRXMvQixpQkFBaUJyL0IsRUFBRSxHQUFHRCxFQUFFdS9CLGFBQWEsR0FBRyxPQUFPMXNDLEVBQUUsQ0FBQ21OLEVBQUVvL0IsVUFBVXZzQyxFQUFFLE1BQU1vTixFQUFFcWdDLFFBQVEsT0FBT3RnQyxFQUFFby9CLFdBQVdULEdBQUcyQixRQUFRLE9BQU8xQixJQUFJd0IsR0FBR3hCLE1BQU1BLEdBQUcsTUFBTSxPQUFPQyxJQUFJdUIsR0FBR3ZCLE1BQU1BLEdBQUcsTUFBTSxPQUFPQyxJQUFJc0IsR0FBR3RCLE1BQU1BLEdBQUcsTUFBTUMsR0FBRy8xQixRQUFRdTNCLElBQUl2QixHQUFHaDJCLFFBQVF1M0IsSUFDclosU0FBU0UsR0FBR3pnQyxFQUFFQyxHQUFHRCxFQUFFby9CLFlBQVluL0IsSUFBSUQsRUFBRW8vQixVQUFVLEtBQUtWLEtBQUtBLElBQUcsRUFBR3ByQyxFQUFFb3RDLDBCQUEwQnB0QyxFQUFFcXRDLHdCQUF3QkgsTUFDckgsU0FBU0ksR0FBRzVnQyxHQUFHLFNBQVNDLEVBQUVBLEdBQUcsT0FBT3dnQyxHQUFHeGdDLEVBQUVELEdBQUcsR0FBRyxFQUFFMitCLEdBQUcvcEMsT0FBTyxDQUFDNnJDLEdBQUc5QixHQUFHLEdBQUczK0IsR0FBRyxJQUFJLElBQUluTixFQUFFLEVBQUVBLEVBQUU4ckMsR0FBRy9wQyxPQUFPL0IsSUFBSSxDQUFDLElBQUlDLEVBQUU2ckMsR0FBRzlyQyxHQUFHQyxFQUFFc3NDLFlBQVlwL0IsSUFBSWxOLEVBQUVzc0MsVUFBVSxPQUErRixJQUF4RixPQUFPUixJQUFJNkIsR0FBRzdCLEdBQUc1K0IsR0FBRyxPQUFPNitCLElBQUk0QixHQUFHNUIsR0FBRzcrQixHQUFHLE9BQU84K0IsSUFBSTJCLEdBQUczQixHQUFHOStCLEdBQUcrK0IsR0FBRy8xQixRQUFRL0ksR0FBRysrQixHQUFHaDJCLFFBQVEvSSxHQUFPcE4sRUFBRSxFQUFFQSxFQUFFb3NDLEdBQUdycUMsT0FBTy9CLEtBQUlDLEVBQUVtc0MsR0FBR3BzQyxJQUFLdXNDLFlBQVlwL0IsSUFBSWxOLEVBQUVzc0MsVUFBVSxNQUFNLEtBQUssRUFBRUgsR0FBR3JxQyxRQUFpQixRQUFSL0IsRUFBRW9zQyxHQUFHLElBQVlHLFdBQVlTLEdBQUdodEMsR0FBRyxPQUFPQSxFQUFFdXNDLFdBQVdILEdBQUdxQixRQUMvWCxTQUFTTyxHQUFHN2dDLEVBQUVDLEdBQUcsSUFBSXBOLEVBQUUsR0FBa0YsT0FBL0VBLEVBQUVtTixFQUFFc3hCLGVBQWVyeEIsRUFBRXF4QixjQUFjeitCLEVBQUUsU0FBU21OLEdBQUcsU0FBU0MsRUFBRXBOLEVBQUUsTUFBTW1OLEdBQUcsTUFBTUMsRUFBU3BOLEVBQUUsSUFBSWl1QyxHQUFHLENBQUNDLGFBQWFGLEdBQUcsWUFBWSxnQkFBZ0JHLG1CQUFtQkgsR0FBRyxZQUFZLHNCQUFzQkksZUFBZUosR0FBRyxZQUFZLGtCQUFrQkssY0FBY0wsR0FBRyxhQUFhLGtCQUFrQk0sR0FBRyxHQUFHQyxHQUFHLEdBQ25GLFNBQVNDLEdBQUdyaEMsR0FBRyxHQUFHbWhDLEdBQUduaEMsR0FBRyxPQUFPbWhDLEdBQUduaEMsR0FBRyxJQUFJOGdDLEdBQUc5Z0MsR0FBRyxPQUFPQSxFQUFFLElBQVluTixFQUFSb04sRUFBRTZnQyxHQUFHOWdDLEdBQUssSUFBSW5OLEtBQUtvTixFQUFFLEdBQUdBLEVBQUU1TCxlQUFleEIsSUFBSUEsS0FBS3V1QyxHQUFHLE9BQU9ELEdBQUduaEMsR0FBR0MsRUFBRXBOLEdBQUcsT0FBT21OLEVBQTlYMHdCLElBQUswUSxHQUFHdHBDLFNBQVNKLGNBQWMsT0FBTzRlLE1BQU0sbUJBQW1CemUsZ0JBQWdCaXBDLEdBQUdDLGFBQWFPLGlCQUFpQlIsR0FBR0UsbUJBQW1CTSxpQkFBaUJSLEdBQUdHLGVBQWVLLFdBQVcsb0JBQW9CenBDLGVBQWVpcEMsR0FBR0ksY0FBYzNTLFlBQ3hPLElBQUlnVCxHQUFHRixHQUFHLGdCQUFnQkcsR0FBR0gsR0FBRyxzQkFBc0JJLEdBQUdKLEdBQUcsa0JBQWtCSyxHQUFHTCxHQUFHLGlCQUFpQk0sR0FBRyxJQUFJbndCLElBQUlvd0IsR0FBRyxJQUFJcHdCLElBQUlxd0IsR0FBRyxDQUFDLFFBQVEsUUFBUU4sR0FBRyxlQUFlQyxHQUFHLHFCQUFxQkMsR0FBRyxpQkFBaUIsVUFBVSxVQUFVLGlCQUFpQixpQkFBaUIsaUJBQWlCLGlCQUFpQixVQUFVLFVBQVUsWUFBWSxZQUFZLFFBQVEsUUFBUSxRQUFRLFFBQVEsb0JBQW9CLG9CQUFvQixPQUFPLE9BQU8sYUFBYSxhQUFhLGlCQUFpQixpQkFBaUIsWUFBWSxZQUMvZSxxQkFBcUIscUJBQXFCLFVBQVUsVUFBVSxXQUFXLFdBQVcsVUFBVSxVQUFVLFVBQVUsVUFBVSxVQUFVLFVBQVUsYUFBYSxhQUFhQyxHQUFHLGdCQUFnQixVQUFVLFdBQVcsU0FBU0ksR0FBRzloQyxFQUFFQyxHQUFHLElBQUksSUFBSXBOLEVBQUUsRUFBRUEsRUFBRW1OLEVBQUVwTCxPQUFPL0IsR0FBRyxFQUFFLENBQUMsSUFBSUMsRUFBRWtOLEVBQUVuTixHQUFHK0csRUFBRW9HLEVBQUVuTixFQUFFLEdBQUcrRyxFQUFFLE1BQU1BLEVBQUUsR0FBRzYzQixjQUFjNzNCLEVBQUVtTyxNQUFNLElBQUk2NUIsR0FBRy91QixJQUFJL2YsRUFBRW1OLEdBQUcwaEMsR0FBRzl1QixJQUFJL2YsRUFBRThHLEdBQUcyMkIsRUFBRzMyQixFQUFFLENBQUM5RyxNQUEyQml2QyxFQUFmenVDLEVBQUUwdUMsZ0JBQWtCLElBQUl4VixHQUFFLEVBQy9YLFNBQVN5VixHQUFHamlDLEdBQUcsR0FBRyxJQUFLLEVBQUVBLEdBQUcsT0FBT3dzQixHQUFFLEdBQUcsRUFBRSxHQUFHLElBQUssRUFBRXhzQixHQUFHLE9BQU93c0IsR0FBRSxHQUFHLEVBQUUsR0FBRyxJQUFLLEVBQUV4c0IsR0FBRyxPQUFPd3NCLEdBQUUsR0FBRyxFQUFFLElBQUl2c0IsRUFBRSxHQUFHRCxFQUFFLE9BQUcsSUFBSUMsR0FBU3VzQixHQUFFLEdBQUd2c0IsR0FBSyxJQUFPLEdBQUZELElBQWF3c0IsR0FBRSxHQUFHLElBQWMsS0FBWHZzQixFQUFFLElBQUlELElBQWtCd3NCLEdBQUUsR0FBR3ZzQixHQUFLLElBQU8sSUFBRkQsSUFBY3dzQixHQUFFLEVBQUUsS0FBZ0IsS0FBWnZzQixFQUFFLEtBQUtELElBQWtCd3NCLEdBQUUsRUFBRXZzQixHQUFLLElBQU8sS0FBRkQsSUFBZXdzQixHQUFFLEVBQUUsTUFBb0IsS0FBZnZzQixFQUFFLFFBQVFELElBQWtCd3NCLEdBQUUsRUFBRXZzQixHQUFrQixLQUFoQkEsRUFBRSxTQUFTRCxJQUFrQndzQixHQUFFLEVBQUV2c0IsR0FBTyxTQUFGRCxHQUFrQndzQixHQUFFLEVBQUUsVUFBWSxJQUFPLFVBQUZ4c0IsSUFBb0J3c0IsR0FBRSxFQUFFLFdBQTJCLEtBQWpCdnNCLEVBQUUsVUFBVUQsSUFBa0J3c0IsR0FBRSxFQUFFdnNCLEdBQUssSUFBSyxXQUFXRCxJQUFVd3NCLEdBQUUsRUFBRSxhQUNqZkEsR0FBRSxFQUFTeHNCLEdBQ1gsU0FBU2tpQyxHQUFHbGlDLEVBQUVDLEdBQUcsSUFBSXBOLEVBQUVtTixFQUFFbWlDLGFBQWEsR0FBRyxJQUFJdHZDLEVBQUUsT0FBTzI1QixHQUFFLEVBQUUsSUFBSTE1QixFQUFFLEVBQUU4RyxFQUFFLEVBQUVzekIsRUFBRWx0QixFQUFFb2lDLGFBQWFuVixFQUFFanRCLEVBQUVxaUMsZUFBZXJWLEVBQUVodEIsRUFBRXNpQyxZQUFZLEdBQUcsSUFBSXBWLEVBQUVwNkIsRUFBRW82QixFQUFFdHpCLEVBQUU0eUIsR0FBRSxRQUFRLEdBQWlCLEtBQWRVLEVBQUksVUFBRnI2QixHQUFrQixDQUFDLElBQUk0USxFQUFFeXBCLEdBQUdELEVBQUUsSUFBSXhwQixHQUFHM1EsRUFBRW12QyxHQUFHeCtCLEdBQUc3SixFQUFFNHlCLElBQVMsS0FBTFEsR0FBR0UsS0FBVXA2QixFQUFFbXZDLEdBQUdqVixHQUFHcHpCLEVBQUU0eUIsU0FBZ0IsS0FBUFUsRUFBRXI2QixHQUFHbzZCLElBQVNuNkIsRUFBRW12QyxHQUFHL1UsR0FBR3R6QixFQUFFNHlCLElBQUcsSUFBSVEsSUFBSWw2QixFQUFFbXZDLEdBQUdqVixHQUFHcHpCLEVBQUU0eUIsSUFBRyxHQUFHLElBQUkxNUIsRUFBRSxPQUFPLEVBQXFDLEdBQXhCQSxFQUFFRCxJQUFJLEdBQWpCQyxFQUFFLEdBQUd5dkMsR0FBR3p2QyxJQUFhLEVBQUUsR0FBR0EsSUFBSSxHQUFHLEVBQUssSUFBSW1OLEdBQUdBLElBQUluTixHQUFHLElBQUttTixFQUFFZ3RCLEdBQUcsQ0FBTyxHQUFOZ1YsR0FBR2hpQyxHQUFNckcsR0FBRzR5QixHQUFFLE9BQU92c0IsRUFBRXVzQixHQUFFNXlCLEVBQXFCLEdBQUcsS0FBdEJxRyxFQUFFRCxFQUFFd2lDLGdCQUF3QixJQUFJeGlDLEVBQUVBLEVBQUV5aUMsY0FBY3hpQyxHQUFHbk4sRUFBRSxFQUFFbU4sR0FBY3JHLEVBQUUsSUFBYi9HLEVBQUUsR0FBRzB2QyxHQUFHdGlDLElBQVVuTixHQUFHa04sRUFBRW5OLEdBQUdvTixJQUFJckcsRUFBRSxPQUFPOUcsRUFDMWUsU0FBUzR2QyxHQUFHMWlDLEdBQWdDLE9BQU8sS0FBcENBLEdBQWtCLFdBQWhCQSxFQUFFbWlDLGNBQXNDbmlDLEVBQUksV0FBRkEsRUFBYSxXQUFXLEVBQUUsU0FBUzJpQyxHQUFHM2lDLEVBQUVDLEdBQUcsT0FBT0QsR0FBRyxLQUFLLEdBQUcsT0FBTyxFQUFFLEtBQUssR0FBRyxPQUFPLEVBQUUsS0FBSyxHQUFHLE9BQW1CLEtBQVpBLEVBQUU0aUMsR0FBRyxJQUFJM2lDLElBQVMwaUMsR0FBRyxHQUFHMWlDLEdBQUdELEVBQUUsS0FBSyxHQUFHLE9BQW9CLEtBQWJBLEVBQUU0aUMsR0FBRyxLQUFLM2lDLElBQVMwaUMsR0FBRyxFQUFFMWlDLEdBQUdELEVBQUUsS0FBSyxFQUFFLE9BQXFCLEtBQWRBLEVBQUU0aUMsR0FBRyxNQUFNM2lDLE1BQTRCLEtBQWpCRCxFQUFFNGlDLEdBQUcsU0FBUzNpQyxNQUFXRCxFQUFFLE1BQU1BLEVBQUUsS0FBSyxFQUFFLE9BQTBCLEtBQW5CQyxFQUFFMmlDLEdBQUcsV0FBVzNpQyxNQUFXQSxFQUFFLFdBQVdBLEVBQUUsTUFBTUgsTUFBTWxELEVBQUUsSUFBSW9ELElBQUssU0FBUzRpQyxHQUFHNWlDLEdBQUcsT0FBT0EsR0FBR0EsRUFBRSxTQUFTNmlDLEdBQUc3aUMsR0FBRyxJQUFJLElBQUlDLEVBQUUsR0FBR3BOLEVBQUUsRUFBRSxHQUFHQSxFQUFFQSxJQUFJb04sRUFBRS9KLEtBQUs4SixHQUFHLE9BQU9DLEVBQ3JkLFNBQVM2aUMsR0FBRzlpQyxFQUFFQyxFQUFFcE4sR0FBR21OLEVBQUVtaUMsY0FBY2xpQyxFQUFFLElBQUluTixFQUFFbU4sRUFBRSxFQUFFRCxFQUFFcWlDLGdCQUFnQnZ2QyxFQUFFa04sRUFBRXNpQyxhQUFheHZDLEdBQUVrTixFQUFFQSxFQUFFK2lDLFlBQVc5aUMsRUFBRSxHQUFHc2lDLEdBQUd0aUMsSUFBUXBOLEVBQUUsSUFBSTB2QyxHQUFHOTdCLEtBQUt1OEIsTUFBTXY4QixLQUFLdThCLE1BQWlDLFNBQVloakMsR0FBRyxPQUFPLElBQUlBLEVBQUUsR0FBRyxJQUFJaWpDLEdBQUdqakMsR0FBR2tqQyxHQUFHLEdBQUcsR0FBdkVELEdBQUd4OEIsS0FBSzA4QixJQUFJRCxHQUFHejhCLEtBQUsyOEIsSUFBcUQsSUFBSUMsR0FBRy92QyxFQUFFZ3dDLDhCQUE4QkMsR0FBR2p3QyxFQUFFMHNDLHlCQUF5QndELElBQUcsRUFBRyxTQUFTQyxHQUFHempDLEVBQUVDLEVBQUVwTixFQUFFQyxHQUFHNnBDLElBQUlGLEtBQUssSUFBSTdpQyxFQUFFOHBDLEdBQUd4VyxFQUFFeVAsR0FBR0EsSUFBRyxFQUFHLElBQUlILEdBQUc1aUMsRUFBRW9HLEVBQUVDLEVBQUVwTixFQUFFQyxHQUFHLFNBQVM2cEMsR0FBR3pQLElBQUkyUCxNQUFNLFNBQVNydEIsR0FBR3hQLEVBQUVDLEVBQUVwTixFQUFFQyxHQUFHeXdDLEdBQUdGLEdBQUdLLEdBQUcxdkMsS0FBSyxLQUFLZ00sRUFBRUMsRUFBRXBOLEVBQUVDLElBQ2piLFNBQVM0d0MsR0FBRzFqQyxFQUFFQyxFQUFFcE4sRUFBRUMsR0FBVSxJQUFJOEcsRUFBWCxHQUFHNHBDLEdBQVUsSUFBSTVwQyxFQUFFLElBQU8sRUFBRnFHLEtBQU8sRUFBRTArQixHQUFHL3BDLFNBQVMsRUFBRXNxQyxHQUFHOXBDLFFBQVE0SyxHQUFHQSxFQUFFbS9CLEdBQUcsS0FBS24vQixFQUFFQyxFQUFFcE4sRUFBRUMsR0FBRzZyQyxHQUFHem9DLEtBQUs4SixPQUFPLENBQUMsSUFBSWt0QixFQUFFbVQsR0FBR3JnQyxFQUFFQyxFQUFFcE4sRUFBRUMsR0FBRyxHQUFHLE9BQU9vNkIsRUFBRXR6QixHQUFHNmxDLEdBQUd6L0IsRUFBRWxOLE9BQU8sQ0FBQyxHQUFHOEcsRUFBRSxDQUFDLElBQUksRUFBRXNsQyxHQUFHOXBDLFFBQVE0SyxHQUErQixPQUEzQkEsRUFBRW0vQixHQUFHalMsRUFBRWx0QixFQUFFQyxFQUFFcE4sRUFBRUMsUUFBRzZyQyxHQUFHem9DLEtBQUs4SixHQUFVLEdBZmhPLFNBQVlBLEVBQUVDLEVBQUVwTixFQUFFQyxFQUFFOEcsR0FBRyxPQUFPcUcsR0FBRyxJQUFLLFVBQVUsT0FBTzIrQixHQUFHZ0IsR0FBR2hCLEdBQUc1K0IsRUFBRUMsRUFBRXBOLEVBQUVDLEVBQUU4RyxJQUFHLEVBQUcsSUFBSyxZQUFZLE9BQU9pbEMsR0FBR2UsR0FBR2YsR0FBRzcrQixFQUFFQyxFQUFFcE4sRUFBRUMsRUFBRThHLElBQUcsRUFBRyxJQUFLLFlBQVksT0FBT2tsQyxHQUFHYyxHQUFHZCxHQUFHOStCLEVBQUVDLEVBQUVwTixFQUFFQyxFQUFFOEcsSUFBRyxFQUFHLElBQUssY0FBYyxJQUFJc3pCLEVBQUV0ekIsRUFBRStsQyxVQUFrRCxPQUF4Q1osR0FBR2xzQixJQUFJcWEsRUFBRTBTLEdBQUdiLEdBQUcxckMsSUFBSTY1QixJQUFJLEtBQUtsdEIsRUFBRUMsRUFBRXBOLEVBQUVDLEVBQUU4RyxLQUFVLEVBQUcsSUFBSyxvQkFBb0IsT0FBT3N6QixFQUFFdHpCLEVBQUUrbEMsVUFBVVgsR0FBR25zQixJQUFJcWEsRUFBRTBTLEdBQUdaLEdBQUczckMsSUFBSTY1QixJQUFJLEtBQUtsdEIsRUFBRUMsRUFBRXBOLEVBQUVDLEVBQUU4RyxLQUFJLEVBQUcsT0FBTSxFQWU5SCtwQyxDQUFHelcsRUFBRWx0QixFQUFFQyxFQUFFcE4sRUFBRUMsR0FBRyxPQUFPMnNDLEdBQUd6L0IsRUFBRWxOLEdBQUc4d0MsR0FBRzVqQyxFQUFFQyxFQUFFbk4sRUFBRSxLQUFLRCxLQUM5USxTQUFTd3RDLEdBQUdyZ0MsRUFBRUMsRUFBRXBOLEVBQUVDLEdBQUcsSUFBSThHLEVBQUU4aEMsR0FBRzVvQyxHQUFXLEdBQUcsUUFBWDhHLEVBQUVrbUMsR0FBR2xtQyxJQUFlLENBQUMsSUFBSXN6QixFQUFFdVEsR0FBRzdqQyxHQUFHLEdBQUcsT0FBT3N6QixFQUFFdHpCLEVBQUUsU0FBUyxDQUFDLElBQUlxekIsRUFBRUMsRUFBRStHLElBQUksR0FBRyxLQUFLaEgsRUFBRSxDQUFTLEdBQUcsUUFBWHJ6QixFQUFFaWtDLEdBQUczUSxJQUFlLE9BQU90ekIsRUFBRUEsRUFBRSxVQUFVLEdBQUcsSUFBSXF6QixFQUFFLENBQUMsR0FBR0MsRUFBRWlQLFVBQVUrRCxRQUFRLE9BQU8sSUFBSWhULEVBQUUrRyxJQUFJL0csRUFBRWlQLFVBQVVnRSxjQUFjLEtBQUt2bUMsRUFBRSxVQUFVc3pCLElBQUl0ekIsSUFBSUEsRUFBRSxPQUFxQixPQUFkZ3FDLEdBQUc1akMsRUFBRUMsRUFBRW5OLEVBQUU4RyxFQUFFL0csR0FBVSxLQUFLLElBQUlneEMsR0FBRyxLQUFLQyxHQUFHLEtBQUtDLEdBQUcsS0FDelQsU0FBU0MsS0FBSyxHQUFHRCxHQUFHLE9BQU9BLEdBQUcsSUFBSS9qQyxFQUFrQmxOLEVBQWhCbU4sRUFBRTZqQyxHQUFHanhDLEVBQUVvTixFQUFFckwsT0FBU2dGLEVBQUUsVUFBVWlxQyxHQUFHQSxHQUFHcHdDLE1BQU1vd0MsR0FBR3BOLFlBQVl2SixFQUFFdHpCLEVBQUVoRixPQUFPLElBQUlvTCxFQUFFLEVBQUVBLEVBQUVuTixHQUFHb04sRUFBRUQsS0FBS3BHLEVBQUVvRyxHQUFHQSxLQUFLLElBQUlpdEIsRUFBRXA2QixFQUFFbU4sRUFBRSxJQUFJbE4sRUFBRSxFQUFFQSxHQUFHbTZCLEdBQUdodEIsRUFBRXBOLEVBQUVDLEtBQUs4RyxFQUFFc3pCLEVBQUVwNkIsR0FBR0EsS0FBSyxPQUFPaXhDLEdBQUducUMsRUFBRW1PLE1BQU0vSCxFQUFFLEVBQUVsTixFQUFFLEVBQUVBLE9BQUUsR0FBUSxTQUFTbXhDLEdBQUdqa0MsR0FBRyxJQUFJQyxFQUFFRCxFQUFFa2tDLFFBQStFLE1BQXZFLGFBQWFsa0MsRUFBZ0IsS0FBYkEsRUFBRUEsRUFBRW1rQyxXQUFnQixLQUFLbGtDLElBQUlELEVBQUUsSUFBS0EsRUFBRUMsRUFBRSxLQUFLRCxJQUFJQSxFQUFFLElBQVcsSUFBSUEsR0FBRyxLQUFLQSxFQUFFQSxFQUFFLEVBQUUsU0FBU29rQyxLQUFLLE9BQU0sRUFBRyxTQUFTQyxLQUFLLE9BQU0sRUFDalksU0FBU0MsR0FBR3RrQyxHQUFHLFNBQVNDLEVBQUVBLEVBQUVuTixFQUFFOEcsRUFBRXN6QixFQUFFRCxHQUE2RyxJQUFJLElBQUlwNkIsS0FBbEhrQyxLQUFLd3ZDLFdBQVd0a0MsRUFBRWxMLEtBQUt5dkMsWUFBWTVxQyxFQUFFN0UsS0FBSzhFLEtBQUsvRyxFQUFFaUMsS0FBS3dxQyxZQUFZclMsRUFBRW40QixLQUFLTCxPQUFPdTRCLEVBQUVsNEIsS0FBSzJwQixjQUFjLEtBQWtCMWUsRUFBRUEsRUFBRTNMLGVBQWV4QixLQUFLb04sRUFBRUQsRUFBRW5OLEdBQUdrQyxLQUFLbEMsR0FBR29OLEVBQUVBLEVBQUVpdEIsR0FBR0EsRUFBRXI2QixJQUFnSSxPQUE1SGtDLEtBQUswdkMsb0JBQW9CLE1BQU12WCxFQUFFd1gsaUJBQWlCeFgsRUFBRXdYLGtCQUFpQixJQUFLeFgsRUFBRXlYLGFBQWFQLEdBQUdDLEdBQUd0dkMsS0FBSzZ2QyxxQkFBcUJQLEdBQVV0dkMsS0FDMUUsT0FEK0VuQyxFQUFFcU4sRUFBRTdMLFVBQVUsQ0FBQzhqQixlQUFlLFdBQVduakIsS0FBSzJ2QyxrQkFBaUIsRUFBRyxJQUFJMWtDLEVBQUVqTCxLQUFLd3FDLFlBQVl2L0IsSUFBSUEsRUFBRWtZLGVBQWVsWSxFQUFFa1ksaUJBQWlCLGtCQUFtQmxZLEVBQUUya0MsY0FDN2Uza0MsRUFBRTJrQyxhQUFZLEdBQUk1dkMsS0FBSzB2QyxtQkFBbUJMLEtBQUtTLGdCQUFnQixXQUFXLElBQUk3a0MsRUFBRWpMLEtBQUt3cUMsWUFBWXYvQixJQUFJQSxFQUFFNmtDLGdCQUFnQjdrQyxFQUFFNmtDLGtCQUFrQixrQkFBbUI3a0MsRUFBRThrQyxlQUFlOWtDLEVBQUU4a0MsY0FBYSxHQUFJL3ZDLEtBQUs2dkMscUJBQXFCUixLQUFLVyxRQUFRLGFBQWFDLGFBQWFaLEtBQVlua0MsRUFDaFIsSUFBb0xnbEMsR0FBR0MsR0FBR0MsR0FBdExDLEdBQUcsQ0FBQ0MsV0FBVyxFQUFFQyxRQUFRLEVBQUVDLFdBQVcsRUFBRUMsVUFBVSxTQUFTeGxDLEdBQUcsT0FBT0EsRUFBRXdsQyxXQUFXaHNCLEtBQUtGLE9BQU9vckIsaUJBQWlCLEVBQUVlLFVBQVUsR0FBR0MsR0FBR3BCLEdBQUdjLElBQUlPLEdBQUcveUMsRUFBRSxHQUFHd3lDLEdBQUcsQ0FBQ1EsS0FBSyxFQUFFQyxPQUFPLElBQUlDLEdBQUd4QixHQUFHcUIsSUFBYUksR0FBR256QyxFQUFFLEdBQUcreUMsR0FBRyxDQUFDSyxRQUFRLEVBQUVDLFFBQVEsRUFBRUMsUUFBUSxFQUFFQyxRQUFRLEVBQUVDLE1BQU0sRUFBRUMsTUFBTSxFQUFFQyxRQUFRLEVBQUVDLFNBQVMsRUFBRUMsT0FBTyxFQUFFQyxRQUFRLEVBQUVDLGlCQUFpQkMsR0FBRzEwQixPQUFPLEVBQUUyMEIsUUFBUSxFQUFFOXVCLGNBQWMsU0FBUzlYLEdBQUcsWUFBTyxJQUFTQSxFQUFFOFgsY0FBYzlYLEVBQUU2bUMsY0FBYzdtQyxFQUFFMjdCLFdBQVczN0IsRUFBRThtQyxVQUFVOW1DLEVBQUU2bUMsWUFBWTdtQyxFQUFFOFgsZUFBZWl2QixVQUFVLFNBQVMvbUMsR0FBRyxNQUFHLGNBQzNlQSxFQUFTQSxFQUFFK21DLFdBQVUvbUMsSUFBSW1sQyxLQUFLQSxJQUFJLGNBQWNubEMsRUFBRW5HLE1BQU1vckMsR0FBR2psQyxFQUFFZ21DLFFBQVFiLEdBQUdhLFFBQVFkLEdBQUdsbEMsRUFBRWltQyxRQUFRZCxHQUFHYyxTQUFTZixHQUFHRCxHQUFHLEVBQUVFLEdBQUdubEMsR0FBVWlsQyxLQUFJK0IsVUFBVSxTQUFTaG5DLEdBQUcsTUFBTSxjQUFjQSxFQUFFQSxFQUFFZ25DLFVBQVU5QixNQUFNK0IsR0FBRzNDLEdBQUd5QixJQUFpQ21CLEdBQUc1QyxHQUE3QjF4QyxFQUFFLEdBQUdtekMsR0FBRyxDQUFDb0IsYUFBYSxLQUE0Q0MsR0FBRzlDLEdBQTlCMXhDLEVBQUUsR0FBRyt5QyxHQUFHLENBQUM3dEIsY0FBYyxLQUEwRXV2QixHQUFHL0MsR0FBNUQxeEMsRUFBRSxHQUFHd3lDLEdBQUcsQ0FBQ2tDLGNBQWMsRUFBRUMsWUFBWSxFQUFFQyxjQUFjLEtBQXNIQyxHQUFHbkQsR0FBeEcxeEMsRUFBRSxHQUFHd3lDLEdBQUcsQ0FBQ3NDLGNBQWMsU0FBUzFuQyxHQUFHLE1BQU0sa0JBQWtCQSxFQUFFQSxFQUFFMG5DLGNBQWM3dkMsT0FBTzZ2QyxrQkFBZ0RDLEdBQUdyRCxHQUFyQjF4QyxFQUFFLEdBQUd3eUMsR0FBRyxDQUFDbDJCLEtBQUssS0FBYzA0QixHQUFHLENBQUNDLElBQUksU0FDeGZDLFNBQVMsSUFBSUMsS0FBSyxZQUFZQyxHQUFHLFVBQVVDLE1BQU0sYUFBYUMsS0FBSyxZQUFZQyxJQUFJLFNBQVNDLElBQUksS0FBS0MsS0FBSyxjQUFjQyxLQUFLLGNBQWNDLE9BQU8sYUFBYUMsZ0JBQWdCLGdCQUFnQkMsR0FBRyxDQUFDQyxFQUFFLFlBQVlDLEVBQUUsTUFBTUMsR0FBRyxRQUFRQyxHQUFHLFFBQVFDLEdBQUcsUUFBUUMsR0FBRyxVQUFVQyxHQUFHLE1BQU1DLEdBQUcsUUFBUUMsR0FBRyxXQUFXQyxHQUFHLFNBQVNDLEdBQUcsSUFBSUMsR0FBRyxTQUFTQyxHQUFHLFdBQVdDLEdBQUcsTUFBTUMsR0FBRyxPQUFPQyxHQUFHLFlBQVlDLEdBQUcsVUFBVUMsR0FBRyxhQUFhQyxHQUFHLFlBQVlDLEdBQUcsU0FBU0MsR0FBRyxTQUFTQyxJQUFJLEtBQUtDLElBQUksS0FBS0MsSUFBSSxLQUFLQyxJQUFJLEtBQUtDLElBQUksS0FBS0MsSUFBSSxLQUFLQyxJQUFJLEtBQ3RmQyxJQUFJLEtBQUtDLElBQUksS0FBS0MsSUFBSSxNQUFNQyxJQUFJLE1BQU1DLElBQUksTUFBTUMsSUFBSSxVQUFVQyxJQUFJLGFBQWFDLElBQUksUUFBUUMsR0FBRyxDQUFDQyxJQUFJLFNBQVNDLFFBQVEsVUFBVUMsS0FBSyxVQUFVQyxNQUFNLFlBQVksU0FBU0MsR0FBR25yQyxHQUFHLElBQUlDLEVBQUVsTCxLQUFLd3FDLFlBQVksT0FBT3QvQixFQUFFeW1DLGlCQUFpQnptQyxFQUFFeW1DLGlCQUFpQjFtQyxNQUFJQSxFQUFFOHFDLEdBQUc5cUMsT0FBTUMsRUFBRUQsR0FBTSxTQUFTMm1DLEtBQUssT0FBT3dFLEdBQzlSLElBQ2lFQyxHQUFHOUcsR0FEN0QxeEMsRUFBRSxHQUFHK3lDLEdBQUcsQ0FBQzV4QyxJQUFJLFNBQVNpTSxHQUFHLEdBQUdBLEVBQUVqTSxJQUFJLENBQUMsSUFBSWtNLEVBQUUybkMsR0FBRzVuQyxFQUFFak0sTUFBTWlNLEVBQUVqTSxJQUFJLEdBQUcsaUJBQWlCa00sRUFBRSxPQUFPQSxFQUFFLE1BQU0sYUFBYUQsRUFBRW5HLEtBQWMsTUFBUm1HLEVBQUVpa0MsR0FBR2prQyxJQUFVLFFBQVF5SSxPQUFPa0YsYUFBYTNOLEdBQUksWUFBWUEsRUFBRW5HLE1BQU0sVUFBVW1HLEVBQUVuRyxLQUFLNHVDLEdBQUd6b0MsRUFBRWtrQyxVQUFVLGVBQWUsSUFBSW1ILEtBQUssRUFBRUMsU0FBUyxFQUFFaEYsUUFBUSxFQUFFQyxTQUFTLEVBQUVDLE9BQU8sRUFBRUMsUUFBUSxFQUFFM2hDLE9BQU8sRUFBRXltQyxPQUFPLEVBQUU3RSxpQkFBaUJDLEdBQUd4QyxTQUFTLFNBQVNua0MsR0FBRyxNQUFNLGFBQWFBLEVBQUVuRyxLQUFLb3FDLEdBQUdqa0MsR0FBRyxHQUFHa2tDLFFBQVEsU0FBU2xrQyxHQUFHLE1BQU0sWUFBWUEsRUFBRW5HLE1BQU0sVUFBVW1HLEVBQUVuRyxLQUFLbUcsRUFBRWtrQyxRQUFRLEdBQUdzSCxNQUFNLFNBQVN4ckMsR0FBRyxNQUFNLGFBQzdlQSxFQUFFbkcsS0FBS29xQyxHQUFHamtDLEdBQUcsWUFBWUEsRUFBRW5HLE1BQU0sVUFBVW1HLEVBQUVuRyxLQUFLbUcsRUFBRWtrQyxRQUFRLE1BQTRJdUgsR0FBR25ILEdBQTdIMXhDLEVBQUUsR0FBR216QyxHQUFHLENBQUNwRyxVQUFVLEVBQUV0bEIsTUFBTSxFQUFFQyxPQUFPLEVBQUVveEIsU0FBUyxFQUFFQyxtQkFBbUIsRUFBRUMsTUFBTSxFQUFFQyxNQUFNLEVBQUVDLE1BQU0sRUFBRUMsWUFBWSxFQUFFQyxVQUFVLEtBQW1JQyxHQUFHM0gsR0FBckgxeEMsRUFBRSxHQUFHK3lDLEdBQUcsQ0FBQ3VHLFFBQVEsRUFBRUMsY0FBYyxFQUFFQyxlQUFlLEVBQUU1RixPQUFPLEVBQUVDLFFBQVEsRUFBRUgsUUFBUSxFQUFFQyxTQUFTLEVBQUVHLGlCQUFpQkMsTUFBMEUwRixHQUFHL0gsR0FBM0QxeEMsRUFBRSxHQUFHd3lDLEdBQUcsQ0FBQ2pVLGFBQWEsRUFBRW9XLFlBQVksRUFBRUMsY0FBYyxLQUMvUDhFLEdBQUdoSSxHQUQ2UTF4QyxFQUFFLEdBQUdtekMsR0FBRyxDQUFDd0csT0FBTyxTQUFTdnNDLEdBQUcsTUFBTSxXQUFXQSxFQUFFQSxFQUFFdXNDLE9BQU8sZ0JBQWdCdnNDLEdBQUdBLEVBQUV3c0MsWUFBWSxHQUNsZmg2QixPQUFPLFNBQVN4UyxHQUFHLE1BQU0sV0FBV0EsRUFBRUEsRUFBRXdTLE9BQU8sZ0JBQWdCeFMsR0FBR0EsRUFBRXlzQyxZQUFZLGVBQWV6c0MsR0FBR0EsRUFBRTBzQyxXQUFXLEdBQUdDLE9BQU8sRUFBRUMsVUFBVSxLQUFjQyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsSUFBSUMsR0FBR3BjLEdBQUkscUJBQXFCNzRCLE9BQU9rMUMsR0FBRyxLQUFLcmMsR0FBSSxpQkFBaUI1NEIsV0FBV2kxQyxHQUFHajFDLFNBQVNrMUMsY0FBYyxJQUFJQyxHQUFHdmMsR0FBSSxjQUFjNzRCLFNBQVNrMUMsR0FBR0csR0FBR3hjLEtBQU1vYyxJQUFJQyxJQUFJLEVBQUVBLElBQUksSUFBSUEsSUFBSUksR0FBRzFrQyxPQUFPa0YsYUFBYSxJQUFJeS9CLElBQUcsRUFDMVcsU0FBU0MsR0FBR3J0QyxFQUFFQyxHQUFHLE9BQU9ELEdBQUcsSUFBSyxRQUFRLE9BQU8sSUFBSTZzQyxHQUFHejNDLFFBQVE2SyxFQUFFaWtDLFNBQVMsSUFBSyxVQUFVLE9BQU8sTUFBTWprQyxFQUFFaWtDLFFBQVEsSUFBSyxXQUFXLElBQUssWUFBWSxJQUFLLFdBQVcsT0FBTSxFQUFHLFFBQVEsT0FBTSxHQUFJLFNBQVNvSixHQUFHdHRDLEdBQWMsTUFBTSxpQkFBakJBLEVBQUVBLEVBQUU2bEMsU0FBa0MsU0FBUzdsQyxFQUFFQSxFQUFFa1AsS0FBSyxLQUFLLElBQUlxK0IsSUFBRyxFQUU5USxJQUFJQyxHQUFHLENBQUNDLE9BQU0sRUFBR0MsTUFBSyxFQUFHQyxVQUFTLEVBQUcsa0JBQWlCLEVBQUdDLE9BQU0sRUFBR0MsT0FBTSxFQUFHQyxRQUFPLEVBQUdDLFVBQVMsRUFBR3hwQyxPQUFNLEVBQUd5cEMsUUFBTyxFQUFHQyxLQUFJLEVBQUczcUMsTUFBSyxFQUFHNHFDLE1BQUssRUFBR0MsS0FBSSxFQUFHQyxNQUFLLEdBQUksU0FBU0MsR0FBR3J1QyxHQUFHLElBQUlDLEVBQUVELEdBQUdBLEVBQUVzMEIsVUFBVXQwQixFQUFFczBCLFNBQVNoRCxjQUFjLE1BQU0sVUFBVXJ4QixJQUFJdXRDLEdBQUd4dEMsRUFBRW5HLE1BQU0sYUFBYW9HLEVBQVEsU0FBU3F1QyxHQUFHdHVDLEVBQUVDLEVBQUVwTixFQUFFQyxHQUFHdXBDLEdBQUd2cEMsR0FBc0IsR0FBbkJtTixFQUFFc3VDLEdBQUd0dUMsRUFBRSxhQUFnQnJMLFNBQVMvQixFQUFFLElBQUk2eUMsR0FBRyxXQUFXLFNBQVMsS0FBSzd5QyxFQUFFQyxHQUFHa04sRUFBRTlKLEtBQUssQ0FBQytZLE1BQU1wYyxFQUFFb0QsVUFBVWdLLEtBQUssSUFBSXV1QyxHQUFHLEtBQUtDLEdBQUcsS0FBSyxTQUFTQyxHQUFHMXVDLEdBQUcydUMsR0FBRzN1QyxFQUFFLEdBQUcsU0FBUzR1QyxHQUFHNXVDLEdBQWUsR0FBRzYwQixFQUFUZ2EsR0FBRzd1QyxJQUFZLE9BQU9BLEVBQ25lLFNBQVM4dUMsR0FBRzl1QyxFQUFFQyxHQUFHLEdBQUcsV0FBV0QsRUFBRSxPQUFPQyxFQUFFLElBQUk4dUMsSUFBRyxFQUFHLEdBQUdyZSxFQUFHLENBQUMsSUFBSXNlLEdBQUcsR0FBR3RlLEVBQUcsQ0FBQyxJQUFJdWUsR0FBRyxZQUFZbjNDLFNBQVMsSUFBSW0zQyxHQUFHLENBQUMsSUFBSUMsR0FBR3AzQyxTQUFTSixjQUFjLE9BQU93M0MsR0FBR2pkLGFBQWEsVUFBVSxXQUFXZ2QsR0FBRyxtQkFBb0JDLEdBQUdDLFFBQVFILEdBQUdDLFFBQVFELElBQUcsRUFBR0QsR0FBR0MsTUFBTWwzQyxTQUFTazFDLGNBQWMsRUFBRWwxQyxTQUFTazFDLGNBQWMsU0FBU29DLEtBQUtaLEtBQUtBLEdBQUdhLFlBQVksbUJBQW1CQyxJQUFJYixHQUFHRCxHQUFHLE1BQU0sU0FBU2MsR0FBR3R2QyxHQUFHLEdBQUcsVUFBVUEsRUFBRW14QixjQUFjeWQsR0FBR0gsSUFBSSxDQUFDLElBQUl4dUMsRUFBRSxHQUF5QixHQUF0QnF1QyxHQUFHcnVDLEVBQUV3dUMsR0FBR3p1QyxFQUFFMDdCLEdBQUcxN0IsSUFBSUEsRUFBRTB1QyxHQUFNL1IsR0FBRzM4QixFQUFFQyxPQUFPLENBQUMwOEIsSUFBRyxFQUFHLElBQUlKLEdBQUd2OEIsRUFBRUMsR0FBRyxRQUFRMDhCLElBQUcsRUFBR0UsUUFDM2UsU0FBUzBTLEdBQUd2dkMsRUFBRUMsRUFBRXBOLEdBQUcsWUFBWW1OLEdBQUdvdkMsS0FBVVgsR0FBRzU3QyxHQUFSMjdDLEdBQUd2dUMsR0FBVXV2QyxZQUFZLG1CQUFtQkYsS0FBSyxhQUFhdHZDLEdBQUdvdkMsS0FBSyxTQUFTSyxHQUFHenZDLEdBQUcsR0FBRyxvQkFBb0JBLEdBQUcsVUFBVUEsR0FBRyxZQUFZQSxFQUFFLE9BQU80dUMsR0FBR0gsSUFBSSxTQUFTaUIsR0FBRzF2QyxFQUFFQyxHQUFHLEdBQUcsVUFBVUQsRUFBRSxPQUFPNHVDLEdBQUczdUMsR0FBRyxTQUFTMHZDLEdBQUczdkMsRUFBRUMsR0FBRyxHQUFHLFVBQVVELEdBQUcsV0FBV0EsRUFBRSxPQUFPNHVDLEdBQUczdUMsR0FBbUUsSUFBSTJ2QyxHQUFHLG1CQUFvQjE4QyxPQUFPd0osR0FBR3hKLE9BQU93SixHQUE1RyxTQUFZc0QsRUFBRUMsR0FBRyxPQUFPRCxJQUFJQyxJQUFJLElBQUlELEdBQUcsRUFBRUEsR0FBSSxFQUFFQyxJQUFJRCxHQUFJQSxHQUFHQyxHQUFJQSxHQUFvRDR2QyxHQUFHMzhDLE9BQU9rQixVQUFVQyxlQUM3YSxTQUFTeTdDLEdBQUc5dkMsRUFBRUMsR0FBRyxHQUFHMnZDLEdBQUc1dkMsRUFBRUMsR0FBRyxPQUFNLEVBQUcsR0FBRyxpQkFBa0JELEdBQUcsT0FBT0EsR0FBRyxpQkFBa0JDLEdBQUcsT0FBT0EsRUFBRSxPQUFNLEVBQUcsSUFBSXBOLEVBQUVLLE9BQU9pQyxLQUFLNkssR0FBR2xOLEVBQUVJLE9BQU9pQyxLQUFLOEssR0FBRyxHQUFHcE4sRUFBRStCLFNBQVM5QixFQUFFOEIsT0FBTyxPQUFNLEVBQUcsSUFBSTlCLEVBQUUsRUFBRUEsRUFBRUQsRUFBRStCLE9BQU85QixJQUFJLElBQUkrOEMsR0FBR2w5QyxLQUFLc04sRUFBRXBOLEVBQUVDLE1BQU04OEMsR0FBRzV2QyxFQUFFbk4sRUFBRUMsSUFBSW1OLEVBQUVwTixFQUFFQyxLQUFLLE9BQU0sRUFBRyxPQUFNLEVBQUcsU0FBU2k5QyxHQUFHL3ZDLEdBQUcsS0FBS0EsR0FBR0EsRUFBRW8zQixZQUFZcDNCLEVBQUVBLEVBQUVvM0IsV0FBVyxPQUFPcDNCLEVBQ2xVLFNBQVNnd0MsR0FBR2h3QyxFQUFFQyxHQUFHLElBQXdCbk4sRUFBcEJELEVBQUVrOUMsR0FBRy92QyxHQUFPLElBQUpBLEVBQUUsRUFBWW5OLEdBQUcsQ0FBQyxHQUFHLElBQUlBLEVBQUUwa0MsU0FBUyxDQUEwQixHQUF6QnprQyxFQUFFa04sRUFBRW5OLEVBQUU0akMsWUFBWTdoQyxPQUFVb0wsR0FBR0MsR0FBR25OLEdBQUdtTixFQUFFLE1BQU0sQ0FBQ2d3QyxLQUFLcDlDLEVBQUU0a0IsT0FBT3hYLEVBQUVELEdBQUdBLEVBQUVsTixFQUFFa04sRUFBRSxDQUFDLEtBQUtuTixHQUFHLENBQUMsR0FBR0EsRUFBRXE5QyxZQUFZLENBQUNyOUMsRUFBRUEsRUFBRXE5QyxZQUFZLE1BQU1sd0MsRUFBRW5OLEVBQUVBLEVBQUVncEMsV0FBV2hwQyxPQUFFLEVBQU9BLEVBQUVrOUMsR0FBR2w5QyxJQUMxTixTQUFTczlDLEtBQUssSUFBSSxJQUFJbndDLEVBQUVuSSxPQUFPb0ksRUFBRTgwQixJQUFLOTBCLGFBQWFELEVBQUVvd0MsbUJBQW1CLENBQUMsSUFBSSxJQUFJdjlDLEVBQUUsaUJBQWtCb04sRUFBRW93QyxjQUFjL0UsU0FBU2dGLEtBQUssTUFBTXg5QyxHQUFHRCxHQUFFLEVBQUcsSUFBR0EsRUFBeUIsTUFBTW9OLEVBQUU4MEIsR0FBL0IvMEIsRUFBRUMsRUFBRW93QyxlQUFnQ3Y0QyxVQUFVLE9BQU9tSSxFQUFFLFNBQVNzd0MsR0FBR3Z3QyxHQUFHLElBQUlDLEVBQUVELEdBQUdBLEVBQUVzMEIsVUFBVXQwQixFQUFFczBCLFNBQVNoRCxjQUFjLE9BQU9yeEIsSUFBSSxVQUFVQSxJQUFJLFNBQVNELEVBQUVuRyxNQUFNLFdBQVdtRyxFQUFFbkcsTUFBTSxRQUFRbUcsRUFBRW5HLE1BQU0sUUFBUW1HLEVBQUVuRyxNQUFNLGFBQWFtRyxFQUFFbkcsT0FBTyxhQUFhb0csR0FBRyxTQUFTRCxFQUFFd3dDLGlCQUN4WixJQUFJQyxHQUFHL2YsR0FBSSxpQkFBaUI1NEIsVUFBVSxJQUFJQSxTQUFTazFDLGFBQWEwRCxHQUFHLEtBQUtDLEdBQUcsS0FBS0MsR0FBRyxLQUFLQyxJQUFHLEVBQzNGLFNBQVNDLEdBQUc5d0MsRUFBRUMsRUFBRXBOLEdBQUcsSUFBSUMsRUFBRUQsRUFBRWdGLFNBQVNoRixFQUFFQSxFQUFFaUYsU0FBUyxJQUFJakYsRUFBRTBrQyxTQUFTMWtDLEVBQUVBLEVBQUVnakMsY0FBY2diLElBQUksTUFBTUgsSUFBSUEsS0FBSzNiLEVBQUdqaUMsS0FBVSxtQkFBTEEsRUFBRTQ5QyxLQUF5QkgsR0FBR3o5QyxHQUFHQSxFQUFFLENBQUMwUixNQUFNMVIsRUFBRWkrQyxlQUFldHNDLElBQUkzUixFQUFFaytDLGNBQXVGbCtDLEVBQUUsQ0FBQ20rQyxZQUEzRW4rQyxHQUFHQSxFQUFFK2lDLGVBQWUvaUMsRUFBRStpQyxjQUFjcWIsYUFBYXI1QyxRQUFRczVDLGdCQUErQkYsV0FBV0csYUFBYXQrQyxFQUFFcytDLGFBQWFDLFVBQVV2K0MsRUFBRXUrQyxVQUFVQyxZQUFZeCtDLEVBQUV3K0MsYUFBY1YsSUFBSWQsR0FBR2MsR0FBRzk5QyxLQUFLODlDLEdBQUc5OUMsRUFBc0IsR0FBcEJBLEVBQUV5N0MsR0FBR29DLEdBQUcsYUFBZ0IvN0MsU0FBU3FMLEVBQUUsSUFBSXlsQyxHQUFHLFdBQVcsU0FBUyxLQUFLemxDLEVBQUVwTixHQUFHbU4sRUFBRTlKLEtBQUssQ0FBQytZLE1BQU1oUCxFQUFFaEssVUFBVW5ELElBQUltTixFQUFFdkwsT0FBT2c4QyxNQUNqZjVPLEdBQUcsbWpCQUFtakJsN0IsTUFBTSxLQUM1akIsR0FBR2s3QixHQUFHLG9SQUFvUmw3QixNQUFNLEtBQUssR0FBR2s3QixHQUFHRCxHQUFHLEdBQUcsSUFBSSxJQUFJMFAsR0FBRyxxRkFBcUYzcUMsTUFBTSxLQUFLNHFDLEdBQUcsRUFBRUEsR0FBR0QsR0FBRzM4QyxPQUFPNDhDLEtBQUs1UCxHQUFHL3VCLElBQUkwK0IsR0FBR0MsSUFBSSxHQUFHaGhCLEVBQUcsZUFBZSxDQUFDLFdBQVcsY0FDbGVBLEVBQUcsZUFBZSxDQUFDLFdBQVcsY0FBY0EsRUFBRyxpQkFBaUIsQ0FBQyxhQUFhLGdCQUFnQkEsRUFBRyxpQkFBaUIsQ0FBQyxhQUFhLGdCQUFnQkQsRUFBRyxXQUFXLG9FQUFvRTNwQixNQUFNLE1BQU0ycEIsRUFBRyxXQUFXLHVGQUF1RjNwQixNQUFNLE1BQU0ycEIsRUFBRyxnQkFBZ0IsQ0FBQyxpQkFBaUIsV0FBVyxZQUFZLFVBQVVBLEVBQUcsbUJBQW1CLDJEQUEyRDNwQixNQUFNLE1BQzVmMnBCLEVBQUcscUJBQXFCLDZEQUE2RDNwQixNQUFNLE1BQU0ycEIsRUFBRyxzQkFBc0IsOERBQThEM3BCLE1BQU0sTUFBTSxJQUFJNnFDLEdBQUcsc05BQXNON3FDLE1BQU0sS0FBSzhxQyxHQUFHLElBQUlyaEIsSUFBSSwwQ0FBMEN6cEIsTUFBTSxLQUFLc0csT0FBT3VrQyxLQUNuZixTQUFTRSxHQUFHM3hDLEVBQUVDLEVBQUVwTixHQUFHLElBQUlDLEVBQUVrTixFQUFFbkcsTUFBTSxnQkFBZ0JtRyxFQUFFMGUsY0FBYzdyQixFQS9DakUsU0FBWW1OLEVBQUVDLEVBQUVwTixFQUFFQyxFQUFFOEcsRUFBRXN6QixFQUFFRCxFQUFFRCxFQUFFdnBCLEdBQTRCLEdBQXpCKzVCLEdBQUcxb0MsTUFBTUMsS0FBS0osV0FBY3dvQyxHQUFHLENBQUMsSUFBR0EsR0FBZ0MsTUFBTXI5QixNQUFNbEQsRUFBRSxNQUExQyxJQUFJbkssRUFBRTJxQyxHQUFHRCxJQUFHLEVBQUdDLEdBQUcsS0FBOEJDLEtBQUtBLElBQUcsRUFBR0MsR0FBRzdxQyxJQStDakVtL0MsQ0FBRzkrQyxFQUFFbU4sT0FBRSxFQUFPRCxHQUFHQSxFQUFFMGUsY0FBYyxLQUNwRyxTQUFTaXdCLEdBQUczdUMsRUFBRUMsR0FBR0EsRUFBRSxJQUFPLEVBQUZBLEdBQUssSUFBSSxJQUFJcE4sRUFBRSxFQUFFQSxFQUFFbU4sRUFBRXBMLE9BQU8vQixJQUFJLENBQUMsSUFBSUMsRUFBRWtOLEVBQUVuTixHQUFHK0csRUFBRTlHLEVBQUVtYyxNQUFNbmMsRUFBRUEsRUFBRW1ELFVBQVUrSixFQUFFLENBQUMsSUFBSWt0QixPQUFFLEVBQU8sR0FBR2p0QixFQUFFLElBQUksSUFBSWd0QixFQUFFbjZCLEVBQUU4QixPQUFPLEVBQUUsR0FBR3E0QixFQUFFQSxJQUFJLENBQUMsSUFBSUQsRUFBRWw2QixFQUFFbTZCLEdBQUd4cEIsRUFBRXVwQixFQUFFdlEsU0FBU2hxQixFQUFFdTZCLEVBQUV0TyxjQUEyQixHQUFic08sRUFBRUEsRUFBRWozQixTQUFZME4sSUFBSXlwQixHQUFHdHpCLEVBQUVnckMsdUJBQXVCLE1BQU01a0MsRUFBRTJ4QyxHQUFHLzNDLEVBQUVvekIsRUFBRXY2QixHQUFHeTZCLEVBQUV6cEIsT0FBTyxJQUFJd3BCLEVBQUUsRUFBRUEsRUFBRW42QixFQUFFOEIsT0FBT3E0QixJQUFJLENBQW9ELEdBQTVDeHBCLEdBQVB1cEIsRUFBRWw2QixFQUFFbTZCLElBQU94USxTQUFTaHFCLEVBQUV1NkIsRUFBRXRPLGNBQWNzTyxFQUFFQSxFQUFFajNCLFNBQVkwTixJQUFJeXBCLEdBQUd0ekIsRUFBRWdyQyx1QkFBdUIsTUFBTTVrQyxFQUFFMnhDLEdBQUcvM0MsRUFBRW96QixFQUFFdjZCLEdBQUd5NkIsRUFBRXpwQixJQUFJLEdBQUc0NUIsR0FBRyxNQUFNcjlCLEVBQUVzOUIsR0FBR0QsSUFBRyxFQUFHQyxHQUFHLEtBQUt0OUIsRUFDMWEsU0FBUzBzQixHQUFFMXNCLEVBQUVDLEdBQUcsSUFBSXBOLEVBQUVnL0MsR0FBRzV4QyxHQUFHbk4sRUFBRWtOLEVBQUUsV0FBV25OLEVBQUVpL0MsSUFBSWgvQyxLQUFLaS9DLEdBQUc5eEMsRUFBRUQsRUFBRSxHQUFFLEdBQUluTixFQUFFNDlCLElBQUkzOUIsSUFBSSxJQUFJay9DLEdBQUcsa0JBQWtCdnJDLEtBQUtDLFNBQVNDLFNBQVMsSUFBSW9CLE1BQU0sR0FBRyxTQUFTa3FDLEdBQUdqeUMsR0FBR0EsRUFBRWd5QyxNQUFNaHlDLEVBQUVneUMsS0FBSSxFQUFHNWhCLEVBQUdwbkIsU0FBUSxTQUFTL0ksR0FBR3l4QyxHQUFHSSxJQUFJN3hDLElBQUlpeUMsR0FBR2p5QyxHQUFFLEVBQUdELEVBQUUsTUFBTWt5QyxHQUFHanlDLEdBQUUsRUFBR0QsRUFBRSxVQUN0TyxTQUFTa3lDLEdBQUdseUMsRUFBRUMsRUFBRXBOLEVBQUVDLEdBQUcsSUFBSThHLEVBQUUsRUFBRWpGLFVBQVVDLGFBQVEsSUFBU0QsVUFBVSxHQUFHQSxVQUFVLEdBQUcsRUFBRXU0QixFQUFFcjZCLEVBQTZELEdBQTNELG9CQUFvQm1OLEdBQUcsSUFBSW5OLEVBQUUwa0MsV0FBV3JLLEVBQUVyNkIsRUFBRWdqQyxlQUFrQixPQUFPL2lDLElBQUltTixHQUFHeXhDLEdBQUdJLElBQUk5eEMsR0FBRyxDQUFDLEdBQUcsV0FBV0EsRUFBRSxPQUFPcEcsR0FBRyxFQUFFc3pCLEVBQUVwNkIsRUFBRSxJQUFJbTZCLEVBQUU0a0IsR0FBRzNrQixHQUFHRixFQUFFaHRCLEVBQUUsTUFBTUMsRUFBRSxVQUFVLFVBQVVndEIsRUFBRTZrQixJQUFJOWtCLEtBQUsvc0IsSUFBSXJHLEdBQUcsR0FBR200QyxHQUFHN2tCLEVBQUVsdEIsRUFBRXBHLEVBQUVxRyxHQUFHZ3RCLEVBQUV3RCxJQUFJekQsSUFDbFMsU0FBUytrQixHQUFHL3hDLEVBQUVDLEVBQUVwTixFQUFFQyxHQUFHLElBQUk4RyxFQUFFZ29DLEdBQUd2dUMsSUFBSTRNLEdBQUcsWUFBTyxJQUFTckcsRUFBRSxFQUFFQSxHQUFHLEtBQUssRUFBRUEsRUFBRTZwQyxHQUFHLE1BQU0sS0FBSyxFQUFFN3BDLEVBQUU0VixHQUFHLE1BQU0sUUFBUTVWLEVBQUU4cEMsR0FBRzd3QyxFQUFFK0csRUFBRTVGLEtBQUssS0FBS2lNLEVBQUVwTixFQUFFbU4sR0FBR3BHLE9BQUUsR0FBUW1qQyxJQUFJLGVBQWU5OEIsR0FBRyxjQUFjQSxHQUFHLFVBQVVBLElBQUlyRyxHQUFFLEdBQUk5RyxPQUFFLElBQVM4RyxFQUFFb0csRUFBRWdQLGlCQUFpQi9PLEVBQUVwTixFQUFFLENBQUNzL0MsU0FBUSxFQUFHQyxRQUFReDRDLElBQUlvRyxFQUFFZ1AsaUJBQWlCL08sRUFBRXBOLEdBQUUsUUFBSSxJQUFTK0csRUFBRW9HLEVBQUVnUCxpQkFBaUIvTyxFQUFFcE4sRUFBRSxDQUFDdS9DLFFBQVF4NEMsSUFBSW9HLEVBQUVnUCxpQkFBaUIvTyxFQUFFcE4sR0FBRSxHQUNwVyxTQUFTK3dDLEdBQUc1akMsRUFBRUMsRUFBRXBOLEVBQUVDLEVBQUU4RyxHQUFHLElBQUlzekIsRUFBRXA2QixFQUFFLEdBQUcsSUFBTyxFQUFGbU4sSUFBTSxJQUFPLEVBQUZBLElBQU0sT0FBT25OLEVBQUVrTixFQUFFLE9BQU8sQ0FBQyxHQUFHLE9BQU9sTixFQUFFLE9BQU8sSUFBSW02QixFQUFFbjZCLEVBQUVtaEMsSUFBSSxHQUFHLElBQUloSCxHQUFHLElBQUlBLEVBQUUsQ0FBQyxJQUFJRCxFQUFFbDZCLEVBQUVxcEMsVUFBVWdFLGNBQWMsR0FBR25ULElBQUlwekIsR0FBRyxJQUFJb3pCLEVBQUV1SyxVQUFVdkssRUFBRTZPLGFBQWFqaUMsRUFBRSxNQUFNLEdBQUcsSUFBSXF6QixFQUFFLElBQUlBLEVBQUVuNkIsRUFBRTZxQyxPQUFPLE9BQU8xUSxHQUFHLENBQUMsSUFBSXhwQixFQUFFd3BCLEVBQUVnSCxJQUFJLElBQUcsSUFBSXh3QixHQUFHLElBQUlBLE1BQUtBLEVBQUV3cEIsRUFBRWtQLFVBQVVnRSxpQkFBa0J2bUMsR0FBRyxJQUFJNkosRUFBRTh6QixVQUFVOXpCLEVBQUVvNEIsYUFBYWppQyxHQUFFLE9BQU9xekIsRUFBRUEsRUFBRTBRLE9BQU8sS0FBSyxPQUFPM1EsR0FBRyxDQUFTLEdBQUcsUUFBWEMsRUFBRTZTLEdBQUc5UyxJQUFlLE9BQWUsR0FBRyxLQUFYdnBCLEVBQUV3cEIsRUFBRWdILE1BQWMsSUFBSXh3QixFQUFFLENBQUMzUSxFQUFFbzZCLEVBQUVELEVBQUUsU0FBU2p0QixFQUFFZ3RCLEVBQUVBLEVBQUU2TyxZQUFZL29DLEVBQUVBLEVBQUU2cUMsUUF2RDdjLFNBQVkzOUIsRUFBRUMsRUFBRXBOLEdBQUcsR0FBRytwQyxHQUFHLE9BQU81OEIsRUFBRUMsRUFBRXBOLEdBQUcrcEMsSUFBRyxFQUFHLElBQVdGLEdBQUcxOEIsRUFBRUMsRUFBRXBOLEdBQUcsUUFBUStwQyxJQUFHLEVBQUdDLE1BdURvWXdWLEVBQUcsV0FBVyxJQUFJdi9DLEVBQUVvNkIsRUFBRXR6QixFQUFFOGhDLEdBQUc3b0MsR0FBR282QixFQUFFLEdBQ3BmanRCLEVBQUUsQ0FBQyxJQUFJZ3RCLEVBQUUyVSxHQUFHdHVDLElBQUkyTSxHQUFHLFFBQUcsSUFBU2d0QixFQUFFLENBQUMsSUFBSXZwQixFQUFFaWlDLEdBQUcvb0MsRUFBRXFELEVBQUUsT0FBT0EsR0FBRyxJQUFLLFdBQVcsR0FBRyxJQUFJaWtDLEdBQUdweEMsR0FBRyxNQUFNbU4sRUFBRSxJQUFLLFVBQVUsSUFBSyxRQUFReUQsRUFBRTJuQyxHQUFHLE1BQU0sSUFBSyxVQUFVenVDLEVBQUUsUUFBUThHLEVBQUUyakMsR0FBRyxNQUFNLElBQUssV0FBV3pxQyxFQUFFLE9BQU84RyxFQUFFMmpDLEdBQUcsTUFBTSxJQUFLLGFBQWEsSUFBSyxZQUFZM2pDLEVBQUUyakMsR0FBRyxNQUFNLElBQUssUUFBUSxHQUFHLElBQUl2MEMsRUFBRW9mLE9BQU8sTUFBTWpTLEVBQUUsSUFBSyxXQUFXLElBQUssV0FBVyxJQUFLLFlBQVksSUFBSyxZQUFZLElBQUssVUFBVSxJQUFLLFdBQVcsSUFBSyxZQUFZLElBQUssY0FBY3lELEVBQUV3akMsR0FBRyxNQUFNLElBQUssT0FBTyxJQUFLLFVBQVUsSUFBSyxZQUFZLElBQUssV0FBVyxJQUFLLFlBQVksSUFBSyxXQUFXLElBQUssWUFBWSxJQUFLLE9BQU94akMsRUFDMWlCeWpDLEdBQUcsTUFBTSxJQUFLLGNBQWMsSUFBSyxXQUFXLElBQUssWUFBWSxJQUFLLGFBQWF6akMsRUFBRXdvQyxHQUFHLE1BQU0sS0FBSzFLLEdBQUcsS0FBS0MsR0FBRyxLQUFLQyxHQUFHaCtCLEVBQUU0akMsR0FBRyxNQUFNLEtBQUszRixHQUFHaitCLEVBQUU0b0MsR0FBRyxNQUFNLElBQUssU0FBUzVvQyxFQUFFcWlDLEdBQUcsTUFBTSxJQUFLLFFBQVFyaUMsRUFBRTZvQyxHQUFHLE1BQU0sSUFBSyxPQUFPLElBQUssTUFBTSxJQUFLLFFBQVE3b0MsRUFBRWdrQyxHQUFHLE1BQU0sSUFBSyxvQkFBb0IsSUFBSyxxQkFBcUIsSUFBSyxnQkFBZ0IsSUFBSyxjQUFjLElBQUssY0FBYyxJQUFLLGFBQWEsSUFBSyxjQUFjLElBQUssWUFBWWhrQyxFQUFFZ29DLEdBQUcsSUFBSWhnQixFQUFFLElBQU8sRUFBRnhyQixHQUFLZ1IsR0FBR3dhLEdBQUcsV0FBV3pyQixFQUFFc3JCLEVBQUVHLEVBQUUsT0FBT3VCLEVBQUVBLEVBQUUsVUFBVSxLQUFLQSxFQUFFdkIsRUFBRSxHQUFHLElBQUksSUFBUUwsRUFBSjEzQixFQUFFWixFQUFJLE9BQy9lWSxHQUFHLENBQUssSUFBSTYzQixHQUFSSCxFQUFFMTNCLEdBQVV5b0MsVUFBc0YsR0FBNUUsSUFBSS9RLEVBQUU2SSxLQUFLLE9BQU8xSSxJQUFJSCxFQUFFRyxFQUFFLE9BQU9ELElBQWMsT0FBVkMsRUFBRXVSLEdBQUdwcEMsRUFBRTQzQixLQUFZRyxFQUFFdjFCLEtBQUtvOEMsR0FBRzUrQyxFQUFFNjNCLEVBQUVILE1BQVNuYSxFQUFFLE1BQU12ZCxFQUFFQSxFQUFFaXFDLE9BQU8sRUFBRWxTLEVBQUU3MkIsU0FBU280QixFQUFFLElBQUl2cEIsRUFBRXVwQixFQUFFcndCLEVBQUUsS0FBSzlKLEVBQUUrRyxHQUFHcXpCLEVBQUUvMkIsS0FBSyxDQUFDK1ksTUFBTStkLEVBQUUvMkIsVUFBVXcxQixNQUFNLEdBQUcsSUFBTyxFQUFGeHJCLEdBQUssQ0FBNEUsR0FBbkN3RCxFQUFFLGFBQWF6RCxHQUFHLGVBQWVBLEtBQXRFZ3RCLEVBQUUsY0FBY2h0QixHQUFHLGdCQUFnQkEsSUFBMkMsSUFBTyxHQUFGQyxNQUFRdEQsRUFBRTlKLEVBQUVpbEIsZUFBZWpsQixFQUFFZzBDLGVBQWUvRyxHQUFHbmpDLEtBQUlBLEVBQUU0MUMsT0FBZ0I5dUMsR0FBR3VwQixLQUFHQSxFQUFFcHpCLEVBQUUvQixTQUFTK0IsRUFBRUEsR0FBR296QixFQUFFcHpCLEVBQUVpOEIsZUFBZTdJLEVBQUVra0IsYUFBYWxrQixFQUFFd2xCLGFBQWEzNkMsT0FBVTRMLEdBQXFDQSxFQUFFM1EsRUFBaUIsUUFBZjZKLEdBQW5DQSxFQUFFOUosRUFBRWlsQixlQUFlamxCLEVBQUVpMEMsV0FBa0JoSCxHQUFHbmpDLEdBQUcsUUFDbGVBLEtBQVJzVSxFQUFFd3NCLEdBQUc5Z0MsS0FBVSxJQUFJQSxFQUFFczNCLEtBQUssSUFBSXQzQixFQUFFczNCLE9BQUt0M0IsRUFBRSxRQUFVOEcsRUFBRSxLQUFLOUcsRUFBRTdKLEdBQUsyUSxJQUFJOUcsR0FBRSxDQUFnVSxHQUEvVDh1QixFQUFFd2IsR0FBRzFiLEVBQUUsZUFBZUQsRUFBRSxlQUFlNTNCLEVBQUUsUUFBVyxlQUFlc00sR0FBRyxnQkFBZ0JBLElBQUV5ckIsRUFBRWdnQixHQUFHbGdCLEVBQUUsaUJBQWlCRCxFQUFFLGlCQUFpQjUzQixFQUFFLFdBQVV1ZCxFQUFFLE1BQU14TixFQUFFdXBCLEVBQUU2aEIsR0FBR3ByQyxHQUFHMm5CLEVBQUUsTUFBTXp1QixFQUFFcXdCLEVBQUU2aEIsR0FBR2x5QyxJQUFHcXdCLEVBQUUsSUFBSXZCLEVBQUVGLEVBQUU3M0IsRUFBRSxRQUFRK1AsRUFBRTVRLEVBQUUrRyxJQUFLbEYsT0FBT3VjLEVBQUUrYixFQUFFbFYsY0FBY3NULEVBQUVHLEVBQUUsS0FBS3VVLEdBQUdsbUMsS0FBSzlHLEtBQUkyNEIsRUFBRSxJQUFJQSxFQUFFSCxFQUFFNTNCLEVBQUUsUUFBUWlKLEVBQUU5SixFQUFFK0csSUFBS2xGLE9BQU8wMkIsRUFBRUssRUFBRTNULGNBQWM3RyxFQUFFc2EsRUFBRUUsR0FBR3hhLEVBQUVzYSxFQUFLOW5CLEdBQUc5RyxFQUFFc0QsRUFBRSxDQUFhLElBQVJxckIsRUFBRTN1QixFQUFFakosRUFBRSxFQUFNMDNCLEVBQWhCSyxFQUFFaG9CLEVBQWtCMm5CLEVBQUVBLEVBQUVxbkIsR0FBR3JuQixHQUFHMTNCLElBQVEsSUFBSjAzQixFQUFFLEVBQU1HLEVBQUVELEVBQUVDLEVBQUVBLEVBQUVrbkIsR0FBR2xuQixHQUFHSCxJQUFJLEtBQUssRUFBRTEzQixFQUFFMDNCLEdBQUdLLEVBQUVnbkIsR0FBR2huQixHQUFHLzNCLElBQUksS0FBSyxFQUFFMDNCLEVBQUUxM0IsR0FBRzQzQixFQUNwZm1uQixHQUFHbm5CLEdBQUdGLElBQUksS0FBSzEzQixLQUFLLENBQUMsR0FBRyszQixJQUFJSCxHQUFHLE9BQU9BLEdBQUdHLElBQUlILEVBQUVvUyxVQUFVLE1BQU16OUIsRUFBRXdyQixFQUFFZ25CLEdBQUdobkIsR0FBR0gsRUFBRW1uQixHQUFHbm5CLEdBQUdHLEVBQUUsVUFBVUEsRUFBRSxLQUFLLE9BQU9ob0IsR0FBR2l2QyxHQUFHemxCLEVBQUVELEVBQUV2cEIsRUFBRWdvQixHQUFFLEdBQUksT0FBTzl1QixHQUFHLE9BQU9zVSxHQUFHeWhDLEdBQUd6bEIsRUFBRWhjLEVBQUV0VSxFQUFFOHVCLEdBQUUsR0FBaUUsR0FBRyxZQUExQ2hvQixHQUFqQnVwQixFQUFFbDZCLEVBQUUrN0MsR0FBRy83QyxHQUFHK0UsUUFBV3k4QixVQUFVdEgsRUFBRXNILFNBQVNoRCxnQkFBK0IsVUFBVTd0QixHQUFHLFNBQVN1cEIsRUFBRW56QixLQUFLLElBQUlrekIsRUFBRStoQixRQUFRLEdBQUdULEdBQUdyaEIsR0FBRyxHQUFHK2hCLEdBQUdoaUIsRUFBRTRpQixPQUFPLENBQUM1aUIsRUFBRTBpQixHQUFHLElBQUk5aEIsRUFBRTRoQixRQUFROXJDLEVBQUV1cEIsRUFBRXNILFdBQVcsVUFBVTd3QixFQUFFNnRCLGdCQUFnQixhQUFhdEUsRUFBRW56QixNQUFNLFVBQVVtekIsRUFBRW56QixRQUFRa3pCLEVBQUUyaUIsSUFDbFYsT0FEeVYzaUIsSUFBSUEsRUFBRUEsRUFBRS9zQixFQUFFbE4sSUFBS3c3QyxHQUFHcmhCLEVBQUVGLEVBQUVsNkIsRUFBRStHLElBQVcrekIsR0FBR0EsRUFBRTN0QixFQUFFZ3RCLEVBQUVsNkIsR0FBRyxhQUFha04sSUFBSTJ0QixFQUFFWCxFQUFFb0ksZ0JBQ3RlekgsRUFBRTZILFlBQVksV0FBV3hJLEVBQUVuekIsTUFBTTg3QixHQUFHM0ksRUFBRSxTQUFTQSxFQUFFdjVCLFFBQU9rNkIsRUFBRTc2QixFQUFFKzdDLEdBQUcvN0MsR0FBRytFLE9BQWNtSSxHQUFHLElBQUssV0FBYXF1QyxHQUFHMWdCLElBQUksU0FBU0EsRUFBRTZpQixtQkFBZ0JFLEdBQUcvaUIsRUFBRWdqQixHQUFHNzlDLEVBQUU4OUMsR0FBRyxNQUFLLE1BQU0sSUFBSyxXQUFXQSxHQUFHRCxHQUFHRCxHQUFHLEtBQUssTUFBTSxJQUFLLFlBQVlHLElBQUcsRUFBRyxNQUFNLElBQUssY0FBYyxJQUFLLFVBQVUsSUFBSyxVQUFVQSxJQUFHLEVBQUdDLEdBQUc3akIsRUFBRXA2QixFQUFFK0csR0FBRyxNQUFNLElBQUssa0JBQWtCLEdBQUc2MkMsR0FBRyxNQUFNLElBQUssVUFBVSxJQUFLLFFBQVFLLEdBQUc3akIsRUFBRXA2QixFQUFFK0csR0FBRyxJQUFJazBCLEVBQUUsR0FBR2dmLEdBQUc3c0MsRUFBRSxDQUFDLE9BQU9ELEdBQUcsSUFBSyxtQkFBbUIsSUFBSXF0QixFQUFFLHFCQUFxQixNQUFNcHRCLEVBQUUsSUFBSyxpQkFBaUJvdEIsRUFBRSxtQkFBbUIsTUFBTXB0QixFQUNyZixJQUFLLG9CQUFvQm90QixFQUFFLHNCQUFzQixNQUFNcHRCLEVBQUVvdEIsT0FBRSxPQUFZa2dCLEdBQUdGLEdBQUdydEMsRUFBRW5OLEtBQUt3NkIsRUFBRSxvQkFBb0IsWUFBWXJ0QixHQUFHLE1BQU1uTixFQUFFcXhDLFVBQVU3VyxFQUFFLHNCQUFzQkEsSUFBSTZmLElBQUksT0FBT3I2QyxFQUFFMDRDLFNBQVNnQyxJQUFJLHVCQUF1QmxnQixFQUFFLHFCQUFxQkEsR0FBR2tnQixLQUFLemYsRUFBRWtXLE9BQVlGLEdBQUcsVUFBUkQsR0FBR2pxQyxHQUFrQmlxQyxHQUFHcHdDLE1BQU1vd0MsR0FBR3BOLFlBQVk4VyxJQUFHLElBQWUsR0FBVjVmLEVBQUU0Z0IsR0FBR3o3QyxFQUFFdTZCLElBQU96NEIsU0FBU3k0QixFQUFFLElBQUlzYSxHQUFHdGEsRUFBRXJ0QixFQUFFLEtBQUtuTixFQUFFK0csR0FBR3F6QixFQUFFLzJCLEtBQUssQ0FBQytZLE1BQU1vZSxFQUFFcDNCLFVBQVUwM0IsSUFBSUcsRUFBRVQsRUFBRW5lLEtBQUs0ZSxFQUFXLFFBQVJBLEVBQUV3ZixHQUFHejZDLE1BQWN3NkIsRUFBRW5lLEtBQUs0ZSxNQUFTQSxFQUFFbWYsR0ExQmpLLFNBQVlqdEMsRUFBRUMsR0FBRyxPQUFPRCxHQUFHLElBQUssaUJBQWlCLE9BQU9zdEMsR0FBR3J0QyxHQUFHLElBQUssV0FBVyxPQUFHLEtBQUtBLEVBQUV1ckMsTUFBYSxNQUFLNEIsSUFBRyxFQUFVRCxJQUFHLElBQUssWUFBWSxPQUFPbnRDLEVBQUVDLEVBQUVpUCxRQUFTaStCLElBQUlDLEdBQUcsS0FBS3B0QyxFQUFFLFFBQVEsT0FBTyxNQTBCeEIyeUMsQ0FBRzN5QyxFQUFFbk4sR0F6QjFiLFNBQVltTixFQUFFQyxHQUFHLEdBQUdzdEMsR0FBRyxNQUFNLG1CQUFtQnZ0QyxJQUFJOHNDLElBQUlPLEdBQUdydEMsRUFBRUMsSUFBSUQsRUFBRWdrQyxLQUFLRCxHQUFHRCxHQUFHRCxHQUFHLEtBQUswSixJQUFHLEVBQUd2dEMsR0FBRyxLQUFLLE9BQU9BLEdBQUcsSUFBSyxRQUFRLE9BQU8sS0FBSyxJQUFLLFdBQVcsS0FBS0MsRUFBRXFtQyxTQUFTcm1DLEVBQUV1bUMsUUFBUXZtQyxFQUFFd21DLFVBQVV4bUMsRUFBRXFtQyxTQUFTcm1DLEVBQUV1bUMsT0FBTyxDQUFDLEdBQUd2bUMsRUFBRTJ5QyxNQUFNLEVBQUUzeUMsRUFBRTJ5QyxLQUFLaCtDLE9BQU8sT0FBT3FMLEVBQUUyeUMsS0FBSyxHQUFHM3lDLEVBQUV1ckMsTUFBTSxPQUFPL2lDLE9BQU9rRixhQUFhMU4sRUFBRXVyQyxPQUFPLE9BQU8sS0FBSyxJQUFLLGlCQUFpQixPQUFPMEIsSUFBSSxPQUFPanRDLEVBQUVzckMsT0FBTyxLQUFLdHJDLEVBQUVpUCxLQUFLLFFBQVEsT0FBTyxNQXlCMkQyakMsQ0FBRzd5QyxFQUFFbk4sTUFBMkIsR0FBeEJDLEVBQUV5N0MsR0FBR3o3QyxFQUFFLGtCQUFxQjhCLFNBQVNnRixFQUFFLElBQUkrdEMsR0FBRyxnQkFDbmYsY0FBYyxLQUFLOTBDLEVBQUUrRyxHQUFHcXpCLEVBQUUvMkIsS0FBSyxDQUFDK1ksTUFBTXJWLEVBQUUzRCxVQUFVbkQsSUFBSThHLEVBQUVzVixLQUFLNGUsSUFBRzZnQixHQUFHMWhCLEVBQUVodEIsTUFBSyxTQUFTcXlDLEdBQUd0eUMsRUFBRUMsRUFBRXBOLEdBQUcsTUFBTSxDQUFDNHBCLFNBQVN6YyxFQUFFakssU0FBU2tLLEVBQUV5ZSxjQUFjN3JCLEdBQUcsU0FBUzA3QyxHQUFHdnVDLEVBQUVDLEdBQUcsSUFBSSxJQUFJcE4sRUFBRW9OLEVBQUUsVUFBVW5OLEVBQUUsR0FBRyxPQUFPa04sR0FBRyxDQUFDLElBQUlwRyxFQUFFb0csRUFBRWt0QixFQUFFdHpCLEVBQUV1aUMsVUFBVSxJQUFJdmlDLEVBQUVxNkIsS0FBSyxPQUFPL0csSUFBSXR6QixFQUFFc3pCLEVBQVksT0FBVkEsRUFBRTRQLEdBQUc5OEIsRUFBRW5OLEtBQVlDLEVBQUVnZ0QsUUFBUVIsR0FBR3R5QyxFQUFFa3RCLEVBQUV0ekIsSUFBYyxPQUFWc3pCLEVBQUU0UCxHQUFHOThCLEVBQUVDLEtBQVluTixFQUFFb0QsS0FBS284QyxHQUFHdHlDLEVBQUVrdEIsRUFBRXR6QixLQUFLb0csRUFBRUEsRUFBRTI5QixPQUFPLE9BQU83cUMsRUFBRSxTQUFTMi9DLEdBQUd6eUMsR0FBRyxHQUFHLE9BQU9BLEVBQUUsT0FBTyxLQUFLLEdBQUdBLEVBQUVBLEVBQUUyOUIsYUFBYTM5QixHQUFHLElBQUlBLEVBQUVpMEIsS0FBSyxPQUFPajBCLEdBQUksS0FDeGEsU0FBUzB5QyxHQUFHMXlDLEVBQUVDLEVBQUVwTixFQUFFQyxFQUFFOEcsR0FBRyxJQUFJLElBQUlzekIsRUFBRWp0QixFQUFFc2tDLFdBQVd0WCxFQUFFLEdBQUcsT0FBT3A2QixHQUFHQSxJQUFJQyxHQUFHLENBQUMsSUFBSWs2QixFQUFFbjZCLEVBQUU0USxFQUFFdXBCLEVBQUUwUSxVQUFVanJDLEVBQUV1NkIsRUFBRW1QLFVBQVUsR0FBRyxPQUFPMTRCLEdBQUdBLElBQUkzUSxFQUFFLE1BQU0sSUFBSWs2QixFQUFFaUgsS0FBSyxPQUFPeGhDLElBQUl1NkIsRUFBRXY2QixFQUFFbUgsRUFBYSxPQUFWNkosRUFBRXE1QixHQUFHanFDLEVBQUVxNkIsS0FBWUQsRUFBRTZsQixRQUFRUixHQUFHei9DLEVBQUU0USxFQUFFdXBCLElBQUtwekIsR0FBYyxPQUFWNkosRUFBRXE1QixHQUFHanFDLEVBQUVxNkIsS0FBWUQsRUFBRS8yQixLQUFLbzhDLEdBQUd6L0MsRUFBRTRRLEVBQUV1cEIsS0FBTW42QixFQUFFQSxFQUFFOHFDLE9BQU8sSUFBSTFRLEVBQUVyNEIsUUFBUW9MLEVBQUU5SixLQUFLLENBQUMrWSxNQUFNaFAsRUFBRWhLLFVBQVVnM0IsSUFBSSxTQUFTOGxCLE1BQU0sSUFBSUMsR0FBRyxLQUFLQyxHQUFHLEtBQUssU0FBU0MsR0FBR2x6QyxFQUFFQyxHQUFHLE9BQU9ELEdBQUcsSUFBSyxTQUFTLElBQUssUUFBUSxJQUFLLFNBQVMsSUFBSyxXQUFXLFFBQVFDLEVBQUVrekMsVUFBVSxPQUFNLEVBQzNiLFNBQVNDLEdBQUdwekMsRUFBRUMsR0FBRyxNQUFNLGFBQWFELEdBQUcsV0FBV0EsR0FBRyxhQUFhQSxHQUFHLGlCQUFrQkMsRUFBRTdJLFVBQVUsaUJBQWtCNkksRUFBRTdJLFVBQVUsaUJBQWtCNkksRUFBRW8yQix5QkFBeUIsT0FBT3AyQixFQUFFbzJCLHlCQUF5QixNQUFNcDJCLEVBQUVvMkIsd0JBQXdCZ2QsT0FBTyxJQUFJQyxHQUFHLG1CQUFvQkMsV0FBV0EsZ0JBQVcsRUFBT0MsR0FBRyxtQkFBb0JDLGFBQWFBLGtCQUFhLEVBQU8sU0FBU0MsR0FBRzF6QyxHQUFHLElBQUlBLEVBQUV1M0IsU0FBU3YzQixFQUFFeTJCLFlBQVksR0FBRyxJQUFJejJCLEVBQUV1M0IsV0FBb0IsT0FBVHYzQixFQUFFQSxFQUFFNGEsUUFBZTVhLEVBQUV5MkIsWUFBWSxLQUN4YyxTQUFTa2QsR0FBRzN6QyxHQUFHLEtBQUssTUFBTUEsRUFBRUEsRUFBRUEsRUFBRWt3QyxZQUFZLENBQUMsSUFBSWp3QyxFQUFFRCxFQUFFdTNCLFNBQVMsR0FBRyxJQUFJdDNCLEdBQUcsSUFBSUEsRUFBRSxNQUFNLE9BQU9ELEVBQUUsU0FBUzR6QyxHQUFHNXpDLEdBQUdBLEVBQUVBLEVBQUU2ekMsZ0JBQWdCLElBQUksSUFBSTV6QyxFQUFFLEVBQUVELEdBQUcsQ0FBQyxHQUFHLElBQUlBLEVBQUV1M0IsU0FBUyxDQUFDLElBQUkxa0MsRUFBRW1OLEVBQUVrUCxLQUFLLEdBQUcsTUFBTXJjLEdBQUcsT0FBT0EsR0FBRyxPQUFPQSxFQUFFLENBQUMsR0FBRyxJQUFJb04sRUFBRSxPQUFPRCxFQUFFQyxRQUFRLE9BQU9wTixHQUFHb04sSUFBSUQsRUFBRUEsRUFBRTZ6QyxnQkFBZ0IsT0FBTyxLQUFLLElBQUlDLEdBQUcsRUFBMEQsSUFBSUMsR0FBR3R0QyxLQUFLQyxTQUFTQyxTQUFTLElBQUlvQixNQUFNLEdBQUdpc0MsR0FBRyxnQkFBZ0JELEdBQUdFLEdBQUcsZ0JBQWdCRixHQUFHeEIsR0FBRyxvQkFBb0J3QixHQUFHRyxHQUFHLGlCQUFpQkgsR0FDOWQsU0FBU2pVLEdBQUc5L0IsR0FBRyxJQUFJQyxFQUFFRCxFQUFFZzBDLElBQUksR0FBRy96QyxFQUFFLE9BQU9BLEVBQUUsSUFBSSxJQUFJcE4sRUFBRW1OLEVBQUU2N0IsV0FBV2hwQyxHQUFHLENBQUMsR0FBR29OLEVBQUVwTixFQUFFMC9DLEtBQUsxL0MsRUFBRW1oRCxJQUFJLENBQWUsR0FBZG5oRCxFQUFFb04sRUFBRXk5QixVQUFhLE9BQU96OUIsRUFBRWkrQixPQUFPLE9BQU9yckMsR0FBRyxPQUFPQSxFQUFFcXJDLE1BQU0sSUFBSWwrQixFQUFFNHpDLEdBQUc1ekMsR0FBRyxPQUFPQSxHQUFHLENBQUMsR0FBR25OLEVBQUVtTixFQUFFZzBDLElBQUksT0FBT25oRCxFQUFFbU4sRUFBRTR6QyxHQUFHNXpDLEdBQUcsT0FBT0MsRUFBTXBOLEdBQUptTixFQUFFbk4sR0FBTWdwQyxXQUFXLE9BQU8sS0FBSyxTQUFTSyxHQUFHbDhCLEdBQWtCLFFBQWZBLEVBQUVBLEVBQUVnMEMsS0FBS2gwQyxFQUFFdXlDLE1BQWMsSUFBSXZ5QyxFQUFFaTBCLEtBQUssSUFBSWowQixFQUFFaTBCLEtBQUssS0FBS2owQixFQUFFaTBCLEtBQUssSUFBSWowQixFQUFFaTBCLElBQUksS0FBS2owQixFQUFFLFNBQVM2dUMsR0FBRzd1QyxHQUFHLEdBQUcsSUFBSUEsRUFBRWkwQixLQUFLLElBQUlqMEIsRUFBRWkwQixJQUFJLE9BQU9qMEIsRUFBRW04QixVQUFVLE1BQU1yOEIsTUFBTWxELEVBQUUsS0FBTSxTQUFTdy9CLEdBQUdwOEIsR0FBRyxPQUFPQSxFQUFFaTBDLEtBQUssS0FDbGIsU0FBU3BDLEdBQUc3eEMsR0FBRyxJQUFJQyxFQUFFRCxFQUFFazBDLElBQWtDLFlBQTlCLElBQVNqMEMsSUFBSUEsRUFBRUQsRUFBRWswQyxJQUFJLElBQUk3akIsS0FBWXB3QixFQUFFLElBQUlrMEMsR0FBRyxHQUFHQyxJQUFJLEVBQUUsU0FBU0MsR0FBR3IwQyxHQUFHLE1BQU0sQ0FBQy9HLFFBQVErRyxHQUFHLFNBQVMyc0IsR0FBRTNzQixHQUFHLEVBQUVvMEMsS0FBS3AwQyxFQUFFL0csUUFBUWs3QyxHQUFHQyxJQUFJRCxHQUFHQyxJQUFJLEtBQUtBLE1BQU0sU0FBU3huQixHQUFFNXNCLEVBQUVDLEdBQUdtMEMsS0FBS0QsR0FBR0MsSUFBSXAwQyxFQUFFL0csUUFBUStHLEVBQUUvRyxRQUFRZ0gsRUFBRSxJQUFJcTBDLEdBQUcsR0FBR2huQixHQUFFK21CLEdBQUdDLElBQUkvbUIsR0FBRThtQixJQUFHLEdBQUlFLEdBQUdELEdBQzVQLFNBQVNFLEdBQUd4MEMsRUFBRUMsR0FBRyxJQUFJcE4sRUFBRW1OLEVBQUVuRyxLQUFLMFIsYUFBYSxJQUFJMVksRUFBRSxPQUFPeWhELEdBQUcsSUFBSXhoRCxFQUFFa04sRUFBRW04QixVQUFVLEdBQUdycEMsR0FBR0EsRUFBRTJoRCw4Q0FBOEN4MEMsRUFBRSxPQUFPbk4sRUFBRTRoRCwwQ0FBMEMsSUFBU3huQixFQUFMdHpCLEVBQUUsR0FBSyxJQUFJc3pCLEtBQUtyNkIsRUFBRStHLEVBQUVzekIsR0FBR2p0QixFQUFFaXRCLEdBQW9ILE9BQWpIcDZCLEtBQUlrTixFQUFFQSxFQUFFbThCLFdBQVlzWSw0Q0FBNEN4MEMsRUFBRUQsRUFBRTAwQywwQ0FBMEM5NkMsR0FBVUEsRUFBRSxTQUFTKzZDLEdBQUczMEMsR0FBeUIsT0FBTyxPQUE3QkEsRUFBRUEsRUFBRXFMLG1CQUE4QyxTQUFTdXBDLEtBQUtqb0IsR0FBRVksSUFBR1osR0FBRVcsSUFBRyxTQUFTdW5CLEdBQUc3MEMsRUFBRUMsRUFBRXBOLEdBQUcsR0FBR3k2QixHQUFFcjBCLFVBQVVxN0MsR0FBRyxNQUFNeDBDLE1BQU1sRCxFQUFFLE1BQU1nd0IsR0FBRVUsR0FBRXJ0QixHQUFHMnNCLEdBQUVXLEdBQUUxNkIsR0FDL2UsU0FBU2lpRCxHQUFHOTBDLEVBQUVDLEVBQUVwTixHQUFHLElBQUlDLEVBQUVrTixFQUFFbThCLFVBQWdDLEdBQXRCbjhCLEVBQUVDLEVBQUVvTCxrQkFBcUIsbUJBQW9CdlksRUFBRWlpRCxnQkFBZ0IsT0FBT2xpRCxFQUF3QixJQUFJLElBQUkrRyxLQUE5QjlHLEVBQUVBLEVBQUVpaUQsa0JBQWlDLEtBQUtuN0MsS0FBS29HLEdBQUcsTUFBTUYsTUFBTWxELEVBQUUsSUFBSXUzQixFQUFHbDBCLElBQUksVUFBVXJHLElBQUksT0FBT2hILEVBQUUsR0FBR0MsRUFBRUMsR0FBRyxTQUFTa2lELEdBQUdoMUMsR0FBeUcsT0FBdEdBLEdBQUdBLEVBQUVBLEVBQUVtOEIsWUFBWW44QixFQUFFaTFDLDJDQUEyQ1gsR0FBR0MsR0FBR2puQixHQUFFcjBCLFFBQVEyekIsR0FBRVUsR0FBRXR0QixHQUFHNHNCLEdBQUVXLEdBQUVBLEdBQUV0MEIsVUFBZSxFQUFHLFNBQVNpOEMsR0FBR2wxQyxFQUFFQyxFQUFFcE4sR0FBRyxJQUFJQyxFQUFFa04sRUFBRW04QixVQUFVLElBQUlycEMsRUFBRSxNQUFNZ04sTUFBTWxELEVBQUUsTUFBTS9KLEdBQUdtTixFQUFFODBDLEdBQUc5MEMsRUFBRUMsRUFBRXMwQyxJQUFJemhELEVBQUVtaUQsMENBQTBDajFDLEVBQUUyc0IsR0FBRVksSUFBR1osR0FBRVcsSUFBR1YsR0FBRVUsR0FBRXR0QixJQUFJMnNCLEdBQUVZLElBQUdYLEdBQUVXLEdBQUUxNkIsR0FDN2UsSUFBSXNpRCxHQUFHLEtBQUtDLEdBQUcsS0FBS0MsR0FBRy9oRCxFQUFFMHNDLHlCQUF5QnNWLEdBQUdoaUQsRUFBRW90QywwQkFBMEI2VSxHQUFHamlELEVBQUVraUQsd0JBQXdCQyxHQUFHbmlELEVBQUVvaUQscUJBQXFCQyxHQUFHcmlELEVBQUVzaUQsc0JBQXNCQyxHQUFHdmlELEVBQUUwdUMsYUFBYThULEdBQUd4aUQsRUFBRXlpRCxpQ0FBaUNDLEdBQUcxaUQsRUFBRTJpRCwyQkFBMkJDLEdBQUc1aUQsRUFBRWd3Qyw4QkFBOEI2UyxHQUFHN2lELEVBQUVxdEMsd0JBQXdCeVYsR0FBRzlpRCxFQUFFK2lELHFCQUFxQkMsR0FBR2hqRCxFQUFFaWpELHNCQUFzQkMsR0FBRyxHQUFHQyxRQUFHLElBQVNkLEdBQUdBLEdBQUcsYUFBYWUsR0FBRyxLQUFLQyxHQUFHLEtBQUtDLElBQUcsRUFBR0MsR0FBR2hCLEtBQUtwb0IsR0FBRSxJQUFJb3BCLEdBQUdoQixHQUFHLFdBQVcsT0FBT0EsS0FBS2dCLElBQ3RkLFNBQVNDLEtBQUssT0FBT2hCLE1BQU0sS0FBS0UsR0FBRyxPQUFPLEdBQUcsS0FBS0UsR0FBRyxPQUFPLEdBQUcsS0FBS0MsR0FBRyxPQUFPLEdBQUcsS0FBS0MsR0FBRyxPQUFPLEdBQUcsS0FBS0UsR0FBRyxPQUFPLEdBQUcsUUFBUSxNQUFNeDJDLE1BQU1sRCxFQUFFLE9BQVEsU0FBU202QyxHQUFHLzJDLEdBQUcsT0FBT0EsR0FBRyxLQUFLLEdBQUcsT0FBT2cyQyxHQUFHLEtBQUssR0FBRyxPQUFPRSxHQUFHLEtBQUssR0FBRyxPQUFPQyxHQUFHLEtBQUssR0FBRyxPQUFPQyxHQUFHLEtBQUssR0FBRyxPQUFPRSxHQUFHLFFBQVEsTUFBTXgyQyxNQUFNbEQsRUFBRSxPQUFRLFNBQVNvNkMsR0FBR2gzQyxFQUFFQyxHQUFXLE9BQVJELEVBQUUrMkMsR0FBRy8yQyxHQUFVcTFDLEdBQUdyMUMsRUFBRUMsR0FBRyxTQUFTZzNDLEdBQUdqM0MsRUFBRUMsRUFBRXBOLEdBQVcsT0FBUm1OLEVBQUUrMkMsR0FBRy8yQyxHQUFVczFDLEdBQUd0MUMsRUFBRUMsRUFBRXBOLEdBQUcsU0FBU3FrRCxLQUFLLEdBQUcsT0FBT1AsR0FBRyxDQUFDLElBQUkzMkMsRUFBRTIyQyxHQUFHQSxHQUFHLEtBQUtwQixHQUFHdjFDLEdBQUdtM0MsS0FDM2EsU0FBU0EsS0FBSyxJQUFJUCxJQUFJLE9BQU9GLEdBQUcsQ0FBQ0UsSUFBRyxFQUFHLElBQUk1MkMsRUFBRSxFQUFFLElBQUksSUFBSUMsRUFBRXkyQyxHQUFHTSxHQUFHLElBQUcsV0FBVyxLQUFLaDNDLEVBQUVDLEVBQUVyTCxPQUFPb0wsSUFBSSxDQUFDLElBQUluTixFQUFFb04sRUFBRUQsR0FBRyxHQUFHbk4sRUFBRUEsR0FBRSxTQUFVLE9BQU9BLE9BQU02akQsR0FBRyxLQUFLLE1BQU03akQsR0FBRyxNQUFNLE9BQU82akQsS0FBS0EsR0FBR0EsR0FBRzN1QyxNQUFNL0gsRUFBRSxJQUFJczFDLEdBQUdVLEdBQUdrQixJQUFJcmtELEVBQUcsUUFBUStqRCxJQUFHLElBQUssSUFBSVEsR0FBR2hsQixFQUFHOUQsd0JBQXdCLFNBQVMrb0IsR0FBR3IzQyxFQUFFQyxHQUFHLEdBQUdELEdBQUdBLEVBQUV3TCxhQUFhLENBQTRCLElBQUksSUFBSTNZLEtBQW5Db04sRUFBRXJOLEVBQUUsR0FBR3FOLEdBQUdELEVBQUVBLEVBQUV3TCxrQkFBNEIsSUFBU3ZMLEVBQUVwTixLQUFLb04sRUFBRXBOLEdBQUdtTixFQUFFbk4sSUFBSSxPQUFPb04sRUFBRSxPQUFPQSxFQUFFLElBQUlxM0MsR0FBR2pELEdBQUcsTUFBTWtELEdBQUcsS0FBS0MsR0FBRyxLQUFLQyxHQUFHLEtBQUssU0FBU0MsS0FBS0QsR0FBR0QsR0FBR0QsR0FBRyxLQUM1YixTQUFTSSxHQUFHMzNDLEdBQUcsSUFBSUMsRUFBRXEzQyxHQUFHcitDLFFBQVEwekIsR0FBRTJxQixJQUFJdDNDLEVBQUVuRyxLQUFLdzFCLFNBQVNILGNBQWNqdkIsRUFBRSxTQUFTMjNDLEdBQUc1M0MsRUFBRUMsR0FBRyxLQUFLLE9BQU9ELEdBQUcsQ0FBQyxJQUFJbk4sRUFBRW1OLEVBQUUwOUIsVUFBVSxJQUFJMTlCLEVBQUU2M0MsV0FBVzUzQyxLQUFLQSxFQUFFLElBQUcsT0FBT3BOLElBQUlBLEVBQUVnbEQsV0FBVzUzQyxLQUFLQSxFQUFFLE1BQVdwTixFQUFFZ2xELFlBQVk1M0MsT0FBT0QsRUFBRTYzQyxZQUFZNTNDLEVBQUUsT0FBT3BOLElBQUlBLEVBQUVnbEQsWUFBWTUzQyxHQUFHRCxFQUFFQSxFQUFFMjlCLFFBQVEsU0FBU21hLEdBQUc5M0MsRUFBRUMsR0FBR3MzQyxHQUFHdjNDLEVBQUV5M0MsR0FBR0QsR0FBRyxLQUFzQixRQUFqQngzQyxFQUFFQSxFQUFFdkgsZUFBdUIsT0FBT3VILEVBQUUrM0MsZUFBZSxJQUFLLzNDLEVBQUVnNEMsTUFBTS8zQyxLQUFLZzRDLElBQUcsR0FBSWo0QyxFQUFFKzNDLGFBQWEsTUFDdlksU0FBU0csR0FBR2w0QyxFQUFFQyxHQUFHLEdBQUd3M0MsS0FBS3ozQyxJQUFHLElBQUtDLEdBQUcsSUFBSUEsRUFBbUcsR0FBN0YsaUJBQWtCQSxHQUFHLGFBQWFBLElBQUV3M0MsR0FBR3ozQyxFQUFFQyxFQUFFLFlBQVdBLEVBQUUsQ0FBQzlJLFFBQVE2SSxFQUFFbTRDLGFBQWFsNEMsRUFBRWpLLEtBQUssTUFBUyxPQUFPd2hELEdBQUcsQ0FBQyxHQUFHLE9BQU9ELEdBQUcsTUFBTXozQyxNQUFNbEQsRUFBRSxNQUFNNDZDLEdBQUd2M0MsRUFBRXMzQyxHQUFHOStDLGFBQWEsQ0FBQ3UvQyxNQUFNLEVBQUVELGFBQWE5M0MsRUFBRW00QyxXQUFXLFdBQVdaLEdBQUdBLEdBQUd4aEQsS0FBS2lLLEVBQUUsT0FBT0QsRUFBRWt2QixjQUFjLElBQUltcEIsSUFBRyxFQUFHLFNBQVNDLEdBQUd0NEMsR0FBR0EsRUFBRXU0QyxZQUFZLENBQUNDLFVBQVV4NEMsRUFBRTg5QixjQUFjMmEsZ0JBQWdCLEtBQUtDLGVBQWUsS0FBS0MsT0FBTyxDQUFDQyxRQUFRLE1BQU1DLFFBQVEsTUFDMWEsU0FBU0MsR0FBRzk0QyxFQUFFQyxHQUFHRCxFQUFFQSxFQUFFdTRDLFlBQVl0NEMsRUFBRXM0QyxjQUFjdjRDLElBQUlDLEVBQUVzNEMsWUFBWSxDQUFDQyxVQUFVeDRDLEVBQUV3NEMsVUFBVUMsZ0JBQWdCejRDLEVBQUV5NEMsZ0JBQWdCQyxlQUFlMTRDLEVBQUUwNEMsZUFBZUMsT0FBTzM0QyxFQUFFMjRDLE9BQU9FLFFBQVE3NEMsRUFBRTY0QyxVQUFVLFNBQVNFLEdBQUcvNEMsRUFBRUMsR0FBRyxNQUFNLENBQUMrNEMsVUFBVWg1QyxFQUFFaTVDLEtBQUtoNUMsRUFBRWcwQixJQUFJLEVBQUU1N0IsUUFBUSxLQUFLOUMsU0FBUyxLQUFLUyxLQUFLLE1BQU0sU0FBU2tqRCxHQUFHbDVDLEVBQUVDLEdBQW1CLEdBQUcsUUFBbkJELEVBQUVBLEVBQUV1NEMsYUFBd0IsQ0FBWSxJQUFJMWxELEdBQWZtTixFQUFFQSxFQUFFMjRDLFFBQWVDLFFBQVEsT0FBTy9sRCxFQUFFb04sRUFBRWpLLEtBQUtpSyxHQUFHQSxFQUFFakssS0FBS25ELEVBQUVtRCxLQUFLbkQsRUFBRW1ELEtBQUtpSyxHQUFHRCxFQUFFNDRDLFFBQVEzNEMsR0FDclosU0FBU2s1QyxHQUFHbjVDLEVBQUVDLEdBQUcsSUFBSXBOLEVBQUVtTixFQUFFdTRDLFlBQVl6bEQsRUFBRWtOLEVBQUUwOUIsVUFBVSxHQUFHLE9BQU81cUMsR0FBb0JELEtBQWhCQyxFQUFFQSxFQUFFeWxELGFBQW1CLENBQUMsSUFBSTMrQyxFQUFFLEtBQUtzekIsRUFBRSxLQUF5QixHQUFHLFFBQXZCcjZCLEVBQUVBLEVBQUU0bEQsaUJBQTRCLENBQUMsRUFBRSxDQUFDLElBQUl4ckIsRUFBRSxDQUFDK3JCLFVBQVVubUQsRUFBRW1tRCxVQUFVQyxLQUFLcG1ELEVBQUVvbUQsS0FBS2hsQixJQUFJcGhDLEVBQUVvaEMsSUFBSTU3QixRQUFReEYsRUFBRXdGLFFBQVE5QyxTQUFTMUMsRUFBRTBDLFNBQVNTLEtBQUssTUFBTSxPQUFPazNCLEVBQUV0ekIsRUFBRXN6QixFQUFFRCxFQUFFQyxFQUFFQSxFQUFFbDNCLEtBQUtpM0IsRUFBRXA2QixFQUFFQSxFQUFFbUQsV0FBVyxPQUFPbkQsR0FBRyxPQUFPcTZCLEVBQUV0ekIsRUFBRXN6QixFQUFFanRCLEVBQUVpdEIsRUFBRUEsRUFBRWwzQixLQUFLaUssT0FBT3JHLEVBQUVzekIsRUFBRWp0QixFQUFpSCxPQUEvR3BOLEVBQUUsQ0FBQzJsRCxVQUFVMWxELEVBQUUwbEQsVUFBVUMsZ0JBQWdCNytDLEVBQUU4K0MsZUFBZXhyQixFQUFFeXJCLE9BQU83bEQsRUFBRTZsRCxPQUFPRSxRQUFRL2xELEVBQUUrbEQsY0FBUzc0QyxFQUFFdTRDLFlBQVkxbEQsR0FBNEIsUUFBbkJtTixFQUFFbk4sRUFBRTZsRCxnQkFBd0I3bEQsRUFBRTRsRCxnQkFBZ0J4NEMsRUFBRUQsRUFBRWhLLEtBQ25maUssRUFBRXBOLEVBQUU2bEQsZUFBZXo0QyxFQUNuQixTQUFTbTVDLEdBQUdwNUMsRUFBRUMsRUFBRXBOLEVBQUVDLEdBQUcsSUFBSThHLEVBQUVvRyxFQUFFdTRDLFlBQVlGLElBQUcsRUFBRyxJQUFJbnJCLEVBQUV0ekIsRUFBRTYrQyxnQkFBZ0J4ckIsRUFBRXJ6QixFQUFFOCtDLGVBQWUxckIsRUFBRXB6QixFQUFFKytDLE9BQU9DLFFBQVEsR0FBRyxPQUFPNXJCLEVBQUUsQ0FBQ3B6QixFQUFFKytDLE9BQU9DLFFBQVEsS0FBSyxJQUFJbjFDLEVBQUV1cEIsRUFBRXY2QixFQUFFZ1IsRUFBRXpOLEtBQUt5TixFQUFFek4sS0FBSyxLQUFLLE9BQU9pM0IsRUFBRUMsRUFBRXo2QixFQUFFdzZCLEVBQUVqM0IsS0FBS3ZELEVBQUV3NkIsRUFBRXhwQixFQUFFLElBQUl4UCxFQUFFK0wsRUFBRTA5QixVQUFVLEdBQUcsT0FBT3pwQyxFQUFFLENBQWlCLElBQUkyM0IsR0FBcEIzM0IsRUFBRUEsRUFBRXNrRCxhQUFvQkcsZUFBZTlzQixJQUFJcUIsSUFBSSxPQUFPckIsRUFBRTMzQixFQUFFd2tELGdCQUFnQmhtRCxFQUFFbTVCLEVBQUU1MUIsS0FBS3ZELEVBQUV3QixFQUFFeWtELGVBQWVqMUMsSUFBSSxHQUFHLE9BQU95cEIsRUFBRSxDQUE4QixJQUE3QnRCLEVBQUVoeUIsRUFBRTQrQyxVQUFVdnJCLEVBQUUsRUFBRWg1QixFQUFFeEIsRUFBRWdSLEVBQUUsT0FBTyxDQUFDdXBCLEVBQUVFLEVBQUUrckIsS0FBSyxJQUFJM2tELEVBQUU0NEIsRUFBRThyQixVQUFVLElBQUlsbUQsRUFBRWs2QixLQUFLQSxFQUFFLENBQUMsT0FBTy80QixJQUFJQSxFQUFFQSxFQUFFK0IsS0FBSyxDQUFDZ2pELFVBQVUxa0QsRUFBRTJrRCxLQUFLLEVBQUVobEIsSUFBSS9HLEVBQUUrRyxJQUFJNTdCLFFBQVE2MEIsRUFBRTcwQixRQUFROUMsU0FBUzIzQixFQUFFMzNCLFNBQ3JmUyxLQUFLLE9BQU9nSyxFQUFFLENBQUMsSUFBSWtzQixFQUFFbHNCLEVBQUVyRCxFQUFFdXdCLEVBQVUsT0FBUkYsRUFBRS9zQixFQUFFM0wsRUFBRXpCLEVBQVM4SixFQUFFczNCLEtBQUssS0FBSyxFQUFjLEdBQUcsbUJBQWYvSCxFQUFFdnZCLEVBQUV0RSxTQUFpQyxDQUFDdXpCLEVBQUVNLEVBQUV2NUIsS0FBSzJCLEVBQUVzM0IsRUFBRW9CLEdBQUcsTUFBTWh0QixFQUFFNHJCLEVBQUVNLEVBQUUsTUFBTWxzQixFQUFFLEtBQUssRUFBRWtzQixFQUFFMFIsT0FBZSxLQUFUMVIsRUFBRTBSLE1BQVksR0FBRyxLQUFLLEVBQXNELEdBQUcsT0FBM0M1USxFQUFFLG1CQUFkZCxFQUFFdnZCLEVBQUV0RSxTQUFnQzZ6QixFQUFFdjVCLEtBQUsyQixFQUFFczNCLEVBQUVvQixHQUFHZCxHQUEwQixNQUFNbHNCLEVBQUU0ckIsRUFBRWg1QixFQUFFLEdBQUdnNUIsRUFBRW9CLEdBQUcsTUFBTWh0QixFQUFFLEtBQUssRUFBRXE0QyxJQUFHLEdBQUksT0FBT25yQixFQUFFMzNCLFdBQVd5SyxFQUFFNDlCLE9BQU8sR0FBZSxRQUFaNVEsRUFBRXB6QixFQUFFaS9DLFNBQWlCai9DLEVBQUVpL0MsUUFBUSxDQUFDM3JCLEdBQUdGLEVBQUU5MkIsS0FBS2czQixTQUFTNTRCLEVBQUUsQ0FBQzBrRCxVQUFVMWtELEVBQUUya0QsS0FBS2pzQixFQUFFaUgsSUFBSS9HLEVBQUUrRyxJQUFJNTdCLFFBQVE2MEIsRUFBRTcwQixRQUFROUMsU0FBUzIzQixFQUFFMzNCLFNBQVNTLEtBQUssTUFBTSxPQUFPL0IsR0FBR3hCLEVBQUV3QixFQUFFSyxFQUFFbVAsRUFBRW1vQixHQUFHMzNCLEVBQUVBLEVBQUUrQixLQUFLMUIsRUFBRTI0QixHQUFHRCxFQUFXLEdBQUcsUUFBWkUsRUFBRUEsRUFBRWwzQixNQUMxZSxJQUFzQixRQUFuQmczQixFQUFFcHpCLEVBQUUrK0MsT0FBT0MsU0FBaUIsTUFBVzFyQixFQUFFRixFQUFFaDNCLEtBQUtnM0IsRUFBRWgzQixLQUFLLEtBQUs0RCxFQUFFOCtDLGVBQWUxckIsRUFBRXB6QixFQUFFKytDLE9BQU9DLFFBQVEsTUFBYyxPQUFPM2tELElBQUl3UCxFQUFFbW9CLEdBQUdoeUIsRUFBRTQrQyxVQUFVLzBDLEVBQUU3SixFQUFFNitDLGdCQUFnQmhtRCxFQUFFbUgsRUFBRTgrQyxlQUFlemtELEVBQUVvbEQsSUFBSXBzQixFQUFFanRCLEVBQUVnNEMsTUFBTS9xQixFQUFFanRCLEVBQUU4OUIsY0FBY2xTLEdBQUcsU0FBUzB0QixHQUFHdDVDLEVBQUVDLEVBQUVwTixHQUE4QixHQUEzQm1OLEVBQUVDLEVBQUU0NEMsUUFBUTU0QyxFQUFFNDRDLFFBQVEsS0FBUSxPQUFPNzRDLEVBQUUsSUFBSUMsRUFBRSxFQUFFQSxFQUFFRCxFQUFFcEwsT0FBT3FMLElBQUksQ0FBQyxJQUFJbk4sRUFBRWtOLEVBQUVDLEdBQUdyRyxFQUFFOUcsRUFBRXlDLFNBQVMsR0FBRyxPQUFPcUUsRUFBRSxDQUFxQixHQUFwQjlHLEVBQUV5QyxTQUFTLEtBQUt6QyxFQUFFRCxFQUFLLG1CQUFvQitHLEVBQUUsTUFBTWtHLE1BQU1sRCxFQUFFLElBQUloRCxJQUFJQSxFQUFFakgsS0FBS0csS0FBSyxJQUFJeW1ELElBQUcsSUFBS3BwQixFQUFHdEIsV0FBVzFDLEtBQzNiLFNBQVNxdEIsR0FBR3g1QyxFQUFFQyxFQUFFcE4sRUFBRUMsR0FBOEJELEVBQUUsT0FBWEEsRUFBRUEsRUFBRUMsRUFBdEJtTixFQUFFRCxFQUFFODlCLGdCQUE4Qzc5QixFQUFFck4sRUFBRSxHQUFHcU4sRUFBRXBOLEdBQUdtTixFQUFFODlCLGNBQWNqckMsRUFBRSxJQUFJbU4sRUFBRWc0QyxRQUFRaDRDLEVBQUV1NEMsWUFBWUMsVUFBVTNsRCxHQUMzSSxJQUFJNG1ELEdBQUcsQ0FBQzV0QixVQUFVLFNBQVM3ckIsR0FBRyxTQUFPQSxFQUFFQSxFQUFFMDVDLGtCQUFpQmpjLEdBQUd6OUIsS0FBS0EsR0FBTWdzQixnQkFBZ0IsU0FBU2hzQixFQUFFQyxFQUFFcE4sR0FBR21OLEVBQUVBLEVBQUUwNUMsZ0JBQWdCLElBQUk1bUQsRUFBRTZtRCxLQUFLLy9DLEVBQUVnZ0QsR0FBRzU1QyxHQUFHa3RCLEVBQUU2ckIsR0FBR2ptRCxFQUFFOEcsR0FBR3N6QixFQUFFNzBCLFFBQVE0SCxFQUFFLE1BQVNwTixJQUFjcTZCLEVBQUUzM0IsU0FBUzFDLEdBQUdxbUQsR0FBR2w1QyxFQUFFa3RCLEdBQUcyc0IsR0FBRzc1QyxFQUFFcEcsRUFBRTlHLElBQUlpNUIsb0JBQW9CLFNBQVMvckIsRUFBRUMsRUFBRXBOLEdBQUdtTixFQUFFQSxFQUFFMDVDLGdCQUFnQixJQUFJNW1ELEVBQUU2bUQsS0FBSy8vQyxFQUFFZ2dELEdBQUc1NUMsR0FBR2t0QixFQUFFNnJCLEdBQUdqbUQsRUFBRThHLEdBQUdzekIsRUFBRStHLElBQUksRUFBRS9HLEVBQUU3MEIsUUFBUTRILEVBQUUsTUFBU3BOLElBQWNxNkIsRUFBRTMzQixTQUFTMUMsR0FBR3FtRCxHQUFHbDVDLEVBQUVrdEIsR0FBRzJzQixHQUFHNzVDLEVBQUVwRyxFQUFFOUcsSUFBSWc1QixtQkFBbUIsU0FBUzlyQixFQUFFQyxHQUFHRCxFQUFFQSxFQUFFMDVDLGdCQUFnQixJQUFJN21ELEVBQUU4bUQsS0FBSzdtRCxFQUFFOG1ELEdBQUc1NUMsR0FBR3BHLEVBQUVtL0MsR0FBR2xtRCxFQUFFQyxHQUFHOEcsRUFBRXE2QixJQUFJLEVBQUUsTUFBU2gwQixJQUFjckcsRUFBRXJFLFNBQ2pmMEssR0FBR2k1QyxHQUFHbDVDLEVBQUVwRyxHQUFHaWdELEdBQUc3NUMsRUFBRWxOLEVBQUVELEtBQUssU0FBU2luRCxHQUFHOTVDLEVBQUVDLEVBQUVwTixFQUFFQyxFQUFFOEcsRUFBRXN6QixFQUFFRCxHQUFpQixNQUFNLG1CQUFwQmp0QixFQUFFQSxFQUFFbThCLFdBQXNDdFIsc0JBQXNCN3FCLEVBQUU2cUIsc0JBQXNCLzNCLEVBQUVvNkIsRUFBRUQsSUFBR2h0QixFQUFFN0wsWUFBVzZMLEVBQUU3TCxVQUFVcTRCLHdCQUFzQnFqQixHQUFHajlDLEVBQUVDLEtBQUtnOUMsR0FBR2wyQyxFQUFFc3pCLElBQy9NLFNBQVM2c0IsR0FBRy81QyxFQUFFQyxFQUFFcE4sR0FBRyxJQUFJQyxHQUFFLEVBQUc4RyxFQUFFMDZDLEdBQU9wbkIsRUFBRWp0QixFQUFFcUwsWUFBMlcsTUFBL1YsaUJBQWtCNGhCLEdBQUcsT0FBT0EsRUFBRUEsRUFBRWdyQixHQUFHaHJCLElBQUl0ekIsRUFBRSs2QyxHQUFHMTBDLEdBQUdzMEMsR0FBR2puQixHQUFFcjBCLFFBQXlCaTBCLEdBQUdwNkIsRUFBRSxPQUF0QkEsRUFBRW1OLEVBQUVzTCxlQUF3Q2lwQyxHQUFHeDBDLEVBQUVwRyxHQUFHMDZDLElBQUlyMEMsRUFBRSxJQUFJQSxFQUFFcE4sRUFBRXE2QixHQUFHbHRCLEVBQUU4OUIsY0FBYyxPQUFPNzlCLEVBQUUvSCxZQUFPLElBQVMrSCxFQUFFL0gsTUFBTStILEVBQUUvSCxNQUFNLEtBQUsrSCxFQUFFbXNCLFFBQVFxdEIsR0FBR3o1QyxFQUFFbThCLFVBQVVsOEIsRUFBRUEsRUFBRXk1QyxnQkFBZ0IxNUMsRUFBRWxOLEtBQUlrTixFQUFFQSxFQUFFbThCLFdBQVlzWSw0Q0FBNEM3NkMsRUFBRW9HLEVBQUUwMEMsMENBQTBDeG5CLEdBQVVqdEIsRUFDM1osU0FBUys1QyxHQUFHaDZDLEVBQUVDLEVBQUVwTixFQUFFQyxHQUFHa04sRUFBRUMsRUFBRS9ILE1BQU0sbUJBQW9CK0gsRUFBRWc2QywyQkFBMkJoNkMsRUFBRWc2QywwQkFBMEJwbkQsRUFBRUMsR0FBRyxtQkFBb0JtTixFQUFFaTZDLGtDQUFrQ2o2QyxFQUFFaTZDLGlDQUFpQ3JuRCxFQUFFQyxHQUFHbU4sRUFBRS9ILFFBQVE4SCxHQUFHeTVDLEdBQUcxdEIsb0JBQW9COXJCLEVBQUVBLEVBQUUvSCxNQUFNLE1BQy9QLFNBQVNpaUQsR0FBR242QyxFQUFFQyxFQUFFcE4sRUFBRUMsR0FBRyxJQUFJOEcsRUFBRW9HLEVBQUVtOEIsVUFBVXZpQyxFQUFFNEIsTUFBTTNJLEVBQUUrRyxFQUFFMUIsTUFBTThILEVBQUU4OUIsY0FBY2xrQyxFQUFFdXlCLEtBQUtvdEIsR0FBR2pCLEdBQUd0NEMsR0FBRyxJQUFJa3RCLEVBQUVqdEIsRUFBRXFMLFlBQVksaUJBQWtCNGhCLEdBQUcsT0FBT0EsRUFBRXR6QixFQUFFekMsUUFBUStnRCxHQUFHaHJCLElBQUlBLEVBQUV5bkIsR0FBRzEwQyxHQUFHczBDLEdBQUdqbkIsR0FBRXIwQixRQUFRVyxFQUFFekMsUUFBUXE5QyxHQUFHeDBDLEVBQUVrdEIsSUFBSWtzQixHQUFHcDVDLEVBQUVuTixFQUFFK0csRUFBRTlHLEdBQUc4RyxFQUFFMUIsTUFBTThILEVBQUU4OUIsY0FBMkMsbUJBQTdCNVEsRUFBRWp0QixFQUFFMEwsNEJBQWlENnRDLEdBQUd4NUMsRUFBRUMsRUFBRWl0QixFQUFFcjZCLEdBQUcrRyxFQUFFMUIsTUFBTThILEVBQUU4OUIsZUFBZSxtQkFBb0I3OUIsRUFBRTBMLDBCQUEwQixtQkFBb0IvUixFQUFFd2dELHlCQUF5QixtQkFBb0J4Z0QsRUFBRXlnRCwyQkFBMkIsbUJBQW9CemdELEVBQUUwZ0QscUJBQ3ZlcjZDLEVBQUVyRyxFQUFFMUIsTUFBTSxtQkFBb0IwQixFQUFFMGdELG9CQUFvQjFnRCxFQUFFMGdELHFCQUFxQixtQkFBb0IxZ0QsRUFBRXlnRCwyQkFBMkJ6Z0QsRUFBRXlnRCw0QkFBNEJwNkMsSUFBSXJHLEVBQUUxQixPQUFPdWhELEdBQUcxdEIsb0JBQW9CbnlCLEVBQUVBLEVBQUUxQixNQUFNLE1BQU1raEQsR0FBR3A1QyxFQUFFbk4sRUFBRStHLEVBQUU5RyxHQUFHOEcsRUFBRTFCLE1BQU04SCxFQUFFODlCLGVBQWUsbUJBQW9CbGtDLEVBQUU0bUIsb0JBQW9CeGdCLEVBQUU0OUIsT0FBTyxHQUFHLElBQUkyYyxHQUFHNzFDLE1BQU1ncEIsUUFDdlQsU0FBUzhzQixHQUFHeDZDLEVBQUVDLEVBQUVwTixHQUFXLEdBQUcsUUFBWG1OLEVBQUVuTixFQUFFeUosTUFBaUIsbUJBQW9CMEQsR0FBRyxpQkFBa0JBLEVBQUUsQ0FBQyxHQUFHbk4sRUFBRXU2QixPQUFPLENBQVksR0FBWHY2QixFQUFFQSxFQUFFdTZCLE9BQVksQ0FBQyxHQUFHLElBQUl2NkIsRUFBRW9oQyxJQUFJLE1BQU1uMEIsTUFBTWxELEVBQUUsTUFBTSxJQUFJOUosRUFBRUQsRUFBRXNwQyxVQUFVLElBQUlycEMsRUFBRSxNQUFNZ04sTUFBTWxELEVBQUUsSUFBSW9ELElBQUksSUFBSXBHLEVBQUUsR0FBR29HLEVBQUUsT0FBRyxPQUFPQyxHQUFHLE9BQU9BLEVBQUUzRCxLQUFLLG1CQUFvQjJELEVBQUUzRCxLQUFLMkQsRUFBRTNELElBQUltK0MsYUFBYTdnRCxFQUFTcUcsRUFBRTNELE1BQUkyRCxFQUFFLFNBQVNELEdBQUcsSUFBSUMsRUFBRW5OLEVBQUVxNUIsS0FBS2xzQixJQUFJczVDLEtBQUt0NUMsRUFBRW5OLEVBQUVxNUIsS0FBSyxJQUFJLE9BQU9uc0IsU0FBU0MsRUFBRXJHLEdBQUdxRyxFQUFFckcsR0FBR29HLElBQUt5NkMsV0FBVzdnRCxFQUFTcUcsR0FBRSxHQUFHLGlCQUFrQkQsRUFBRSxNQUFNRixNQUFNbEQsRUFBRSxNQUFNLElBQUkvSixFQUFFdTZCLE9BQU8sTUFBTXR0QixNQUFNbEQsRUFBRSxJQUFJb0QsSUFBSyxPQUFPQSxFQUNoZSxTQUFTMDZDLEdBQUcxNkMsRUFBRUMsR0FBRyxHQUFHLGFBQWFELEVBQUVuRyxLQUFLLE1BQU1pRyxNQUFNbEQsRUFBRSxHQUFHLG9CQUFvQjFKLE9BQU9rQixVQUFVdVMsU0FBU2hVLEtBQUtzTixHQUFHLHFCQUFxQi9NLE9BQU9pQyxLQUFLOEssR0FBRzRHLEtBQUssTUFBTSxJQUFJNUcsSUFDbEssU0FBUzA2QyxHQUFHMzZDLEdBQUcsU0FBU0MsRUFBRUEsRUFBRXBOLEdBQUcsR0FBR21OLEVBQUUsQ0FBQyxJQUFJbE4sRUFBRW1OLEVBQUUyNkMsV0FBVyxPQUFPOW5ELEdBQUdBLEVBQUUrbkQsV0FBV2hvRCxFQUFFb04sRUFBRTI2QyxXQUFXL25ELEdBQUdvTixFQUFFNjZDLFlBQVk3NkMsRUFBRTI2QyxXQUFXL25ELEVBQUVBLEVBQUVnb0QsV0FBVyxLQUFLaG9ELEVBQUUrcUMsTUFBTSxHQUFHLFNBQVMvcUMsRUFBRUEsRUFBRUMsR0FBRyxJQUFJa04sRUFBRSxPQUFPLEtBQUssS0FBSyxPQUFPbE4sR0FBR21OLEVBQUVwTixFQUFFQyxHQUFHQSxFQUFFQSxFQUFFcXJDLFFBQVEsT0FBTyxLQUFLLFNBQVNyckMsRUFBRWtOLEVBQUVDLEdBQUcsSUFBSUQsRUFBRSxJQUFJd1IsSUFBSSxPQUFPdlIsR0FBRyxPQUFPQSxFQUFFbE0sSUFBSWlNLEVBQUU2UyxJQUFJNVMsRUFBRWxNLElBQUlrTSxHQUFHRCxFQUFFNlMsSUFBSTVTLEVBQUVpRSxNQUFNakUsR0FBR0EsRUFBRUEsRUFBRWsrQixRQUFRLE9BQU9uK0IsRUFBRSxTQUFTcEcsRUFBRW9HLEVBQUVDLEdBQXNDLE9BQW5DRCxFQUFFKzZDLEdBQUcvNkMsRUFBRUMsSUFBS2lFLE1BQU0sRUFBRWxFLEVBQUVtK0IsUUFBUSxLQUFZbitCLEVBQUUsU0FBU2t0QixFQUFFanRCLEVBQUVwTixFQUFFQyxHQUFhLE9BQVZtTixFQUFFaUUsTUFBTXBSLEVBQU1rTixFQUE0QixRQUFqQmxOLEVBQUVtTixFQUFFeTlCLFlBQTZCNXFDLEVBQUVBLEVBQUVvUixPQUFRclIsR0FBR29OLEVBQUUyOUIsTUFBTSxFQUNwZi9xQyxHQUFHQyxHQUFFbU4sRUFBRTI5QixNQUFNLEVBQVMvcUMsR0FEb2FBLEVBQ2xhLFNBQVNvNkIsRUFBRWh0QixHQUFzQyxPQUFuQ0QsR0FBRyxPQUFPQyxFQUFFeTlCLFlBQVl6OUIsRUFBRTI5QixNQUFNLEdBQVUzOUIsRUFBRSxTQUFTK3NCLEVBQUVodEIsRUFBRUMsRUFBRXBOLEVBQUVDLEdBQUcsT0FBRyxPQUFPbU4sR0FBRyxJQUFJQSxFQUFFZzBCLE1BQVdoMEIsRUFBRSs2QyxHQUFHbm9ELEVBQUVtTixFQUFFck0sS0FBS2IsSUFBSzZxQyxPQUFPMzlCLEVBQUVDLEtBQUVBLEVBQUVyRyxFQUFFcUcsRUFBRXBOLElBQUs4cUMsT0FBTzM5QixFQUFTQyxHQUFFLFNBQVN3RCxFQUFFekQsRUFBRUMsRUFBRXBOLEVBQUVDLEdBQUcsT0FBRyxPQUFPbU4sR0FBR0EsRUFBRWc3QyxjQUFjcG9ELEVBQUVnSCxPQUFZL0csRUFBRThHLEVBQUVxRyxFQUFFcE4sRUFBRTJJLFFBQVNjLElBQUlrK0MsR0FBR3g2QyxFQUFFQyxFQUFFcE4sR0FBR0MsRUFBRTZxQyxPQUFPMzlCLEVBQUVsTixLQUFFQSxFQUFFb29ELEdBQUdyb0QsRUFBRWdILEtBQUtoSCxFQUFFa0IsSUFBSWxCLEVBQUUySSxNQUFNLEtBQUt3RSxFQUFFck0sS0FBS2IsSUFBS3dKLElBQUlrK0MsR0FBR3g2QyxFQUFFQyxFQUFFcE4sR0FBR0MsRUFBRTZxQyxPQUFPMzlCLEVBQVNsTixHQUFFLFNBQVNMLEVBQUV1TixFQUFFQyxFQUFFcE4sRUFBRUMsR0FBRyxPQUFHLE9BQU9tTixHQUFHLElBQUlBLEVBQUVnMEIsS0FBS2gwQixFQUFFazhCLFVBQVVnRSxnQkFBZ0J0dEMsRUFBRXN0QyxlQUFlbGdDLEVBQUVrOEIsVUFBVWdmLGlCQUFpQnRvRCxFQUFFc29ELGlCQUFzQmw3QyxFQUNyZ0JtN0MsR0FBR3ZvRCxFQUFFbU4sRUFBRXJNLEtBQUtiLElBQUs2cUMsT0FBTzM5QixFQUFFQyxLQUFFQSxFQUFFckcsRUFBRXFHLEVBQUVwTixFQUFFdUUsVUFBVSxLQUFNdW1DLE9BQU8zOUIsRUFBU0MsR0FBRSxTQUFTaE0sRUFBRStMLEVBQUVDLEVBQUVwTixFQUFFQyxFQUFFbzZCLEdBQUcsT0FBRyxPQUFPanRCLEdBQUcsSUFBSUEsRUFBRWcwQixNQUFXaDBCLEVBQUVvN0MsR0FBR3hvRCxFQUFFbU4sRUFBRXJNLEtBQUtiLEVBQUVvNkIsSUFBS3lRLE9BQU8zOUIsRUFBRUMsS0FBRUEsRUFBRXJHLEVBQUVxRyxFQUFFcE4sSUFBSzhxQyxPQUFPMzlCLEVBQVNDLEdBQUUsU0FBUzJyQixFQUFFNXJCLEVBQUVDLEVBQUVwTixHQUFHLEdBQUcsaUJBQWtCb04sR0FBRyxpQkFBa0JBLEVBQUUsT0FBT0EsRUFBRSs2QyxHQUFHLEdBQUcvNkMsRUFBRUQsRUFBRXJNLEtBQUtkLElBQUs4cUMsT0FBTzM5QixFQUFFQyxFQUFFLEdBQUcsaUJBQWtCQSxHQUFHLE9BQU9BLEVBQUUsQ0FBQyxPQUFPQSxFQUFFa3RCLFVBQVUsS0FBS2tGLEVBQUcsT0FBT3gvQixFQUFFcW9ELEdBQUdqN0MsRUFBRXBHLEtBQUtvRyxFQUFFbE0sSUFBSWtNLEVBQUV6RSxNQUFNLEtBQUt3RSxFQUFFck0sS0FBS2QsSUFBS3lKLElBQUlrK0MsR0FBR3g2QyxFQUFFLEtBQUtDLEdBQUdwTixFQUFFOHFDLE9BQU8zOUIsRUFBRW5OLEVBQUUsS0FBS3kvQixFQUFHLE9BQU9yeUIsRUFBRW03QyxHQUFHbjdDLEVBQUVELEVBQUVyTSxLQUFLZCxJQUFLOHFDLE9BQU8zOUIsRUFBRUMsRUFBRSxHQUFHczZDLEdBQUd0NkMsSUFBSXV6QixFQUFHdnpCLEdBQUcsT0FBT0EsRUFBRW83QyxHQUFHcDdDLEVBQ25mRCxFQUFFck0sS0FBS2QsRUFBRSxPQUFROHFDLE9BQU8zOUIsRUFBRUMsRUFBRXk2QyxHQUFHMTZDLEVBQUVDLEdBQUcsT0FBTyxLQUFLLFNBQVMzTCxFQUFFMEwsRUFBRUMsRUFBRXBOLEVBQUVDLEdBQUcsSUFBSThHLEVBQUUsT0FBT3FHLEVBQUVBLEVBQUVsTSxJQUFJLEtBQUssR0FBRyxpQkFBa0JsQixHQUFHLGlCQUFrQkEsRUFBRSxPQUFPLE9BQU8rRyxFQUFFLEtBQUtvekIsRUFBRWh0QixFQUFFQyxFQUFFLEdBQUdwTixFQUFFQyxHQUFHLEdBQUcsaUJBQWtCRCxHQUFHLE9BQU9BLEVBQUUsQ0FBQyxPQUFPQSxFQUFFczZCLFVBQVUsS0FBS2tGLEVBQUcsT0FBT3gvQixFQUFFa0IsTUFBTTZGLEVBQUUvRyxFQUFFZ0gsT0FBTzA0QixFQUFHdCtCLEVBQUUrTCxFQUFFQyxFQUFFcE4sRUFBRTJJLE1BQU1wRSxTQUFTdEUsRUFBRThHLEdBQUc2SixFQUFFekQsRUFBRUMsRUFBRXBOLEVBQUVDLEdBQUcsS0FBSyxLQUFLdy9CLEVBQUcsT0FBT3ovQixFQUFFa0IsTUFBTTZGLEVBQUVuSCxFQUFFdU4sRUFBRUMsRUFBRXBOLEVBQUVDLEdBQUcsS0FBSyxHQUFHeW5ELEdBQUcxbkQsSUFBSTJnQyxFQUFHM2dDLEdBQUcsT0FBTyxPQUFPK0csRUFBRSxLQUFLM0YsRUFBRStMLEVBQUVDLEVBQUVwTixFQUFFQyxFQUFFLE1BQU00bkQsR0FBRzE2QyxFQUFFbk4sR0FBRyxPQUFPLEtBQUssU0FBU3E1QixFQUFFbHNCLEVBQUVDLEVBQUVwTixFQUFFQyxFQUFFOEcsR0FBRyxHQUFHLGlCQUFrQjlHLEdBQUcsaUJBQWtCQSxFQUFFLE9BQ2xlazZCLEVBQUUvc0IsRUFEdWVELEVBQUVBLEVBQUUzTSxJQUFJUixJQUN0ZixLQUFXLEdBQUdDLEVBQUU4RyxHQUFHLEdBQUcsaUJBQWtCOUcsR0FBRyxPQUFPQSxFQUFFLENBQUMsT0FBT0EsRUFBRXE2QixVQUFVLEtBQUtrRixFQUFHLE9BQU9yeUIsRUFBRUEsRUFBRTNNLElBQUksT0FBT1AsRUFBRWlCLElBQUlsQixFQUFFQyxFQUFFaUIsTUFBTSxLQUFLakIsRUFBRStHLE9BQU8wNEIsRUFBR3QrQixFQUFFZ00sRUFBRUQsRUFBRWxOLEVBQUUwSSxNQUFNcEUsU0FBU3dDLEVBQUU5RyxFQUFFaUIsS0FBSzBQLEVBQUV4RCxFQUFFRCxFQUFFbE4sRUFBRThHLEdBQUcsS0FBSzA0QixFQUFHLE9BQTJDNy9CLEVBQUV3TixFQUF0Q0QsRUFBRUEsRUFBRTNNLElBQUksT0FBT1AsRUFBRWlCLElBQUlsQixFQUFFQyxFQUFFaUIsTUFBTSxLQUFXakIsRUFBRThHLEdBQUcsR0FBRzJnRCxHQUFHem5ELElBQUkwZ0MsRUFBRzFnQyxHQUFHLE9BQXdCbUIsRUFBRWdNLEVBQW5CRCxFQUFFQSxFQUFFM00sSUFBSVIsSUFBSSxLQUFXQyxFQUFFOEcsRUFBRSxNQUFNOGdELEdBQUd6NkMsRUFBRW5OLEdBQUcsT0FBTyxLQUFLLFNBQVM2SixFQUFFL0MsRUFBRXF6QixFQUFFRCxFQUFFdnBCLEdBQUcsSUFBSSxJQUFJaFIsRUFBRSxLQUFLaUIsRUFBRSxLQUFLNDNCLEVBQUUyQixFQUFFaGMsRUFBRWdjLEVBQUUsRUFBRTdCLEVBQUUsS0FBSyxPQUFPRSxHQUFHcmEsRUFBRStiLEVBQUVwNEIsT0FBT3FjLElBQUksQ0FBQ3FhLEVBQUVwbkIsTUFBTStNLEdBQUdtYSxFQUFFRSxFQUFFQSxFQUFFLE1BQU1GLEVBQUVFLEVBQUU2UyxRQUFRLElBQUlscUMsRUFBRUssRUFBRXNGLEVBQUUweEIsRUFBRTBCLEVBQUUvYixHQUFHeE4sR0FBRyxHQUFHLE9BQU94UCxFQUFFLENBQUMsT0FBT3EzQixJQUFJQSxFQUFFRixHQUFHLE1BQU1wckIsR0FBR3NyQixHQUFHLE9BQ2pmcjNCLEVBQUV5cEMsV0FBV3o5QixFQUFFckcsRUFBRTB4QixHQUFHMkIsRUFBRUMsRUFBRWo1QixFQUFFZzVCLEVBQUVoYyxHQUFHLE9BQU92ZCxFQUFFakIsRUFBRXdCLEVBQUVQLEVBQUV5cUMsUUFBUWxxQyxFQUFFUCxFQUFFTyxFQUFFcTNCLEVBQUVGLEVBQUUsR0FBR25hLElBQUkrYixFQUFFcDRCLE9BQU8sT0FBTy9CLEVBQUUrRyxFQUFFMHhCLEdBQUc3NEIsRUFBRSxHQUFHLE9BQU82NEIsRUFBRSxDQUFDLEtBQUtyYSxFQUFFK2IsRUFBRXA0QixPQUFPcWMsSUFBa0IsUUFBZHFhLEVBQUVNLEVBQUVoeUIsRUFBRW96QixFQUFFL2IsR0FBR3hOLE1BQWN3cEIsRUFBRUMsRUFBRTVCLEVBQUUyQixFQUFFaGMsR0FBRyxPQUFPdmQsRUFBRWpCLEVBQUU2NEIsRUFBRTUzQixFQUFFeXFDLFFBQVE3UyxFQUFFNTNCLEVBQUU0M0IsR0FBRyxPQUFPNzRCLEVBQUUsSUFBSTY0QixFQUFFeDRCLEVBQUU4RyxFQUFFMHhCLEdBQUdyYSxFQUFFK2IsRUFBRXA0QixPQUFPcWMsSUFBc0IsUUFBbEJtYSxFQUFFYyxFQUFFWixFQUFFMXhCLEVBQUVxWCxFQUFFK2IsRUFBRS9iLEdBQUd4TixNQUFjekQsR0FBRyxPQUFPb3JCLEVBQUVzUyxXQUFXcFMsRUFBRW9VLE9BQU8sT0FBT3RVLEVBQUVyM0IsSUFBSWtkLEVBQUVtYSxFQUFFcjNCLEtBQUtrNUIsRUFBRUMsRUFBRTlCLEVBQUU2QixFQUFFaGMsR0FBRyxPQUFPdmQsRUFBRWpCLEVBQUUyNEIsRUFBRTEzQixFQUFFeXFDLFFBQVEvUyxFQUFFMTNCLEVBQUUwM0IsR0FBNEMsT0FBekNwckIsR0FBR3NyQixFQUFFdGlCLFNBQVEsU0FBU2hKLEdBQUcsT0FBT0MsRUFBRXJHLEVBQUVvRyxNQUFZdk4sRUFBRSxTQUFTZzVCLEVBQUU3eEIsRUFBRXF6QixFQUFFRCxFQUFFdnBCLEdBQUcsSUFBSWhSLEVBQUUrZ0MsRUFBR3hHLEdBQUcsR0FBRyxtQkFBb0J2NkIsRUFBRSxNQUFNcU4sTUFBTWxELEVBQUUsTUFBa0IsR0FBRyxPQUFmb3dCLEVBQUV2NkIsRUFBRUUsS0FBS3E2QixJQUMxZSxNQUFNbHRCLE1BQU1sRCxFQUFFLE1BQU0sSUFBSSxJQUFJbEosRUFBRWpCLEVBQUUsS0FBSzY0QixFQUFFMkIsRUFBRWhjLEVBQUVnYyxFQUFFLEVBQUU3QixFQUFFLEtBQUtuM0IsRUFBRSs0QixFQUFFaDNCLE9BQU8sT0FBT3MxQixJQUFJcjNCLEVBQUUyNUIsS0FBSzNjLElBQUloZCxFQUFFKzRCLEVBQUVoM0IsT0FBTyxDQUFDczFCLEVBQUVwbkIsTUFBTStNLEdBQUdtYSxFQUFFRSxFQUFFQSxFQUFFLE1BQU1GLEVBQUVFLEVBQUU2UyxRQUFRLElBQUkxUyxFQUFFbjNCLEVBQUVzRixFQUFFMHhCLEVBQUVyM0IsRUFBRVIsTUFBTWdRLEdBQUcsR0FBRyxPQUFPZ29CLEVBQUUsQ0FBQyxPQUFPSCxJQUFJQSxFQUFFRixHQUFHLE1BQU1wckIsR0FBR3NyQixHQUFHLE9BQU9HLEVBQUVpUyxXQUFXejlCLEVBQUVyRyxFQUFFMHhCLEdBQUcyQixFQUFFQyxFQUFFekIsRUFBRXdCLEVBQUVoYyxHQUFHLE9BQU92ZCxFQUFFakIsRUFBRWc1QixFQUFFLzNCLEVBQUV5cUMsUUFBUTFTLEVBQUUvM0IsRUFBRSszQixFQUFFSCxFQUFFRixFQUFFLEdBQUduM0IsRUFBRTI1QixLQUFLLE9BQU8vNkIsRUFBRStHLEVBQUUweEIsR0FBRzc0QixFQUFFLEdBQUcsT0FBTzY0QixFQUFFLENBQUMsTUFBTXIzQixFQUFFMjVCLEtBQUszYyxJQUFJaGQsRUFBRSs0QixFQUFFaDNCLE9BQXdCLFFBQWpCL0IsRUFBRTIzQixFQUFFaHlCLEVBQUUzRixFQUFFUixNQUFNZ1EsTUFBY3dwQixFQUFFQyxFQUFFajVCLEVBQUVnNUIsRUFBRWhjLEdBQUcsT0FBT3ZkLEVBQUVqQixFQUFFd0IsRUFBRVAsRUFBRXlxQyxRQUFRbHFDLEVBQUVQLEVBQUVPLEdBQUcsT0FBT3hCLEVBQUUsSUFBSTY0QixFQUFFeDRCLEVBQUU4RyxFQUFFMHhCLElBQUlyM0IsRUFBRTI1QixLQUFLM2MsSUFBSWhkLEVBQUUrNEIsRUFBRWgzQixPQUE0QixRQUFyQi9CLEVBQUVpNEIsRUFBRVosRUFBRTF4QixFQUFFcVgsRUFBRWhkLEVBQUVSLE1BQU1nUSxNQUFjekQsR0FBRyxPQUFPL0wsRUFBRXlwQyxXQUNoZnBTLEVBQUVvVSxPQUFPLE9BQU96ckMsRUFBRUYsSUFBSWtkLEVBQUVoZCxFQUFFRixLQUFLazVCLEVBQUVDLEVBQUVqNUIsRUFBRWc1QixFQUFFaGMsR0FBRyxPQUFPdmQsRUFBRWpCLEVBQUV3QixFQUFFUCxFQUFFeXFDLFFBQVFscUMsRUFBRVAsRUFBRU8sR0FBNEMsT0FBekMrTCxHQUFHc3JCLEVBQUV0aUIsU0FBUSxTQUFTaEosR0FBRyxPQUFPQyxFQUFFckcsRUFBRW9HLE1BQVl2TixFQUFFLE9BQU8sU0FBU3VOLEVBQUVsTixFQUFFbzZCLEVBQUVGLEdBQUcsSUFBSXZwQixFQUFFLGlCQUFrQnlwQixHQUFHLE9BQU9BLEdBQUdBLEVBQUVyekIsT0FBTzA0QixHQUFJLE9BQU9yRixFQUFFbjVCLElBQUkwUCxJQUFJeXBCLEVBQUVBLEVBQUUxeEIsTUFBTXBFLFVBQVUsSUFBSTNFLEVBQUUsaUJBQWtCeTZCLEdBQUcsT0FBT0EsRUFBRSxHQUFHejZCLEVBQUUsT0FBT3k2QixFQUFFQyxVQUFVLEtBQUtrRixFQUFHcnlCLEVBQUUsQ0FBUyxJQUFSdk4sRUFBRXk2QixFQUFFbjVCLElBQVEwUCxFQUFFM1EsRUFBRSxPQUFPMlEsR0FBRyxDQUFDLEdBQUdBLEVBQUUxUCxNQUFNdEIsRUFBRSxDQUFDLE9BQU9nUixFQUFFd3dCLEtBQUssS0FBSyxFQUFFLEdBQUcvRyxFQUFFcnpCLE9BQU8wNEIsRUFBRyxDQUFDMS9CLEVBQUVtTixFQUFFeUQsRUFBRTA2QixVQUFTcnJDLEVBQUU4RyxFQUFFNkosRUFBRXlwQixFQUFFMXhCLE1BQU1wRSxXQUFZdW1DLE9BQU8zOUIsRUFBRUEsRUFBRWxOLEVBQUUsTUFBTWtOLEVBQUUsTUFBTSxRQUFRLEdBQUd5RCxFQUFFdzNDLGNBQWMvdEIsRUFBRXJ6QixLQUFLLENBQUNoSCxFQUFFbU4sRUFBRXlELEVBQUUwNkIsVUFDNWVyckMsRUFBRThHLEVBQUU2SixFQUFFeXBCLEVBQUUxeEIsUUFBU2MsSUFBSWsrQyxHQUFHeDZDLEVBQUV5RCxFQUFFeXBCLEdBQUdwNkIsRUFBRTZxQyxPQUFPMzlCLEVBQUVBLEVBQUVsTixFQUFFLE1BQU1rTixHQUFHbk4sRUFBRW1OLEVBQUV5RCxHQUFHLE1BQVd4RCxFQUFFRCxFQUFFeUQsR0FBR0EsRUFBRUEsRUFBRTA2QixRQUFRalIsRUFBRXJ6QixPQUFPMDRCLElBQUl6L0IsRUFBRXVvRCxHQUFHbnVCLEVBQUUxeEIsTUFBTXBFLFNBQVM0SSxFQUFFck0sS0FBS3E1QixFQUFFRSxFQUFFbjVCLE1BQU80cEMsT0FBTzM5QixFQUFFQSxFQUFFbE4sS0FBSWs2QixFQUFFa3VCLEdBQUdodUIsRUFBRXJ6QixLQUFLcXpCLEVBQUVuNUIsSUFBSW01QixFQUFFMXhCLE1BQU0sS0FBS3dFLEVBQUVyTSxLQUFLcTVCLElBQUsxd0IsSUFBSWsrQyxHQUFHeDZDLEVBQUVsTixFQUFFbzZCLEdBQUdGLEVBQUUyUSxPQUFPMzlCLEVBQUVBLEVBQUVndEIsR0FBRyxPQUFPQyxFQUFFanRCLEdBQUcsS0FBS3N5QixFQUFHdHlCLEVBQUUsQ0FBQyxJQUFJeUQsRUFBRXlwQixFQUFFbjVCLElBQUksT0FBT2pCLEdBQUcsQ0FBQyxHQUFHQSxFQUFFaUIsTUFBTTBQLEVBQUUsSUFBRyxJQUFJM1EsRUFBRW1oQyxLQUFLbmhDLEVBQUVxcEMsVUFBVWdFLGdCQUFnQmpULEVBQUVpVCxlQUFlcnRDLEVBQUVxcEMsVUFBVWdmLGlCQUFpQmp1QixFQUFFaXVCLGVBQWUsQ0FBQ3RvRCxFQUFFbU4sRUFBRWxOLEVBQUVxckMsVUFBU3JyQyxFQUFFOEcsRUFBRTlHLEVBQUVvNkIsRUFBRTkxQixVQUFVLEtBQU11bUMsT0FBTzM5QixFQUFFQSxFQUFFbE4sRUFBRSxNQUFNa04sRUFBT25OLEVBQUVtTixFQUFFbE4sR0FBRyxNQUFXbU4sRUFBRUQsRUFBRWxOLEdBQUdBLEVBQUVBLEVBQUVxckMsU0FBUXJyQyxFQUNwZnNvRCxHQUFHbHVCLEVBQUVsdEIsRUFBRXJNLEtBQUtxNUIsSUFBSzJRLE9BQU8zOUIsRUFBRUEsRUFBRWxOLEVBQUUsT0FBT202QixFQUFFanRCLEdBQUcsR0FBRyxpQkFBa0JrdEIsR0FBRyxpQkFBa0JBLEVBQUUsT0FBT0EsRUFBRSxHQUFHQSxFQUFFLE9BQU9wNkIsR0FBRyxJQUFJQSxFQUFFbWhDLEtBQUtwaEMsRUFBRW1OLEVBQUVsTixFQUFFcXJDLFVBQVNyckMsRUFBRThHLEVBQUU5RyxFQUFFbzZCLElBQUt5USxPQUFPMzlCLEVBQUVBLEVBQUVsTixJQUFJRCxFQUFFbU4sRUFBRWxOLElBQUdBLEVBQUVrb0QsR0FBRzl0QixFQUFFbHRCLEVBQUVyTSxLQUFLcTVCLElBQUsyUSxPQUFPMzlCLEVBQUVBLEVBQUVsTixHQUFHbTZCLEVBQUVqdEIsR0FBRyxHQUFHdTZDLEdBQUdydEIsR0FBRyxPQUFPdndCLEVBQUVxRCxFQUFFbE4sRUFBRW82QixFQUFFRixHQUFHLEdBQUd3RyxFQUFHdEcsR0FBRyxPQUFPekIsRUFBRXpyQixFQUFFbE4sRUFBRW82QixFQUFFRixHQUFjLEdBQVh2NkIsR0FBR2lvRCxHQUFHMTZDLEVBQUVrdEIsUUFBTSxJQUFxQkEsSUFBSXpwQixFQUFFLE9BQU96RCxFQUFFaTBCLEtBQUssS0FBSyxFQUFFLEtBQUssR0FBRyxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRyxNQUFNbjBCLE1BQU1sRCxFQUFFLElBQUl1M0IsRUFBR24wQixFQUFFbkcsT0FBTyxjQUFlLE9BQU9oSCxFQUFFbU4sRUFBRWxOLElBQUksSUFBSXdvRCxHQUFHWCxJQUFHLEdBQUlZLEdBQUdaLElBQUcsR0FBSWEsR0FBRyxHQUFHQyxHQUFHcEgsR0FBR21ILElBQUlFLEdBQUdySCxHQUFHbUgsSUFBSUcsR0FBR3RILEdBQUdtSCxJQUN0ZCxTQUFTSSxHQUFHNTdDLEdBQUcsR0FBR0EsSUFBSXc3QyxHQUFHLE1BQU0xN0MsTUFBTWxELEVBQUUsTUFBTSxPQUFPb0QsRUFBRSxTQUFTNjdDLEdBQUc3N0MsRUFBRUMsR0FBeUMsT0FBdEMyc0IsR0FBRSt1QixHQUFHMTdDLEdBQUcyc0IsR0FBRTh1QixHQUFHMTdDLEdBQUc0c0IsR0FBRTZ1QixHQUFHRCxJQUFJeDdDLEVBQUVDLEVBQUVzM0IsVUFBbUIsS0FBSyxFQUFFLEtBQUssR0FBR3QzQixHQUFHQSxFQUFFQSxFQUFFNjdDLGlCQUFpQjc3QyxFQUFFZzNCLGFBQWFMLEdBQUcsS0FBSyxJQUFJLE1BQU0sUUFBa0UzMkIsRUFBRTIyQixHQUFyQzMyQixHQUF2QkQsRUFBRSxJQUFJQSxFQUFFQyxFQUFFNDdCLFdBQVc1N0IsR0FBTWczQixjQUFjLEtBQUtqM0IsRUFBRUEsRUFBRSs3QyxTQUFrQnB2QixHQUFFOHVCLElBQUk3dUIsR0FBRTZ1QixHQUFHeDdDLEdBQUcsU0FBUys3QyxLQUFLcnZCLEdBQUU4dUIsSUFBSTl1QixHQUFFK3VCLElBQUkvdUIsR0FBRWd2QixJQUFJLFNBQVNNLEdBQUdqOEMsR0FBRzQ3QyxHQUFHRCxHQUFHMWlELFNBQVMsSUFBSWdILEVBQUUyN0MsR0FBR0gsR0FBR3hpRCxTQUFhcEcsRUFBRStqQyxHQUFHMzJCLEVBQUVELEVBQUVuRyxNQUFNb0csSUFBSXBOLElBQUkrNUIsR0FBRTh1QixHQUFHMTdDLEdBQUc0c0IsR0FBRTZ1QixHQUFHNW9ELElBQUksU0FBU3FwRCxHQUFHbDhDLEdBQUcwN0MsR0FBR3ppRCxVQUFVK0csSUFBSTJzQixHQUFFOHVCLElBQUk5dUIsR0FBRSt1QixLQUFLLElBQUk3dEIsR0FBRXdtQixHQUFHLEdBQzljLFNBQVM4SCxHQUFHbjhDLEdBQUcsSUFBSSxJQUFJQyxFQUFFRCxFQUFFLE9BQU9DLEdBQUcsQ0FBQyxHQUFHLEtBQUtBLEVBQUVnMEIsSUFBSSxDQUFDLElBQUlwaEMsRUFBRW9OLEVBQUU2OUIsY0FBYyxHQUFHLE9BQU9qckMsSUFBbUIsUUFBZkEsRUFBRUEsRUFBRWtyQyxhQUFxQixPQUFPbHJDLEVBQUVxYyxNQUFNLE9BQU9yYyxFQUFFcWMsTUFBTSxPQUFPalAsT0FBTyxHQUFHLEtBQUtBLEVBQUVnMEIsVUFBSyxJQUFTaDBCLEVBQUVtOEMsY0FBY0MsYUFBYSxHQUFHLElBQWEsR0FBUnA4QyxFQUFFMjlCLE9BQVUsT0FBTzM5QixPQUFPLEdBQUcsT0FBT0EsRUFBRWkrQixNQUFNLENBQUNqK0IsRUFBRWkrQixNQUFNUCxPQUFPMTlCLEVBQUVBLEVBQUVBLEVBQUVpK0IsTUFBTSxTQUFTLEdBQUdqK0IsSUFBSUQsRUFBRSxNQUFNLEtBQUssT0FBT0MsRUFBRWsrQixTQUFTLENBQUMsR0FBRyxPQUFPbCtCLEVBQUUwOUIsUUFBUTE5QixFQUFFMDlCLFNBQVMzOUIsRUFBRSxPQUFPLEtBQUtDLEVBQUVBLEVBQUUwOUIsT0FBTzE5QixFQUFFaytCLFFBQVFSLE9BQU8xOUIsRUFBRTA5QixPQUFPMTlCLEVBQUVBLEVBQUVrK0IsUUFBUSxPQUFPLEtBQUssSUFBSW1lLEdBQUcsS0FBS0MsR0FBRyxLQUFLQyxJQUFHLEVBQ3BkLFNBQVNDLEdBQUd6OEMsRUFBRUMsR0FBRyxJQUFJcE4sRUFBRTZwRCxHQUFHLEVBQUUsS0FBSyxLQUFLLEdBQUc3cEQsRUFBRW9vRCxZQUFZLFVBQVVwb0QsRUFBRWdILEtBQUssVUFBVWhILEVBQUVzcEMsVUFBVWw4QixFQUFFcE4sRUFBRThxQyxPQUFPMzlCLEVBQUVuTixFQUFFK3FDLE1BQU0sRUFBRSxPQUFPNTlCLEVBQUU0NkMsWUFBWTU2QyxFQUFFNDZDLFdBQVdDLFdBQVdob0QsRUFBRW1OLEVBQUU0NkMsV0FBVy9uRCxHQUFHbU4sRUFBRTg2QyxZQUFZOTZDLEVBQUU0NkMsV0FBVy9uRCxFQUFFLFNBQVM4cEQsR0FBRzM4QyxFQUFFQyxHQUFHLE9BQU9ELEVBQUVpMEIsS0FBSyxLQUFLLEVBQUUsSUFBSXBoQyxFQUFFbU4sRUFBRW5HLEtBQXlFLE9BQU8sUUFBM0VvRyxFQUFFLElBQUlBLEVBQUVzM0IsVUFBVTFrQyxFQUFFeStCLGdCQUFnQnJ4QixFQUFFcTBCLFNBQVNoRCxjQUFjLEtBQUtyeEIsS0FBbUJELEVBQUVtOEIsVUFBVWw4QixHQUFFLEdBQU8sS0FBSyxFQUFFLE9BQW9ELFFBQTdDQSxFQUFFLEtBQUtELEVBQUU0OEMsY0FBYyxJQUFJMzhDLEVBQUVzM0IsU0FBUyxLQUFLdDNCLEtBQVlELEVBQUVtOEIsVUFBVWw4QixHQUFFLEdBQU8sS0FBSyxHQUFZLFFBQVEsT0FBTSxHQUN2ZSxTQUFTNDhDLEdBQUc3OEMsR0FBRyxHQUFHdzhDLEdBQUcsQ0FBQyxJQUFJdjhDLEVBQUVzOEMsR0FBRyxHQUFHdDhDLEVBQUUsQ0FBQyxJQUFJcE4sRUFBRW9OLEVBQUUsSUFBSTA4QyxHQUFHMzhDLEVBQUVDLEdBQUcsQ0FBcUIsS0FBcEJBLEVBQUUwekMsR0FBRzlnRCxFQUFFcTlDLGdCQUFxQnlNLEdBQUczOEMsRUFBRUMsR0FBdUMsT0FBbkNELEVBQUU0OUIsT0FBZSxLQUFUNTlCLEVBQUU0OUIsTUFBWSxFQUFFNGUsSUFBRyxPQUFHRixHQUFHdDhDLEdBQVN5OEMsR0FBR0gsR0FBR3pwRCxHQUFHeXBELEdBQUd0OEMsRUFBRXU4QyxHQUFHNUksR0FBRzF6QyxFQUFFbTNCLGlCQUFpQnAzQixFQUFFNDlCLE9BQWUsS0FBVDU5QixFQUFFNDlCLE1BQVksRUFBRTRlLElBQUcsRUFBR0YsR0FBR3Q4QyxHQUFHLFNBQVM4OEMsR0FBRzk4QyxHQUFHLElBQUlBLEVBQUVBLEVBQUUyOUIsT0FBTyxPQUFPMzlCLEdBQUcsSUFBSUEsRUFBRWkwQixLQUFLLElBQUlqMEIsRUFBRWkwQixLQUFLLEtBQUtqMEIsRUFBRWkwQixLQUFLajBCLEVBQUVBLEVBQUUyOUIsT0FBTzJlLEdBQUd0OEMsRUFDNVMsU0FBUys4QyxHQUFHLzhDLEdBQUcsR0FBR0EsSUFBSXM4QyxHQUFHLE9BQU0sRUFBRyxJQUFJRSxHQUFHLE9BQU9NLEdBQUc5OEMsR0FBR3c4QyxJQUFHLEdBQUcsRUFBRyxJQUFJdjhDLEVBQUVELEVBQUVuRyxLQUFLLEdBQUcsSUFBSW1HLEVBQUVpMEIsS0FBSyxTQUFTaDBCLEdBQUcsU0FBU0EsSUFBSW16QyxHQUFHbnpDLEVBQUVELEVBQUVvOEMsZUFBZSxJQUFJbjhDLEVBQUVzOEMsR0FBR3Q4QyxHQUFHdzhDLEdBQUd6OEMsRUFBRUMsR0FBR0EsRUFBRTB6QyxHQUFHMXpDLEVBQUVpd0MsYUFBbUIsR0FBTjRNLEdBQUc5OEMsR0FBTSxLQUFLQSxFQUFFaTBCLElBQUksQ0FBZ0QsS0FBN0JqMEIsRUFBRSxRQUFwQkEsRUFBRUEsRUFBRTg5QixlQUF5Qjk5QixFQUFFKzlCLFdBQVcsTUFBVyxNQUFNaitCLE1BQU1sRCxFQUFFLE1BQU1vRCxFQUFFLENBQWlCLElBQWhCQSxFQUFFQSxFQUFFa3dDLFlBQWdCandDLEVBQUUsRUFBRUQsR0FBRyxDQUFDLEdBQUcsSUFBSUEsRUFBRXUzQixTQUFTLENBQUMsSUFBSTFrQyxFQUFFbU4sRUFBRWtQLEtBQUssR0FBRyxPQUFPcmMsRUFBRSxDQUFDLEdBQUcsSUFBSW9OLEVBQUUsQ0FBQ3M4QyxHQUFHNUksR0FBRzN6QyxFQUFFa3dDLGFBQWEsTUFBTWx3QyxFQUFFQyxRQUFRLE1BQU1wTixHQUFHLE9BQU9BLEdBQUcsT0FBT0EsR0FBR29OLElBQUlELEVBQUVBLEVBQUVrd0MsWUFBWXFNLEdBQUcsV0FBV0EsR0FBR0QsR0FBRzNJLEdBQUczekMsRUFBRW04QixVQUFVK1QsYUFBYSxLQUFLLE9BQU0sRUFDdGYsU0FBUzhNLEtBQUtULEdBQUdELEdBQUcsS0FBS0UsSUFBRyxFQUFHLElBQUlTLEdBQUcsR0FBRyxTQUFTQyxLQUFLLElBQUksSUFBSWw5QyxFQUFFLEVBQUVBLEVBQUVpOUMsR0FBR3JvRCxPQUFPb0wsSUFBSWk5QyxHQUFHajlDLEdBQUdtOUMsOEJBQThCLEtBQUtGLEdBQUdyb0QsT0FBTyxFQUFFLElBQUl3b0QsR0FBR2hyQixFQUFHL0QsdUJBQXVCZ3ZCLEdBQUdqckIsRUFBRzlELHdCQUF3Qmd2QixHQUFHLEVBQUVwdkIsR0FBRSxLQUFLQyxHQUFFLEtBQUtDLEdBQUUsS0FBS212QixJQUFHLEVBQUdDLElBQUcsRUFBRyxTQUFTQyxLQUFLLE1BQU0zOUMsTUFBTWxELEVBQUUsTUFBTyxTQUFTOGdELEdBQUcxOUMsRUFBRUMsR0FBRyxHQUFHLE9BQU9BLEVBQUUsT0FBTSxFQUFHLElBQUksSUFBSXBOLEVBQUUsRUFBRUEsRUFBRW9OLEVBQUVyTCxRQUFRL0IsRUFBRW1OLEVBQUVwTCxPQUFPL0IsSUFBSSxJQUFJKzhDLEdBQUc1dkMsRUFBRW5OLEdBQUdvTixFQUFFcE4sSUFBSSxPQUFNLEVBQUcsT0FBTSxFQUM5WCxTQUFTOHFELEdBQUczOUMsRUFBRUMsRUFBRXBOLEVBQUVDLEVBQUU4RyxFQUFFc3pCLEdBQXlILEdBQXRIb3dCLEdBQUdwd0IsRUFBRWdCLEdBQUVqdUIsRUFBRUEsRUFBRTY5QixjQUFjLEtBQUs3OUIsRUFBRXM0QyxZQUFZLEtBQUt0NEMsRUFBRSszQyxNQUFNLEVBQUVvRixHQUFHbmtELFFBQVEsT0FBTytHLEdBQUcsT0FBT0EsRUFBRTg5QixjQUFjOGYsR0FBR0MsR0FBRzc5QyxFQUFFbk4sRUFBRUMsRUFBRThHLEdBQU00akQsR0FBRyxDQUFDdHdCLEVBQUUsRUFBRSxFQUFFLENBQU8sR0FBTnN3QixJQUFHLElBQVEsR0FBR3R3QixHQUFHLE1BQU1wdEIsTUFBTWxELEVBQUUsTUFBTXN3QixHQUFHLEVBQUVrQixHQUFFRCxHQUFFLEtBQUtsdUIsRUFBRXM0QyxZQUFZLEtBQUs2RSxHQUFHbmtELFFBQVE2a0QsR0FBRzk5QyxFQUFFbk4sRUFBRUMsRUFBRThHLFNBQVM0akQsSUFBa0UsR0FBOURKLEdBQUdua0QsUUFBUThrRCxHQUFHOTlDLEVBQUUsT0FBT2t1QixJQUFHLE9BQU9BLEdBQUVuNEIsS0FBS3NuRCxHQUFHLEVBQUVsdkIsR0FBRUQsR0FBRUQsR0FBRSxLQUFLcXZCLElBQUcsRUFBTXQ5QyxFQUFFLE1BQU1ILE1BQU1sRCxFQUFFLE1BQU0sT0FBT29ELEVBQUUsU0FBU2crQyxLQUFLLElBQUloK0MsRUFBRSxDQUFDODlCLGNBQWMsS0FBSzBhLFVBQVUsS0FBS3lGLFVBQVUsS0FBS0MsTUFBTSxLQUFLbG9ELEtBQUssTUFBOEMsT0FBeEMsT0FBT280QixHQUFFRixHQUFFNFAsY0FBYzFQLEdBQUVwdUIsRUFBRW91QixHQUFFQSxHQUFFcDRCLEtBQUtnSyxFQUFTb3VCLEdBQy9lLFNBQVMrdkIsS0FBSyxHQUFHLE9BQU9od0IsR0FBRSxDQUFDLElBQUludUIsRUFBRWt1QixHQUFFd1AsVUFBVTE5QixFQUFFLE9BQU9BLEVBQUVBLEVBQUU4OUIsY0FBYyxVQUFVOTlCLEVBQUVtdUIsR0FBRW40QixLQUFLLElBQUlpSyxFQUFFLE9BQU9tdUIsR0FBRUYsR0FBRTRQLGNBQWMxUCxHQUFFcDRCLEtBQUssR0FBRyxPQUFPaUssRUFBRW11QixHQUFFbnVCLEVBQUVrdUIsR0FBRW51QixNQUFNLENBQUMsR0FBRyxPQUFPQSxFQUFFLE1BQU1GLE1BQU1sRCxFQUFFLE1BQVVvRCxFQUFFLENBQUM4OUIsZUFBUDNQLEdBQUVudUIsR0FBcUI4OUIsY0FBYzBhLFVBQVVycUIsR0FBRXFxQixVQUFVeUYsVUFBVTl2QixHQUFFOHZCLFVBQVVDLE1BQU0vdkIsR0FBRSt2QixNQUFNbG9ELEtBQUssTUFBTSxPQUFPbzRCLEdBQUVGLEdBQUU0UCxjQUFjMVAsR0FBRXB1QixFQUFFb3VCLEdBQUVBLEdBQUVwNEIsS0FBS2dLLEVBQUUsT0FBT291QixHQUFFLFNBQVNnd0IsR0FBR3ArQyxFQUFFQyxHQUFHLE1BQU0sbUJBQW9CQSxFQUFFQSxFQUFFRCxHQUFHQyxFQUN2WSxTQUFTbytDLEdBQUdyK0MsR0FBRyxJQUFJQyxFQUFFaytDLEtBQUt0ckQsRUFBRW9OLEVBQUVpK0MsTUFBTSxHQUFHLE9BQU9yckQsRUFBRSxNQUFNaU4sTUFBTWxELEVBQUUsTUFBTS9KLEVBQUV5ckQsb0JBQW9CdCtDLEVBQUUsSUFBSWxOLEVBQUVxN0IsR0FBRXYwQixFQUFFOUcsRUFBRW1yRCxVQUFVL3dCLEVBQUVyNkIsRUFBRStsRCxRQUFRLEdBQUcsT0FBTzFyQixFQUFFLENBQUMsR0FBRyxPQUFPdHpCLEVBQUUsQ0FBQyxJQUFJcXpCLEVBQUVyekIsRUFBRTVELEtBQUs0RCxFQUFFNUQsS0FBS2szQixFQUFFbDNCLEtBQUtrM0IsRUFBRWwzQixLQUFLaTNCLEVBQUVuNkIsRUFBRW1yRCxVQUFVcmtELEVBQUVzekIsRUFBRXI2QixFQUFFK2xELFFBQVEsS0FBSyxHQUFHLE9BQU9oL0MsRUFBRSxDQUFDQSxFQUFFQSxFQUFFNUQsS0FBS2xELEVBQUVBLEVBQUUwbEQsVUFBVSxJQUFJeHJCLEVBQUVDLEVBQUVDLEVBQUUsS0FBS3pwQixFQUFFN0osRUFBRSxFQUFFLENBQUMsSUFBSW5ILEVBQUVnUixFQUFFdzFDLEtBQUssSUFBSXFFLEdBQUc3cUQsS0FBS0EsRUFBRSxPQUFPdTZCLElBQUlBLEVBQUVBLEVBQUVoM0IsS0FBSyxDQUFDaWpELEtBQUssRUFBRTlnRCxPQUFPc0wsRUFBRXRMLE9BQU9vbUQsYUFBYTk2QyxFQUFFODZDLGFBQWFDLFdBQVcvNkMsRUFBRSs2QyxXQUFXeG9ELEtBQUssT0FBT2xELEVBQUUyUSxFQUFFODZDLGVBQWV2K0MsRUFBRXlELEVBQUUrNkMsV0FBV3grQyxFQUFFbE4sRUFBRTJRLEVBQUV0TCxZQUFZLENBQUMsSUFBSWxFLEVBQUUsQ0FBQ2dsRCxLQUFLeG1ELEVBQUUwRixPQUFPc0wsRUFBRXRMLE9BQU9vbUQsYUFBYTk2QyxFQUFFODZDLGFBQzlmQyxXQUFXLzZDLEVBQUUrNkMsV0FBV3hvRCxLQUFLLE1BQU0sT0FBT2czQixHQUFHQyxFQUFFRCxFQUFFLzRCLEVBQUVpNUIsRUFBRXA2QixHQUFHazZCLEVBQUVBLEVBQUVoM0IsS0FBSy9CLEVBQUVpNkIsR0FBRThwQixPQUFPdmxELEVBQUU0bUQsSUFBSTVtRCxFQUFFZ1IsRUFBRUEsRUFBRXpOLFdBQVcsT0FBT3lOLEdBQUdBLElBQUk3SixHQUFHLE9BQU9vekIsRUFBRUUsRUFBRXA2QixFQUFFazZCLEVBQUVoM0IsS0FBS2kzQixFQUFFMmlCLEdBQUc5OEMsRUFBRW1OLEVBQUU2OUIsaUJBQWlCbWEsSUFBRyxHQUFJaDRDLEVBQUU2OUIsY0FBY2hyQyxFQUFFbU4sRUFBRXU0QyxVQUFVdHJCLEVBQUVqdEIsRUFBRWcrQyxVQUFVanhCLEVBQUVuNkIsRUFBRTRyRCxrQkFBa0IzckQsRUFBRSxNQUFNLENBQUNtTixFQUFFNjlCLGNBQWNqckMsRUFBRWtKLFVBQ3RRLFNBQVMyaUQsR0FBRzErQyxHQUFHLElBQUlDLEVBQUVrK0MsS0FBS3RyRCxFQUFFb04sRUFBRWkrQyxNQUFNLEdBQUcsT0FBT3JyRCxFQUFFLE1BQU1pTixNQUFNbEQsRUFBRSxNQUFNL0osRUFBRXlyRCxvQkFBb0J0K0MsRUFBRSxJQUFJbE4sRUFBRUQsRUFBRWtKLFNBQVNuQyxFQUFFL0csRUFBRStsRCxRQUFRMXJCLEVBQUVqdEIsRUFBRTY5QixjQUFjLEdBQUcsT0FBT2xrQyxFQUFFLENBQUMvRyxFQUFFK2xELFFBQVEsS0FBSyxJQUFJM3JCLEVBQUVyekIsRUFBRUEsRUFBRTVELEtBQUssR0FBR2szQixFQUFFbHRCLEVBQUVrdEIsRUFBRUQsRUFBRTkwQixRQUFRODBCLEVBQUVBLEVBQUVqM0IsV0FBV2kzQixJQUFJcnpCLEdBQUdnMkMsR0FBRzFpQixFQUFFanRCLEVBQUU2OUIsaUJBQWlCbWEsSUFBRyxHQUFJaDRDLEVBQUU2OUIsY0FBYzVRLEVBQUUsT0FBT2p0QixFQUFFZytDLFlBQVloK0MsRUFBRXU0QyxVQUFVdHJCLEdBQUdyNkIsRUFBRTRyRCxrQkFBa0J2eEIsRUFBRSxNQUFNLENBQUNBLEVBQUVwNkIsR0FDblYsU0FBUzZyRCxHQUFHMytDLEVBQUVDLEVBQUVwTixHQUFHLElBQUlDLEVBQUVtTixFQUFFMitDLFlBQVk5ckQsRUFBRUEsRUFBRW1OLEVBQUU0K0MsU0FBUyxJQUFJamxELEVBQUVxRyxFQUFFazlDLDhCQUF5SSxHQUF4RyxPQUFPdmpELEVBQUVvRyxFQUFFcEcsSUFBSTlHLEdBQVVrTixFQUFFQSxFQUFFOCtDLGtCQUFpQjkrQyxHQUFHczlDLEdBQUd0OUMsS0FBS0EsS0FBRUMsRUFBRWs5Qyw4QkFBOEJycUQsRUFBRW1xRCxHQUFHL21ELEtBQUsrSixLQUFNRCxFQUFFLE9BQU9uTixFQUFFb04sRUFBRTQrQyxTQUFvQixNQUFYNUIsR0FBRy9tRCxLQUFLK0osR0FBU0gsTUFBTWxELEVBQUUsTUFDelAsU0FBU21pRCxHQUFHLytDLEVBQUVDLEVBQUVwTixFQUFFQyxHQUFHLElBQUk4RyxFQUFFb2xELEdBQUUsR0FBRyxPQUFPcGxELEVBQUUsTUFBTWtHLE1BQU1sRCxFQUFFLE1BQU0sSUFBSXN3QixFQUFFanRCLEVBQUUyK0MsWUFBWTN4QixFQUFFQyxFQUFFanRCLEVBQUU0K0MsU0FBUzd4QixFQUFFb3dCLEdBQUdua0QsUUFBUXdLLEVBQUV1cEIsRUFBRWpXLFVBQVMsV0FBVyxPQUFPNG5DLEdBQUcva0QsRUFBRXFHLEVBQUVwTixNQUFLSixFQUFFZ1IsRUFBRSxHQUFHeFAsRUFBRXdQLEVBQUUsR0FBR0EsRUFBRTJxQixHQUFFLElBQUl4QyxFQUFFNXJCLEVBQUU4OUIsY0FBY3hwQyxFQUFFczNCLEVBQUVPLEtBQUtELEVBQUU1M0IsRUFBRTJxRCxZQUFZdGlELEVBQUVpdkIsRUFBRS8yQixPQUFPKzJCLEVBQUVBLEVBQUV6MUIsVUFBVSxJQUFJczFCLEVBQUV5QyxHQUN1TyxPQURyT2x1QixFQUFFODlCLGNBQWMsQ0FBQzNSLEtBQUs3M0IsRUFBRU8sT0FBT29MLEVBQUU5SixVQUFVckQsR0FBR2s2QixFQUFFOVosV0FBVSxXQUFXNWUsRUFBRTJxRCxZQUFZcHNELEVBQUV5QixFQUFFNHFELFlBQVl6c0QsRUFBRSxJQUFJdU4sRUFBRWt0QixFQUFFanRCLEVBQUU0K0MsU0FBUyxJQUFJalAsR0FBRzNpQixFQUFFanRCLEdBQUcsQ0FBQ0EsRUFBRW5OLEVBQUVvTixFQUFFNCtDLFNBQVNqUCxHQUFHMzdDLEVBQUUrTCxLQUFLdk4sRUFBRXVOLEdBQUdBLEVBQUU0NUMsR0FBR251QixHQUFHN3hCLEVBQUVrbEQsa0JBQWtCOStDLEVBQUVwRyxFQUFFdW9DLGNBQWNuaUMsRUFBRXBHLEVBQUVrbEQsaUJBQWlCbGxELEVBQUU0b0MsZ0JBQWdCeGlDLEVBQUUsSUFBSSxJQUFJbE4sRUFDNWY4RyxFQUFFNm9DLGNBQWN6VixFQUFFaHRCLEVBQUUsRUFBRWd0QixHQUFHLENBQUMsSUFBSXZwQixFQUFFLEdBQUc4K0IsR0FBR3ZWLEdBQUd6QixFQUFFLEdBQUc5bkIsRUFBRTNRLEVBQUUyUSxJQUFJekQsRUFBRWd0QixJQUFJekIsTUFBSyxDQUFDMTRCLEVBQUVvTixFQUFFbk4sSUFBSWs2QixFQUFFOVosV0FBVSxXQUFXLE9BQU9wZ0IsRUFBRW1OLEVBQUU0K0MsU0FBUSxXQUFXLElBQUk3K0MsRUFBRTFMLEVBQUUycUQsWUFBWXBzRCxFQUFFeUIsRUFBRTRxRCxZQUFZLElBQUlyc0QsRUFBRW1OLEVBQUVDLEVBQUU0K0MsVUFBVSxJQUFJL3JELEVBQUU4bUQsR0FBR251QixHQUFHN3hCLEVBQUVrbEQsa0JBQWtCaHNELEVBQUU4RyxFQUFFdW9DLGFBQWEsTUFBTS9XLEdBQUd2NEIsR0FBRSxXQUFXLE1BQU11NEIsV0FBUyxDQUFDbnJCLEVBQUVuTixJQUFJODhDLEdBQUcxakIsRUFBRXI1QixJQUFJKzhDLEdBQUdqekMsRUFBRXNELElBQUkydkMsR0FBR2hrQixFQUFFOTRCLE1BQUtrTixFQUFFLENBQUM0NEMsUUFBUSxLQUFLNzhDLFNBQVMsS0FBS3VpRCxvQkFBb0JGLEdBQUdLLGtCQUFrQnhxRCxJQUFLOEgsU0FBU3RKLEVBQUUwc0QsR0FBR25yRCxLQUFLLEtBQUtrNkIsR0FBRWx1QixHQUFHeUQsRUFBRXk2QyxNQUFNbCtDLEVBQUV5RCxFQUFFdzZDLFVBQVUsS0FBS2hxRCxFQUFFMHFELEdBQUcva0QsRUFBRXFHLEVBQUVwTixHQUFHNFEsRUFBRXE2QixjQUFjcjZCLEVBQUUrMEMsVUFBVXZrRCxHQUFVQSxFQUN0ZSxTQUFTbXJELEdBQUdwL0MsRUFBRUMsRUFBRXBOLEdBQWMsT0FBT2tzRCxHQUFaWixLQUFpQm4rQyxFQUFFQyxFQUFFcE4sR0FBRyxTQUFTd3NELEdBQUdyL0MsR0FBRyxJQUFJQyxFQUFFKzlDLEtBQW1MLE1BQTlLLG1CQUFvQmgrQyxJQUFJQSxFQUFFQSxLQUFLQyxFQUFFNjlCLGNBQWM3OUIsRUFBRXU0QyxVQUFVeDRDLEVBQW9GQSxHQUFsRkEsRUFBRUMsRUFBRWkrQyxNQUFNLENBQUN0RixRQUFRLEtBQUs3OEMsU0FBUyxLQUFLdWlELG9CQUFvQkYsR0FBR0ssa0JBQWtCeitDLElBQU9qRSxTQUFTb2pELEdBQUduckQsS0FBSyxLQUFLazZCLEdBQUVsdUIsR0FBUyxDQUFDQyxFQUFFNjlCLGNBQWM5OUIsR0FDaFIsU0FBU3MvQyxHQUFHdC9DLEVBQUVDLEVBQUVwTixFQUFFQyxHQUFrTyxPQUEvTmtOLEVBQUUsQ0FBQ2kwQixJQUFJajBCLEVBQUVsTSxPQUFPbU0sRUFBRXMvQyxRQUFRMXNELEVBQUUyc0QsS0FBSzFzRCxFQUFFa0QsS0FBSyxNQUFzQixRQUFoQmlLLEVBQUVpdUIsR0FBRXFxQixjQUFzQnQ0QyxFQUFFLENBQUMyNkMsV0FBVyxNQUFNMXNCLEdBQUVxcUIsWUFBWXQ0QyxFQUFFQSxFQUFFMjZDLFdBQVc1NkMsRUFBRWhLLEtBQUtnSyxHQUFtQixRQUFmbk4sRUFBRW9OLEVBQUUyNkMsWUFBb0IzNkMsRUFBRTI2QyxXQUFXNTZDLEVBQUVoSyxLQUFLZ0ssR0FBR2xOLEVBQUVELEVBQUVtRCxLQUFLbkQsRUFBRW1ELEtBQUtnSyxFQUFFQSxFQUFFaEssS0FBS2xELEVBQUVtTixFQUFFMjZDLFdBQVc1NkMsR0FBV0EsRUFBRSxTQUFTeS9DLEdBQUd6L0MsR0FBNEIsT0FBZEEsRUFBRSxDQUFDL0csUUFBUStHLEdBQWhCZytDLEtBQTRCbGdCLGNBQWM5OUIsRUFBRSxTQUFTMC9DLEtBQUssT0FBT3ZCLEtBQUtyZ0IsY0FBYyxTQUFTNmhCLEdBQUczL0MsRUFBRUMsRUFBRXBOLEVBQUVDLEdBQUcsSUFBSThHLEVBQUVva0QsS0FBSzl2QixHQUFFMFAsT0FBTzU5QixFQUFFcEcsRUFBRWtrQyxjQUFjd2hCLEdBQUcsRUFBRXIvQyxFQUFFcE4sT0FBRSxPQUFPLElBQVNDLEVBQUUsS0FBS0EsR0FDamMsU0FBUzhzRCxHQUFHNS9DLEVBQUVDLEVBQUVwTixFQUFFQyxHQUFHLElBQUk4RyxFQUFFdWtELEtBQUtyckQsT0FBRSxJQUFTQSxFQUFFLEtBQUtBLEVBQUUsSUFBSW82QixPQUFFLEVBQU8sR0FBRyxPQUFPaUIsR0FBRSxDQUFDLElBQUlsQixFQUFFa0IsR0FBRTJQLGNBQTBCLEdBQVo1USxFQUFFRCxFQUFFc3lCLFFBQVcsT0FBT3pzRCxHQUFHNHFELEdBQUc1cUQsRUFBRW02QixFQUFFdXlCLE1BQW1CLFlBQVpGLEdBQUdyL0MsRUFBRXBOLEVBQUVxNkIsRUFBRXA2QixHQUFXbzdCLEdBQUUwUCxPQUFPNTlCLEVBQUVwRyxFQUFFa2tDLGNBQWN3aEIsR0FBRyxFQUFFci9DLEVBQUVwTixFQUFFcTZCLEVBQUVwNkIsR0FBRyxTQUFTK3NELEdBQUc3L0MsRUFBRUMsR0FBRyxPQUFPMC9DLEdBQUcsSUFBSSxFQUFFMy9DLEVBQUVDLEdBQUcsU0FBUzYvQyxHQUFHOS9DLEVBQUVDLEdBQUcsT0FBTzIvQyxHQUFHLElBQUksRUFBRTUvQyxFQUFFQyxHQUFHLFNBQVM4L0MsR0FBRy8vQyxFQUFFQyxHQUFHLE9BQU8yL0MsR0FBRyxFQUFFLEVBQUU1L0MsRUFBRUMsR0FBRyxTQUFTKy9DLEdBQUdoZ0QsRUFBRUMsR0FBRyxNQUFHLG1CQUFvQkEsR0FBU0QsRUFBRUEsSUFBSUMsRUFBRUQsR0FBRyxXQUFXQyxFQUFFLFFBQVUsTUFBT0EsR0FBcUJELEVBQUVBLElBQUlDLEVBQUVoSCxRQUFRK0csRUFBRSxXQUFXQyxFQUFFaEgsUUFBUSxZQUF0RSxFQUN4WSxTQUFTZ25ELEdBQUdqZ0QsRUFBRUMsRUFBRXBOLEdBQTZDLE9BQTFDQSxFQUFFLE1BQU9BLEVBQWNBLEVBQUVxYSxPQUFPLENBQUNsTixJQUFJLEtBQVk0L0MsR0FBRyxFQUFFLEVBQUVJLEdBQUdoc0QsS0FBSyxLQUFLaU0sRUFBRUQsR0FBR25OLEdBQUcsU0FBU3F0RCxNQUFNLFNBQVNDLEdBQUduZ0QsRUFBRUMsR0FBRyxJQUFJcE4sRUFBRXNyRCxLQUFLbCtDLE9BQUUsSUFBU0EsRUFBRSxLQUFLQSxFQUFFLElBQUluTixFQUFFRCxFQUFFaXJDLGNBQWMsT0FBRyxPQUFPaHJDLEdBQUcsT0FBT21OLEdBQUd5OUMsR0FBR3o5QyxFQUFFbk4sRUFBRSxJQUFXQSxFQUFFLElBQUdELEVBQUVpckMsY0FBYyxDQUFDOTlCLEVBQUVDLEdBQVVELEdBQUUsU0FBU29nRCxHQUFHcGdELEVBQUVDLEdBQUcsSUFBSXBOLEVBQUVzckQsS0FBS2wrQyxPQUFFLElBQVNBLEVBQUUsS0FBS0EsRUFBRSxJQUFJbk4sRUFBRUQsRUFBRWlyQyxjQUFjLE9BQUcsT0FBT2hyQyxHQUFHLE9BQU9tTixHQUFHeTlDLEdBQUd6OUMsRUFBRW5OLEVBQUUsSUFBV0EsRUFBRSxJQUFHa04sRUFBRUEsSUFBSW5OLEVBQUVpckMsY0FBYyxDQUFDOTlCLEVBQUVDLEdBQVVELEdBQ3paLFNBQVNxZ0QsR0FBR3JnRCxFQUFFQyxHQUFHLElBQUlwTixFQUFFaWtELEtBQUtFLEdBQUcsR0FBR25rRCxFQUFFLEdBQUdBLEdBQUUsV0FBV21OLEdBQUUsTUFBTWczQyxHQUFHLEdBQUdua0QsRUFBRSxHQUFHQSxHQUFFLFdBQVcsSUFBSUEsRUFBRXdxRCxHQUFHOXVCLFdBQVc4dUIsR0FBRzl1QixXQUFXLEVBQUUsSUFBSXZ1QixHQUFFLEdBQUlDLElBQUksUUFBUW85QyxHQUFHOXVCLFdBQVcxN0IsTUFDNUosU0FBU3NzRCxHQUFHbi9DLEVBQUVDLEVBQUVwTixHQUFHLElBQUlDLEVBQUU2bUQsS0FBSy8vQyxFQUFFZ2dELEdBQUc1NUMsR0FBR2t0QixFQUFFLENBQUMrckIsS0FBS3IvQyxFQUFFekIsT0FBT3RGLEVBQUUwckQsYUFBYSxLQUFLQyxXQUFXLEtBQUt4b0QsS0FBSyxNQUFNaTNCLEVBQUVodEIsRUFBRTI0QyxRQUE2RSxHQUFyRSxPQUFPM3JCLEVBQUVDLEVBQUVsM0IsS0FBS2szQixHQUFHQSxFQUFFbDNCLEtBQUtpM0IsRUFBRWozQixLQUFLaTNCLEVBQUVqM0IsS0FBS2szQixHQUFHanRCLEVBQUUyNEMsUUFBUTFyQixFQUFFRCxFQUFFanRCLEVBQUUwOUIsVUFBYTE5QixJQUFJa3VCLElBQUcsT0FBT2pCLEdBQUdBLElBQUlpQixHQUFFc3ZCLEdBQUdELElBQUcsTUFBTyxDQUFDLEdBQUcsSUFBSXY5QyxFQUFFZzRDLFFBQVEsT0FBTy9xQixHQUFHLElBQUlBLEVBQUUrcUIsUUFBaUMsUUFBeEIvcUIsRUFBRWh0QixFQUFFcStDLHFCQUE4QixJQUFJLElBQUl0eEIsRUFBRS9zQixFQUFFdytDLGtCQUFrQmg3QyxFQUFFd3BCLEVBQUVELEVBQUVuNkIsR0FBbUMsR0FBaENxNkIsRUFBRXF4QixhQUFhdHhCLEVBQUVDLEVBQUVzeEIsV0FBVy82QyxFQUFLbXNDLEdBQUduc0MsRUFBRXVwQixHQUFHLE9BQU8sTUFBTXY2QixJQUFhb25ELEdBQUc3NUMsRUFBRXBHLEVBQUU5RyxJQUM5WixJQUFJaXJELEdBQUcsQ0FBQ3VDLFlBQVlwSSxHQUFHL2hDLFlBQVlzbkMsR0FBRzd0QixXQUFXNnRCLEdBQUd2cUMsVUFBVXVxQyxHQUFHM3RCLG9CQUFvQjJ0QixHQUFHMXRCLGdCQUFnQjB0QixHQUFHenRCLFFBQVF5dEIsR0FBR3h0QixXQUFXd3RCLEdBQUc3b0MsT0FBTzZvQyxHQUFHMW1DLFNBQVMwbUMsR0FBRzV0QixjQUFjNHRCLEdBQUc4QyxpQkFBaUI5QyxHQUFHK0MsY0FBYy9DLEdBQUdnRCxpQkFBaUJoRCxHQUFHaUQsb0JBQW9CakQsR0FBR2tELDBCQUF5QixHQUFJL0MsR0FBRyxDQUFDMEMsWUFBWXBJLEdBQUcvaEMsWUFBWSxTQUFTblcsRUFBRUMsR0FBNEMsT0FBekMrOUMsS0FBS2xnQixjQUFjLENBQUM5OUIsT0FBRSxJQUFTQyxFQUFFLEtBQUtBLEdBQVVELEdBQUc0dkIsV0FBV3NvQixHQUFHaGxDLFVBQVUyc0MsR0FBRy92QixvQkFBb0IsU0FBUzl2QixFQUFFQyxFQUFFcE4sR0FBNkMsT0FBMUNBLEVBQUUsTUFBT0EsRUFBY0EsRUFBRXFhLE9BQU8sQ0FBQ2xOLElBQUksS0FBWTIvQyxHQUFHLEVBQUUsRUFBRUssR0FBR2hzRCxLQUFLLEtBQ3ZmaU0sRUFBRUQsR0FBR25OLElBQUlrOUIsZ0JBQWdCLFNBQVMvdkIsRUFBRUMsR0FBRyxPQUFPMC9DLEdBQUcsRUFBRSxFQUFFMy9DLEVBQUVDLElBQUkrdkIsUUFBUSxTQUFTaHdCLEVBQUVDLEdBQUcsSUFBSXBOLEVBQUVtckQsS0FBcUQsT0FBaEQvOUMsT0FBRSxJQUFTQSxFQUFFLEtBQUtBLEVBQUVELEVBQUVBLElBQUluTixFQUFFaXJDLGNBQWMsQ0FBQzk5QixFQUFFQyxHQUFVRCxHQUFHaXdCLFdBQVcsU0FBU2p3QixFQUFFQyxFQUFFcE4sR0FBRyxJQUFJQyxFQUFFa3JELEtBQXVLLE9BQWxLLzlDLE9BQUUsSUFBU3BOLEVBQUVBLEVBQUVvTixHQUFHQSxFQUFFbk4sRUFBRWdyQyxjQUFjaHJDLEVBQUUwbEQsVUFBVXY0QyxFQUFtRkQsR0FBakZBLEVBQUVsTixFQUFFb3JELE1BQU0sQ0FBQ3RGLFFBQVEsS0FBSzc4QyxTQUFTLEtBQUt1aUQsb0JBQW9CdCtDLEVBQUV5K0Msa0JBQWtCeCtDLElBQU9sRSxTQUFTb2pELEdBQUduckQsS0FBSyxLQUFLazZCLEdBQUVsdUIsR0FBUyxDQUFDbE4sRUFBRWdyQyxjQUFjOTlCLElBQUk0VSxPQUFPNnFDLEdBQUcxb0MsU0FBU3NvQyxHQUFHeHZCLGNBQWNxd0IsR0FBR0ssaUJBQWlCLFNBQVN2Z0QsR0FBRyxJQUFJQyxFQUFFby9DLEdBQUdyL0MsR0FBR25OLEVBQUVvTixFQUFFLEdBQUduTixFQUFFbU4sRUFBRSxHQUM1WixPQUQrWjQvQyxJQUFHLFdBQVcsSUFBSTUvQyxFQUFFbzlDLEdBQUc5dUIsV0FDOWU4dUIsR0FBRzl1QixXQUFXLEVBQUUsSUFBSXo3QixFQUFFa04sR0FBRyxRQUFRcTlDLEdBQUc5dUIsV0FBV3R1QixLQUFJLENBQUNELElBQVduTixHQUFHMnRELGNBQWMsV0FBVyxJQUFJeGdELEVBQUVxL0MsSUFBRyxHQUFJcC9DLEVBQUVELEVBQUUsR0FBOEIsT0FBTnkvQyxHQUFyQnovQyxFQUFFcWdELEdBQUdyc0QsS0FBSyxLQUFLZ00sRUFBRSxLQUFnQixDQUFDQSxFQUFFQyxJQUFJd2dELGlCQUFpQixTQUFTemdELEVBQUVDLEVBQUVwTixHQUFHLElBQUlDLEVBQUVrckQsS0FBa0YsT0FBN0VsckQsRUFBRWdyQyxjQUFjLENBQUMzUixLQUFLLENBQUM4eUIsWUFBWWgvQyxFQUFFaS9DLFlBQVksTUFBTXJxRCxPQUFPbUwsRUFBRTdKLFVBQVV0RCxHQUFVa3NELEdBQUdqc0QsRUFBRWtOLEVBQUVDLEVBQUVwTixJQUFJNnRELG9CQUFvQixXQUFXLEdBQUdsRSxHQUFHLENBQUMsSUFBSXg4QyxHQUFFLEVBQUdDLEVBekRsRCxTQUFZRCxHQUFHLE1BQU0sQ0FBQ210QixTQUFTK0YsRUFBR3ZzQixTQUFTM0csRUFBRW0zQixRQUFRbjNCLEdBeURENGdELEVBQUcsV0FBaUQsTUFBdEM1Z0QsSUFBSUEsR0FBRSxFQUFHbk4sRUFBRSxNQUFNaWhELE1BQU1udEMsU0FBUyxNQUFZN0csTUFBTWxELEVBQUUsU0FBUy9KLEVBQUV3c0QsR0FBR3AvQyxHQUFHLEdBQzFaLE9BRDZaLElBQVksRUFBUGl1QixHQUFFdjZCLFFBQVV1NkIsR0FBRTBQLE9BQU8sSUFBSTBoQixHQUFHLEdBQUUsV0FBV3pzRCxFQUFFLE1BQU1paEQsTUFBTW50QyxTQUFTLFlBQ2hmLEVBQU8sT0FBYzFHLEVBQW1DLE9BQU5vL0MsR0FBM0JwL0MsRUFBRSxNQUFNNnpDLE1BQU1udEMsU0FBUyxLQUFpQjFHLEdBQUcwZ0QsMEJBQXlCLEdBQUk5QyxHQUFHLENBQUN5QyxZQUFZcEksR0FBRy9oQyxZQUFZZ3FDLEdBQUd2d0IsV0FBV3NvQixHQUFHaGxDLFVBQVU0c0MsR0FBR2h3QixvQkFBb0Jtd0IsR0FBR2x3QixnQkFBZ0Jnd0IsR0FBRy92QixRQUFRb3dCLEdBQUdud0IsV0FBV291QixHQUFHenBDLE9BQU84cUMsR0FBRzNvQyxTQUFTLFdBQVcsT0FBT3NuQyxHQUFHRCxLQUFLdnVCLGNBQWNxd0IsR0FBR0ssaUJBQWlCLFNBQVN2Z0QsR0FBRyxJQUFJQyxFQUFFbytDLEdBQUdELElBQUl2ckQsRUFBRW9OLEVBQUUsR0FBR25OLEVBQUVtTixFQUFFLEdBQTZGLE9BQTFGNi9DLElBQUcsV0FBVyxJQUFJNy9DLEVBQUVvOUMsR0FBRzl1QixXQUFXOHVCLEdBQUc5dUIsV0FBVyxFQUFFLElBQUl6N0IsRUFBRWtOLEdBQUcsUUFBUXE5QyxHQUFHOXVCLFdBQVd0dUIsS0FBSSxDQUFDRCxJQUFXbk4sR0FBRzJ0RCxjQUFjLFdBQVcsSUFBSXhnRCxFQUFFcStDLEdBQUdELElBQUksR0FBRyxNQUFNLENBQUNzQixLQUFLem1ELFFBQzllK0csSUFBSXlnRCxpQkFBaUJyQixHQUFHc0Isb0JBQW9CLFdBQVcsT0FBT3JDLEdBQUdELElBQUksSUFBSXVDLDBCQUF5QixHQUFJN0MsR0FBRyxDQUFDd0MsWUFBWXBJLEdBQUcvaEMsWUFBWWdxQyxHQUFHdndCLFdBQVdzb0IsR0FBR2hsQyxVQUFVNHNDLEdBQUdod0Isb0JBQW9CbXdCLEdBQUdsd0IsZ0JBQWdCZ3dCLEdBQUcvdkIsUUFBUW93QixHQUFHbndCLFdBQVd5dUIsR0FBRzlwQyxPQUFPOHFDLEdBQUczb0MsU0FBUyxXQUFXLE9BQU8ybkMsR0FBR04sS0FBS3Z1QixjQUFjcXdCLEdBQUdLLGlCQUFpQixTQUFTdmdELEdBQUcsSUFBSUMsRUFBRXkrQyxHQUFHTixJQUFJdnJELEVBQUVvTixFQUFFLEdBQUduTixFQUFFbU4sRUFBRSxHQUE2RixPQUExRjYvQyxJQUFHLFdBQVcsSUFBSTcvQyxFQUFFbzlDLEdBQUc5dUIsV0FBVzh1QixHQUFHOXVCLFdBQVcsRUFBRSxJQUFJejdCLEVBQUVrTixHQUFHLFFBQVFxOUMsR0FBRzl1QixXQUFXdHVCLEtBQUksQ0FBQ0QsSUFBV25OLEdBQUcydEQsY0FBYyxXQUFXLElBQUl4Z0QsRUFBRTArQyxHQUFHTixJQUFJLEdBQUcsTUFBTSxDQUFDc0IsS0FBS3ptRCxRQUNyZitHLElBQUl5Z0QsaUJBQWlCckIsR0FBR3NCLG9CQUFvQixXQUFXLE9BQU9oQyxHQUFHTixJQUFJLElBQUl1QywwQkFBeUIsR0FBSUUsR0FBR3p1QixFQUFHNUQsa0JBQWtCeXBCLElBQUcsRUFBRyxTQUFTNkksR0FBRzlnRCxFQUFFQyxFQUFFcE4sRUFBRUMsR0FBR21OLEVBQUVpK0IsTUFBTSxPQUFPbCtCLEVBQUV1N0MsR0FBR3Q3QyxFQUFFLEtBQUtwTixFQUFFQyxHQUFHd29ELEdBQUdyN0MsRUFBRUQsRUFBRWsrQixNQUFNcnJDLEVBQUVDLEdBQUcsU0FBU2l1RCxHQUFHL2dELEVBQUVDLEVBQUVwTixFQUFFQyxFQUFFOEcsR0FBRy9HLEVBQUVBLEVBQUU0WixPQUFPLElBQUl5Z0IsRUFBRWp0QixFQUFFM0QsSUFBOEIsT0FBMUJ3N0MsR0FBRzczQyxFQUFFckcsR0FBRzlHLEVBQUU2cUQsR0FBRzM5QyxFQUFFQyxFQUFFcE4sRUFBRUMsRUFBRW82QixFQUFFdHpCLEdBQU0sT0FBT29HLEdBQUlpNEMsSUFBMEVoNEMsRUFBRTI5QixPQUFPLEVBQUVrakIsR0FBRzlnRCxFQUFFQyxFQUFFbk4sRUFBRThHLEdBQVVxRyxFQUFFaStCLFFBQWhHaitCLEVBQUVzNEMsWUFBWXY0QyxFQUFFdTRDLFlBQVl0NEMsRUFBRTI5QixRQUFRLElBQUk1OUIsRUFBRWc0QyxRQUFRcCtDLEVBQUVvbkQsR0FBR2hoRCxFQUFFQyxFQUFFckcsSUFDeFcsU0FBU3FuRCxHQUFHamhELEVBQUVDLEVBQUVwTixFQUFFQyxFQUFFOEcsRUFBRXN6QixHQUFHLEdBQUcsT0FBT2x0QixFQUFFLENBQUMsSUFBSWl0QixFQUFFcDZCLEVBQUVnSCxLQUFLLE1BQUcsbUJBQW9Cb3pCLEdBQUlpMEIsR0FBR2owQixTQUFJLElBQVNBLEVBQUV6aEIsY0FBYyxPQUFPM1ksRUFBRXNaLGNBQVMsSUFBU3RaLEVBQUUyWSxlQUFzRHhMLEVBQUVrN0MsR0FBR3JvRCxFQUFFZ0gsS0FBSyxLQUFLL0csRUFBRW1OLEVBQUVBLEVBQUV0TSxLQUFLdTVCLElBQUs1d0IsSUFBSTJELEVBQUUzRCxJQUFJMEQsRUFBRTI5QixPQUFPMTlCLEVBQVNBLEVBQUVpK0IsTUFBTWwrQixJQUF2R0MsRUFBRWcwQixJQUFJLEdBQUdoMEIsRUFBRXBHLEtBQUtvekIsRUFBRWswQixHQUFHbmhELEVBQUVDLEVBQUVndEIsRUFBRW42QixFQUFFOEcsRUFBRXN6QixJQUFvRixPQUFWRCxFQUFFanRCLEVBQUVrK0IsTUFBUyxJQUFLdGtDLEVBQUVzekIsS0FBS3R6QixFQUFFcXpCLEVBQUVtdkIsZUFBMEJ2cEQsRUFBRSxRQUFkQSxFQUFFQSxFQUFFc1osU0FBbUJ0WixFQUFFaTlDLElBQUtsMkMsRUFBRTlHLElBQUlrTixFQUFFMUQsTUFBTTJELEVBQUUzRCxLQUFZMGtELEdBQUdoaEQsRUFBRUMsRUFBRWl0QixJQUFHanRCLEVBQUUyOUIsT0FBTyxHQUFFNTlCLEVBQUUrNkMsR0FBRzl0QixFQUFFbjZCLElBQUt3SixJQUFJMkQsRUFBRTNELElBQUkwRCxFQUFFMjlCLE9BQU8xOUIsRUFBU0EsRUFBRWkrQixNQUFNbCtCLEdBQ2xiLFNBQVNtaEQsR0FBR25oRCxFQUFFQyxFQUFFcE4sRUFBRUMsRUFBRThHLEVBQUVzekIsR0FBRyxHQUFHLE9BQU9sdEIsR0FBRzh2QyxHQUFHOXZDLEVBQUVvOEMsY0FBY3RwRCxJQUFJa04sRUFBRTFELE1BQU0yRCxFQUFFM0QsSUFBSSxJQUFHMjdDLElBQUcsRUFBRyxJQUFLL3FCLEVBQUV0ekIsR0FBcUMsT0FBT3FHLEVBQUUrM0MsTUFBTWg0QyxFQUFFZzRDLE1BQU1nSixHQUFHaGhELEVBQUVDLEVBQUVpdEIsR0FBaEUsSUFBYSxNQUFSbHRCLEVBQUU0OUIsU0FBZXFhLElBQUcsR0FBMEMsT0FBT21KLEdBQUdwaEQsRUFBRUMsRUFBRXBOLEVBQUVDLEVBQUVvNkIsR0FDbkwsU0FBU20wQixHQUFHcmhELEVBQUVDLEVBQUVwTixHQUFHLElBQUlDLEVBQUVtTixFQUFFMjhDLGFBQWFoakQsRUFBRTlHLEVBQUVzRSxTQUFTODFCLEVBQUUsT0FBT2x0QixFQUFFQSxFQUFFODlCLGNBQWMsS0FBSyxHQUFHLFdBQVdockMsRUFBRWEsTUFBTSxrQ0FBa0NiLEVBQUVhLEtBQUssR0FBRyxJQUFZLEVBQVBzTSxFQUFFdE0sTUFBUXNNLEVBQUU2OUIsY0FBYyxDQUFDd2pCLFVBQVUsR0FBR0MsR0FBR3RoRCxFQUFFcE4sT0FBUSxJQUFHLElBQU8sV0FBRkEsR0FBOEUsT0FBT21OLEVBQUUsT0FBT2t0QixFQUFFQSxFQUFFbzBCLFVBQVV6dUQsRUFBRUEsRUFBRW9OLEVBQUUrM0MsTUFBTS8zQyxFQUFFNDNDLFdBQVcsV0FBVzUzQyxFQUFFNjlCLGNBQWMsQ0FBQ3dqQixVQUFVdGhELEdBQUd1aEQsR0FBR3RoRCxFQUFFRCxHQUFHLEtBQXhLQyxFQUFFNjlCLGNBQWMsQ0FBQ3dqQixVQUFVLEdBQUdDLEdBQUd0aEQsRUFBRSxPQUFPaXRCLEVBQUVBLEVBQUVvMEIsVUFBVXp1RCxRQUEwSCxPQUFPcTZCLEdBQUdwNkIsRUFBRW82QixFQUFFbzBCLFVBQVV6dUQsRUFBRW9OLEVBQUU2OUIsY0FBYyxNQUFNaHJDLEVBQUVELEVBQUUwdUQsR0FBR3RoRCxFQUFFbk4sR0FBZSxPQUFaZ3VELEdBQUc5Z0QsRUFBRUMsRUFBRXJHLEVBQUUvRyxHQUFVb04sRUFBRWkrQixNQUMxZSxTQUFTc2pCLEdBQUd4aEQsRUFBRUMsR0FBRyxJQUFJcE4sRUFBRW9OLEVBQUUzRCxLQUFPLE9BQU8wRCxHQUFHLE9BQU9uTixHQUFHLE9BQU9tTixHQUFHQSxFQUFFMUQsTUFBTXpKLEtBQUVvTixFQUFFMjlCLE9BQU8sS0FBSSxTQUFTd2pCLEdBQUdwaEQsRUFBRUMsRUFBRXBOLEVBQUVDLEVBQUU4RyxHQUFHLElBQUlzekIsRUFBRXluQixHQUFHOWhELEdBQUcwaEQsR0FBR2puQixHQUFFcjBCLFFBQTRDLE9BQXBDaTBCLEVBQUVzbkIsR0FBR3YwQyxFQUFFaXRCLEdBQUc0cUIsR0FBRzczQyxFQUFFckcsR0FBRy9HLEVBQUU4cUQsR0FBRzM5QyxFQUFFQyxFQUFFcE4sRUFBRUMsRUFBRW82QixFQUFFdHpCLEdBQU0sT0FBT29HLEdBQUlpNEMsSUFBMEVoNEMsRUFBRTI5QixPQUFPLEVBQUVrakIsR0FBRzlnRCxFQUFFQyxFQUFFcE4sRUFBRStHLEdBQVVxRyxFQUFFaStCLFFBQWhHaitCLEVBQUVzNEMsWUFBWXY0QyxFQUFFdTRDLFlBQVl0NEMsRUFBRTI5QixRQUFRLElBQUk1OUIsRUFBRWc0QyxRQUFRcCtDLEVBQUVvbkQsR0FBR2hoRCxFQUFFQyxFQUFFckcsSUFDOVAsU0FBUzZuRCxHQUFHemhELEVBQUVDLEVBQUVwTixFQUFFQyxFQUFFOEcsR0FBRyxHQUFHKzZDLEdBQUc5aEQsR0FBRyxDQUFDLElBQUlxNkIsR0FBRSxFQUFHOG5CLEdBQUcvMEMsUUFBUWl0QixHQUFFLEVBQVcsR0FBUjRxQixHQUFHNzNDLEVBQUVyRyxHQUFNLE9BQU9xRyxFQUFFazhCLFVBQVUsT0FBT244QixJQUFJQSxFQUFFMDlCLFVBQVUsS0FBS3o5QixFQUFFeTlCLFVBQVUsS0FBS3o5QixFQUFFMjlCLE9BQU8sR0FBR21jLEdBQUc5NUMsRUFBRXBOLEVBQUVDLEdBQUdxbkQsR0FBR2w2QyxFQUFFcE4sRUFBRUMsRUFBRThHLEdBQUc5RyxHQUFFLE9BQVEsR0FBRyxPQUFPa04sRUFBRSxDQUFDLElBQUlpdEIsRUFBRWh0QixFQUFFazhCLFVBQVVuUCxFQUFFL3NCLEVBQUVtOEMsY0FBY252QixFQUFFenhCLE1BQU13eEIsRUFBRSxJQUFJdnBCLEVBQUV3cEIsRUFBRTkxQixRQUFRMUUsRUFBRUksRUFBRXlZLFlBQVksaUJBQWtCN1ksR0FBRyxPQUFPQSxFQUFFQSxFQUFFeWxELEdBQUd6bEQsR0FBeUJBLEVBQUUraEQsR0FBR3YwQyxFQUExQnhOLEVBQUVraUQsR0FBRzloRCxHQUFHMGhELEdBQUdqbkIsR0FBRXIwQixTQUFtQixJQUFJaEYsRUFBRXBCLEVBQUU4WSx5QkFBeUJpZ0IsRUFBRSxtQkFBb0IzM0IsR0FBRyxtQkFBb0JnNUIsRUFBRW10Qix3QkFBd0J4dUIsR0FBRyxtQkFBb0JxQixFQUFFaXRCLGtDQUNwZCxtQkFBb0JqdEIsRUFBRWd0Qiw0QkFBNEJqdEIsSUFBSWw2QixHQUFHMlEsSUFBSWhSLElBQUl1bkQsR0FBRy81QyxFQUFFZ3RCLEVBQUVuNkIsRUFBRUwsR0FBRzRsRCxJQUFHLEVBQUcsSUFBSS9qRCxFQUFFMkwsRUFBRTY5QixjQUFjN1EsRUFBRS8wQixNQUFNNUQsRUFBRThrRCxHQUFHbjVDLEVBQUVuTixFQUFFbTZCLEVBQUVyekIsR0FBRzZKLEVBQUV4RCxFQUFFNjlCLGNBQWM5USxJQUFJbDZCLEdBQUd3QixJQUFJbVAsR0FBRzhwQixHQUFFdDBCLFNBQVNvL0MsSUFBSSxtQkFBb0Jwa0QsSUFBSXVsRCxHQUFHdjVDLEVBQUVwTixFQUFFb0IsRUFBRW5CLEdBQUcyUSxFQUFFeEQsRUFBRTY5QixnQkFBZ0I5USxFQUFFcXJCLElBQUl5QixHQUFHNzVDLEVBQUVwTixFQUFFbTZCLEVBQUVsNkIsRUFBRXdCLEVBQUVtUCxFQUFFaFIsS0FBS201QixHQUFHLG1CQUFvQnFCLEVBQUVvdEIsMkJBQTJCLG1CQUFvQnB0QixFQUFFcXRCLHFCQUFxQixtQkFBb0JydEIsRUFBRXF0QixvQkFBb0JydEIsRUFBRXF0QixxQkFBcUIsbUJBQW9CcnRCLEVBQUVvdEIsMkJBQTJCcHRCLEVBQUVvdEIsNkJBQTZCLG1CQUN6ZXB0QixFQUFFek0sb0JBQW9CdmdCLEVBQUUyOUIsT0FBTyxLQUFLLG1CQUFvQjNRLEVBQUV6TSxvQkFBb0J2Z0IsRUFBRTI5QixPQUFPLEdBQUczOUIsRUFBRW04QyxjQUFjdHBELEVBQUVtTixFQUFFNjlCLGNBQWNyNkIsR0FBR3dwQixFQUFFenhCLE1BQU0xSSxFQUFFbTZCLEVBQUUvMEIsTUFBTXVMLEVBQUV3cEIsRUFBRTkxQixRQUFRMUUsRUFBRUssRUFBRWs2QixJQUFJLG1CQUFvQkMsRUFBRXpNLG9CQUFvQnZnQixFQUFFMjlCLE9BQU8sR0FBRzlxQyxHQUFFLE9BQVEsQ0FBQ202QixFQUFFaHRCLEVBQUVrOEIsVUFBVTJjLEdBQUc5NEMsRUFBRUMsR0FBRytzQixFQUFFL3NCLEVBQUVtOEMsY0FBYzNwRCxFQUFFd04sRUFBRXBHLE9BQU9vRyxFQUFFZzdDLFlBQVlqdUIsRUFBRXFxQixHQUFHcDNDLEVBQUVwRyxLQUFLbXpCLEdBQUdDLEVBQUV6eEIsTUFBTS9JLEVBQUVtNUIsRUFBRTNyQixFQUFFMjhDLGFBQWF0b0QsRUFBRTI0QixFQUFFOTFCLFFBQXdCLGlCQUFoQnNNLEVBQUU1USxFQUFFeVksY0FBaUMsT0FBTzdILEVBQUVBLEVBQUV5MEMsR0FBR3owQyxHQUF5QkEsRUFBRSt3QyxHQUFHdjBDLEVBQTFCd0QsRUFBRWt4QyxHQUFHOWhELEdBQUcwaEQsR0FBR2puQixHQUFFcjBCLFNBQW1CLElBQUlpekIsRUFBRXI1QixFQUFFOFksMEJBQTBCMVgsRUFBRSxtQkFBb0JpNEIsR0FDbmYsbUJBQW9CZSxFQUFFbXRCLDBCQUEwQixtQkFBb0JudEIsRUFBRWl0QixrQ0FBa0MsbUJBQW9CanRCLEVBQUVndEIsNEJBQTRCanRCLElBQUlwQixHQUFHdDNCLElBQUltUCxJQUFJdTJDLEdBQUcvNUMsRUFBRWd0QixFQUFFbjZCLEVBQUUyUSxHQUFHNDBDLElBQUcsRUFBRy9qRCxFQUFFMkwsRUFBRTY5QixjQUFjN1EsRUFBRS8wQixNQUFNNUQsRUFBRThrRCxHQUFHbjVDLEVBQUVuTixFQUFFbTZCLEVBQUVyekIsR0FBRyxJQUFJK0MsRUFBRXNELEVBQUU2OUIsY0FBYzlRLElBQUlwQixHQUFHdDNCLElBQUlxSSxHQUFHNHdCLEdBQUV0MEIsU0FBU28vQyxJQUFJLG1CQUFvQm5zQixJQUFJc3RCLEdBQUd2NUMsRUFBRXBOLEVBQUVxNUIsRUFBRXA1QixHQUFHNkosRUFBRXNELEVBQUU2OUIsZ0JBQWdCcnJDLEVBQUU0bEQsSUFBSXlCLEdBQUc3NUMsRUFBRXBOLEVBQUVKLEVBQUVLLEVBQUV3QixFQUFFcUksRUFBRThHLEtBQUt4UCxHQUFHLG1CQUFvQmc1QixFQUFFeTBCLDRCQUE0QixtQkFBb0J6MEIsRUFBRTAwQixzQkFBc0IsbUJBQW9CMTBCLEVBQUUwMEIscUJBQXFCMTBCLEVBQUUwMEIsb0JBQW9CN3VELEVBQzFnQjZKLEVBQUU4RyxHQUFHLG1CQUFvQndwQixFQUFFeTBCLDRCQUE0QnowQixFQUFFeTBCLDJCQUEyQjV1RCxFQUFFNkosRUFBRThHLElBQUksbUJBQW9Cd3BCLEVBQUV0TSxxQkFBcUIxZ0IsRUFBRTI5QixPQUFPLEdBQUcsbUJBQW9CM1EsRUFBRW10QiwwQkFBMEJuNkMsRUFBRTI5QixPQUFPLE9BQU8sbUJBQW9CM1EsRUFBRXRNLG9CQUFvQnFNLElBQUlodEIsRUFBRW84QyxlQUFlOW5ELElBQUkwTCxFQUFFODlCLGdCQUFnQjc5QixFQUFFMjlCLE9BQU8sR0FBRyxtQkFBb0IzUSxFQUFFbXRCLHlCQUF5QnB0QixJQUFJaHRCLEVBQUVvOEMsZUFBZTluRCxJQUFJMEwsRUFBRTg5QixnQkFBZ0I3OUIsRUFBRTI5QixPQUFPLEtBQUszOUIsRUFBRW04QyxjQUFjdHBELEVBQUVtTixFQUFFNjlCLGNBQWNuaEMsR0FBR3N3QixFQUFFenhCLE1BQU0xSSxFQUFFbTZCLEVBQUUvMEIsTUFBTXlFLEVBQUVzd0IsRUFBRTkxQixRQUFRc00sRUFBRTNRLEVBQUVMLElBQUksbUJBQW9CdzZCLEVBQUV0TSxvQkFDN2ZxTSxJQUFJaHRCLEVBQUVvOEMsZUFBZTluRCxJQUFJMEwsRUFBRTg5QixnQkFBZ0I3OUIsRUFBRTI5QixPQUFPLEdBQUcsbUJBQW9CM1EsRUFBRW10Qix5QkFBeUJwdEIsSUFBSWh0QixFQUFFbzhDLGVBQWU5bkQsSUFBSTBMLEVBQUU4OUIsZ0JBQWdCNzlCLEVBQUUyOUIsT0FBTyxLQUFLOXFDLEdBQUUsR0FBSSxPQUFPOHVELEdBQUc1aEQsRUFBRUMsRUFBRXBOLEVBQUVDLEVBQUVvNkIsRUFBRXR6QixHQUN6TCxTQUFTZ29ELEdBQUc1aEQsRUFBRUMsRUFBRXBOLEVBQUVDLEVBQUU4RyxFQUFFc3pCLEdBQUdzMEIsR0FBR3hoRCxFQUFFQyxHQUFHLElBQUlndEIsRUFBRSxJQUFhLEdBQVJodEIsRUFBRTI5QixPQUFVLElBQUk5cUMsSUFBSW02QixFQUFFLE9BQU9yekIsR0FBR3M3QyxHQUFHajFDLEVBQUVwTixHQUFFLEdBQUltdUQsR0FBR2hoRCxFQUFFQyxFQUFFaXRCLEdBQUdwNkIsRUFBRW1OLEVBQUVrOEIsVUFBVTBrQixHQUFHNW5ELFFBQVFnSCxFQUFFLElBQUkrc0IsRUFBRUMsR0FBRyxtQkFBb0JwNkIsRUFBRTZZLHlCQUF5QixLQUFLNVksRUFBRTJaLFNBQXdJLE9BQS9IeE0sRUFBRTI5QixPQUFPLEVBQUUsT0FBTzU5QixHQUFHaXRCLEdBQUdodEIsRUFBRWkrQixNQUFNb2QsR0FBR3I3QyxFQUFFRCxFQUFFaytCLE1BQU0sS0FBS2hSLEdBQUdqdEIsRUFBRWkrQixNQUFNb2QsR0FBR3I3QyxFQUFFLEtBQUsrc0IsRUFBRUUsSUFBSTR6QixHQUFHOWdELEVBQUVDLEVBQUUrc0IsRUFBRUUsR0FBR2p0QixFQUFFNjlCLGNBQWNockMsRUFBRW9GLE1BQU0wQixHQUFHczdDLEdBQUdqMUMsRUFBRXBOLEdBQUUsR0FBV29OLEVBQUVpK0IsTUFBTSxTQUFTMmpCLEdBQUc3aEQsR0FBRyxJQUFJQyxFQUFFRCxFQUFFbThCLFVBQVVsOEIsRUFBRTZoRCxlQUFlak4sR0FBRzcwQyxFQUFFQyxFQUFFNmhELGVBQWU3aEQsRUFBRTZoRCxpQkFBaUI3aEQsRUFBRTlJLFNBQVM4SSxFQUFFOUksU0FBUzA5QyxHQUFHNzBDLEVBQUVDLEVBQUU5SSxTQUFRLEdBQUkwa0QsR0FBRzc3QyxFQUFFQyxFQUFFa2dDLGVBQzdkLElBUzBWNGhCLEdBQU1DLEdBQUdDLEdBVC9WQyxHQUFHLENBQUNua0IsV0FBVyxLQUFLb2tCLFVBQVUsR0FDbEMsU0FBU0MsR0FBR3BpRCxFQUFFQyxFQUFFcE4sR0FBRyxJQUFzQ282QixFQUFsQ242QixFQUFFbU4sRUFBRTI4QyxhQUFhaGpELEVBQUVpMEIsR0FBRTUwQixRQUFRaTBCLEdBQUUsRUFBNk0sT0FBdk1ELEVBQUUsSUFBYSxHQUFSaHRCLEVBQUUyOUIsVUFBYTNRLEdBQUUsT0FBT2p0QixHQUFHLE9BQU9BLEVBQUU4OUIsZ0JBQWlCLElBQU8sRUFBRmxrQyxJQUFNcXpCLEdBQUdDLEdBQUUsRUFBR2p0QixFQUFFMjlCLFFBQVEsSUFBSSxPQUFPNTlCLEdBQUcsT0FBT0EsRUFBRTg5QixvQkFBZSxJQUFTaHJDLEVBQUV1dkQsV0FBVSxJQUFLdnZELEVBQUV3dkQsNkJBQTZCMW9ELEdBQUcsR0FBR2d6QixHQUFFaUIsR0FBSSxFQUFGajBCLEdBQVEsT0FBT29HLFFBQUcsSUFBU2xOLEVBQUV1dkQsVUFBVXhGLEdBQUc1OEMsR0FBR0QsRUFBRWxOLEVBQUVzRSxTQUFTd0MsRUFBRTlHLEVBQUV1dkQsU0FBWW4xQixHQUFTbHRCLEVBQUV1aUQsR0FBR3RpRCxFQUFFRCxFQUFFcEcsRUFBRS9HLEdBQUdvTixFQUFFaStCLE1BQU1KLGNBQWMsQ0FBQ3dqQixVQUFVenVELEdBQUdvTixFQUFFNjlCLGNBQWNva0IsR0FBR2xpRCxHQUFLLGlCQUFrQmxOLEVBQUUwdkQsMkJBQWlDeGlELEVBQUV1aUQsR0FBR3RpRCxFQUFFRCxFQUFFcEcsRUFBRS9HLEdBQUdvTixFQUFFaStCLE1BQU1KLGNBQWMsQ0FBQ3dqQixVQUFVenVELEdBQy9mb04sRUFBRTY5QixjQUFjb2tCLEdBQUdqaUQsRUFBRSszQyxNQUFNLFNBQVNoNEMsS0FBRW5OLEVBQUU0dkQsR0FBRyxDQUFDOXVELEtBQUssVUFBVXlELFNBQVM0SSxHQUFHQyxFQUFFdE0sS0FBS2QsRUFBRSxPQUFROHFDLE9BQU8xOUIsRUFBU0EsRUFBRWkrQixNQUFNcnJDLEtBQVltTixFQUFFODlCLGNBQWtCNVEsR0FBU3A2QixFQUFFNHZELEdBQUcxaUQsRUFBRUMsRUFBRW5OLEVBQUVzRSxTQUFTdEUsRUFBRXV2RCxTQUFTeHZELEdBQUdxNkIsRUFBRWp0QixFQUFFaStCLE1BQU10a0MsRUFBRW9HLEVBQUVrK0IsTUFBTUosY0FBYzVRLEVBQUU0USxjQUFjLE9BQU9sa0MsRUFBRSxDQUFDMG5ELFVBQVV6dUQsR0FBRyxDQUFDeXVELFVBQVUxbkQsRUFBRTBuRCxVQUFVenVELEdBQUdxNkIsRUFBRTJxQixXQUFXNzNDLEVBQUU2M0MsWUFBWWhsRCxFQUFFb04sRUFBRTY5QixjQUFjb2tCLEdBQUdwdkQsSUFBRUQsRUFBRTh2RCxHQUFHM2lELEVBQUVDLEVBQUVuTixFQUFFc0UsU0FBU3ZFLEdBQUdvTixFQUFFNjlCLGNBQWMsS0FBWWpyQyxJQUNsUSxTQUFTMHZELEdBQUd2aUQsRUFBRUMsRUFBRXBOLEVBQUVDLEdBQUcsSUFBSThHLEVBQUVvRyxFQUFFck0sS0FBS3U1QixFQUFFbHRCLEVBQUVrK0IsTUFBdUssT0FBaktqK0IsRUFBRSxDQUFDdE0sS0FBSyxTQUFTeUQsU0FBUzZJLEdBQUcsSUFBTyxFQUFGckcsSUFBTSxPQUFPc3pCLEdBQUdBLEVBQUUycUIsV0FBVyxFQUFFM3FCLEVBQUUwdkIsYUFBYTM4QyxHQUFHaXRCLEVBQUV1MUIsR0FBR3hpRCxFQUFFckcsRUFBRSxFQUFFLE1BQU0vRyxFQUFFd29ELEdBQUd4b0QsRUFBRStHLEVBQUU5RyxFQUFFLE1BQU1vNkIsRUFBRXlRLE9BQU8zOUIsRUFBRW5OLEVBQUU4cUMsT0FBTzM5QixFQUFFa3RCLEVBQUVpUixRQUFRdHJDLEVBQUVtTixFQUFFaytCLE1BQU1oUixFQUFTcjZCLEVBQ3JWLFNBQVM4dkQsR0FBRzNpRCxFQUFFQyxFQUFFcE4sRUFBRUMsR0FBRyxJQUFJOEcsRUFBRW9HLEVBQUVrK0IsTUFBaUwsT0FBM0tsK0IsRUFBRXBHLEVBQUV1a0MsUUFBUXRyQyxFQUFFa29ELEdBQUduaEQsRUFBRSxDQUFDakcsS0FBSyxVQUFVeUQsU0FBU3ZFLElBQUksSUFBWSxFQUFQb04sRUFBRXRNLFFBQVVkLEVBQUVtbEQsTUFBTWxsRCxHQUFHRCxFQUFFOHFDLE9BQU8xOUIsRUFBRXBOLEVBQUVzckMsUUFBUSxLQUFLLE9BQU9uK0IsSUFBSUEsRUFBRTY2QyxXQUFXLEtBQUs3NkMsRUFBRTQ5QixNQUFNLEVBQUUzOUIsRUFBRTY2QyxZQUFZNzZDLEVBQUUyNkMsV0FBVzU2QyxHQUFVQyxFQUFFaStCLE1BQU1yckMsRUFDN04sU0FBUzZ2RCxHQUFHMWlELEVBQUVDLEVBQUVwTixFQUFFQyxFQUFFOEcsR0FBRyxJQUFJc3pCLEVBQUVqdEIsRUFBRXRNLEtBQUtzNUIsRUFBRWp0QixFQUFFaytCLE1BQU1sK0IsRUFBRWl0QixFQUFFa1IsUUFBUSxJQUFJblIsRUFBRSxDQUFDcjVCLEtBQUssU0FBU3lELFNBQVN2RSxHQUFvUyxPQUFqUyxJQUFPLEVBQUZxNkIsSUFBTWp0QixFQUFFaStCLFFBQVFqUixJQUFHcDZCLEVBQUVvTixFQUFFaStCLE9BQVEyWixXQUFXLEVBQUVobEQsRUFBRStwRCxhQUFhNXZCLEVBQWlCLFFBQWZDLEVBQUVwNkIsRUFBRStuRCxhQUFxQjM2QyxFQUFFNjZDLFlBQVlqb0QsRUFBRWlvRCxZQUFZNzZDLEVBQUUyNkMsV0FBVzN0QixFQUFFQSxFQUFFNHRCLFdBQVcsTUFBTTU2QyxFQUFFNjZDLFlBQVk3NkMsRUFBRTI2QyxXQUFXLE1BQU0vbkQsRUFBRWtvRCxHQUFHOXRCLEVBQUVELEdBQUcsT0FBT2h0QixFQUFFbE4sRUFBRWlvRCxHQUFHLzZDLEVBQUVsTixJQUFJQSxFQUFFdW9ELEdBQUd2b0QsRUFBRW82QixFQUFFdHpCLEVBQUUsT0FBUWdrQyxPQUFPLEVBQUc5cUMsRUFBRTZxQyxPQUFPMTlCLEVBQUVwTixFQUFFOHFDLE9BQU8xOUIsRUFBRXBOLEVBQUVzckMsUUFBUXJyQyxFQUFFbU4sRUFBRWkrQixNQUFNcnJDLEVBQVNDLEVBQUUsU0FBUzh2RCxHQUFHNWlELEVBQUVDLEdBQUdELEVBQUVnNEMsT0FBTy8zQyxFQUFFLElBQUlwTixFQUFFbU4sRUFBRTA5QixVQUFVLE9BQU83cUMsSUFBSUEsRUFBRW1sRCxPQUFPLzNDLEdBQUcyM0MsR0FBRzUzQyxFQUFFMjlCLE9BQU8xOUIsR0FDdGQsU0FBUzRpRCxHQUFHN2lELEVBQUVDLEVBQUVwTixFQUFFQyxFQUFFOEcsRUFBRXN6QixHQUFHLElBQUlELEVBQUVqdEIsRUFBRTg5QixjQUFjLE9BQU83USxFQUFFanRCLEVBQUU4OUIsY0FBYyxDQUFDZ2xCLFlBQVk3aUQsRUFBRThpRCxVQUFVLEtBQUtDLG1CQUFtQixFQUFFbnRELEtBQUsvQyxFQUFFbXdELEtBQUtwd0QsRUFBRXF3RCxTQUFTdHBELEVBQUVnaEQsV0FBVzF0QixJQUFJRCxFQUFFNjFCLFlBQVk3aUQsRUFBRWd0QixFQUFFODFCLFVBQVUsS0FBSzkxQixFQUFFKzFCLG1CQUFtQixFQUFFLzFCLEVBQUVwM0IsS0FBSy9DLEVBQUVtNkIsRUFBRWcyQixLQUFLcHdELEVBQUVvNkIsRUFBRWkyQixTQUFTdHBELEVBQUVxekIsRUFBRTJ0QixXQUFXMXRCLEdBQ3ZRLFNBQVNpMkIsR0FBR25qRCxFQUFFQyxFQUFFcE4sR0FBRyxJQUFJQyxFQUFFbU4sRUFBRTI4QyxhQUFhaGpELEVBQUU5RyxFQUFFdXBELFlBQVludkIsRUFBRXA2QixFQUFFbXdELEtBQXNDLEdBQWpDbkMsR0FBRzlnRCxFQUFFQyxFQUFFbk4sRUFBRXNFLFNBQVN2RSxHQUFrQixJQUFPLEdBQXRCQyxFQUFFKzZCLEdBQUU1MEIsVUFBcUJuRyxFQUFJLEVBQUZBLEVBQUksRUFBRW1OLEVBQUUyOUIsT0FBTyxPQUFPLENBQUMsR0FBRyxPQUFPNTlCLEdBQUcsSUFBYSxHQUFSQSxFQUFFNDlCLE9BQVU1OUIsRUFBRSxJQUFJQSxFQUFFQyxFQUFFaStCLE1BQU0sT0FBT2wrQixHQUFHLENBQUMsR0FBRyxLQUFLQSxFQUFFaTBCLElBQUksT0FBT2owQixFQUFFODlCLGVBQWU4a0IsR0FBRzVpRCxFQUFFbk4sUUFBUSxHQUFHLEtBQUttTixFQUFFaTBCLElBQUkydUIsR0FBRzVpRCxFQUFFbk4sUUFBUSxHQUFHLE9BQU9tTixFQUFFaytCLE1BQU0sQ0FBQ2wrQixFQUFFaytCLE1BQU1QLE9BQU8zOUIsRUFBRUEsRUFBRUEsRUFBRWsrQixNQUFNLFNBQVMsR0FBR2wrQixJQUFJQyxFQUFFLE1BQU1ELEVBQUUsS0FBSyxPQUFPQSxFQUFFbStCLFNBQVMsQ0FBQyxHQUFHLE9BQU9uK0IsRUFBRTI5QixRQUFRMzlCLEVBQUUyOUIsU0FBUzE5QixFQUFFLE1BQU1ELEVBQUVBLEVBQUVBLEVBQUUyOUIsT0FBTzM5QixFQUFFbStCLFFBQVFSLE9BQU8zOUIsRUFBRTI5QixPQUFPMzlCLEVBQUVBLEVBQUVtK0IsUUFBUXJyQyxHQUFHLEVBQVMsR0FBUDg1QixHQUFFaUIsR0FBRS82QixHQUFNLElBQVksRUFBUG1OLEVBQUV0TSxNQUFRc00sRUFBRTY5QixjQUN6ZSxVQUFVLE9BQU9sa0MsR0FBRyxJQUFLLFdBQXFCLElBQVYvRyxFQUFFb04sRUFBRWkrQixNQUFVdGtDLEVBQUUsS0FBSyxPQUFPL0csR0FBaUIsUUFBZG1OLEVBQUVuTixFQUFFNnFDLFlBQW9CLE9BQU95ZSxHQUFHbjhDLEtBQUtwRyxFQUFFL0csR0FBR0EsRUFBRUEsRUFBRXNyQyxRQUFZLFFBQUp0ckMsRUFBRStHLElBQVlBLEVBQUVxRyxFQUFFaStCLE1BQU1qK0IsRUFBRWkrQixNQUFNLE9BQU90a0MsRUFBRS9HLEVBQUVzckMsUUFBUXRyQyxFQUFFc3JDLFFBQVEsTUFBTTBrQixHQUFHNWlELEdBQUUsRUFBR3JHLEVBQUUvRyxFQUFFcTZCLEVBQUVqdEIsRUFBRTI2QyxZQUFZLE1BQU0sSUFBSyxZQUE2QixJQUFqQi9uRCxFQUFFLEtBQUsrRyxFQUFFcUcsRUFBRWkrQixNQUFVaitCLEVBQUVpK0IsTUFBTSxLQUFLLE9BQU90a0MsR0FBRyxDQUFlLEdBQUcsUUFBakJvRyxFQUFFcEcsRUFBRThqQyxZQUF1QixPQUFPeWUsR0FBR244QyxHQUFHLENBQUNDLEVBQUVpK0IsTUFBTXRrQyxFQUFFLE1BQU1vRyxFQUFFcEcsRUFBRXVrQyxRQUFRdmtDLEVBQUV1a0MsUUFBUXRyQyxFQUFFQSxFQUFFK0csRUFBRUEsRUFBRW9HLEVBQUU2aUQsR0FBRzVpRCxHQUFFLEVBQUdwTixFQUFFLEtBQUtxNkIsRUFBRWp0QixFQUFFMjZDLFlBQVksTUFBTSxJQUFLLFdBQVdpSSxHQUFHNWlELEdBQUUsRUFBRyxLQUFLLFVBQUssRUFBT0EsRUFBRTI2QyxZQUFZLE1BQU0sUUFBUTM2QyxFQUFFNjlCLGNBQWMsS0FBSyxPQUFPNzlCLEVBQUVpK0IsTUFDL2YsU0FBUzhpQixHQUFHaGhELEVBQUVDLEVBQUVwTixHQUF5RCxHQUF0RCxPQUFPbU4sSUFBSUMsRUFBRXhILGFBQWF1SCxFQUFFdkgsY0FBYzRnRCxJQUFJcDVDLEVBQUUrM0MsTUFBUyxJQUFLbmxELEVBQUVvTixFQUFFNDNDLFlBQVksQ0FBQyxHQUFHLE9BQU83M0MsR0FBR0MsRUFBRWkrQixRQUFRbCtCLEVBQUVrK0IsTUFBTSxNQUFNcCtCLE1BQU1sRCxFQUFFLE1BQU0sR0FBRyxPQUFPcUQsRUFBRWkrQixNQUFNLENBQTRDLElBQWpDcnJDLEVBQUVrb0QsR0FBWi82QyxFQUFFQyxFQUFFaStCLE1BQWFsK0IsRUFBRTQ4QyxjQUFjMzhDLEVBQUVpK0IsTUFBTXJyQyxFQUFNQSxFQUFFOHFDLE9BQU8xOUIsRUFBRSxPQUFPRCxFQUFFbStCLFNBQVNuK0IsRUFBRUEsRUFBRW0rQixTQUFRdHJDLEVBQUVBLEVBQUVzckMsUUFBUTRjLEdBQUcvNkMsRUFBRUEsRUFBRTQ4QyxlQUFnQmpmLE9BQU8xOUIsRUFBRXBOLEVBQUVzckMsUUFBUSxLQUFLLE9BQU9sK0IsRUFBRWkrQixNQUFNLE9BQU8sS0FLNVAsU0FBU2tsQixHQUFHcGpELEVBQUVDLEdBQUcsSUFBSXU4QyxHQUFHLE9BQU94OEMsRUFBRWtqRCxVQUFVLElBQUssU0FBU2pqRCxFQUFFRCxFQUFFaWpELEtBQUssSUFBSSxJQUFJcHdELEVBQUUsS0FBSyxPQUFPb04sR0FBRyxPQUFPQSxFQUFFeTlCLFlBQVk3cUMsRUFBRW9OLEdBQUdBLEVBQUVBLEVBQUVrK0IsUUFBUSxPQUFPdHJDLEVBQUVtTixFQUFFaWpELEtBQUssS0FBS3B3RCxFQUFFc3JDLFFBQVEsS0FBSyxNQUFNLElBQUssWUFBWXRyQyxFQUFFbU4sRUFBRWlqRCxLQUFLLElBQUksSUFBSW53RCxFQUFFLEtBQUssT0FBT0QsR0FBRyxPQUFPQSxFQUFFNnFDLFlBQVk1cUMsRUFBRUQsR0FBR0EsRUFBRUEsRUFBRXNyQyxRQUFRLE9BQU9yckMsRUFBRW1OLEdBQUcsT0FBT0QsRUFBRWlqRCxLQUFLampELEVBQUVpakQsS0FBSyxLQUFLampELEVBQUVpakQsS0FBSzlrQixRQUFRLEtBQUtyckMsRUFBRXFyQyxRQUFRLE1BQzdaLFNBQVNrbEIsR0FBR3JqRCxFQUFFQyxFQUFFcE4sR0FBRyxJQUFJQyxFQUFFbU4sRUFBRTI4QyxhQUFhLE9BQU8zOEMsRUFBRWcwQixLQUFLLEtBQUssRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssRUFBRSxLQUFLLEdBQUcsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEdBQUcsS0FBSyxFQUFFLEtBQUssR0FBRyxPQUFPLEtBQUssS0FBSyxFQUFFLE9BQU8wZ0IsR0FBRzEwQyxFQUFFcEcsT0FBTys2QyxLQUFLLEtBQUssS0FBSyxFQUFzTCxPQUFwTG9ILEtBQUtydkIsR0FBRVksSUFBR1osR0FBRVcsSUFBRzR2QixNQUFLcHFELEVBQUVtTixFQUFFazhCLFdBQVkybEIsaUJBQWlCaHZELEVBQUVxRSxRQUFRckUsRUFBRWd2RCxlQUFlaHZELEVBQUVndkQsZUFBZSxNQUFTLE9BQU85aEQsR0FBRyxPQUFPQSxFQUFFaytCLFFBQU02ZSxHQUFHOThDLEdBQUdBLEVBQUUyOUIsT0FBTyxFQUFFOXFDLEVBQUVvdEMsVUFBVWpnQyxFQUFFMjlCLE9BQU8sTUFBa0IsS0FBSyxLQUFLLEVBQUVzZSxHQUFHajhDLEdBQUcsSUFBSXJHLEVBQUVnaUQsR0FBR0QsR0FBRzFpRCxTQUFrQixHQUFUcEcsRUFBRW9OLEVBQUVwRyxLQUFRLE9BQU9tRyxHQUFHLE1BQU1DLEVBQUVrOEIsVUFBVTZsQixHQUFHaGlELEVBQUVDLEVBQUVwTixFQUFFQyxHQUFLa04sRUFBRTFELE1BQU0yRCxFQUFFM0QsTUFBTTJELEVBQUUyOUIsT0FBTyxTQUFTLENBQUMsSUFBSTlxQyxFQUFFLENBQUMsR0FBRyxPQUM3Zm1OLEVBQUVrOEIsVUFBVSxNQUFNcjhCLE1BQU1sRCxFQUFFLE1BQU0sT0FBTyxLQUFzQixHQUFqQm9ELEVBQUU0N0MsR0FBR0gsR0FBR3hpRCxTQUFZOGpELEdBQUc5OEMsR0FBRyxDQUFDbk4sRUFBRW1OLEVBQUVrOEIsVUFBVXRwQyxFQUFFb04sRUFBRXBHLEtBQUssSUFBSXF6QixFQUFFanRCLEVBQUVtOEMsY0FBOEIsT0FBaEJ0cEQsRUFBRWtoRCxJQUFJL3pDLEVBQUVuTixFQUFFbWhELElBQUkvbUIsRUFBU3I2QixHQUFHLElBQUssU0FBUzY1QixHQUFFLFNBQVM1NUIsR0FBRzQ1QixHQUFFLFFBQVE1NUIsR0FBRyxNQUFNLElBQUssU0FBUyxJQUFLLFNBQVMsSUFBSyxRQUFRNDVCLEdBQUUsT0FBTzU1QixHQUFHLE1BQU0sSUFBSyxRQUFRLElBQUssUUFBUSxJQUFJa04sRUFBRSxFQUFFQSxFQUFFeXhDLEdBQUc3OEMsT0FBT29MLElBQUkwc0IsR0FBRStrQixHQUFHenhDLEdBQUdsTixHQUFHLE1BQU0sSUFBSyxTQUFTNDVCLEdBQUUsUUFBUTU1QixHQUFHLE1BQU0sSUFBSyxNQUFNLElBQUssUUFBUSxJQUFLLE9BQU80NUIsR0FBRSxRQUFRNTVCLEdBQUc0NUIsR0FBRSxPQUFPNTVCLEdBQUcsTUFBTSxJQUFLLFVBQVU0NUIsR0FBRSxTQUFTNTVCLEdBQUcsTUFBTSxJQUFLLFFBQVF3aUMsR0FBR3hpQyxFQUFFbzZCLEdBQUdSLEdBQUUsVUFBVTU1QixHQUFHLE1BQU0sSUFBSyxTQUFTQSxFQUFFc2lDLGNBQzVmLENBQUNrdUIsY0FBY3AyQixFQUFFcTJCLFVBQVU3MkIsR0FBRSxVQUFVNTVCLEdBQUcsTUFBTSxJQUFLLFdBQVd3akMsR0FBR3hqQyxFQUFFbzZCLEdBQUdSLEdBQUUsVUFBVTU1QixHQUFrQixJQUFJLElBQUltNkIsS0FBdkJ1TyxHQUFHM29DLEVBQUVxNkIsR0FBR2x0QixFQUFFLEtBQWtCa3RCLEVBQUVBLEVBQUU3NEIsZUFBZTQ0QixLQUFLcnpCLEVBQUVzekIsRUFBRUQsR0FBRyxhQUFhQSxFQUFFLGlCQUFrQnJ6QixFQUFFOUcsRUFBRTJqQyxjQUFjNzhCLElBQUlvRyxFQUFFLENBQUMsV0FBV3BHLElBQUksaUJBQWtCQSxHQUFHOUcsRUFBRTJqQyxjQUFjLEdBQUc3OEIsSUFBSW9HLEVBQUUsQ0FBQyxXQUFXLEdBQUdwRyxJQUFJMDJCLEVBQUdqOEIsZUFBZTQ0QixJQUFJLE1BQU1yekIsR0FBRyxhQUFhcXpCLEdBQUdQLEdBQUUsU0FBUzU1QixJQUFJLE9BQU9ELEdBQUcsSUFBSyxRQUFRMGhDLEVBQUd6aEMsR0FBRzhpQyxHQUFHOWlDLEVBQUVvNkIsR0FBRSxHQUFJLE1BQU0sSUFBSyxXQUFXcUgsRUFBR3poQyxHQUFHMGpDLEdBQUcxakMsR0FBRyxNQUFNLElBQUssU0FBUyxJQUFLLFNBQVMsTUFBTSxRQUFRLG1CQUFvQm82QixFQUFFN1csVUFBVXZqQixFQUFFMHdELFFBQ3RmelEsSUFBSWpnRCxFQUFFa04sRUFBRUMsRUFBRXM0QyxZQUFZemxELEVBQUUsT0FBT0EsSUFBSW1OLEVBQUUyOUIsT0FBTyxPQUFPLENBQWlaLE9BQWhaM1EsRUFBRSxJQUFJcnpCLEVBQUUyOUIsU0FBUzM5QixFQUFFQSxFQUFFaThCLGNBQWM3MUIsSUFBSTAyQixLQUFVMTJCLEVBQUUyMkIsR0FBRzlqQyxJQUFJbU4sSUFBSTAyQixHQUFRLFdBQVc3akMsSUFBR21OLEVBQUVpdEIsRUFBRXYxQixjQUFjLFFBQVN3L0IsVUFBVSxxQkFBdUJsM0IsRUFBRUEsRUFBRThhLFlBQVk5YSxFQUFFbzNCLGFBQWEsaUJBQWtCdGtDLEVBQUU0SixHQUFHc0QsRUFBRWl0QixFQUFFdjFCLGNBQWM3RSxFQUFFLENBQUM2SixHQUFHNUosRUFBRTRKLE1BQU1zRCxFQUFFaXRCLEVBQUV2MUIsY0FBYzdFLEdBQUcsV0FBV0EsSUFBSW82QixFQUFFanRCLEVBQUVsTixFQUFFeXdELFNBQVN0MkIsRUFBRXMyQixVQUFTLEVBQUd6d0QsRUFBRWtnQixPQUFPaWEsRUFBRWphLEtBQUtsZ0IsRUFBRWtnQixRQUFRaFQsRUFBRWl0QixFQUFFdzJCLGdCQUFnQnpqRCxFQUFFbk4sR0FBR21OLEVBQUVnMEMsSUFBSS96QyxFQUFFRCxFQUFFaTBDLElBQUluaEQsRUFBRWl2RCxHQUFHL2hELEVBQUVDLEdBQVNBLEVBQUVrOEIsVUFBVW44QixFQUFFaXRCLEVBQUV3TyxHQUFHNW9DLEVBQUVDLEdBQVVELEdBQUcsSUFBSyxTQUFTNjVCLEdBQUUsU0FBUzFzQixHQUFHMHNCLEdBQUUsUUFBUTFzQixHQUNwZnBHLEVBQUU5RyxFQUFFLE1BQU0sSUFBSyxTQUFTLElBQUssU0FBUyxJQUFLLFFBQVE0NUIsR0FBRSxPQUFPMXNCLEdBQUdwRyxFQUFFOUcsRUFBRSxNQUFNLElBQUssUUFBUSxJQUFLLFFBQVEsSUFBSThHLEVBQUUsRUFBRUEsRUFBRTYzQyxHQUFHNzhDLE9BQU9nRixJQUFJOHlCLEdBQUUra0IsR0FBRzczQyxHQUFHb0csR0FBR3BHLEVBQUU5RyxFQUFFLE1BQU0sSUFBSyxTQUFTNDVCLEdBQUUsUUFBUTFzQixHQUFHcEcsRUFBRTlHLEVBQUUsTUFBTSxJQUFLLE1BQU0sSUFBSyxRQUFRLElBQUssT0FBTzQ1QixHQUFFLFFBQVExc0IsR0FBRzBzQixHQUFFLE9BQU8xc0IsR0FBR3BHLEVBQUU5RyxFQUFFLE1BQU0sSUFBSyxVQUFVNDVCLEdBQUUsU0FBUzFzQixHQUFHcEcsRUFBRTlHLEVBQUUsTUFBTSxJQUFLLFFBQVF3aUMsR0FBR3QxQixFQUFFbE4sR0FBRzhHLEVBQUVxN0IsRUFBR2oxQixFQUFFbE4sR0FBRzQ1QixHQUFFLFVBQVUxc0IsR0FBRyxNQUFNLElBQUssU0FBU3BHLEVBQUVrOEIsR0FBRzkxQixFQUFFbE4sR0FBRyxNQUFNLElBQUssU0FBU2tOLEVBQUVvMUIsY0FBYyxDQUFDa3VCLGNBQWN4d0QsRUFBRXl3RCxVQUFVM3BELEVBQUVoSCxFQUFFLEdBQUdFLEVBQUUsQ0FBQ1csV0FBTSxJQUFTaTVCLEdBQUUsVUFBVTFzQixHQUFHLE1BQU0sSUFBSyxXQUFXczJCLEdBQUd0MkIsRUFBRWxOLEdBQUc4RyxFQUNwZnc4QixHQUFHcDJCLEVBQUVsTixHQUFHNDVCLEdBQUUsVUFBVTFzQixHQUFHLE1BQU0sUUFBUXBHLEVBQUU5RyxFQUFFMG9DLEdBQUczb0MsRUFBRStHLEdBQUcsSUFBSW96QixFQUFFcHpCLEVBQUUsSUFBSXN6QixLQUFLRixFQUFFLEdBQUdBLEVBQUUzNEIsZUFBZTY0QixHQUFHLENBQUMsSUFBSXpwQixFQUFFdXBCLEVBQUVFLEdBQUcsVUFBVUEsRUFBRW1OLEdBQUdyNkIsRUFBRXlELEdBQUcsNEJBQTRCeXBCLEVBQXVCLE9BQXBCenBCLEVBQUVBLEVBQUVBLEVBQUU0dkMsWUFBTyxJQUFnQnZjLEdBQUc5MkIsRUFBRXlELEdBQUksYUFBYXlwQixFQUFFLGlCQUFrQnpwQixHQUFHLGFBQWE1USxHQUFHLEtBQUs0USxJQUFJNHpCLEdBQUdyM0IsRUFBRXlELEdBQUcsaUJBQWtCQSxHQUFHNHpCLEdBQUdyM0IsRUFBRSxHQUFHeUQsR0FBRyxtQ0FBbUN5cEIsR0FBRyw2QkFBNkJBLEdBQUcsY0FBY0EsSUFBSW9ELEVBQUdqOEIsZUFBZTY0QixHQUFHLE1BQU16cEIsR0FBRyxhQUFheXBCLEdBQUdSLEdBQUUsU0FBUzFzQixHQUFHLE1BQU15RCxHQUFHaXVCLEVBQUcxeEIsRUFBRWt0QixFQUFFenBCLEVBQUV3cEIsSUFBSSxPQUFPcDZCLEdBQUcsSUFBSyxRQUFRMGhDLEVBQUd2MEIsR0FBRzQxQixHQUFHNTFCLEVBQUVsTixHQUFFLEdBQ25mLE1BQU0sSUFBSyxXQUFXeWhDLEVBQUd2MEIsR0FBR3cyQixHQUFHeDJCLEdBQUcsTUFBTSxJQUFLLFNBQVMsTUFBTWxOLEVBQUVXLE9BQU91TSxFQUFFaXlCLGFBQWEsUUFBUSxHQUFHbUMsRUFBR3RoQyxFQUFFVyxRQUFRLE1BQU0sSUFBSyxTQUFTdU0sRUFBRXVqRCxXQUFXendELEVBQUV5d0QsU0FBbUIsT0FBVnIyQixFQUFFcDZCLEVBQUVXLE9BQWN1aUMsR0FBR2gyQixJQUFJbE4sRUFBRXl3RCxTQUFTcjJCLEdBQUUsR0FBSSxNQUFNcDZCLEVBQUVxaUMsY0FBY2EsR0FBR2gyQixJQUFJbE4sRUFBRXl3RCxTQUFTendELEVBQUVxaUMsY0FBYSxHQUFJLE1BQU0sUUFBUSxtQkFBb0J2N0IsRUFBRXljLFVBQVVyVyxFQUFFd2pELFFBQVF6USxJQUFJRyxHQUFHcmdELEVBQUVDLEtBQUttTixFQUFFMjlCLE9BQU8sR0FBRyxPQUFPMzlCLEVBQUUzRCxNQUFNMkQsRUFBRTI5QixPQUFPLEtBQUssT0FBTyxLQUFLLEtBQUssRUFBRSxHQUFHNTlCLEdBQUcsTUFBTUMsRUFBRWs4QixVQUFVOGxCLEdBQUdqaUQsRUFBRUMsRUFBRUQsRUFBRW84QyxjQUFjdHBELE9BQU8sQ0FBQyxHQUFHLGlCQUFrQkEsR0FBRyxPQUFPbU4sRUFBRWs4QixVQUFVLE1BQU1yOEIsTUFBTWxELEVBQUUsTUFDL2UvSixFQUFFK29ELEdBQUdELEdBQUcxaUQsU0FBUzJpRCxHQUFHSCxHQUFHeGlELFNBQVM4akQsR0FBRzk4QyxJQUFJbk4sRUFBRW1OLEVBQUVrOEIsVUFBVXRwQyxFQUFFb04sRUFBRW04QyxjQUFjdHBELEVBQUVraEQsSUFBSS96QyxFQUFFbk4sRUFBRTBrQyxZQUFZM2tDLElBQUlvTixFQUFFMjlCLE9BQU8sTUFBSzlxQyxHQUFHLElBQUlELEVBQUUwa0MsU0FBUzFrQyxFQUFFQSxFQUFFZ2pDLGVBQWU2dEIsZUFBZTV3RCxJQUFLa2hELElBQUkvekMsRUFBRUEsRUFBRWs4QixVQUFVcnBDLEdBQUcsT0FBTyxLQUFLLEtBQUssR0FBMEIsT0FBdkI2NUIsR0FBRWtCLElBQUcvNkIsRUFBRW1OLEVBQUU2OUIsY0FBaUIsSUFBYSxHQUFSNzlCLEVBQUUyOUIsUUFBaUIzOUIsRUFBRSszQyxNQUFNbmxELEVBQUVvTixJQUFFbk4sRUFBRSxPQUFPQSxFQUFFRCxHQUFFLEVBQUcsT0FBT21OLE9BQUUsSUFBU0MsRUFBRW04QyxjQUFjaUcsVUFBVXRGLEdBQUc5OEMsR0FBR3BOLEVBQUUsT0FBT21OLEVBQUU4OUIsY0FBaUJockMsSUFBSUQsR0FBRyxJQUFZLEVBQVBvTixFQUFFdE0sUUFBVyxPQUFPcU0sSUFBRyxJQUFLQyxFQUFFbThDLGNBQWNrRyw0QkFBNEIsSUFBZSxFQUFWejBCLEdBQUU1MEIsU0FBVyxJQUFJMHFELEtBQUlBLEdBQUUsSUFBVyxJQUFJQSxJQUFHLElBQUlBLEtBQUVBLEdBQ3JmLEdBQUUsT0FBTzNFLElBQUcsSUFBUSxVQUFIM0YsS0FBZSxJQUFRLFVBQUh1SyxLQUFlQyxHQUFHN0UsR0FBRThFLE9BQU1oeEQsR0FBR0QsS0FBRW9OLEVBQUUyOUIsT0FBTyxHQUFTLE1BQUssS0FBSyxFQUFFLE9BQU9vZSxLQUFXLE9BQU9oOEMsR0FBR2l5QyxHQUFHaHlDLEVBQUVrOEIsVUFBVWdFLGVBQWUsS0FBSyxLQUFLLEdBQUcsT0FBT3dYLEdBQUcxM0MsR0FBRyxLQUFLLEtBQUssR0FBRyxPQUFPMDBDLEdBQUcxMEMsRUFBRXBHLE9BQU8rNkMsS0FBSyxLQUFLLEtBQUssR0FBMEIsR0FBdkJqb0IsR0FBRWtCLElBQXdCLFFBQXJCLzZCLEVBQUVtTixFQUFFNjlCLGVBQTBCLE9BQU8sS0FBc0MsR0FBakM1USxFQUFFLElBQWEsR0FBUmp0QixFQUFFMjlCLE9BQTJCLFFBQWpCM1EsRUFBRW42QixFQUFFaXdELFdBQXNCLEdBQUc3MUIsRUFBRWsyQixHQUFHdHdELEdBQUUsT0FBUSxDQUFDLEdBQUcsSUFBSTZ3RCxJQUFHLE9BQU8zakQsR0FBRyxJQUFhLEdBQVJBLEVBQUU0OUIsT0FBVSxJQUFJNTlCLEVBQUVDLEVBQUVpK0IsTUFBTSxPQUFPbCtCLEdBQUcsQ0FBUyxHQUFHLFFBQVhpdEIsRUFBRWt2QixHQUFHbjhDLElBQWUsQ0FDalcsSUFEa1dDLEVBQUUyOUIsT0FBTyxHQUFHd2xCLEdBQUd0d0QsR0FBRSxHQUFvQixRQUFoQm82QixFQUFFRCxFQUFFc3JCLGVBQXVCdDRDLEVBQUVzNEMsWUFBWXJyQixFQUFFanRCLEVBQUUyOUIsT0FBTyxHQUNuZixPQUFPOXFDLEVBQUU4bkQsYUFBYTM2QyxFQUFFNjZDLFlBQVksTUFBTTc2QyxFQUFFMjZDLFdBQVc5bkQsRUFBRThuRCxXQUFXOW5ELEVBQUVELEVBQU1BLEVBQUVvTixFQUFFaStCLE1BQU0sT0FBT3JyQyxHQUFPbU4sRUFBRWxOLEdBQU5vNkIsRUFBRXI2QixHQUFRK3FDLE9BQU8sRUFBRTFRLEVBQUUydEIsV0FBVyxLQUFLM3RCLEVBQUU0dEIsWUFBWSxLQUFLNXRCLEVBQUUwdEIsV0FBVyxLQUFtQixRQUFkM3RCLEVBQUVDLEVBQUV3USxZQUFvQnhRLEVBQUUycUIsV0FBVyxFQUFFM3FCLEVBQUU4cUIsTUFBTWg0QyxFQUFFa3RCLEVBQUVnUixNQUFNLEtBQUtoUixFQUFFa3ZCLGNBQWMsS0FBS2x2QixFQUFFNFEsY0FBYyxLQUFLNVEsRUFBRXFyQixZQUFZLEtBQUtyckIsRUFBRXowQixhQUFhLEtBQUt5MEIsRUFBRWlQLFVBQVUsT0FBT2pQLEVBQUUycUIsV0FBVzVxQixFQUFFNHFCLFdBQVczcUIsRUFBRThxQixNQUFNL3FCLEVBQUUrcUIsTUFBTTlxQixFQUFFZ1IsTUFBTWpSLEVBQUVpUixNQUFNaFIsRUFBRWt2QixjQUFjbnZCLEVBQUVtdkIsY0FBY2x2QixFQUFFNFEsY0FBYzdRLEVBQUU2USxjQUFjNVEsRUFBRXFyQixZQUFZdHJCLEVBQUVzckIsWUFBWXJyQixFQUFFcnpCLEtBQUtvekIsRUFBRXB6QixLQUFLbUcsRUFBRWl0QixFQUFFeDBCLGFBQ3BmeTBCLEVBQUV6MEIsYUFBYSxPQUFPdUgsRUFBRSxLQUFLLENBQUNnNEMsTUFBTWg0QyxFQUFFZzRDLE1BQU1ELGFBQWEvM0MsRUFBRSszQyxlQUFlbGxELEVBQUVBLEVBQUVzckMsUUFBMkIsT0FBbkJ2UixHQUFFaUIsR0FBWSxFQUFWQSxHQUFFNTBCLFFBQVUsR0FBVWdILEVBQUVpK0IsTUFBTWwrQixFQUFFQSxFQUFFbStCLFFBQVEsT0FBT3JyQyxFQUFFbXdELE1BQU14MUIsS0FBSXMyQixLQUFLOWpELEVBQUUyOUIsT0FBTyxHQUFHMVEsR0FBRSxFQUFHazJCLEdBQUd0d0QsR0FBRSxHQUFJbU4sRUFBRSszQyxNQUFNLGNBQWMsQ0FBQyxJQUFJOXFCLEVBQUUsR0FBVyxRQUFSbHRCLEVBQUVtOEMsR0FBR2x2QixLQUFhLEdBQUdodEIsRUFBRTI5QixPQUFPLEdBQUcxUSxHQUFFLEVBQW1CLFFBQWhCcjZCLEVBQUVtTixFQUFFdTRDLGVBQXVCdDRDLEVBQUVzNEMsWUFBWTFsRCxFQUFFb04sRUFBRTI5QixPQUFPLEdBQUd3bEIsR0FBR3R3RCxHQUFFLEdBQUksT0FBT0EsRUFBRW13RCxNQUFNLFdBQVdud0QsRUFBRW93RCxXQUFXajJCLEVBQUV5USxZQUFZOGUsR0FBRyxPQUFtQyxRQUE1QnY4QyxFQUFFQSxFQUFFMjZDLFdBQVc5bkQsRUFBRThuRCxjQUFzQjM2QyxFQUFFNDZDLFdBQVcsTUFBTSxVQUFVLEVBQUVwdEIsS0FBSTM2QixFQUFFa3dELG1CQUFtQmUsSUFBSSxhQUFhbHhELElBQUlvTixFQUFFMjlCLE9BQ2pmLEdBQUcxUSxHQUFFLEVBQUdrMkIsR0FBR3R3RCxHQUFFLEdBQUltTixFQUFFKzNDLE1BQU0sVUFBVWxsRCxFQUFFZ3dELGFBQWE3MUIsRUFBRWtSLFFBQVFsK0IsRUFBRWkrQixNQUFNaitCLEVBQUVpK0IsTUFBTWpSLElBQWEsUUFBVHA2QixFQUFFQyxFQUFFK0MsTUFBY2hELEVBQUVzckMsUUFBUWxSLEVBQUVodEIsRUFBRWkrQixNQUFNalIsRUFBRW42QixFQUFFK0MsS0FBS28zQixHQUFHLE9BQU8sT0FBT242QixFQUFFbXdELE1BQU1wd0QsRUFBRUMsRUFBRW13RCxLQUFLbndELEVBQUVpd0QsVUFBVWx3RCxFQUFFQyxFQUFFbXdELEtBQUtwd0QsRUFBRXNyQyxRQUFRcnJDLEVBQUU4bkQsV0FBVzM2QyxFQUFFMjZDLFdBQVc5bkQsRUFBRWt3RCxtQkFBbUJ2MUIsS0FBSTU2QixFQUFFc3JDLFFBQVEsS0FBS2wrQixFQUFFNHRCLEdBQUU1MEIsUUFBUTJ6QixHQUFFaUIsR0FBRVgsRUFBSSxFQUFGanRCLEVBQUksRUFBSSxFQUFGQSxHQUFLcE4sR0FBRyxLQUFLLEtBQUssR0FBRyxLQUFLLEdBQUcsT0FBT214RCxLQUFLLE9BQU9oa0QsR0FBRyxPQUFPQSxFQUFFODlCLGdCQUFpQixPQUFPNzlCLEVBQUU2OUIsZ0JBQWdCLGtDQUFrQ2hyQyxFQUFFYSxPQUFPc00sRUFBRTI5QixPQUFPLEdBQUcsS0FBSyxNQUFNOTlCLE1BQU1sRCxFQUFFLElBQUlxRCxFQUFFZzBCLE1BQ2hkLFNBQVNnd0IsR0FBR2prRCxHQUFHLE9BQU9BLEVBQUVpMEIsS0FBSyxLQUFLLEVBQUUwZ0IsR0FBRzMwQyxFQUFFbkcsT0FBTys2QyxLQUFLLElBQUkzMEMsRUFBRUQsRUFBRTQ5QixNQUFNLE9BQVMsS0FBRjM5QixHQUFRRCxFQUFFNDlCLE9BQVMsS0FBSDM5QixFQUFRLEdBQUdELEdBQUcsS0FBSyxLQUFLLEVBQWdDLEdBQTlCZzhDLEtBQUtydkIsR0FBRVksSUFBR1osR0FBRVcsSUFBRzR2QixLQUFrQixJQUFPLElBQXBCajlDLEVBQUVELEVBQUU0OUIsUUFBb0IsTUFBTTk5QixNQUFNbEQsRUFBRSxNQUF5QixPQUFuQm9ELEVBQUU0OUIsT0FBUyxLQUFIMzlCLEVBQVEsR0FBVUQsRUFBRSxLQUFLLEVBQUUsT0FBT2s4QyxHQUFHbDhDLEdBQUcsS0FBSyxLQUFLLEdBQUcsT0FBTzJzQixHQUFFa0IsSUFBZSxNQUFaNXRCLEVBQUVELEVBQUU0OUIsUUFBYzU5QixFQUFFNDlCLE9BQVMsS0FBSDM5QixFQUFRLEdBQUdELEdBQUcsS0FBSyxLQUFLLEdBQUcsT0FBTzJzQixHQUFFa0IsSUFBRyxLQUFLLEtBQUssRUFBRSxPQUFPbXVCLEtBQUssS0FBSyxLQUFLLEdBQUcsT0FBT3JFLEdBQUczM0MsR0FBRyxLQUFLLEtBQUssR0FBRyxLQUFLLEdBQUcsT0FBT2drRCxLQUFLLEtBQUssUUFBUSxPQUFPLE1BQ3JhLFNBQVNFLEdBQUdsa0QsRUFBRUMsR0FBRyxJQUFJLElBQUlwTixFQUFFLEdBQUdDLEVBQUVtTixFQUFFLEdBQUdwTixHQUFHbWhDLEVBQUdsaEMsR0FBR0EsRUFBRUEsRUFBRTZxQyxhQUFhN3FDLEdBQUcsSUFBSThHLEVBQUUvRyxFQUFFLE1BQU1xNkIsR0FBR3R6QixFQUFFLDZCQUE2QnN6QixFQUFFNXFCLFFBQVEsS0FBSzRxQixFQUFFM3FCLE1BQU0sTUFBTSxDQUFDOU8sTUFBTXVNLEVBQUVuTCxPQUFPb0wsRUFBRXNDLE1BQU0zSSxHQUFHLFNBQVN1cUQsR0FBR25rRCxFQUFFQyxHQUFHLElBQUk2RCxRQUFRcEssTUFBTXVHLEVBQUV4TSxPQUFPLE1BQU1aLEdBQUcwZ0QsWUFBVyxXQUFXLE1BQU0xZ0QsTUFsQjNQa3ZELEdBQUcsU0FBUy9oRCxFQUFFQyxHQUFHLElBQUksSUFBSXBOLEVBQUVvTixFQUFFaStCLE1BQU0sT0FBT3JyQyxHQUFHLENBQUMsR0FBRyxJQUFJQSxFQUFFb2hDLEtBQUssSUFBSXBoQyxFQUFFb2hDLElBQUlqMEIsRUFBRTJhLFlBQVk5bkIsRUFBRXNwQyxnQkFBZ0IsR0FBRyxJQUFJdHBDLEVBQUVvaEMsS0FBSyxPQUFPcGhDLEVBQUVxckMsTUFBTSxDQUFDcnJDLEVBQUVxckMsTUFBTVAsT0FBTzlxQyxFQUFFQSxFQUFFQSxFQUFFcXJDLE1BQU0sU0FBUyxHQUFHcnJDLElBQUlvTixFQUFFLE1BQU0sS0FBSyxPQUFPcE4sRUFBRXNyQyxTQUFTLENBQUMsR0FBRyxPQUFPdHJDLEVBQUU4cUMsUUFBUTlxQyxFQUFFOHFDLFNBQVMxOUIsRUFBRSxPQUFPcE4sRUFBRUEsRUFBRThxQyxPQUFPOXFDLEVBQUVzckMsUUFBUVIsT0FBTzlxQyxFQUFFOHFDLE9BQU85cUMsRUFBRUEsRUFBRXNyQyxVQUNoUzZqQixHQUFHLFNBQVNoaUQsRUFBRUMsRUFBRXBOLEVBQUVDLEdBQUcsSUFBSThHLEVBQUVvRyxFQUFFbzhDLGNBQWMsR0FBR3hpRCxJQUFJOUcsRUFBRSxDQUFDa04sRUFBRUMsRUFBRWs4QixVQUFVeWYsR0FBR0gsR0FBR3hpRCxTQUFTLElBQXlVZzBCLEVBQXJVQyxFQUFFLEtBQUssT0FBT3I2QixHQUFHLElBQUssUUFBUStHLEVBQUVxN0IsRUFBR2oxQixFQUFFcEcsR0FBRzlHLEVBQUVtaUMsRUFBR2oxQixFQUFFbE4sR0FBR282QixFQUFFLEdBQUcsTUFBTSxJQUFLLFNBQVN0ekIsRUFBRWs4QixHQUFHOTFCLEVBQUVwRyxHQUFHOUcsRUFBRWdqQyxHQUFHOTFCLEVBQUVsTixHQUFHbzZCLEVBQUUsR0FBRyxNQUFNLElBQUssU0FBU3R6QixFQUFFaEgsRUFBRSxHQUFHZ0gsRUFBRSxDQUFDbkcsV0FBTSxJQUFTWCxFQUFFRixFQUFFLEdBQUdFLEVBQUUsQ0FBQ1csV0FBTSxJQUFTeTVCLEVBQUUsR0FBRyxNQUFNLElBQUssV0FBV3R6QixFQUFFdzhCLEdBQUdwMkIsRUFBRXBHLEdBQUc5RyxFQUFFc2pDLEdBQUdwMkIsRUFBRWxOLEdBQUdvNkIsRUFBRSxHQUFHLE1BQU0sUUFBUSxtQkFBb0J0ekIsRUFBRXljLFNBQVMsbUJBQW9CdmpCLEVBQUV1akIsVUFBVXJXLEVBQUV3akQsUUFBUXpRLElBQXlCLElBQUl0Z0QsS0FBekIrb0MsR0FBRzNvQyxFQUFFQyxHQUFTRCxFQUFFLEtBQWMrRyxFQUFFLElBQUk5RyxFQUFFdUIsZUFBZTVCLElBQUltSCxFQUFFdkYsZUFBZTVCLElBQUksTUFBTW1ILEVBQUVuSCxHQUFHLEdBQUcsVUFDM2VBLEVBQUUsQ0FBQyxJQUFJdTZCLEVBQUVwekIsRUFBRW5ILEdBQUcsSUFBSXc2QixLQUFLRCxFQUFFQSxFQUFFMzRCLGVBQWU0NEIsS0FBS3A2QixJQUFJQSxFQUFFLElBQUlBLEVBQUVvNkIsR0FBRyxRQUFRLDRCQUE0Qng2QixHQUFHLGFBQWFBLEdBQUcsbUNBQW1DQSxHQUFHLDZCQUE2QkEsR0FBRyxjQUFjQSxJQUFJNjlCLEVBQUdqOEIsZUFBZTVCLEdBQUd5NkIsSUFBSUEsRUFBRSxLQUFLQSxFQUFFQSxHQUFHLElBQUloM0IsS0FBS3pELEVBQUUsT0FBTyxJQUFJQSxLQUFLSyxFQUFFLENBQUMsSUFBSTJRLEVBQUUzUSxFQUFFTCxHQUF5QixHQUF0QnU2QixFQUFFLE1BQU1wekIsRUFBRUEsRUFBRW5ILFFBQUcsRUFBVUssRUFBRXVCLGVBQWU1QixJQUFJZ1IsSUFBSXVwQixJQUFJLE1BQU12cEIsR0FBRyxNQUFNdXBCLEdBQUcsR0FBRyxVQUFVdjZCLEVBQUUsR0FBR3U2QixFQUFFLENBQUMsSUFBSUMsS0FBS0QsR0FBR0EsRUFBRTM0QixlQUFlNDRCLElBQUl4cEIsR0FBR0EsRUFBRXBQLGVBQWU0NEIsS0FBS3A2QixJQUFJQSxFQUFFLElBQUlBLEVBQUVvNkIsR0FBRyxJQUFJLElBQUlBLEtBQUt4cEIsRUFBRUEsRUFBRXBQLGVBQWU0NEIsSUFBSUQsRUFBRUMsS0FBS3hwQixFQUFFd3BCLEtBQUtwNkIsSUFDbGZBLEVBQUUsSUFBSUEsRUFBRW82QixHQUFHeHBCLEVBQUV3cEIsU0FBU3A2QixJQUFJcTZCLElBQUlBLEVBQUUsSUFBSUEsRUFBRWgzQixLQUFLekQsRUFBRUksSUFBSUEsRUFBRTRRLE1BQU0sNEJBQTRCaFIsR0FBR2dSLEVBQUVBLEVBQUVBLEVBQUU0dkMsWUFBTyxFQUFPcm1CLEVBQUVBLEVBQUVBLEVBQUVxbUIsWUFBTyxFQUFPLE1BQU01dkMsR0FBR3VwQixJQUFJdnBCLElBQUl5cEIsRUFBRUEsR0FBRyxJQUFJaDNCLEtBQUt6RCxFQUFFZ1IsSUFBSSxhQUFhaFIsRUFBRSxpQkFBa0JnUixHQUFHLGlCQUFrQkEsSUFBSXlwQixFQUFFQSxHQUFHLElBQUloM0IsS0FBS3pELEVBQUUsR0FBR2dSLEdBQUcsbUNBQW1DaFIsR0FBRyw2QkFBNkJBLElBQUk2OUIsRUFBR2o4QixlQUFlNUIsSUFBSSxNQUFNZ1IsR0FBRyxhQUFhaFIsR0FBR2k2QixHQUFFLFNBQVMxc0IsR0FBR2t0QixHQUFHRixJQUFJdnBCLElBQUl5cEIsRUFBRSxLQUFLLGlCQUFrQnpwQixHQUFHLE9BQU9BLEdBQUdBLEVBQUUwcEIsV0FBVytGLEVBQUd6dkIsRUFBRWtELFlBQVl1bUIsRUFBRUEsR0FBRyxJQUFJaDNCLEtBQUt6RCxFQUFFZ1IsSUFBSTVRLElBQUlxNkIsRUFBRUEsR0FBRyxJQUFJaDNCLEtBQUssUUFDL2VyRCxHQUFHLElBQUlKLEVBQUV5NkIsR0FBS2p0QixFQUFFczRDLFlBQVk5bEQsS0FBRXdOLEVBQUUyOUIsT0FBTyxLQUFJcWtCLEdBQUcsU0FBU2ppRCxFQUFFQyxFQUFFcE4sRUFBRUMsR0FBR0QsSUFBSUMsSUFBSW1OLEVBQUUyOUIsT0FBTyxJQWNnTCxJQUFJd21CLEdBQUcsbUJBQW9CQyxRQUFRQSxRQUFRN3lDLElBQUksU0FBUzh5QyxHQUFHdGtELEVBQUVDLEVBQUVwTixJQUFHQSxFQUFFa21ELElBQUksRUFBRWxtRCxJQUFLb2hDLElBQUksRUFBRXBoQyxFQUFFd0YsUUFBUSxDQUFDK1ksUUFBUSxNQUFNLElBQUl0ZSxFQUFFbU4sRUFBRXhNLE1BQXNELE9BQWhEWixFQUFFMEMsU0FBUyxXQUFXZ3ZELEtBQUtBLElBQUcsRUFBR0MsR0FBRzF4RCxHQUFHcXhELEdBQUdua0QsRUFBRUMsSUFBV3BOLEVBQ3BiLFNBQVM0eEQsR0FBR3prRCxFQUFFQyxFQUFFcE4sSUFBR0EsRUFBRWttRCxJQUFJLEVBQUVsbUQsSUFBS29oQyxJQUFJLEVBQUUsSUFBSW5oQyxFQUFFa04sRUFBRW5HLEtBQUs2Uix5QkFBeUIsR0FBRyxtQkFBb0I1WSxFQUFFLENBQUMsSUFBSThHLEVBQUVxRyxFQUFFeE0sTUFBTVosRUFBRXdGLFFBQVEsV0FBbUIsT0FBUjhyRCxHQUFHbmtELEVBQUVDLEdBQVVuTixFQUFFOEcsSUFBSSxJQUFJc3pCLEVBQUVsdEIsRUFBRW04QixVQUE4TyxPQUFwTyxPQUFPalAsR0FBRyxtQkFBb0JBLEVBQUV3M0Isb0JBQW9CN3hELEVBQUUwQyxTQUFTLFdBQVcsbUJBQW9CekMsSUFBSSxPQUFPNnhELEdBQUdBLEdBQUcsSUFBSXQwQixJQUFJLENBQUN0N0IsT0FBTzR2RCxHQUFHbDBCLElBQUkxN0IsTUFBTW92RCxHQUFHbmtELEVBQUVDLElBQUksSUFBSXBOLEVBQUVvTixFQUFFc0MsTUFBTXhOLEtBQUsydkQsa0JBQWtCemtELEVBQUV4TSxNQUFNLENBQUNteEQsZUFBZSxPQUFPL3hELEVBQUVBLEVBQUUsT0FBY0EsRUFBRSxJQUFJZ3lELEdBQUcsbUJBQW9CQyxRQUFRQSxRQUFRejBCLElBQ3hjLFNBQVMwMEIsR0FBRy9rRCxHQUFHLElBQUlDLEVBQUVELEVBQUUxRCxJQUFJLEdBQUcsT0FBTzJELEVBQUUsR0FBRyxtQkFBb0JBLEVBQUUsSUFBSUEsRUFBRSxNQUFNLE1BQU1wTixHQUFHbXlELEdBQUdobEQsRUFBRW5OLFFBQVFvTixFQUFFaEgsUUFBUSxLQUFLLFNBQVNnc0QsR0FBR2psRCxFQUFFQyxHQUFHLE9BQU9BLEVBQUVnMEIsS0FBSyxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQUcsT0FBTyxLQUFLLEVBQUUsR0FBVyxJQUFSaDBCLEVBQUUyOUIsT0FBVyxPQUFPNTlCLEVBQUUsQ0FBQyxJQUFJbk4sRUFBRW1OLEVBQUVvOEMsY0FBY3RwRCxFQUFFa04sRUFBRTg5QixjQUE0Qjc5QixHQUFkRCxFQUFFQyxFQUFFazhCLFdBQWNpZSx3QkFBd0JuNkMsRUFBRWc3QyxjQUFjaDdDLEVBQUVwRyxLQUFLaEgsRUFBRXdrRCxHQUFHcDNDLEVBQUVwRyxLQUFLaEgsR0FBR0MsR0FBR2tOLEVBQUVrbEQsb0NBQW9DamxELEVBQUUsT0FBTyxLQUFLLEVBQTZDLFlBQW5DLElBQVJBLEVBQUUyOUIsT0FBVzhWLEdBQUd6ekMsRUFBRWs4QixVQUFVZ0UsZ0JBQXNCLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssR0FBRyxPQUFPLE1BQU1yZ0MsTUFBTWxELEVBQUUsTUFDNWUsU0FBU3VvRCxHQUFHbmxELEVBQUVDLEVBQUVwTixHQUFHLE9BQU9BLEVBQUVvaEMsS0FBSyxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQWdELEdBQUcsUUFBaENoMEIsRUFBRSxRQUFsQkEsRUFBRXBOLEVBQUUwbEQsYUFBdUJ0NEMsRUFBRTI2QyxXQUFXLE1BQWlCLENBQUM1NkMsRUFBRUMsRUFBRUEsRUFBRWpLLEtBQUssRUFBRSxDQUFDLEdBQUcsSUFBVyxFQUFOZ0ssRUFBRWkwQixLQUFPLENBQUMsSUFBSW5oQyxFQUFFa04sRUFBRWxNLE9BQU9rTSxFQUFFdS9DLFFBQVF6c0QsSUFBSWtOLEVBQUVBLEVBQUVoSyxXQUFXZ0ssSUFBSUMsR0FBZ0QsR0FBRyxRQUFoQ0EsRUFBRSxRQUFsQkEsRUFBRXBOLEVBQUUwbEQsYUFBdUJ0NEMsRUFBRTI2QyxXQUFXLE1BQWlCLENBQUM1NkMsRUFBRUMsRUFBRUEsRUFBRWpLLEtBQUssRUFBRSxDQUFDLElBQUk0RCxFQUFFb0csRUFBRWxOLEVBQUU4RyxFQUFFNUQsS0FBYSxJQUFPLEdBQWY0RCxFQUFFQSxFQUFFcTZCLE9BQWUsSUFBTyxFQUFGcjZCLEtBQU93ckQsR0FBR3Z5RCxFQUFFbU4sR0FBR3FsRCxHQUFHeHlELEVBQUVtTixJQUFJQSxFQUFFbE4sUUFBUWtOLElBQUlDLEdBQUcsT0FBTyxLQUFLLEVBQ3RSLE9BRHdSRCxFQUFFbk4sRUFBRXNwQyxVQUFrQixFQUFSdHBDLEVBQUUrcUMsUUFBVSxPQUFPMzlCLEVBQUVELEVBQUV3Z0IscUJBQXFCMXRCLEVBQUVELEVBQUVvb0QsY0FBY3BvRCxFQUFFZ0gsS0FBS29HLEVBQUVtOEMsY0FBYy9FLEdBQUd4a0QsRUFBRWdILEtBQUtvRyxFQUFFbThDLGVBQWVwOEMsRUFBRTJnQixtQkFBbUI3dEIsRUFDeGdCbU4sRUFBRTY5QixjQUFjOTlCLEVBQUVrbEQsNENBQXVELFFBQWhCamxELEVBQUVwTixFQUFFMGxELGNBQXNCZSxHQUFHem1ELEVBQUVvTixFQUFFRCxJQUFVLEtBQUssRUFBa0IsR0FBRyxRQUFuQkMsRUFBRXBOLEVBQUUwbEQsYUFBd0IsQ0FBUSxHQUFQdjRDLEVBQUUsS0FBUSxPQUFPbk4sRUFBRXFyQyxNQUFNLE9BQU9yckMsRUFBRXFyQyxNQUFNakssS0FBSyxLQUFLLEVBQUVqMEIsRUFBRW5OLEVBQUVxckMsTUFBTS9CLFVBQVUsTUFBTSxLQUFLLEVBQUVuOEIsRUFBRW5OLEVBQUVxckMsTUFBTS9CLFVBQVVtZCxHQUFHem1ELEVBQUVvTixFQUFFRCxHQUFHLE9BQU8sS0FBSyxFQUEyRSxPQUF6RUEsRUFBRW5OLEVBQUVzcEMsZUFBVSxPQUFPbDhCLEdBQVcsRUFBUnBOLEVBQUUrcUMsT0FBU3NWLEdBQUdyZ0QsRUFBRWdILEtBQUtoSCxFQUFFdXBELGdCQUFnQnA4QyxFQUFFc2xELFNBQWUsS0FBSyxFQUFTLEtBQUssRUFBUyxLQUFLLEdBQUcsT0FBTyxLQUFLLEdBQ3pZLFlBRDRZLE9BQU96eUQsRUFBRWlyQyxnQkFBZ0JqckMsRUFBRUEsRUFBRTZxQyxVQUFVLE9BQU83cUMsSUFBSUEsRUFBRUEsRUFBRWlyQyxjQUFjLE9BQU9qckMsSUFBSUEsRUFBRUEsRUFBRWtyQyxXQUFXLE9BQU9sckMsR0FBRyt0QyxHQUFHL3RDLE9BQ2hmLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLE9BQU8sTUFBTWlOLE1BQU1sRCxFQUFFLE1BQzVFLFNBQVMyb0QsR0FBR3ZsRCxFQUFFQyxHQUFHLElBQUksSUFBSXBOLEVBQUVtTixJQUFJLENBQUMsR0FBRyxJQUFJbk4sRUFBRW9oQyxJQUFJLENBQUMsSUFBSW5oQyxFQUFFRCxFQUFFc3BDLFVBQVUsR0FBR2w4QixFQUFZLG1CQUFWbk4sRUFBRUEsRUFBRXdqQixPQUE0QmdrQixZQUFZeG5DLEVBQUV3bkMsWUFBWSxVQUFVLE9BQU8sYUFBYXhuQyxFQUFFd2lCLFFBQVEsV0FBVyxDQUFDeGlCLEVBQUVELEVBQUVzcEMsVUFBVSxJQUFJdmlDLEVBQUUvRyxFQUFFdXBELGNBQWM5bEMsTUFBTTFjLEVBQUUsTUFBU0EsR0FBYUEsRUFBRXZGLGVBQWUsV0FBV3VGLEVBQUUwYixRQUFRLEtBQUt4aUIsRUFBRXdqQixNQUFNaEIsUUFBUThrQixHQUFHLFVBQVV4Z0MsU0FBUyxHQUFHLElBQUkvRyxFQUFFb2hDLElBQUlwaEMsRUFBRXNwQyxVQUFVM0UsVUFBVXYzQixFQUFFLEdBQUdwTixFQUFFdXBELG1CQUFtQixJQUFJLEtBQUt2cEQsRUFBRW9oQyxLQUFLLEtBQUtwaEMsRUFBRW9oQyxLQUFLLE9BQU9waEMsRUFBRWlyQyxlQUFlanJDLElBQUltTixJQUFJLE9BQU9uTixFQUFFcXJDLE1BQU0sQ0FBQ3JyQyxFQUFFcXJDLE1BQU1QLE9BQU85cUMsRUFBRUEsRUFBRUEsRUFBRXFyQyxNQUFNLFNBQVMsR0FBR3JyQyxJQUN0Zm1OLEVBQUUsTUFBTSxLQUFLLE9BQU9uTixFQUFFc3JDLFNBQVMsQ0FBQyxHQUFHLE9BQU90ckMsRUFBRThxQyxRQUFROXFDLEVBQUU4cUMsU0FBUzM5QixFQUFFLE9BQU9uTixFQUFFQSxFQUFFOHFDLE9BQU85cUMsRUFBRXNyQyxRQUFRUixPQUFPOXFDLEVBQUU4cUMsT0FBTzlxQyxFQUFFQSxFQUFFc3JDLFNBQ2pILFNBQVNxbkIsR0FBR3hsRCxFQUFFQyxHQUFHLEdBQUdtMUMsSUFBSSxtQkFBb0JBLEdBQUdxUSxxQkFBcUIsSUFBSXJRLEdBQUdxUSxxQkFBcUJ0USxHQUFHbDFDLEdBQUcsTUFBTWl0QixJQUFJLE9BQU9qdEIsRUFBRWcwQixLQUFLLEtBQUssRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQW1CLEdBQUcsUUFBbkJqMEIsRUFBRUMsRUFBRXM0QyxjQUF5QyxRQUFmdjRDLEVBQUVBLEVBQUU0NkMsWUFBcUIsQ0FBQyxJQUFJL25ELEVBQUVtTixFQUFFQSxFQUFFaEssS0FBSyxFQUFFLENBQUMsSUFBSWxELEVBQUVELEVBQUUrRyxFQUFFOUcsRUFBRXlzRCxRQUFnQixHQUFSenNELEVBQUVBLEVBQUVtaEMsU0FBTyxJQUFTcjZCLEVBQUUsR0FBRyxJQUFPLEVBQUY5RyxHQUFLc3lELEdBQUdubEQsRUFBRXBOLE9BQU8sQ0FBQ0MsRUFBRW1OLEVBQUUsSUFBSXJHLElBQUksTUFBTXN6QixHQUFHODNCLEdBQUdseUQsRUFBRW82QixJQUFJcjZCLEVBQUVBLEVBQUVtRCxXQUFXbkQsSUFBSW1OLEdBQUcsTUFBTSxLQUFLLEVBQXNCLEdBQXBCK2tELEdBQUc5a0QsR0FBb0IsbUJBQWpCRCxFQUFFQyxFQUFFazhCLFdBQW1DdGIscUJBQXFCLElBQUk3Z0IsRUFBRXhFLE1BQU15RSxFQUFFbThDLGNBQWNwOEMsRUFBRTlILE1BQU0rSCxFQUFFNjlCLGNBQWM5OUIsRUFBRTZnQix1QkFBdUIsTUFBTXFNLEdBQUc4M0IsR0FBRy9rRCxFQUMvZ0JpdEIsR0FBRyxNQUFNLEtBQUssRUFBRTYzQixHQUFHOWtELEdBQUcsTUFBTSxLQUFLLEVBQUV5bEQsR0FBRzFsRCxFQUFFQyxJQUFJLFNBQVMwbEQsR0FBRzNsRCxHQUFHQSxFQUFFMDlCLFVBQVUsS0FBSzE5QixFQUFFaytCLE1BQU0sS0FBS2wrQixFQUFFdkgsYUFBYSxLQUFLdUgsRUFBRTg2QyxZQUFZLEtBQUs5NkMsRUFBRTQ2QyxXQUFXLEtBQUs1NkMsRUFBRW84QyxjQUFjLEtBQUtwOEMsRUFBRTg5QixjQUFjLEtBQUs5OUIsRUFBRTQ4QyxhQUFhLEtBQUs1OEMsRUFBRTI5QixPQUFPLEtBQUszOUIsRUFBRXU0QyxZQUFZLEtBQUssU0FBU3FOLEdBQUc1bEQsR0FBRyxPQUFPLElBQUlBLEVBQUVpMEIsS0FBSyxJQUFJajBCLEVBQUVpMEIsS0FBSyxJQUFJajBCLEVBQUVpMEIsSUFDblMsU0FBUzR4QixHQUFHN2xELEdBQUdBLEVBQUUsQ0FBQyxJQUFJLElBQUlDLEVBQUVELEVBQUUyOUIsT0FBTyxPQUFPMTlCLEdBQUcsQ0FBQyxHQUFHMmxELEdBQUczbEQsR0FBRyxNQUFNRCxFQUFFQyxFQUFFQSxFQUFFMDlCLE9BQU8sTUFBTTc5QixNQUFNbEQsRUFBRSxNQUFPLElBQUkvSixFQUFFb04sRUFBZ0IsT0FBZEEsRUFBRXBOLEVBQUVzcEMsVUFBaUJ0cEMsRUFBRW9oQyxLQUFLLEtBQUssRUFBRSxJQUFJbmhDLEdBQUUsRUFBRyxNQUFNLEtBQUssRUFBK0IsS0FBSyxFQUFFbU4sRUFBRUEsRUFBRWtnQyxjQUFjcnRDLEdBQUUsRUFBRyxNQUFNLFFBQVEsTUFBTWdOLE1BQU1sRCxFQUFFLE1BQWUsR0FBUi9KLEVBQUUrcUMsUUFBV3ZHLEdBQUdwM0IsRUFBRSxJQUFJcE4sRUFBRStxQyxRQUFRLElBQUk1OUIsRUFBRUMsRUFBRSxJQUFJcE4sRUFBRW1OLElBQUksQ0FBQyxLQUFLLE9BQU9uTixFQUFFc3JDLFNBQVMsQ0FBQyxHQUFHLE9BQU90ckMsRUFBRThxQyxRQUFRaW9CLEdBQUcveUQsRUFBRThxQyxRQUFRLENBQUM5cUMsRUFBRSxLQUFLLE1BQU1tTixFQUFFbk4sRUFBRUEsRUFBRThxQyxPQUFpQyxJQUExQjlxQyxFQUFFc3JDLFFBQVFSLE9BQU85cUMsRUFBRThxQyxPQUFXOXFDLEVBQUVBLEVBQUVzckMsUUFBUSxJQUFJdHJDLEVBQUVvaEMsS0FBSyxJQUFJcGhDLEVBQUVvaEMsS0FBSyxLQUFLcGhDLEVBQUVvaEMsS0FBSyxDQUFDLEdBQVcsRUFBUnBoQyxFQUFFK3FDLE1BQVEsU0FBUzM5QixFQUFFLEdBQUcsT0FDL2VwTixFQUFFcXJDLE9BQU8sSUFBSXJyQyxFQUFFb2hDLElBQUksU0FBU2gwQixFQUFPcE4sRUFBRXFyQyxNQUFNUCxPQUFPOXFDLEVBQUVBLEVBQUVBLEVBQUVxckMsTUFBTSxLQUFhLEVBQVJyckMsRUFBRStxQyxPQUFTLENBQUMvcUMsRUFBRUEsRUFBRXNwQyxVQUFVLE1BQU1uOEIsR0FBR2xOLEVBQ3RHLFNBQVNnekQsRUFBRzlsRCxFQUFFQyxFQUFFcE4sR0FBRyxJQUFJQyxFQUFFa04sRUFBRWkwQixJQUFJcjZCLEVBQUUsSUFBSTlHLEdBQUcsSUFBSUEsRUFBRSxHQUFHOEcsRUFBRW9HLEVBQUVwRyxFQUFFb0csRUFBRW04QixVQUFVbjhCLEVBQUVtOEIsVUFBVTFmLFNBQVN4YyxFQUFFLElBQUlwTixFQUFFMGtDLFNBQVMxa0MsRUFBRWdwQyxXQUFXa3FCLGFBQWEvbEQsRUFBRUMsR0FBR3BOLEVBQUVrekQsYUFBYS9sRCxFQUFFQyxJQUFJLElBQUlwTixFQUFFMGtDLFVBQVV0M0IsRUFBRXBOLEVBQUVncEMsWUFBYWtxQixhQUFhL2xELEVBQUVuTixJQUFLb04sRUFBRXBOLEdBQUk4bkIsWUFBWTNhLEdBQTRCLFFBQXhCbk4sRUFBRUEsRUFBRW16RCwyQkFBOEIsSUFBU256RCxHQUFHLE9BQU9vTixFQUFFdWpELFVBQVV2akQsRUFBRXVqRCxRQUFRelEsVUFBVSxHQUFHLElBQUlqZ0QsR0FBYyxRQUFWa04sRUFBRUEsRUFBRWsrQixPQUFnQixJQUFJNG5CLEVBQUc5bEQsRUFBRUMsRUFBRXBOLEdBQUdtTixFQUFFQSxFQUFFbStCLFFBQVEsT0FBT24rQixHQUFHOGxELEVBQUc5bEQsRUFBRUMsRUFBRXBOLEdBQUdtTixFQUFFQSxFQUFFbStCLFFBRHRTMm5CLENBQUc5bEQsRUFBRW5OLEVBQUVvTixHQUUvRyxTQUFTZ21ELEVBQUdqbUQsRUFBRUMsRUFBRXBOLEdBQUcsSUFBSUMsRUFBRWtOLEVBQUVpMEIsSUFBSXI2QixFQUFFLElBQUk5RyxHQUFHLElBQUlBLEVBQUUsR0FBRzhHLEVBQUVvRyxFQUFFcEcsRUFBRW9HLEVBQUVtOEIsVUFBVW44QixFQUFFbThCLFVBQVUxZixTQUFTeGMsRUFBRXBOLEVBQUVrekQsYUFBYS9sRCxFQUFFQyxHQUFHcE4sRUFBRThuQixZQUFZM2EsUUFBUSxHQUFHLElBQUlsTixHQUFjLFFBQVZrTixFQUFFQSxFQUFFaytCLE9BQWdCLElBQUkrbkIsRUFBR2ptRCxFQUFFQyxFQUFFcE4sR0FBR21OLEVBQUVBLEVBQUVtK0IsUUFBUSxPQUFPbitCLEdBQUdpbUQsRUFBR2ptRCxFQUFFQyxFQUFFcE4sR0FBR21OLEVBQUVBLEVBQUVtK0IsUUFGbkc4bkIsQ0FBR2ptRCxFQUFFbk4sRUFBRW9OLEdBR3pILFNBQVN5bEQsR0FBRzFsRCxFQUFFQyxHQUFHLElBQUksSUFBYXJHLEVBQUVzekIsRUFBWHI2QixFQUFFb04sRUFBRW5OLEdBQUUsSUFBUyxDQUFDLElBQUlBLEVBQUUsQ0FBQ0EsRUFBRUQsRUFBRThxQyxPQUFPMzlCLEVBQUUsT0FBTyxDQUFDLEdBQUcsT0FBT2xOLEVBQUUsTUFBTWdOLE1BQU1sRCxFQUFFLE1BQW9CLE9BQWRoRCxFQUFFOUcsRUFBRXFwQyxVQUFpQnJwQyxFQUFFbWhDLEtBQUssS0FBSyxFQUFFL0csR0FBRSxFQUFHLE1BQU1sdEIsRUFBRSxLQUFLLEVBQWlDLEtBQUssRUFBRXBHLEVBQUVBLEVBQUV1bUMsY0FBY2pULEdBQUUsRUFBRyxNQUFNbHRCLEVBQUVsTixFQUFFQSxFQUFFNnFDLE9BQU83cUMsR0FBRSxFQUFHLEdBQUcsSUFBSUQsRUFBRW9oQyxLQUFLLElBQUlwaEMsRUFBRW9oQyxJQUFJLENBQUNqMEIsRUFBRSxJQUFJLElBQUlpdEIsRUFBRWp0QixFQUFFZ3RCLEVBQUVuNkIsRUFBRTRRLEVBQUV1cEIsSUFBSSxHQUFHdzRCLEdBQUd2NEIsRUFBRXhwQixHQUFHLE9BQU9BLEVBQUV5NkIsT0FBTyxJQUFJejZCLEVBQUV3d0IsSUFBSXh3QixFQUFFeTZCLE1BQU1QLE9BQU9sNkIsRUFBRUEsRUFBRUEsRUFBRXk2QixVQUFVLENBQUMsR0FBR3o2QixJQUFJdXBCLEVBQUUsTUFBTWh0QixFQUFFLEtBQUssT0FBT3lELEVBQUUwNkIsU0FBUyxDQUFDLEdBQUcsT0FBTzE2QixFQUFFazZCLFFBQVFsNkIsRUFBRWs2QixTQUFTM1EsRUFBRSxNQUFNaHRCLEVBQUV5RCxFQUFFQSxFQUFFazZCLE9BQU9sNkIsRUFBRTA2QixRQUFRUixPQUFPbDZCLEVBQUVrNkIsT0FBT2w2QixFQUFFQSxFQUFFMDZCLFFBQVFqUixHQUFHRCxFQUFFcnpCLEVBQUVvekIsRUFBRW42QixFQUFFc3BDLFVBQ3JmLElBQUlsUCxFQUFFc0ssU0FBU3RLLEVBQUU0TyxXQUFXL2dCLFlBQVlrUyxHQUFHQyxFQUFFblMsWUFBWWtTLElBQUlwekIsRUFBRWtoQixZQUFZam9CLEVBQUVzcEMsZ0JBQWdCLEdBQUcsSUFBSXRwQyxFQUFFb2hDLEtBQUssR0FBRyxPQUFPcGhDLEVBQUVxckMsTUFBTSxDQUFDdGtDLEVBQUUvRyxFQUFFc3BDLFVBQVVnRSxjQUFjalQsR0FBRSxFQUFHcjZCLEVBQUVxckMsTUFBTVAsT0FBTzlxQyxFQUFFQSxFQUFFQSxFQUFFcXJDLE1BQU0sZUFBZSxHQUFHc25CLEdBQUd4bEQsRUFBRW5OLEdBQUcsT0FBT0EsRUFBRXFyQyxNQUFNLENBQUNyckMsRUFBRXFyQyxNQUFNUCxPQUFPOXFDLEVBQUVBLEVBQUVBLEVBQUVxckMsTUFBTSxTQUFTLEdBQUdyckMsSUFBSW9OLEVBQUUsTUFBTSxLQUFLLE9BQU9wTixFQUFFc3JDLFNBQVMsQ0FBQyxHQUFHLE9BQU90ckMsRUFBRThxQyxRQUFROXFDLEVBQUU4cUMsU0FBUzE5QixFQUFFLE9BQWtCLEtBQVhwTixFQUFFQSxFQUFFOHFDLFFBQWExSixNQUFNbmhDLEdBQUUsR0FBSUQsRUFBRXNyQyxRQUFRUixPQUFPOXFDLEVBQUU4cUMsT0FBTzlxQyxFQUFFQSxFQUFFc3JDLFNBQ2xaLFNBQVMrbkIsR0FBR2xtRCxFQUFFQyxHQUFHLE9BQU9BLEVBQUVnMEIsS0FBSyxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLElBQUlwaEMsRUFBRW9OLEVBQUVzNEMsWUFBeUMsR0FBRyxRQUFoQzFsRCxFQUFFLE9BQU9BLEVBQUVBLEVBQUUrbkQsV0FBVyxNQUFpQixDQUFDLElBQUk5bkQsRUFBRUQsRUFBRUEsRUFBRW1ELEtBQUssR0FBRyxJQUFXLEVBQU5sRCxFQUFFbWhDLE9BQVNqMEIsRUFBRWxOLEVBQUV5c0QsUUFBUXpzRCxFQUFFeXNELGFBQVEsT0FBTyxJQUFTdi9DLEdBQUdBLEtBQUtsTixFQUFFQSxFQUFFa0QsV0FBV2xELElBQUlELEdBQUcsT0FBTyxLQUFLLEVBQUUsT0FBTyxLQUFLLEVBQWdCLEdBQUcsT0FBakJBLEVBQUVvTixFQUFFazhCLFdBQXFCLENBQUNycEMsRUFBRW1OLEVBQUVtOEMsY0FBYyxJQUFJeGlELEVBQUUsT0FBT29HLEVBQUVBLEVBQUVvOEMsY0FBY3RwRCxFQUFFa04sRUFBRUMsRUFBRXBHLEtBQUssSUFBSXF6QixFQUFFanRCLEVBQUVzNEMsWUFBK0IsR0FBbkJ0NEMsRUFBRXM0QyxZQUFZLEtBQVEsT0FBT3JyQixFQUFFLENBQWdGLElBQS9FcjZCLEVBQUVvaEQsSUFBSW5oRCxFQUFFLFVBQVVrTixHQUFHLFVBQVVsTixFQUFFK0csTUFBTSxNQUFNL0csRUFBRUMsTUFBTTBpQyxHQUFHNWlDLEVBQUVDLEdBQUcyb0MsR0FBR3o3QixFQUFFcEcsR0FBR3FHLEVBQUV3N0IsR0FBR3o3QixFQUFFbE4sR0FBTzhHLEVBQUUsRUFBRUEsRUFBRXN6QixFQUFFdDRCLE9BQU9nRixHQUNsZixFQUFFLENBQUMsSUFBSXF6QixFQUFFQyxFQUFFdHpCLEdBQUdvekIsRUFBRUUsRUFBRXR6QixFQUFFLEdBQUcsVUFBVXF6QixFQUFFb04sR0FBR3huQyxFQUFFbTZCLEdBQUcsNEJBQTRCQyxFQUFFNkosR0FBR2prQyxFQUFFbTZCLEdBQUcsYUFBYUMsRUFBRW9LLEdBQUd4a0MsRUFBRW02QixHQUFHMEUsRUFBRzcrQixFQUFFbzZCLEVBQUVELEVBQUUvc0IsR0FBRyxPQUFPRCxHQUFHLElBQUssUUFBUTAxQixHQUFHN2lDLEVBQUVDLEdBQUcsTUFBTSxJQUFLLFdBQVd5akMsR0FBRzFqQyxFQUFFQyxHQUFHLE1BQU0sSUFBSyxTQUFTa04sRUFBRW5OLEVBQUV1aUMsY0FBY2t1QixZQUFZendELEVBQUV1aUMsY0FBY2t1QixjQUFjeHdELEVBQUV5d0QsU0FBbUIsT0FBVnIyQixFQUFFcDZCLEVBQUVXLE9BQWN1aUMsR0FBR25qQyxJQUFJQyxFQUFFeXdELFNBQVNyMkIsR0FBRSxHQUFJbHRCLE1BQU1sTixFQUFFeXdELFdBQVcsTUFBTXp3RCxFQUFFcWlDLGFBQWFhLEdBQUduakMsSUFBSUMsRUFBRXl3RCxTQUFTendELEVBQUVxaUMsY0FBYSxHQUFJYSxHQUFHbmpDLElBQUlDLEVBQUV5d0QsU0FBU3p3RCxFQUFFeXdELFNBQVMsR0FBRyxJQUFHLE1BQU8sT0FBTyxLQUFLLEVBQUUsR0FBRyxPQUFPdGpELEVBQUVrOEIsVUFBVSxNQUFNcjhCLE1BQU1sRCxFQUFFLE1BQy9jLFlBRHFkcUQsRUFBRWs4QixVQUFVM0UsVUFDamZ2M0IsRUFBRW04QyxlQUFxQixLQUFLLEVBQThELGFBQTVEdnBELEVBQUVvTixFQUFFazhCLFdBQVkrRCxVQUFVcnRDLEVBQUVxdEMsU0FBUSxFQUFHVSxHQUFHL3RDLEVBQUVzdEMsaUJBQXVCLEtBQUssR0FBRyxPQUFPLEtBQUssR0FBeUQsT0FBdEQsT0FBT2xnQyxFQUFFNjlCLGdCQUFnQnFvQixHQUFHMTRCLEtBQUk4M0IsR0FBR3RsRCxFQUFFaStCLE9BQU0sU0FBS2tvQixHQUFHbm1ELEdBQVUsS0FBSyxHQUFTLFlBQU5tbUQsR0FBR25tRCxHQUFVLEtBQUssR0FBRyxPQUFPLEtBQUssR0FBRyxLQUFLLEdBQWdDLFlBQTdCc2xELEdBQUd0bEQsRUFBRSxPQUFPQSxFQUFFNjlCLGVBQXNCLE1BQU1oK0IsTUFBTWxELEVBQUUsTUFBTyxTQUFTd3BELEdBQUdwbUQsR0FBRyxJQUFJQyxFQUFFRCxFQUFFdTRDLFlBQVksR0FBRyxPQUFPdDRDLEVBQUUsQ0FBQ0QsRUFBRXU0QyxZQUFZLEtBQUssSUFBSTFsRCxFQUFFbU4sRUFBRW04QixVQUFVLE9BQU90cEMsSUFBSUEsRUFBRW1OLEVBQUVtOEIsVUFBVSxJQUFJMG9CLElBQUk1a0QsRUFBRStJLFNBQVEsU0FBUy9JLEdBQUcsSUFBSW5OLEVBQUV1ekQsR0FBR3J5RCxLQUFLLEtBQUtnTSxFQUFFQyxHQUFHcE4sRUFBRWkvQyxJQUFJN3hDLEtBQUtwTixFQUFFNDlCLElBQUl4d0IsR0FBR0EsRUFBRWd1QixLQUFLbjdCLEVBQUVBLFFBQ25lLFNBQVN3ekQsR0FBR3RtRCxFQUFFQyxHQUFHLE9BQU8sT0FBT0QsSUFBc0IsUUFBbEJBLEVBQUVBLEVBQUU4OUIsZ0JBQXdCLE9BQU85OUIsRUFBRSs5QixjQUErQixRQUFsQjk5QixFQUFFQSxFQUFFNjlCLGdCQUF3QixPQUFPNzlCLEVBQUU4OUIsWUFBZSxJQUFJd29CLEdBQUc5L0MsS0FBSzhpQixLQUFLaTlCLEdBQUdwMEIsRUFBRy9ELHVCQUF1Qm80QixHQUFHcjBCLEVBQUc1RCxrQkFBa0JrNEIsR0FBRSxFQUFFMUgsR0FBRSxLQUFLMkgsR0FBRSxLQUFLN0MsR0FBRSxFQUFFOEMsR0FBRyxFQUFFQyxHQUFHeFMsR0FBRyxHQUFHc1AsR0FBRSxFQUFFbUQsR0FBRyxLQUFLQyxHQUFHLEVBQUUxTixHQUFHLEVBQUV1SyxHQUFHLEVBQUVvRCxHQUFHLEVBQUVDLEdBQUcsS0FBS2QsR0FBRyxFQUFFcEMsR0FBR21ELElBQVMsU0FBU0MsS0FBS3BELEdBQUd0MkIsS0FBSSxJQUFJLElBOEJzRjI1QixHQTlCbEZDLEdBQUUsS0FBSzlDLElBQUcsRUFBR0MsR0FBRyxLQUFLRyxHQUFHLEtBQUsyQyxJQUFHLEVBQUdDLEdBQUcsS0FBS0MsR0FBRyxHQUFHQyxHQUFHLEdBQUdDLEdBQUcsR0FBR0MsR0FBRyxLQUFLQyxHQUFHLEVBQUVDLEdBQUcsS0FBS0MsSUFBSSxFQUFFQyxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsR0FBRyxLQUFLQyxJQUFHLEVBQUcsU0FBU3ZPLEtBQUssT0FBTyxJQUFPLEdBQUYrTSxJQUFNajVCLE1BQUssSUFBSXE2QixHQUFHQSxHQUFHQSxHQUFHcjZCLEtBQzNlLFNBQVNtc0IsR0FBRzU1QyxHQUFZLEdBQUcsSUFBTyxHQUFuQkEsRUFBRUEsRUFBRXJNLE9BQWtCLE9BQU8sRUFBRSxHQUFHLElBQU8sRUFBRnFNLEdBQUssT0FBTyxLQUFLODJDLEtBQUssRUFBRSxFQUFrQixHQUFoQixJQUFJaVIsS0FBS0EsR0FBR2hCLElBQU8sSUFBSTNQLEdBQUc3b0IsV0FBVyxDQUFDLElBQUl5NUIsS0FBS0EsR0FBRyxPQUFPZixHQUFHQSxHQUFHOWtCLGFBQWEsR0FBR25pQyxFQUFFK25ELEdBQUcsSUFBSTluRCxFQUFFLFNBQVMrbkQsR0FBc0QsT0FBN0MsS0FBTi9uRCxJQUFJQSxLQUE4QixLQUFQQSxHQUFiRCxFQUFFLFNBQVNBLElBQU9BLEtBQVVDLEVBQUUsT0FBY0EsRUFBNEQsT0FBMURELEVBQUU4MkMsS0FBSyxJQUFPLEVBQUY0UCxLQUFNLEtBQUsxbUQsRUFBRUEsRUFBRTJpQyxHQUFHLEdBQUdvbEIsSUFBYS9uRCxFQUFFMmlDLEdBQVYzaUMsRUF0SzNRLFNBQVlBLEdBQUcsT0FBT0EsR0FBRyxLQUFLLEdBQUcsT0FBTyxHQUFHLEtBQUssR0FBRyxPQUFPLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxPQUFPLEVBQUUsS0FBSyxHQUFHLE9BQU8sRUFBRSxRQUFRLE9BQU8sR0FzS3VKbW9ELENBQUdub0QsR0FBVStuRCxJQUFZL25ELEVBQ25ULFNBQVM2NUMsR0FBRzc1QyxFQUFFQyxFQUFFcE4sR0FBRyxHQUFHLEdBQUcrMEQsR0FBRyxNQUFNQSxHQUFHLEVBQUVDLEdBQUcsS0FBSy9uRCxNQUFNbEQsRUFBRSxNQUFnQixHQUFHLFFBQWJvRCxFQUFFb29ELEdBQUdwb0QsRUFBRUMsSUFBZSxPQUFPLEtBQUs2aUMsR0FBRzlpQyxFQUFFQyxFQUFFcE4sR0FBR21OLElBQUlnL0MsS0FBSTRFLElBQUkzakQsRUFBRSxJQUFJMGpELElBQUdFLEdBQUc3akQsRUFBRThqRCxLQUFJLElBQUloeEQsRUFBRWdrRCxLQUFLLElBQUk3MkMsRUFBRSxJQUFPLEVBQUZ5bUQsS0FBTSxJQUFPLEdBQUZBLElBQU0yQixHQUFHcm9ELElBQUlzb0QsR0FBR3RvRCxFQUFFbk4sR0FBRyxJQUFJNnpELEtBQUlTLEtBQUtqUSxRQUFRLElBQU8sRUFBRndQLEtBQU0sS0FBSzV6RCxHQUFHLEtBQUtBLElBQUksT0FBTzYwRCxHQUFHQSxHQUFHLElBQUl0M0IsSUFBSSxDQUFDcndCLElBQUkybkQsR0FBR2wzQixJQUFJendCLElBQUlzb0QsR0FBR3RvRCxFQUFFbk4sSUFBSW8wRCxHQUFHam5ELEVBQUUsU0FBU29vRCxHQUFHcG9ELEVBQUVDLEdBQUdELEVBQUVnNEMsT0FBTy8zQyxFQUFFLElBQUlwTixFQUFFbU4sRUFBRTA5QixVQUFxQyxJQUEzQixPQUFPN3FDLElBQUlBLEVBQUVtbEQsT0FBTy8zQyxHQUFHcE4sRUFBRW1OLEVBQU1BLEVBQUVBLEVBQUUyOUIsT0FBTyxPQUFPMzlCLEdBQUdBLEVBQUU2M0MsWUFBWTUzQyxFQUFnQixRQUFkcE4sRUFBRW1OLEVBQUUwOUIsYUFBcUI3cUMsRUFBRWdsRCxZQUFZNTNDLEdBQUdwTixFQUFFbU4sRUFBRUEsRUFBRUEsRUFBRTI5QixPQUFPLE9BQU8sSUFBSTlxQyxFQUFFb2hDLElBQUlwaEMsRUFBRXNwQyxVQUFVLEtBQ3plLFNBQVNtc0IsR0FBR3RvRCxFQUFFQyxHQUFHLElBQUksSUFBSXBOLEVBQUVtTixFQUFFdW9ELGFBQWF6MUQsRUFBRWtOLEVBQUVxaUMsZUFBZXpvQyxFQUFFb0csRUFBRXNpQyxZQUFZcFYsRUFBRWx0QixFQUFFd29ELGdCQUFnQnY3QixFQUFFanRCLEVBQUVtaUMsYUFBYSxFQUFFbFYsR0FBRyxDQUFDLElBQUlELEVBQUUsR0FBR3VWLEdBQUd0VixHQUFHeHBCLEVBQUUsR0FBR3VwQixFQUFFdjZCLEVBQUV5NkIsRUFBRUYsR0FBRyxJQUFJLElBQUl2NkIsR0FBRyxHQUFHLElBQUtnUixFQUFFM1EsSUFBSSxJQUFLMlEsRUFBRTdKLEdBQUcsQ0FBQ25ILEVBQUV3TixFQUFFZ2lDLEdBQUd4K0IsR0FBRyxJQUFJeFAsRUFBRXU0QixHQUFFVSxFQUFFRixHQUFHLElBQUkvNEIsRUFBRXhCLEVBQUUsSUFBSSxHQUFHd0IsRUFBRXhCLEVBQUUsS0FBSyxRQUFRQSxHQUFHd04sSUFBSUQsRUFBRW9pQyxjQUFjMytCLEdBQUd3cEIsSUFBSXhwQixFQUF3QixHQUF0QjNRLEVBQUVvdkMsR0FBR2xpQyxFQUFFQSxJQUFJZy9DLEdBQUU4RSxHQUFFLEdBQUc3akQsRUFBRXVzQixHQUFLLElBQUkxNUIsRUFBRSxPQUFPRCxJQUFJQSxJQUFJMmpELElBQUlqQixHQUFHMWlELEdBQUdtTixFQUFFdW9ELGFBQWEsS0FBS3ZvRCxFQUFFeW9ELGlCQUFpQixPQUFPLENBQUMsR0FBRyxPQUFPNTFELEVBQUUsQ0FBQyxHQUFHbU4sRUFBRXlvRCxtQkFBbUJ4b0QsRUFBRSxPQUFPcE4sSUFBSTJqRCxJQUFJakIsR0FBRzFpRCxHQUFHLEtBQUtvTixHQUFHcE4sRUFBRXcxRCxHQUFHcjBELEtBQUssS0FBS2dNLEdBQUcsT0FBTzAyQyxJQUFJQSxHQUFHLENBQUM3akQsR0FBRzhqRCxHQUFHckIsR0FBR1UsR0FBR21CLEtBQUtULEdBQUd4Z0QsS0FBS3JELEdBQ3JmQSxFQUFFMmpELElBQUksS0FBS3YyQyxFQUFFcE4sRUFBRW9rRCxHQUFHLEdBQUdvUixHQUFHcjBELEtBQUssS0FBS2dNLElBQWFuTixFQUFFb2tELEdBQVZwa0QsRUF6SytGLFNBQVltTixHQUFHLE9BQU9BLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxPQUFPLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLE9BQU8sR0FBRyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxPQUFPLEdBQUcsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsT0FBTyxHQUFHLEtBQUssRUFBRSxPQUFPLEdBQUcsUUFBUSxNQUFNRixNQUFNbEQsRUFBRSxJQUFJb0QsS0F5S3hUMG9ELENBQUd6b0QsR0FBVTBvRCxHQUFHMzBELEtBQUssS0FBS2dNLElBQUtBLEVBQUV5b0QsaUJBQWlCeG9ELEVBQUVELEVBQUV1b0QsYUFBYTExRCxHQUM1RyxTQUFTODFELEdBQUczb0QsR0FBaUIsR0FBZDhuRCxJQUFJLEVBQUVFLEdBQUdELEdBQUcsRUFBSyxJQUFPLEdBQUZyQixJQUFNLE1BQU01bUQsTUFBTWxELEVBQUUsTUFBTSxJQUFJcUQsRUFBRUQsRUFBRXVvRCxhQUFhLEdBQUdLLE1BQU01b0QsRUFBRXVvRCxlQUFldG9ELEVBQUUsT0FBTyxLQUFLLElBQUlwTixFQUFFcXZDLEdBQUdsaUMsRUFBRUEsSUFBSWcvQyxHQUFFOEUsR0FBRSxHQUFHLEdBQUcsSUFBSWp4RCxFQUFFLE9BQU8sS0FBSyxJQUFJQyxFQUFFRCxFQUFNK0csRUFBRThzRCxHQUFFQSxJQUFHLEdBQUcsSUFBSXg1QixFQUFFMjdCLEtBQWtDLElBQTFCN0osS0FBSWgvQyxHQUFHOGpELEtBQUloeEQsSUFBRXEwRCxLQUFLMkIsR0FBRzlvRCxFQUFFbE4sTUFBTSxJQUFJaTJELEtBQUssTUFBTSxNQUFNLzdCLEdBQUdnOEIsR0FBR2hwRCxFQUFFZ3RCLEdBQWdFLEdBQXBEMHFCLEtBQUs4TyxHQUFHdnRELFFBQVFpMEIsRUFBRXc1QixHQUFFOXNELEVBQUUsT0FBTytzRCxHQUFFN3pELEVBQUUsR0FBR2tzRCxHQUFFLEtBQUs4RSxHQUFFLEVBQUVoeEQsRUFBRTZ3RCxJQUFNLElBQUtvRCxHQUFHbkQsSUFBSWtGLEdBQUc5b0QsRUFBRSxRQUFRLEdBQUcsSUFBSWxOLEVBQUUsQ0FBeUYsR0FBeEYsSUFBSUEsSUFBSTR6RCxJQUFHLEdBQUcxbUQsRUFBRWtnQyxVQUFVbGdDLEVBQUVrZ0MsU0FBUSxFQUFHd1QsR0FBRzF6QyxFQUFFbWdDLGdCQUF3QixLQUFSdHRDLEVBQUU2dkMsR0FBRzFpQyxNQUFXbE4sRUFBRW0yRCxHQUFHanBELEVBQUVuTixLQUFRLElBQUlDLEVBQUUsTUFBTW1OLEVBQUU2bUQsR0FBR2dDLEdBQUc5b0QsRUFBRSxHQUFHNmpELEdBQUc3akQsRUFBRW5OLEdBQUd5MUQsR0FBR3RvRCxFQUFFeXRCLE1BQUt4dEIsRUFDM2MsT0FENmNELEVBQUVrcEQsYUFDcmZscEQsRUFBRS9HLFFBQVF5a0MsVUFBVTE5QixFQUFFbXBELGNBQWN0MkQsRUFBU0MsR0FBRyxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU1nTixNQUFNbEQsRUFBRSxNQUFNLEtBQUssRUFBRXdzRCxHQUFHcHBELEdBQUcsTUFBTSxLQUFLLEVBQVUsR0FBUjZqRCxHQUFHN2pELEVBQUVuTixJQUFTLFNBQUZBLEtBQWNBLEdBQWlCLElBQWJDLEVBQUVxekQsR0FBRyxJQUFJMTRCLE1BQVUsQ0FBQyxHQUFHLElBQUl5VSxHQUFHbGlDLEVBQUUsR0FBRyxNQUF5QixLQUFuQnBHLEVBQUVvRyxFQUFFcWlDLGdCQUFxQnh2QyxLQUFLQSxFQUFFLENBQUM4bUQsS0FBSzM1QyxFQUFFc2lDLGFBQWF0aUMsRUFBRXFpQyxlQUFlem9DLEVBQUUsTUFBTW9HLEVBQUVxcEQsY0FBYy9WLEdBQUc4VixHQUFHcDFELEtBQUssS0FBS2dNLEdBQUdsTixHQUFHLE1BQU1zMkQsR0FBR3BwRCxHQUFHLE1BQU0sS0FBSyxFQUFVLEdBQVI2akQsR0FBRzdqRCxFQUFFbk4sSUFBUyxRQUFGQSxLQUFhQSxFQUFFLE1BQXFCLElBQWZDLEVBQUVrTixFQUFFK2lDLFdBQWVucEMsR0FBRyxFQUFFLEVBQUUvRyxHQUFHLENBQUMsSUFBSW82QixFQUFFLEdBQUdzVixHQUFHMXZDLEdBQUdxNkIsRUFBRSxHQUFHRCxHQUFFQSxFQUFFbjZCLEVBQUVtNkIsSUFBS3J6QixJQUFJQSxFQUFFcXpCLEdBQUdwNkIsSUFBSXE2QixFQUNqWixHQURtWnI2QixFQUFFK0csRUFDbFosSUFENFovRyxHQUFHLEtBQVhBLEVBQUU0NkIsS0FBSTU2QixHQUFXLElBQUksSUFBSUEsRUFBRSxJQUFJLEtBQUtBLEVBQUUsS0FBSyxLQUFLQSxFQUFFLEtBQUssSUFBSUEsRUFBRSxJQUFJLEtBQ2xmQSxFQUFFLEtBQUssS0FBSzB6RCxHQUFHMXpELEVBQUUsT0FBT0EsR0FBVSxDQUFDbU4sRUFBRXFwRCxjQUFjL1YsR0FBRzhWLEdBQUdwMUQsS0FBSyxLQUFLZ00sR0FBR25OLEdBQUcsTUFBTXUyRCxHQUFHcHBELEdBQUcsTUFBTSxLQUFLLEVBQUVvcEQsR0FBR3BwRCxHQUFHLE1BQU0sUUFBUSxNQUFNRixNQUFNbEQsRUFBRSxPQUFrQixPQUFWMHJELEdBQUd0b0QsRUFBRXl0QixNQUFZenRCLEVBQUV1b0QsZUFBZXRvRCxFQUFFMG9ELEdBQUczMEQsS0FBSyxLQUFLZ00sR0FBRyxLQUFLLFNBQVM2akQsR0FBRzdqRCxFQUFFQyxHQUF1RCxJQUFwREEsSUFBSSttRCxHQUFHL21ELElBQUkyakQsR0FBRzVqRCxFQUFFcWlDLGdCQUFnQnBpQyxFQUFFRCxFQUFFc2lDLGNBQWNyaUMsRUFBTUQsRUFBRUEsRUFBRXdvRCxnQkFBZ0IsRUFBRXZvRCxHQUFHLENBQUMsSUFBSXBOLEVBQUUsR0FBRzB2QyxHQUFHdGlDLEdBQUduTixFQUFFLEdBQUdELEVBQUVtTixFQUFFbk4sSUFBSSxFQUFFb04sSUFBSW5OLEdBQzFVLFNBQVN1MUQsR0FBR3JvRCxHQUFHLEdBQUcsSUFBTyxHQUFGMG1ELElBQU0sTUFBTTVtRCxNQUFNbEQsRUFBRSxNQUFXLEdBQUxnc0QsS0FBUTVvRCxJQUFJZy9DLElBQUcsSUFBS2gvQyxFQUFFb2lDLGFBQWEwaEIsSUFBRyxDQUFDLElBQUk3akQsRUFBRTZqRCxHQUFNanhELEVBQUVvMkQsR0FBR2pwRCxFQUFFQyxHQUFHLElBQUs4bUQsR0FBR25ELE1BQWdCL3dELEVBQUVvMkQsR0FBR2pwRCxFQUFmQyxFQUFFaWlDLEdBQUdsaUMsRUFBRUMsVUFBNkJwTixFQUFFbzJELEdBQUdqcEQsRUFBZkMsRUFBRWlpQyxHQUFHbGlDLEVBQUUsSUFBZ0gsR0FBbkcsSUFBSUEsRUFBRWkwQixLQUFLLElBQUlwaEMsSUFBSTZ6RCxJQUFHLEdBQUcxbUQsRUFBRWtnQyxVQUFVbGdDLEVBQUVrZ0MsU0FBUSxFQUFHd1QsR0FBRzF6QyxFQUFFbWdDLGdCQUF3QixLQUFSbGdDLEVBQUV5aUMsR0FBRzFpQyxNQUFXbk4sRUFBRW8yRCxHQUFHanBELEVBQUVDLEtBQVEsSUFBSXBOLEVBQUUsTUFBTUEsRUFBRWkwRCxHQUFHZ0MsR0FBRzlvRCxFQUFFLEdBQUc2akQsR0FBRzdqRCxFQUFFQyxHQUFHcW9ELEdBQUd0b0QsRUFBRXl0QixNQUFLNTZCLEVBQXVFLE9BQXJFbU4sRUFBRWtwRCxhQUFhbHBELEVBQUUvRyxRQUFReWtDLFVBQVUxOUIsRUFBRW1wRCxjQUFjbHBELEVBQUVtcEQsR0FBR3BwRCxHQUFHc29ELEdBQUd0b0QsRUFBRXl0QixNQUFZLEtBQ25SLFNBQVM2N0IsR0FBR3RwRCxFQUFFQyxHQUFHLElBQUlwTixFQUFFNnpELEdBQUVBLElBQUcsRUFBRSxJQUFJLE9BQU8xbUQsRUFBRUMsR0FBRyxRQUFZLEtBQUp5bUQsR0FBRTd6RCxLQUFVczBELEtBQUtqUSxPQUFPLFNBQVNxUyxHQUFHdnBELEVBQUVDLEdBQUcsSUFBSXBOLEVBQUU2ekQsR0FBRUEsS0FBSSxFQUFFQSxJQUFHLEVBQUUsSUFBSSxPQUFPMW1ELEVBQUVDLEdBQUcsUUFBWSxLQUFKeW1ELEdBQUU3ekQsS0FBVXMwRCxLQUFLalEsT0FBTyxTQUFTcUssR0FBR3ZoRCxFQUFFQyxHQUFHMnNCLEdBQUVpNkIsR0FBR0QsSUFBSUEsSUFBSTNtRCxFQUFFOG1ELElBQUk5bUQsRUFBRSxTQUFTK2pELEtBQUs0QyxHQUFHQyxHQUFHNXRELFFBQVEwekIsR0FBRWs2QixJQUM1VixTQUFTaUMsR0FBRzlvRCxFQUFFQyxHQUFHRCxFQUFFa3BELGFBQWEsS0FBS2xwRCxFQUFFbXBELGNBQWMsRUFBRSxJQUFJdDJELEVBQUVtTixFQUFFcXBELGNBQWlELElBQWxDLElBQUl4MkQsSUFBSW1OLEVBQUVxcEQsZUFBZSxFQUFFN1YsR0FBRzNnRCxJQUFPLE9BQU84ekQsR0FBRSxJQUFJOXpELEVBQUU4ekQsR0FBRWhwQixPQUFPLE9BQU85cUMsR0FBRyxDQUFDLElBQUlDLEVBQUVELEVBQUUsT0FBT0MsRUFBRW1oQyxLQUFLLEtBQUssRUFBNkIsT0FBM0JuaEMsRUFBRUEsRUFBRStHLEtBQUt3UixvQkFBd0N1cEMsS0FBSyxNQUFNLEtBQUssRUFBRW9ILEtBQUtydkIsR0FBRVksSUFBR1osR0FBRVcsSUFBRzR2QixLQUFLLE1BQU0sS0FBSyxFQUFFaEIsR0FBR3BwRCxHQUFHLE1BQU0sS0FBSyxFQUFFa3BELEtBQUssTUFBTSxLQUFLLEdBQWMsS0FBSyxHQUFHcnZCLEdBQUVrQixJQUFHLE1BQU0sS0FBSyxHQUFHOHBCLEdBQUc3a0QsR0FBRyxNQUFNLEtBQUssR0FBRyxLQUFLLEdBQUdreEQsS0FBS254RCxFQUFFQSxFQUFFOHFDLE9BQU9xaEIsR0FBRWgvQyxFQUFFMm1ELEdBQUU1TCxHQUFHLzZDLEVBQUUvRyxRQUFRLE1BQU02cUQsR0FBRThDLEdBQUdHLEdBQUc5bUQsRUFBRTBqRCxHQUFFLEVBQUVtRCxHQUFHLEtBQUtFLEdBQUdwRCxHQUFHdkssR0FBRyxFQUN2YyxTQUFTMlAsR0FBR2hwRCxFQUFFQyxHQUFHLE9BQUUsQ0FBQyxJQUFJcE4sRUFBRTh6RCxHQUFFLElBQXVCLEdBQW5CalAsS0FBSzBGLEdBQUdua0QsUUFBUThrRCxHQUFNUixHQUFHLENBQUMsSUFBSSxJQUFJenFELEVBQUVvN0IsR0FBRTRQLGNBQWMsT0FBT2hyQyxHQUFHLENBQUMsSUFBSThHLEVBQUU5RyxFQUFFb3JELE1BQU0sT0FBT3RrRCxJQUFJQSxFQUFFZy9DLFFBQVEsTUFBTTlsRCxFQUFFQSxFQUFFa0QsS0FBS3VuRCxJQUFHLEVBQXlDLEdBQXRDRCxHQUFHLEVBQUVsdkIsR0FBRUQsR0FBRUQsR0FBRSxLQUFLc3ZCLElBQUcsRUFBR2lKLEdBQUd4dEQsUUFBUSxLQUFRLE9BQU9wRyxHQUFHLE9BQU9BLEVBQUU4cUMsT0FBTyxDQUFDZ21CLEdBQUUsRUFBRW1ELEdBQUc3bUQsRUFBRTBtRCxHQUFFLEtBQUssTUFBTTNtRCxFQUFFLENBQUMsSUFBSWt0QixFQUFFbHRCLEVBQUVpdEIsRUFBRXA2QixFQUFFOHFDLE9BQU8zUSxFQUFFbjZCLEVBQUU0USxFQUFFeEQsRUFBb0QsR0FBbERBLEVBQUU2akQsR0FBRTkyQixFQUFFNFEsT0FBTyxLQUFLNVEsRUFBRTh0QixZQUFZOXRCLEVBQUU0dEIsV0FBVyxLQUFRLE9BQU9uM0MsR0FBRyxpQkFBa0JBLEdBQUcsbUJBQW9CQSxFQUFFd3FCLEtBQUssQ0FBQyxJQUFJeDdCLEVBQUVnUixFQUFFLEdBQUcsSUFBWSxFQUFQdXBCLEVBQUVyNUIsTUFBUSxDQUFDLElBQUlNLEVBQUUrNEIsRUFBRTBRLFVBQVV6cEMsR0FBRys0QixFQUFFdXJCLFlBQVl0a0QsRUFBRXNrRCxZQUFZdnJCLEVBQUU4USxjQUFjN3BDLEVBQUU2cEMsY0FBYzlRLEVBQUVnckIsTUFBTS9qRCxFQUFFK2pELFFBQ3BmaHJCLEVBQUV1ckIsWUFBWSxLQUFLdnJCLEVBQUU4USxjQUFjLE1BQU0sSUFBSWxTLEVBQUUsSUFBZSxFQUFWaUMsR0FBRTUwQixTQUFXM0UsRUFBRTI0QixFQUFFLEVBQUUsQ0FBQyxJQUFJZixFQUFFLEdBQUdBLEVBQUUsS0FBSzUzQixFQUFFMi9CLElBQUksQ0FBQyxJQUFJdDNCLEVBQUVySSxFQUFFd3BDLGNBQWMsR0FBRyxPQUFPbmhDLEVBQUV1dkIsRUFBRSxPQUFPdnZCLEVBQUVvaEMsZUFBcUIsQ0FBQyxJQUFJdFMsRUFBRW4zQixFQUFFOG5ELGNBQWNsd0IsT0FBRSxJQUFTVCxFQUFFNDJCLFlBQVksSUFBSzUyQixFQUFFNjJCLDZCQUE4QjEyQixJQUFTLEdBQUdNLEVBQUUsQ0FBQyxJQUFJamIsRUFBRTNjLEVBQUVpa0QsWUFBWSxHQUFHLE9BQU90bkMsRUFBRSxDQUFDLElBQUlxYSxFQUFFLElBQUkrRSxJQUFJL0UsRUFBRW1GLElBQUloK0IsR0FBRzZCLEVBQUVpa0QsWUFBWWp0QixPQUFPcmEsRUFBRXdmLElBQUloK0IsR0FBRyxHQUFHLElBQVksRUFBUDZCLEVBQUVYLE1BQVEsQ0FBMkMsR0FBMUNXLEVBQUVzcEMsT0FBTyxHQUFHNVEsRUFBRTRRLE9BQU8sTUFBTTVRLEVBQUU0USxRQUFRLEtBQVEsSUFBSTVRLEVBQUVpSCxJQUFJLEdBQUcsT0FBT2pILEVBQUUwUSxVQUFVMVEsRUFBRWlILElBQUksT0FBTyxDQUFDLElBQUl2Z0MsRUFBRXFsRCxJQUFJLEVBQUUsR0FBR3JsRCxFQUFFdWdDLElBQUksRUFBRWlsQixHQUFHbHNCLEVBQUV0NUIsR0FBR3M1QixFQUFFZ3JCLE9BQU8sRUFBRSxNQUFNaDRDLEVBQUV5RCxPQUM1ZixFQUFPdXBCLEVBQUUvc0IsRUFBRSxJQUFJbXJCLEVBQUU4QixFQUFFczhCLFVBQStHLEdBQXJHLE9BQU9wK0IsR0FBR0EsRUFBRThCLEVBQUVzOEIsVUFBVSxJQUFJcEYsR0FBRzNnRCxFQUFFLElBQUk0c0IsSUFBSWpGLEVBQUV2WSxJQUFJcGdCLEVBQUVnUixTQUFnQixLQUFYQSxFQUFFMm5CLEVBQUUvM0IsSUFBSVosTUFBZ0JnUixFQUFFLElBQUk0c0IsSUFBSWpGLEVBQUV2WSxJQUFJcGdCLEVBQUVnUixLQUFTQSxFQUFFcXVDLElBQUk5a0IsR0FBRyxDQUFDdnBCLEVBQUVndEIsSUFBSXpELEdBQUcsSUFBSXpCLEVBQUVrK0IsR0FBR3oxRCxLQUFLLEtBQUtrNUIsRUFBRXo2QixFQUFFdTZCLEdBQUd2NkIsRUFBRXc3QixLQUFLMUMsRUFBRUEsR0FBR2ozQixFQUFFc3BDLE9BQU8sS0FBS3RwQyxFQUFFMGpELE1BQU0vM0MsRUFBRSxNQUFNRCxFQUFFMUwsRUFBRUEsRUFBRXFwQyxhQUFhLE9BQU9ycEMsR0FBR21QLEVBQUUzRCxPQUFPcTBCLEVBQUduSCxFQUFFbnpCLE9BQU8scUJBQXFCLHlMQUF5TCxJQUFJOHBELEtBQUlBLEdBQUUsR0FBR2xnRCxFQUFFeWdELEdBQUd6Z0QsRUFBRXVwQixHQUFHMTRCLEVBQ3BmMjRCLEVBQUUsRUFBRSxDQUFDLE9BQU8zNEIsRUFBRTIvQixLQUFLLEtBQUssRUFBRS9HLEVBQUV6cEIsRUFBRW5QLEVBQUVzcEMsT0FBTyxLQUFLMzlCLElBQUlBLEVBQUUzTCxFQUFFMGpELE9BQU8vM0MsRUFBa0JrNUMsR0FBRzdrRCxFQUFiZ3dELEdBQUdod0QsRUFBRTQ0QixFQUFFanRCLElBQVcsTUFBTUQsRUFBRSxLQUFLLEVBQUVrdEIsRUFBRXpwQixFQUFFLElBQUlrcUIsRUFBRXI1QixFQUFFdUYsS0FBS2kwQixFQUFFeDVCLEVBQUU2bkMsVUFBVSxHQUFHLElBQWEsR0FBUjduQyxFQUFFc3BDLFNBQVksbUJBQW9CalEsRUFBRWppQiwwQkFBMEIsT0FBT29pQixHQUFHLG1CQUFvQkEsRUFBRTQyQixvQkFBb0IsT0FBT0MsS0FBS0EsR0FBRzdTLElBQUloa0IsS0FBSyxDQUFDeDVCLEVBQUVzcEMsT0FBTyxLQUFLMzlCLElBQUlBLEVBQUUzTCxFQUFFMGpELE9BQU8vM0MsRUFBa0JrNUMsR0FBRzdrRCxFQUFibXdELEdBQUdud0QsRUFBRTQ0QixFQUFFanRCLElBQVcsTUFBTUQsR0FBRzFMLEVBQUVBLEVBQUVxcEMsYUFBYSxPQUFPcnBDLEdBQUdvMUQsR0FBRzcyRCxHQUFHLE1BQU04MkQsR0FBSTFwRCxFQUFFMHBELEVBQUdoRCxLQUFJOXpELEdBQUcsT0FBT0EsSUFBSTh6RCxHQUFFOXpELEVBQUVBLEVBQUU4cUMsUUFBUSxTQUFTLE9BQy9hLFNBQVNrckIsS0FBSyxJQUFJN29ELEVBQUV3bUQsR0FBR3Z0RCxRQUFzQixPQUFkdXRELEdBQUd2dEQsUUFBUThrRCxHQUFVLE9BQU8vOUMsRUFBRSs5QyxHQUFHLzlDLEVBQUUsU0FBU2lwRCxHQUFHanBELEVBQUVDLEdBQUcsSUFBSXBOLEVBQUU2ekQsR0FBRUEsSUFBRyxHQUFHLElBQUk1ekQsRUFBRSsxRCxLQUEyQixJQUF0QjdKLEtBQUloL0MsR0FBRzhqRCxLQUFJN2pELEdBQUc2b0QsR0FBRzlvRCxFQUFFQyxLQUFNLElBQUkycEQsS0FBSyxNQUFNLE1BQU1od0QsR0FBR292RCxHQUFHaHBELEVBQUVwRyxHQUFrQyxHQUF0Qjg5QyxLQUFLZ1AsR0FBRTd6RCxFQUFFMnpELEdBQUd2dEQsUUFBUW5HLEVBQUssT0FBTzZ6RCxHQUFFLE1BQU03bUQsTUFBTWxELEVBQUUsTUFBaUIsT0FBWG9pRCxHQUFFLEtBQUs4RSxHQUFFLEVBQVNILEdBQUUsU0FBU2lHLEtBQUssS0FBSyxPQUFPakQsSUFBR2tELEdBQUdsRCxJQUFHLFNBQVNvQyxLQUFLLEtBQUssT0FBT3BDLEtBQUlsUixNQUFNb1UsR0FBR2xELElBQUcsU0FBU2tELEdBQUc3cEQsR0FBRyxJQUFJQyxFQUFFbW5ELEdBQUdwbkQsRUFBRTA5QixVQUFVMTlCLEVBQUU0bUQsSUFBSTVtRCxFQUFFbzhDLGNBQWNwOEMsRUFBRTQ4QyxhQUFhLE9BQU8zOEMsRUFBRXlwRCxHQUFHMXBELEdBQUcybUQsR0FBRTFtRCxFQUFFd21ELEdBQUd4dEQsUUFBUSxLQUM1YSxTQUFTeXdELEdBQUcxcEQsR0FBRyxJQUFJQyxFQUFFRCxFQUFFLEVBQUUsQ0FBQyxJQUFJbk4sRUFBRW9OLEVBQUV5OUIsVUFBcUIsR0FBWDE5QixFQUFFQyxFQUFFMDlCLE9BQVUsSUFBYSxLQUFSMTlCLEVBQUUyOUIsT0FBWSxDQUFjLEdBQUcsUUFBaEIvcUMsRUFBRXd3RCxHQUFHeHdELEVBQUVvTixFQUFFMm1ELEtBQXFCLFlBQUpELEdBQUU5ekQsR0FBYSxHQUFHLE1BQVBBLEVBQUVvTixHQUFZZzBCLEtBQUssS0FBS3BoQyxFQUFFb2hDLEtBQUssT0FBT3BoQyxFQUFFaXJDLGVBQWUsSUFBUSxXQUFIOG9CLEtBQWdCLElBQVksRUFBUC96RCxFQUFFYyxNQUFRLENBQUMsSUFBSSxJQUFJYixFQUFFLEVBQUU4RyxFQUFFL0csRUFBRXFyQyxNQUFNLE9BQU90a0MsR0FBRzlHLEdBQUc4RyxFQUFFbytDLE1BQU1wK0MsRUFBRWkrQyxXQUFXaitDLEVBQUVBLEVBQUV1a0MsUUFBUXRyQyxFQUFFZ2xELFdBQVcva0QsRUFBRSxPQUFPa04sR0FBRyxJQUFhLEtBQVJBLEVBQUU0OUIsU0FBYyxPQUFPNTlCLEVBQUU4NkMsY0FBYzk2QyxFQUFFODZDLFlBQVk3NkMsRUFBRTY2QyxhQUFhLE9BQU83NkMsRUFBRTI2QyxhQUFhLE9BQU81NkMsRUFBRTQ2QyxhQUFhNTZDLEVBQUU0NkMsV0FBV0MsV0FBVzU2QyxFQUFFNjZDLGFBQWE5NkMsRUFBRTQ2QyxXQUFXMzZDLEVBQUUyNkMsWUFBWSxFQUFFMzZDLEVBQUUyOUIsUUFBUSxPQUMvZTU5QixFQUFFNDZDLFdBQVc1NkMsRUFBRTQ2QyxXQUFXQyxXQUFXNTZDLEVBQUVELEVBQUU4NkMsWUFBWTc2QyxFQUFFRCxFQUFFNDZDLFdBQVczNkMsUUFBUSxDQUFTLEdBQUcsUUFBWHBOLEVBQUVveEQsR0FBR2hrRCxJQUFrQyxPQUFsQnBOLEVBQUUrcUMsT0FBTyxVQUFLK29CLEdBQUU5ekQsR0FBUyxPQUFPbU4sSUFBSUEsRUFBRTg2QyxZQUFZOTZDLEVBQUU0NkMsV0FBVyxLQUFLNTZDLEVBQUU0OUIsT0FBTyxNQUFrQixHQUFHLFFBQWYzOUIsRUFBRUEsRUFBRWsrQixTQUF5QixZQUFKd29CLEdBQUUxbUQsR0FBUzBtRCxHQUFFMW1ELEVBQUVELFFBQVEsT0FBT0MsR0FBRyxJQUFJMGpELEtBQUlBLEdBQUUsR0FBRyxTQUFTeUYsR0FBR3BwRCxHQUFHLElBQUlDLEVBQUU2MkMsS0FBOEIsT0FBekJFLEdBQUcsR0FBRzhTLEdBQUc5MUQsS0FBSyxLQUFLZ00sRUFBRUMsSUFBVyxLQUN0VCxTQUFTNnBELEdBQUc5cEQsRUFBRUMsR0FBRyxHQUFHMm9ELFdBQVcsT0FBT3JCLElBQUksR0FBRyxJQUFPLEdBQUZiLElBQU0sTUFBTTVtRCxNQUFNbEQsRUFBRSxNQUFNLElBQUkvSixFQUFFbU4sRUFBRWtwRCxhQUFhLEdBQUcsT0FBT3IyRCxFQUFFLE9BQU8sS0FBMkMsR0FBdENtTixFQUFFa3BELGFBQWEsS0FBS2xwRCxFQUFFbXBELGNBQWMsRUFBS3QyRCxJQUFJbU4sRUFBRS9HLFFBQVEsTUFBTTZHLE1BQU1sRCxFQUFFLE1BQU1vRCxFQUFFdW9ELGFBQWEsS0FBSyxJQUFJejFELEVBQUVELEVBQUVtbEQsTUFBTW5sRCxFQUFFZ2xELFdBQVdqK0MsRUFBRTlHLEVBQUVvNkIsRUFBRWx0QixFQUFFbWlDLGNBQWN2b0MsRUFBRW9HLEVBQUVtaUMsYUFBYXZvQyxFQUFFb0csRUFBRXFpQyxlQUFlLEVBQUVyaUMsRUFBRXNpQyxZQUFZLEVBQUV0aUMsRUFBRW9pQyxjQUFjeG9DLEVBQUVvRyxFQUFFOCtDLGtCQUFrQmxsRCxFQUFFb0csRUFBRXdpQyxnQkFBZ0I1b0MsRUFBRUEsRUFBRW9HLEVBQUV5aUMsY0FBYyxJQUFJLElBQUl4VixFQUFFanRCLEVBQUUraUMsV0FBVy9WLEVBQUVodEIsRUFBRXdvRCxnQkFBZ0IsRUFBRXQ3QixHQUFHLENBQUMsSUFBSXpwQixFQUFFLEdBQUc4K0IsR0FBR3JWLEdBQUd6NkIsRUFBRSxHQUFHZ1IsRUFBRTdKLEVBQUU2SixHQUFHLEVBQUV3cEIsRUFBRXhwQixJQUFJLEVBQUV1cEIsRUFBRXZwQixJQUFJLEVBQUV5cEIsSUFBSXo2QixFQUNuVixHQURxVixPQUNqZmsxRCxJQUFJLElBQU8sR0FBRjcwRCxJQUFPNjBELEdBQUc3VixJQUFJOXhDLElBQUkybkQsR0FBR2pvQixPQUFPMS9CLEdBQUdBLElBQUlnL0MsS0FBSTJILEdBQUUzSCxHQUFFLEtBQUs4RSxHQUFFLEdBQUcsRUFBRWp4RCxFQUFFK3FDLE1BQU0sT0FBTy9xQyxFQUFFK25ELFlBQVkvbkQsRUFBRStuRCxXQUFXQyxXQUFXaG9ELEVBQUVDLEVBQUVELEVBQUVpb0QsYUFBYWhvRCxFQUFFRCxFQUFFQyxFQUFFRCxFQUFFaW9ELFlBQWUsT0FBT2hvRCxFQUFFLENBQXdDLEdBQXZDOEcsRUFBRThzRCxHQUFFQSxJQUFHLEdBQUdELEdBQUd4dEQsUUFBUSxLQUFLKzVDLEdBQUd4UCxHQUFhK00sR0FBVnRqQixFQUFFa2pCLE1BQWMsQ0FBQyxHQUFHLG1CQUFtQmxqQixFQUFFRCxFQUFFLENBQUN4b0IsTUFBTXlvQixFQUFFOGpCLGVBQWV0c0MsSUFBSXdvQixFQUFFK2pCLG1CQUFtQmh4QyxFQUFFLEdBQUdndEIsR0FBR0EsRUFBRUMsRUFBRTRJLGdCQUFnQjdJLEVBQUVra0IsYUFBYXI1QyxRQUFRcEYsRUFBRXU2QixFQUFFbWtCLGNBQWNua0IsRUFBRW1rQixpQkFBaUIsSUFBSTErQyxFQUFFczNELFdBQVcsQ0FBQy84QixFQUFFdjZCLEVBQUV3K0MsV0FBVy9qQixFQUFFejZCLEVBQUUyK0MsYUFBYTN0QyxFQUFFaFIsRUFBRTQrQyxVQUFVNStDLEVBQUVBLEVBQUU2K0MsWUFBWSxJQUFJdGtCLEVBQUV1SyxTQUFTOXpCLEVBQUU4ekIsU0FBUyxNQUFNb3lCLEdBQUkzOEIsRUFBRSxLQUNuZixNQUFNaHRCLEVBQUUsSUFBSS9MLEVBQUUsRUFBRTIzQixHQUFHLEVBQUV0M0IsR0FBRyxFQUFFNDNCLEVBQUUsRUFBRXZ2QixFQUFFLEVBQUU4dUIsRUFBRXdCLEVBQUVoYyxFQUFFLEtBQUtoUixFQUFFLE9BQU8sQ0FBQyxJQUFJLElBQUlxckIsRUFBS0csSUFBSXVCLEdBQUcsSUFBSUUsR0FBRyxJQUFJekIsRUFBRThMLFdBQVczTCxFQUFFMzNCLEVBQUVpNUIsR0FBR3pCLElBQUlob0IsR0FBRyxJQUFJaFIsR0FBRyxJQUFJZzVCLEVBQUU4TCxXQUFXampDLEVBQUVMLEVBQUV4QixHQUFHLElBQUlnNUIsRUFBRThMLFdBQVd0akMsR0FBR3czQixFQUFFK0wsVUFBVTVpQyxRQUFXLFFBQVEwMkIsRUFBRUcsRUFBRTJMLGFBQWtCbm1CLEVBQUV3YSxFQUFFQSxFQUFFSCxFQUFFLE9BQU8sQ0FBQyxHQUFHRyxJQUFJd0IsRUFBRSxNQUFNaHRCLEVBQThDLEdBQTVDZ1IsSUFBSStiLEtBQUtkLElBQUlnQixJQUFJdEIsRUFBRTMzQixHQUFHZ2QsSUFBSXhOLEtBQUs5RyxJQUFJbEssSUFBSTZCLEVBQUVMLEdBQU0sUUFBUXEzQixFQUFFRyxFQUFFeWtCLGFBQWEsTUFBVWovQixHQUFKd2EsRUFBRXhhLEdBQU00cUIsV0FBV3BRLEVBQUVILEVBQUUwQixHQUFHLElBQUlwQixJQUFJLElBQUl0M0IsRUFBRSxLQUFLLENBQUNrUSxNQUFNb25CLEVBQUVubkIsSUFBSW5RLFFBQVEwNEIsRUFBRSxLQUFLQSxFQUFFQSxHQUFHLENBQUN4b0IsTUFBTSxFQUFFQyxJQUFJLFFBQVF1b0IsRUFBRSxLQUFLaW1CLEdBQUcsQ0FBQytXLFlBQVkvOEIsRUFBRWc5QixlQUFlajlCLEdBQUd3VyxJQUFHLEVBQUd5a0IsR0FBRyxLQUFLQyxJQUFHLEVBQUdiLEdBQUV2MEQsRUFBRSxHQUFHLElBQUlvM0QsS0FBSyxNQUFNUCxHQUFJLEdBQUcsT0FDdmdCdEMsR0FBRSxNQUFNdm5ELE1BQU1sRCxFQUFFLE1BQU1vb0QsR0FBR3FDLEdBQUVzQyxHQUFJdEMsR0FBRUEsR0FBRXhNLGtCQUFpQixPQUFPd00sSUFBR1ksR0FBRyxLQUFLWixHQUFFdjBELEVBQUUsR0FBRyxJQUFJLElBQUltNkIsRUFBRWp0QixFQUFFLE9BQU9xbkQsSUFBRyxDQUFDLElBQUkzekQsRUFBRTJ6RCxHQUFFenBCLE1BQStCLEdBQXZCLEdBQUZscUMsR0FBTTJqQyxHQUFHZ3dCLEdBQUVsckIsVUFBVSxJQUFTLElBQUZ6b0MsRUFBTSxDQUFDLElBQUkwM0IsRUFBRWk4QixHQUFFM3BCLFVBQVUsR0FBRyxPQUFPdFMsRUFBRSxDQUFDLElBQUlHLEVBQUVILEVBQUU5dUIsSUFBSSxPQUFPaXZCLElBQUksbUJBQW9CQSxFQUFFQSxFQUFFLE1BQU1BLEVBQUV0eUIsUUFBUSxPQUFPLE9BQVMsS0FBRnZGLEdBQVEsS0FBSyxFQUFFbXlELEdBQUd3QixJQUFHQSxHQUFFenBCLFFBQVEsRUFBRSxNQUFNLEtBQUssRUFBRWlvQixHQUFHd0IsSUFBR0EsR0FBRXpwQixRQUFRLEVBQUVzb0IsR0FBR21CLEdBQUUzcEIsVUFBVTJwQixJQUFHLE1BQU0sS0FBSyxLQUFLQSxHQUFFenBCLFFBQVEsS0FBSyxNQUFNLEtBQUssS0FBS3lwQixHQUFFenBCLFFBQVEsS0FBS3NvQixHQUFHbUIsR0FBRTNwQixVQUFVMnBCLElBQUcsTUFBTSxLQUFLLEVBQUVuQixHQUFHbUIsR0FBRTNwQixVQUFVMnBCLElBQUcsTUFBTSxLQUFLLEVBQU0zQixHQUFHejRCLEVBQVBELEVBQUVxNkIsSUFBVSxJQUFJdDZCLEVBQUVDLEVBQUUwUSxVQUFVaW9CLEdBQUczNEIsR0FBRyxPQUNuZkQsR0FBRzQ0QixHQUFHNTRCLEdBQUdzNkIsR0FBRUEsR0FBRXhNLFlBQVksTUFBTThPLEdBQUksR0FBRyxPQUFPdEMsR0FBRSxNQUFNdm5ELE1BQU1sRCxFQUFFLE1BQU1vb0QsR0FBR3FDLEdBQUVzQyxHQUFJdEMsR0FBRUEsR0FBRXhNLGtCQUFpQixPQUFPd00sSUFBa0QsR0FBL0M5N0IsRUFBRTBuQixHQUFHN25CLEVBQUUra0IsS0FBS3o4QyxFQUFFNjNCLEVBQUV5K0IsWUFBWS84QixFQUFFMUIsRUFBRTArQixlQUFrQjcrQixJQUFJMTNCLEdBQUdBLEdBQUdBLEVBQUVtaUMsZUFyS3FELFNBQVNzMEIsRUFBR25xRCxFQUFFQyxHQUFHLFNBQU9ELElBQUdDLEtBQUVELElBQUlDLEtBQUtELEdBQUcsSUFBSUEsRUFBRXUzQixZQUFZdDNCLEdBQUcsSUFBSUEsRUFBRXMzQixTQUFTNHlCLEVBQUducUQsRUFBRUMsRUFBRTQ3QixZQUFZLGFBQWE3N0IsRUFBRUEsRUFBRTZYLFNBQVM1WCxLQUFHRCxFQUFFb3FELDRCQUF3RCxHQUE3QnBxRCxFQUFFb3FELHdCQUF3Qm5xRCxNQXFLMU5rcUQsQ0FBR3oyRCxFQUFFbWlDLGNBQWNpbUIsZ0JBQWdCcG9ELEdBQUcsQ0FBQyxPQUFPdTVCLEdBQUdzakIsR0FBRzc4QyxLQUFLMDNCLEVBQUU2QixFQUFFem9CLFdBQWMsS0FBUittQixFQUFFMEIsRUFBRXhvQixPQUFpQjhtQixFQUFFSCxHQUFHLG1CQUFtQjEzQixHQUFHQSxFQUFFcTlDLGVBQWUzbEIsRUFBRTEzQixFQUFFczlDLGFBQWF2cUMsS0FBS0gsSUFBSWlsQixFQUFFNzNCLEVBQUVELE1BQU1tQixVQUFVMjJCLEdBQUdILEVBQUUxM0IsRUFBRW1pQyxlQUFlLzlCLFdBQVdzekIsRUFBRThsQixhQUFhcjVDLFFBQVNzNUMsZUFBZTVsQixFQUFFQSxFQUFFNGxCLGVBQWVua0IsRUFBRXQ1QixFQUFFK2lDLFlBQVk3aEMsT0FBT200QixFQUFFdG1CLEtBQUtILElBQUkybUIsRUFBRXpvQixNQUFNd29CLEdBQUdDLE9BQUUsSUFDcGZBLEVBQUV4b0IsSUFBSXNvQixFQUFFdG1CLEtBQUtILElBQUkybUIsRUFBRXhvQixJQUFJdW9CLElBQUl6QixFQUFFOCtCLFFBQVF0OUIsRUFBRUUsSUFBSUQsRUFBRUMsRUFBRUEsRUFBRUYsRUFBRUEsRUFBRUMsR0FBR0EsRUFBRWdqQixHQUFHdDhDLEVBQUVxNUIsR0FBR0csRUFBRThpQixHQUFHdDhDLEVBQUV1NUIsR0FBR0QsR0FBR0UsSUFBSSxJQUFJM0IsRUFBRXcrQixZQUFZeCtCLEVBQUUwbEIsYUFBYWprQixFQUFFaWpCLE1BQU0xa0IsRUFBRTZsQixlQUFlcGtCLEVBQUV2VixRQUFROFQsRUFBRThsQixZQUFZbmtCLEVBQUUraUIsTUFBTTFrQixFQUFFK2xCLGNBQWNwa0IsRUFBRXpWLFdBQVUyVCxFQUFFQSxFQUFFay9CLGVBQWdCQyxTQUFTdjlCLEVBQUVpakIsS0FBS2pqQixFQUFFdlYsUUFBUThULEVBQUVpL0Isa0JBQWtCejlCLEVBQUVFLEdBQUcxQixFQUFFay9CLFNBQVNyL0IsR0FBR0csRUFBRTgrQixPQUFPbjlCLEVBQUUraUIsS0FBSy9pQixFQUFFelYsVUFBVTJULEVBQUVzL0IsT0FBT3g5QixFQUFFK2lCLEtBQUsvaUIsRUFBRXpWLFFBQVE4VCxFQUFFay9CLFNBQVNyL0IsT0FBUUEsRUFBRSxHQUFHLElBQUlHLEVBQUU3M0IsRUFBRTYzQixFQUFFQSxFQUFFc1EsWUFBWSxJQUFJdFEsRUFBRWdNLFVBQVVuTSxFQUFFbDFCLEtBQUssQ0FBQ2tiLFFBQVFtYSxFQUFFOWxCLEtBQUs4bEIsRUFBRTFRLFdBQVd3RCxJQUFJa04sRUFBRTFPLFlBQW1ELElBQXZDLG1CQUFvQm5wQixFQUFFNHhELE9BQU81eEQsRUFBRTR4RCxRQUFZNXhELEVBQ3JmLEVBQUVBLEVBQUUwM0IsRUFBRXgyQixPQUFPbEIsS0FBSTYzQixFQUFFSCxFQUFFMTNCLElBQUswZCxRQUFReUosV0FBVzBRLEVBQUU5bEIsS0FBSzhsQixFQUFFbmEsUUFBUXlMLFVBQVUwTyxFQUFFbE4sSUFBSW1sQixLQUFLd1AsR0FBR0MsR0FBR0QsR0FBRyxLQUFLaHpDLEVBQUUvRyxRQUFRcEcsRUFBRXcwRCxHQUFFdjBELEVBQUUsR0FBRyxJQUFJLElBQUlZLEVBQUVzTSxFQUFFLE9BQU9xbkQsSUFBRyxDQUFDLElBQUkxNUIsRUFBRTA1QixHQUFFenBCLE1BQWdDLEdBQXhCLEdBQUZqUSxHQUFNdzNCLEdBQUd6eEQsRUFBRTJ6RCxHQUFFM3BCLFVBQVUycEIsSUFBUSxJQUFGMTVCLEVBQU0sQ0FBQ3ZDLE9BQUUsRUFBTyxJQUFJMEMsRUFBRXU1QixHQUFFL3FELElBQUksR0FBRyxPQUFPd3hCLEVBQUUsQ0FBQyxJQUFJVCxFQUFFZzZCLEdBQUVsckIsVUFBVSxPQUFPa3JCLEdBQUVwekIsS0FBSyxLQUFLLEVBQUU3SSxFQUFFaUMsRUFBRSxNQUFNLFFBQVFqQyxFQUFFaUMsRUFBRSxtQkFBb0JTLEVBQUVBLEVBQUUxQyxHQUFHMEMsRUFBRTcwQixRQUFRbXlCLEdBQUdpOEIsR0FBRUEsR0FBRXhNLFlBQVksTUFBTThPLEdBQUksR0FBRyxPQUFPdEMsR0FBRSxNQUFNdm5ELE1BQU1sRCxFQUFFLE1BQU1vb0QsR0FBR3FDLEdBQUVzQyxHQUFJdEMsR0FBRUEsR0FBRXhNLGtCQUFpQixPQUFPd00sSUFBR0EsR0FBRSxLQUFLNVEsS0FBS2lRLEdBQUU5c0QsT0FBT29HLEVBQUUvRyxRQUFRcEcsRUFBRSxHQUFHeTBELEdBQUdBLElBQUcsRUFBR0MsR0FBR3ZuRCxFQUFFd25ELEdBQUd2bkQsT0FBTyxJQUFJb25ELEdBQUV2MEQsRUFBRSxPQUFPdTBELElBQUdwbkQsRUFDcGZvbkQsR0FBRXhNLFdBQVd3TSxHQUFFeE0sV0FBVyxLQUFhLEVBQVJ3TSxHQUFFenBCLFNBQVVqUSxFQUFFMDVCLElBQUlscEIsUUFBUSxLQUFLeFEsRUFBRXdPLFVBQVUsTUFBTWtyQixHQUFFcG5ELEVBQXFGLEdBQWxFLEtBQWpCbk4sRUFBRWtOLEVBQUVtaUMsZ0JBQXFCd2lCLEdBQUcsTUFBTSxJQUFJN3hELEVBQUVrTixJQUFJNm5ELEdBQUdELE1BQU1BLEdBQUcsRUFBRUMsR0FBRzduRCxHQUFHNG5ELEdBQUcsRUFBRS8wRCxFQUFFQSxFQUFFc3BDLFVBQWFpWixJQUFJLG1CQUFvQkEsR0FBR3VWLGtCQUFrQixJQUFJdlYsR0FBR3VWLGtCQUFrQnhWLEdBQUd0aUQsT0FBRSxFQUFPLEtBQXNCLEdBQWhCQSxFQUFFb0csUUFBUTJrQyxRQUFXLE1BQU0rckIsSUFBZSxHQUFWckIsR0FBR3RvRCxFQUFFeXRCLE1BQVE4MkIsR0FBRyxNQUFNQSxJQUFHLEVBQUd2a0QsRUFBRXdrRCxHQUFHQSxHQUFHLEtBQUt4a0QsRUFBRSxPQUFHLElBQU8sRUFBRjBtRCxLQUFpQnhQLEtBQUwsS0FDalcsU0FBU2dULEtBQUssS0FBSyxPQUFPN0MsSUFBRyxDQUFDLElBQUlybkQsRUFBRXFuRCxHQUFFM3BCLFVBQVV3cUIsSUFBSSxPQUFPRCxLQUFLLElBQWEsRUFBUlosR0FBRXpwQixPQUFTUyxHQUFHZ3BCLEdBQUVZLE1BQU1DLElBQUcsR0FBSSxLQUFLYixHQUFFcHpCLEtBQUtxeUIsR0FBR3RtRCxFQUFFcW5ELEtBQUlocEIsR0FBR2dwQixHQUFFWSxNQUFNQyxJQUFHLElBQUssSUFBSWpvRCxFQUFFb25ELEdBQUV6cEIsTUFBTSxJQUFPLElBQUYzOUIsSUFBUWdsRCxHQUFHamxELEVBQUVxbkQsSUFBRyxJQUFPLElBQUZwbkQsSUFBUXFuRCxLQUFLQSxJQUFHLEVBQUdyUSxHQUFHLElBQUcsV0FBZ0IsT0FBTDJSLEtBQVksU0FBUXZCLEdBQUVBLEdBQUV4TSxZQUFZLFNBQVMrTixLQUFLLEdBQUcsS0FBS3BCLEdBQUcsQ0FBQyxJQUFJeG5ELEVBQUUsR0FBR3duRCxHQUFHLEdBQUdBLEdBQVMsT0FBTkEsR0FBRyxHQUFVeFEsR0FBR2gzQyxFQUFFNHFELElBQUksT0FBTSxFQUFHLFNBQVN2RixHQUFHcmxELEVBQUVDLEdBQUd3bkQsR0FBR3Z4RCxLQUFLK0osRUFBRUQsR0FBR3NuRCxLQUFLQSxJQUFHLEVBQUdyUSxHQUFHLElBQUcsV0FBZ0IsT0FBTDJSLEtBQVksU0FBUSxTQUFTeEQsR0FBR3BsRCxFQUFFQyxHQUFHeW5ELEdBQUd4eEQsS0FBSytKLEVBQUVELEdBQUdzbkQsS0FBS0EsSUFBRyxFQUFHclEsR0FBRyxJQUFHLFdBQWdCLE9BQUwyUixLQUFZLFNBQ3pkLFNBQVNnQyxLQUFLLEdBQUcsT0FBT3JELEdBQUcsT0FBTSxFQUFHLElBQUl2bkQsRUFBRXVuRCxHQUFXLEdBQVJBLEdBQUcsS0FBUSxJQUFPLEdBQUZiLElBQU0sTUFBTTVtRCxNQUFNbEQsRUFBRSxNQUFNLElBQUlxRCxFQUFFeW1ELEdBQUVBLElBQUcsR0FBRyxJQUFJN3pELEVBQUU2MEQsR0FBR0EsR0FBRyxHQUFHLElBQUksSUFBSTUwRCxFQUFFLEVBQUVBLEVBQUVELEVBQUUrQixPQUFPOUIsR0FBRyxFQUFFLENBQUMsSUFBSThHLEVBQUUvRyxFQUFFQyxHQUFHbzZCLEVBQUVyNkIsRUFBRUMsRUFBRSxHQUFHbTZCLEVBQUVyekIsRUFBRTJsRCxRQUF5QixHQUFqQjNsRCxFQUFFMmxELGFBQVEsRUFBVSxtQkFBb0J0eUIsRUFBRSxJQUFJQSxJQUFJLE1BQU14cEIsR0FBRyxHQUFHLE9BQU95cEIsRUFBRSxNQUFNcHRCLE1BQU1sRCxFQUFFLE1BQU1vb0QsR0FBRzkzQixFQUFFenBCLElBQWUsSUFBWDVRLEVBQUU0MEQsR0FBR0EsR0FBRyxHQUFPMzBELEVBQUUsRUFBRUEsRUFBRUQsRUFBRStCLE9BQU85QixHQUFHLEVBQUUsQ0FBQzhHLEVBQUUvRyxFQUFFQyxHQUFHbzZCLEVBQUVyNkIsRUFBRUMsRUFBRSxHQUFHLElBQUksSUFBSWs2QixFQUFFcHpCLEVBQUU5RixPQUFPOEYsRUFBRTJsRCxRQUFRdnlCLElBQUksTUFBTXZwQixHQUFHLEdBQUcsT0FBT3lwQixFQUFFLE1BQU1wdEIsTUFBTWxELEVBQUUsTUFBTW9vRCxHQUFHOTNCLEVBQUV6cEIsSUFBSSxJQUFJdXBCLEVBQUVodEIsRUFBRS9HLFFBQVE2aEQsWUFBWSxPQUFPOXRCLEdBQUdodEIsRUFBRWd0QixFQUFFNnRCLFdBQVc3dEIsRUFBRTZ0QixXQUFXLEtBQWEsRUFBUjd0QixFQUFFNFEsUUFBVTVRLEVBQUVtUixRQUNqZixLQUFLblIsRUFBRW1QLFVBQVUsTUFBTW5QLEVBQUVodEIsRUFBVyxPQUFUMG1ELEdBQUV6bUQsRUFBRWkzQyxNQUFXLEVBQUcsU0FBUzJULEdBQUc3cUQsRUFBRUMsRUFBRXBOLEdBQXlCcW1ELEdBQUdsNUMsRUFBZkMsRUFBRXFrRCxHQUFHdGtELEVBQWZDLEVBQUVpa0QsR0FBR3J4RCxFQUFFb04sR0FBWSxJQUFXQSxFQUFFMDVDLEtBQWUsUUFBVjM1QyxFQUFFb29ELEdBQUdwb0QsRUFBRSxNQUFjOGlDLEdBQUc5aUMsRUFBRSxFQUFFQyxHQUFHcW9ELEdBQUd0b0QsRUFBRUMsSUFDekksU0FBUytrRCxHQUFHaGxELEVBQUVDLEdBQUcsR0FBRyxJQUFJRCxFQUFFaTBCLElBQUk0MkIsR0FBRzdxRCxFQUFFQSxFQUFFQyxRQUFRLElBQUksSUFBSXBOLEVBQUVtTixFQUFFMjlCLE9BQU8sT0FBTzlxQyxHQUFHLENBQUMsR0FBRyxJQUFJQSxFQUFFb2hDLElBQUksQ0FBQzQyQixHQUFHaDRELEVBQUVtTixFQUFFQyxHQUFHLE1BQVcsR0FBRyxJQUFJcE4sRUFBRW9oQyxJQUFJLENBQUMsSUFBSW5oQyxFQUFFRCxFQUFFc3BDLFVBQVUsR0FBRyxtQkFBb0J0cEMsRUFBRWdILEtBQUs2UiwwQkFBMEIsbUJBQW9CNVksRUFBRTR4RCxvQkFBb0IsT0FBT0MsS0FBS0EsR0FBRzdTLElBQUloL0MsSUFBSSxDQUFXLElBQUk4RyxFQUFFNnFELEdBQUc1eEQsRUFBbkJtTixFQUFFa2tELEdBQUdqa0QsRUFBRUQsR0FBZ0IsR0FBNEIsR0FBekJrNUMsR0FBR3JtRCxFQUFFK0csR0FBR0EsRUFBRSsvQyxLQUFrQixRQUFiOW1ELEVBQUV1MUQsR0FBR3YxRCxFQUFFLElBQWVpd0MsR0FBR2p3QyxFQUFFLEVBQUUrRyxHQUFHMHVELEdBQUd6MUQsRUFBRStHLFFBQVEsR0FBRyxtQkFBb0I5RyxFQUFFNHhELG9CQUFvQixPQUFPQyxLQUFLQSxHQUFHN1MsSUFBSWgvQyxJQUFJLElBQUlBLEVBQUU0eEQsa0JBQWtCemtELEVBQUVELEdBQUcsTUFBTWt0QixJQUFJLE9BQU9yNkIsRUFBRUEsRUFBRThxQyxRQUNwZCxTQUFTOHJCLEdBQUd6cEQsRUFBRUMsRUFBRXBOLEdBQUcsSUFBSUMsRUFBRWtOLEVBQUV3cEQsVUFBVSxPQUFPMTJELEdBQUdBLEVBQUU0c0MsT0FBT3ovQixHQUFHQSxFQUFFMDVDLEtBQUszNUMsRUFBRXNpQyxhQUFhdGlDLEVBQUVxaUMsZUFBZXh2QyxFQUFFbXNELEtBQUloL0MsSUFBSThqRCxHQUFFanhELEtBQUtBLElBQUksSUFBSTh3RCxJQUFHLElBQUlBLEtBQU0sU0FBRkcsTUFBY0EsSUFBRyxJQUFJcjJCLEtBQUkwNEIsR0FBRzJDLEdBQUc5b0QsRUFBRSxHQUFHZ25ELElBQUluMEQsR0FBR3kxRCxHQUFHdG9ELEVBQUVDLEdBQUcsU0FBU29tRCxHQUFHcm1ELEVBQUVDLEdBQUcsSUFBSXBOLEVBQUVtTixFQUFFbThCLFVBQVUsT0FBT3RwQyxHQUFHQSxFQUFFNnNDLE9BQU96L0IsR0FBTyxLQUFKQSxFQUFFLEtBQW1CLElBQU8sR0FBaEJBLEVBQUVELEVBQUVyTSxPQUFlc00sRUFBRSxFQUFFLElBQU8sRUFBRkEsR0FBS0EsRUFBRSxLQUFLNjJDLEtBQUssRUFBRSxHQUFHLElBQUlpUixLQUFLQSxHQUFHaEIsSUFBdUIsS0FBbkI5bUQsRUFBRTJpQyxHQUFHLFVBQVVtbEIsT0FBWTluRCxFQUFFLFdBQVdwTixFQUFFOG1ELEtBQWUsUUFBVjM1QyxFQUFFb29ELEdBQUdwb0QsRUFBRUMsTUFBYzZpQyxHQUFHOWlDLEVBQUVDLEVBQUVwTixHQUFHeTFELEdBQUd0b0QsRUFBRW5OLElBVWpaLFNBQVNpNEQsR0FBRzlxRCxFQUFFQyxFQUFFcE4sRUFBRUMsR0FBR2lDLEtBQUtrL0IsSUFBSWowQixFQUFFakwsS0FBS2hCLElBQUlsQixFQUFFa0MsS0FBS29wQyxRQUFRcHBDLEtBQUttcEMsTUFBTW5wQyxLQUFLNG9DLE9BQU81b0MsS0FBS29uQyxVQUFVcG5DLEtBQUs4RSxLQUFLOUUsS0FBS2ttRCxZQUFZLEtBQUtsbUQsS0FBS21QLE1BQU0sRUFBRW5QLEtBQUt1SCxJQUFJLEtBQUt2SCxLQUFLNm5ELGFBQWEzOEMsRUFBRWxMLEtBQUswRCxhQUFhMUQsS0FBSytvQyxjQUFjL29DLEtBQUt3akQsWUFBWXhqRCxLQUFLcW5ELGNBQWMsS0FBS3JuRCxLQUFLcEIsS0FBS2IsRUFBRWlDLEtBQUs2b0MsTUFBTSxFQUFFN29DLEtBQUs2bEQsV0FBVzdsRCxLQUFLK2xELFlBQVkvbEQsS0FBSzhsRCxXQUFXLEtBQUs5bEQsS0FBSzhpRCxXQUFXOWlELEtBQUtpakQsTUFBTSxFQUFFampELEtBQUsyb0MsVUFBVSxLQUFLLFNBQVNnZixHQUFHMThDLEVBQUVDLEVBQUVwTixFQUFFQyxHQUFHLE9BQU8sSUFBSWc0RCxHQUFHOXFELEVBQUVDLEVBQUVwTixFQUFFQyxHQUFHLFNBQVNvdUQsR0FBR2xoRCxHQUFpQixVQUFkQSxFQUFFQSxFQUFFNUwsYUFBdUI0TCxFQUFFdXNCLGtCQUVyZCxTQUFTd3VCLEdBQUcvNkMsRUFBRUMsR0FBRyxJQUFJcE4sRUFBRW1OLEVBQUUwOUIsVUFDdUIsT0FEYixPQUFPN3FDLElBQUdBLEVBQUU2cEQsR0FBRzE4QyxFQUFFaTBCLElBQUloMEIsRUFBRUQsRUFBRWpNLElBQUlpTSxFQUFFck0sT0FBUXNuRCxZQUFZajdDLEVBQUVpN0MsWUFBWXBvRCxFQUFFZ0gsS0FBS21HLEVBQUVuRyxLQUFLaEgsRUFBRXNwQyxVQUFVbjhCLEVBQUVtOEIsVUFBVXRwQyxFQUFFNnFDLFVBQVUxOUIsRUFBRUEsRUFBRTA5QixVQUFVN3FDLElBQUlBLEVBQUUrcEQsYUFBYTM4QyxFQUFFcE4sRUFBRWdILEtBQUttRyxFQUFFbkcsS0FBS2hILEVBQUUrcUMsTUFBTSxFQUFFL3FDLEVBQUVnb0QsV0FBVyxLQUFLaG9ELEVBQUVpb0QsWUFBWSxLQUFLam9ELEVBQUUrbkQsV0FBVyxNQUFNL25ELEVBQUVnbEQsV0FBVzczQyxFQUFFNjNDLFdBQVdobEQsRUFBRW1sRCxNQUFNaDRDLEVBQUVnNEMsTUFBTW5sRCxFQUFFcXJDLE1BQU1sK0IsRUFBRWsrQixNQUFNcnJDLEVBQUV1cEQsY0FBY3A4QyxFQUFFbzhDLGNBQWN2cEQsRUFBRWlyQyxjQUFjOTlCLEVBQUU4OUIsY0FBY2pyQyxFQUFFMGxELFlBQVl2NEMsRUFBRXU0QyxZQUFZdDRDLEVBQUVELEVBQUV2SCxhQUFhNUYsRUFBRTRGLGFBQWEsT0FBT3dILEVBQUUsS0FBSyxDQUFDKzNDLE1BQU0vM0MsRUFBRSszQyxNQUFNRCxhQUFhOTNDLEVBQUU4M0MsY0FDM2VsbEQsRUFBRXNyQyxRQUFRbitCLEVBQUVtK0IsUUFBUXRyQyxFQUFFcVIsTUFBTWxFLEVBQUVrRSxNQUFNclIsRUFBRXlKLElBQUkwRCxFQUFFMUQsSUFBV3pKLEVBQ3ZELFNBQVNxb0QsR0FBR2w3QyxFQUFFQyxFQUFFcE4sRUFBRUMsRUFBRThHLEVBQUVzekIsR0FBRyxJQUFJRCxFQUFFLEVBQU0sR0FBSm42QixFQUFFa04sRUFBSyxtQkFBb0JBLEVBQUVraEQsR0FBR2xoRCxLQUFLaXRCLEVBQUUsUUFBUSxHQUFHLGlCQUFrQmp0QixFQUFFaXRCLEVBQUUsT0FBT2p0QixFQUFFLE9BQU9BLEdBQUcsS0FBS3V5QixFQUFHLE9BQU84b0IsR0FBR3hvRCxFQUFFdUUsU0FBU3dDLEVBQUVzekIsRUFBRWp0QixHQUFHLEtBQUtrekIsRUFBR2xHLEVBQUUsRUFBRXJ6QixHQUFHLEdBQUcsTUFBTSxLQUFLNDRCLEVBQUd2RixFQUFFLEVBQUVyekIsR0FBRyxFQUFFLE1BQU0sS0FBSzY0QixFQUFHLE9BQU96eUIsRUFBRTA4QyxHQUFHLEdBQUc3cEQsRUFBRW9OLEVBQUksRUFBRnJHLElBQU9xaEQsWUFBWXhvQixFQUFHenlCLEVBQUVuRyxLQUFLNDRCLEVBQUd6eUIsRUFBRWc0QyxNQUFNOXFCLEVBQUVsdEIsRUFBRSxLQUFLNnlCLEVBQUcsT0FBTzd5QixFQUFFMDhDLEdBQUcsR0FBRzdwRCxFQUFFb04sRUFBRXJHLElBQUtDLEtBQUtnNUIsRUFBRzd5QixFQUFFaTdDLFlBQVlwb0IsRUFBRzd5QixFQUFFZzRDLE1BQU05cUIsRUFBRWx0QixFQUFFLEtBQUs4eUIsRUFBRyxPQUFPOXlCLEVBQUUwOEMsR0FBRyxHQUFHN3BELEVBQUVvTixFQUFFckcsSUFBS3FoRCxZQUFZbm9CLEVBQUc5eUIsRUFBRWc0QyxNQUFNOXFCLEVBQUVsdEIsRUFBRSxLQUFLb3pCLEVBQUcsT0FBT3F2QixHQUFHNXZELEVBQUUrRyxFQUFFc3pCLEVBQUVqdEIsR0FBRyxLQUFLb3pCLEVBQUcsT0FBT3J6QixFQUFFMDhDLEdBQUcsR0FBRzdwRCxFQUFFb04sRUFBRXJHLElBQUtxaEQsWUFBWTVuQixFQUFHcnpCLEVBQUVnNEMsTUFBTTlxQixFQUFFbHRCLEVBQUUsUUFBUSxHQUFHLGlCQUNoZkEsR0FBRyxPQUFPQSxFQUFFLE9BQU9BLEVBQUVtdEIsVUFBVSxLQUFLdUYsRUFBR3pGLEVBQUUsR0FBRyxNQUFNanRCLEVBQUUsS0FBSzJ5QixFQUFHMUYsRUFBRSxFQUFFLE1BQU1qdEIsRUFBRSxLQUFLNHlCLEVBQUczRixFQUFFLEdBQUcsTUFBTWp0QixFQUFFLEtBQUsreUIsRUFBRzlGLEVBQUUsR0FBRyxNQUFNanRCLEVBQUUsS0FBS2d6QixFQUFHL0YsRUFBRSxHQUFHbjZCLEVBQUUsS0FBSyxNQUFNa04sRUFBRSxLQUFLaXpCLEVBQUdoRyxFQUFFLEdBQUcsTUFBTWp0QixFQUFFLE1BQU1GLE1BQU1sRCxFQUFFLElBQUksTUFBTW9ELEVBQUVBLFNBQVNBLEVBQUUsS0FBdUQsT0FBakRDLEVBQUV5OEMsR0FBR3p2QixFQUFFcDZCLEVBQUVvTixFQUFFckcsSUFBS3FoRCxZQUFZajdDLEVBQUVDLEVBQUVwRyxLQUFLL0csRUFBRW1OLEVBQUUrM0MsTUFBTTlxQixFQUFTanRCLEVBQUUsU0FBU283QyxHQUFHcjdDLEVBQUVDLEVBQUVwTixFQUFFQyxHQUEyQixPQUF4QmtOLEVBQUUwOEMsR0FBRyxFQUFFMThDLEVBQUVsTixFQUFFbU4sSUFBSyszQyxNQUFNbmxELEVBQVNtTixFQUFFLFNBQVN5aUQsR0FBR3ppRCxFQUFFQyxFQUFFcE4sRUFBRUMsR0FBNkMsT0FBMUNrTixFQUFFMDhDLEdBQUcsR0FBRzE4QyxFQUFFbE4sRUFBRW1OLElBQUtnN0MsWUFBWTduQixFQUFHcHpCLEVBQUVnNEMsTUFBTW5sRCxFQUFTbU4sRUFBRSxTQUFTZzdDLEdBQUdoN0MsRUFBRUMsRUFBRXBOLEdBQThCLE9BQTNCbU4sRUFBRTA4QyxHQUFHLEVBQUUxOEMsRUFBRSxLQUFLQyxJQUFLKzNDLE1BQU1ubEQsRUFBU21OLEVBQ2xjLFNBQVNvN0MsR0FBR3A3QyxFQUFFQyxFQUFFcE4sR0FBOEosT0FBM0pvTixFQUFFeThDLEdBQUcsRUFBRSxPQUFPMThDLEVBQUU1SSxTQUFTNEksRUFBRTVJLFNBQVMsR0FBRzRJLEVBQUVqTSxJQUFJa00sSUFBSyszQyxNQUFNbmxELEVBQUVvTixFQUFFazhCLFVBQVUsQ0FBQ2dFLGNBQWNuZ0MsRUFBRW1nQyxjQUFjNHFCLGdCQUFnQixLQUFLNVAsZUFBZW43QyxFQUFFbTdDLGdCQUF1Qmw3QyxFQUNyTCxTQUFTK3FELEdBQUdockQsRUFBRUMsRUFBRXBOLEdBQUdrQyxLQUFLay9CLElBQUloMEIsRUFBRWxMLEtBQUtvckMsY0FBY25nQyxFQUFFakwsS0FBS20wRCxhQUFhbjBELEtBQUt5MEQsVUFBVXowRCxLQUFLa0UsUUFBUWxFLEtBQUtnMkQsZ0JBQWdCLEtBQUtoMkQsS0FBS3MwRCxlQUFlLEVBQUV0MEQsS0FBSytzRCxlQUFlL3NELEtBQUtvQyxRQUFRLEtBQUtwQyxLQUFLbXJDLFFBQVFydEMsRUFBRWtDLEtBQUt3ekQsYUFBYSxLQUFLeHpELEtBQUswekQsaUJBQWlCLEVBQUUxekQsS0FBS2d1QyxXQUFXRixHQUFHLEdBQUc5dEMsS0FBS3l6RCxnQkFBZ0IzbEIsSUFBSSxHQUFHOXRDLEtBQUt5dEMsZUFBZXp0QyxLQUFLbzBELGNBQWNwMEQsS0FBSytwRCxpQkFBaUIvcEQsS0FBS3F0QyxhQUFhcnRDLEtBQUt1dEMsWUFBWXZ0QyxLQUFLc3RDLGVBQWV0dEMsS0FBS290QyxhQUFhLEVBQUVwdEMsS0FBSzB0QyxjQUFjSSxHQUFHLEdBQUc5dEMsS0FBS2syRCxnQ0FBZ0MsS0FDN2UsU0FBU0MsR0FBR2xyRCxFQUFFQyxFQUFFcE4sR0FBRyxJQUFJQyxFQUFFLEVBQUU2QixVQUFVQyxhQUFRLElBQVNELFVBQVUsR0FBR0EsVUFBVSxHQUFHLEtBQUssTUFBTSxDQUFDdzRCLFNBQVNtRixFQUFHditCLElBQUksTUFBTWpCLEVBQUUsS0FBSyxHQUFHQSxFQUFFc0UsU0FBUzRJLEVBQUVtZ0MsY0FBY2xnQyxFQUFFazdDLGVBQWV0b0QsR0FDeEssU0FBU3M0RCxHQUFHbnJELEVBQUVDLEVBQUVwTixFQUFFQyxHQUFHLElBQUk4RyxFQUFFcUcsRUFBRWhILFFBQVFpMEIsRUFBRXlzQixLQUFLMXNCLEVBQUUyc0IsR0FBR2hnRCxHQUFHb0csRUFBRSxHQUFHbk4sRUFBRSxDQUFxQm9OLEVBQUUsQ0FBQyxHQUFHdzlCLEdBQTFCNXFDLEVBQUVBLEVBQUU2bUQsbUJBQThCN21ELEdBQUcsSUFBSUEsRUFBRW9oQyxJQUFJLE1BQU1uMEIsTUFBTWxELEVBQUUsTUFBTSxJQUFJb3dCLEVBQUVuNkIsRUFBRSxFQUFFLENBQUMsT0FBT202QixFQUFFaUgsS0FBSyxLQUFLLEVBQUVqSCxFQUFFQSxFQUFFbVAsVUFBVWhsQyxRQUFRLE1BQU04SSxFQUFFLEtBQUssRUFBRSxHQUFHMDBDLEdBQUczbkIsRUFBRW56QixNQUFNLENBQUNtekIsRUFBRUEsRUFBRW1QLFVBQVU4WSwwQ0FBMEMsTUFBTWgxQyxHQUFHK3NCLEVBQUVBLEVBQUUyUSxhQUFhLE9BQU8zUSxHQUFHLE1BQU1sdEIsTUFBTWxELEVBQUUsTUFBTyxHQUFHLElBQUkvSixFQUFFb2hDLElBQUksQ0FBQyxJQUFJeHdCLEVBQUU1USxFQUFFZ0gsS0FBSyxHQUFHODZDLEdBQUdseEMsR0FBRyxDQUFDNVEsRUFBRWlpRCxHQUFHamlELEVBQUU0USxFQUFFdXBCLEdBQUcsTUFBTWh0QixHQUFHbk4sRUFBRW02QixPQUFPbjZCLEVBQUV5aEQsR0FDclcsT0FEd1csT0FBT3IwQyxFQUFFOUksUUFBUThJLEVBQUU5SSxRQUFRdEUsRUFBRW9OLEVBQUU2aEQsZUFBZWp2RCxHQUFFb04sRUFBRTg0QyxHQUFHN3JCLEVBQUVELElBQUs1MEIsUUFBUSxDQUFDK1ksUUFBUXBSLEdBQXVCLFFBQXBCbE4sT0FBRSxJQUFTQSxFQUFFLEtBQUtBLEtBQzFlbU4sRUFBRTFLLFNBQVN6QyxHQUFHb21ELEdBQUd0L0MsRUFBRXFHLEdBQUc0NUMsR0FBR2pnRCxFQUFFcXpCLEVBQUVDLEdBQVVELEVBQUUsU0FBU20rQixHQUFHcHJELEdBQWUsS0FBWkEsRUFBRUEsRUFBRS9HLFNBQWNpbEMsTUFBTSxPQUFPLEtBQUssT0FBT2wrQixFQUFFaytCLE1BQU1qSyxLQUFLLEtBQUssRUFBMkIsUUFBUSxPQUFPajBCLEVBQUVrK0IsTUFBTS9CLFdBQVcsU0FBU2t2QixHQUFHcnJELEVBQUVDLEdBQXFCLEdBQUcsUUFBckJELEVBQUVBLEVBQUU4OUIsZ0JBQTJCLE9BQU85OUIsRUFBRSs5QixXQUFXLENBQUMsSUFBSWxyQyxFQUFFbU4sRUFBRW1pRCxVQUFVbmlELEVBQUVtaUQsVUFBVSxJQUFJdHZELEdBQUdBLEVBQUVvTixFQUFFcE4sRUFBRW9OLEdBQUcsU0FBU3FyRCxHQUFHdHJELEVBQUVDLEdBQUdvckQsR0FBR3JyRCxFQUFFQyxJQUFJRCxFQUFFQSxFQUFFMDlCLFlBQVkydEIsR0FBR3JyRCxFQUFFQyxHQUN4VixTQUFTc3JELEdBQUd2ckQsRUFBRUMsRUFBRXBOLEdBQUcsSUFBSUMsRUFBRSxNQUFNRCxHQUFHLE1BQU1BLEVBQUUyNEQsa0JBQWtCMzRELEVBQUUyNEQsaUJBQWlCQyxnQkFBZ0IsS0FBaUssR0FBNUo1NEQsRUFBRSxJQUFJbTRELEdBQUdockQsRUFBRUMsRUFBRSxNQUFNcE4sSUFBRyxJQUFLQSxFQUFFcXRDLFNBQVNqZ0MsRUFBRXk4QyxHQUFHLEVBQUUsS0FBSyxLQUFLLElBQUl6OEMsRUFBRSxFQUFFLElBQUlBLEVBQUUsRUFBRSxHQUFHcE4sRUFBRW9HLFFBQVFnSCxFQUFFQSxFQUFFazhCLFVBQVV0cEMsRUFBRXlsRCxHQUFHcjRDLEdBQUdELEVBQUV1eUMsSUFBSTEvQyxFQUFFb0csUUFBUWc1QyxHQUFHLElBQUlqeUMsRUFBRXUzQixTQUFTdjNCLEVBQUU2N0IsV0FBVzc3QixHQUFNbE4sRUFBRSxJQUFJa04sRUFBRSxFQUFFQSxFQUFFbE4sRUFBRThCLE9BQU9vTCxJQUFJLENBQVEsSUFBSXBHLEdBQVhxRyxFQUFFbk4sRUFBRWtOLElBQVc0K0MsWUFBWWhsRCxFQUFFQSxFQUFFcUcsRUFBRTQrQyxTQUFTLE1BQU1oc0QsRUFBRW80RCxnQ0FBZ0NwNEQsRUFBRW80RCxnQ0FBZ0MsQ0FBQ2hyRCxFQUFFckcsR0FBRy9HLEVBQUVvNEQsZ0NBQWdDLzBELEtBQUsrSixFQUFFckcsR0FBRzdFLEtBQUsyMkQsY0FBYzc0RCxFQUMvUixTQUFTODRELEdBQUczckQsR0FBRyxTQUFTQSxHQUFHLElBQUlBLEVBQUV1M0IsVUFBVSxJQUFJdjNCLEVBQUV1M0IsVUFBVSxLQUFLdjNCLEVBQUV1M0IsV0FBVyxJQUFJdjNCLEVBQUV1M0IsVUFBVSxpQ0FBaUN2M0IsRUFBRXczQixZQUV2VCxTQUFTbzBCLEdBQUc1ckQsRUFBRUMsRUFBRXBOLEVBQUVDLEVBQUU4RyxHQUFHLElBQUlzekIsRUFBRXI2QixFQUFFbXpELG9CQUFvQixHQUFHOTRCLEVBQUUsQ0FBQyxJQUFJRCxFQUFFQyxFQUFFdytCLGNBQWMsR0FBRyxtQkFBb0I5eEQsRUFBRSxDQUFDLElBQUlvekIsRUFBRXB6QixFQUFFQSxFQUFFLFdBQVcsSUFBSW9HLEVBQUVvckQsR0FBR24rQixHQUFHRCxFQUFFcjZCLEtBQUtxTixJQUFJbXJELEdBQUdsckQsRUFBRWd0QixFQUFFanRCLEVBQUVwRyxPQUFPLENBQW1ELEdBQWxEc3pCLEVBQUVyNkIsRUFBRW16RCxvQkFEMUssU0FBWWhtRCxFQUFFQyxHQUEwSCxHQUF2SEEsSUFBMkRBLE1BQXZEQSxFQUFFRCxFQUFFLElBQUlBLEVBQUV1M0IsU0FBU3YzQixFQUFFODdDLGdCQUFnQjk3QyxFQUFFbzNCLFdBQVcsT0FBYSxJQUFJbjNCLEVBQUVzM0IsV0FBV3QzQixFQUFFNHJELGFBQWEscUJBQXdCNXJELEVBQUUsSUFBSSxJQUFJcE4sRUFBRUEsRUFBRW1OLEVBQUVzM0IsV0FBV3QzQixFQUFFOGEsWUFBWWpvQixHQUFHLE9BQU8sSUFBSTA0RCxHQUFHdnJELEVBQUUsRUFBRUMsRUFBRSxDQUFDaWdDLFNBQVEsUUFBSSxHQUMzQjRyQixDQUFHajVELEVBQUVDLEdBQUdtNkIsRUFBRUMsRUFBRXcrQixjQUFpQixtQkFBb0I5eEQsRUFBRSxDQUFDLElBQUk2SixFQUFFN0osRUFBRUEsRUFBRSxXQUFXLElBQUlvRyxFQUFFb3JELEdBQUduK0IsR0FBR3hwQixFQUFFOVEsS0FBS3FOLElBQUl1cEQsSUFBRyxXQUFXNEIsR0FBR2xyRCxFQUFFZ3RCLEVBQUVqdEIsRUFBRXBHLE1BQUssT0FBT3d4RCxHQUFHbitCLEdBR2xHLFNBQVM4K0IsR0FBRy9yRCxFQUFFQyxHQUFHLElBQUlwTixFQUFFLEVBQUU4QixVQUFVQyxhQUFRLElBQVNELFVBQVUsR0FBR0EsVUFBVSxHQUFHLEtBQUssSUFBSWczRCxHQUFHMXJELEdBQUcsTUFBTUgsTUFBTWxELEVBQUUsTUFBTSxPQUFPc3VELEdBQUdsckQsRUFBRUMsRUFBRSxLQUFLcE4sR0ExQnRXdTBELEdBQUcsU0FBU3BuRCxFQUFFQyxFQUFFcE4sR0FBRyxJQUFJQyxFQUFFbU4sRUFBRSszQyxNQUFNLEdBQUcsT0FBT2g0QyxFQUFFLEdBQUdBLEVBQUVvOEMsZ0JBQWdCbjhDLEVBQUUyOEMsY0FBY3J2QixHQUFFdDBCLFFBQVFnL0MsSUFBRyxNQUFRLElBQUcsSUFBS3BsRCxFQUFFQyxHQUFvQyxDQUFPLE9BQU5tbEQsSUFBRyxFQUFVaDRDLEVBQUVnMEIsS0FBSyxLQUFLLEVBQUU0dEIsR0FBRzVoRCxHQUFHKzhDLEtBQUssTUFBTSxLQUFLLEVBQUVmLEdBQUdoOEMsR0FBRyxNQUFNLEtBQUssRUFBRTAwQyxHQUFHMTBDLEVBQUVwRyxPQUFPbTdDLEdBQUcvMEMsR0FBRyxNQUFNLEtBQUssRUFBRTQ3QyxHQUFHNTdDLEVBQUVBLEVBQUVrOEIsVUFBVWdFLGVBQWUsTUFBTSxLQUFLLEdBQUdydEMsRUFBRW1OLEVBQUVtOEMsY0FBYzNvRCxNQUFNLElBQUltRyxFQUFFcUcsRUFBRXBHLEtBQUt3MUIsU0FBU3pDLEdBQUUwcUIsR0FBRzE5QyxFQUFFczFCLGVBQWV0MUIsRUFBRXMxQixjQUFjcDhCLEVBQUUsTUFBTSxLQUFLLEdBQUcsR0FBRyxPQUFPbU4sRUFBRTY5QixjQUFlLE9BQUcsSUFBS2pyQyxFQUFFb04sRUFBRWkrQixNQUFNMlosWUFBbUJ1SyxHQUFHcGlELEVBQUVDLEVBQUVwTixJQUFHKzVCLEdBQUVpQixHQUFZLEVBQVZBLEdBQUU1MEIsU0FBOEIsUUFBbkJnSCxFQUFFK2dELEdBQUdoaEQsRUFBRUMsRUFBRXBOLElBQy9lb04sRUFBRWsrQixRQUFRLE1BQUt2UixHQUFFaUIsR0FBWSxFQUFWQSxHQUFFNTBCLFNBQVcsTUFBTSxLQUFLLEdBQTBCLEdBQXZCbkcsRUFBRSxJQUFLRCxFQUFFb04sRUFBRTQzQyxZQUFlLElBQWEsR0FBUjczQyxFQUFFNDlCLE9BQVUsQ0FBQyxHQUFHOXFDLEVBQUUsT0FBT3F3RCxHQUFHbmpELEVBQUVDLEVBQUVwTixHQUFHb04sRUFBRTI5QixPQUFPLEdBQStGLEdBQTFFLFFBQWxCaGtDLEVBQUVxRyxFQUFFNjlCLGlCQUF5QmxrQyxFQUFFbXBELFVBQVUsS0FBS25wRCxFQUFFcXBELEtBQUssS0FBS3JwRCxFQUFFZ2hELFdBQVcsTUFBTWh1QixHQUFFaUIsR0FBRUEsR0FBRTUwQixTQUFZbkcsRUFBRSxNQUFXLE9BQU8sS0FBSyxLQUFLLEdBQUcsS0FBSyxHQUFHLE9BQU9tTixFQUFFKzNDLE1BQU0sRUFBRXFKLEdBQUdyaEQsRUFBRUMsRUFBRXBOLEdBQUcsT0FBT211RCxHQUFHaGhELEVBQUVDLEVBQUVwTixHQUQzTG9sRCxHQUFHLElBQWEsTUFBUmo0QyxFQUFFNDlCLFlBQ3lMcWEsSUFBRyxFQUFhLE9BQVZoNEMsRUFBRSszQyxNQUFNLEVBQVMvM0MsRUFBRWcwQixLQUFLLEtBQUssRUFBK0ksR0FBN0luaEMsRUFBRW1OLEVBQUVwRyxLQUFLLE9BQU9tRyxJQUFJQSxFQUFFMDlCLFVBQVUsS0FBS3o5QixFQUFFeTlCLFVBQVUsS0FBS3o5QixFQUFFMjlCLE9BQU8sR0FBRzU5QixFQUFFQyxFQUFFMjhDLGFBQWFoakQsRUFBRTQ2QyxHQUFHdjBDLEVBQUVxdEIsR0FBRXIwQixTQUFTNitDLEdBQUc3M0MsRUFBRXBOLEdBQUcrRyxFQUFFK2pELEdBQUcsS0FBSzE5QyxFQUFFbk4sRUFBRWtOLEVBQUVwRyxFQUFFL0csR0FBR29OLEVBQUUyOUIsT0FBTyxFQUFLLGlCQUNyZWhrQyxHQUFHLE9BQU9BLEdBQUcsbUJBQW9CQSxFQUFFNlMsYUFBUSxJQUFTN1MsRUFBRXV6QixTQUFTLENBQWlELEdBQWhEbHRCLEVBQUVnMEIsSUFBSSxFQUFFaDBCLEVBQUU2OUIsY0FBYyxLQUFLNzlCLEVBQUVzNEMsWUFBWSxLQUFRNUQsR0FBRzdoRCxHQUFHLENBQUMsSUFBSW82QixHQUFFLEVBQUc4bkIsR0FBRy8wQyxRQUFRaXRCLEdBQUUsRUFBR2p0QixFQUFFNjlCLGNBQWMsT0FBT2xrQyxFQUFFMUIsWUFBTyxJQUFTMEIsRUFBRTFCLE1BQU0wQixFQUFFMUIsTUFBTSxLQUFLb2dELEdBQUdyNEMsR0FBRyxJQUFJZ3RCLEVBQUVuNkIsRUFBRTZZLHlCQUF5QixtQkFBb0JzaEIsR0FBR3VzQixHQUFHdjVDLEVBQUVuTixFQUFFbTZCLEVBQUVqdEIsR0FBR3BHLEVBQUV3eUIsUUFBUXF0QixHQUFHeDVDLEVBQUVrOEIsVUFBVXZpQyxFQUFFQSxFQUFFOC9DLGdCQUFnQno1QyxFQUFFazZDLEdBQUdsNkMsRUFBRW5OLEVBQUVrTixFQUFFbk4sR0FBR29OLEVBQUUyaEQsR0FBRyxLQUFLM2hELEVBQUVuTixHQUFFLEVBQUdvNkIsRUFBRXI2QixRQUFRb04sRUFBRWcwQixJQUFJLEVBQUU2c0IsR0FBRyxLQUFLN2dELEVBQUVyRyxFQUFFL0csR0FBR29OLEVBQUVBLEVBQUVpK0IsTUFBTSxPQUFPaitCLEVBQUUsS0FBSyxHQUFHckcsRUFBRXFHLEVBQUVnN0MsWUFBWWo3QyxFQUFFLENBQ2hYLE9BRGlYLE9BQU9BLElBQUlBLEVBQUUwOUIsVUFBVSxLQUFLejlCLEVBQUV5OUIsVUFBVSxLQUFLejlCLEVBQUUyOUIsT0FBTyxHQUNuZjU5QixFQUFFQyxFQUFFMjhDLGFBQXVCaGpELEdBQVZzekIsRUFBRXR6QixFQUFFKzFCLE9BQVUvMUIsRUFBRTgxQixVQUFVenZCLEVBQUVwRyxLQUFLRCxFQUFFc3pCLEVBQUVqdEIsRUFBRWcwQixJQU94RCxTQUFZajBCLEdBQUcsR0FBRyxtQkFBb0JBLEVBQUUsT0FBT2toRCxHQUFHbGhELEdBQUcsRUFBRSxFQUFFLEdBQUcsTUFBU0EsRUFBWSxDQUFjLElBQWJBLEVBQUVBLEVBQUVtdEIsWUFBZ0J5RixFQUFHLE9BQU8sR0FBRyxHQUFHNXlCLElBQUkreUIsRUFBRyxPQUFPLEdBQUcsT0FBTyxFQVBsRmk1QixDQUFHcHlELEdBQUdvRyxFQUFFcTNDLEdBQUd6OUMsRUFBRW9HLEdBQVVrdEIsR0FBRyxLQUFLLEVBQUVqdEIsRUFBRW1oRCxHQUFHLEtBQUtuaEQsRUFBRXJHLEVBQUVvRyxFQUFFbk4sR0FBRyxNQUFNbU4sRUFBRSxLQUFLLEVBQUVDLEVBQUV3aEQsR0FBRyxLQUFLeGhELEVBQUVyRyxFQUFFb0csRUFBRW5OLEdBQUcsTUFBTW1OLEVBQUUsS0FBSyxHQUFHQyxFQUFFOGdELEdBQUcsS0FBSzlnRCxFQUFFckcsRUFBRW9HLEVBQUVuTixHQUFHLE1BQU1tTixFQUFFLEtBQUssR0FBR0MsRUFBRWdoRCxHQUFHLEtBQUtoaEQsRUFBRXJHLEVBQUV5OUMsR0FBR3o5QyxFQUFFQyxLQUFLbUcsR0FBR2xOLEVBQUVELEdBQUcsTUFBTW1OLEVBQUUsTUFBTUYsTUFBTWxELEVBQUUsSUFBSWhELEVBQUUsS0FBTSxPQUFPcUcsRUFBRSxLQUFLLEVBQUUsT0FBT25OLEVBQUVtTixFQUFFcEcsS0FBS0QsRUFBRXFHLEVBQUUyOEMsYUFBMkN3RSxHQUFHcGhELEVBQUVDLEVBQUVuTixFQUFyQzhHLEVBQUVxRyxFQUFFZzdDLGNBQWNub0QsRUFBRThHLEVBQUV5OUMsR0FBR3ZrRCxFQUFFOEcsR0FBYy9HLEdBQUcsS0FBSyxFQUFFLE9BQU9DLEVBQUVtTixFQUFFcEcsS0FBS0QsRUFBRXFHLEVBQUUyOEMsYUFBMkM2RSxHQUFHemhELEVBQUVDLEVBQUVuTixFQUFyQzhHLEVBQUVxRyxFQUFFZzdDLGNBQWNub0QsRUFBRThHLEVBQUV5OUMsR0FBR3ZrRCxFQUFFOEcsR0FBYy9HLEdBQUcsS0FBSyxFQUF3QixHQUF0Qmd2RCxHQUFHNWhELEdBQUduTixFQUFFbU4sRUFBRXM0QyxZQUFlLE9BQU92NEMsR0FBRyxPQUFPbE4sRUFBRSxNQUFNZ04sTUFBTWxELEVBQUUsTUFDM1ksR0FBOUc5SixFQUFFbU4sRUFBRTI4QyxhQUErQmhqRCxFQUFFLFFBQXBCQSxFQUFFcUcsRUFBRTY5QixlQUF5QmxrQyxFQUFFd1gsUUFBUSxLQUFLMG5DLEdBQUc5NEMsRUFBRUMsR0FBR201QyxHQUFHbjVDLEVBQUVuTixFQUFFLEtBQUtELElBQUdDLEVBQUVtTixFQUFFNjlCLGNBQWMxc0IsV0FBZXhYLEVBQUVvakQsS0FBSy84QyxFQUFFK2dELEdBQUdoaEQsRUFBRUMsRUFBRXBOLE9BQU8sQ0FBdUYsSUFBckVxNkIsR0FBakJ0ekIsRUFBRXFHLEVBQUVrOEIsV0FBaUIrRCxXQUFRcWMsR0FBRzVJLEdBQUcxekMsRUFBRWs4QixVQUFVZ0UsY0FBYy9JLFlBQVlrbEIsR0FBR3I4QyxFQUFFaXRCLEVBQUVzdkIsSUFBRyxHQUFNdHZCLEVBQUUsQ0FBcUMsR0FBRyxPQUF2Q2x0QixFQUFFcEcsRUFBRXF4RCxpQ0FBMkMsSUFBSXJ4RCxFQUFFLEVBQUVBLEVBQUVvRyxFQUFFcEwsT0FBT2dGLEdBQUcsR0FBRXN6QixFQUFFbHRCLEVBQUVwRyxJQUFLdWpELDhCQUE4Qm45QyxFQUFFcEcsRUFBRSxHQUFHcWpELEdBQUcvbUQsS0FBS2czQixHQUFvQixJQUFqQnI2QixFQUFFMG9ELEdBQUd0N0MsRUFBRSxLQUFLbk4sRUFBRUQsR0FBT29OLEVBQUVpK0IsTUFBTXJyQyxFQUFFQSxHQUFHQSxFQUFFK3FDLE9BQWUsRUFBVC9xQyxFQUFFK3FDLE1BQVMsS0FBSy9xQyxFQUFFQSxFQUFFc3JDLGFBQWEyaUIsR0FBRzlnRCxFQUFFQyxFQUFFbk4sRUFBRUQsR0FBR21xRCxLQUFLLzhDLEVBQUVBLEVBQUVpK0IsTUFBTSxPQUFPaitCLEVBQUUsS0FBSyxFQUFFLE9BQU9nOEMsR0FBR2g4QyxHQUFHLE9BQU9ELEdBQ25mNjhDLEdBQUc1OEMsR0FBR25OLEVBQUVtTixFQUFFcEcsS0FBS0QsRUFBRXFHLEVBQUUyOEMsYUFBYTF2QixFQUFFLE9BQU9sdEIsRUFBRUEsRUFBRW84QyxjQUFjLEtBQUtudkIsRUFBRXJ6QixFQUFFeEMsU0FBU2c4QyxHQUFHdGdELEVBQUU4RyxHQUFHcXpCLEVBQUUsS0FBSyxPQUFPQyxHQUFHa21CLEdBQUd0Z0QsRUFBRW82QixLQUFLanRCLEVBQUUyOUIsT0FBTyxJQUFJNGpCLEdBQUd4aEQsRUFBRUMsR0FBRzZnRCxHQUFHOWdELEVBQUVDLEVBQUVndEIsRUFBRXA2QixHQUFHb04sRUFBRWkrQixNQUFNLEtBQUssRUFBRSxPQUFPLE9BQU9sK0IsR0FBRzY4QyxHQUFHNThDLEdBQUcsS0FBSyxLQUFLLEdBQUcsT0FBT21pRCxHQUFHcGlELEVBQUVDLEVBQUVwTixHQUFHLEtBQUssRUFBRSxPQUFPZ3BELEdBQUc1N0MsRUFBRUEsRUFBRWs4QixVQUFVZ0UsZUFBZXJ0QyxFQUFFbU4sRUFBRTI4QyxhQUFhLE9BQU81OEMsRUFBRUMsRUFBRWkrQixNQUFNb2QsR0FBR3I3QyxFQUFFLEtBQUtuTixFQUFFRCxHQUFHaXVELEdBQUc5Z0QsRUFBRUMsRUFBRW5OLEVBQUVELEdBQUdvTixFQUFFaStCLE1BQU0sS0FBSyxHQUFHLE9BQU9wckMsRUFBRW1OLEVBQUVwRyxLQUFLRCxFQUFFcUcsRUFBRTI4QyxhQUEyQ21FLEdBQUcvZ0QsRUFBRUMsRUFBRW5OLEVBQXJDOEcsRUFBRXFHLEVBQUVnN0MsY0FBY25vRCxFQUFFOEcsRUFBRXk5QyxHQUFHdmtELEVBQUU4RyxHQUFjL0csR0FBRyxLQUFLLEVBQUUsT0FBT2l1RCxHQUFHOWdELEVBQUVDLEVBQUVBLEVBQUUyOEMsYUFBYS9wRCxHQUFHb04sRUFBRWkrQixNQUFNLEtBQUssRUFDdGMsS0FBSyxHQUFHLE9BQU80aUIsR0FBRzlnRCxFQUFFQyxFQUFFQSxFQUFFMjhDLGFBQWF4bEQsU0FBU3ZFLEdBQUdvTixFQUFFaStCLE1BQU0sS0FBSyxHQUFHbCtCLEVBQUUsQ0FBQ2xOLEVBQUVtTixFQUFFcEcsS0FBS3cxQixTQUFTejFCLEVBQUVxRyxFQUFFMjhDLGFBQWEzdkIsRUFBRWh0QixFQUFFbThDLGNBQWNsdkIsRUFBRXR6QixFQUFFbkcsTUFBTSxJQUFJdTVCLEVBQUUvc0IsRUFBRXBHLEtBQUt3MUIsU0FBaUQsR0FBeEN6QyxHQUFFMHFCLEdBQUd0cUIsRUFBRWtDLGVBQWVsQyxFQUFFa0MsY0FBY2hDLEVBQUssT0FBT0QsRUFBRSxHQUFHRCxFQUFFQyxFQUFFeDVCLE1BQTBHLEtBQXBHeTVCLEVBQUUwaUIsR0FBRzVpQixFQUFFRSxHQUFHLEVBQXdGLEdBQXJGLG1CQUFvQnA2QixFQUFFbThCLHNCQUFzQm44QixFQUFFbThCLHNCQUFzQmpDLEVBQUVFLEdBQUcsY0FBcUIsR0FBR0QsRUFBRTcxQixXQUFXd0MsRUFBRXhDLFdBQVdtMkIsR0FBRXQwQixRQUFRLENBQUNnSCxFQUFFK2dELEdBQUdoaEQsRUFBRUMsRUFBRXBOLEdBQUcsTUFBTW1OLFFBQVEsSUFBYyxRQUFWZ3RCLEVBQUUvc0IsRUFBRWkrQixTQUFpQmxSLEVBQUUyUSxPQUFPMTlCLEdBQUcsT0FBTytzQixHQUFHLENBQUMsSUFBSXZwQixFQUFFdXBCLEVBQUV2MEIsYUFBYSxHQUFHLE9BQU9nTCxFQUFFLENBQUN3cEIsRUFBRUQsRUFBRWtSLE1BQU0sSUFBSSxJQUFJenJDLEVBQ3RmZ1IsRUFBRXMwQyxhQUFhLE9BQU90bEQsR0FBRyxDQUFDLEdBQUdBLEVBQUUwRSxVQUFVckUsR0FBRyxJQUFLTCxFQUFFMGxELGFBQWFqckIsR0FBRyxDQUFDLElBQUlGLEVBQUVpSCxPQUFNeGhDLEVBQUVzbUQsSUFBSSxFQUFFbG1ELEdBQUdBLElBQUtvaEMsSUFBSSxFQUFFaWxCLEdBQUdsc0IsRUFBRXY2QixJQUFJdTZCLEVBQUVnckIsT0FBT25sRCxFQUFnQixRQUFkSixFQUFFdTZCLEVBQUUwUSxhQUFxQmpyQyxFQUFFdWxELE9BQU9ubEQsR0FBRytrRCxHQUFHNXFCLEVBQUUyUSxPQUFPOXFDLEdBQUc0USxFQUFFdTBDLE9BQU9ubEQsRUFBRSxNQUFNSixFQUFFQSxFQUFFdUQsV0FBV2kzQixFQUFFLEtBQUtELEVBQUVpSCxLQUFJakgsRUFBRW56QixPQUFPb0csRUFBRXBHLEtBQUssS0FBYW16QixFQUFFa1IsTUFBTSxHQUFHLE9BQU9qUixFQUFFQSxFQUFFMFEsT0FBTzNRLE9BQU8sSUFBSUMsRUFBRUQsRUFBRSxPQUFPQyxHQUFHLENBQUMsR0FBR0EsSUFBSWh0QixFQUFFLENBQUNndEIsRUFBRSxLQUFLLE1BQWtCLEdBQUcsUUFBZkQsRUFBRUMsRUFBRWtSLFNBQW9CLENBQUNuUixFQUFFMlEsT0FBTzFRLEVBQUUwUSxPQUFPMVEsRUFBRUQsRUFBRSxNQUFNQyxFQUFFQSxFQUFFMFEsT0FBTzNRLEVBQUVDLEVBQUU2ekIsR0FBRzlnRCxFQUFFQyxFQUFFckcsRUFBRXhDLFNBQVN2RSxHQUFHb04sRUFBRUEsRUFBRWkrQixNQUFNLE9BQU9qK0IsRUFBRSxLQUFLLEVBQUUsT0FBT3JHLEVBQUVxRyxFQUFFcEcsS0FBc0IvRyxHQUFqQm82QixFQUFFanRCLEVBQUUyOEMsY0FBaUJ4bEQsU0FBUzBnRCxHQUFHNzNDLEVBQUVwTixHQUNuZEMsRUFBRUEsRUFEb2Q4RyxFQUFFcytDLEdBQUd0K0MsRUFDcGZzekIsRUFBRSsrQix3QkFBOEJoc0QsRUFBRTI5QixPQUFPLEVBQUVrakIsR0FBRzlnRCxFQUFFQyxFQUFFbk4sRUFBRUQsR0FBR29OLEVBQUVpK0IsTUFBTSxLQUFLLEdBQUcsT0FBZ0JoUixFQUFFbXFCLEdBQVh6OUMsRUFBRXFHLEVBQUVwRyxLQUFZb0csRUFBRTI4QyxjQUE2QnFFLEdBQUdqaEQsRUFBRUMsRUFBRXJHLEVBQXRCc3pCLEVBQUVtcUIsR0FBR3o5QyxFQUFFQyxLQUFLcXpCLEdBQWNwNkIsRUFBRUQsR0FBRyxLQUFLLEdBQUcsT0FBT3N1RCxHQUFHbmhELEVBQUVDLEVBQUVBLEVBQUVwRyxLQUFLb0csRUFBRTI4QyxhQUFhOXBELEVBQUVELEdBQUcsS0FBSyxHQUFHLE9BQU9DLEVBQUVtTixFQUFFcEcsS0FBS0QsRUFBRXFHLEVBQUUyOEMsYUFBYWhqRCxFQUFFcUcsRUFBRWc3QyxjQUFjbm9ELEVBQUU4RyxFQUFFeTlDLEdBQUd2a0QsRUFBRThHLEdBQUcsT0FBT29HLElBQUlBLEVBQUUwOUIsVUFBVSxLQUFLejlCLEVBQUV5OUIsVUFBVSxLQUFLejlCLEVBQUUyOUIsT0FBTyxHQUFHMzlCLEVBQUVnMEIsSUFBSSxFQUFFMGdCLEdBQUc3aEQsSUFBSWtOLEdBQUUsRUFBR2cxQyxHQUFHLzBDLElBQUlELEdBQUUsRUFBRzgzQyxHQUFHNzNDLEVBQUVwTixHQUFHa25ELEdBQUc5NUMsRUFBRW5OLEVBQUU4RyxHQUFHdWdELEdBQUdsNkMsRUFBRW5OLEVBQUU4RyxFQUFFL0csR0FBRyt1RCxHQUFHLEtBQUszaEQsRUFBRW5OLEdBQUUsRUFBR2tOLEVBQUVuTixHQUFHLEtBQUssR0FBRyxPQUFPc3dELEdBQUduakQsRUFBRUMsRUFBRXBOLEdBQUcsS0FBSyxHQUFvQixLQUFLLEdBQUcsT0FBT3d1RCxHQUFHcmhELEVBQUVDLEVBQUVwTixHQUFHLE1BQU1pTixNQUFNbEQsRUFBRSxJQUFJcUQsRUFBRWcwQixPQWEvZXMzQixHQUFHbjNELFVBQVVxWSxPQUFPLFNBQVN6TSxHQUFHbXJELEdBQUduckQsRUFBRWpMLEtBQUsyMkQsY0FBYyxLQUFLLE9BQU9ILEdBQUduM0QsVUFBVTgzRCxRQUFRLFdBQVcsSUFBSWxzRCxFQUFFakwsS0FBSzIyRCxjQUFjenJELEVBQUVELEVBQUVtZ0MsY0FBY2dyQixHQUFHLEtBQUtuckQsRUFBRSxNQUFLLFdBQVdDLEVBQUVzeUMsSUFBSSxTQUV3SmpVLEdBQUcsU0FBU3QrQixHQUFNLEtBQUtBLEVBQUVpMEIsTUFBZ0I0bEIsR0FBRzc1QyxFQUFFLEVBQVYyNUMsTUFBZTJSLEdBQUd0ckQsRUFBRSxLQUFLdStCLEdBQUcsU0FBU3YrQixHQUFNLEtBQUtBLEVBQUVpMEIsTUFBZ0I0bEIsR0FBRzc1QyxFQUFFLFNBQVYyNUMsTUFBc0IyUixHQUFHdHJELEVBQUUsWUFDbmN3K0IsR0FBRyxTQUFTeCtCLEdBQUcsR0FBRyxLQUFLQSxFQUFFaTBCLElBQUksQ0FBQyxJQUFJaDBCLEVBQUUwNUMsS0FBSzltRCxFQUFFK21ELEdBQUc1NUMsR0FBRzY1QyxHQUFHNzVDLEVBQUVuTixFQUFFb04sR0FBR3FyRCxHQUFHdHJELEVBQUVuTixLQUFLNHJDLEdBQUcsU0FBU3orQixFQUFFQyxHQUFHLE9BQU9BLEtBQzdGNjdCLEdBQUcsU0FBUzk3QixFQUFFQyxFQUFFcE4sR0FBRyxPQUFPb04sR0FBRyxJQUFLLFFBQXlCLEdBQWpCeTFCLEdBQUcxMUIsRUFBRW5OLEdBQUdvTixFQUFFcE4sRUFBRUUsS0FBUSxVQUFVRixFQUFFZ0gsTUFBTSxNQUFNb0csRUFBRSxDQUFDLElBQUlwTixFQUFFbU4sRUFBRW5OLEVBQUVncEMsWUFBWWhwQyxFQUFFQSxFQUFFZ3BDLFdBQXNGLElBQTNFaHBDLEVBQUVBLEVBQUVzNUQsaUJBQWlCLGNBQWN6N0MsS0FBS0MsVUFBVSxHQUFHMVEsR0FBRyxtQkFBdUJBLEVBQUUsRUFBRUEsRUFBRXBOLEVBQUUrQixPQUFPcUwsSUFBSSxDQUFDLElBQUluTixFQUFFRCxFQUFFb04sR0FBRyxHQUFHbk4sSUFBSWtOLEdBQUdsTixFQUFFczVELE9BQU9wc0QsRUFBRW9zRCxLQUFLLENBQUMsSUFBSXh5RCxFQUFFd2lDLEdBQUd0cEMsR0FBRyxJQUFJOEcsRUFBRSxNQUFNa0csTUFBTWxELEVBQUUsS0FBS2k0QixFQUFHL2hDLEdBQUc0aUMsR0FBRzVpQyxFQUFFOEcsS0FBSyxNQUFNLElBQUssV0FBVzI4QixHQUFHdjJCLEVBQUVuTixHQUFHLE1BQU0sSUFBSyxTQUFtQixPQUFWb04sRUFBRXBOLEVBQUVZLFFBQWV1aUMsR0FBR2gyQixJQUFJbk4sRUFBRTB3RCxTQUFTdGpELEdBQUUsS0FBTXM4QixHQUFHK3NCLEdBQzlaOXNCLEdBQUcsU0FBU3g4QixFQUFFQyxFQUFFcE4sRUFBRUMsRUFBRThHLEdBQUcsSUFBSXN6QixFQUFFdzVCLEdBQUVBLElBQUcsRUFBRSxJQUFJLE9BQU8xUCxHQUFHLEdBQUdoM0MsRUFBRWhNLEtBQUssS0FBS2lNLEVBQUVwTixFQUFFQyxFQUFFOEcsSUFBSSxRQUFZLEtBQUo4c0QsR0FBRXg1QixLQUFVaTZCLEtBQUtqUSxRQUFRemEsR0FBRyxXQUFXLElBQU8sR0FBRmlxQixNQWhEL0gsV0FBYyxHQUFHLE9BQU9pQixHQUFHLENBQUMsSUFBSTNuRCxFQUFFMm5ELEdBQUdBLEdBQUcsS0FBSzNuRCxFQUFFZ0osU0FBUSxTQUFTaEosR0FBR0EsRUFBRW9pQyxjQUFjLEdBQUdwaUMsRUFBRW1pQyxhQUFhbW1CLEdBQUd0b0QsRUFBRXl0QixTQUFPeXBCLEtBZ0RzQm1WLEdBQUt6RCxPQUFPbHNCLEdBQUcsU0FBUzE4QixFQUFFQyxHQUFHLElBQUlwTixFQUFFNnpELEdBQUVBLElBQUcsRUFBRSxJQUFJLE9BQU8xbUQsRUFBRUMsR0FBRyxRQUFZLEtBQUp5bUQsR0FBRTd6RCxLQUFVczBELEtBQUtqUSxRQUErSSxJQUFJb1YsR0FBRyxDQUFDQyxPQUFPLENBQUNyd0IsR0FBRzJTLEdBQUd6UyxHQUFHQyxHQUFHQyxHQUFHc3NCLEdBQUcsQ0FBQzN2RCxTQUFRLEtBQU11ekQsR0FBRyxDQUFDQyx3QkFBd0Izc0IsR0FBRzRzQixXQUFXLEVBQUV4OEIsUUFBUSxTQUFTeThCLG9CQUFvQixhQUN2ZUMsR0FBRyxDQUFDRixXQUFXRixHQUFHRSxXQUFXeDhCLFFBQVFzOEIsR0FBR3Q4QixRQUFReThCLG9CQUFvQkgsR0FBR0csb0JBQW9CRSxlQUFlTCxHQUFHSyxlQUFlQyxrQkFBa0IsS0FBS0MsNEJBQTRCLEtBQUtDLDRCQUE0QixLQUFLQyxjQUFjLEtBQUtDLHdCQUF3QixLQUFLQyx3QkFBd0IsS0FBS0MsbUJBQW1CLEtBQUtDLGVBQWUsS0FBS0MscUJBQXFCbDdCLEVBQUcvRCx1QkFBdUJrL0Isd0JBQXdCLFNBQVN2dEQsR0FBVyxPQUFPLFFBQWZBLEVBQUVpK0IsR0FBR2orQixJQUFtQixLQUFLQSxFQUFFbThCLFdBQVdzd0Isd0JBQXdCRCxHQUFHQyx5QkFSL0ksV0FBYyxPQUFPLE1BUzdXZSw0QkFBNEIsS0FBS0MsZ0JBQWdCLEtBQUtDLGFBQWEsS0FBS0Msa0JBQWtCLEtBQUtDLGdCQUFnQixNQUFNLEdBQUcsb0JBQXFCL3BELCtCQUErQixDQUFDLElBQUlncUQsR0FBR2hxRCwrQkFBK0IsSUFBSWdxRCxHQUFHQyxZQUFZRCxHQUFHRSxjQUFjLElBQUk1WSxHQUFHMFksR0FBR0csT0FBT3BCLElBQUl4WCxHQUFHeVksR0FBRyxNQUFNN3RELEtBQUsxTixFQUFReThCLG1EQUFtRHU5QixHQUFHaDZELEVBQVEyN0QsYUFBYWxDLEdBQ25YejVELEVBQVE0N0QsWUFBWSxTQUFTbHVELEdBQUcsR0FBRyxNQUFNQSxFQUFFLE9BQU8sS0FBSyxHQUFHLElBQUlBLEVBQUV1M0IsU0FBUyxPQUFPdjNCLEVBQUUsSUFBSUMsRUFBRUQsRUFBRTA1QyxnQkFBZ0IsUUFBRyxJQUFTejVDLEVBQUUsQ0FBQyxHQUFHLG1CQUFvQkQsRUFBRXlNLE9BQU8sTUFBTTNNLE1BQU1sRCxFQUFFLE1BQU0sTUFBTWtELE1BQU1sRCxFQUFFLElBQUkxSixPQUFPaUMsS0FBSzZLLEtBQTBDLE9BQTVCQSxFQUFFLFFBQVZBLEVBQUVpK0IsR0FBR2grQixJQUFjLEtBQUtELEVBQUVtOEIsV0FBb0I3cEMsRUFBUTY3RCxVQUFVLFNBQVNudUQsRUFBRUMsR0FBRyxJQUFJcE4sRUFBRTZ6RCxHQUFFLEdBQUcsSUFBTyxHQUFGN3pELEdBQU0sT0FBT21OLEVBQUVDLEdBQUd5bUQsSUFBRyxFQUFFLElBQUksR0FBRzFtRCxFQUFFLE9BQU9nM0MsR0FBRyxHQUFHaDNDLEVBQUVoTSxLQUFLLEtBQUtpTSxJQUFJLFFBQVF5bUQsR0FBRTd6RCxFQUFFcWtELE9BQU81a0QsRUFBUTR0QyxRQUFRLFNBQVNsZ0MsRUFBRUMsRUFBRXBOLEdBQUcsSUFBSTg0RCxHQUFHMXJELEdBQUcsTUFBTUgsTUFBTWxELEVBQUUsTUFBTSxPQUFPZ3ZELEdBQUcsS0FBSzVyRCxFQUFFQyxHQUFFLEVBQUdwTixJQUNuZFAsRUFBUW1hLE9BQU8sU0FBU3pNLEVBQUVDLEVBQUVwTixHQUFHLElBQUk4NEQsR0FBRzFyRCxHQUFHLE1BQU1ILE1BQU1sRCxFQUFFLE1BQU0sT0FBT2d2RCxHQUFHLEtBQUs1ckQsRUFBRUMsR0FBRSxFQUFHcE4sSUFBSVAsRUFBUTg3RCx1QkFBdUIsU0FBU3B1RCxHQUFHLElBQUkyckQsR0FBRzNyRCxHQUFHLE1BQU1GLE1BQU1sRCxFQUFFLEtBQUssUUFBT29ELEVBQUVnbUQsc0JBQXFCdUQsSUFBRyxXQUFXcUMsR0FBRyxLQUFLLEtBQUs1ckQsR0FBRSxHQUFHLFdBQVdBLEVBQUVnbUQsb0JBQW9CLEtBQUtobUQsRUFBRXV5QyxJQUFJLFlBQVMsSUFBUWpnRCxFQUFRKzdELHdCQUF3Qi9FLEdBQUdoM0QsRUFBUWc4RCxzQkFBc0IsU0FBU3R1RCxFQUFFQyxHQUFHLE9BQU84ckQsR0FBRy9yRCxFQUFFQyxFQUFFLEVBQUV0TCxVQUFVQyxhQUFRLElBQVNELFVBQVUsR0FBR0EsVUFBVSxHQUFHLE9BQzlhckMsRUFBUWk4RCxvQ0FBb0MsU0FBU3Z1RCxFQUFFQyxFQUFFcE4sRUFBRUMsR0FBRyxJQUFJNjRELEdBQUc5NEQsR0FBRyxNQUFNaU4sTUFBTWxELEVBQUUsTUFBTSxHQUFHLE1BQU1vRCxRQUFHLElBQVNBLEVBQUUwNUMsZ0JBQWdCLE1BQU01NUMsTUFBTWxELEVBQUUsS0FBSyxPQUFPZ3ZELEdBQUc1ckQsRUFBRUMsRUFBRXBOLEdBQUUsRUFBR0MsSUFBSVIsRUFBUTQ5QixRQUFRLFUsNkJDclMzTDM5QixFQUFPRCxRQUFVLEVBQVEsSzs7Ozs7Ozs7R0NLZCxJQUFJNDZCLEVBQUVELEVBQUVELEVBQUV2cEIsRUFBRSxHQUFHLGlCQUFrQjhWLGFBQWEsbUJBQW9CQSxZQUFZRCxJQUFJLENBQUMsSUFBSTdtQixFQUFFOG1CLFlBQVlqbkIsRUFBUTB2QyxhQUFhLFdBQVcsT0FBT3Z2QyxFQUFFNm1CLFdBQVcsQ0FBQyxJQUFJaGxCLEVBQUVrbEIsS0FBSzRSLEVBQUU5MkIsRUFBRWdsQixNQUFNaG5CLEVBQVEwdkMsYUFBYSxXQUFXLE9BQU8xdEMsRUFBRWdsQixNQUFNOFIsR0FDM08sR0FBRyxvQkFBcUJ2ekIsUUFBUSxtQkFBb0IyMkQsZUFBZSxDQUFDLElBQUk5NkQsRUFBRSxLQUFLNDNCLEVBQUUsS0FBS0csRUFBRSxXQUFXLEdBQUcsT0FBTy8zQixFQUFFLElBQUksSUFBSXNNLEVBQUUxTixFQUFRMHZDLGVBQWV0dUMsR0FBRSxFQUFHc00sR0FBR3RNLEVBQUUsS0FBSyxNQUFNdU0sR0FBRyxNQUFNc3pDLFdBQVc5bkIsRUFBRSxHQUFHeHJCLElBQUtpdEIsRUFBRSxTQUFTbHRCLEdBQUcsT0FBT3RNLEVBQUU2L0MsV0FBV3JtQixFQUFFLEVBQUVsdEIsSUFBSXRNLEVBQUVzTSxFQUFFdXpDLFdBQVc5bkIsRUFBRSxLQUFLd0IsRUFBRSxTQUFTanRCLEVBQUVDLEdBQUdxckIsRUFBRWlvQixXQUFXdnpDLEVBQUVDLElBQUkrc0IsRUFBRSxXQUFXeW1CLGFBQWFub0IsSUFBSWg1QixFQUFRb2pELHFCQUFxQixXQUFXLE9BQU0sR0FBSWp5QyxFQUFFblIsRUFBUW04RCx3QkFBd0IsaUJBQWlCLENBQUMsSUFBSTl4RCxFQUFFOUUsT0FBTzA3QyxXQUFXMzJDLEVBQUUvRSxPQUFPNDdDLGFBQWEsR0FBRyxvQkFBcUIzdkMsUUFBUSxDQUFDLElBQUltTixFQUM3ZnBaLE9BQU84aEIscUJBQXFCLG1CQUFvQjloQixPQUFPaWlCLHVCQUF1QmhXLFFBQVFwSyxNQUFNLHNKQUFzSixtQkFBb0J1WCxHQUFHbk4sUUFBUXBLLE1BQU0scUpBQXFKLElBQUlreUIsR0FBRSxFQUFHSyxFQUFFLEtBQUtDLEdBQUcsRUFBRUcsRUFBRSxFQUFFQyxFQUFFLEVBQUVoNkIsRUFBUW9qRCxxQkFBcUIsV0FBVyxPQUFPcGpELEVBQVEwdkMsZ0JBQ2hnQjFWLEdBQUc3b0IsRUFBRSxhQUFhblIsRUFBUW04RCx3QkFBd0IsU0FBU3p1RCxHQUFHLEVBQUVBLEdBQUcsSUFBSUEsRUFBRThELFFBQVFwSyxNQUFNLG1IQUFtSDJ5QixFQUFFLEVBQUVyc0IsRUFBRXlHLEtBQUttZixNQUFNLElBQUk1bEIsR0FBRyxHQUFHLElBQUl3c0IsRUFBRSxJQUFJZ2lDLGVBQWU5aEMsRUFBRUYsRUFBRWtpQyxNQUFNbGlDLEVBQUVtaUMsTUFBTUMsVUFBVSxXQUFXLEdBQUcsT0FBTzNpQyxFQUFFLENBQUMsSUFBSWpzQixFQUFFMU4sRUFBUTB2QyxlQUFlMVYsRUFBRXRzQixFQUFFcXNCLEVBQUUsSUFBSUosR0FBRSxFQUFHanNCLEdBQUcwc0IsRUFBRW5kLFlBQVksT0FBT3FjLEdBQUUsRUFBR0ssRUFBRSxNQUFNLE1BQU1oc0IsR0FBRyxNQUFNeXNCLEVBQUVuZCxZQUFZLE1BQU10UCxRQUFTMnJCLEdBQUUsR0FBSXNCLEVBQUUsU0FBU2x0QixHQUFHaXNCLEVBQUVqc0IsRUFBRTRyQixJQUFJQSxHQUFFLEVBQUdjLEVBQUVuZCxZQUFZLFFBQVEwZCxFQUFFLFNBQVNqdEIsRUFBRUMsR0FBR2lzQixFQUN0ZnZ2QixHQUFFLFdBQVdxRCxFQUFFMU4sRUFBUTB2QyxrQkFBaUIvaEMsSUFBSStzQixFQUFFLFdBQVdwd0IsRUFBRXN2QixHQUFHQSxHQUFHLEdBQUcsU0FBU1MsRUFBRTNzQixFQUFFQyxHQUFHLElBQUlwTixFQUFFbU4sRUFBRXBMLE9BQU9vTCxFQUFFOUosS0FBSytKLEdBQUdELEVBQUUsT0FBTyxDQUFDLElBQUlsTixFQUFFRCxFQUFFLElBQUksRUFBRStHLEVBQUVvRyxFQUFFbE4sR0FBRyxVQUFHLElBQVM4RyxHQUFHLEVBQUVnekIsRUFBRWh6QixFQUFFcUcsSUFBMEIsTUFBTUQsRUFBN0JBLEVBQUVsTixHQUFHbU4sRUFBRUQsRUFBRW5OLEdBQUcrRyxFQUFFL0csRUFBRUMsR0FBZ0IsU0FBU2k2QixFQUFFL3NCLEdBQVUsWUFBTyxLQUFkQSxFQUFFQSxFQUFFLElBQXFCLEtBQUtBLEVBQ2hQLFNBQVMydEIsRUFBRTN0QixHQUFHLElBQUlDLEVBQUVELEVBQUUsR0FBRyxRQUFHLElBQVNDLEVBQUUsQ0FBQyxJQUFJcE4sRUFBRW1OLEVBQUU2dUQsTUFBTSxHQUFHaDhELElBQUlvTixFQUFFLENBQUNELEVBQUUsR0FBR25OLEVBQUVtTixFQUFFLElBQUksSUFBSWxOLEVBQUUsRUFBRThHLEVBQUVvRyxFQUFFcEwsT0FBTzlCLEVBQUU4RyxHQUFHLENBQUMsSUFBSWhILEVBQUUsR0FBR0UsRUFBRSxHQUFHLEVBQUVtQixFQUFFK0wsRUFBRXBOLEdBQUcyNEIsRUFBRTM0QixFQUFFLEVBQUVVLEVBQUUwTSxFQUFFdXJCLEdBQUcsUUFBRyxJQUFTdDNCLEdBQUcsRUFBRTI0QixFQUFFMzRCLEVBQUVwQixRQUFHLElBQVNTLEdBQUcsRUFBRXM1QixFQUFFdDVCLEVBQUVXLElBQUkrTCxFQUFFbE4sR0FBR1EsRUFBRTBNLEVBQUV1ckIsR0FBRzE0QixFQUFFQyxFQUFFeTRCLElBQUl2ckIsRUFBRWxOLEdBQUdtQixFQUFFK0wsRUFBRXBOLEdBQUdDLEVBQUVDLEVBQUVGLE9BQVEsV0FBRyxJQUFTVSxHQUFHLEVBQUVzNUIsRUFBRXQ1QixFQUFFVCxJQUEwQixNQUFNbU4sRUFBN0JBLEVBQUVsTixHQUFHUSxFQUFFME0sRUFBRXVyQixHQUFHMTRCLEVBQUVDLEVBQUV5NEIsSUFBZ0IsT0FBT3RyQixFQUFFLE9BQU8sS0FBSyxTQUFTMnNCLEVBQUU1c0IsRUFBRUMsR0FBRyxJQUFJcE4sRUFBRW1OLEVBQUU4dUQsVUFBVTd1RCxFQUFFNnVELFVBQVUsT0FBTyxJQUFJajhELEVBQUVBLEVBQUVtTixFQUFFd1AsR0FBR3ZQLEVBQUV1UCxHQUFHLElBQUk2ZCxFQUFFLEdBQUdDLEVBQUUsR0FBR0MsRUFBRSxFQUFFRSxFQUFFLEtBQUtJLEVBQUUsRUFBRUMsR0FBRSxFQUFHSSxHQUFFLEVBQUdDLEdBQUUsRUFDamEsU0FBU0MsRUFBRXB1QixHQUFHLElBQUksSUFBSUMsRUFBRThzQixFQUFFTyxHQUFHLE9BQU9ydEIsR0FBRyxDQUFDLEdBQUcsT0FBT0EsRUFBRTFLLFNBQVNvNEIsRUFBRUwsT0FBUSxNQUFHcnRCLEVBQUU4dUQsV0FBVy91RCxHQUFnRCxNQUE5QzJ0QixFQUFFTCxHQUFHcnRCLEVBQUU2dUQsVUFBVTd1RCxFQUFFK3VELGVBQWVyaUMsRUFBRVUsRUFBRXB0QixHQUFjQSxFQUFFOHNCLEVBQUVPLElBQUksU0FBUzB4QixFQUFFaC9DLEdBQWEsR0FBVm11QixHQUFFLEVBQUdDLEVBQUVwdUIsSUFBT2t1QixFQUFFLEdBQUcsT0FBT25CLEVBQUVNLEdBQUdhLEdBQUUsRUFBR2hCLEVBQUV5MkIsT0FBTyxDQUFDLElBQUkxakQsRUFBRThzQixFQUFFTyxHQUFHLE9BQU9ydEIsR0FBR2d0QixFQUFFK3hCLEVBQUUvK0MsRUFBRTh1RCxVQUFVL3VELElBQ3RQLFNBQVMyakQsRUFBRTNqRCxFQUFFQyxHQUFHaXVCLEdBQUUsRUFBR0MsSUFBSUEsR0FBRSxFQUFHbkIsS0FBS2MsR0FBRSxFQUFHLElBQUlqN0IsRUFBRWc3QixFQUFFLElBQVMsSUFBTE8sRUFBRW51QixHQUFPd3RCLEVBQUVWLEVBQUVNLEdBQUcsT0FBT0ksTUFBTUEsRUFBRXVoQyxlQUFlL3VELElBQUlELElBQUkxTixFQUFRb2pELHlCQUF5QixDQUFDLElBQUk1aUQsRUFBRTI2QixFQUFFbDRCLFNBQVMsR0FBRyxtQkFBb0J6QyxFQUFFLENBQUMyNkIsRUFBRWw0QixTQUFTLEtBQUtzNEIsRUFBRUosRUFBRXdoQyxjQUFjLElBQUlyMUQsRUFBRTlHLEVBQUUyNkIsRUFBRXVoQyxnQkFBZ0IvdUQsR0FBR0EsRUFBRTNOLEVBQVEwdkMsZUFBZSxtQkFBb0Jwb0MsRUFBRTZ6QixFQUFFbDRCLFNBQVNxRSxFQUFFNnpCLElBQUlWLEVBQUVNLElBQUlNLEVBQUVOLEdBQUdlLEVBQUVudUIsUUFBUTB0QixFQUFFTixHQUFHSSxFQUFFVixFQUFFTSxHQUFHLEdBQUcsT0FBT0ksRUFBRSxJQUFJNzZCLEdBQUUsTUFBTyxDQUFDLElBQUlxQixFQUFFODRCLEVBQUVPLEdBQUcsT0FBT3I1QixHQUFHZzVCLEVBQUUreEIsRUFBRS9xRCxFQUFFODZELFVBQVU5dUQsR0FBR3JOLEdBQUUsRUFBRyxPQUFPQSxFQUFFLFFBQVE2NkIsRUFBRSxLQUFLSSxFQUFFaDdCLEVBQUVpN0IsR0FBRSxHQUFJLElBQUlnMkIsRUFBRXJnRCxFQUFFblIsRUFBUWlrRCxzQkFBc0IsRUFDdGVqa0QsRUFBUTJqRCwyQkFBMkIsRUFBRTNqRCxFQUFRK2pELHFCQUFxQixFQUFFL2pELEVBQVFxdUMsd0JBQXdCLEVBQUVydUMsRUFBUTQ4RCxtQkFBbUIsS0FBSzU4RCxFQUFRZ3hDLDhCQUE4QixFQUFFaHhDLEVBQVFrakQsd0JBQXdCLFNBQVN4MUMsR0FBR0EsRUFBRXpLLFNBQVMsTUFBTWpELEVBQVE2OEQsMkJBQTJCLFdBQVdqaEMsR0FBR0osSUFBSUksR0FBRSxFQUFHaEIsRUFBRXkyQixLQUFLcnhELEVBQVF5akQsaUNBQWlDLFdBQVcsT0FBT2xvQixHQUFHdjdCLEVBQVE4OEQsOEJBQThCLFdBQVcsT0FBT3JpQyxFQUFFTSxJQUNwYS82QixFQUFRKzhELGNBQWMsU0FBU3J2RCxHQUFHLE9BQU82dEIsR0FBRyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJNXRCLEVBQUUsRUFBRSxNQUFNLFFBQVFBLEVBQUU0dEIsRUFBRSxJQUFJaDdCLEVBQUVnN0IsRUFBRUEsRUFBRTV0QixFQUFFLElBQUksT0FBT0QsSUFBSSxRQUFRNnRCLEVBQUVoN0IsSUFBSVAsRUFBUWc5RCx3QkFBd0IsYUFBYWg5RCxFQUFRc2pELHNCQUFzQmtPLEVBQUV4eEQsRUFBUTB0Qyx5QkFBeUIsU0FBU2hnQyxFQUFFQyxHQUFHLE9BQU9ELEdBQUcsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLFFBQVFBLEVBQUUsRUFBRSxJQUFJbk4sRUFBRWc3QixFQUFFQSxFQUFFN3RCLEVBQUUsSUFBSSxPQUFPQyxJQUFJLFFBQVE0dEIsRUFBRWg3QixJQUNwV1AsRUFBUW91QywwQkFBMEIsU0FBUzFnQyxFQUFFQyxFQUFFcE4sR0FBRyxJQUFJQyxFQUFFUixFQUFRMHZDLGVBQThGLE9BQS9FLGlCQUFrQm52QyxHQUFHLE9BQU9BLEVBQWFBLEVBQUUsaUJBQVpBLEVBQUVBLEVBQUVnbkIsUUFBNkIsRUFBRWhuQixFQUFFQyxFQUFFRCxFQUFFQyxFQUFHRCxFQUFFQyxFQUFTa04sR0FBRyxLQUFLLEVBQUUsSUFBSXBHLEdBQUcsRUFBRSxNQUFNLEtBQUssRUFBRUEsRUFBRSxJQUFJLE1BQU0sS0FBSyxFQUFFQSxFQUFFLFdBQVcsTUFBTSxLQUFLLEVBQUVBLEVBQUUsSUFBSSxNQUFNLFFBQVFBLEVBQUUsSUFBMk0sT0FBak1vRyxFQUFFLENBQUN3UCxHQUFHK2QsSUFBSWg0QixTQUFTMEssRUFBRWd2RCxjQUFjanZELEVBQUUrdUQsVUFBVWw4RCxFQUFFbThELGVBQXZEcDFELEVBQUUvRyxFQUFFK0csRUFBb0VrMUQsV0FBVyxHQUFHajhELEVBQUVDLEdBQUdrTixFQUFFOHVELFVBQVVqOEQsRUFBRTg1QixFQUFFVyxFQUFFdHRCLEdBQUcsT0FBTytzQixFQUFFTSxJQUFJcnRCLElBQUkrc0IsRUFBRU8sS0FBS2EsRUFBRW5CLElBQUltQixHQUFFLEVBQUdsQixFQUFFK3hCLEVBQUVuc0QsRUFBRUMsTUFBTWtOLEVBQUU4dUQsVUFBVWwxRCxFQUFFK3lCLEVBQUVVLEVBQUVydEIsR0FBR2t1QixHQUFHSixJQUFJSSxHQUFFLEVBQUdoQixFQUFFeTJCLEtBQVkzakQsR0FDMWQxTixFQUFRaTlELHNCQUFzQixTQUFTdnZELEdBQUcsSUFBSUMsRUFBRTR0QixFQUFFLE9BQU8sV0FBVyxJQUFJaDdCLEVBQUVnN0IsRUFBRUEsRUFBRTV0QixFQUFFLElBQUksT0FBT0QsRUFBRWxMLE1BQU1DLEtBQUtKLFdBQVcsUUFBUWs1QixFQUFFaDdCLE0sY0NuQjdILElBQUlvNkIsRUFHSkEsRUFBSSxXQUNILE9BQU9sNEIsS0FESixHQUlKLElBRUNrNEIsRUFBSUEsR0FBSyxJQUFJdWlDLFNBQVMsY0FBYixHQUNSLE1BQU81MUQsR0FFYyxpQkFBWC9CLFNBQXFCbzFCLEVBQUlwMUIsUUFPckN0RixFQUFPRCxRQUFVMjZCLEcsY0NuQmpCMTZCLEVBQU9ELFFBQVUsU0FBU205RCxHQUN6QixJQUFLQSxFQUFlQyxnQkFBaUIsQ0FDcEMsSUFBSW45RCxFQUFTVyxPQUFPWSxPQUFPMjdELEdBRXRCbDlELEVBQU82RSxXQUFVN0UsRUFBTzZFLFNBQVcsSUFDeENsRSxPQUFPQyxlQUFlWixFQUFRLFNBQVUsQ0FDdkNhLFlBQVksRUFDWkMsSUFBSyxXQUNKLE9BQU9kLEVBQU9FLEtBR2hCUyxPQUFPQyxlQUFlWixFQUFRLEtBQU0sQ0FDbkNhLFlBQVksRUFDWkMsSUFBSyxXQUNKLE9BQU9kLEVBQU9DLEtBR2hCVSxPQUFPQyxlQUFlWixFQUFRLFVBQVcsQ0FDeENhLFlBQVksSUFFYmIsRUFBT205RCxnQkFBa0IsRUFFMUIsT0FBT245RCxJLGdCQ0xOQSxFQUFPRCxRQUFVLEVBQVEsR0FBUixJLDZCQ1JuQixJQUFJcTlELEVBQXVCLEVBQVEsSUFFbkMsU0FBU0MsS0FDVCxTQUFTQyxLQUNUQSxFQUF1QkMsa0JBQW9CRixFQUUzQ3I5RCxFQUFPRCxRQUFVLFdBQ2YsU0FBU3k5RCxFQUFLdjBELEVBQU93MEQsRUFBVUMsRUFBZTNrQixFQUFVNGtCLEVBQWNDLEdBQ3BFLEdBQUlBLElBQVdSLEVBQWYsQ0FJQSxJQUFJdHRELEVBQU0sSUFBSXZDLE1BQ1osbUxBS0YsTUFEQXVDLEVBQUl0UCxLQUFPLHNCQUNMc1AsR0FHUixTQUFTK3RELElBQ1AsT0FBT0wsRUFGVEEsRUFBS00sV0FBYU4sRUFNbEIsSUFBSU8sRUFBaUIsQ0FDbkJ0c0QsTUFBTytyRCxFQUNQUSxLQUFNUixFQUNOUyxLQUFNVCxFQUNOamlCLE9BQVFpaUIsRUFDUjc3RCxPQUFRNjdELEVBQ1JVLE9BQVFWLEVBQ1JXLE9BQVFYLEVBRVJZLElBQUtaLEVBQ0xhLFFBQVNSLEVBQ1RoL0MsUUFBUzIrQyxFQUNUOVUsWUFBYThVLEVBQ2JjLFdBQVlULEVBQ1puZ0IsS0FBTThmLEVBQ05lLFNBQVVWLEVBQ1ZXLE1BQU9YLEVBQ1BZLFVBQVdaLEVBQ1hhLE1BQU9iLEVBQ1BjLE1BQU9kLEVBRVBlLGVBQWdCdEIsRUFDaEJDLGtCQUFtQkYsR0FLckIsT0FGQVUsRUFBZWMsVUFBWWQsRUFFcEJBLEksNkJDbkRULzlELEVBQU9ELFFBRm9CLGdEOzs7Ozs7OztHQ0FkLElBQUkyTixFQUFFLG1CQUFvQjFNLFFBQVFBLE9BQU9pNEIsSUFBSTM0QixFQUFFb04sRUFBRTFNLE9BQU9pNEIsSUFBSSxpQkFBaUIsTUFBTTE0QixFQUFFbU4sRUFBRTFNLE9BQU9pNEIsSUFBSSxnQkFBZ0IsTUFBTTV4QixFQUFFcUcsRUFBRTFNLE9BQU9pNEIsSUFBSSxrQkFBa0IsTUFBTTBCLEVBQUVqdEIsRUFBRTFNLE9BQU9pNEIsSUFBSSxxQkFBcUIsTUFBTXlCLEVBQUVodEIsRUFBRTFNLE9BQU9pNEIsSUFBSSxrQkFBa0IsTUFBTXdCLEVBQUUvc0IsRUFBRTFNLE9BQU9pNEIsSUFBSSxrQkFBa0IsTUFBTS9uQixFQUFFeEQsRUFBRTFNLE9BQU9pNEIsSUFBSSxpQkFBaUIsTUFBTS80QixFQUFFd04sRUFBRTFNLE9BQU9pNEIsSUFBSSxvQkFBb0IsTUFBTTU0QixFQUFFcU4sRUFBRTFNLE9BQU9pNEIsSUFBSSx5QkFBeUIsTUFBTXYzQixFQUFFZ00sRUFBRTFNLE9BQU9pNEIsSUFBSSxxQkFBcUIsTUFBTWwzQixFQUFFMkwsRUFBRTFNLE9BQU9pNEIsSUFBSSxrQkFBa0IsTUFBTUosRUFBRW5yQixFQUNwZjFNLE9BQU9pNEIsSUFBSSx1QkFBdUIsTUFBTWw0QixFQUFFMk0sRUFBRTFNLE9BQU9pNEIsSUFBSSxjQUFjLE1BQU05M0IsRUFBRXVNLEVBQUUxTSxPQUFPaTRCLElBQUksY0FBYyxNQUFNRCxFQUFFdHJCLEVBQUUxTSxPQUFPaTRCLElBQUksZUFBZSxNQUFNQyxFQUFFeHJCLEVBQUUxTSxPQUFPaTRCLElBQUkscUJBQXFCLE1BQU03dUIsRUFBRXNELEVBQUUxTSxPQUFPaTRCLElBQUksbUJBQW1CLE1BQU01dUIsRUFBRXFELEVBQUUxTSxPQUFPaTRCLElBQUksZUFBZSxNQUNsUSxTQUFTdmEsRUFBRWpSLEdBQUcsR0FBRyxpQkFBa0JBLEdBQUcsT0FBT0EsRUFBRSxDQUFDLElBQUlzckIsRUFBRXRyQixFQUFFbXRCLFNBQVMsT0FBTzdCLEdBQUcsS0FBS3o0QixFQUFFLE9BQU9tTixFQUFFQSxFQUFFbkcsTUFBUSxLQUFLcEgsRUFBRSxLQUFLRyxFQUFFLEtBQUtnSCxFQUFFLEtBQUtxekIsRUFBRSxLQUFLQyxFQUFFLEtBQUs1NEIsRUFBRSxPQUFPMEwsRUFBRSxRQUFRLE9BQU9BLEVBQUVBLEdBQUdBLEVBQUVtdEIsVUFBWSxLQUFLMXBCLEVBQUUsS0FBS3hQLEVBQUUsS0FBS1AsRUFBRSxLQUFLSixFQUFFLEtBQUswNUIsRUFBRSxPQUFPaHRCLEVBQUUsUUFBUSxPQUFPc3JCLEdBQUcsS0FBS3g0QixFQUFFLE9BQU93NEIsSUFBSSxTQUFTTSxFQUFFNXJCLEdBQUcsT0FBT2lSLEVBQUVqUixLQUFLcE4sRUFBRU4sRUFBUSsrRCxVQUFVNStELEVBQUVILEVBQVFnL0QsZUFBZTErRCxFQUFFTixFQUFRaS9ELGdCQUFnQjl0RCxFQUFFblIsRUFBUWsvRCxnQkFBZ0J4a0MsRUFBRTE2QixFQUFRbS9ELFFBQVE1K0QsRUFBRVAsRUFBUWthLFdBQVd2WSxFQUFFM0IsRUFBUTI0QixTQUFTcnhCLEVBQUV0SCxFQUFRby9ELEtBQUtoK0QsRUFBRXBCLEVBQVFvYSxLQUFLcFosRUFBRWhCLEVBQVFxL0QsT0FBTzcrRCxFQUNoZlIsRUFBUTY0QixTQUFTOEIsRUFBRTM2QixFQUFRNDRCLFdBQVdnQyxFQUFFNTZCLEVBQVErNEIsU0FBUy8yQixFQUFFaEMsRUFBUXMvRCxZQUFZLFNBQVM1eEQsR0FBRyxPQUFPNHJCLEVBQUU1ckIsSUFBSWlSLEVBQUVqUixLQUFLdk4sR0FBR0gsRUFBUXUvRCxpQkFBaUJqbUMsRUFBRXQ1QixFQUFRdy9ELGtCQUFrQixTQUFTOXhELEdBQUcsT0FBT2lSLEVBQUVqUixLQUFLeUQsR0FBR25SLEVBQVF5L0Qsa0JBQWtCLFNBQVMveEQsR0FBRyxPQUFPaVIsRUFBRWpSLEtBQUtndEIsR0FBRzE2QixFQUFRMC9ELFVBQVUsU0FBU2h5RCxHQUFHLE1BQU0saUJBQWtCQSxHQUFHLE9BQU9BLEdBQUdBLEVBQUVtdEIsV0FBV3Q2QixHQUFHUCxFQUFRMi9ELGFBQWEsU0FBU2p5RCxHQUFHLE9BQU9pUixFQUFFalIsS0FBSy9MLEdBQUczQixFQUFRNC9ELFdBQVcsU0FBU2x5RCxHQUFHLE9BQU9pUixFQUFFalIsS0FBS3BHLEdBQUd0SCxFQUFRNi9ELE9BQU8sU0FBU255RCxHQUFHLE9BQU9pUixFQUFFalIsS0FBS3RNLEdBQ3pkcEIsRUFBUWlhLE9BQU8sU0FBU3ZNLEdBQUcsT0FBT2lSLEVBQUVqUixLQUFLMU0sR0FBR2hCLEVBQVE4L0QsU0FBUyxTQUFTcHlELEdBQUcsT0FBT2lSLEVBQUVqUixLQUFLbE4sR0FBR1IsRUFBUSsvRCxXQUFXLFNBQVNyeUQsR0FBRyxPQUFPaVIsRUFBRWpSLEtBQUtpdEIsR0FBRzM2QixFQUFRZ2dFLGFBQWEsU0FBU3R5RCxHQUFHLE9BQU9pUixFQUFFalIsS0FBS2t0QixHQUFHNTZCLEVBQVFpZ0UsV0FBVyxTQUFTdnlELEdBQUcsT0FBT2lSLEVBQUVqUixLQUFLMUwsR0FDek9oQyxFQUFRa2dFLG1CQUFtQixTQUFTeHlELEdBQUcsTUFBTSxpQkFBa0JBLEdBQUcsbUJBQW9CQSxHQUFHQSxJQUFJcEcsR0FBR29HLElBQUlwTixHQUFHb04sSUFBSWl0QixHQUFHanRCLElBQUlrdEIsR0FBR2x0QixJQUFJMUwsR0FBRzBMLElBQUlvckIsR0FBRyxpQkFBa0JwckIsR0FBRyxPQUFPQSxJQUFJQSxFQUFFbXRCLFdBQVd6NUIsR0FBR3NNLEVBQUVtdEIsV0FBVzc1QixHQUFHME0sRUFBRW10QixXQUFXSCxHQUFHaHRCLEVBQUVtdEIsV0FBVzFwQixHQUFHekQsRUFBRW10QixXQUFXbDVCLEdBQUcrTCxFQUFFbXRCLFdBQVcxQixHQUFHenJCLEVBQUVtdEIsV0FBV3h3QixHQUFHcUQsRUFBRW10QixXQUFXdndCLEdBQUdvRCxFQUFFbXRCLFdBQVc1QixJQUFJajVCLEVBQVFtZ0UsT0FBT3hoRCxHLHNxQkNkblUsWUFJTXloRCxFQUFZLE9BQ2IsRUFBQWprRCxxQkFBbUIsQ0FDdEJra0QsUUFBUyxJQUdFLEVBQUFyckQsUUFBVSxTQUFDcFAsRUFBbUNDLEcsVUFDekQsWUFEc0IsSUFBQUQsTUFBQSxHQUNkQyxFQUFPMEIsTUFDYixJQUFLLHVCQUNILE9BQU8sRUFBUCxLQUNLM0IsR0FBSyxDQUNSaVcsZUFBZ0JoVyxFQUFPRSxRQUFRdTZELE9BR25DLElBQUsseUJBQ0gsT0FBTyxFQUFQLEtBQ0sxNkQsR0FBSyxDQUNSa1csaUJBQWtCalcsRUFBT0UsUUFBUXU2RCxPQUdyQyxJQUFLLGNBQ0gsSUFBTSxFQUFvQno2RCxFQUFPRSxRQUF6QixFQUFJLE9BQUt3NkQsRUFBSSxJQUFmLFVBQ04sT0FBTyxFQUFQLEtBQ0szNkQsR0FBSyxDQUNSbVcsY0FBZSxFQUFGLEtBQU9uVyxFQUFNbVcsZ0JBQWEsT0FBRyxHQUFPd2tELEVBQUksTUFHekQsSUFBSyx1QkFDSCxJQUFNLEVBQW9CMTZELEVBQU9FLFFBQXpCLEVBQUksT0FBS3c2RCxFQUFJLElBQWYsVUFDTixPQUFPLEVBQVAsS0FDSzM2RCxHQUFLLENBQ1JvVyxzQkFBdUIsRUFBRixLQUFPcFcsRUFBTW9XLHdCQUFxQixPQUFHLEdBQU91a0QsRUFBSSxNQUd6RSxJQUFLLGNBQ0gsSUFBTSxFQUFvQjE2RCxFQUFPRSxRQUF6QixFQUFJLE9BQUt3NkQsRUFBSSxJQUFmLFVBQ04sT0FBTyxFQUFQLEtBQ0szNkQsR0FBSyxDQUNScVcsY0FBZSxFQUFGLEtBQU9yVyxFQUFNcVcsZ0JBQWEsT0FBRyxHQUFPc2tELEVBQUksTUFHekQsSUFBSyxzQkFDSCxPQUFPLEVBQVAsR0FDSzM2RCxHQUdQLElBQUssaUJBQ0gsT0FBTyxFQUFQLEtBQ0tBLEdBQUssQ0FDUnk2RCxRQUFTeDZELEVBQU9FLFFBQVE1RSxRQUc1QixRQUNFLE9BQU95RSxLLDJhQ3hEYixjQUNBLE9BQ0EsUUFFQSxRQUNBLFFBT0EsUUFDQSxRQUVBLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsUUFDQSxRQUVBLFFBbUJhLEVBQUE2eUIsT0FBUyxFQUFBK25DLFNBZEUsU0FBQzU2RCxHQUN2QixNQUFPLENBQ0w2NkQscUJBQXNCNzZELEVBQU1pVyxlQUM1QjZrRCx1QkFBd0I5NkQsRUFBTWtXLHFCQUlQLFNBQUNyUyxHQUMxQixNQUFPLENBQ0xrM0QscUJBQXNCLFNBQUNyaEQsR0FDckIsT0FBQTdWLEVBQVMsQ0FBRWxDLEtBQU0sc0JBQXVCeEIsUUFBUyxDQUFFdVosU0FBUSxTQUkzQyxFQUlwQixTQUFDcFcsR0FLUyxJQUFBdTNELEVBQXVFdjNELEVBQUsscUJBQXREdzNELEVBQWlEeDNELEVBQUssdUJBQTlCeTNELEVBQXlCejNELEVBQUsscUJBRTlFLEVBQWdELFVBQU11YixTQUFTLElBQTlEbThDLEVBQW1CLEtBQUVDLEVBQXNCLEtBQzVDLEVBQXNELFVBQU1wOEMsU0FBUyxJQUFwRXE4QyxFQUFzQixLQUFFQyxFQUF5QixLQUNsRCxFQUEwRCxVQUFNdDhDLFNBQVMsSUFBeEV1OEMsRUFBd0IsS0FBRUMsRUFBMkIsS0FDdEQsRUFBNEQsVUFBTXg4QyxTQUV0RSxJQUZLeThDLEVBQXlCLEtBQUVDLEVBQTRCLEtBR3hELEVBQTRDLFVBQU0xOEMsU0FFdEQsSUFGSzI4QyxFQUFpQixLQUFFQyxFQUFvQixLQUd4QyxFQUE0QyxVQUFNNThDLFNBQTZCLElBQTlFNjhDLEVBQWlCLEtBQUVDLEVBQW9CLEtBQ3hDLEVBQThCLFVBQU05OEMsU0FBUyxDQUFFc0QsTUFBTyxFQUFHQyxPQUFRLElBQWhFdzVDLEVBQVUsS0FBRUMsRUFBYSxLQUMxQkMsRUFBYSxVQUFNcC9DLE9BQXVCLE1BQzFDcS9DLEVBQVksVUFBTXIvQyxPQUEwQixNQUM1Q3MvQyxFQUFhLFVBQU10L0MsT0FBOEIsTUFDakR1L0MsRUFBcUIsVUFBTXYvQyxPQUF3QixNQUNuRHcvQyxFQUEwQixVQUFNeC9DLE9BQXNCLE1Bc0Y1RCxPQW5GQSxVQUFNMUIsV0FBVSxXQUdkLEdBRkFnaEQsRUFBV2o3RCxRQUFVZzdELEVBQVVoN0QsUUFBUW83RCxXQUFXLFVBRTdDSCxFQUFXajdELFFBQ2QsTUFBTSxJQUFJNkcsTUFBTSxrQ0FHbEJxMEQsRUFBbUJsN0QsUUFBVSxJQUFJLEVBQUFxN0QsZ0JBQWdCSixFQUFXajdELFNBRTVELEVBQUFzN0QsMkJBQTJCUCxFQUFXLzZELFNBQVMsU0FBQXU3RCxHQUM3Q1AsRUFBVWg3RCxRQUFRb2hCLE1BQVFtNkMsRUFBS242QyxNQUMvQjQ1QyxFQUFVaDdELFFBQVFxaEIsT0FBU2s2QyxFQUFLbDZDLE9BQ2hDeTVDLEVBQWMsRUFBRCxHQUFNUyxPQUdyQixFQUFBcGtELGVBQWVQLGdCQUFnQmtqRCxHQUFzQjlrQyxLQUFLb2xDLEdBQzFELEVBQUFqakQsZUFBZVAsZ0JBQWdCbWpELEdBQXdCL2tDLEtBQUtzbEMsR0FDNUQsRUFBQW5qRCxlQUFlRCx3QkFDZCxJQWFILFVBQU0rQyxXQUFVLFdBQ2QsR0FBS2tnRCxHQUEyQkUsRUFBaEMsQ0FFQSxJQUFNenpELEVBQVMsRUFBQTQwRCx5QkFDYlAsRUFBV2o3RCxRQUNYbTZELEVBQ0FFLEdBR0YsSUFBSTV1RCxNQUFNZ3BCLFFBQVE3dEIsR0FFWCxDQUNMc3pELEVBQXVCLElBQ3ZCLElBQU0sRUFBVXR6RCxFQUNWNjBELEVBQWtCLEVBQUFDLG1CQUFtQlQsRUFBV2o3RCxRQUFTLEdBQ3pEMjdELEVBQTBCLEVBQUFDLDJCQUEyQlgsRUFBV2o3RCxRQUFTLEdBQy9FMDZELEVBQXFCZSxFQUFnQkksY0FDckNqQixFQUFxQmEsRUFBZ0JLLGlCQUNyQ3RCLEVBQTZCbUIsR0FDN0IsSUFBTSxFQUFXLEVBQUFJLHFCQUFxQmQsRUFBV2o3RCxRQUFTLEVBQVMyN0QsR0FFN0QsRUFBUyxXQUNiLEVBQUFLLGNBQ0VmLEVBQVdqN0QsUUFDWCxFQUNBLENBQ0VpOEQsYUFBYyxHQUNkQyxhQUFjLEdBQ2RDLHFCQUFzQixFQUN0QkMsZ0JBQWlCbEIsRUFBbUJsN0QsU0FFdEMsQ0FBRXE4RCxTQUFVLFdBR2RsQixFQUF3Qm43RCxRQUFVNmdCLHNCQUFzQixJQUsxRCxPQUZBLElBRU8sV0FDTGhXLFFBQVFxL0IsSUFBSSxpQkFFWnhwQixxQkFBcUJ5NkMsRUFBd0JuN0QsU0FDN0NpN0QsRUFBV2o3RCxRQUFRczhELGNBQWMxMUQsSUFqQ25Dc3pELEVBQXVCLEVBQUFxQywwQkFBMEIzMUQsT0FvQ2xELENBQUN1ekQsRUFBd0JFLElBRTVCLEVBQUF2Z0QscUJBQXFCaWhELEVBQVcvNkQsUUFBUzY2RCxFQUFZYixHQUNyRCxFQUFBd0MsbUJBQW1CMUMsRUFBc0JNLEdBQ3pDLEVBQUFvQyxtQkFBbUJ6QyxFQUF3Qk8sR0FHekMsK0JBQUtsd0QsVUFBVSxlQUNiLCtCQUFLQSxVQUFVLGtCQUNiLHdCQUFDLEVBQUFxeUQsdUJBQXNCLE1BQ3ZCLHdCQUFDLEVBQUFDLG1CQUFrQixNQUNuQix3QkFBQyxFQUFBQyxlQUFjLENBQUNDLGNBQWVuQyxJQUMvQix3QkFBQyxFQUFBb0MsdUJBQXNCLENBQ3JCQyxzQkFBdUJ2QyxJQUV6Qix3QkFBQyxFQUFBd0MsZUFBYyxDQUFDQyxjQUFlckMsS0FFakMsK0JBQUt0M0QsSUFBSzAzRCxFQUFZM3dELFVBQVUsa0JBQzdCNnZELEdBQ0Msd0JBQUMsRUFBQWdELHlCQUF3QixDQUFDQyxPQUFRakQsSUFFcEMsa0NBQVE3dkQsVUFBVSxnQkFBZ0IvRyxJQUFLMjNELFNBT3BDLEVBQUF3QixtQkFBcUIsU0FBQ3ZsRCxFQUFrQitDLEdBQ25ELFVBQU1DLFdBQVUsV0FDZCxJQUFNemMsRUFBYyxFQUFBMlosZUFBZUgsd0JBQXdCQyxFQUFVK0MsR0FDckUsT0FBTyxXQUFNLE9BQUF4YyxPQUNaLENBQUN5WixNLGtIQ25MTyxFQUFBcWtELDJCQUE2QixTQUN4Q25qRCxFQUNBN2IsR0FPQSxJQUFNNmdFLEVBQWlCLElBQUlDLGdCQUFlLFNBQUFDLEdBQ3hDLElBQU1DLEVBQWdCRCxFQUFTRSxNQUFLLFNBQUE1OEQsR0FBSyxPQUFBQSxFQUFFbEYsU0FBVzBjLEtBRXRELEdBQUltbEQsRUFBZSxDQUNqQixJQUFNRSxFQUFVRixFQUFjN2hFLE9BQU9naUUsd0JBQ3JDbmhFLEVBQVMsQ0FDUG9ILEVBQUc4NUQsRUFBUTk1RCxFQUNYQyxFQUFHNjVELEVBQVE3NUQsRUFDWHlkLE1BQU9vOEMsRUFBUXA4QyxNQUNmQyxPQUFRbThDLEVBQVFuOEMsYUFNdEIsT0FEQTg3QyxFQUFlTyxRQUFRdmxELEdBQ2hCLFdBQU0sT0FBQWdsRCxFQUFlUSxnQiw4T0N0QjlCLFdBQ0EsUUFZYSxFQUFBQyxjQUFnQixTQUMzQkMsRUFDQWo5RCxFQUNBaEYsR0FFQSxJQUFNa2lFLEVBQVNELEVBQWlCRSxhQUFhbjlELEdBTTdDLEdBTEFpOUQsRUFBaUJHLGFBQWFGLEVBQVFsaUUsR0FDdENpaUUsRUFBaUJELGNBQWNFLEdBRWhCRCxFQUFpQkksbUJBQW1CSCxFQUFRRCxFQUFpQkssZ0JBRzFFLE9BQU9KLEVBRVAsSUFBTXI5RCxFQUFRbzlELEVBQWlCTSxpQkFBaUJMLEdBRWhELE9BREFELEVBQWlCTyxhQUFhTixHQUN2QixDQUNMcjlELE1BQUssSUFLRSxFQUFBKzZELHlCQUEyQixTQUN0Q3Q5RCxFQUNBbWdFLEVBQ0FDLEdBRUEsSUFBTTEwRCxFQUFlLEVBQUFnMEQsY0FBYzEvRCxFQUFTQSxFQUFRcWdFLGNBQWVGLEdBRTdEeDBELEVBQWlCLEVBQUErekQsY0FBYzEvRCxFQUFTQSxFQUFRc2dFLGdCQUFpQkYsR0FFbkVHLE9BQXNCbDlELEVBQ3RCLEVBQUErVixZQUFZMU4sRUFBYyxXQUM1QjYwRCxFQUFjLEVBQUF0ekQsV0FBV3ZCLEVBQWFuSixNQUFPLElBRy9DLElBQUlpK0QsT0FBd0JuOUQsRUFLNUIsT0FKSSxFQUFBK1YsWUFBWXpOLEVBQWdCLFdBQzlCNjBELEVBQWdCLEVBQUF2ekQsV0FBV3RCLEVBQWVwSixNQUFPLElBRy9DZytELEdBQWVDLEVBRVYsQ0FBQ0QsRUFBYUMsR0FHaEIsRUFBQUMsY0FBY3pnRSxFQUFTMEwsRUFBY0MsSUFHakMsRUFBQTgwRCxjQUFnQixTQUMzQmQsRUFDQWowRCxFQUNBQyxHQUVBLElBQU0rMEQsRUFBVWYsRUFBaUJjLGdCQU9qQyxHQU5BZCxFQUFpQmdCLGFBQWFELEVBQVNoMUQsR0FDdkNpMEQsRUFBaUJnQixhQUFhRCxFQUFTLzBELEdBQ3ZDZzBELEVBQWlCaUIsWUFBWUYsR0FFZGYsRUFBaUJrQixvQkFBb0JILEVBQVNmLEVBQWlCbUIsYUFHNUUsT0FBT0osRUFFUCxJQUFNSyxFQUFVcEIsRUFBaUJxQixrQkFBa0JOLEdBRW5ELE1BREFmLEVBQWlCdkIsY0FBY3NDLEdBQ3pCLElBQUkvM0QsTUFBTSw0QkFBNEJvNEQsSUFJbkMsRUFBQXZELG1CQUFxQixTQUNoQ3g5RCxFQUNBMGdFLEdBU0EsSUFKQSxJQUFNTyxFQUFjamhFLEVBQVE2Z0Usb0JBQW9CSCxFQUFTMWdFLEVBQVFraEUsaUJBQzNEdkQsRUFBc0QsR0FDdERDLEVBQW9ELEdBRWpEN3dELEVBQVEsRUFBR0EsRUFBUWswRCxJQUFlbDBELEVBQU8sQ0FDaEQsSUFBTW8wRCxFQUFVbmhFLEVBQVFvaEUsaUJBQWlCVixFQUFTM3pELEdBRzdCLFFBQWpCbzBELEVBQVF6K0QsS0FDVms3RCxFQUFnQjcrRCxLQUFLLENBQ25CbkQsS0FBTXVsRSxFQUFRdmxFLEtBQ2R5bEUsS0FBTXpELEVBQWdCbmdFLFNBRW5Ca2dFLEVBQWE1K0QsS0FBSyxDQUFFbkQsS0FBTXVsRSxFQUFRdmxFLEtBQU04RyxLQUFNeStELEVBQVF6K0QsT0FHL0QsTUFBTyxDQUFFaTdELGFBQVksRUFBRUMsZ0JBQWUsSUFHM0IsRUFBQUYsMkJBQTZCLFNBQ3hDMTlELEVBQ0EwZ0UsR0FNQSxJQUpBLElBQU1ZLEVBQXNCdGhFLEVBQVE2Z0Usb0JBQW9CSCxFQUFTMWdFLEVBQVF1aEUsbUJBRW5FNzRELEVBQXdELEdBRXJEcUUsRUFBUSxFQUFHQSxFQUFRdTBELElBQXVCdjBELEVBQU8sQ0FDeEQsSUFBTXkwRCxFQUFrQnhoRSxFQUFReWhFLGdCQUFnQmYsRUFBUzN6RCxHQUN6RHJFLEVBQU8zSixLQUFLLENBQUVuRCxLQUFNNGxFLEVBQWdCNWxFLEtBQU04RyxLQUFNOCtELEVBQWdCOStELE9BR2xFLE9BQU9nRyxHQUdJLEVBQUFvMUQsY0FBZ0IsU0FDM0I5OUQsRUFDQTBnRSxFQUNBZ0IsRUFNQTkxRCxHQUdBNUwsRUFBUTJoRSxXQUFXakIsR0FDbkIxZ0UsRUFBUTRoRSxTQUFTLEVBQUcsRUFBRzVoRSxFQUFRNmhFLE9BQU8zK0MsTUFBT2xqQixFQUFRNmhFLE9BQU8xK0MsUUFFNURuakIsRUFBUThoRSxXQUFXLEVBQUssRUFBSyxFQUFLLEdBQ2xDOWhFLEVBQVEraEUsV0FBVyxHQUVuQi9oRSxFQUFRZ2lFLE9BQU9oaUUsRUFBUWlpRSxZQUV2QmppRSxFQUFRa2lFLFVBQVVsaUUsRUFBUW1pRSxRQUMxQm5pRSxFQUFRckIsTUFBTXFCLEVBQVFvaUUsaUJBQW1CcGlFLEVBQVFxaUUsa0JBR2pEWCxFQUFXM0QsYUFBYWxzRCxTQUFRLFNBQUFzaUIsR0FBSyxPQUFBQSxFQUFFbXVDLHNCQUN2Q1osRUFBVzFELGFBQWFuc0QsU0FBUSxTQUFBc2lCLEdBQUssT0FBQUEsRUFBRW11QyxzQkFDdkNaLEVBQVd6RCxxQkFBcUJwc0QsU0FBUSxTQUFBMHNCLEdBQU0sT0FBQUEsRUFBR2drQyx3QkFFakQsSUFBTUMsRUFBZ0J4aUUsRUFBUXlpRSxVQUc5QixHQUE2QixXQUF6QjcyRCxFQUFZdXlELFNBQXVCLENBQ3JDLElBQU11RSxFQUFjcHpELEtBQUtILElBQUcsTUFBUkcsS0FBWW95RCxFQUFXekQscUJBQXFCeHdELEtBQUksU0FBQTh3QixHQUFNLE9BQUFBLEVBQUdva0MsZUFDN0UzaUUsRUFBUTRpRSxXQUFXSixFQUpOLEVBSTZCRSxRQUUxQ2hCLEVBQVd4RCxnQkFBZ0IyRSxpQkFDM0I3aUUsRUFBUThpRSxhQUNOTixFQUNBZCxFQUFXeEQsZ0JBQWdCeUUsV0FDM0IzaUUsRUFBUStpRSxlQVZHLElBaUJKLEVBQUExRSwwQkFBNEIsU0FBQzMxRCxHQUNqQyxJQUFBczZELEVBQTRDdDZELEVBQU0sR0FBOUJ1NkQsRUFBd0J2NkQsRUFBTSxHQUVuRHMyRCxFQUFtQixHQVV6QixPQVJJZ0UsR0FDRmhFLEVBQU9qZ0UsS0FBSyxpQkFBa0Jpa0UsR0FHNUJDLEdBQ0ZqRSxFQUFPamdFLEtBQUssbUJBQW9Ca2tFLEdBRzNCakUsRUFBT3R2RCxLQUFLLFUsZ1dDekxyQixZQUNBLFFBWU13ekQsRUFBYyxTQUFDdG1FLEdBQTBCLE9BQUdBLEVBQUloQixLQUFJLElBQUlnQixFQUFJOEYsTUFDNUR5Z0UsRUFBaUIsSUFBSSxFQUFBQyxnQkFBc0NGLEdBbUNwRCxFQUFBRyxVQUFZLFNBQUN6bkUsRUFBYzhHLEdBQ3RDLE9BQUF5Z0UsRUFBZWpuRSxJQUFJLENBQUVOLEtBQUksRUFBRThHLEtBQUksS0FFcEIsRUFBQW03RCxxQkFBdUIsU0FDbEM3OUQsRUFDQTBnRSxFQUNBMzBELEdBRUEsSUF6Q29CdTNELEVBQ2RDLEVBd0NBQyxFQUFhejNELEVBQWlCMEIsS0FBSSxTQUFBK3pELEdBQ3RDLElBQU01a0UsRUFBTSxFQUFILEdBQ0o0a0UsR0FHQ2lDLEVBQVlOLEVBQWVqbkUsSUFBSVUsR0FFckMsR0FBSTZtRSxFQUVGLE9BREFBLEVBQVVDLG9CQUFvQkMsZ0JBQWdCakQsR0FDdkMsQ0FBRTlqRSxJQUFHLEVBQUVOLE1BQU9tbkUsR0FFckIsSUFBTSxFQUFzQixJQUFJLEVBQUFHLG9CQUM5QjVqRSxFQUNBMGdFLEVBQ0FjLEVBQWdCNWxFLEtBQ2hCNGxFLEVBQWdCOStELE1BR2xCLE1BQU8sQ0FDTDlGLElBQUcsRUFDSE4sTUFBTyxDQUNMb25FLG9CQUFtQixFQUNuQm5vRCxRQUFTLFdBQU0sU0FBb0Jzb0QscUJBTzNDLE9BckVNTixHQURjRCxFQXFFUEUsR0FwRXNCLzFELEtBQUksU0FBQTJtQixHQUFLLE9BQUE4dUMsRUFBWTl1QyxFQUFFeDNCLFFBQy9CdW1FLEVBQ3hCVyxnQkFDQWwxRCxRQUFPLFNBQUFuTSxHQUFLLE9BQUM4Z0UsRUFBaUIxMEQsU0FBU3BNLEVBQUUsT0FFekJvUCxTQUFRLFNBQUFuVyxHQUN6QkEsRUFBRSxHQUFHNmYsVUFDTDRuRCxFQUFlWSxhQUFhcm9FLEVBQUUsT0FHaEM0bkUsRUFBVXp4RCxTQUFRLFNBQUFteUQsR0FDWGIsRUFBZXhvQixJQUFJcXBCLEVBQUdwbkUsTUFBTXVtRSxFQUFlem5ELElBQUlzb0QsRUFBR3BuRSxJQUFLb25FLEVBQUcxbkUsVUEwRDFEa25FLEVBQVcvMUQsS0FBSSxTQUFBL1IsR0FBSyxPQUFBQSxFQUFFWSxNQUFNb25FLHlCLHVHQ3ZGckMsaUJBR0UsV0FBb0JSLEdBQUEsS0FBQUEsY0FGWixLQUFBejFELElBQU0sSUFBSTRNLElBK0JwQixPQTNCRSxZQUFBbmUsSUFBQSxTQUFJVSxHQUNGLE9BQU9nQixLQUFLNlAsSUFBSXZSLElBQUkwQixLQUFLc2xFLFlBQVl0bUUsS0FHdkMsWUFBQThlLElBQUEsU0FBSTllLEVBQVdOLEdBQ2JzQixLQUFLNlAsSUFBSWlPLElBQUk5ZCxLQUFLc2xFLFlBQVl0bUUsR0FBTU4sSUFHdEMsWUFBQXErQyxJQUFBLFNBQUkvOUMsR0FDRixPQUFPZ0IsS0FBSzZQLElBQUlrdEMsSUFBSS84QyxLQUFLc2xFLFlBQVl0bUUsS0FHdkMsWUFBQWtuRSxjQUFBLFdBQ0UsT0FBT3YyRCxNQUFNcUosS0FBS2haLEtBQUs2UCxJQUFJdzJELFlBRzdCLFlBQUFGLGFBQUEsU0FBYW5uRSxHQUNYZ0IsS0FBSzZQLElBQUk4NkIsT0FBTzNyQyxJQUdsQixZQUFBMnJDLE9BQUEsU0FBTzNyQyxHQUNMZ0IsS0FBSzZQLElBQUk4NkIsT0FBTzNxQyxLQUFLc2xFLFlBQVl0bUUsS0FHbkMsWUFBQStCLE1BQUEsV0FDRWYsS0FBSzZQLElBQUk5TyxTQUViLEVBaENBLEdBQWEsRUFBQXlrRSxtQixpSUNBYixJQUVZYyxFQUZaLFNBRUEsU0FBWUEsR0FDVixtQ0FDQSxtQ0FDQSxtQ0FIRixDQUFZQSxFQUFBLEVBQUFBLHNCQUFBLEVBQUFBLG9CQUFtQixLQU0vQixpQkFLRSxXQUNVbGtFLEVBQ1IwZ0UsRUFDUTlrRSxFQUNBOEcsR0FIQSxLQUFBMUMsVUFFQSxLQUFBcEUsT0FDQSxLQUFBOEcsT0FORixLQUFBd0ssTUFBZ0IsRUFRdEJ0UCxLQUFLK2xFLGdCQUFnQmpELEdBQ3JCOWlFLEtBQUt1bUUsT0FBU25rRSxFQUFRb2tFLGVBa0QxQixPQS9DRSxZQUFBVCxnQkFBQSxTQUFnQmpELEdBQ2Q5aUUsS0FBS3UyQyxTQUFXdjJDLEtBQUtvQyxRQUFRcWtFLGtCQUFrQjNELEVBQVM5aUUsS0FBS2hDLE9BRy9ELFlBQUEyaEMsU0FBQSxTQUFTK21DLEdBQ1AxbUUsS0FBS3NQLE1BQVFvM0QsRUFBUzdtRSxPQUN0QkcsS0FBS29DLFFBQVF1a0UsV0FBVzNtRSxLQUFLb0MsUUFBUXdrRSxhQUFjNW1FLEtBQUt1bUUsUUFDeEQsSUFBTU0sRUFBVSxHQUFHMXVELE9BQU0sTUFBVCxHQUFhdXVELEdBQzdCMW1FLEtBQUtvQyxRQUFRMGtFLFdBQ1g5bUUsS0FBS29DLFFBQVF3a0UsYUFDYixJQUFJRyxhQUFhRixHQUNqQjdtRSxLQUFLb0MsUUFBUTRrRSxjQUlqQixZQUFBckMsbUJBQUEsV0FDRSxHQUFvQixPQUFoQjNrRSxLQUFLdW1FLE9BQWlCLENBQ3hCdm1FLEtBQUtvQyxRQUFRNmtFLHdCQUF3QmpuRSxLQUFLdTJDLFVBQzFDdjJDLEtBQUtvQyxRQUFRdWtFLFdBQVczbUUsS0FBS29DLFFBQVF3a0UsYUFBYzVtRSxLQUFLdW1FLFFBQ3hELElBQU10b0QsRUFBT2lwRCxFQUFpQmxuRSxLQUFLOEUsTUFDN0JBLEVBQU85RSxLQUFLb0MsUUFBUStrRSxNQUkxQm5uRSxLQUFLb0MsUUFBUWdsRSxvQkFDWHBuRSxLQUFLdTJDLFNBQ0x0NEIsRUFDQW5aLEdBTmdCLEVBQ0gsRUFDQSxLQVluQixZQUFBdWlFLHVCQUFBLFdBQ0UsT0FBT3JuRSxLQUFLOEUsTUFHZCxZQUFBaWdFLFNBQUEsV0FDRSxPQUFPL2tFLEtBQUtzUCxPQUdkLFlBQUEyMkQsYUFBQSxXQUNFam1FLEtBQUtvQyxRQUFRNmpFLGFBQWFqbUUsS0FBS3VtRSxRQUMvQnZtRSxLQUFLdW1FLE9BQVMsTUFFbEIsRUE5REEsR0FBYSxFQUFBUCxzQkFnRWIsSUFBTWtCLEVBQW1CLFNBQUNJLEdBQ3hCLE9BQVFBLEdBQ04sS0FBS2hCLEVBQW9CaUIsV0FDdkIsT0FBTyxFQUNULEtBQUtqQixFQUFvQmtCLFdBQ3ZCLE9BQU8sRUFDVCxLQUFLbEIsRUFBb0JtQixXQUN2QixPQUFPLEVBQ1QsUUFDRSxFQUFBL3JELFlBQVk0ckQsTSx5R0NqRkwsRUFBQUksV0FBYSxTQUFDaHBFLEdBQWtCLE9BQXlCLElBQXhCQSxFQUFTQSxFQUFRLElBRy9ELFNBQWlCOGYsR0FFQyxFQUFBemYsT0FBaEIsV0FDRSxJQUFNNG9FLEVBQU0sSUFBSVosYUFBYSxJQUs3QixPQUpBWSxFQUFJLEdBQUssRUFDVEEsRUFBSSxHQUFLLEVBQ1RBLEVBQUksSUFBTSxFQUNWQSxFQUFJLElBQU0sRUFDSEEsR0FFTyxFQUFBbHBELFlBQWhCLFNBQ0VrcEQsRUFDQUMsRUFDQXRwRCxFQUNBdXBELEVBQ0FDLEdBRUEsSUFDRXpwQixFQURFbG1CLEVBQUksRUFBTXptQixLQUFLcTJELElBQUlILEVBQU8sR0EwQjlCLE9BeEJBRCxFQUFJLEdBQUt4dkMsRUFBSTdaLEVBQ2JxcEQsRUFBSSxHQUFLLEVBQ1RBLEVBQUksR0FBSyxFQUNUQSxFQUFJLEdBQUssRUFDVEEsRUFBSSxHQUFLLEVBQ1RBLEVBQUksR0FBS3h2QyxFQUNUd3ZDLEVBQUksR0FBSyxFQUNUQSxFQUFJLEdBQUssRUFDVEEsRUFBSSxHQUFLLEVBQ1RBLEVBQUksR0FBSyxFQUNUQSxFQUFJLEtBQU8sRUFDWEEsRUFBSSxJQUFNLEVBQ1ZBLEVBQUksSUFBTSxFQUNWQSxFQUFJLElBQU0sRUFFQyxNQUFQRyxHQUFlQSxJQUFRM1YsS0FDekI5VCxFQUFLLEdBQUt3cEIsRUFBT0MsR0FDakJILEVBQUksS0FBT0csRUFBTUQsR0FBUXhwQixFQUN6QnNwQixFQUFJLElBQU0sRUFBSUcsRUFBTUQsRUFBT3hwQixJQUUzQnNwQixFQUFJLEtBQU8sRUFDWEEsRUFBSSxLQUFPLEVBQUlFLEdBR1ZGLEdBcUJPLEVBQUEvb0QsT0FBaEIsU0FBdUIrb0QsRUFBVUssRUFBVUMsRUFBYUMsR0FDdEQsSUFBSUMsRUFBSUMsRUFBSUMsRUFBSUMsRUFBSUMsRUFBSUMsRUFBSUMsRUFBSUMsRUFBSUMsRUFBSUMsRUFDcENDLEVBQU9iLEVBQUksR0FDWGMsRUFBT2QsRUFBSSxHQUNYZSxFQUFPZixFQUFJLEdBQ1hnQixFQUFNZCxFQUFHLEdBQ1RlLEVBQU1mLEVBQUcsR0FDVGdCLEVBQU1oQixFQUFHLEdBQ1RpQixFQUFVbEIsRUFBTyxHQUNqQm1CLEVBQVVuQixFQUFPLEdBQ2pCb0IsRUFBVXBCLEVBQU8sR0FFckIsT0FDRXYyRCxLQUFLNDNELElBQUlULEVBQU9NLEdBNUVKLE1BNkVaejNELEtBQUs0M0QsSUFBSVIsRUFBT00sR0E3RUosTUE4RVoxM0QsS0FBSzQzRCxJQUFJUCxFQUFPTSxHQTlFSixLQTRDaEIsU0FBbUIxQixHQWlCakIsT0FoQkFBLEVBQUksR0FBSyxFQUNUQSxFQUFJLEdBQUssRUFDVEEsRUFBSSxHQUFLLEVBQ1RBLEVBQUksR0FBSyxFQUNUQSxFQUFJLEdBQUssRUFDVEEsRUFBSSxHQUFLLEVBQ1RBLEVBQUksR0FBSyxFQUNUQSxFQUFJLEdBQUssRUFDVEEsRUFBSSxHQUFLLEVBQ1RBLEVBQUksR0FBSyxFQUNUQSxFQUFJLElBQU0sRUFDVkEsRUFBSSxJQUFNLEVBQ1ZBLEVBQUksSUFBTSxFQUNWQSxFQUFJLElBQU0sRUFDVkEsRUFBSSxJQUFNLEVBQ1ZBLEVBQUksSUFBTSxFQUNIQSxFQW1CRTRCLENBQVU1QixJQUduQmMsRUFBS0ksRUFBT00sRUFDWlQsRUFBS0ksRUFBT00sRUFDWlQsRUFBS0ksRUFBT00sRUFLWmxCLEVBQUtjLEdBRExOLEdBSEFDLEVBQU0sRUFBSWwzRCxLQUFLODNELE1BQU1mLEVBQUlDLEVBQUlDLElBSWJPLEdBRmhCUixHQUFNRSxHQUdOUixFQUFLYyxHQUpMVCxHQUFNRyxHQUlVSSxFQUFNTCxFQUN0Qk4sRUFBS1csRUFBTU4sRUFBS08sRUFBTVIsR0FDdEJHLEVBQU1sM0QsS0FBSzgzRCxNQUFNckIsRUFBSUMsRUFBSUMsS0FRdkJGLEdBREFTLEVBQU0sRUFBSUEsRUFFVlIsR0FBTVEsRUFDTlAsR0FBTU8sSUFQTlQsRUFBSyxFQUNMQyxFQUFLLEVBQ0xDLEVBQUssR0FRUEMsRUFBS0ksRUFBS0wsRUFBS00sRUFBS1AsRUFDcEJHLEVBQUtJLEVBQUtSLEVBQUtNLEVBQUtKLEVBQ3BCRyxFQUFLQyxFQUFLTCxFQUFLTSxFQUFLUCxHQUNwQlMsRUFBTWwzRCxLQUFLODNELE1BQU1sQixFQUFJQyxFQUFJQyxLQVF2QkYsR0FEQU0sRUFBTSxFQUFJQSxFQUVWTCxHQUFNSyxFQUNOSixHQUFNSSxJQVBOTixFQUFLLEVBQ0xDLEVBQUssRUFDTEMsRUFBSyxHQVFQYixFQUFJLEdBQUtRLEVBQ1RSLEVBQUksR0FBS1csRUFDVFgsRUFBSSxHQUFLYyxFQUNUZCxFQUFJLEdBQUssRUFDVEEsRUFBSSxHQUFLUyxFQUNUVCxFQUFJLEdBQUtZLEVBQ1RaLEVBQUksR0FBS2UsRUFDVGYsRUFBSSxHQUFLLEVBQ1RBLEVBQUksR0FBS1UsRUFDVFYsRUFBSSxHQUFLYSxFQUNUYixFQUFJLElBQU1nQixFQUNWaEIsRUFBSSxJQUFNLEVBQ1ZBLEVBQUksTUFBUVEsRUFBS1UsRUFBT1QsRUFBS1UsRUFBT1QsRUFBS1UsR0FDekNwQixFQUFJLE1BQVFXLEVBQUtPLEVBQU9OLEVBQUtPLEVBQU9OLEVBQUtPLEdBQ3pDcEIsRUFBSSxNQUFRYyxFQUFLSSxFQUFPSCxFQUFLSSxFQUFPSCxFQUFLSSxHQUN6Q3BCLEVBQUksSUFBTSxFQUNIQSxJQUdPLEVBQUE3b0QsU0FBaEIsU0FBeUI2b0QsRUFBVTE4RCxFQUFRQyxHQUN6QyxJQUFJdStELEVBQU14K0QsRUFBRSxHQUNWeStELEVBQU16K0QsRUFBRSxHQUNSMCtELEVBQU0xK0QsRUFBRSxHQUNSMitELEVBQU0zK0QsRUFBRSxHQUNONCtELEVBQU01K0QsRUFBRSxHQUNWNitELEVBQU03K0QsRUFBRSxHQUNSOCtELEVBQU05K0QsRUFBRSxHQUNSKytELEVBQU0vK0QsRUFBRSxHQUNOZy9ELEVBQU1oL0QsRUFBRSxHQUNWaS9ELEVBQU1qL0QsRUFBRSxHQUNSay9ELEVBQU1sL0QsRUFBRSxJQUNSbS9ELEVBQU1uL0QsRUFBRSxJQUNOby9ELEVBQU1wL0QsRUFBRSxJQUNWcS9ELEVBQU1yL0QsRUFBRSxJQUNScy9ELEVBQU10L0QsRUFBRSxJQUNSdS9ELEVBQU12L0QsRUFBRSxJQUdOdy9ELEVBQUt2L0QsRUFBRSxHQUNUdy9ELEVBQUt4L0QsRUFBRSxHQUNQeS9ELEVBQUt6L0QsRUFBRSxHQUNQMC9ELEVBQUsxL0QsRUFBRSxHQWdDVCxPQS9CQXk4RCxFQUFJLEdBQUs4QyxFQUFLaEIsRUFBTWlCLEVBQUtiLEVBQU1jLEVBQUtWLEVBQU1XLEVBQUtQLEVBQy9DMUMsRUFBSSxHQUFLOEMsRUFBS2YsRUFBTWdCLEVBQUtaLEVBQU1hLEVBQUtULEVBQU1VLEVBQUtOLEVBQy9DM0MsRUFBSSxHQUFLOEMsRUFBS2QsRUFBTWUsRUFBS1gsRUFBTVksRUFBS1IsRUFBTVMsRUFBS0wsRUFDL0M1QyxFQUFJLEdBQUs4QyxFQUFLYixFQUFNYyxFQUFLVixFQUFNVyxFQUFLUCxFQUFNUSxFQUFLSixFQUUvQ0MsRUFBS3YvRCxFQUFFLEdBQ1B3L0QsRUFBS3gvRCxFQUFFLEdBQ1B5L0QsRUFBS3ovRCxFQUFFLEdBQ1AwL0QsRUFBSzEvRCxFQUFFLEdBQ1B5OEQsRUFBSSxHQUFLOEMsRUFBS2hCLEVBQU1pQixFQUFLYixFQUFNYyxFQUFLVixFQUFNVyxFQUFLUCxFQUMvQzFDLEVBQUksR0FBSzhDLEVBQUtmLEVBQU1nQixFQUFLWixFQUFNYSxFQUFLVCxFQUFNVSxFQUFLTixFQUMvQzNDLEVBQUksR0FBSzhDLEVBQUtkLEVBQU1lLEVBQUtYLEVBQU1ZLEVBQUtSLEVBQU1TLEVBQUtMLEVBQy9DNUMsRUFBSSxHQUFLOEMsRUFBS2IsRUFBTWMsRUFBS1YsRUFBTVcsRUFBS1AsRUFBTVEsRUFBS0osRUFFL0NDLEVBQUt2L0QsRUFBRSxHQUNQdy9ELEVBQUt4L0QsRUFBRSxHQUNQeS9ELEVBQUt6L0QsRUFBRSxJQUNQMC9ELEVBQUsxL0QsRUFBRSxJQUNQeThELEVBQUksR0FBSzhDLEVBQUtoQixFQUFNaUIsRUFBS2IsRUFBTWMsRUFBS1YsRUFBTVcsRUFBS1AsRUFDL0MxQyxFQUFJLEdBQUs4QyxFQUFLZixFQUFNZ0IsRUFBS1osRUFBTWEsRUFBS1QsRUFBTVUsRUFBS04sRUFDL0MzQyxFQUFJLElBQU04QyxFQUFLZCxFQUFNZSxFQUFLWCxFQUFNWSxFQUFLUixFQUFNUyxFQUFLTCxFQUNoRDVDLEVBQUksSUFBTThDLEVBQUtiLEVBQU1jLEVBQUtWLEVBQU1XLEVBQUtQLEVBQU1RLEVBQUtKLEVBRWhEQyxFQUFLdi9ELEVBQUUsSUFDUHcvRCxFQUFLeC9ELEVBQUUsSUFDUHkvRCxFQUFLei9ELEVBQUUsSUFDUDAvRCxFQUFLMS9ELEVBQUUsSUFDUHk4RCxFQUFJLElBQU04QyxFQUFLaEIsRUFBTWlCLEVBQUtiLEVBQU1jLEVBQUtWLEVBQU1XLEVBQUtQLEVBQ2hEMUMsRUFBSSxJQUFNOEMsRUFBS2YsRUFBTWdCLEVBQUtaLEVBQU1hLEVBQUtULEVBQU1VLEVBQUtOLEVBQ2hEM0MsRUFBSSxJQUFNOEMsRUFBS2QsRUFBTWUsRUFBS1gsRUFBTVksRUFBS1IsRUFBTVMsRUFBS0wsRUFDaEQ1QyxFQUFJLElBQU04QyxFQUFLYixFQUFNYyxFQUFLVixFQUFNVyxFQUFLUCxFQUFNUSxFQUFLSixFQUN6QzdDLEdBcE1YLENBQWlCLEVBQUFucEQsT0FBQSxFQUFBQSxLQUFJLE0sMkdDSHJCLGlCQUlFLFdBQW9CcGMsR0FBQSxLQUFBQSxVQUZaLEtBQUFrTixNQUFnQixFQUd0QnRQLEtBQUt1bUUsT0FBU25rRSxFQUFRb2tFLGVBeUIxQixPQXRCRSxZQUFBN21DLFNBQUEsU0FBUyttQyxHQUNQMW1FLEtBQUtzUCxNQUFRbzNELEVBQVM3bUUsT0FDdEJHLEtBQUtvQyxRQUFRdWtFLFdBQVczbUUsS0FBS29DLFFBQVF5b0UscUJBQXNCN3FFLEtBQUt1bUUsUUFDaEV2bUUsS0FBS29DLFFBQVEwa0UsV0FDWDltRSxLQUFLb0MsUUFBUXlvRSxxQkFDYixJQUFJQyxZQUFZcEUsR0FDaEIxbUUsS0FBS29DLFFBQVE0a0UsY0FJakIsWUFBQS9CLGVBQUEsV0FDRWpsRSxLQUFLb0MsUUFBUXVrRSxXQUFXM21FLEtBQUtvQyxRQUFReW9FLHFCQUFzQjdxRSxLQUFLdW1FLFNBR2xFLFlBQUF4QixTQUFBLFdBQ0UsT0FBTy9rRSxLQUFLc1AsT0FHZCxZQUFBMjJELGFBQUEsV0FDRWptRSxLQUFLb0MsUUFBUTZqRSxhQUFham1FLEtBQUt1bUUsUUFDL0J2bUUsS0FBS3VtRSxPQUFTLE1BRWxCLEVBOUJBLEdBQWEsRUFBQWhILG1CLGtNQ0FiLGNBQ0EsT0FJQSxPQUVBLE9BQ0EsT0FpQmEsRUFBQXdCLHVCQUF5QixVQUFNdDVELEtBQzFDLEVBQUFzMkQsU0FoQnNCLFNBQUM1NkQsR0FDdkIsTUFBTyxDQUNMb2YsT0FBUXBmLEVBQU1vVywwQkFJUyxTQUFDdlMsR0FDMUIsTUFBTyxDQUNMMjRCLFNBQVUsU0FBQzNoQyxFQUFjOEcsRUFBY3BHLEdBQ3JDLE9BQUFzSSxFQUFTLENBQUVsQyxLQUFNLHVCQUF3QnhCLFFBQVMsQ0FBRXRGLEtBQUksRUFBRThHLEtBQUksRUFBRXBHLE1BQUssU0FPekUsRUFJRSxTQUFDK0gsR0FLUyxJQUFBdTZELEVBQTRDdjZELEVBQUssc0JBQTFCOGIsRUFBcUI5YixFQUFLLE9BQWxCazVCLEVBQWFsNUIsRUFBSyxTQUV6RCxPQUNFLCtCQUFLNkgsVUFBVSwwQkFDYix3QkFBQyxFQUFBRCxhQUFZLENBQUNFLEtBQU0sRUFBQVgsYUFBYU8sbUJBQ2hDNnlELEVBQXNCbnhELEtBQUksU0FBQWs3RCxHLE1BQ3pCLE9BQ0Usd0JBQUMsRUFBQXY4RCxhQUFZLENBQUNELEtBQU13OEQsRUFBSS9zRSxNQUN0QixpQ0FDRVUsTUFBdUIsUUFBbEIsRUFBRTZqQixFQUFPd29ELEVBQUkvc0UsYUFBSyxlQUFFVSxNQUN6QndmLFNBQVUsU0FBQXJaLEdBRVI4NkIsRUFBU29yQyxFQUFJL3NFLEtBQU0sRUFBRzZHLEVBQUVsRixPQUFPakIsb0IsOExDL0NuRCxjQUNBLE9BQ0EsT0FFYSxFQUFBa2lFLG1CQUFxQixVQUFNbjVELE1BQUssV0FDM0MsT0FDRSwrQkFBSzZHLFVBQVUsMEJBQ2Isd0JBQUMsRUFBQUQsYUFBWSxDQUFDRSxLQUFNLEVBQUFYLGFBQWFJLG1CLDRMQ1B2QyxjQUNBLE9BRWEsRUFBQWc5RCxpQkFBbUIsVUFBTXZqRSxNQUNwQyxTQUFDaEIsR0FPUyxJQUFBd2tFLEVBQTBEeGtFLEVBQUssS0FBekR5OEIsRUFBb0R6OEIsRUFBSyxRQUFoRCxFQUEyQ0EsRUFBSyxNQUFoRC9ILE9BQUssSUFBRyxLQUFFLEVBQUV3ZixFQUErQnpYLEVBQUssU0FBMUIsRUFBcUJBLEVBQUssU0FBMUJ5a0UsT0FBUSxJQUFHLEdBQUssRUFFN0QsT0FDRSwrQkFBSzU4RCxVQUFVLG1CQUNaLEVBQUFrQixNQUFNLEVBQUd5N0QsR0FBTXA3RCxLQUFJLFNBQUFzN0QsR0FBTyxPQUN6QiwrQkFBSzc4RCxVQUFVLGtCQUNaLEVBQUFrQixNQUFNLEVBQUcwekIsR0FBU3J6QixLQUFJLFNBQUF1N0QsR0FDckIsSUFBTWo4RCxFQUFRZzhELEVBQU1qb0MsRUFBVWtvQyxFQUM5QixPQUNFLGlDQUNFOThELFVBQVUsYUFDVnhKLEtBQUssU0FDTHM4QixTQUFVOHBDLEVBQ1Z4c0UsTUFBT0EsRUFBTXlRLEdBQ2IrTyxTQUFVLFNBQUFyWixHQUNSLE9BQUFxWixFQUFTeGYsRUFBTW1SLEtBQUksU0FBQzJtQixFQUFHLzRCLEdBQU0sT0FBQ0EsSUFBTTBSLEVBQVFrOEQsT0FBT3htRSxFQUFFbEYsT0FBT2pCLE9BQVM4M0IscUIsa01DMUJ6RixjQUNBLE9BRUEsUUFDQSxRQUdBLE9BQ0EsUUFDQSxPQUNBLE9Ba0JhLEVBQUFtcUMsdUJBQXlCLFVBQU1sNUQsS0FDMUMsRUFBQXMyRCxTQWpCc0IsU0FBQzU2RCxHQUN2QixNQUFPLENBQ0w2NkQscUJBQXNCNzZELEVBQU1pVyxlQUM1QjZrRCx1QkFBd0I5NkQsRUFBTWtXLHFCQUlQLFNBQUNyUyxHQUMxQixNQUFPLENBQ0xza0Usd0JBQXlCLFNBQUM1c0UsR0FDeEIsT0FBQXNJLEVBQVMsQ0FBRWxDLEtBQU0sdUJBQXdCeEIsUUFBUyxDQUFFdTZELEtBQU1uL0QsTUFDNUQ2c0UsMEJBQTJCLFNBQUM3c0UsR0FDMUIsT0FBQXNJLEVBQVMsQ0FBRWxDLEtBQU0seUJBQTBCeEIsUUFBUyxDQUFFdTZELEtBQU1uL0QsU0FLaEUsRUFJRSxTQUFDK0gsR0FPRyxJQUFBdTNELEVBSUV2M0QsRUFBSyxxQkFIUHczRCxFQUdFeDNELEVBQUssdUJBRlA2a0UsRUFFRTdrRSxFQUFLLHdCQURQOGtFLEVBQ0U5a0UsRUFBSywwQkFFSCxFQUE0QyxVQUFNdWIsU0FBMkIsSUFBNUV3cEQsRUFBaUIsS0FBRUMsRUFBb0IsS0FFeENDLEVBQXNCLFVBQU10cUQsYUFBWSxXQUM1QyxFQUFBL0YsZUFBZWpCLHlCQUF5QixFQUFBMkUsa0JBQWtCbWEsTUFBSyxTQUFBdGUsR0FDN0Q2d0QsRUFDRTd3RCxFQUFNL0ssS0FBSSxTQUFBODdELEdBQVEsT0FDaEJseEQsR0FBSWt4RCxFQUFLeHdELFNBQ1RvRixRQUFTb3JELEVBQUs1d0QsbUJBSW5CLElBSUgsT0FGQSxVQUFNb0QsV0FBVSxXQUFNLE9BQUF1dEQsTUFBdUIsSUFHM0MsK0JBQUtwOUQsVUFBVSwwQkFDYix3QkFBQyxFQUFBRCxhQUFZLENBQUNFLEtBQU0sRUFBQVgsYUFBYUMsU0FDL0Isa0NBQVF5VCxRQUFTb3FELEdBQW1CLFNBRXRDLHdCQUFDLEVBQUFsOUQsYUFBWSxDQUFDRCxLQUFNLEVBQUFYLGFBQWFFLGNBQy9CLHdCQUFDLEVBQUFzUixTQUFRLENBQ1BDLGVBQWdCMitDLEVBQ2hCOS9DLFNBQVVvdEQsRUFDVmpqRSxRQUFTbWpFLEtBR2Isd0JBQUMsRUFBQWg5RCxhQUFZLENBQUNELEtBQU0sRUFBQVgsYUFBYUcsZ0JBQy9CLHdCQUFDLEVBQUFxUixTQUFRLENBQ1BDLGVBQWdCNCtDLEVBQ2hCLy9DLFNBQVVxdEQsRUFDVmxqRSxRQUFTbWpFLFcsNkJDNUV2QixJQUFJLzhELEVBQW1Cek8sTUFBUUEsS0FBS3lPLGtCQUFxQnRRLE9BQU9ZLE9BQVMsU0FBVWIsRUFBR0wsRUFBRzZRLEVBQUdDLFFBQzdFbEosSUFBUGtKLElBQWtCQSxFQUFLRCxHQUMzQnZRLE9BQU9DLGVBQWVGLEVBQUd5USxFQUFJLENBQUV0USxZQUFZLEVBQU1DLElBQUssV0FBYSxPQUFPVCxFQUFFNlEsT0FDM0UsU0FBVXhRLEVBQUdMLEVBQUc2USxFQUFHQyxRQUNUbEosSUFBUGtKLElBQWtCQSxFQUFLRCxHQUMzQnhRLEVBQUV5USxHQUFNOVEsRUFBRTZRLEtBRVZFLEVBQWdCNU8sTUFBUUEsS0FBSzRPLGNBQWlCLFNBQVMvUSxFQUFHTixHQUMxRCxJQUFLLElBQUlnQyxLQUFLMUIsRUFBYSxZQUFOMEIsR0FBb0JoQyxFQUFRK0IsZUFBZUMsSUFBSWtQLEVBQWdCbFIsRUFBU00sRUFBRzBCLElBRXBHcEIsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQUVtQixPQUFPLElBQ3REa1EsRUFBYSxFQUFRLElBQWlCclIsR0FDdENxUixFQUFhLEVBQVEsR0FBWXJSLEdBQ2pDcVIsRUFBYSxFQUFRLElBQWFyUixJLDZCQ2JsQyxJQUFJa1IsRUFBbUJ6TyxNQUFRQSxLQUFLeU8sa0JBQXFCdFEsT0FBT1ksT0FBUyxTQUFVYixFQUFHTCxFQUFHNlEsRUFBR0MsUUFDN0VsSixJQUFQa0osSUFBa0JBLEVBQUtELEdBQzNCdlEsT0FBT0MsZUFBZUYsRUFBR3lRLEVBQUksQ0FBRXRRLFlBQVksRUFBTUMsSUFBSyxXQUFhLE9BQU9ULEVBQUU2USxPQUMzRSxTQUFVeFEsRUFBR0wsRUFBRzZRLEVBQUdDLFFBQ1RsSixJQUFQa0osSUFBa0JBLEVBQUtELEdBQzNCeFEsRUFBRXlRLEdBQU05USxFQUFFNlEsS0FFVkUsRUFBZ0I1TyxNQUFRQSxLQUFLNE8sY0FBaUIsU0FBUy9RLEVBQUdOLEdBQzFELElBQUssSUFBSWdDLEtBQUsxQixFQUFhLFlBQU4wQixHQUFvQmhDLEVBQVErQixlQUFlQyxJQUFJa1AsRUFBZ0JsUixFQUFTTSxFQUFHMEIsSUFFcEdwQixPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sSUFDdERrUSxFQUFhLEVBQVEsSUFBc0JyUixHQUMzQ3FSLEVBQWEsRUFBUSxJQUFpQ3JSLEksNkJDWnRELElBQUlpa0IsRUFBbUJ4aEIsTUFBUUEsS0FBS3doQixpQkFBb0IsU0FBVUMsR0FDOUQsT0FBUUEsR0FBT0EsRUFBSTVpQixXQUFjNGlCLEVBQU0sQ0FBRSxRQUFXQSxJQUV4RHRqQixPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sSUFDdERuQixFQUFRbWpCLHFCQUFrQixFQUMxQixJQUFJaUIsRUFBVUgsRUFBZ0IsRUFBUSxJQUNsQ29xRCxFQUFpQixFQUFRLElBQ3pCQyxFQUFVLEVBQVEsR0FDbEJDLEVBQWNucUQsRUFBUUksUUFBUXRhLE1BQUssU0FBaUJoQixHQUNwRCxJQUFJMEksRUFBUTFJLEVBQU0wSSxNQUFPb1MsRUFBUTlhLEVBQU04YSxNQUFPakIsRUFBZTdaLEVBQU0wVCxLQUFLbUcsYUFDeEUsT0FBT3FCLEVBQVFJLFFBQVFwZixjQUFjLE1BQU8sQ0FBRTRlLE1BQU9BLEdBQVNqQixFQUFhblIsT0FZL0U1UixFQUFRbWpCLGdCQVZSLFNBQXlCamEsR0FDckIsSUFBSWthLEVBQVlsYSxFQUFNa2EsVUFBV0MsRUFBYW5hLEVBQU1tYSxXQUFZRSxFQUFZcmEsRUFBTXFhLFVBQVdSLEVBQWU3WixFQUFNNlosYUFBY3pQLEVBQUtwSyxFQUFNNmUsTUFBT0EsT0FBZSxJQUFQelUsRUFBZ0IsT0FBU0EsRUFBSXZDLEVBQVk3SCxFQUFNNkgsVUFDck1pWCxFQUFTN1QsS0FBS0gsSUFBSW9QLEVBQVlDLEVBQVlFLEdBQzFDcUwsRUFBV3hLLEVBQVFJLFFBQVFrWixTQUFRLFdBQWMsTUFBTyxDQUN4RDNhLGFBQWNBLEtBQ1gsQ0FBQ0EsSUFDSlIsRUFBVTZCLEVBQVFJLFFBQVFsQyxPQUFPLE1BRXJDLE9BREFnc0QsRUFBUUUscUJBQXFCanNELEVBQVNyWixFQUFNb2Esa0JBQ3BDYyxFQUFRSSxRQUFRcGYsY0FBY2lwRSxFQUFlMTJDLGNBQWUsQ0FBRTVtQixVQUFXQSxFQUFXL0csSUFBS3VZLEVBQVN5RixPQUFRQSxFQUFRNUUsVUFBV0EsRUFBVzBQLFNBQVV6UCxFQUFZMEUsTUFBT0EsRUFBTzZHLFNBQVVBLEdBQVkyL0MsSyw2QkNwQjlNLElBQUl0cUQsRUFBbUJ4aEIsTUFBUUEsS0FBS3doQixpQkFBb0IsU0FBVUMsR0FDOUQsT0FBUUEsR0FBT0EsRUFBSTVpQixXQUFjNGlCLEVBQU0sQ0FBRSxRQUFXQSxJQUV4RHRqQixPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sSUFDdERuQixFQUFRK2hCLHNCQUFtQixFQUMzQixJQUFJcUMsRUFBVUgsRUFBZ0IsRUFBUSxJQUNsQ3dxRCxFQUFZLEVBQVEsSUFDcEJwcUQsRUFBWSxFQUFRLElBQ3BCcXFELEVBQWtCLEVBQVEsSUFDMUJDLEVBQXNCLENBQ3RCM3NELGdCQUFpQixHQUNqQnNCLGlCQUFrQixLQUNsQlosUUFBUSxHQUVSa3NELEVBQXlCLFNBQVVocEUsRUFBT3dkLEVBQVd2ZCxHQUFVLE9BQU80b0UsRUFBVXo1RCxRQUFRcFAsRUFBT3dkLEVBQVd2ZCxJQUM5RzdGLEVBQVEraEIsaUJBQW1CLFNBQVVxQixFQUFXbUIsRUFBZXNxRCxFQUFzQmx1RCxFQUFVM0wsUUFDM0UsSUFBWkEsSUFBc0JBLEVBQVU0NUQsR0FDcEMsSUFBSUUsRUFBZTFxRCxFQUFRSSxRQUFRWCxhQUFZLFNBQVVqZSxFQUFPQyxHQUM1RCxPQUFPbVAsRUFBUXBQLEVBQU93ZCxFQUFXdmQsS0FDbEMsQ0FBQ3VkLEVBQVdwTyxJQUNYc1AsRUFBdUJ1cUQsRUFDckJ4cUQsRUFBVW5SLHlCQUF5Qnk3RCxFQUFxQkUsR0FDeERGLEVBQ04sT0FBT0QsRUFBZ0J2cUQsY0FBY0csRUFBc0JDLEVBQWV1cUQsRUFBY251RCxLLDZCQ3ZCNUYsSUFBSXNELEVBQW1CeGhCLE1BQVFBLEtBQUt3aEIsaUJBQW9CLFNBQVVDLEdBQzlELE9BQVFBLEdBQU9BLEVBQUk1aUIsV0FBYzRpQixFQUFNLENBQUUsUUFBV0EsSUFFeER0akIsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQUVtQixPQUFPLElBQ3REbkIsRUFBUXd1RSwwQkFBdUIsRUFDL0IsSUFBSXBxRCxFQUFVSCxFQUFnQixFQUFRLElBQ2xDZ0IsRUFBa0IsRUFBUSxJQUM5QmpsQixFQUFRd3VFLHFCQUF1QixTQUFVbnBELEVBQVl6VCxHQUNqRHdTLEVBQVFJLFFBQVE1RCxXQUFVLFdBQ3RCLEdBQWMsT0FBVmhQLEdBQWtCeVQsRUFBVzFlLFFBQVMsQ0FDdEMsSUFBSW1ZLEVBQVV1RyxFQUFXMWUsU0FDVnNlLEVBQWdCaEgsWUFBWWEsRUFBUyxZQUM5Q0EsRUFBUWl3RCxTQUNSandELEdBQ0dxTyxhQUFhdmIsRUFBTyxZQUVsQyxDQUFDQSxNLDZCQ2hCUixJQUFJcVMsRUFBbUJ4aEIsTUFBUUEsS0FBS3doQixpQkFBb0IsU0FBVUMsR0FDOUQsT0FBUUEsR0FBT0EsRUFBSTVpQixXQUFjNGlCLEVBQU0sQ0FBRSxRQUFXQSxJQUV4RHRqQixPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sSUFDdERuQixFQUFRd2lCLHdDQUFxQyxFQUM3QyxJQUFJNEIsRUFBVUgsRUFBZ0IsRUFBUSxJQUNsQytxRCxFQUFLLEVBQVEsR0FDakJodkUsRUFBUXdpQixtQ0FBcUMsU0FBVTZDLEVBQVk1YixHQUMvRCxJQUFJd2xFLEVBQWU3cUQsRUFBUUksUUFBUVgsYUFBWSxXQUFjLE9BQU9wYSxFQUFTLENBQUMsZ0JBQWtCLENBQzVGQSxJQUVKdWxFLEVBQUdFLHlCQUF5QjdwRCxFQUFZNHBELEssNkJDWDVDLElBQUlockQsRUFBbUJ4aEIsTUFBUUEsS0FBS3doQixpQkFBb0IsU0FBVUMsR0FDOUQsT0FBUUEsR0FBT0EsRUFBSTVpQixXQUFjNGlCLEVBQU0sQ0FBRSxRQUFXQSxJQUV4RHRqQixPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sSUFDdERuQixFQUFRbXZFLGtDQUErQixFQUN2QyxJQUFJL3FELEVBQVVILEVBQWdCLEVBQVEsSUFDbENtckQsRUFBdUIsRUFBUSxJQUNuQ3B2RSxFQUFRbXZFLDZCQUErQixTQUFVOXBELEVBQVk1YixHQUN6RCxJQUFJd2xFLEVBQWU3cUQsRUFBUUksUUFBUVgsYUFBWSxXQUFjLE9BQU9wYSxFQUFTLENBQUMsZ0JBQWtCLENBQzVGQSxJQUVKMmxFLEVBQXFCaHFELG1CQUFtQkMsRUFBWTRwRCxLLDZCQ1h4RCxJQUFJaHJELEVBQW1CeGhCLE1BQVFBLEtBQUt3aEIsaUJBQW9CLFNBQVVDLEdBQzlELE9BQVFBLEdBQU9BLEVBQUk1aUIsV0FBYzRpQixFQUFNLENBQUUsUUFBV0EsSUFFeER0akIsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQUVtQixPQUFPLElBQ3REbkIsRUFBUXlpQiwyQkFBd0IsRUFDaEMsSUFBSTJCLEVBQVVILEVBQWdCLEVBQVEsSUFDbENvckQsRUFBcUIsRUFBUSxJQUNqQ3J2RSxFQUFReWlCLHNCQUF3QixTQUFVNEMsRUFBWXpmLEVBQU8wcEUsR0FDekQsSUFBSUMsRUFBZ0JuckQsRUFBUUksUUFBUWxDLFFBQU8sR0FDdkNyZCxFQUFnQm9xRSxFQUFtQjVwRCxpQkFBaUI3ZixHQUN4RHdlLEVBQVFJLFFBQVE1RCxXQUFVLFdBQ2xCaGIsSUFBVVgsR0FDVlcsSUFBVTBwRSxHQUNUQyxFQUFjNW9FLFNBQ1ksT0FBdkIwZSxFQUFXMWUsU0FDWDBlLEVBQVcxZSxRQUFRcXNELFFBRTNCdWMsRUFBYzVvRSxTQUFVLElBQ3pCLENBQUNmLE0sNkJDbEJSLElBQUlxZSxFQUFtQnhoQixNQUFRQSxLQUFLd2hCLGlCQUFvQixTQUFVQyxHQUM5RCxPQUFRQSxHQUFPQSxFQUFJNWlCLFdBQWM0aUIsRUFBTSxDQUFFLFFBQVdBLElBRXhEdGpCLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxJQUN0RG5CLEVBQVFrdkUsOEJBQTJCLEVBQ25DLElBQUk5cUQsRUFBVUgsRUFBZ0IsRUFBUSxJQUN0Q2prQixFQUFRa3ZFLHlCQUEyQixTQUFVN3BELEVBQVkvRSxHQUNyRDhELEVBQVFJLFFBQVE1RCxXQUFVLFdBQ3RCLFNBQVM0dUQsRUFBYWxvRSxHQUNsQixJQUFJZ00sR0FDZ0MsUUFBN0JBLEVBQUsrUixFQUFXMWUsZUFBNEIsSUFBUDJNLE9BQWdCLEVBQVNBLEVBQUdpUyxTQUFTamUsRUFBRWxGLFVBQy9Fa2UsSUFJUixPQURBOWEsU0FBU2tYLGlCQUFpQixZQUFhOHlELEdBQ2hDLFdBQ0hocUUsU0FBUzZhLG9CQUFvQixZQUFhbXZELE1BRS9DLENBQUNsdkQsTSw2QkNsQlIsSUFBSTJELEVBQW1CeGhCLE1BQVFBLEtBQUt3aEIsaUJBQW9CLFNBQVVDLEdBQzlELE9BQVFBLEdBQU9BLEVBQUk1aUIsV0FBYzRpQixFQUFNLENBQUUsUUFBV0EsSUFFeER0akIsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQUVtQixPQUFPLElBQ3REbkIsRUFBUXl2RSxvQkFBaUIsRUFDekIsSUFBSXJyRCxFQUFVSCxFQUFnQixFQUFRLElBQ3RDamtCLEVBQVF5dkUsZUFBaUIsU0FBVXJzRCxFQUFXc3NELEdBQzFDLElBQUloZ0QsRUFBUXRMLEVBQVFJLFFBQVFrWixTQUFRLFdBQWMsT0FBT3RyQixNQUFNZ1IsR0FBVy9RLEtBQUssQ0FBRWxSLE1BQU8sS0FBTXd1RSxVQUFVLE1BQWEsQ0FBQ3ZzRCxJQUNsSHdzRCxFQUFleHJELEVBQVFJLFFBQVFYLGFBQVksU0FBVWpTLEdBQVMsT0FBTzhkLEVBQU05ZCxHQUFPKzlELFdBQWEsQ0FBQ2pnRCxJQUNoR21nRCxFQUFnQnpyRCxFQUFRSSxRQUFRWCxhQUFZLFNBQVUyTixFQUFZcytDLEdBQ2xFLE9BQU9KLEVBQUtsK0MsRUFBWXMrQyxHQUFVbjBDLE1BQUssU0FBVW8wQyxHQUM3QyxJQUFLLElBQUlDLEVBQWF4K0MsRUFBWTVmLEVBQVEsRUFBR28rRCxHQUFjRixFQUFVRSxJQUFjcCtELElBQy9FOGQsRUFBTXNnRCxHQUFjLENBQ2hCN3VFLE1BQU80dUUsRUFBU24rRCxHQUNoQis5RCxVQUFVLFFBSXZCLENBQUNqZ0QsSUFDSixNQUFPLENBQ0hBLE1BQU9BLEVBQ1BrZ0QsYUFBY0EsRUFDZEMsY0FBZUEsSyw2QkN0QnZCLElBQUk1ckQsRUFBbUJ4aEIsTUFBUUEsS0FBS3doQixpQkFBb0IsU0FBVUMsR0FDOUQsT0FBUUEsR0FBT0EsRUFBSTVpQixXQUFjNGlCLEVBQU0sQ0FBRSxRQUFXQSxJQUV4RHRqQixPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sSUFDdERuQixFQUFRNGlCLHNDQUFtQyxFQUMzQyxJQUFJd0IsRUFBVUgsRUFBZ0IsRUFBUSxJQUNsQ2dzRCxFQUFzQixFQUFRLElBQ2xDandFLEVBQVE0aUIsaUNBQW1DLFNBQVVuWixHQUFZLE9BQU8yYSxFQUFRSSxRQUFRa1osU0FBUSxXQUFjLE9BQU91eUMsRUFBb0J0cUQsNEJBQTRCbGMsS0FBYyxDQUFDQSxNLDZCQ1BwTCxJQUFJd2EsRUFBbUJ4aEIsTUFBUUEsS0FBS3doQixpQkFBb0IsU0FBVUMsR0FDOUQsT0FBUUEsR0FBT0EsRUFBSTVpQixXQUFjNGlCLEVBQU0sQ0FBRSxRQUFXQSxJQUV4RHRqQixPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sSUFDdERuQixFQUFRa3dFLGdDQUE2QixFQUNyQyxJQUFJOXJELEVBQVVILEVBQWdCLEVBQVEsSUFDbENvcUQsRUFBaUIsRUFBUSxJQUN6QkMsRUFBVSxFQUFRLEdBQ2xCNkIsRUFBaUNsc0QsRUFBZ0IsRUFBUSxLQUN6RHNxRCxFQUFjbnFELEVBQVFJLFFBQVF0YSxNQUFLLFNBQWFoQixHQUNoRCxJQUFJMEksRUFBUTFJLEVBQU0wSSxNQUFPb1MsRUFBUTlhLEVBQU04YSxNQUFPMVEsRUFBS3BLLEVBQU0wVCxLQUFNbUcsRUFBZXpQLEVBQUd5UCxhQUFjNnNELEVBQWV0OEQsRUFBR3M4RCxhQUNqSCxPQUFPeHJELEVBQVFJLFFBQVFwZixjQUFjLE1BQU8sQ0FBRTRlLE1BQU9BLEdBQVNqQixFQUFhblIsRUFBT2crRCxFQUFhaCtELFFBZ0JuRzVSLEVBQVFrd0UsMkJBZFIsU0FBb0NobkUsR0FDaEMsSUFBSWthLEVBQVlsYSxFQUFNa2EsVUFBV0MsRUFBYW5hLEVBQU1tYSxXQUFZRSxFQUFZcmEsRUFBTXFhLFVBQVdSLEVBQWU3WixFQUFNNlosYUFBY3pQLEVBQUtwSyxFQUFNNmUsTUFBT0EsT0FBZSxJQUFQelUsRUFBZ0IsT0FBU0EsRUFBSXM4RCxFQUFlMW1FLEVBQU0wbUUsYUFBY0MsRUFBZ0IzbUUsRUFBTTJtRSxjQUFldnNELEVBQW1CcGEsRUFBTW9hLGlCQUFrQnZTLEVBQVk3SCxFQUFNNkgsVUFDeFRpWCxFQUFTN1QsS0FBS0gsSUFBSW9QLEVBQVlDLEVBQVlFLEdBQzFDcUwsRUFBV3hLLEVBQVFJLFFBQVFrWixTQUFRLFdBQWMsTUFBTyxDQUN4RDNhLGFBQWNBLEVBQ2Q2c0QsYUFBY0EsS0FDWCxDQUFDN3NELEVBQWM2c0QsSUFDbEJRLEVBQVloc0QsRUFBUUksUUFBUWxDLE9BQU8sTUFFdkMsT0FEQWdzRCxFQUFRRSxxQkFBcUI0QixFQUFXOXNELEdBQ2hDYyxFQUFRSSxRQUFRcGYsY0FBYytxRSxFQUErQjNyRCxRQUFTLENBQUV4YSxJQUFLb21FLEVBQVdSLGFBQWNBLEVBQWN4c0QsVUFBV0EsRUFBV3lzRCxjQUFlQSxJQUFpQixTQUFVdjhELEdBQ3hMLElBQUk4WCxFQUFrQjlYLEVBQUc4WCxnQkFBaUJwaEIsRUFBTXNKLEVBQUd0SixJQUNuRCxPQUFRb2EsRUFBUUksUUFBUXBmLGNBQWNpcEUsRUFBZTEyQyxjQUFlLENBQUU1bUIsVUFBV0EsRUFBVy9HLElBQUtBLEVBQUtnZSxPQUFRQSxFQUFRNUUsVUFBV0EsRUFBVzBQLFNBQVV6UCxFQUFZK0gsZ0JBQWlCQSxFQUFpQnJELE1BQU9BLEVBQU82RyxTQUFVQSxHQUFZMi9DLFEsNkJDekJoUCxrQkEyRUEsSUFBSThCLEVBQWlCLFNBQVVsbUQsRUFBVW1tRCxHQUN2QyxLQUFNbm1ELGFBQW9CbW1ELEdBQ3hCLE1BQU0sSUFBSXY2RCxVQUFVLHNDQUlwQnc2RCxFQUFjLFdBQ2hCLFNBQVN2NEQsRUFBaUI1VixFQUFROEcsR0FDaEMsSUFBSyxJQUFJaEosRUFBSSxFQUFHQSxFQUFJZ0osRUFBTTVHLE9BQVFwQyxJQUFLLENBQ3JDLElBQUk2YSxFQUFhN1IsRUFBTWhKLEdBQ3ZCNmEsRUFBV2phLFdBQWFpYSxFQUFXamEsYUFBYyxFQUNqRGlhLEVBQVd4RCxjQUFlLEVBQ3RCLFVBQVd3RCxJQUFZQSxFQUFXdkQsVUFBVyxHQUNqRDVXLE9BQU9DLGVBQWV1QixFQUFRMlksRUFBV3RaLElBQUtzWixJQUlsRCxPQUFPLFNBQVV1MUQsRUFBYUUsRUFBWUMsR0FHeEMsT0FGSUQsR0FBWXg0RCxFQUFpQnM0RCxFQUFZeHVFLFVBQVcwdUUsR0FDcERDLEdBQWF6NEQsRUFBaUJzNEQsRUFBYUcsR0FDeENILEdBZE8sR0FrQ2RJLEVBQTRCLFNBQVUvM0QsRUFBTXRZLEdBQzlDLElBQUtzWSxFQUNILE1BQU0sSUFBSTBOLGVBQWUsNkRBRzNCLE9BQU9obUIsR0FBeUIsaUJBQVRBLEdBQXFDLG1CQUFUQSxFQUE4QnNZLEVBQVB0WSxHQUd4RXN3RSxFQUFpQixTQUFVOW1ELEdBRzdCLFNBQVM4bUQsSUFDUCxJQUFJL3JFLEVBRUFpSixFQUFPa2MsRUFFWHNtRCxFQUFlNXRFLEtBQU1rdUUsR0FFckIsSUFBSyxJQUFJejRELEVBQU83VixVQUFVQyxPQUFRc3VFLEVBQU94K0QsTUFBTThGLEdBQU9yQixFQUFPLEVBQUdBLEVBQU9xQixFQUFNckIsSUFDM0UrNUQsRUFBSy81RCxHQUFReFUsVUFBVXdVLEdBR3pCLE9BQWVoSixFQUFTa2MsRUFBUTJtRCxFQUEwQmp1RSxNQUFPbUMsRUFBTytyRSxFQUFlNXFELFdBQWFubEIsT0FBT2tVLGVBQWU2N0QsSUFBaUJ0d0UsS0FBS21DLE1BQU1vQyxFQUFNLENBQUNuQyxNQUFNbVksT0FBT2cyRCxLQUFpQjdtRCxFQUFNOG1ELHlCQUEyQixFQUFHOW1ELEVBQU0rbUQsd0JBQTBCLEVBQUcvbUQsRUFBTWduRCx3QkFBMEIsR0FBSWhuRCxFQUFNaW5ELGlCQUFtQixTQUFVcnBFLEdBQ3ZVLElBQUl3dEIsRUFBb0J4dEIsRUFBTXd0QixrQkFDMUJDLEVBQW1CenRCLEVBQU15dEIsaUJBWTdCckwsRUFBTThtRCx3QkFBMEIxN0MsRUFDaENwTCxFQUFNK21ELHVCQUF5QjE3QyxFQUUvQnJMLEVBQU1rbkQsa0JBQWtCOTdDLEVBQW1CQyxJQUMxQ3JMLEVBQU1tbkQsUUFBVSxTQUFVM3VELEdBQzNCd0gsRUFBTWdsRCxTQUFXeHNELEdBQ1JtdUQsRUFBMEIzbUQsRUFBbENsYyxHQWlITCxPQTNLYSxTQUFVb1ksRUFBVUMsR0FDakMsR0FBMEIsbUJBQWZBLEdBQTRDLE9BQWZBLEVBQ3RDLE1BQU0sSUFBSW5RLFVBQVUsa0VBQW9FbVEsR0FHMUZELEVBQVNua0IsVUFBWWxCLE9BQU9ZLE9BQU8wa0IsR0FBY0EsRUFBV3BrQixVQUFXLENBQ3JFcWtCLFlBQWEsQ0FDWGhsQixNQUFPOGtCLEVBQ1BubEIsWUFBWSxFQUNaMFcsVUFBVSxFQUNWRCxjQUFjLEtBR2QyTyxJQUFZdGxCLE9BQU9rbEIsZUFBaUJsbEIsT0FBT2tsQixlQUFlRyxFQUFVQyxHQUFjRCxFQUFTRixVQUFZRyxHQVkzR2lyRCxDQUFTUixFQUFnQjltRCxHQW9DekIwbUQsRUFBWUksRUFBZ0IsQ0FBQyxDQUMzQmx2RSxJQUFLLDBCQUNMTixNQUFPLFdBQ0wsSUFBSWl3RSxFQUFhL3VFLFVBQVVDLE9BQVMsUUFBc0I0RixJQUFqQjdGLFVBQVUsSUFBbUJBLFVBQVUsR0FFaEZJLEtBQUtzdUUsd0JBQTBCLEdBRTNCSyxHQUNGM3VFLEtBQUt3dUUsa0JBQWtCeHVFLEtBQUtvdUUsd0JBQXlCcHVFLEtBQUtxdUUsMEJBRzdELENBQ0RydkUsSUFBSyxvQkFDTE4sTUFBTyxXQUNELElBTUwsQ0FDRE0sSUFBSyxTQUNMTixNQUFPLFdBSUwsT0FBTzJELEVBSFFyQyxLQUFLeUcsTUFBTXBFLFVBR1YsQ0FDZHNtQixnQkFBaUIzb0IsS0FBS3V1RSxpQkFDdEJobkUsSUFBS3ZILEtBQUt5dUUsWUFHYixDQUNEenZFLElBQUssb0JBQ0xOLE1BQU8sU0FBMkJxd0IsRUFBWUMsR0FDNUMsSUFBSTQvQyxFQUFTNXVFLEtBQUt5RyxNQUNkMG1FLEVBQWV5QixFQUFPekIsYUFDdEJ4c0QsRUFBWWl1RCxFQUFPanVELFVBQ25Ca3VELEVBQXdCRCxFQUFPRSxpQkFDL0JBLE9BQTZDcnBFLElBQTFCb3BFLEVBQXNDLEdBQUtBLEVBQzlERSxFQUFtQkgsRUFBT0ksVUFDMUJBLE9BQWlDdnBFLElBQXJCc3BFLEVBQWlDLEdBQUtBLEVBR2xERSxFQTVMVixTQUErQjlzRSxHQVk3QixJQVhBLElBQUlnckUsRUFBZWhyRSxFQUFLZ3JFLGFBQ3BCeHNELEVBQVl4ZSxFQUFLd2UsVUFDakJtdUQsRUFBbUIzc0UsRUFBSzJzRSxpQkFDeEIvL0MsRUFBYTVzQixFQUFLNHNCLFdBQ2xCQyxFQUFZN3NCLEVBQUs2c0IsVUFFakJpZ0QsRUFBaUIsR0FFakJDLEVBQWtCLEtBQ2xCQyxFQUFpQixLQUVaOTdDLEVBQVN0RSxFQUFZc0UsR0FBVXJFLEVBQVdxRSxJQUFVLENBQzlDODVDLEVBQWE5NUMsR0FPSSxPQUFuQjg3QyxJQUNURixFQUFlOXRFLEtBQUsrdEUsRUFBaUJDLEdBRXJDRCxFQUFrQkMsRUFBaUIsT0FQbkNBLEVBQWlCOTdDLEVBQ08sT0FBcEI2N0MsSUFDRkEsRUFBa0I3N0MsSUFXeEIsR0FBdUIsT0FBbkI4N0MsRUFBeUIsQ0FHM0IsSUFGQSxJQUFJQyxFQUFxQjE5RCxLQUFLSCxJQUFJRyxLQUFLRixJQUFJMjlELEVBQWdCRCxFQUFrQkosRUFBbUIsR0FBSW51RCxFQUFZLEdBRXZHMHVELEVBQVVGLEVBQWlCLEVBQUdFLEdBQVdELElBQzNDakMsRUFBYWtDLEdBRGtEQSxJQUVsRUYsRUFBaUJFLEVBTXJCSixFQUFlOXRFLEtBQUsrdEUsRUFBaUJDLEdBS3ZDLEdBQUlGLEVBQWVwdkUsT0FDakIsS0FBT292RSxFQUFlLEdBQUtBLEVBQWUsR0FBSyxFQUFJSCxHQUFvQkcsRUFBZSxHQUFLLEdBQUcsQ0FDNUYsSUFBSUssRUFBVUwsRUFBZSxHQUFLLEVBRWxDLEdBQUs5QixFQUFhbUMsR0FHaEIsTUFGQUwsRUFBZSxHQUFLSyxFQU8xQixPQUFPTCxFQW1Ja0JNLENBQXNCLENBQ3pDcEMsYUFBY0EsRUFDZHhzRCxVQUFXQSxFQUNYbXVELGlCQUFrQkEsRUFDbEIvL0MsV0FBWXJkLEtBQUtGLElBQUksRUFBR3VkLEVBQWFpZ0QsR0FDckNoZ0QsVUFBV3RkLEtBQUtILElBQUlvUCxFQUFZLEVBQUdxTyxFQUFZZ2dELE1BSzdDaHZFLEtBQUtzdUUsd0JBQXdCenVFLFNBQVdvdkUsRUFBZXB2RSxRQUFVRyxLQUFLc3VFLHdCQUF3QmtCLE1BQUssU0FBVUMsRUFBYXRnRSxHQUM1SCxPQUFPOC9ELEVBQWU5L0QsS0FBV3NnRSxRQUVqQ3p2RSxLQUFLc3VFLHdCQUEwQlcsRUFDL0JqdkUsS0FBSzB2RSxvQkFBb0JULE1BRzVCLENBQ0Rqd0UsSUFBSyxzQkFDTE4sTUFBTyxTQUE2QnV3RSxHQTJDbEMsSUExQ0EsSUFBSVUsRUFBUzN2RSxLQUdUb3RFLEVBQWdCcHRFLEtBQUt5RyxNQUFNMm1FLGVBQWlCcHRFLEtBQUt5RyxNQUFNbXBFLGFBRXZEQyxFQUFRLFNBQWVweUUsR0FDekIsSUFBSXN4QixFQUFha2dELEVBQWV4eEUsR0FDNUJ1eEIsRUFBWWlnRCxFQUFleHhFLEVBQUksR0FDL0JxeUUsRUFBVTFDLEVBQWNyK0MsRUFBWUMsR0FDekIsTUFBWDhnRCxHQUNGQSxFQUFRNTJDLE1BQUssV0FHWCxHQXRPWixTQUF3Qi8yQixHQUN0QixJQUFJNHRFLEVBQXlCNXRFLEVBQUs0dEUsdUJBQzlCQyxFQUF3Qjd0RSxFQUFLNnRFLHNCQUM3QmpoRCxFQUFhNXNCLEVBQUs0c0IsV0FDbEJDLEVBQVk3c0IsRUFBSzZzQixVQUVyQixRQUFTRCxFQUFhaWhELEdBQXlCaGhELEVBQVkrZ0QsR0FnTzdDRSxDQUFlLENBQ2pCRix1QkFBd0JKLEVBQU92Qix3QkFDL0I0QixzQkFBdUJMLEVBQU90Qix1QkFDOUJ0L0MsV0FBWUEsRUFDWkMsVUFBV0EsSUFDVCxDQUVGLEdBQXVCLE1BQW5CMmdELEVBQU9yRCxTQUNULE9BSzZDLG1CQUFwQ3FELEVBQU9yRCxTQUFTbDRDLGdCQUN6QnU3QyxFQUFPckQsU0FBU2w0QyxnQkFBZ0JyRixHQUFZLElBS00sbUJBQXZDNGdELEVBQU9yRCxTQUFTbmpELG9CQUN6QndtRCxFQUFPckQsU0FBU25qRCxvQkFBb0IsR0FFdEN3bUQsRUFBT3JELFNBQVMzNkMsb0JBT2pCbDBCLEVBQUksRUFBR0EsRUFBSXd4RSxFQUFlcHZFLE9BQVFwQyxHQUFLLEVBQzlDb3lFLEVBQU1weUUsT0FJTHl3RSxFQW5KWSxDQW9KbkIsaUJBRWEsYSw2QkNoUmYsSUFBSXovRCxFQUFtQnpPLE1BQVFBLEtBQUt5TyxrQkFBcUJ0USxPQUFPWSxPQUFTLFNBQVViLEVBQUdMLEVBQUc2USxFQUFHQyxRQUM3RWxKLElBQVBrSixJQUFrQkEsRUFBS0QsR0FDM0J2USxPQUFPQyxlQUFlRixFQUFHeVEsRUFBSSxDQUFFdFEsWUFBWSxFQUFNQyxJQUFLLFdBQWEsT0FBT1QsRUFBRTZRLE9BQzNFLFNBQVV4USxFQUFHTCxFQUFHNlEsRUFBR0MsUUFDVGxKLElBQVBrSixJQUFrQkEsRUFBS0QsR0FDM0J4USxFQUFFeVEsR0FBTTlRLEVBQUU2USxLQUVWRSxFQUFnQjVPLE1BQVFBLEtBQUs0TyxjQUFpQixTQUFTL1EsRUFBR04sR0FDMUQsSUFBSyxJQUFJZ0MsS0FBSzFCLEVBQWEsWUFBTjBCLEdBQW9CaEMsRUFBUStCLGVBQWVDLElBQUlrUCxFQUFnQmxSLEVBQVNNLEVBQUcwQixJQUVwR3BCLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxJQUN0RGtRLEVBQWEsRUFBUSxJQUFjclIsR0FDbkNxUixFQUFhLEVBQVEsSUFBZXJSLEdBQ3BDcVIsRUFBYSxFQUFRLElBQXdCclIsR0FDN0NxUixFQUFhLEVBQVEsSUFBY3JSLEdBQ25DcVIsRUFBYSxFQUFRLElBQVlyUixJLDZCQ2ZqQ1ksT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQUVtQixPQUFPLEssNkJDQXREUCxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sSyw2QkNBdERQLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxLLDZZQ0F0RCxjQUNBLE9BRUEsUUFHQSxPQUNBLFFBQ0EsT0FDQSxPQUVNMkosRUFBVSxFQUFILENBQ1gsQ0FBRW9TLEdBQUksRUFBQXlFLGVBQWdCcUIsUUFBUyxFQUFBM1MsYUFBYVEsU0FDekMsRUFBQTZRLGtCQUFrQnBQLEtBQUksU0FBQXFnRSxHQUFNLE9BQUd6MUQsR0FBSXkxRCxFQUFJM3ZELFFBQVMydkQsT0FrQnhDLEVBQUFqUCxlQUFpQixVQUFNeDVELEtBQ2xDLEVBQUFzMkQsU0FoQnNCLFNBQUM1NkQsR0FDdkIsTUFBTyxDQUNMb2YsT0FBUXBmLEVBQU1xVyxrQkFJUyxTQUFDeFMsR0FDMUIsTUFBTyxDQUNMMjRCLFNBQVUsU0FBQzNoQyxFQUFjbXlFLEVBQWtCQyxHQUN6QyxPQUFBcHBFLEVBQVMsQ0FBRWxDLEtBQU0sY0FBZXhCLFFBQVMsQ0FBRXRGLEtBQUksRUFBRW15RSxTQUFRLEVBQUVDLFlBQVcsU0FPMUUsRUFJRSxTQUFDM3BFLEdBS1MsSUFBQXk2RCxFQUFvQ3o2RCxFQUFLLGNBQTFCOGIsRUFBcUI5YixFQUFLLE9BQWxCazVCLEVBQWFsNUIsRUFBSyxTQUVqRCxPQUNFLCtCQUFLNkgsVUFBVSwwQkFDYix3QkFBQyxFQUFBRCxhQUFZLENBQUNFLEtBQU0sRUFBQVgsYUFBYUssV0FDaENpekQsRUFBY3J4RCxLQUFJLFNBQUFrdkMsRyxRQUFNLE9BQ3ZCLHdCQUFDLEVBQUF2d0MsYUFBWSxDQUFDRCxLQUFNd3dDLEVBQUcvZ0QsTUFDckIsd0JBQUNxeUUsRUFBWSxDQUNYQyxpQkFBaUMsUUFBakIsRUFBRS90RCxFQUFPdzhCLEVBQUcvZ0QsYUFBSyxlQUFFbXlFLFNBQ25DSSxvQkFBb0MsUUFBakIsRUFBRWh1RCxFQUFPdzhCLEVBQUcvZ0QsYUFBSyxlQUFFb3lFLFlBQ3RDbHlELFNBQVUsU0FBQ2l5RCxFQUFVQyxHQUFnQixPQUFBendDLEVBQVNvZixFQUFHL2dELEtBQU1teUUsRUFBVUMsZUFVakYsSUFBTUMsRUFBZSxTQUFDNXBFLEdBS1osSUFBQTZwRSxFQUFvRDdwRSxFQUFLLGlCQUF2QzhwRSxFQUFrQzlwRSxFQUFLLG9CQUFsQnlYLEVBQWF6WCxFQUFLLFNBQ2pFLE9BQ0UsbUNBQ0Usd0JBQUMsRUFBQTJZLFNBQVEsQ0FDUEMsZUFBZ0JpeEQsRUFDaEJweUQsU0FBVSxTQUFBekQsR0FDUixPQUFBeUQsRUFBU3pELEVBQUk2MUQsSUFBcUIsRUFBQXB4RCxlQUFpQnF4RCxFQUFzQixLQUUzRWxvRSxRQUFTQSxJQUVWaW9FLElBQXFCLEVBQUFweEQsZ0JBQ3BCLGlDQUNFeGdCLE1BQU82eEUsRUFDUHJ5RCxTQUFVLFNBQUFyWixHQUFLLE9BQUFxWixFQUFTb3lELEVBQWtCenJFLEVBQUVsRixPQUFPakIsYSwwTENoRjdELGNBQ0EsT0FJQSxPQUNBLFFBQ0EsUUFNQSxPQUNBLE9BbUJhLEVBQUFtaUUsZUFBaUIsVUFBTXA1RCxLQUNsQyxFQUFBczJELFNBaEJzQixTQUFDNTZELEdBQ3ZCLE1BQU8sQ0FDTG9mLE9BQVFwZixFQUFNbVcsa0JBSVMsU0FBQ3RTLEdBQzFCLE1BQU8sQ0FDTDI0QixTQUFVLFNBQUMzaEMsRUFBYzhHLEVBQWNwRyxHQUNyQyxPQUFBc0ksRUFBUyxDQUFFbEMsS0FBTSxjQUFleEIsUUFBUyxDQUFFdEYsS0FBSSxFQUFFOEcsS0FBSSxFQUFFcEcsTUFBSyxTQU9oRSxFQUlFLFNBQUMrSCxHQUtTLElBQWUrcEUsRUFBb0MvcEUsRUFBSyxjQUExQjhiLEVBQXFCOWIsRUFBSyxPQUFsQms1QixFQUFhbDVCLEVBQUssU0FFaEUsT0FDRSwrQkFBSzZILFVBQVUsMEJBQ2Isd0JBQUMsRUFBQUQsYUFBWSxDQUFDRSxLQUFNLEVBQUFYLGFBQWFNLFdBQ2hDc2lFLEVBQWMzZ0UsS0FBSSxTQUFBazdELEcsTUFDakIsT0FDRSx3QkFBQyxFQUFBdjhELGFBQVksQ0FBQ0QsS0FBTXc4RCxFQUFJL3NFLE1BQ3JCeXlFLEVBQW1CMUYsRUFBSWptRSxLQUFzQixRQUFsQixFQUFFeWQsRUFBT3dvRCxFQUFJL3NFLGFBQUssZUFBRVUsT0FBTyxTQUFBQSxHQUNyRCxPQUFBaWhDLEVBQVNvckMsRUFBSS9zRSxLQUFNK3NFLEVBQUlqbUUsS0FBTXBHLGVBVy9DLElBQU0reEUsRUFBcUIsU0FDekJDLEVBQ0FoeUUsRUFDQXdmLEdBRUEsT0FBUXd5RCxHQUNOLEtBQUssRUFBQUMsWUFBWXBKLFdBQ2YsT0FBTyx3QkFBQyxFQUFBcUosbUJBQWtCLENBQUNseUUsTUFBT0EsRUFBT3dmLFNBQVVBLElBQ3JELEtBQUssRUFBQXl5RCxZQUFZbkosV0FDZixPQUFPLHdCQUFDLEVBQUFxSixtQkFBa0IsQ0FBQ255RSxNQUFPQSxFQUFPd2YsU0FBVUEsSUFDckQsS0FBSyxFQUFBeXlELFlBQVlsSixXQUNmLE9BQU8sd0JBQUMsRUFBQXFKLG1CQUFrQixDQUFDcHlFLE1BQU9BLEVBQU93ZixTQUFVQSxJQUNyRCxLQUFLLEVBQUF5eUQsWUFBWUksV0FDZixPQUFPLHdCQUFDLEVBQUFDLHFCQUFvQixDQUFDdHlFLE1BQU9BLEVBQU93ZixTQUFVQSxJQUN2RCxRQUNFLE9BQU8sdUQsd1VDeEViLElBRVl5eUQsRUFGWixTQUVBLFNBQVlBLEdBQ1YsbUNBQ0EsbUNBQ0EsbUNBQ0EsbUNBSkYsQ0FBWUEsRUFBQSxFQUFBQSxjQUFBLEVBQUFBLFlBQVcsS0FXdkIsaUJBSUUsV0FDVXZ1RSxFQUNSMGdFLEVBQ1E5a0UsRUFDQThHLEdBSEEsS0FBQTFDLFVBRUEsS0FBQXBFLE9BQ0EsS0FBQThHLE9BRVI5RSxLQUFLK2xFLGdCQUFnQmpELEdBMkJ6QixPQXhCRSxZQUFBaUQsZ0JBQUEsU0FBZ0JqRCxHQUNkLElBQU12c0IsRUFBV3YyQyxLQUFLb0MsUUFBUTZ1RSxtQkFBbUJuTyxFQUFTOWlFLEtBQUtoQyxNQUMvRGdDLEtBQUtreEUsT0FBU0MsRUFBb0JueEUsS0FBSzhFLEtBQU05RSxLQUFLb0MsUUFBU20wQyxJQUc3RCxZQUFBNVcsU0FBQSxTQUFTK21DLEdBQ1AxbUUsS0FBS3RCLE1BQVFnb0UsR0FHZixZQUFBaEMsaUJBQUEsV0FDcUIsT0FBZjFrRSxLQUFLdEIsT0FDUHNCLEtBQUtreEUsT0FBT2x4RSxLQUFLdEIsUUFJckIsWUFBQTB5RSxlQUFBLFdBQ0UsT0FBT3B4RSxLQUFLOEUsTUFHZCxZQUFBdXNFLGVBQUEsV0FDRSxPQUFPcnhFLEtBQUtoQyxNQUdkLFlBQUEyZixRQUFBLGFBQ0YsRUFyQ0EsR0FBYSxFQUFBMnpELGNBdUNiLElBQU1ILEVBQXNCLFNBQzFCcnNFLEVBQ0ExQyxFQUNBbTBDLEdBRUEsT0FBUXp4QyxHQUNOLEtBQUs2ckUsRUFBWXBKLFdBQ2YsT0FBTyxTQUFDN29FLEdBQXdCLE9BQUEwRCxFQUFRbXZFLFVBQVMsTUFBakJudkUsRUFBTyxHQUFXbTBDLEdBQWE3M0MsS0FDakUsS0FBS2l5RSxFQUFZbkosV0FDZixPQUFPLFNBQUM5b0UsR0FBd0IsT0FBQTBELEVBQVFvdkUsVUFBUyxNQUFqQnB2RSxFQUFPLEdBQVdtMEMsR0FBYTczQyxLQUNqRSxLQUFLaXlFLEVBQVlsSixXQUNmLE9BQU8sU0FBQy9vRSxHQUF3QixPQUFBMEQsRUFBUXF2RSxVQUFTLE1BQWpCcnZFLEVBQU8sR0FBV20wQyxHQUFhNzNDLEtBQ2pFLEtBQUtpeUUsRUFBWUksV0FDZixPQUFPLFNBQUNyeUUsR0FDTixPQUFBMEQsRUFBUXN2RSxpQkFBaUJuN0IsR0FBVSxFQUFPNzNDLElBQzlDLFFBQ0UsRUFBQWdkLFlBQVk1VyxNLG9hQzFFbEIsY0FDQSxPQUNBLFFBRU1zN0IsRUFBZSxFQUFBcndCLE9BQU8sR0FBSSxHQUVuQixFQUFBaWhFLHFCQUF1QixTQUFDdnFFLEcsTUFHL0IsT0FDSix3QkFBQyxFQUFBdWtFLGlCQUFnQixLQUNYdmtFLEVBQUssQ0FDVHdrRSxLQUFNLEVBQ04vbkMsUUFBUyxFQUNUeGtDLE1BQWtCLFFBQWIsRUFBRStILEVBQU0vSCxhQUFLLFFBQUkwaEMsTyxrYUNkMUIsY0FDQSxRQUVNQSxFQUFlLENBQUMsRUFBRyxFQUFHLEVBQUcsR0FFbEIsRUFBQTB3QyxtQkFBcUIsU0FBQ3JxRSxHLE1BRzdCLE9BQ0osd0JBQUMsRUFBQXVrRSxpQkFBZ0IsS0FDWHZrRSxFQUFLLENBQ1R3a0UsS0FBTSxFQUNOL25DLFFBQVMsRUFDVHhrQyxNQUFrQixRQUFiLEVBQUUrSCxFQUFNL0gsYUFBSyxRQUFJMGhDLE8sa2FDYjFCLGNBQ0EsUUFFTUEsRUFBZSxDQUFDLEVBQUcsR0FFWixFQUFBd3dDLG1CQUFxQixTQUFDbnFFLEcsTUFHN0IsT0FDSix3QkFBQyxFQUFBdWtFLGlCQUFnQixLQUNYdmtFLEVBQUssQ0FDVHdrRSxLQUFNLEVBQ04vbkMsUUFBUyxFQUNUeGtDLE1BQWtCLFFBQWIsRUFBRStILEVBQU0vSCxhQUFLLFFBQUkwaEMsTyxrYUNiMUIsY0FDQSxRQUVNQSxFQUFlLENBQUMsRUFBRyxFQUFHLEdBRWYsRUFBQXl3QyxtQkFBcUIsU0FBQ3BxRSxHLE1BRzdCLE9BQ0osd0JBQUMsRUFBQXVrRSxpQkFBZ0IsS0FDWHZrRSxFQUFLLENBQ1R3a0UsS0FBTSxFQUNOL25DLFFBQVMsRUFDVHhrQyxNQUFrQixRQUFiLEVBQUUrSCxFQUFNL0gsYUFBSyxRQUFJMGhDLE8sb01DYjFCLGNBRWEsRUFBQStnQyx5QkFBMkIsU0FBQzE2RCxHQUN2QyxPQUFPLCtCQUFLNkgsVUFBVSw4QkFBOEI3SCxFQUFNMjZELFUsdVpDSDVELFdBQ0EsV0FDQSxXQUNBIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMzMpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgdmFyIFJlYWN0UmVkdXhDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFJlYWN0UmVkdXhDb250ZXh0LmRpc3BsYXlOYW1lID0gJ1JlYWN0UmVkdXgnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBSZWFjdFJlZHV4Q29udGV4dDsiLCIvLyBEZWZhdWx0IHRvIGEgZHVtbXkgXCJiYXRjaFwiIGltcGxlbWVudGF0aW9uIHRoYXQganVzdCBydW5zIHRoZSBjYWxsYmFja1xuZnVuY3Rpb24gZGVmYXVsdE5vb3BCYXRjaChjYWxsYmFjaykge1xuICBjYWxsYmFjaygpO1xufVxuXG52YXIgYmF0Y2ggPSBkZWZhdWx0Tm9vcEJhdGNoOyAvLyBBbGxvdyBpbmplY3RpbmcgYW5vdGhlciBiYXRjaGluZyBmdW5jdGlvbiBsYXRlclxuXG5leHBvcnQgdmFyIHNldEJhdGNoID0gZnVuY3Rpb24gc2V0QmF0Y2gobmV3QmF0Y2gpIHtcbiAgcmV0dXJuIGJhdGNoID0gbmV3QmF0Y2g7XG59OyAvLyBTdXBwbHkgYSBnZXR0ZXIganVzdCB0byBza2lwIGRlYWxpbmcgd2l0aCBFU00gYmluZGluZ3NcblxuZXhwb3J0IHZhciBnZXRCYXRjaCA9IGZ1bmN0aW9uIGdldEJhdGNoKCkge1xuICByZXR1cm4gYmF0Y2g7XG59OyIsImltcG9ydCB7IGdldEJhdGNoIH0gZnJvbSAnLi9iYXRjaCc7IC8vIGVuY2Fwc3VsYXRlcyB0aGUgc3Vic2NyaXB0aW9uIGxvZ2ljIGZvciBjb25uZWN0aW5nIGEgY29tcG9uZW50IHRvIHRoZSByZWR1eCBzdG9yZSwgYXNcbi8vIHdlbGwgYXMgbmVzdGluZyBzdWJzY3JpcHRpb25zIG9mIGRlc2NlbmRhbnQgY29tcG9uZW50cywgc28gdGhhdCB3ZSBjYW4gZW5zdXJlIHRoZVxuLy8gYW5jZXN0b3IgY29tcG9uZW50cyByZS1yZW5kZXIgYmVmb3JlIGRlc2NlbmRhbnRzXG5cbnZhciBudWxsTGlzdGVuZXJzID0ge1xuICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHt9XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24oKSB7XG4gIHZhciBiYXRjaCA9IGdldEJhdGNoKCk7XG4gIHZhciBmaXJzdCA9IG51bGw7XG4gIHZhciBsYXN0ID0gbnVsbDtcbiAgcmV0dXJuIHtcbiAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICBmaXJzdCA9IG51bGw7XG4gICAgICBsYXN0ID0gbnVsbDtcbiAgICB9LFxuICAgIG5vdGlmeTogZnVuY3Rpb24gbm90aWZ5KCkge1xuICAgICAgYmF0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbGlzdGVuZXIgPSBmaXJzdDtcblxuICAgICAgICB3aGlsZSAobGlzdGVuZXIpIHtcbiAgICAgICAgICBsaXN0ZW5lci5jYWxsYmFjaygpO1xuICAgICAgICAgIGxpc3RlbmVyID0gbGlzdGVuZXIubmV4dDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciBsaXN0ZW5lcnMgPSBbXTtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGZpcnN0O1xuXG4gICAgICB3aGlsZSAobGlzdGVuZXIpIHtcbiAgICAgICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgICAgICBsaXN0ZW5lciA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBsaXN0ZW5lcnM7XG4gICAgfSxcbiAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShjYWxsYmFjaykge1xuICAgICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgICB2YXIgbGlzdGVuZXIgPSBsYXN0ID0ge1xuICAgICAgICBjYWxsYmFjazogY2FsbGJhY2ssXG4gICAgICAgIG5leHQ6IG51bGwsXG4gICAgICAgIHByZXY6IGxhc3RcbiAgICAgIH07XG5cbiAgICAgIGlmIChsaXN0ZW5lci5wcmV2KSB7XG4gICAgICAgIGxpc3RlbmVyLnByZXYubmV4dCA9IGxpc3RlbmVyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmlyc3QgPSBsaXN0ZW5lcjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICBpZiAoIWlzU3Vic2NyaWJlZCB8fCBmaXJzdCA9PT0gbnVsbCkgcmV0dXJuO1xuICAgICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcblxuICAgICAgICBpZiAobGlzdGVuZXIubmV4dCkge1xuICAgICAgICAgIGxpc3RlbmVyLm5leHQucHJldiA9IGxpc3RlbmVyLnByZXY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGFzdCA9IGxpc3RlbmVyLnByZXY7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGlzdGVuZXIucHJldikge1xuICAgICAgICAgIGxpc3RlbmVyLnByZXYubmV4dCA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZmlyc3QgPSBsaXN0ZW5lci5uZXh0O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1cblxudmFyIFN1YnNjcmlwdGlvbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFN1YnNjcmlwdGlvbihzdG9yZSwgcGFyZW50U3ViKSB7XG4gICAgdGhpcy5zdG9yZSA9IHN0b3JlO1xuICAgIHRoaXMucGFyZW50U3ViID0gcGFyZW50U3ViO1xuICAgIHRoaXMudW5zdWJzY3JpYmUgPSBudWxsO1xuICAgIHRoaXMubGlzdGVuZXJzID0gbnVsbExpc3RlbmVycztcbiAgICB0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIgPSB0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIuYmluZCh0aGlzKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTdWJzY3JpcHRpb24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5hZGROZXN0ZWRTdWIgPSBmdW5jdGlvbiBhZGROZXN0ZWRTdWIobGlzdGVuZXIpIHtcbiAgICB0aGlzLnRyeVN1YnNjcmliZSgpO1xuICAgIHJldHVybiB0aGlzLmxpc3RlbmVycy5zdWJzY3JpYmUobGlzdGVuZXIpO1xuICB9O1xuXG4gIF9wcm90by5ub3RpZnlOZXN0ZWRTdWJzID0gZnVuY3Rpb24gbm90aWZ5TmVzdGVkU3VicygpIHtcbiAgICB0aGlzLmxpc3RlbmVycy5ub3RpZnkoKTtcbiAgfTtcblxuICBfcHJvdG8uaGFuZGxlQ2hhbmdlV3JhcHBlciA9IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZVdyYXBwZXIoKSB7XG4gICAgaWYgKHRoaXMub25TdGF0ZUNoYW5nZSkge1xuICAgICAgdGhpcy5vblN0YXRlQ2hhbmdlKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5pc1N1YnNjcmliZWQgPSBmdW5jdGlvbiBpc1N1YnNjcmliZWQoKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4odGhpcy51bnN1YnNjcmliZSk7XG4gIH07XG5cbiAgX3Byb3RvLnRyeVN1YnNjcmliZSA9IGZ1bmN0aW9uIHRyeVN1YnNjcmliZSgpIHtcbiAgICBpZiAoIXRoaXMudW5zdWJzY3JpYmUpIHtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUgPSB0aGlzLnBhcmVudFN1YiA/IHRoaXMucGFyZW50U3ViLmFkZE5lc3RlZFN1Yih0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIpIDogdGhpcy5zdG9yZS5zdWJzY3JpYmUodGhpcy5oYW5kbGVDaGFuZ2VXcmFwcGVyKTtcbiAgICAgIHRoaXMubGlzdGVuZXJzID0gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by50cnlVbnN1YnNjcmliZSA9IGZ1bmN0aW9uIHRyeVVuc3Vic2NyaWJlKCkge1xuICAgIGlmICh0aGlzLnVuc3Vic2NyaWJlKSB7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlID0gbnVsbDtcbiAgICAgIHRoaXMubGlzdGVuZXJzLmNsZWFyKCk7XG4gICAgICB0aGlzLmxpc3RlbmVycyA9IG51bGxMaXN0ZW5lcnM7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBTdWJzY3JpcHRpb247XG59KCk7XG5cbmV4cG9ydCB7IFN1YnNjcmlwdGlvbiBhcyBkZWZhdWx0IH07IiwiaW1wb3J0IFJlYWN0LCB7IHVzZU1lbW8sIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vQ29udGV4dCc7XG5pbXBvcnQgU3Vic2NyaXB0aW9uIGZyb20gJy4uL3V0aWxzL1N1YnNjcmlwdGlvbic7XG5cbmZ1bmN0aW9uIFByb3ZpZGVyKF9yZWYpIHtcbiAgdmFyIHN0b3JlID0gX3JlZi5zdG9yZSxcbiAgICAgIGNvbnRleHQgPSBfcmVmLmNvbnRleHQsXG4gICAgICBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW47XG4gIHZhciBjb250ZXh0VmFsdWUgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbihzdG9yZSk7XG4gICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBzdWJzY3JpcHRpb24ubm90aWZ5TmVzdGVkU3VicztcbiAgICByZXR1cm4ge1xuICAgICAgc3RvcmU6IHN0b3JlLFxuICAgICAgc3Vic2NyaXB0aW9uOiBzdWJzY3JpcHRpb25cbiAgICB9O1xuICB9LCBbc3RvcmVdKTtcbiAgdmFyIHByZXZpb3VzU3RhdGUgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgfSwgW3N0b3JlXSk7XG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IGNvbnRleHRWYWx1ZS5zdWJzY3JpcHRpb247XG4gICAgc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpO1xuXG4gICAgaWYgKHByZXZpb3VzU3RhdGUgIT09IHN0b3JlLmdldFN0YXRlKCkpIHtcbiAgICAgIHN1YnNjcmlwdGlvbi5ub3RpZnlOZXN0ZWRTdWJzKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHN1YnNjcmlwdGlvbi50cnlVbnN1YnNjcmliZSgpO1xuICAgICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBudWxsO1xuICAgIH07XG4gIH0sIFtjb250ZXh0VmFsdWUsIHByZXZpb3VzU3RhdGVdKTtcbiAgdmFyIENvbnRleHQgPSBjb250ZXh0IHx8IFJlYWN0UmVkdXhDb250ZXh0O1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBjb250ZXh0VmFsdWVcbiAgfSwgY2hpbGRyZW4pO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBQcm92aWRlci5wcm9wVHlwZXMgPSB7XG4gICAgc3RvcmU6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBzdWJzY3JpYmU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICBkaXNwYXRjaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIGdldFN0YXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gICAgfSksXG4gICAgY29udGV4dDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLmFueVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBQcm92aWRlcjsiLCJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZUxheW91dEVmZmVjdCB9IGZyb20gJ3JlYWN0JzsgLy8gUmVhY3QgY3VycmVudGx5IHRocm93cyBhIHdhcm5pbmcgd2hlbiB1c2luZyB1c2VMYXlvdXRFZmZlY3Qgb24gdGhlIHNlcnZlci5cbi8vIFRvIGdldCBhcm91bmQgaXQsIHdlIGNhbiBjb25kaXRpb25hbGx5IHVzZUVmZmVjdCBvbiB0aGUgc2VydmVyIChuby1vcCkgYW5kXG4vLyB1c2VMYXlvdXRFZmZlY3QgaW4gdGhlIGJyb3dzZXIuIFdlIG5lZWQgdXNlTGF5b3V0RWZmZWN0IHRvIGVuc3VyZSB0aGUgc3RvcmVcbi8vIHN1YnNjcmlwdGlvbiBjYWxsYmFjayBhbHdheXMgaGFzIHRoZSBzZWxlY3RvciBmcm9tIHRoZSBsYXRlc3QgcmVuZGVyIGNvbW1pdFxuLy8gYXZhaWxhYmxlLCBvdGhlcndpc2UgYSBzdG9yZSB1cGRhdGUgbWF5IGhhcHBlbiBiZXR3ZWVuIHJlbmRlciBhbmQgdGhlIGVmZmVjdCxcbi8vIHdoaWNoIG1heSBjYXVzZSBtaXNzZWQgdXBkYXRlczsgd2UgYWxzbyBtdXN0IGVuc3VyZSB0aGUgc3RvcmUgc3Vic2NyaXB0aW9uXG4vLyBpcyBjcmVhdGVkIHN5bmNocm9ub3VzbHksIG90aGVyd2lzZSBhIHN0b3JlIHVwZGF0ZSBtYXkgb2NjdXIgYmVmb3JlIHRoZVxuLy8gc3Vic2NyaXB0aW9uIGlzIGNyZWF0ZWQgYW5kIGFuIGluY29uc2lzdGVudCBzdGF0ZSBtYXkgYmUgb2JzZXJ2ZWRcblxuZXhwb3J0IHZhciB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50ICE9PSAndW5kZWZpbmVkJyA/IHVzZUxheW91dEVmZmVjdCA6IHVzZUVmZmVjdDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IGhvaXN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCwgdXNlTWVtbywgdXNlUmVmLCB1c2VSZWR1Y2VyIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgaXNWYWxpZEVsZW1lbnRUeXBlLCBpc0NvbnRleHRDb25zdW1lciB9IGZyb20gJ3JlYWN0LWlzJztcbmltcG9ydCBTdWJzY3JpcHRpb24gZnJvbSAnLi4vdXRpbHMvU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgfSBmcm9tICcuLi91dGlscy91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0JztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi9Db250ZXh0JzsgLy8gRGVmaW5lIHNvbWUgY29uc3RhbnQgYXJyYXlzIGp1c3QgdG8gYXZvaWQgcmUtY3JlYXRpbmcgdGhlc2VcblxudmFyIEVNUFRZX0FSUkFZID0gW107XG52YXIgTk9fU1VCU0NSSVBUSU9OX0FSUkFZID0gW251bGwsIG51bGxdO1xuXG52YXIgc3RyaW5naWZ5Q29tcG9uZW50ID0gZnVuY3Rpb24gc3RyaW5naWZ5Q29tcG9uZW50KENvbXApIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoQ29tcCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBTdHJpbmcoQ29tcCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHN0b3JlU3RhdGVVcGRhdGVzUmVkdWNlcihzdGF0ZSwgYWN0aW9uKSB7XG4gIHZhciB1cGRhdGVDb3VudCA9IHN0YXRlWzFdO1xuICByZXR1cm4gW2FjdGlvbi5wYXlsb2FkLCB1cGRhdGVDb3VudCArIDFdO1xufVxuXG5mdW5jdGlvbiB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0V2l0aEFyZ3MoZWZmZWN0RnVuYywgZWZmZWN0QXJncywgZGVwZW5kZW5jaWVzKSB7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBlZmZlY3RGdW5jLmFwcGx5KHZvaWQgMCwgZWZmZWN0QXJncyk7XG4gIH0sIGRlcGVuZGVuY2llcyk7XG59XG5cbmZ1bmN0aW9uIGNhcHR1cmVXcmFwcGVyUHJvcHMobGFzdFdyYXBwZXJQcm9wcywgbGFzdENoaWxkUHJvcHMsIHJlbmRlcklzU2NoZWR1bGVkLCB3cmFwcGVyUHJvcHMsIGFjdHVhbENoaWxkUHJvcHMsIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUsIG5vdGlmeU5lc3RlZFN1YnMpIHtcbiAgLy8gV2Ugd2FudCB0byBjYXB0dXJlIHRoZSB3cmFwcGVyIHByb3BzIGFuZCBjaGlsZCBwcm9wcyB3ZSB1c2VkIGZvciBsYXRlciBjb21wYXJpc29uc1xuICBsYXN0V3JhcHBlclByb3BzLmN1cnJlbnQgPSB3cmFwcGVyUHJvcHM7XG4gIGxhc3RDaGlsZFByb3BzLmN1cnJlbnQgPSBhY3R1YWxDaGlsZFByb3BzO1xuICByZW5kZXJJc1NjaGVkdWxlZC5jdXJyZW50ID0gZmFsc2U7IC8vIElmIHRoZSByZW5kZXIgd2FzIGZyb20gYSBzdG9yZSB1cGRhdGUsIGNsZWFyIG91dCB0aGF0IHJlZmVyZW5jZSBhbmQgY2FzY2FkZSB0aGUgc3Vic2NyaWJlciB1cGRhdGVcblxuICBpZiAoY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50KSB7XG4gICAgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50ID0gbnVsbDtcbiAgICBub3RpZnlOZXN0ZWRTdWJzKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3Vic2NyaWJlVXBkYXRlcyhzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsIHN0b3JlLCBzdWJzY3JpcHRpb24sIGNoaWxkUHJvcHNTZWxlY3RvciwgbGFzdFdyYXBwZXJQcm9wcywgbGFzdENoaWxkUHJvcHMsIHJlbmRlcklzU2NoZWR1bGVkLCBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLCBub3RpZnlOZXN0ZWRTdWJzLCBmb3JjZUNvbXBvbmVudFVwZGF0ZURpc3BhdGNoKSB7XG4gIC8vIElmIHdlJ3JlIG5vdCBzdWJzY3JpYmVkIHRvIHRoZSBzdG9yZSwgbm90aGluZyB0byBkbyBoZXJlXG4gIGlmICghc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSByZXR1cm47IC8vIENhcHR1cmUgdmFsdWVzIGZvciBjaGVja2luZyBpZiBhbmQgd2hlbiB0aGlzIGNvbXBvbmVudCB1bm1vdW50c1xuXG4gIHZhciBkaWRVbnN1YnNjcmliZSA9IGZhbHNlO1xuICB2YXIgbGFzdFRocm93bkVycm9yID0gbnVsbDsgLy8gV2UnbGwgcnVuIHRoaXMgY2FsbGJhY2sgZXZlcnkgdGltZSBhIHN0b3JlIHN1YnNjcmlwdGlvbiB1cGRhdGUgcHJvcGFnYXRlcyB0byB0aGlzIGNvbXBvbmVudFxuXG4gIHZhciBjaGVja0ZvclVwZGF0ZXMgPSBmdW5jdGlvbiBjaGVja0ZvclVwZGF0ZXMoKSB7XG4gICAgaWYgKGRpZFVuc3Vic2NyaWJlKSB7XG4gICAgICAvLyBEb24ndCBydW4gc3RhbGUgbGlzdGVuZXJzLlxuICAgICAgLy8gUmVkdXggZG9lc24ndCBndWFyYW50ZWUgdW5zdWJzY3JpcHRpb25zIGhhcHBlbiB1bnRpbCBuZXh0IGRpc3BhdGNoLlxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBsYXRlc3RTdG9yZVN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICB2YXIgbmV3Q2hpbGRQcm9wcywgZXJyb3I7XG5cbiAgICB0cnkge1xuICAgICAgLy8gQWN0dWFsbHkgcnVuIHRoZSBzZWxlY3RvciB3aXRoIHRoZSBtb3N0IHJlY2VudCBzdG9yZSBzdGF0ZSBhbmQgd3JhcHBlciBwcm9wc1xuICAgICAgLy8gdG8gZGV0ZXJtaW5lIHdoYXQgdGhlIGNoaWxkIHByb3BzIHNob3VsZCBiZVxuICAgICAgbmV3Q2hpbGRQcm9wcyA9IGNoaWxkUHJvcHNTZWxlY3RvcihsYXRlc3RTdG9yZVN0YXRlLCBsYXN0V3JhcHBlclByb3BzLmN1cnJlbnQpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGVycm9yID0gZTtcbiAgICAgIGxhc3RUaHJvd25FcnJvciA9IGU7XG4gICAgfVxuXG4gICAgaWYgKCFlcnJvcikge1xuICAgICAgbGFzdFRocm93bkVycm9yID0gbnVsbDtcbiAgICB9IC8vIElmIHRoZSBjaGlsZCBwcm9wcyBoYXZlbid0IGNoYW5nZWQsIG5vdGhpbmcgdG8gZG8gaGVyZSAtIGNhc2NhZGUgdGhlIHN1YnNjcmlwdGlvbiB1cGRhdGVcblxuXG4gICAgaWYgKG5ld0NoaWxkUHJvcHMgPT09IGxhc3RDaGlsZFByb3BzLmN1cnJlbnQpIHtcbiAgICAgIGlmICghcmVuZGVySXNTY2hlZHVsZWQuY3VycmVudCkge1xuICAgICAgICBub3RpZnlOZXN0ZWRTdWJzKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFNhdmUgcmVmZXJlbmNlcyB0byB0aGUgbmV3IGNoaWxkIHByb3BzLiAgTm90ZSB0aGF0IHdlIHRyYWNrIHRoZSBcImNoaWxkIHByb3BzIGZyb20gc3RvcmUgdXBkYXRlXCJcbiAgICAgIC8vIGFzIGEgcmVmIGluc3RlYWQgb2YgYSB1c2VTdGF0ZS91c2VSZWR1Y2VyIGJlY2F1c2Ugd2UgbmVlZCBhIHdheSB0byBkZXRlcm1pbmUgaWYgdGhhdCB2YWx1ZSBoYXNcbiAgICAgIC8vIGJlZW4gcHJvY2Vzc2VkLiAgSWYgdGhpcyB3ZW50IGludG8gdXNlU3RhdGUvdXNlUmVkdWNlciwgd2UgY291bGRuJ3QgY2xlYXIgb3V0IHRoZSB2YWx1ZSB3aXRob3V0XG4gICAgICAvLyBmb3JjaW5nIGFub3RoZXIgcmUtcmVuZGVyLCB3aGljaCB3ZSBkb24ndCB3YW50LlxuICAgICAgbGFzdENoaWxkUHJvcHMuY3VycmVudCA9IG5ld0NoaWxkUHJvcHM7XG4gICAgICBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQgPSBuZXdDaGlsZFByb3BzO1xuICAgICAgcmVuZGVySXNTY2hlZHVsZWQuY3VycmVudCA9IHRydWU7IC8vIElmIHRoZSBjaGlsZCBwcm9wcyBfZGlkXyBjaGFuZ2UgKG9yIHdlIGNhdWdodCBhbiBlcnJvciksIHRoaXMgd3JhcHBlciBjb21wb25lbnQgbmVlZHMgdG8gcmUtcmVuZGVyXG5cbiAgICAgIGZvcmNlQ29tcG9uZW50VXBkYXRlRGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiAnU1RPUkVfVVBEQVRFRCcsXG4gICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICBlcnJvcjogZXJyb3JcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9OyAvLyBBY3R1YWxseSBzdWJzY3JpYmUgdG8gdGhlIG5lYXJlc3QgY29ubmVjdGVkIGFuY2VzdG9yIChvciBzdG9yZSlcblxuXG4gIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gY2hlY2tGb3JVcGRhdGVzO1xuICBzdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7IC8vIFB1bGwgZGF0YSBmcm9tIHRoZSBzdG9yZSBhZnRlciBmaXJzdCByZW5kZXIgaW4gY2FzZSB0aGUgc3RvcmUgaGFzXG4gIC8vIGNoYW5nZWQgc2luY2Ugd2UgYmVnYW4uXG5cbiAgY2hlY2tGb3JVcGRhdGVzKCk7XG5cbiAgdmFyIHVuc3Vic2NyaWJlV3JhcHBlciA9IGZ1bmN0aW9uIHVuc3Vic2NyaWJlV3JhcHBlcigpIHtcbiAgICBkaWRVbnN1YnNjcmliZSA9IHRydWU7XG4gICAgc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBudWxsO1xuXG4gICAgaWYgKGxhc3RUaHJvd25FcnJvcikge1xuICAgICAgLy8gSXQncyBwb3NzaWJsZSB0aGF0IHdlIGNhdWdodCBhbiBlcnJvciBkdWUgdG8gYSBiYWQgbWFwU3RhdGUgZnVuY3Rpb24sIGJ1dCB0aGVcbiAgICAgIC8vIHBhcmVudCByZS1yZW5kZXJlZCB3aXRob3V0IHRoaXMgY29tcG9uZW50IGFuZCB3ZSdyZSBhYm91dCB0byB1bm1vdW50LlxuICAgICAgLy8gVGhpcyBzaG91bGRuJ3QgaGFwcGVuIGFzIGxvbmcgYXMgd2UgZG8gdG9wLWRvd24gc3Vic2NyaXB0aW9ucyBjb3JyZWN0bHksIGJ1dFxuICAgICAgLy8gaWYgd2UgZXZlciBkbyB0aG9zZSB3cm9uZywgdGhpcyB0aHJvdyB3aWxsIHN1cmZhY2UgdGhlIGVycm9yIGluIG91ciB0ZXN0cy5cbiAgICAgIC8vIEluIHRoYXQgY2FzZSwgdGhyb3cgdGhlIGVycm9yIGZyb20gaGVyZSBzbyBpdCBkb2Vzbid0IGdldCBsb3N0LlxuICAgICAgdGhyb3cgbGFzdFRocm93bkVycm9yO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdW5zdWJzY3JpYmVXcmFwcGVyO1xufVxuXG52YXIgaW5pdFN0YXRlVXBkYXRlcyA9IGZ1bmN0aW9uIGluaXRTdGF0ZVVwZGF0ZXMoKSB7XG4gIHJldHVybiBbbnVsbCwgMF07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb25uZWN0QWR2YW5jZWQoXG4vKlxuICBzZWxlY3RvckZhY3RvcnkgaXMgYSBmdW5jIHRoYXQgaXMgcmVzcG9uc2libGUgZm9yIHJldHVybmluZyB0aGUgc2VsZWN0b3IgZnVuY3Rpb24gdXNlZCB0b1xuICBjb21wdXRlIG5ldyBwcm9wcyBmcm9tIHN0YXRlLCBwcm9wcywgYW5kIGRpc3BhdGNoLiBGb3IgZXhhbXBsZTpcbiAgICAgZXhwb3J0IGRlZmF1bHQgY29ubmVjdEFkdmFuY2VkKChkaXNwYXRjaCwgb3B0aW9ucykgPT4gKHN0YXRlLCBwcm9wcykgPT4gKHtcbiAgICAgIHRoaW5nOiBzdGF0ZS50aGluZ3NbcHJvcHMudGhpbmdJZF0sXG4gICAgICBzYXZlVGhpbmc6IGZpZWxkcyA9PiBkaXNwYXRjaChhY3Rpb25DcmVhdG9ycy5zYXZlVGhpbmcocHJvcHMudGhpbmdJZCwgZmllbGRzKSksXG4gICAgfSkpKFlvdXJDb21wb25lbnQpXG4gICBBY2Nlc3MgdG8gZGlzcGF0Y2ggaXMgcHJvdmlkZWQgdG8gdGhlIGZhY3Rvcnkgc28gc2VsZWN0b3JGYWN0b3JpZXMgY2FuIGJpbmQgYWN0aW9uQ3JlYXRvcnNcbiAgb3V0c2lkZSBvZiB0aGVpciBzZWxlY3RvciBhcyBhbiBvcHRpbWl6YXRpb24uIE9wdGlvbnMgcGFzc2VkIHRvIGNvbm5lY3RBZHZhbmNlZCBhcmUgcGFzc2VkIHRvXG4gIHRoZSBzZWxlY3RvckZhY3RvcnksIGFsb25nIHdpdGggZGlzcGxheU5hbWUgYW5kIFdyYXBwZWRDb21wb25lbnQsIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQuXG4gICBOb3RlIHRoYXQgc2VsZWN0b3JGYWN0b3J5IGlzIHJlc3BvbnNpYmxlIGZvciBhbGwgY2FjaGluZy9tZW1vaXphdGlvbiBvZiBpbmJvdW5kIGFuZCBvdXRib3VuZFxuICBwcm9wcy4gRG8gbm90IHVzZSBjb25uZWN0QWR2YW5jZWQgZGlyZWN0bHkgd2l0aG91dCBtZW1vaXppbmcgcmVzdWx0cyBiZXR3ZWVuIGNhbGxzIHRvIHlvdXJcbiAgc2VsZWN0b3IsIG90aGVyd2lzZSB0aGUgQ29ubmVjdCBjb21wb25lbnQgd2lsbCByZS1yZW5kZXIgb24gZXZlcnkgc3RhdGUgb3IgcHJvcHMgY2hhbmdlLlxuKi9cbnNlbGVjdG9yRmFjdG9yeSwgLy8gb3B0aW9ucyBvYmplY3Q6XG5fcmVmKSB7XG4gIGlmIChfcmVmID09PSB2b2lkIDApIHtcbiAgICBfcmVmID0ge307XG4gIH1cblxuICB2YXIgX3JlZjIgPSBfcmVmLFxuICAgICAgX3JlZjIkZ2V0RGlzcGxheU5hbWUgPSBfcmVmMi5nZXREaXNwbGF5TmFtZSxcbiAgICAgIGdldERpc3BsYXlOYW1lID0gX3JlZjIkZ2V0RGlzcGxheU5hbWUgPT09IHZvaWQgMCA/IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIFwiQ29ubmVjdEFkdmFuY2VkKFwiICsgbmFtZSArIFwiKVwiO1xuICB9IDogX3JlZjIkZ2V0RGlzcGxheU5hbWUsXG4gICAgICBfcmVmMiRtZXRob2ROYW1lID0gX3JlZjIubWV0aG9kTmFtZSxcbiAgICAgIG1ldGhvZE5hbWUgPSBfcmVmMiRtZXRob2ROYW1lID09PSB2b2lkIDAgPyAnY29ubmVjdEFkdmFuY2VkJyA6IF9yZWYyJG1ldGhvZE5hbWUsXG4gICAgICBfcmVmMiRyZW5kZXJDb3VudFByb3AgPSBfcmVmMi5yZW5kZXJDb3VudFByb3AsXG4gICAgICByZW5kZXJDb3VudFByb3AgPSBfcmVmMiRyZW5kZXJDb3VudFByb3AgPT09IHZvaWQgMCA/IHVuZGVmaW5lZCA6IF9yZWYyJHJlbmRlckNvdW50UHJvcCxcbiAgICAgIF9yZWYyJHNob3VsZEhhbmRsZVN0YSA9IF9yZWYyLnNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyxcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyA9IF9yZWYyJHNob3VsZEhhbmRsZVN0YSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYyJHNob3VsZEhhbmRsZVN0YSxcbiAgICAgIF9yZWYyJHN0b3JlS2V5ID0gX3JlZjIuc3RvcmVLZXksXG4gICAgICBzdG9yZUtleSA9IF9yZWYyJHN0b3JlS2V5ID09PSB2b2lkIDAgPyAnc3RvcmUnIDogX3JlZjIkc3RvcmVLZXksXG4gICAgICBfcmVmMiR3aXRoUmVmID0gX3JlZjIud2l0aFJlZixcbiAgICAgIHdpdGhSZWYgPSBfcmVmMiR3aXRoUmVmID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYyJHdpdGhSZWYsXG4gICAgICBfcmVmMiRmb3J3YXJkUmVmID0gX3JlZjIuZm9yd2FyZFJlZixcbiAgICAgIGZvcndhcmRSZWYgPSBfcmVmMiRmb3J3YXJkUmVmID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYyJGZvcndhcmRSZWYsXG4gICAgICBfcmVmMiRjb250ZXh0ID0gX3JlZjIuY29udGV4dCxcbiAgICAgIGNvbnRleHQgPSBfcmVmMiRjb250ZXh0ID09PSB2b2lkIDAgPyBSZWFjdFJlZHV4Q29udGV4dCA6IF9yZWYyJGNvbnRleHQsXG4gICAgICBjb25uZWN0T3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYyLCBbXCJnZXREaXNwbGF5TmFtZVwiLCBcIm1ldGhvZE5hbWVcIiwgXCJyZW5kZXJDb3VudFByb3BcIiwgXCJzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXNcIiwgXCJzdG9yZUtleVwiLCBcIndpdGhSZWZcIiwgXCJmb3J3YXJkUmVmXCIsIFwiY29udGV4dFwiXSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAocmVuZGVyQ291bnRQcm9wICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInJlbmRlckNvdW50UHJvcCBpcyByZW1vdmVkLiByZW5kZXIgY291bnRpbmcgaXMgYnVpbHQgaW50byB0aGUgbGF0ZXN0IFJlYWN0IERldiBUb29scyBwcm9maWxpbmcgZXh0ZW5zaW9uXCIpO1xuICAgIH1cblxuICAgIGlmICh3aXRoUmVmKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3dpdGhSZWYgaXMgcmVtb3ZlZC4gVG8gYWNjZXNzIHRoZSB3cmFwcGVkIGluc3RhbmNlLCB1c2UgYSByZWYgb24gdGhlIGNvbm5lY3RlZCBjb21wb25lbnQnKTtcbiAgICB9XG5cbiAgICB2YXIgY3VzdG9tU3RvcmVXYXJuaW5nTWVzc2FnZSA9ICdUbyB1c2UgYSBjdXN0b20gUmVkdXggc3RvcmUgZm9yIHNwZWNpZmljIGNvbXBvbmVudHMsIGNyZWF0ZSBhIGN1c3RvbSBSZWFjdCBjb250ZXh0IHdpdGggJyArIFwiUmVhY3QuY3JlYXRlQ29udGV4dCgpLCBhbmQgcGFzcyB0aGUgY29udGV4dCBvYmplY3QgdG8gUmVhY3QgUmVkdXgncyBQcm92aWRlciBhbmQgc3BlY2lmaWMgY29tcG9uZW50c1wiICsgJyBsaWtlOiA8UHJvdmlkZXIgY29udGV4dD17TXlDb250ZXh0fT48Q29ubmVjdGVkQ29tcG9uZW50IGNvbnRleHQ9e015Q29udGV4dH0gLz48L1Byb3ZpZGVyPi4gJyArICdZb3UgbWF5IGFsc28gcGFzcyBhIHtjb250ZXh0IDogTXlDb250ZXh0fSBvcHRpb24gdG8gY29ubmVjdCc7XG5cbiAgICBpZiAoc3RvcmVLZXkgIT09ICdzdG9yZScpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignc3RvcmVLZXkgaGFzIGJlZW4gcmVtb3ZlZCBhbmQgZG9lcyBub3QgZG8gYW55dGhpbmcuICcgKyBjdXN0b21TdG9yZVdhcm5pbmdNZXNzYWdlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgQ29udGV4dCA9IGNvbnRleHQ7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwV2l0aENvbm5lY3QoV3JhcHBlZENvbXBvbmVudCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFpc1ZhbGlkRWxlbWVudFR5cGUoV3JhcHBlZENvbXBvbmVudCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBtdXN0IHBhc3MgYSBjb21wb25lbnQgdG8gdGhlIGZ1bmN0aW9uIHJldHVybmVkIGJ5IFwiICsgKG1ldGhvZE5hbWUgKyBcIi4gSW5zdGVhZCByZWNlaXZlZCBcIiArIHN0cmluZ2lmeUNvbXBvbmVudChXcmFwcGVkQ29tcG9uZW50KSkpO1xuICAgIH1cblxuICAgIHZhciB3cmFwcGVkQ29tcG9uZW50TmFtZSA9IFdyYXBwZWRDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgV3JhcHBlZENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnO1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IGdldERpc3BsYXlOYW1lKHdyYXBwZWRDb21wb25lbnROYW1lKTtcblxuICAgIHZhciBzZWxlY3RvckZhY3RvcnlPcHRpb25zID0gX2V4dGVuZHMoe30sIGNvbm5lY3RPcHRpb25zLCB7XG4gICAgICBnZXREaXNwbGF5TmFtZTogZ2V0RGlzcGxheU5hbWUsXG4gICAgICBtZXRob2ROYW1lOiBtZXRob2ROYW1lLFxuICAgICAgcmVuZGVyQ291bnRQcm9wOiByZW5kZXJDb3VudFByb3AsXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXM6IHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyxcbiAgICAgIHN0b3JlS2V5OiBzdG9yZUtleSxcbiAgICAgIGRpc3BsYXlOYW1lOiBkaXNwbGF5TmFtZSxcbiAgICAgIHdyYXBwZWRDb21wb25lbnROYW1lOiB3cmFwcGVkQ29tcG9uZW50TmFtZSxcbiAgICAgIFdyYXBwZWRDb21wb25lbnQ6IFdyYXBwZWRDb21wb25lbnRcbiAgICB9KTtcblxuICAgIHZhciBwdXJlID0gY29ubmVjdE9wdGlvbnMucHVyZTtcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUNoaWxkU2VsZWN0b3Ioc3RvcmUpIHtcbiAgICAgIHJldHVybiBzZWxlY3RvckZhY3Rvcnkoc3RvcmUuZGlzcGF0Y2gsIHNlbGVjdG9yRmFjdG9yeU9wdGlvbnMpO1xuICAgIH0gLy8gSWYgd2UgYXJlbid0IHJ1bm5pbmcgaW4gXCJwdXJlXCIgbW9kZSwgd2UgZG9uJ3Qgd2FudCB0byBtZW1vaXplIHZhbHVlcy5cbiAgICAvLyBUbyBhdm9pZCBjb25kaXRpb25hbGx5IGNhbGxpbmcgaG9va3MsIHdlIGZhbGwgYmFjayB0byBhIHRpbnkgd3JhcHBlclxuICAgIC8vIHRoYXQganVzdCBleGVjdXRlcyB0aGUgZ2l2ZW4gY2FsbGJhY2sgaW1tZWRpYXRlbHkuXG5cblxuICAgIHZhciB1c2VQdXJlT25seU1lbW8gPSBwdXJlID8gdXNlTWVtbyA6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIENvbm5lY3RGdW5jdGlvbihwcm9wcykge1xuICAgICAgdmFyIF91c2VNZW1vID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIERpc3Rpbmd1aXNoIGJldHdlZW4gYWN0dWFsIFwiZGF0YVwiIHByb3BzIHRoYXQgd2VyZSBwYXNzZWQgdG8gdGhlIHdyYXBwZXIgY29tcG9uZW50LFxuICAgICAgICAvLyBhbmQgdmFsdWVzIG5lZWRlZCB0byBjb250cm9sIGJlaGF2aW9yIChmb3J3YXJkZWQgcmVmcywgYWx0ZXJuYXRlIGNvbnRleHQgaW5zdGFuY2VzKS5cbiAgICAgICAgLy8gVG8gbWFpbnRhaW4gdGhlIHdyYXBwZXJQcm9wcyBvYmplY3QgcmVmZXJlbmNlLCBtZW1vaXplIHRoaXMgZGVzdHJ1Y3R1cmluZy5cbiAgICAgICAgdmFyIHJlYWN0UmVkdXhGb3J3YXJkZWRSZWYgPSBwcm9wcy5yZWFjdFJlZHV4Rm9yd2FyZGVkUmVmLFxuICAgICAgICAgICAgd3JhcHBlclByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIFtcInJlYWN0UmVkdXhGb3J3YXJkZWRSZWZcIl0pO1xuXG4gICAgICAgIHJldHVybiBbcHJvcHMuY29udGV4dCwgcmVhY3RSZWR1eEZvcndhcmRlZFJlZiwgd3JhcHBlclByb3BzXTtcbiAgICAgIH0sIFtwcm9wc10pLFxuICAgICAgICAgIHByb3BzQ29udGV4dCA9IF91c2VNZW1vWzBdLFxuICAgICAgICAgIHJlYWN0UmVkdXhGb3J3YXJkZWRSZWYgPSBfdXNlTWVtb1sxXSxcbiAgICAgICAgICB3cmFwcGVyUHJvcHMgPSBfdXNlTWVtb1syXTtcblxuICAgICAgdmFyIENvbnRleHRUb1VzZSA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBVc2VycyBtYXkgb3B0aW9uYWxseSBwYXNzIGluIGEgY3VzdG9tIGNvbnRleHQgaW5zdGFuY2UgdG8gdXNlIGluc3RlYWQgb2Ygb3VyIFJlYWN0UmVkdXhDb250ZXh0LlxuICAgICAgICAvLyBNZW1vaXplIHRoZSBjaGVjayB0aGF0IGRldGVybWluZXMgd2hpY2ggY29udGV4dCBpbnN0YW5jZSB3ZSBzaG91bGQgdXNlLlxuICAgICAgICByZXR1cm4gcHJvcHNDb250ZXh0ICYmIHByb3BzQ29udGV4dC5Db25zdW1lciAmJiBpc0NvbnRleHRDb25zdW1lciggLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQocHJvcHNDb250ZXh0LkNvbnN1bWVyLCBudWxsKSkgPyBwcm9wc0NvbnRleHQgOiBDb250ZXh0O1xuICAgICAgfSwgW3Byb3BzQ29udGV4dCwgQ29udGV4dF0pOyAvLyBSZXRyaWV2ZSB0aGUgc3RvcmUgYW5kIGFuY2VzdG9yIHN1YnNjcmlwdGlvbiB2aWEgY29udGV4dCwgaWYgYXZhaWxhYmxlXG5cbiAgICAgIHZhciBjb250ZXh0VmFsdWUgPSB1c2VDb250ZXh0KENvbnRleHRUb1VzZSk7IC8vIFRoZSBzdG9yZSBfbXVzdF8gZXhpc3QgYXMgZWl0aGVyIGEgcHJvcCBvciBpbiBjb250ZXh0LlxuICAgICAgLy8gV2UnbGwgY2hlY2sgdG8gc2VlIGlmIGl0IF9sb29rc18gbGlrZSBhIFJlZHV4IHN0b3JlIGZpcnN0LlxuICAgICAgLy8gVGhpcyBhbGxvd3MgdXMgdG8gcGFzcyB0aHJvdWdoIGEgYHN0b3JlYCBwcm9wIHRoYXQgaXMganVzdCBhIHBsYWluIHZhbHVlLlxuXG4gICAgICB2YXIgZGlkU3RvcmVDb21lRnJvbVByb3BzID0gQm9vbGVhbihwcm9wcy5zdG9yZSkgJiYgQm9vbGVhbihwcm9wcy5zdG9yZS5nZXRTdGF0ZSkgJiYgQm9vbGVhbihwcm9wcy5zdG9yZS5kaXNwYXRjaCk7XG4gICAgICB2YXIgZGlkU3RvcmVDb21lRnJvbUNvbnRleHQgPSBCb29sZWFuKGNvbnRleHRWYWx1ZSkgJiYgQm9vbGVhbihjb250ZXh0VmFsdWUuc3RvcmUpO1xuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhZGlkU3RvcmVDb21lRnJvbVByb3BzICYmICFkaWRTdG9yZUNvbWVGcm9tQ29udGV4dCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3QgZmluZCBcXFwic3RvcmVcXFwiIGluIHRoZSBjb250ZXh0IG9mIFwiICsgKFwiXFxcIlwiICsgZGlzcGxheU5hbWUgKyBcIlxcXCIuIEVpdGhlciB3cmFwIHRoZSByb290IGNvbXBvbmVudCBpbiBhIDxQcm92aWRlcj4sIFwiKSArIFwib3IgcGFzcyBhIGN1c3RvbSBSZWFjdCBjb250ZXh0IHByb3ZpZGVyIHRvIDxQcm92aWRlcj4gYW5kIHRoZSBjb3JyZXNwb25kaW5nIFwiICsgKFwiUmVhY3QgY29udGV4dCBjb25zdW1lciB0byBcIiArIGRpc3BsYXlOYW1lICsgXCIgaW4gY29ubmVjdCBvcHRpb25zLlwiKSk7XG4gICAgICB9IC8vIEJhc2VkIG9uIHRoZSBwcmV2aW91cyBjaGVjaywgb25lIG9mIHRoZXNlIG11c3QgYmUgdHJ1ZVxuXG5cbiAgICAgIHZhciBzdG9yZSA9IGRpZFN0b3JlQ29tZUZyb21Qcm9wcyA/IHByb3BzLnN0b3JlIDogY29udGV4dFZhbHVlLnN0b3JlO1xuICAgICAgdmFyIGNoaWxkUHJvcHNTZWxlY3RvciA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBUaGUgY2hpbGQgcHJvcHMgc2VsZWN0b3IgbmVlZHMgdGhlIHN0b3JlIHJlZmVyZW5jZSBhcyBhbiBpbnB1dC5cbiAgICAgICAgLy8gUmUtY3JlYXRlIHRoaXMgc2VsZWN0b3Igd2hlbmV2ZXIgdGhlIHN0b3JlIGNoYW5nZXMuXG4gICAgICAgIHJldHVybiBjcmVhdGVDaGlsZFNlbGVjdG9yKHN0b3JlKTtcbiAgICAgIH0sIFtzdG9yZV0pO1xuXG4gICAgICB2YXIgX3VzZU1lbW8yID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSByZXR1cm4gTk9fU1VCU0NSSVBUSU9OX0FSUkFZOyAvLyBUaGlzIFN1YnNjcmlwdGlvbidzIHNvdXJjZSBzaG91bGQgbWF0Y2ggd2hlcmUgc3RvcmUgY2FtZSBmcm9tOiBwcm9wcyB2cy4gY29udGV4dC4gQSBjb21wb25lbnRcbiAgICAgICAgLy8gY29ubmVjdGVkIHRvIHRoZSBzdG9yZSB2aWEgcHJvcHMgc2hvdWxkbid0IHVzZSBzdWJzY3JpcHRpb24gZnJvbSBjb250ZXh0LCBvciB2aWNlIHZlcnNhLlxuXG4gICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKHN0b3JlLCBkaWRTdG9yZUNvbWVGcm9tUHJvcHMgPyBudWxsIDogY29udGV4dFZhbHVlLnN1YnNjcmlwdGlvbik7IC8vIGBub3RpZnlOZXN0ZWRTdWJzYCBpcyBkdXBsaWNhdGVkIHRvIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSB0aGUgY29tcG9uZW50IGlzIHVubW91bnRlZCBpblxuICAgICAgICAvLyB0aGUgbWlkZGxlIG9mIHRoZSBub3RpZmljYXRpb24gbG9vcCwgd2hlcmUgYHN1YnNjcmlwdGlvbmAgd2lsbCB0aGVuIGJlIG51bGwuIFRoaXMgY2FuXG4gICAgICAgIC8vIHByb2JhYmx5IGJlIGF2b2lkZWQgaWYgU3Vic2NyaXB0aW9uJ3MgbGlzdGVuZXJzIGxvZ2ljIGlzIGNoYW5nZWQgdG8gbm90IGNhbGwgbGlzdGVuZXJzXG4gICAgICAgIC8vIHRoYXQgaGF2ZSBiZWVuIHVuc3Vic2NyaWJlZCBpbiB0aGUgIG1pZGRsZSBvZiB0aGUgbm90aWZpY2F0aW9uIGxvb3AuXG5cbiAgICAgICAgdmFyIG5vdGlmeU5lc3RlZFN1YnMgPSBzdWJzY3JpcHRpb24ubm90aWZ5TmVzdGVkU3Vicy5iaW5kKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIHJldHVybiBbc3Vic2NyaXB0aW9uLCBub3RpZnlOZXN0ZWRTdWJzXTtcbiAgICAgIH0sIFtzdG9yZSwgZGlkU3RvcmVDb21lRnJvbVByb3BzLCBjb250ZXh0VmFsdWVdKSxcbiAgICAgICAgICBzdWJzY3JpcHRpb24gPSBfdXNlTWVtbzJbMF0sXG4gICAgICAgICAgbm90aWZ5TmVzdGVkU3VicyA9IF91c2VNZW1vMlsxXTsgLy8gRGV0ZXJtaW5lIHdoYXQge3N0b3JlLCBzdWJzY3JpcHRpb259IHZhbHVlIHNob3VsZCBiZSBwdXQgaW50byBuZXN0ZWQgY29udGV4dCwgaWYgbmVjZXNzYXJ5LFxuICAgICAgLy8gYW5kIG1lbW9pemUgdGhhdCB2YWx1ZSB0byBhdm9pZCB1bm5lY2Vzc2FyeSBjb250ZXh0IHVwZGF0ZXMuXG5cblxuICAgICAgdmFyIG92ZXJyaWRkZW5Db250ZXh0VmFsdWUgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGRpZFN0b3JlQ29tZUZyb21Qcm9wcykge1xuICAgICAgICAgIC8vIFRoaXMgY29tcG9uZW50IGlzIGRpcmVjdGx5IHN1YnNjcmliZWQgdG8gYSBzdG9yZSBmcm9tIHByb3BzLlxuICAgICAgICAgIC8vIFdlIGRvbid0IHdhbnQgZGVzY2VuZGFudHMgcmVhZGluZyBmcm9tIHRoaXMgc3RvcmUgLSBwYXNzIGRvd24gd2hhdGV2ZXJcbiAgICAgICAgICAvLyB0aGUgZXhpc3RpbmcgY29udGV4dCB2YWx1ZSBpcyBmcm9tIHRoZSBuZWFyZXN0IGNvbm5lY3RlZCBhbmNlc3Rvci5cbiAgICAgICAgICByZXR1cm4gY29udGV4dFZhbHVlO1xuICAgICAgICB9IC8vIE90aGVyd2lzZSwgcHV0IHRoaXMgY29tcG9uZW50J3Mgc3Vic2NyaXB0aW9uIGluc3RhbmNlIGludG8gY29udGV4dCwgc28gdGhhdFxuICAgICAgICAvLyBjb25uZWN0ZWQgZGVzY2VuZGFudHMgd29uJ3QgdXBkYXRlIHVudGlsIGFmdGVyIHRoaXMgY29tcG9uZW50IGlzIGRvbmVcblxuXG4gICAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgY29udGV4dFZhbHVlLCB7XG4gICAgICAgICAgc3Vic2NyaXB0aW9uOiBzdWJzY3JpcHRpb25cbiAgICAgICAgfSk7XG4gICAgICB9LCBbZGlkU3RvcmVDb21lRnJvbVByb3BzLCBjb250ZXh0VmFsdWUsIHN1YnNjcmlwdGlvbl0pOyAvLyBXZSBuZWVkIHRvIGZvcmNlIHRoaXMgd3JhcHBlciBjb21wb25lbnQgdG8gcmUtcmVuZGVyIHdoZW5ldmVyIGEgUmVkdXggc3RvcmUgdXBkYXRlXG4gICAgICAvLyBjYXVzZXMgYSBjaGFuZ2UgdG8gdGhlIGNhbGN1bGF0ZWQgY2hpbGQgY29tcG9uZW50IHByb3BzIChvciB3ZSBjYXVnaHQgYW4gZXJyb3IgaW4gbWFwU3RhdGUpXG5cbiAgICAgIHZhciBfdXNlUmVkdWNlciA9IHVzZVJlZHVjZXIoc3RvcmVTdGF0ZVVwZGF0ZXNSZWR1Y2VyLCBFTVBUWV9BUlJBWSwgaW5pdFN0YXRlVXBkYXRlcyksXG4gICAgICAgICAgX3VzZVJlZHVjZXIkID0gX3VzZVJlZHVjZXJbMF0sXG4gICAgICAgICAgcHJldmlvdXNTdGF0ZVVwZGF0ZVJlc3VsdCA9IF91c2VSZWR1Y2VyJFswXSxcbiAgICAgICAgICBmb3JjZUNvbXBvbmVudFVwZGF0ZURpc3BhdGNoID0gX3VzZVJlZHVjZXJbMV07IC8vIFByb3BhZ2F0ZSBhbnkgbWFwU3RhdGUvbWFwRGlzcGF0Y2ggZXJyb3JzIHVwd2FyZHNcblxuXG4gICAgICBpZiAocHJldmlvdXNTdGF0ZVVwZGF0ZVJlc3VsdCAmJiBwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0LmVycm9yKSB7XG4gICAgICAgIHRocm93IHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQuZXJyb3I7XG4gICAgICB9IC8vIFNldCB1cCByZWZzIHRvIGNvb3JkaW5hdGUgdmFsdWVzIGJldHdlZW4gdGhlIHN1YnNjcmlwdGlvbiBlZmZlY3QgYW5kIHRoZSByZW5kZXIgbG9naWNcblxuXG4gICAgICB2YXIgbGFzdENoaWxkUHJvcHMgPSB1c2VSZWYoKTtcbiAgICAgIHZhciBsYXN0V3JhcHBlclByb3BzID0gdXNlUmVmKHdyYXBwZXJQcm9wcyk7XG4gICAgICB2YXIgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSA9IHVzZVJlZigpO1xuICAgICAgdmFyIHJlbmRlcklzU2NoZWR1bGVkID0gdXNlUmVmKGZhbHNlKTtcbiAgICAgIHZhciBhY3R1YWxDaGlsZFByb3BzID0gdXNlUHVyZU9ubHlNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gVHJpY2t5IGxvZ2ljIGhlcmU6XG4gICAgICAgIC8vIC0gVGhpcyByZW5kZXIgbWF5IGhhdmUgYmVlbiB0cmlnZ2VyZWQgYnkgYSBSZWR1eCBzdG9yZSB1cGRhdGUgdGhhdCBwcm9kdWNlZCBuZXcgY2hpbGQgcHJvcHNcbiAgICAgICAgLy8gLSBIb3dldmVyLCB3ZSBtYXkgaGF2ZSBnb3R0ZW4gbmV3IHdyYXBwZXIgcHJvcHMgYWZ0ZXIgdGhhdFxuICAgICAgICAvLyBJZiB3ZSBoYXZlIG5ldyBjaGlsZCBwcm9wcywgYW5kIHRoZSBzYW1lIHdyYXBwZXIgcHJvcHMsIHdlIGtub3cgd2Ugc2hvdWxkIHVzZSB0aGUgbmV3IGNoaWxkIHByb3BzIGFzLWlzLlxuICAgICAgICAvLyBCdXQsIGlmIHdlIGhhdmUgbmV3IHdyYXBwZXIgcHJvcHMsIHRob3NlIG1pZ2h0IGNoYW5nZSB0aGUgY2hpbGQgcHJvcHMsIHNvIHdlIGhhdmUgdG8gcmVjYWxjdWxhdGUgdGhpbmdzLlxuICAgICAgICAvLyBTbywgd2UnbGwgdXNlIHRoZSBjaGlsZCBwcm9wcyBmcm9tIHN0b3JlIHVwZGF0ZSBvbmx5IGlmIHRoZSB3cmFwcGVyIHByb3BzIGFyZSB0aGUgc2FtZSBhcyBsYXN0IHRpbWUuXG4gICAgICAgIGlmIChjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQgJiYgd3JhcHBlclByb3BzID09PSBsYXN0V3JhcHBlclByb3BzLmN1cnJlbnQpIHtcbiAgICAgICAgICByZXR1cm4gY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50O1xuICAgICAgICB9IC8vIFRPRE8gV2UncmUgcmVhZGluZyB0aGUgc3RvcmUgZGlyZWN0bHkgaW4gcmVuZGVyKCkgaGVyZS4gQmFkIGlkZWE/XG4gICAgICAgIC8vIFRoaXMgd2lsbCBsaWtlbHkgY2F1c2UgQmFkIFRoaW5ncyAoVE0pIHRvIGhhcHBlbiBpbiBDb25jdXJyZW50IE1vZGUuXG4gICAgICAgIC8vIE5vdGUgdGhhdCB3ZSBkbyB0aGlzIGJlY2F1c2Ugb24gcmVuZGVycyBfbm90XyBjYXVzZWQgYnkgc3RvcmUgdXBkYXRlcywgd2UgbmVlZCB0aGUgbGF0ZXN0IHN0b3JlIHN0YXRlXG4gICAgICAgIC8vIHRvIGRldGVybWluZSB3aGF0IHRoZSBjaGlsZCBwcm9wcyBzaG91bGQgYmUuXG5cblxuICAgICAgICByZXR1cm4gY2hpbGRQcm9wc1NlbGVjdG9yKHN0b3JlLmdldFN0YXRlKCksIHdyYXBwZXJQcm9wcyk7XG4gICAgICB9LCBbc3RvcmUsIHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQsIHdyYXBwZXJQcm9wc10pOyAvLyBXZSBuZWVkIHRoaXMgdG8gZXhlY3V0ZSBzeW5jaHJvbm91c2x5IGV2ZXJ5IHRpbWUgd2UgcmUtcmVuZGVyLiBIb3dldmVyLCBSZWFjdCB3YXJuc1xuICAgICAgLy8gYWJvdXQgdXNlTGF5b3V0RWZmZWN0IGluIFNTUiwgc28gd2UgdHJ5IHRvIGRldGVjdCBlbnZpcm9ubWVudCBhbmQgZmFsbCBiYWNrIHRvXG4gICAgICAvLyBqdXN0IHVzZUVmZmVjdCBpbnN0ZWFkIHRvIGF2b2lkIHRoZSB3YXJuaW5nLCBzaW5jZSBuZWl0aGVyIHdpbGwgcnVuIGFueXdheS5cblxuICAgICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdFdpdGhBcmdzKGNhcHR1cmVXcmFwcGVyUHJvcHMsIFtsYXN0V3JhcHBlclByb3BzLCBsYXN0Q2hpbGRQcm9wcywgcmVuZGVySXNTY2hlZHVsZWQsIHdyYXBwZXJQcm9wcywgYWN0dWFsQ2hpbGRQcm9wcywgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSwgbm90aWZ5TmVzdGVkU3Vic10pOyAvLyBPdXIgcmUtc3Vic2NyaWJlIGxvZ2ljIG9ubHkgcnVucyB3aGVuIHRoZSBzdG9yZS9zdWJzY3JpcHRpb24gc2V0dXAgY2hhbmdlc1xuXG4gICAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0V2l0aEFyZ3Moc3Vic2NyaWJlVXBkYXRlcywgW3Nob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcywgc3RvcmUsIHN1YnNjcmlwdGlvbiwgY2hpbGRQcm9wc1NlbGVjdG9yLCBsYXN0V3JhcHBlclByb3BzLCBsYXN0Q2hpbGRQcm9wcywgcmVuZGVySXNTY2hlZHVsZWQsIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUsIG5vdGlmeU5lc3RlZFN1YnMsIGZvcmNlQ29tcG9uZW50VXBkYXRlRGlzcGF0Y2hdLCBbc3RvcmUsIHN1YnNjcmlwdGlvbiwgY2hpbGRQcm9wc1NlbGVjdG9yXSk7IC8vIE5vdyB0aGF0IGFsbCB0aGF0J3MgZG9uZSwgd2UgY2FuIGZpbmFsbHkgdHJ5IHRvIGFjdHVhbGx5IHJlbmRlciB0aGUgY2hpbGQgY29tcG9uZW50LlxuICAgICAgLy8gV2UgbWVtb2l6ZSB0aGUgZWxlbWVudHMgZm9yIHRoZSByZW5kZXJlZCBjaGlsZCBjb21wb25lbnQgYXMgYW4gb3B0aW1pemF0aW9uLlxuXG4gICAgICB2YXIgcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50ID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChXcmFwcGVkQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgYWN0dWFsQ2hpbGRQcm9wcywge1xuICAgICAgICAgIHJlZjogcmVhY3RSZWR1eEZvcndhcmRlZFJlZlxuICAgICAgICB9KSk7XG4gICAgICB9LCBbcmVhY3RSZWR1eEZvcndhcmRlZFJlZiwgV3JhcHBlZENvbXBvbmVudCwgYWN0dWFsQ2hpbGRQcm9wc10pOyAvLyBJZiBSZWFjdCBzZWVzIHRoZSBleGFjdCBzYW1lIGVsZW1lbnQgcmVmZXJlbmNlIGFzIGxhc3QgdGltZSwgaXQgYmFpbHMgb3V0IG9mIHJlLXJlbmRlcmluZ1xuICAgICAgLy8gdGhhdCBjaGlsZCwgc2FtZSBhcyBpZiBpdCB3YXMgd3JhcHBlZCBpbiBSZWFjdC5tZW1vKCkgb3IgcmV0dXJuZWQgZmFsc2UgZnJvbSBzaG91bGRDb21wb25lbnRVcGRhdGUuXG5cbiAgICAgIHZhciByZW5kZXJlZENoaWxkID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHtcbiAgICAgICAgICAvLyBJZiB0aGlzIGNvbXBvbmVudCBpcyBzdWJzY3JpYmVkIHRvIHN0b3JlIHVwZGF0ZXMsIHdlIG5lZWQgdG8gcGFzcyBpdHMgb3duXG4gICAgICAgICAgLy8gc3Vic2NyaXB0aW9uIGluc3RhbmNlIGRvd24gdG8gb3VyIGRlc2NlbmRhbnRzLiBUaGF0IG1lYW5zIHJlbmRlcmluZyB0aGUgc2FtZVxuICAgICAgICAgIC8vIENvbnRleHQgaW5zdGFuY2UsIGFuZCBwdXR0aW5nIGEgZGlmZmVyZW50IHZhbHVlIGludG8gdGhlIGNvbnRleHQuXG4gICAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbnRleHRUb1VzZS5Qcm92aWRlciwge1xuICAgICAgICAgICAgdmFsdWU6IG92ZXJyaWRkZW5Db250ZXh0VmFsdWVcbiAgICAgICAgICB9LCByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlbmRlcmVkV3JhcHBlZENvbXBvbmVudDtcbiAgICAgIH0sIFtDb250ZXh0VG9Vc2UsIHJlbmRlcmVkV3JhcHBlZENvbXBvbmVudCwgb3ZlcnJpZGRlbkNvbnRleHRWYWx1ZV0pO1xuICAgICAgcmV0dXJuIHJlbmRlcmVkQ2hpbGQ7XG4gICAgfSAvLyBJZiB3ZSdyZSBpbiBcInB1cmVcIiBtb2RlLCBlbnN1cmUgb3VyIHdyYXBwZXIgY29tcG9uZW50IG9ubHkgcmUtcmVuZGVycyB3aGVuIGluY29taW5nIHByb3BzIGhhdmUgY2hhbmdlZC5cblxuXG4gICAgdmFyIENvbm5lY3QgPSBwdXJlID8gUmVhY3QubWVtbyhDb25uZWN0RnVuY3Rpb24pIDogQ29ubmVjdEZ1bmN0aW9uO1xuICAgIENvbm5lY3QuV3JhcHBlZENvbXBvbmVudCA9IFdyYXBwZWRDb21wb25lbnQ7XG4gICAgQ29ubmVjdC5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuXG4gICAgaWYgKGZvcndhcmRSZWYpIHtcbiAgICAgIHZhciBmb3J3YXJkZWQgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIGZvcndhcmRDb25uZWN0UmVmKHByb3BzLCByZWYpIHtcbiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbm5lY3QsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICAgIHJlYWN0UmVkdXhGb3J3YXJkZWRSZWY6IHJlZlxuICAgICAgICB9KSk7XG4gICAgICB9KTtcbiAgICAgIGZvcndhcmRlZC5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICAgICAgZm9yd2FyZGVkLldyYXBwZWRDb21wb25lbnQgPSBXcmFwcGVkQ29tcG9uZW50O1xuICAgICAgcmV0dXJuIGhvaXN0U3RhdGljcyhmb3J3YXJkZWQsIFdyYXBwZWRDb21wb25lbnQpO1xuICAgIH1cblxuICAgIHJldHVybiBob2lzdFN0YXRpY3MoQ29ubmVjdCwgV3JhcHBlZENvbXBvbmVudCk7XG4gIH07XG59IiwiZnVuY3Rpb24gaXMoeCwgeSkge1xuICBpZiAoeCA9PT0geSkge1xuICAgIHJldHVybiB4ICE9PSAwIHx8IHkgIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG9iakEsIG9iakIpIHtcbiAgaWYgKGlzKG9iakEsIG9iakIpKSByZXR1cm4gdHJ1ZTtcblxuICBpZiAodHlwZW9mIG9iakEgIT09ICdvYmplY3QnIHx8IG9iakEgPT09IG51bGwgfHwgdHlwZW9mIG9iakIgIT09ICdvYmplY3QnIHx8IG9iakIgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmpCLCBrZXlzQVtpXSkgfHwgIWlzKG9iakFba2V5c0FbaV1dLCBvYmpCW2tleXNBW2ldXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn0iLCJpbXBvcnQgdmVyaWZ5UGxhaW5PYmplY3QgZnJvbSAnLi4vdXRpbHMvdmVyaWZ5UGxhaW5PYmplY3QnO1xuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZ2V0Q29uc3RhbnQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRDb25zdGFudFNlbGVjdG9yKGRpc3BhdGNoLCBvcHRpb25zKSB7XG4gICAgdmFyIGNvbnN0YW50ID0gZ2V0Q29uc3RhbnQoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuXG4gICAgZnVuY3Rpb24gY29uc3RhbnRTZWxlY3RvcigpIHtcbiAgICAgIHJldHVybiBjb25zdGFudDtcbiAgICB9XG5cbiAgICBjb25zdGFudFNlbGVjdG9yLmRlcGVuZHNPbk93blByb3BzID0gZmFsc2U7XG4gICAgcmV0dXJuIGNvbnN0YW50U2VsZWN0b3I7XG4gIH07XG59IC8vIGRlcGVuZHNPbk93blByb3BzIGlzIHVzZWQgYnkgY3JlYXRlTWFwVG9Qcm9wc1Byb3h5IHRvIGRldGVybWluZSB3aGV0aGVyIHRvIHBhc3MgcHJvcHMgYXMgYXJnc1xuLy8gdG8gdGhlIG1hcFRvUHJvcHMgZnVuY3Rpb24gYmVpbmcgd3JhcHBlZC4gSXQgaXMgYWxzbyB1c2VkIGJ5IG1ha2VQdXJlUHJvcHNTZWxlY3RvciB0byBkZXRlcm1pbmVcbi8vIHdoZXRoZXIgbWFwVG9Qcm9wcyBuZWVkcyB0byBiZSBpbnZva2VkIHdoZW4gcHJvcHMgaGF2ZSBjaGFuZ2VkLlxuLy9cbi8vIEEgbGVuZ3RoIG9mIG9uZSBzaWduYWxzIHRoYXQgbWFwVG9Qcm9wcyBkb2VzIG5vdCBkZXBlbmQgb24gcHJvcHMgZnJvbSB0aGUgcGFyZW50IGNvbXBvbmVudC5cbi8vIEEgbGVuZ3RoIG9mIHplcm8gaXMgYXNzdW1lZCB0byBtZWFuIG1hcFRvUHJvcHMgaXMgZ2V0dGluZyBhcmdzIHZpYSBhcmd1bWVudHMgb3IgLi4uYXJncyBhbmRcbi8vIHRoZXJlZm9yZSBub3QgcmVwb3J0aW5nIGl0cyBsZW5ndGggYWNjdXJhdGVseS4uXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREZXBlbmRzT25Pd25Qcm9wcyhtYXBUb1Byb3BzKSB7XG4gIHJldHVybiBtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzICE9PSBudWxsICYmIG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMgIT09IHVuZGVmaW5lZCA/IEJvb2xlYW4obWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgOiBtYXBUb1Byb3BzLmxlbmd0aCAhPT0gMTtcbn0gLy8gVXNlZCBieSB3aGVuTWFwU3RhdGVUb1Byb3BzSXNGdW5jdGlvbiBhbmQgd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzRnVuY3Rpb24sXG4vLyB0aGlzIGZ1bmN0aW9uIHdyYXBzIG1hcFRvUHJvcHMgaW4gYSBwcm94eSBmdW5jdGlvbiB3aGljaCBkb2VzIHNldmVyYWwgdGhpbmdzOlxuLy9cbi8vICAqIERldGVjdHMgd2hldGhlciB0aGUgbWFwVG9Qcm9wcyBmdW5jdGlvbiBiZWluZyBjYWxsZWQgZGVwZW5kcyBvbiBwcm9wcywgd2hpY2hcbi8vICAgIGlzIHVzZWQgYnkgc2VsZWN0b3JGYWN0b3J5IHRvIGRlY2lkZSBpZiBpdCBzaG91bGQgcmVpbnZva2Ugb24gcHJvcHMgY2hhbmdlcy5cbi8vXG4vLyAgKiBPbiBmaXJzdCBjYWxsLCBoYW5kbGVzIG1hcFRvUHJvcHMgaWYgcmV0dXJucyBhbm90aGVyIGZ1bmN0aW9uLCBhbmQgdHJlYXRzIHRoYXRcbi8vICAgIG5ldyBmdW5jdGlvbiBhcyB0aGUgdHJ1ZSBtYXBUb1Byb3BzIGZvciBzdWJzZXF1ZW50IGNhbGxzLlxuLy9cbi8vICAqIE9uIGZpcnN0IGNhbGwsIHZlcmlmaWVzIHRoZSBmaXJzdCByZXN1bHQgaXMgYSBwbGFpbiBvYmplY3QsIGluIG9yZGVyIHRvIHdhcm5cbi8vICAgIHRoZSBkZXZlbG9wZXIgdGhhdCB0aGVpciBtYXBUb1Byb3BzIGZ1bmN0aW9uIGlzIG5vdCByZXR1cm5pbmcgYSB2YWxpZCByZXN1bHQuXG4vL1xuXG5leHBvcnQgZnVuY3Rpb24gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcFRvUHJvcHMsIG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRQcm94eVNlbGVjdG9yKGRpc3BhdGNoLCBfcmVmKSB7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gX3JlZi5kaXNwbGF5TmFtZTtcblxuICAgIHZhciBwcm94eSA9IGZ1bmN0aW9uIG1hcFRvUHJvcHNQcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSB7XG4gICAgICByZXR1cm4gcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPyBwcm94eS5tYXBUb1Byb3BzKHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIDogcHJveHkubWFwVG9Qcm9wcyhzdGF0ZU9yRGlzcGF0Y2gpO1xuICAgIH07IC8vIGFsbG93IGRldGVjdEZhY3RvcnlBbmRWZXJpZnkgdG8gZ2V0IG93blByb3BzXG5cblxuICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gdHJ1ZTtcblxuICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBmdW5jdGlvbiBkZXRlY3RGYWN0b3J5QW5kVmVyaWZ5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIHtcbiAgICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBtYXBUb1Byb3BzO1xuICAgICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSBnZXREZXBlbmRzT25Pd25Qcm9wcyhtYXBUb1Byb3BzKTtcbiAgICAgIHZhciBwcm9wcyA9IHByb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpO1xuXG4gICAgICBpZiAodHlwZW9mIHByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBwcm9wcztcbiAgICAgICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSBnZXREZXBlbmRzT25Pd25Qcm9wcyhwcm9wcyk7XG4gICAgICAgIHByb3BzID0gcHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB2ZXJpZnlQbGFpbk9iamVjdChwcm9wcywgZGlzcGxheU5hbWUsIG1ldGhvZE5hbWUpO1xuICAgICAgcmV0dXJuIHByb3BzO1xuICAgIH07XG5cbiAgICByZXR1cm4gcHJveHk7XG4gIH07XG59IiwiaW1wb3J0IHsgYmluZEFjdGlvbkNyZWF0b3JzIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IHsgd3JhcE1hcFRvUHJvcHNDb25zdGFudCwgd3JhcE1hcFRvUHJvcHNGdW5jIH0gZnJvbSAnLi93cmFwTWFwVG9Qcm9wcyc7XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzRnVuY3Rpb24obWFwRGlzcGF0Y2hUb1Byb3BzKSB7XG4gIHJldHVybiB0eXBlb2YgbWFwRGlzcGF0Y2hUb1Byb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcERpc3BhdGNoVG9Qcm9wcywgJ21hcERpc3BhdGNoVG9Qcm9wcycpIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc01pc3NpbmcobWFwRGlzcGF0Y2hUb1Byb3BzKSB7XG4gIHJldHVybiAhbWFwRGlzcGF0Y2hUb1Byb3BzID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudChmdW5jdGlvbiAoZGlzcGF0Y2gpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZGlzcGF0Y2g6IGRpc3BhdGNoXG4gICAgfTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzT2JqZWN0KG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gbWFwRGlzcGF0Y2hUb1Byb3BzICYmIHR5cGVvZiBtYXBEaXNwYXRjaFRvUHJvcHMgPT09ICdvYmplY3QnID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudChmdW5jdGlvbiAoZGlzcGF0Y2gpIHtcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3JzKG1hcERpc3BhdGNoVG9Qcm9wcywgZGlzcGF0Y2gpO1xuICB9KSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbiwgd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzTWlzc2luZywgd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzT2JqZWN0XTsiLCJpbXBvcnQgeyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50LCB3cmFwTWFwVG9Qcm9wc0Z1bmMgfSBmcm9tICcuL3dyYXBNYXBUb1Byb3BzJztcbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwU3RhdGVUb1Byb3BzSXNGdW5jdGlvbihtYXBTdGF0ZVRvUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtYXBTdGF0ZVRvUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwU3RhdGVUb1Byb3BzLCAnbWFwU3RhdGVUb1Byb3BzJykgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcFN0YXRlVG9Qcm9wc0lzTWlzc2luZyhtYXBTdGF0ZVRvUHJvcHMpIHtcbiAgcmV0dXJuICFtYXBTdGF0ZVRvUHJvcHMgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge307XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGRlZmF1bHQgW3doZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWFwU3RhdGVUb1Byb3BzSXNNaXNzaW5nXTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCB2ZXJpZnlQbGFpbk9iamVjdCBmcm9tICcuLi91dGlscy92ZXJpZnlQbGFpbk9iamVjdCc7XG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdE1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpIHtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBvd25Qcm9wcywgc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcyk7XG59XG5leHBvcnQgZnVuY3Rpb24gd3JhcE1lcmdlUHJvcHNGdW5jKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRNZXJnZVByb3BzUHJveHkoZGlzcGF0Y2gsIF9yZWYpIHtcbiAgICB2YXIgZGlzcGxheU5hbWUgPSBfcmVmLmRpc3BsYXlOYW1lLFxuICAgICAgICBwdXJlID0gX3JlZi5wdXJlLFxuICAgICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsID0gX3JlZi5hcmVNZXJnZWRQcm9wc0VxdWFsO1xuICAgIHZhciBoYXNSdW5PbmNlID0gZmFsc2U7XG4gICAgdmFyIG1lcmdlZFByb3BzO1xuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZVByb3BzUHJveHkoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpIHtcbiAgICAgIHZhciBuZXh0TWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcblxuICAgICAgaWYgKGhhc1J1bk9uY2UpIHtcbiAgICAgICAgaWYgKCFwdXJlIHx8ICFhcmVNZXJnZWRQcm9wc0VxdWFsKG5leHRNZXJnZWRQcm9wcywgbWVyZ2VkUHJvcHMpKSBtZXJnZWRQcm9wcyA9IG5leHRNZXJnZWRQcm9wcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhhc1J1bk9uY2UgPSB0cnVlO1xuICAgICAgICBtZXJnZWRQcm9wcyA9IG5leHRNZXJnZWRQcm9wcztcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHZlcmlmeVBsYWluT2JqZWN0KG1lcmdlZFByb3BzLCBkaXNwbGF5TmFtZSwgJ21lcmdlUHJvcHMnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICAgIH07XG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1lcmdlUHJvcHNJc0Z1bmN0aW9uKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtZXJnZVByb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1lcmdlUHJvcHNGdW5jKG1lcmdlUHJvcHMpIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NZXJnZVByb3BzSXNPbWl0dGVkKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuICFtZXJnZVByb3BzID8gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkZWZhdWx0TWVyZ2VQcm9wcztcbiAgfSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWVyZ2VQcm9wc0lzRnVuY3Rpb24sIHdoZW5NZXJnZVByb3BzSXNPbWl0dGVkXTsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCB2ZXJpZnlTdWJzZWxlY3RvcnMgZnJvbSAnLi92ZXJpZnlTdWJzZWxlY3RvcnMnO1xuZXhwb3J0IGZ1bmN0aW9uIGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3Ioc3RhdGUsIG93blByb3BzKSB7XG4gICAgcmV0dXJuIG1lcmdlUHJvcHMobWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyksIG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpLCBvd25Qcm9wcyk7XG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoLCBfcmVmKSB7XG4gIHZhciBhcmVTdGF0ZXNFcXVhbCA9IF9yZWYuYXJlU3RhdGVzRXF1YWwsXG4gICAgICBhcmVPd25Qcm9wc0VxdWFsID0gX3JlZi5hcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsID0gX3JlZi5hcmVTdGF0ZVByb3BzRXF1YWw7XG4gIHZhciBoYXNSdW5BdExlYXN0T25jZSA9IGZhbHNlO1xuICB2YXIgc3RhdGU7XG4gIHZhciBvd25Qcm9wcztcbiAgdmFyIHN0YXRlUHJvcHM7XG4gIHZhciBkaXNwYXRjaFByb3BzO1xuICB2YXIgbWVyZ2VkUHJvcHM7XG5cbiAgZnVuY3Rpb24gaGFuZGxlRmlyc3RDYWxsKGZpcnN0U3RhdGUsIGZpcnN0T3duUHJvcHMpIHtcbiAgICBzdGF0ZSA9IGZpcnN0U3RhdGU7XG4gICAgb3duUHJvcHMgPSBmaXJzdE93blByb3BzO1xuICAgIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICBoYXNSdW5BdExlYXN0T25jZSA9IHRydWU7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3UHJvcHNBbmROZXdTdGF0ZSgpIHtcbiAgICBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgaWYgKG1hcERpc3BhdGNoVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3UHJvcHMoKSB7XG4gICAgaWYgKG1hcFN0YXRlVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIGlmIChtYXBEaXNwYXRjaFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1N0YXRlKCkge1xuICAgIHZhciBuZXh0U3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIHZhciBzdGF0ZVByb3BzQ2hhbmdlZCA9ICFhcmVTdGF0ZVByb3BzRXF1YWwobmV4dFN0YXRlUHJvcHMsIHN0YXRlUHJvcHMpO1xuICAgIHN0YXRlUHJvcHMgPSBuZXh0U3RhdGVQcm9wcztcbiAgICBpZiAoc3RhdGVQcm9wc0NoYW5nZWQpIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlU3Vic2VxdWVudENhbGxzKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSB7XG4gICAgdmFyIHByb3BzQ2hhbmdlZCA9ICFhcmVPd25Qcm9wc0VxdWFsKG5leHRPd25Qcm9wcywgb3duUHJvcHMpO1xuICAgIHZhciBzdGF0ZUNoYW5nZWQgPSAhYXJlU3RhdGVzRXF1YWwobmV4dFN0YXRlLCBzdGF0ZSk7XG4gICAgc3RhdGUgPSBuZXh0U3RhdGU7XG4gICAgb3duUHJvcHMgPSBuZXh0T3duUHJvcHM7XG4gICAgaWYgKHByb3BzQ2hhbmdlZCAmJiBzdGF0ZUNoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdQcm9wc0FuZE5ld1N0YXRlKCk7XG4gICAgaWYgKHByb3BzQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1Byb3BzKCk7XG4gICAgaWYgKHN0YXRlQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1N0YXRlKCk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHB1cmVGaW5hbFByb3BzU2VsZWN0b3IobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIHtcbiAgICByZXR1cm4gaGFzUnVuQXRMZWFzdE9uY2UgPyBoYW5kbGVTdWJzZXF1ZW50Q2FsbHMobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIDogaGFuZGxlRmlyc3RDYWxsKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKTtcbiAgfTtcbn0gLy8gVE9ETzogQWRkIG1vcmUgY29tbWVudHNcbi8vIElmIHB1cmUgaXMgdHJ1ZSwgdGhlIHNlbGVjdG9yIHJldHVybmVkIGJ5IHNlbGVjdG9yRmFjdG9yeSB3aWxsIG1lbW9pemUgaXRzIHJlc3VsdHMsXG4vLyBhbGxvd2luZyBjb25uZWN0QWR2YW5jZWQncyBzaG91bGRDb21wb25lbnRVcGRhdGUgdG8gcmV0dXJuIGZhbHNlIGlmIGZpbmFsXG4vLyBwcm9wcyBoYXZlIG5vdCBjaGFuZ2VkLiBJZiBmYWxzZSwgdGhlIHNlbGVjdG9yIHdpbGwgYWx3YXlzIHJldHVybiBhIG5ld1xuLy8gb2JqZWN0IGFuZCBzaG91bGRDb21wb25lbnRVcGRhdGUgd2lsbCBhbHdheXMgcmV0dXJuIHRydWUuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkoZGlzcGF0Y2gsIF9yZWYyKSB7XG4gIHZhciBpbml0TWFwU3RhdGVUb1Byb3BzID0gX3JlZjIuaW5pdE1hcFN0YXRlVG9Qcm9wcyxcbiAgICAgIGluaXRNYXBEaXNwYXRjaFRvUHJvcHMgPSBfcmVmMi5pbml0TWFwRGlzcGF0Y2hUb1Byb3BzLFxuICAgICAgaW5pdE1lcmdlUHJvcHMgPSBfcmVmMi5pbml0TWVyZ2VQcm9wcyxcbiAgICAgIG9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMiwgW1wiaW5pdE1hcFN0YXRlVG9Qcm9wc1wiLCBcImluaXRNYXBEaXNwYXRjaFRvUHJvcHNcIiwgXCJpbml0TWVyZ2VQcm9wc1wiXSk7XG5cbiAgdmFyIG1hcFN0YXRlVG9Qcm9wcyA9IGluaXRNYXBTdGF0ZVRvUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuICB2YXIgbWFwRGlzcGF0Y2hUb1Byb3BzID0gaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG4gIHZhciBtZXJnZVByb3BzID0gaW5pdE1lcmdlUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmVyaWZ5U3Vic2VsZWN0b3JzKG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBvcHRpb25zLmRpc3BsYXlOYW1lKTtcbiAgfVxuXG4gIHZhciBzZWxlY3RvckZhY3RvcnkgPSBvcHRpb25zLnB1cmUgPyBwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSA6IGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3Rvcnk7XG4gIHJldHVybiBzZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoLCBvcHRpb25zKTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IGNvbm5lY3RBZHZhbmNlZCBmcm9tICcuLi9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZCc7XG5pbXBvcnQgc2hhbGxvd0VxdWFsIGZyb20gJy4uL3V0aWxzL3NoYWxsb3dFcXVhbCc7XG5pbXBvcnQgZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyBmcm9tICcuL21hcERpc3BhdGNoVG9Qcm9wcyc7XG5pbXBvcnQgZGVmYXVsdE1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyBmcm9tICcuL21hcFN0YXRlVG9Qcm9wcyc7XG5pbXBvcnQgZGVmYXVsdE1lcmdlUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tZXJnZVByb3BzJztcbmltcG9ydCBkZWZhdWx0U2VsZWN0b3JGYWN0b3J5IGZyb20gJy4vc2VsZWN0b3JGYWN0b3J5Jztcbi8qXG4gIGNvbm5lY3QgaXMgYSBmYWNhZGUgb3ZlciBjb25uZWN0QWR2YW5jZWQuIEl0IHR1cm5zIGl0cyBhcmdzIGludG8gYSBjb21wYXRpYmxlXG4gIHNlbGVjdG9yRmFjdG9yeSwgd2hpY2ggaGFzIHRoZSBzaWduYXR1cmU6XG5cbiAgICAoZGlzcGF0Y2gsIG9wdGlvbnMpID0+IChuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykgPT4gbmV4dEZpbmFsUHJvcHNcbiAgXG4gIGNvbm5lY3QgcGFzc2VzIGl0cyBhcmdzIHRvIGNvbm5lY3RBZHZhbmNlZCBhcyBvcHRpb25zLCB3aGljaCB3aWxsIGluIHR1cm4gcGFzcyB0aGVtIHRvXG4gIHNlbGVjdG9yRmFjdG9yeSBlYWNoIHRpbWUgYSBDb25uZWN0IGNvbXBvbmVudCBpbnN0YW5jZSBpcyBpbnN0YW50aWF0ZWQgb3IgaG90IHJlbG9hZGVkLlxuXG4gIHNlbGVjdG9yRmFjdG9yeSByZXR1cm5zIGEgZmluYWwgcHJvcHMgc2VsZWN0b3IgZnJvbSBpdHMgbWFwU3RhdGVUb1Byb3BzLFxuICBtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLCBtZXJnZVByb3BzLFxuICBtZXJnZVByb3BzRmFjdG9yaWVzLCBhbmQgcHVyZSBhcmdzLlxuXG4gIFRoZSByZXN1bHRpbmcgZmluYWwgcHJvcHMgc2VsZWN0b3IgaXMgY2FsbGVkIGJ5IHRoZSBDb25uZWN0IGNvbXBvbmVudCBpbnN0YW5jZSB3aGVuZXZlclxuICBpdCByZWNlaXZlcyBuZXcgcHJvcHMgb3Igc3RvcmUgc3RhdGUuXG4gKi9cblxuZnVuY3Rpb24gbWF0Y2goYXJnLCBmYWN0b3JpZXMsIG5hbWUpIHtcbiAgZm9yICh2YXIgaSA9IGZhY3Rvcmllcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHZhciByZXN1bHQgPSBmYWN0b3JpZXNbaV0oYXJnKTtcbiAgICBpZiAocmVzdWx0KSByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChkaXNwYXRjaCwgb3B0aW9ucykge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgdmFsdWUgb2YgdHlwZSBcIiArIHR5cGVvZiBhcmcgKyBcIiBmb3IgXCIgKyBuYW1lICsgXCIgYXJndW1lbnQgd2hlbiBjb25uZWN0aW5nIGNvbXBvbmVudCBcIiArIG9wdGlvbnMud3JhcHBlZENvbXBvbmVudE5hbWUgKyBcIi5cIik7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0cmljdEVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59IC8vIGNyZWF0ZUNvbm5lY3Qgd2l0aCBkZWZhdWx0IGFyZ3MgYnVpbGRzIHRoZSAnb2ZmaWNpYWwnIGNvbm5lY3QgYmVoYXZpb3IuIENhbGxpbmcgaXQgd2l0aFxuLy8gZGlmZmVyZW50IG9wdGlvbnMgb3BlbnMgdXAgc29tZSB0ZXN0aW5nIGFuZCBleHRlbnNpYmlsaXR5IHNjZW5hcmlvc1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDb25uZWN0KF90ZW1wKSB7XG4gIHZhciBfcmVmID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAsXG4gICAgICBfcmVmJGNvbm5lY3RIT0MgPSBfcmVmLmNvbm5lY3RIT0MsXG4gICAgICBjb25uZWN0SE9DID0gX3JlZiRjb25uZWN0SE9DID09PSB2b2lkIDAgPyBjb25uZWN0QWR2YW5jZWQgOiBfcmVmJGNvbm5lY3RIT0MsXG4gICAgICBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YgPSBfcmVmLm1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWFwU3RhdGVUb1Byb3BzRiA9PT0gdm9pZCAwID8gZGVmYXVsdE1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWFwU3RhdGVUb1Byb3BzRixcbiAgICAgIF9yZWYkbWFwRGlzcGF0Y2hUb1BybyA9IF9yZWYubWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLFxuICAgICAgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzID0gX3JlZiRtYXBEaXNwYXRjaFRvUHJvID09PSB2b2lkIDAgPyBkZWZhdWx0TWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIDogX3JlZiRtYXBEaXNwYXRjaFRvUHJvLFxuICAgICAgX3JlZiRtZXJnZVByb3BzRmFjdG9yID0gX3JlZi5tZXJnZVByb3BzRmFjdG9yaWVzLFxuICAgICAgbWVyZ2VQcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWVyZ2VQcm9wc0ZhY3RvciA9PT0gdm9pZCAwID8gZGVmYXVsdE1lcmdlUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1lcmdlUHJvcHNGYWN0b3IsXG4gICAgICBfcmVmJHNlbGVjdG9yRmFjdG9yeSA9IF9yZWYuc2VsZWN0b3JGYWN0b3J5LFxuICAgICAgc2VsZWN0b3JGYWN0b3J5ID0gX3JlZiRzZWxlY3RvckZhY3RvcnkgPT09IHZvaWQgMCA/IGRlZmF1bHRTZWxlY3RvckZhY3RvcnkgOiBfcmVmJHNlbGVjdG9yRmFjdG9yeTtcblxuICByZXR1cm4gZnVuY3Rpb24gY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgX3JlZjIpIHtcbiAgICBpZiAoX3JlZjIgPT09IHZvaWQgMCkge1xuICAgICAgX3JlZjIgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgX3JlZjMgPSBfcmVmMixcbiAgICAgICAgX3JlZjMkcHVyZSA9IF9yZWYzLnB1cmUsXG4gICAgICAgIHB1cmUgPSBfcmVmMyRwdXJlID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZjMkcHVyZSxcbiAgICAgICAgX3JlZjMkYXJlU3RhdGVzRXF1YWwgPSBfcmVmMy5hcmVTdGF0ZXNFcXVhbCxcbiAgICAgICAgYXJlU3RhdGVzRXF1YWwgPSBfcmVmMyRhcmVTdGF0ZXNFcXVhbCA9PT0gdm9pZCAwID8gc3RyaWN0RXF1YWwgOiBfcmVmMyRhcmVTdGF0ZXNFcXVhbCxcbiAgICAgICAgX3JlZjMkYXJlT3duUHJvcHNFcXVhID0gX3JlZjMuYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlT3duUHJvcHNFcXVhbCA9IF9yZWYzJGFyZU93blByb3BzRXF1YSA9PT0gdm9pZCAwID8gc2hhbGxvd0VxdWFsIDogX3JlZjMkYXJlT3duUHJvcHNFcXVhLFxuICAgICAgICBfcmVmMyRhcmVTdGF0ZVByb3BzRXEgPSBfcmVmMy5hcmVTdGF0ZVByb3BzRXF1YWwsXG4gICAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbCA9IF9yZWYzJGFyZVN0YXRlUHJvcHNFcSA9PT0gdm9pZCAwID8gc2hhbGxvd0VxdWFsIDogX3JlZjMkYXJlU3RhdGVQcm9wc0VxLFxuICAgICAgICBfcmVmMyRhcmVNZXJnZWRQcm9wc0UgPSBfcmVmMy5hcmVNZXJnZWRQcm9wc0VxdWFsLFxuICAgICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsID0gX3JlZjMkYXJlTWVyZ2VkUHJvcHNFID09PSB2b2lkIDAgPyBzaGFsbG93RXF1YWwgOiBfcmVmMyRhcmVNZXJnZWRQcm9wc0UsXG4gICAgICAgIGV4dHJhT3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYzLCBbXCJwdXJlXCIsIFwiYXJlU3RhdGVzRXF1YWxcIiwgXCJhcmVPd25Qcm9wc0VxdWFsXCIsIFwiYXJlU3RhdGVQcm9wc0VxdWFsXCIsIFwiYXJlTWVyZ2VkUHJvcHNFcXVhbFwiXSk7XG5cbiAgICB2YXIgaW5pdE1hcFN0YXRlVG9Qcm9wcyA9IG1hdGNoKG1hcFN0YXRlVG9Qcm9wcywgbWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzLCAnbWFwU3RhdGVUb1Byb3BzJyk7XG4gICAgdmFyIGluaXRNYXBEaXNwYXRjaFRvUHJvcHMgPSBtYXRjaChtYXBEaXNwYXRjaFRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcywgJ21hcERpc3BhdGNoVG9Qcm9wcycpO1xuICAgIHZhciBpbml0TWVyZ2VQcm9wcyA9IG1hdGNoKG1lcmdlUHJvcHMsIG1lcmdlUHJvcHNGYWN0b3JpZXMsICdtZXJnZVByb3BzJyk7XG4gICAgcmV0dXJuIGNvbm5lY3RIT0Moc2VsZWN0b3JGYWN0b3J5LCBfZXh0ZW5kcyh7XG4gICAgICAvLyB1c2VkIGluIGVycm9yIG1lc3NhZ2VzXG4gICAgICBtZXRob2ROYW1lOiAnY29ubmVjdCcsXG4gICAgICAvLyB1c2VkIHRvIGNvbXB1dGUgQ29ubmVjdCdzIGRpc3BsYXlOYW1lIGZyb20gdGhlIHdyYXBwZWQgY29tcG9uZW50J3MgZGlzcGxheU5hbWUuXG4gICAgICBnZXREaXNwbGF5TmFtZTogZnVuY3Rpb24gZ2V0RGlzcGxheU5hbWUobmFtZSkge1xuICAgICAgICByZXR1cm4gXCJDb25uZWN0KFwiICsgbmFtZSArIFwiKVwiO1xuICAgICAgfSxcbiAgICAgIC8vIGlmIG1hcFN0YXRlVG9Qcm9wcyBpcyBmYWxzeSwgdGhlIENvbm5lY3QgY29tcG9uZW50IGRvZXNuJ3Qgc3Vic2NyaWJlIHRvIHN0b3JlIHN0YXRlIGNoYW5nZXNcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlczogQm9vbGVhbihtYXBTdGF0ZVRvUHJvcHMpLFxuICAgICAgLy8gcGFzc2VkIHRocm91Z2ggdG8gc2VsZWN0b3JGYWN0b3J5XG4gICAgICBpbml0TWFwU3RhdGVUb1Byb3BzOiBpbml0TWFwU3RhdGVUb1Byb3BzLFxuICAgICAgaW5pdE1hcERpc3BhdGNoVG9Qcm9wczogaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgICAgIGluaXRNZXJnZVByb3BzOiBpbml0TWVyZ2VQcm9wcyxcbiAgICAgIHB1cmU6IHB1cmUsXG4gICAgICBhcmVTdGF0ZXNFcXVhbDogYXJlU3RhdGVzRXF1YWwsXG4gICAgICBhcmVPd25Qcm9wc0VxdWFsOiBhcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsOiBhcmVTdGF0ZVByb3BzRXF1YWwsXG4gICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsOiBhcmVNZXJnZWRQcm9wc0VxdWFsXG4gICAgfSwgZXh0cmFPcHRpb25zKSk7XG4gIH07XG59XG5leHBvcnQgZGVmYXVsdCAvKiNfX1BVUkVfXyovY3JlYXRlQ29ubmVjdCgpOyIsImltcG9ydCB7IHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ29udGV4dCc7XG4vKipcbiAqIEEgaG9vayB0byBhY2Nlc3MgdGhlIHZhbHVlIG9mIHRoZSBgUmVhY3RSZWR1eENvbnRleHRgLiBUaGlzIGlzIGEgbG93LWxldmVsXG4gKiBob29rIHRoYXQgeW91IHNob3VsZCB1c3VhbGx5IG5vdCBuZWVkIHRvIGNhbGwgZGlyZWN0bHkuXG4gKlxuICogQHJldHVybnMge2FueX0gdGhlIHZhbHVlIG9mIHRoZSBgUmVhY3RSZWR1eENvbnRleHRgXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG4gKiBpbXBvcnQgeyB1c2VSZWR1eENvbnRleHQgfSBmcm9tICdyZWFjdC1yZWR1eCdcbiAqXG4gKiBleHBvcnQgY29uc3QgQ291bnRlckNvbXBvbmVudCA9ICh7IHZhbHVlIH0pID0+IHtcbiAqICAgY29uc3QgeyBzdG9yZSB9ID0gdXNlUmVkdXhDb250ZXh0KClcbiAqICAgcmV0dXJuIDxkaXY+e3N0b3JlLmdldFN0YXRlKCl9PC9kaXY+XG4gKiB9XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVJlZHV4Q29udGV4dCgpIHtcbiAgdmFyIGNvbnRleHRWYWx1ZSA9IHVzZUNvbnRleHQoUmVhY3RSZWR1eENvbnRleHQpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFjb250ZXh0VmFsdWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCBmaW5kIHJlYWN0LXJlZHV4IGNvbnRleHQgdmFsdWU7IHBsZWFzZSBlbnN1cmUgdGhlIGNvbXBvbmVudCBpcyB3cmFwcGVkIGluIGEgPFByb3ZpZGVyPicpO1xuICB9XG5cbiAgcmV0dXJuIGNvbnRleHRWYWx1ZTtcbn0iLCJpbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuLi9jb21wb25lbnRzL0NvbnRleHQnO1xuaW1wb3J0IHsgdXNlUmVkdXhDb250ZXh0IGFzIHVzZURlZmF1bHRSZWR1eENvbnRleHQgfSBmcm9tICcuL3VzZVJlZHV4Q29udGV4dCc7XG4vKipcbiAqIEhvb2sgZmFjdG9yeSwgd2hpY2ggY3JlYXRlcyBhIGB1c2VTdG9yZWAgaG9vayBib3VuZCB0byBhIGdpdmVuIGNvbnRleHQuXG4gKlxuICogQHBhcmFtIHtSZWFjdC5Db250ZXh0fSBbY29udGV4dD1SZWFjdFJlZHV4Q29udGV4dF0gQ29udGV4dCBwYXNzZWQgdG8geW91ciBgPFByb3ZpZGVyPmAuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgYHVzZVN0b3JlYCBob29rIGJvdW5kIHRvIHRoZSBzcGVjaWZpZWQgY29udGV4dC5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3RvcmVIb29rKGNvbnRleHQpIHtcbiAgaWYgKGNvbnRleHQgPT09IHZvaWQgMCkge1xuICAgIGNvbnRleHQgPSBSZWFjdFJlZHV4Q29udGV4dDtcbiAgfVxuXG4gIHZhciB1c2VSZWR1eENvbnRleHQgPSBjb250ZXh0ID09PSBSZWFjdFJlZHV4Q29udGV4dCA/IHVzZURlZmF1bHRSZWR1eENvbnRleHQgOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHVzZUNvbnRleHQoY29udGV4dCk7XG4gIH07XG4gIHJldHVybiBmdW5jdGlvbiB1c2VTdG9yZSgpIHtcbiAgICB2YXIgX3VzZVJlZHV4Q29udGV4dCA9IHVzZVJlZHV4Q29udGV4dCgpLFxuICAgICAgICBzdG9yZSA9IF91c2VSZWR1eENvbnRleHQuc3RvcmU7XG5cbiAgICByZXR1cm4gc3RvcmU7XG4gIH07XG59XG4vKipcbiAqIEEgaG9vayB0byBhY2Nlc3MgdGhlIHJlZHV4IHN0b3JlLlxuICpcbiAqIEByZXR1cm5zIHthbnl9IHRoZSByZWR1eCBzdG9yZVxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuICogaW1wb3J0IHsgdXNlU3RvcmUgfSBmcm9tICdyZWFjdC1yZWR1eCdcbiAqXG4gKiBleHBvcnQgY29uc3QgRXhhbXBsZUNvbXBvbmVudCA9ICgpID0+IHtcbiAqICAgY29uc3Qgc3RvcmUgPSB1c2VTdG9yZSgpXG4gKiAgIHJldHVybiA8ZGl2PntzdG9yZS5nZXRTdGF0ZSgpfTwvZGl2PlxuICogfVxuICovXG5cbmV4cG9ydCB2YXIgdXNlU3RvcmUgPSAvKiNfX1BVUkVfXyovY3JlYXRlU3RvcmVIb29rKCk7IiwiaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuLi9jb21wb25lbnRzL0NvbnRleHQnO1xuaW1wb3J0IHsgdXNlU3RvcmUgYXMgdXNlRGVmYXVsdFN0b3JlLCBjcmVhdGVTdG9yZUhvb2sgfSBmcm9tICcuL3VzZVN0b3JlJztcbi8qKlxuICogSG9vayBmYWN0b3J5LCB3aGljaCBjcmVhdGVzIGEgYHVzZURpc3BhdGNoYCBob29rIGJvdW5kIHRvIGEgZ2l2ZW4gY29udGV4dC5cbiAqXG4gKiBAcGFyYW0ge1JlYWN0LkNvbnRleHR9IFtjb250ZXh0PVJlYWN0UmVkdXhDb250ZXh0XSBDb250ZXh0IHBhc3NlZCB0byB5b3VyIGA8UHJvdmlkZXI+YC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBgdXNlRGlzcGF0Y2hgIGhvb2sgYm91bmQgdG8gdGhlIHNwZWNpZmllZCBjb250ZXh0LlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEaXNwYXRjaEhvb2soY29udGV4dCkge1xuICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSB7XG4gICAgY29udGV4dCA9IFJlYWN0UmVkdXhDb250ZXh0O1xuICB9XG5cbiAgdmFyIHVzZVN0b3JlID0gY29udGV4dCA9PT0gUmVhY3RSZWR1eENvbnRleHQgPyB1c2VEZWZhdWx0U3RvcmUgOiBjcmVhdGVTdG9yZUhvb2soY29udGV4dCk7XG4gIHJldHVybiBmdW5jdGlvbiB1c2VEaXNwYXRjaCgpIHtcbiAgICB2YXIgc3RvcmUgPSB1c2VTdG9yZSgpO1xuICAgIHJldHVybiBzdG9yZS5kaXNwYXRjaDtcbiAgfTtcbn1cbi8qKlxuICogQSBob29rIHRvIGFjY2VzcyB0aGUgcmVkdXggYGRpc3BhdGNoYCBmdW5jdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7YW55fGZ1bmN0aW9ufSByZWR1eCBzdG9yZSdzIGBkaXNwYXRjaGAgZnVuY3Rpb25cbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0J1xuICogaW1wb3J0IHsgdXNlRGlzcGF0Y2ggfSBmcm9tICdyZWFjdC1yZWR1eCdcbiAqXG4gKiBleHBvcnQgY29uc3QgQ291bnRlckNvbXBvbmVudCA9ICh7IHZhbHVlIH0pID0+IHtcbiAqICAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpXG4gKiAgIGNvbnN0IGluY3JlYXNlQ291bnRlciA9IHVzZUNhbGxiYWNrKCgpID0+IGRpc3BhdGNoKHsgdHlwZTogJ2luY3JlYXNlLWNvdW50ZXInIH0pLCBbXSlcbiAqICAgcmV0dXJuIChcbiAqICAgICA8ZGl2PlxuICogICAgICAgPHNwYW4+e3ZhbHVlfTwvc3Bhbj5cbiAqICAgICAgIDxidXR0b24gb25DbGljaz17aW5jcmVhc2VDb3VudGVyfT5JbmNyZWFzZSBjb3VudGVyPC9idXR0b24+XG4gKiAgICAgPC9kaXY+XG4gKiAgIClcbiAqIH1cbiAqL1xuXG5leHBvcnQgdmFyIHVzZURpc3BhdGNoID0gLyojX19QVVJFX18qL2NyZWF0ZURpc3BhdGNoSG9vaygpOyIsImltcG9ydCB7IHVzZVJlZHVjZXIsIHVzZVJlZiwgdXNlTWVtbywgdXNlQ29udGV4dCwgdXNlRGVidWdWYWx1ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVJlZHV4Q29udGV4dCBhcyB1c2VEZWZhdWx0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi91c2VSZWR1eENvbnRleHQnO1xuaW1wb3J0IFN1YnNjcmlwdGlvbiBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCB9IGZyb20gJy4uL3V0aWxzL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuLi9jb21wb25lbnRzL0NvbnRleHQnO1xuXG52YXIgcmVmRXF1YWxpdHkgPSBmdW5jdGlvbiByZWZFcXVhbGl0eShhLCBiKSB7XG4gIHJldHVybiBhID09PSBiO1xufTtcblxuZnVuY3Rpb24gdXNlU2VsZWN0b3JXaXRoU3RvcmVBbmRTdWJzY3JpcHRpb24oc2VsZWN0b3IsIGVxdWFsaXR5Rm4sIHN0b3JlLCBjb250ZXh0U3ViKSB7XG4gIHZhciBfdXNlUmVkdWNlciA9IHVzZVJlZHVjZXIoZnVuY3Rpb24gKHMpIHtcbiAgICByZXR1cm4gcyArIDE7XG4gIH0sIDApLFxuICAgICAgZm9yY2VSZW5kZXIgPSBfdXNlUmVkdWNlclsxXTtcblxuICB2YXIgc3Vic2NyaXB0aW9uID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG5ldyBTdWJzY3JpcHRpb24oc3RvcmUsIGNvbnRleHRTdWIpO1xuICB9LCBbc3RvcmUsIGNvbnRleHRTdWJdKTtcbiAgdmFyIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IgPSB1c2VSZWYoKTtcbiAgdmFyIGxhdGVzdFNlbGVjdG9yID0gdXNlUmVmKCk7XG4gIHZhciBsYXRlc3RTdG9yZVN0YXRlID0gdXNlUmVmKCk7XG4gIHZhciBsYXRlc3RTZWxlY3RlZFN0YXRlID0gdXNlUmVmKCk7XG4gIHZhciBzdG9yZVN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgdmFyIHNlbGVjdGVkU3RhdGU7XG5cbiAgdHJ5IHtcbiAgICBpZiAoc2VsZWN0b3IgIT09IGxhdGVzdFNlbGVjdG9yLmN1cnJlbnQgfHwgc3RvcmVTdGF0ZSAhPT0gbGF0ZXN0U3RvcmVTdGF0ZS5jdXJyZW50IHx8IGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCkge1xuICAgICAgc2VsZWN0ZWRTdGF0ZSA9IHNlbGVjdG9yKHN0b3JlU3RhdGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWxlY3RlZFN0YXRlID0gbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50O1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgaWYgKGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCkge1xuICAgICAgZXJyLm1lc3NhZ2UgKz0gXCJcXG5UaGUgZXJyb3IgbWF5IGJlIGNvcnJlbGF0ZWQgd2l0aCB0aGlzIHByZXZpb3VzIGVycm9yOlxcblwiICsgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50LnN0YWNrICsgXCJcXG5cXG5cIjtcbiAgICB9XG5cbiAgICB0aHJvdyBlcnI7XG4gIH1cblxuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBsYXRlc3RTZWxlY3Rvci5jdXJyZW50ID0gc2VsZWN0b3I7XG4gICAgbGF0ZXN0U3RvcmVTdGF0ZS5jdXJyZW50ID0gc3RvcmVTdGF0ZTtcbiAgICBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQgPSBzZWxlY3RlZFN0YXRlO1xuICAgIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCA9IHVuZGVmaW5lZDtcbiAgfSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGNoZWNrRm9yVXBkYXRlcygpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBuZXdTZWxlY3RlZFN0YXRlID0gbGF0ZXN0U2VsZWN0b3IuY3VycmVudChzdG9yZS5nZXRTdGF0ZSgpKTtcblxuICAgICAgICBpZiAoZXF1YWxpdHlGbihuZXdTZWxlY3RlZFN0YXRlLCBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50ID0gbmV3U2VsZWN0ZWRTdGF0ZTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAvLyB3ZSBpZ25vcmUgYWxsIGVycm9ycyBoZXJlLCBzaW5jZSB3aGVuIHRoZSBjb21wb25lbnRcbiAgICAgICAgLy8gaXMgcmUtcmVuZGVyZWQsIHRoZSBzZWxlY3RvcnMgYXJlIGNhbGxlZCBhZ2FpbiwgYW5kXG4gICAgICAgIC8vIHdpbGwgdGhyb3cgYWdhaW4sIGlmIG5laXRoZXIgcHJvcHMgbm9yIHN0b3JlIHN0YXRlXG4gICAgICAgIC8vIGNoYW5nZWRcbiAgICAgICAgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50ID0gZXJyO1xuICAgICAgfVxuXG4gICAgICBmb3JjZVJlbmRlcigpO1xuICAgIH1cblxuICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gY2hlY2tGb3JVcGRhdGVzO1xuICAgIHN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTtcbiAgICBjaGVja0ZvclVwZGF0ZXMoKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbi50cnlVbnN1YnNjcmliZSgpO1xuICAgIH07XG4gIH0sIFtzdG9yZSwgc3Vic2NyaXB0aW9uXSk7XG4gIHJldHVybiBzZWxlY3RlZFN0YXRlO1xufVxuLyoqXG4gKiBIb29rIGZhY3RvcnksIHdoaWNoIGNyZWF0ZXMgYSBgdXNlU2VsZWN0b3JgIGhvb2sgYm91bmQgdG8gYSBnaXZlbiBjb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhY3QuQ29udGV4dH0gW2NvbnRleHQ9UmVhY3RSZWR1eENvbnRleHRdIENvbnRleHQgcGFzc2VkIHRvIHlvdXIgYDxQcm92aWRlcj5gLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGB1c2VTZWxlY3RvcmAgaG9vayBib3VuZCB0byB0aGUgc3BlY2lmaWVkIGNvbnRleHQuXG4gKi9cblxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2VsZWN0b3JIb29rKGNvbnRleHQpIHtcbiAgaWYgKGNvbnRleHQgPT09IHZvaWQgMCkge1xuICAgIGNvbnRleHQgPSBSZWFjdFJlZHV4Q29udGV4dDtcbiAgfVxuXG4gIHZhciB1c2VSZWR1eENvbnRleHQgPSBjb250ZXh0ID09PSBSZWFjdFJlZHV4Q29udGV4dCA/IHVzZURlZmF1bHRSZWR1eENvbnRleHQgOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHVzZUNvbnRleHQoY29udGV4dCk7XG4gIH07XG4gIHJldHVybiBmdW5jdGlvbiB1c2VTZWxlY3RvcihzZWxlY3RvciwgZXF1YWxpdHlGbikge1xuICAgIGlmIChlcXVhbGl0eUZuID09PSB2b2lkIDApIHtcbiAgICAgIGVxdWFsaXR5Rm4gPSByZWZFcXVhbGl0eTtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhc2VsZWN0b3IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBtdXN0IHBhc3MgYSBzZWxlY3RvciB0byB1c2VTZWxlY3RvclwiKTtcbiAgICB9XG5cbiAgICB2YXIgX3VzZVJlZHV4Q29udGV4dCA9IHVzZVJlZHV4Q29udGV4dCgpLFxuICAgICAgICBzdG9yZSA9IF91c2VSZWR1eENvbnRleHQuc3RvcmUsXG4gICAgICAgIGNvbnRleHRTdWIgPSBfdXNlUmVkdXhDb250ZXh0LnN1YnNjcmlwdGlvbjtcblxuICAgIHZhciBzZWxlY3RlZFN0YXRlID0gdXNlU2VsZWN0b3JXaXRoU3RvcmVBbmRTdWJzY3JpcHRpb24oc2VsZWN0b3IsIGVxdWFsaXR5Rm4sIHN0b3JlLCBjb250ZXh0U3ViKTtcbiAgICB1c2VEZWJ1Z1ZhbHVlKHNlbGVjdGVkU3RhdGUpO1xuICAgIHJldHVybiBzZWxlY3RlZFN0YXRlO1xuICB9O1xufVxuLyoqXG4gKiBBIGhvb2sgdG8gYWNjZXNzIHRoZSByZWR1eCBzdG9yZSdzIHN0YXRlLiBUaGlzIGhvb2sgdGFrZXMgYSBzZWxlY3RvciBmdW5jdGlvblxuICogYXMgYW4gYXJndW1lbnQuIFRoZSBzZWxlY3RvciBpcyBjYWxsZWQgd2l0aCB0aGUgc3RvcmUgc3RhdGUuXG4gKlxuICogVGhpcyBob29rIHRha2VzIGFuIG9wdGlvbmFsIGVxdWFsaXR5IGNvbXBhcmlzb24gZnVuY3Rpb24gYXMgdGhlIHNlY29uZCBwYXJhbWV0ZXJcbiAqIHRoYXQgYWxsb3dzIHlvdSB0byBjdXN0b21pemUgdGhlIHdheSB0aGUgc2VsZWN0ZWQgc3RhdGUgaXMgY29tcGFyZWQgdG8gZGV0ZXJtaW5lXG4gKiB3aGV0aGVyIHRoZSBjb21wb25lbnQgbmVlZHMgdG8gYmUgcmUtcmVuZGVyZWQuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc2VsZWN0b3IgdGhlIHNlbGVjdG9yIGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9uPX0gZXF1YWxpdHlGbiB0aGUgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIGVxdWFsaXR5XG4gKlxuICogQHJldHVybnMge2FueX0gdGhlIHNlbGVjdGVkIHN0YXRlXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG4gKiBpbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuICpcbiAqIGV4cG9ydCBjb25zdCBDb3VudGVyQ29tcG9uZW50ID0gKCkgPT4ge1xuICogICBjb25zdCBjb3VudGVyID0gdXNlU2VsZWN0b3Ioc3RhdGUgPT4gc3RhdGUuY291bnRlcilcbiAqICAgcmV0dXJuIDxkaXY+e2NvdW50ZXJ9PC9kaXY+XG4gKiB9XG4gKi9cblxuZXhwb3J0IHZhciB1c2VTZWxlY3RvciA9IC8qI19fUFVSRV9fKi9jcmVhdGVTZWxlY3Rvckhvb2soKTsiLCJpbXBvcnQgUHJvdmlkZXIgZnJvbSAnLi9jb21wb25lbnRzL1Byb3ZpZGVyJztcbmltcG9ydCBjb25uZWN0QWR2YW5jZWQgZnJvbSAnLi9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vY29tcG9uZW50cy9Db250ZXh0JztcbmltcG9ydCBjb25uZWN0IGZyb20gJy4vY29ubmVjdC9jb25uZWN0JztcbmltcG9ydCB7IHVzZURpc3BhdGNoLCBjcmVhdGVEaXNwYXRjaEhvb2sgfSBmcm9tICcuL2hvb2tzL3VzZURpc3BhdGNoJztcbmltcG9ydCB7IHVzZVNlbGVjdG9yLCBjcmVhdGVTZWxlY3Rvckhvb2sgfSBmcm9tICcuL2hvb2tzL3VzZVNlbGVjdG9yJztcbmltcG9ydCB7IHVzZVN0b3JlLCBjcmVhdGVTdG9yZUhvb2sgfSBmcm9tICcuL2hvb2tzL3VzZVN0b3JlJztcbmltcG9ydCB7IHNldEJhdGNoIH0gZnJvbSAnLi91dGlscy9iYXRjaCc7XG5pbXBvcnQgeyB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyBhcyBiYXRjaCB9IGZyb20gJy4vdXRpbHMvcmVhY3RCYXRjaGVkVXBkYXRlcyc7XG5pbXBvcnQgc2hhbGxvd0VxdWFsIGZyb20gJy4vdXRpbHMvc2hhbGxvd0VxdWFsJztcbnNldEJhdGNoKGJhdGNoKTtcbmV4cG9ydCB7IFByb3ZpZGVyLCBjb25uZWN0QWR2YW5jZWQsIFJlYWN0UmVkdXhDb250ZXh0LCBjb25uZWN0LCBiYXRjaCwgdXNlRGlzcGF0Y2gsIGNyZWF0ZURpc3BhdGNoSG9vaywgdXNlU2VsZWN0b3IsIGNyZWF0ZVNlbGVjdG9ySG9vaywgdXNlU3RvcmUsIGNyZWF0ZVN0b3JlSG9vaywgc2hhbGxvd0VxdWFsIH07IiwiZXhwb3J0IGNvbnN0IHRyYW5zbGF0aW9ucyA9IHtcclxuICBzaGFkZXJzOiBcIlNoYWRlcnNcIixcclxuICB2ZXJ0ZXhTaGFkZXI6IFwiVmVydGV4IFNoYWRlclwiLFxyXG4gIGZyYWdtZW50U2hhZGVyOiBcIkZyYWdtZW50IFNoYWRlclwiLFxyXG4gIGRyYXdPcHRpb25zOiBcIkRyYXcgb3B0aW9uc1wiLFxyXG4gIHRleHR1cmVzOiBcIlRleHR1cmVzXCIsXHJcbiAgdW5pZm9ybXM6IFwiVW5pZm9ybXNcIixcclxuICBhdHRyaWJ1dGVCdWZmZXJzOiBcIkF0dHJpYnV0ZSBCdWZmZXJzXCIsXHJcbiAgY3VzdG9tOiBcIkN1c3RvbVwiLFxyXG59O1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcblxyXG5leHBvcnQgY29uc3QgU2VjdGlvblRpdGxlID0gUmVhY3QubWVtbygocHJvcHM6IHsgdGV4dDogc3RyaW5nOyBjaGlsZHJlbj86IFJlYWN0LlJlYWN0Tm9kZSB9KSA9PiB7XHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXYgY2xhc3NOYW1lPVwidmlld2VyLW9wdGlvbnMtc2VjdGlvbi10aXRsZVwiPlxyXG4gICAgICA8aDM+e3Byb3BzLnRleHR9PC9oMz5cclxuICAgICAge3Byb3BzLmNoaWxkcmVuID8/IG51bGx9XHJcbiAgICA8L2Rpdj5cclxuICApO1xyXG59KTtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IFNlY3Rpb25GaWVsZCA9IFJlYWN0Lm1lbW8oKHByb3BzOiB7IHRleHQ6IHN0cmluZzsgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZSB9KSA9PiB7XHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXYgY2xhc3NOYW1lPVwidmlld2VyLW9wdGlvbnMtc2VjdGlvbi1maWVsZFwiPlxyXG4gICAgICA8bGFiZWw+e3Byb3BzLnRleHR9PC9sYWJlbD5cclxuICAgICAge3Byb3BzLmNoaWxkcmVufVxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxufSk7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xyXG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIG9bazJdID0gbVtrXTtcclxufSkpO1xyXG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3VzZVVuaW9uU3RhdGVcIiksIGV4cG9ydHMpO1xyXG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdXNlRHJvcGRvd25TdGF0ZVwiKSwgZXhwb3J0cyk7XHJcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi91c2VTY3JvbGxMaXN0VG9JbmRleFwiKSwgZXhwb3J0cyk7XHJcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi91c2VEcm9wZG93bkNsb3NlV2hlbkNsaWNrZWRPdXRzaWRlXCIpLCBleHBvcnRzKTtcclxuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3VzZURyb3Bkb3duQ2xvc2VXaGVuRm9jdXNPdXRcIiksIGV4cG9ydHMpO1xyXG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdXNlRm9jdXNPblN0YXRlQ2hhbmdlXCIpLCBleHBvcnRzKTtcclxuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3VzZUNsaWNrZWRPdXRzaWRlSGFuZGxlclwiKSwgZXhwb3J0cyk7XHJcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi91c2VDaHVua0xvYWRlclwiKSwgZXhwb3J0cyk7XHJcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi91c2VGb2N1c091dEhhbmRsZXJcIiksIGV4cG9ydHMpO1xyXG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdXNlRHJvcGRvd25MaXN0S2V5Ym9hcmROYXZpZ2F0b3JcIiksIGV4cG9ydHMpO1xyXG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdXNlUHJldmlvdXNWYWx1ZVwiKSwgZXhwb3J0cyk7XHJcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsImV4cG9ydCBjb25zdCByZW1vdmUgPSA8VD4oYXJyYXk6IFRbXSwgaXRlbTogVCkgPT4ge1xyXG4gIGNvbnN0IGluZGV4ID0gYXJyYXkuaW5kZXhPZihpdGVtKTtcclxuXHJcbiAgaWYgKGluZGV4ID4gLTEpIHtcclxuICAgIGFycmF5LnNwbGljZShpbmRleCwgMSk7XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHJlbW92ZUxhc3QgPSAodGV4dDogc3RyaW5nLCBjb3VudDogbnVtYmVyKSA9PiB7XHJcbiAgcmV0dXJuIHRleHQuc3Vic3RyaW5nKDAsIHRleHQubGVuZ3RoIC0gY291bnQpO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHJhbmdlID0gKHN0YXJ0OiBudW1iZXIsIGVuZDogbnVtYmVyKSA9PlxyXG4gIEFycmF5KGVuZCAtIHN0YXJ0KVxyXG4gICAgLmZpbGwoe30pXHJcbiAgICAubWFwKChfLCBpKSA9PiBzdGFydCArIGkpO1xyXG5cclxuZXhwb3J0IGNvbnN0IHJlcGVhdCA9IDxUPihjb3VudDogbnVtYmVyLCB2YWx1ZTogVCk6IFRbXSA9PiBBcnJheShjb3VudCkuZmlsbCh2YWx1ZSk7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG4vL1RPRE9cclxuLy8gLSBtb3ZlIHRvIGNvbW1vbiBsaWJyYXJ5XHJcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcclxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxufTtcclxudmFyIF9fc3ByZWFkQXJyYXlzID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5cykgfHwgZnVuY3Rpb24gKCkge1xyXG4gICAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XHJcbiAgICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXHJcbiAgICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXHJcbiAgICAgICAgICAgIHJba10gPSBhW2pdO1xyXG4gICAgcmV0dXJuIHI7XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5jbGFtcCA9IGV4cG9ydHMuYXJlU2hhbGxvd0VxdWFsID0gZXhwb3J0cy5vdmVycmlkZGVuUHJvcHMgPSBleHBvcnRzLm9taXRLZXlzID0gZXhwb3J0cy5vdmVycmlkZURlZmluZWRQcm9wc09ubHkgPSB2b2lkIDA7XHJcbmV4cG9ydHMub3ZlcnJpZGVEZWZpbmVkUHJvcHNPbmx5ID0gZnVuY3Rpb24gKGxlZnQsIHJpZ2h0KSB7XHJcbiAgICB2YXIgcmVzdWx0ID0gX19hc3NpZ24oe30sIGxlZnQpO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IE9iamVjdC5rZXlzKHJpZ2h0KTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICB2YXIga2V5ID0gX2FbX2ldO1xyXG4gICAgICAgIHZhciB2YWwgPSByaWdodFtrZXldO1xyXG4gICAgICAgIGlmICh2YWwgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXN1bHRba2V5XSA9IHZhbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59O1xyXG5leHBvcnRzLm9taXRLZXlzID0gZnVuY3Rpb24gKG9iaiwga2V5cykge1xyXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iailcclxuICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuICFrZXlzLmluY2x1ZGVzKGtleSk7IH0pXHJcbiAgICAgICAgLnJlZHVjZShmdW5jdGlvbiAocmVzdWx0LCBrZXkpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgT2JqZWN0LmFzc2lnbihyZXN1bHQsIChfYSA9IHt9LCBfYVtrZXldID0gb2JqW2tleV0sIF9hKSk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH0sIHt9KTtcclxufTtcclxuZXhwb3J0cy5vdmVycmlkZGVuUHJvcHMgPSBmdW5jdGlvbiAobGVmdCwgcmlnaHQpIHtcclxuICAgIHJldHVybiBfX3NwcmVhZEFycmF5cyhPYmplY3Qua2V5cyhsZWZ0KSwgT2JqZWN0LmtleXMocmlnaHQpKS5yZWR1Y2UoZnVuY3Rpb24gKHJlc3VsdCwgb2JqZWN0S2V5KSB7XHJcbiAgICAgICAgdmFyIGtleSA9IG9iamVjdEtleTtcclxuICAgICAgICBpZiAobGVmdFtrZXldICE9PSByaWdodFtrZXldKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdFtrZXldID0gcmlnaHRba2V5XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH0sIHt9KTtcclxufTtcclxuZXhwb3J0cy5hcmVTaGFsbG93RXF1YWwgPSBmdW5jdGlvbiAobGVmdCwgcmlnaHQpIHtcclxuICAgIHZhciBrZXlzTGVmdCA9IE9iamVjdC5rZXlzKGxlZnQpO1xyXG4gICAgdmFyIGtleXNSaWdodCA9IE9iamVjdC5rZXlzKHJpZ2h0KTtcclxuICAgIGlmIChrZXlzTGVmdC5sZW5ndGggIT09IGtleXNSaWdodC5sZW5ndGgpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBmb3IgKHZhciBfaSA9IDAsIGtleXNMZWZ0XzEgPSBrZXlzTGVmdDsgX2kgPCBrZXlzTGVmdF8xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIHZhciBrZXkgPSBrZXlzTGVmdF8xW19pXTtcclxuICAgICAgICBpZiAobGVmdFtrZXldICE9PSByaWdodFtrZXldKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufTtcclxuZXhwb3J0cy5jbGFtcCA9IGZ1bmN0aW9uICh2YWx1ZSwgbWluLCBtYXgpIHtcclxuICAgIGlmICh2YWx1ZSA8IG1pbilcclxuICAgICAgICByZXR1cm4gbWluO1xyXG4gICAgZWxzZSBpZiAodmFsdWUgPiBtYXgpXHJcbiAgICAgICAgcmV0dXJuIG1heDtcclxuICAgIGVsc2VcclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbn07XHJcbiIsImltcG9ydCAkJG9ic2VydmFibGUgZnJvbSAnc3ltYm9sLW9ic2VydmFibGUnO1xuXG4vKipcbiAqIFRoZXNlIGFyZSBwcml2YXRlIGFjdGlvbiB0eXBlcyByZXNlcnZlZCBieSBSZWR1eC5cbiAqIEZvciBhbnkgdW5rbm93biBhY3Rpb25zLCB5b3UgbXVzdCByZXR1cm4gdGhlIGN1cnJlbnQgc3RhdGUuXG4gKiBJZiB0aGUgY3VycmVudCBzdGF0ZSBpcyB1bmRlZmluZWQsIHlvdSBtdXN0IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS5cbiAqIERvIG5vdCByZWZlcmVuY2UgdGhlc2UgYWN0aW9uIHR5cGVzIGRpcmVjdGx5IGluIHlvdXIgY29kZS5cbiAqL1xudmFyIHJhbmRvbVN0cmluZyA9IGZ1bmN0aW9uIHJhbmRvbVN0cmluZygpIHtcbiAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZyg3KS5zcGxpdCgnJykuam9pbignLicpO1xufTtcblxudmFyIEFjdGlvblR5cGVzID0ge1xuICBJTklUOiBcIkBAcmVkdXgvSU5JVFwiICsgcmFuZG9tU3RyaW5nKCksXG4gIFJFUExBQ0U6IFwiQEByZWR1eC9SRVBMQUNFXCIgKyByYW5kb21TdHJpbmcoKSxcbiAgUFJPQkVfVU5LTk9XTl9BQ1RJT046IGZ1bmN0aW9uIFBST0JFX1VOS05PV05fQUNUSU9OKCkge1xuICAgIHJldHVybiBcIkBAcmVkdXgvUFJPQkVfVU5LTk9XTl9BQ1RJT05cIiArIHJhbmRvbVN0cmluZygpO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7YW55fSBvYmogVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIGFyZ3VtZW50IGFwcGVhcnMgdG8gYmUgYSBwbGFpbiBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgdmFyIHByb3RvID0gb2JqO1xuXG4gIHdoaWxlIChPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pICE9PSBudWxsKSB7XG4gICAgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopID09PSBwcm90bztcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgUmVkdXggc3RvcmUgdGhhdCBob2xkcyB0aGUgc3RhdGUgdHJlZS5cbiAqIFRoZSBvbmx5IHdheSB0byBjaGFuZ2UgdGhlIGRhdGEgaW4gdGhlIHN0b3JlIGlzIHRvIGNhbGwgYGRpc3BhdGNoKClgIG9uIGl0LlxuICpcbiAqIFRoZXJlIHNob3VsZCBvbmx5IGJlIGEgc2luZ2xlIHN0b3JlIGluIHlvdXIgYXBwLiBUbyBzcGVjaWZ5IGhvdyBkaWZmZXJlbnRcbiAqIHBhcnRzIG9mIHRoZSBzdGF0ZSB0cmVlIHJlc3BvbmQgdG8gYWN0aW9ucywgeW91IG1heSBjb21iaW5lIHNldmVyYWwgcmVkdWNlcnNcbiAqIGludG8gYSBzaW5nbGUgcmVkdWNlciBmdW5jdGlvbiBieSB1c2luZyBgY29tYmluZVJlZHVjZXJzYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWR1Y2VyIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBuZXh0IHN0YXRlIHRyZWUsIGdpdmVuXG4gKiB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgYWN0aW9uIHRvIGhhbmRsZS5cbiAqXG4gKiBAcGFyYW0ge2FueX0gW3ByZWxvYWRlZFN0YXRlXSBUaGUgaW5pdGlhbCBzdGF0ZS4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGh5ZHJhdGUgdGhlIHN0YXRlIGZyb20gdGhlIHNlcnZlciBpbiB1bml2ZXJzYWwgYXBwcywgb3IgdG8gcmVzdG9yZSBhXG4gKiBwcmV2aW91c2x5IHNlcmlhbGl6ZWQgdXNlciBzZXNzaW9uLlxuICogSWYgeW91IHVzZSBgY29tYmluZVJlZHVjZXJzYCB0byBwcm9kdWNlIHRoZSByb290IHJlZHVjZXIgZnVuY3Rpb24sIHRoaXMgbXVzdCBiZVxuICogYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUgYXMgYGNvbWJpbmVSZWR1Y2Vyc2Aga2V5cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZW5oYW5jZXJdIFRoZSBzdG9yZSBlbmhhbmNlci4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGVuaGFuY2UgdGhlIHN0b3JlIHdpdGggdGhpcmQtcGFydHkgY2FwYWJpbGl0aWVzIHN1Y2ggYXMgbWlkZGxld2FyZSxcbiAqIHRpbWUgdHJhdmVsLCBwZXJzaXN0ZW5jZSwgZXRjLiBUaGUgb25seSBzdG9yZSBlbmhhbmNlciB0aGF0IHNoaXBzIHdpdGggUmVkdXhcbiAqIGlzIGBhcHBseU1pZGRsZXdhcmUoKWAuXG4gKlxuICogQHJldHVybnMge1N0b3JlfSBBIFJlZHV4IHN0b3JlIHRoYXQgbGV0cyB5b3UgcmVhZCB0aGUgc3RhdGUsIGRpc3BhdGNoIGFjdGlvbnNcbiAqIGFuZCBzdWJzY3JpYmUgdG8gY2hhbmdlcy5cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVTdG9yZShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSwgZW5oYW5jZXIpIHtcbiAgdmFyIF9yZWYyO1xuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBlbmhhbmNlciA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgYXJndW1lbnRzWzNdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJdCBsb29rcyBsaWtlIHlvdSBhcmUgcGFzc2luZyBzZXZlcmFsIHN0b3JlIGVuaGFuY2VycyB0byAnICsgJ2NyZWF0ZVN0b3JlKCkuIFRoaXMgaXMgbm90IHN1cHBvcnRlZC4gSW5zdGVhZCwgY29tcG9zZSB0aGVtICcgKyAndG9nZXRoZXIgdG8gYSBzaW5nbGUgZnVuY3Rpb24uJyk7XG4gIH1cblxuICBpZiAodHlwZW9mIHByZWxvYWRlZFN0YXRlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBlbmhhbmNlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBlbmhhbmNlciA9IHByZWxvYWRlZFN0YXRlO1xuICAgIHByZWxvYWRlZFN0YXRlID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBlbmhhbmNlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBlbmhhbmNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIHJldHVybiBlbmhhbmNlcihjcmVhdGVTdG9yZSkocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiByZWR1Y2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgcmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIGN1cnJlbnRSZWR1Y2VyID0gcmVkdWNlcjtcbiAgdmFyIGN1cnJlbnRTdGF0ZSA9IHByZWxvYWRlZFN0YXRlO1xuICB2YXIgY3VycmVudExpc3RlbmVycyA9IFtdO1xuICB2YXIgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnM7XG4gIHZhciBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gIC8qKlxuICAgKiBUaGlzIG1ha2VzIGEgc2hhbGxvdyBjb3B5IG9mIGN1cnJlbnRMaXN0ZW5lcnMgc28gd2UgY2FuIHVzZVxuICAgKiBuZXh0TGlzdGVuZXJzIGFzIGEgdGVtcG9yYXJ5IGxpc3Qgd2hpbGUgZGlzcGF0Y2hpbmcuXG4gICAqXG4gICAqIFRoaXMgcHJldmVudHMgYW55IGJ1Z3MgYXJvdW5kIGNvbnN1bWVycyBjYWxsaW5nXG4gICAqIHN1YnNjcmliZS91bnN1YnNjcmliZSBpbiB0aGUgbWlkZGxlIG9mIGEgZGlzcGF0Y2guXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKSB7XG4gICAgaWYgKG5leHRMaXN0ZW5lcnMgPT09IGN1cnJlbnRMaXN0ZW5lcnMpIHtcbiAgICAgIG5leHRMaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzLnNsaWNlKCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZWFkcyB0aGUgc3RhdGUgdHJlZSBtYW5hZ2VkIGJ5IHRoZSBzdG9yZS5cbiAgICpcbiAgICogQHJldHVybnMge2FueX0gVGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBvZiB5b3VyIGFwcGxpY2F0aW9uLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGdldFN0YXRlKCkge1xuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuZ2V0U3RhdGUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnVGhlIHJlZHVjZXIgaGFzIGFscmVhZHkgcmVjZWl2ZWQgdGhlIHN0YXRlIGFzIGFuIGFyZ3VtZW50LiAnICsgJ1Bhc3MgaXQgZG93biBmcm9tIHRoZSB0b3AgcmVkdWNlciBpbnN0ZWFkIG9mIHJlYWRpbmcgaXQgZnJvbSB0aGUgc3RvcmUuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGN1cnJlbnRTdGF0ZTtcbiAgfVxuICAvKipcbiAgICogQWRkcyBhIGNoYW5nZSBsaXN0ZW5lci4gSXQgd2lsbCBiZSBjYWxsZWQgYW55IHRpbWUgYW4gYWN0aW9uIGlzIGRpc3BhdGNoZWQsXG4gICAqIGFuZCBzb21lIHBhcnQgb2YgdGhlIHN0YXRlIHRyZWUgbWF5IHBvdGVudGlhbGx5IGhhdmUgY2hhbmdlZC4gWW91IG1heSB0aGVuXG4gICAqIGNhbGwgYGdldFN0YXRlKClgIHRvIHJlYWQgdGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBpbnNpZGUgdGhlIGNhbGxiYWNrLlxuICAgKlxuICAgKiBZb3UgbWF5IGNhbGwgYGRpc3BhdGNoKClgIGZyb20gYSBjaGFuZ2UgbGlzdGVuZXIsIHdpdGggdGhlIGZvbGxvd2luZ1xuICAgKiBjYXZlYXRzOlxuICAgKlxuICAgKiAxLiBUaGUgc3Vic2NyaXB0aW9ucyBhcmUgc25hcHNob3R0ZWQganVzdCBiZWZvcmUgZXZlcnkgYGRpc3BhdGNoKClgIGNhbGwuXG4gICAqIElmIHlvdSBzdWJzY3JpYmUgb3IgdW5zdWJzY3JpYmUgd2hpbGUgdGhlIGxpc3RlbmVycyBhcmUgYmVpbmcgaW52b2tlZCwgdGhpc1xuICAgKiB3aWxsIG5vdCBoYXZlIGFueSBlZmZlY3Qgb24gdGhlIGBkaXNwYXRjaCgpYCB0aGF0IGlzIGN1cnJlbnRseSBpbiBwcm9ncmVzcy5cbiAgICogSG93ZXZlciwgdGhlIG5leHQgYGRpc3BhdGNoKClgIGNhbGwsIHdoZXRoZXIgbmVzdGVkIG9yIG5vdCwgd2lsbCB1c2UgYSBtb3JlXG4gICAqIHJlY2VudCBzbmFwc2hvdCBvZiB0aGUgc3Vic2NyaXB0aW9uIGxpc3QuXG4gICAqXG4gICAqIDIuIFRoZSBsaXN0ZW5lciBzaG91bGQgbm90IGV4cGVjdCB0byBzZWUgYWxsIHN0YXRlIGNoYW5nZXMsIGFzIHRoZSBzdGF0ZVxuICAgKiBtaWdodCBoYXZlIGJlZW4gdXBkYXRlZCBtdWx0aXBsZSB0aW1lcyBkdXJpbmcgYSBuZXN0ZWQgYGRpc3BhdGNoKClgIGJlZm9yZVxuICAgKiB0aGUgbGlzdGVuZXIgaXMgY2FsbGVkLiBJdCBpcywgaG93ZXZlciwgZ3VhcmFudGVlZCB0aGF0IGFsbCBzdWJzY3JpYmVyc1xuICAgKiByZWdpc3RlcmVkIGJlZm9yZSB0aGUgYGRpc3BhdGNoKClgIHN0YXJ0ZWQgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgbGF0ZXN0XG4gICAqIHN0YXRlIGJ5IHRoZSB0aW1lIGl0IGV4aXRzLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBBIGNhbGxiYWNrIHRvIGJlIGludm9rZWQgb24gZXZlcnkgZGlzcGF0Y2guXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiB0byByZW1vdmUgdGhpcyBjaGFuZ2UgbGlzdGVuZXIuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgbGlzdGVuZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCBjYWxsIHN0b3JlLnN1YnNjcmliZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdJZiB5b3Ugd291bGQgbGlrZSB0byBiZSBub3RpZmllZCBhZnRlciB0aGUgc3RvcmUgaGFzIGJlZW4gdXBkYXRlZCwgc3Vic2NyaWJlIGZyb20gYSAnICsgJ2NvbXBvbmVudCBhbmQgaW52b2tlIHN0b3JlLmdldFN0YXRlKCkgaW4gdGhlIGNhbGxiYWNrIHRvIGFjY2VzcyB0aGUgbGF0ZXN0IHN0YXRlLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGktcmVmZXJlbmNlL3N0b3JlI3N1YnNjcmliZWxpc3RlbmVyIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgfVxuXG4gICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgIG5leHRMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgaWYgKCFpc1N1YnNjcmliZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IHVuc3Vic2NyaWJlIGZyb20gYSBzdG9yZSBsaXN0ZW5lciB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2FwaS1yZWZlcmVuY2Uvc3RvcmUjc3Vic2NyaWJlbGlzdGVuZXIgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICAgIH1cblxuICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgICB2YXIgaW5kZXggPSBuZXh0TGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgICAgbmV4dExpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgY3VycmVudExpc3RlbmVycyA9IG51bGw7XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogRGlzcGF0Y2hlcyBhbiBhY3Rpb24uIEl0IGlzIHRoZSBvbmx5IHdheSB0byB0cmlnZ2VyIGEgc3RhdGUgY2hhbmdlLlxuICAgKlxuICAgKiBUaGUgYHJlZHVjZXJgIGZ1bmN0aW9uLCB1c2VkIHRvIGNyZWF0ZSB0aGUgc3RvcmUsIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlXG4gICAqIGN1cnJlbnQgc3RhdGUgdHJlZSBhbmQgdGhlIGdpdmVuIGBhY3Rpb25gLiBJdHMgcmV0dXJuIHZhbHVlIHdpbGxcbiAgICogYmUgY29uc2lkZXJlZCB0aGUgKipuZXh0Kiogc3RhdGUgb2YgdGhlIHRyZWUsIGFuZCB0aGUgY2hhbmdlIGxpc3RlbmVyc1xuICAgKiB3aWxsIGJlIG5vdGlmaWVkLlxuICAgKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvbmx5IHN1cHBvcnRzIHBsYWluIG9iamVjdCBhY3Rpb25zLiBJZiB5b3Ugd2FudCB0b1xuICAgKiBkaXNwYXRjaCBhIFByb21pc2UsIGFuIE9ic2VydmFibGUsIGEgdGh1bmssIG9yIHNvbWV0aGluZyBlbHNlLCB5b3UgbmVlZCB0b1xuICAgKiB3cmFwIHlvdXIgc3RvcmUgY3JlYXRpbmcgZnVuY3Rpb24gaW50byB0aGUgY29ycmVzcG9uZGluZyBtaWRkbGV3YXJlLiBGb3JcbiAgICogZXhhbXBsZSwgc2VlIHRoZSBkb2N1bWVudGF0aW9uIGZvciB0aGUgYHJlZHV4LXRodW5rYCBwYWNrYWdlLiBFdmVuIHRoZVxuICAgKiBtaWRkbGV3YXJlIHdpbGwgZXZlbnR1YWxseSBkaXNwYXRjaCBwbGFpbiBvYmplY3QgYWN0aW9ucyB1c2luZyB0aGlzIG1ldGhvZC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGFjdGlvbiBBIHBsYWluIG9iamVjdCByZXByZXNlbnRpbmcg4oCcd2hhdCBjaGFuZ2Vk4oCdLiBJdCBpc1xuICAgKiBhIGdvb2QgaWRlYSB0byBrZWVwIGFjdGlvbnMgc2VyaWFsaXphYmxlIHNvIHlvdSBjYW4gcmVjb3JkIGFuZCByZXBsYXkgdXNlclxuICAgKiBzZXNzaW9ucywgb3IgdXNlIHRoZSB0aW1lIHRyYXZlbGxpbmcgYHJlZHV4LWRldnRvb2xzYC4gQW4gYWN0aW9uIG11c3QgaGF2ZVxuICAgKiBhIGB0eXBlYCBwcm9wZXJ0eSB3aGljaCBtYXkgbm90IGJlIGB1bmRlZmluZWRgLiBJdCBpcyBhIGdvb2QgaWRlYSB0byB1c2VcbiAgICogc3RyaW5nIGNvbnN0YW50cyBmb3IgYWN0aW9uIHR5cGVzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBGb3IgY29udmVuaWVuY2UsIHRoZSBzYW1lIGFjdGlvbiBvYmplY3QgeW91IGRpc3BhdGNoZWQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCwgaWYgeW91IHVzZSBhIGN1c3RvbSBtaWRkbGV3YXJlLCBpdCBtYXkgd3JhcCBgZGlzcGF0Y2goKWAgdG9cbiAgICogcmV0dXJuIHNvbWV0aGluZyBlbHNlIChmb3IgZXhhbXBsZSwgYSBQcm9taXNlIHlvdSBjYW4gYXdhaXQpLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGRpc3BhdGNoKGFjdGlvbikge1xuICAgIGlmICghaXNQbGFpbk9iamVjdChhY3Rpb24pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjdGlvbnMgbXVzdCBiZSBwbGFpbiBvYmplY3RzLiAnICsgJ1VzZSBjdXN0b20gbWlkZGxld2FyZSBmb3IgYXN5bmMgYWN0aW9ucy4nKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGFjdGlvbi50eXBlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY3Rpb25zIG1heSBub3QgaGF2ZSBhbiB1bmRlZmluZWQgXCJ0eXBlXCIgcHJvcGVydHkuICcgKyAnSGF2ZSB5b3UgbWlzc3BlbGxlZCBhIGNvbnN0YW50PycpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlZHVjZXJzIG1heSBub3QgZGlzcGF0Y2ggYWN0aW9ucy4nKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgaXNEaXNwYXRjaGluZyA9IHRydWU7XG4gICAgICBjdXJyZW50U3RhdGUgPSBjdXJyZW50UmVkdWNlcihjdXJyZW50U3RhdGUsIGFjdGlvbik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgbGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycyA9IG5leHRMaXN0ZW5lcnM7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGxpc3RlbmVyID0gbGlzdGVuZXJzW2ldO1xuICAgICAgbGlzdGVuZXIoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWN0aW9uO1xuICB9XG4gIC8qKlxuICAgKiBSZXBsYWNlcyB0aGUgcmVkdWNlciBjdXJyZW50bHkgdXNlZCBieSB0aGUgc3RvcmUgdG8gY2FsY3VsYXRlIHRoZSBzdGF0ZS5cbiAgICpcbiAgICogWW91IG1pZ2h0IG5lZWQgdGhpcyBpZiB5b3VyIGFwcCBpbXBsZW1lbnRzIGNvZGUgc3BsaXR0aW5nIGFuZCB5b3Ugd2FudCB0b1xuICAgKiBsb2FkIHNvbWUgb2YgdGhlIHJlZHVjZXJzIGR5bmFtaWNhbGx5LiBZb3UgbWlnaHQgYWxzbyBuZWVkIHRoaXMgaWYgeW91XG4gICAqIGltcGxlbWVudCBhIGhvdCByZWxvYWRpbmcgbWVjaGFuaXNtIGZvciBSZWR1eC5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbmV4dFJlZHVjZXIgVGhlIHJlZHVjZXIgZm9yIHRoZSBzdG9yZSB0byB1c2UgaW5zdGVhZC5cbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gcmVwbGFjZVJlZHVjZXIobmV4dFJlZHVjZXIpIHtcbiAgICBpZiAodHlwZW9mIG5leHRSZWR1Y2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBuZXh0UmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGN1cnJlbnRSZWR1Y2VyID0gbmV4dFJlZHVjZXI7IC8vIFRoaXMgYWN0aW9uIGhhcyBhIHNpbWlsaWFyIGVmZmVjdCB0byBBY3Rpb25UeXBlcy5JTklULlxuICAgIC8vIEFueSByZWR1Y2VycyB0aGF0IGV4aXN0ZWQgaW4gYm90aCB0aGUgbmV3IGFuZCBvbGQgcm9vdFJlZHVjZXJcbiAgICAvLyB3aWxsIHJlY2VpdmUgdGhlIHByZXZpb3VzIHN0YXRlLiBUaGlzIGVmZmVjdGl2ZWx5IHBvcHVsYXRlc1xuICAgIC8vIHRoZSBuZXcgc3RhdGUgdHJlZSB3aXRoIGFueSByZWxldmFudCBkYXRhIGZyb20gdGhlIG9sZCBvbmUuXG5cbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5SRVBMQUNFXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEludGVyb3BlcmFiaWxpdHkgcG9pbnQgZm9yIG9ic2VydmFibGUvcmVhY3RpdmUgbGlicmFyaWVzLlxuICAgKiBAcmV0dXJucyB7b2JzZXJ2YWJsZX0gQSBtaW5pbWFsIG9ic2VydmFibGUgb2Ygc3RhdGUgY2hhbmdlcy5cbiAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgb2JzZXJ2YWJsZSBwcm9wb3NhbDpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JzZXJ2YWJsZVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIG9ic2VydmFibGUoKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgb3V0ZXJTdWJzY3JpYmUgPSBzdWJzY3JpYmU7XG4gICAgcmV0dXJuIF9yZWYgPSB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBtaW5pbWFsIG9ic2VydmFibGUgc3Vic2NyaXB0aW9uIG1ldGhvZC5cbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYnNlcnZlciBBbnkgb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgYXMgYW4gb2JzZXJ2ZXIuXG4gICAgICAgKiBUaGUgb2JzZXJ2ZXIgb2JqZWN0IHNob3VsZCBoYXZlIGEgYG5leHRgIG1ldGhvZC5cbiAgICAgICAqIEByZXR1cm5zIHtzdWJzY3JpcHRpb259IEFuIG9iamVjdCB3aXRoIGFuIGB1bnN1YnNjcmliZWAgbWV0aG9kIHRoYXQgY2FuXG4gICAgICAgKiBiZSB1c2VkIHRvIHVuc3Vic2NyaWJlIHRoZSBvYnNlcnZhYmxlIGZyb20gdGhlIHN0b3JlLCBhbmQgcHJldmVudCBmdXJ0aGVyXG4gICAgICAgKiBlbWlzc2lvbiBvZiB2YWx1ZXMgZnJvbSB0aGUgb2JzZXJ2YWJsZS5cbiAgICAgICAqL1xuICAgICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUob2JzZXJ2ZXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvYnNlcnZlciAhPT0gJ29iamVjdCcgfHwgb2JzZXJ2ZXIgPT09IG51bGwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCB0aGUgb2JzZXJ2ZXIgdG8gYmUgYW4gb2JqZWN0LicpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gb2JzZXJ2ZVN0YXRlKCkge1xuICAgICAgICAgIGlmIChvYnNlcnZlci5uZXh0KSB7XG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KGdldFN0YXRlKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG9ic2VydmVTdGF0ZSgpO1xuICAgICAgICB2YXIgdW5zdWJzY3JpYmUgPSBvdXRlclN1YnNjcmliZShvYnNlcnZlU3RhdGUpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHVuc3Vic2NyaWJlOiB1bnN1YnNjcmliZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sIF9yZWZbJCRvYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sIF9yZWY7XG4gIH0gLy8gV2hlbiBhIHN0b3JlIGlzIGNyZWF0ZWQsIGFuIFwiSU5JVFwiIGFjdGlvbiBpcyBkaXNwYXRjaGVkIHNvIHRoYXQgZXZlcnlcbiAgLy8gcmVkdWNlciByZXR1cm5zIHRoZWlyIGluaXRpYWwgc3RhdGUuIFRoaXMgZWZmZWN0aXZlbHkgcG9wdWxhdGVzXG4gIC8vIHRoZSBpbml0aWFsIHN0YXRlIHRyZWUuXG5cblxuICBkaXNwYXRjaCh7XG4gICAgdHlwZTogQWN0aW9uVHlwZXMuSU5JVFxuICB9KTtcbiAgcmV0dXJuIF9yZWYyID0ge1xuICAgIGRpc3BhdGNoOiBkaXNwYXRjaCxcbiAgICBzdWJzY3JpYmU6IHN1YnNjcmliZSxcbiAgICBnZXRTdGF0ZTogZ2V0U3RhdGUsXG4gICAgcmVwbGFjZVJlZHVjZXI6IHJlcGxhY2VSZWR1Y2VyXG4gIH0sIF9yZWYyWyQkb2JzZXJ2YWJsZV0gPSBvYnNlcnZhYmxlLCBfcmVmMjtcbn1cblxuLyoqXG4gKiBQcmludHMgYSB3YXJuaW5nIGluIHRoZSBjb25zb2xlIGlmIGl0IGV4aXN0cy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBUaGUgd2FybmluZyBtZXNzYWdlLlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIHdhcm5pbmcobWVzc2FnZSkge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG4gIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGNvbnNvbGUuZXJyb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICB9XG4gIC8qIGVzbGludC1lbmFibGUgbm8tY29uc29sZSAqL1xuXG5cbiAgdHJ5IHtcbiAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IGlmIHlvdSBlbmFibGVcbiAgICAvLyBcImJyZWFrIG9uIGFsbCBleGNlcHRpb25zXCIgaW4geW91ciBjb25zb2xlLFxuICAgIC8vIGl0IHdvdWxkIHBhdXNlIHRoZSBleGVjdXRpb24gYXQgdGhpcyBsaW5lLlxuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfSBjYXRjaCAoZSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxuXG59XG5cbmZ1bmN0aW9uIGdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlKGtleSwgYWN0aW9uKSB7XG4gIHZhciBhY3Rpb25UeXBlID0gYWN0aW9uICYmIGFjdGlvbi50eXBlO1xuICB2YXIgYWN0aW9uRGVzY3JpcHRpb24gPSBhY3Rpb25UeXBlICYmIFwiYWN0aW9uIFxcXCJcIiArIFN0cmluZyhhY3Rpb25UeXBlKSArIFwiXFxcIlwiIHx8ICdhbiBhY3Rpb24nO1xuICByZXR1cm4gXCJHaXZlbiBcIiArIGFjdGlvbkRlc2NyaXB0aW9uICsgXCIsIHJlZHVjZXIgXFxcIlwiICsga2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZC4gXCIgKyBcIlRvIGlnbm9yZSBhbiBhY3Rpb24sIHlvdSBtdXN0IGV4cGxpY2l0bHkgcmV0dXJuIHRoZSBwcmV2aW91cyBzdGF0ZS4gXCIgKyBcIklmIHlvdSB3YW50IHRoaXMgcmVkdWNlciB0byBob2xkIG5vIHZhbHVlLCB5b3UgY2FuIHJldHVybiBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLlwiO1xufVxuXG5mdW5jdGlvbiBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKGlucHV0U3RhdGUsIHJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSkge1xuICB2YXIgcmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XG4gIHZhciBhcmd1bWVudE5hbWUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLklOSVQgPyAncHJlbG9hZGVkU3RhdGUgYXJndW1lbnQgcGFzc2VkIHRvIGNyZWF0ZVN0b3JlJyA6ICdwcmV2aW91cyBzdGF0ZSByZWNlaXZlZCBieSB0aGUgcmVkdWNlcic7XG5cbiAgaWYgKHJlZHVjZXJLZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAnU3RvcmUgZG9lcyBub3QgaGF2ZSBhIHZhbGlkIHJlZHVjZXIuIE1ha2Ugc3VyZSB0aGUgYXJndW1lbnQgcGFzc2VkICcgKyAndG8gY29tYmluZVJlZHVjZXJzIGlzIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIHJlZHVjZXJzLic7XG4gIH1cblxuICBpZiAoIWlzUGxhaW5PYmplY3QoaW5wdXRTdGF0ZSkpIHtcbiAgICByZXR1cm4gXCJUaGUgXCIgKyBhcmd1bWVudE5hbWUgKyBcIiBoYXMgdW5leHBlY3RlZCB0eXBlIG9mIFxcXCJcIiArIHt9LnRvU3RyaW5nLmNhbGwoaW5wdXRTdGF0ZSkubWF0Y2goL1xccyhbYS16fEEtWl0rKS8pWzFdICsgXCJcXFwiLiBFeHBlY3RlZCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIFwiICsgKFwia2V5czogXFxcIlwiICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCJcIik7XG4gIH1cblxuICB2YXIgdW5leHBlY3RlZEtleXMgPSBPYmplY3Qua2V5cyhpbnB1dFN0YXRlKS5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiAhcmVkdWNlcnMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiAhdW5leHBlY3RlZEtleUNhY2hlW2tleV07XG4gIH0pO1xuICB1bmV4cGVjdGVkS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB1bmV4cGVjdGVkS2V5Q2FjaGVba2V5XSA9IHRydWU7XG4gIH0pO1xuICBpZiAoYWN0aW9uICYmIGFjdGlvbi50eXBlID09PSBBY3Rpb25UeXBlcy5SRVBMQUNFKSByZXR1cm47XG5cbiAgaWYgKHVuZXhwZWN0ZWRLZXlzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gXCJVbmV4cGVjdGVkIFwiICsgKHVuZXhwZWN0ZWRLZXlzLmxlbmd0aCA+IDEgPyAna2V5cycgOiAna2V5JykgKyBcIiBcIiArIChcIlxcXCJcIiArIHVuZXhwZWN0ZWRLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiIGZvdW5kIGluIFwiICsgYXJndW1lbnROYW1lICsgXCIuIFwiKSArIFwiRXhwZWN0ZWQgdG8gZmluZCBvbmUgb2YgdGhlIGtub3duIHJlZHVjZXIga2V5cyBpbnN0ZWFkOiBcIiArIChcIlxcXCJcIiArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiLiBVbmV4cGVjdGVkIGtleXMgd2lsbCBiZSBpZ25vcmVkLlwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRSZWR1Y2VyU2hhcGUocmVkdWNlcnMpIHtcbiAgT2JqZWN0LmtleXMocmVkdWNlcnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciByZWR1Y2VyID0gcmVkdWNlcnNba2V5XTtcbiAgICB2YXIgaW5pdGlhbFN0YXRlID0gcmVkdWNlcih1bmRlZmluZWQsIHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLklOSVRcbiAgICB9KTtcblxuICAgIGlmICh0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVkdWNlciBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIGR1cmluZyBpbml0aWFsaXphdGlvbi4gXCIgKyBcIklmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlIHJlZHVjZXIgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCBcIiArIFwiZXhwbGljaXRseSByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBcIiArIFwibm90IGJlIHVuZGVmaW5lZC4gSWYgeW91IGRvbid0IHdhbnQgdG8gc2V0IGEgdmFsdWUgZm9yIHRoaXMgcmVkdWNlciwgXCIgKyBcInlvdSBjYW4gdXNlIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuXCIpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVkdWNlcih1bmRlZmluZWQsIHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlBST0JFX1VOS05PV05fQUNUSU9OKClcbiAgICB9KSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlZHVjZXIgXFxcIlwiICsga2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZCB3aGVuIHByb2JlZCB3aXRoIGEgcmFuZG9tIHR5cGUuIFwiICsgKFwiRG9uJ3QgdHJ5IHRvIGhhbmRsZSBcIiArIEFjdGlvblR5cGVzLklOSVQgKyBcIiBvciBvdGhlciBhY3Rpb25zIGluIFxcXCJyZWR1eC8qXFxcIiBcIikgKyBcIm5hbWVzcGFjZS4gVGhleSBhcmUgY29uc2lkZXJlZCBwcml2YXRlLiBJbnN0ZWFkLCB5b3UgbXVzdCByZXR1cm4gdGhlIFwiICsgXCJjdXJyZW50IHN0YXRlIGZvciBhbnkgdW5rbm93biBhY3Rpb25zLCB1bmxlc3MgaXQgaXMgdW5kZWZpbmVkLCBcIiArIFwiaW4gd2hpY2ggY2FzZSB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUsIHJlZ2FyZGxlc3Mgb2YgdGhlIFwiICsgXCJhY3Rpb24gdHlwZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5IG5vdCBiZSB1bmRlZmluZWQsIGJ1dCBjYW4gYmUgbnVsbC5cIik7XG4gICAgfVxuICB9KTtcbn1cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgZGlmZmVyZW50IHJlZHVjZXIgZnVuY3Rpb25zLCBpbnRvIGEgc2luZ2xlXG4gKiByZWR1Y2VyIGZ1bmN0aW9uLiBJdCB3aWxsIGNhbGwgZXZlcnkgY2hpbGQgcmVkdWNlciwgYW5kIGdhdGhlciB0aGVpciByZXN1bHRzXG4gKiBpbnRvIGEgc2luZ2xlIHN0YXRlIG9iamVjdCwgd2hvc2Uga2V5cyBjb3JyZXNwb25kIHRvIHRoZSBrZXlzIG9mIHRoZSBwYXNzZWRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWR1Y2VycyBBbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGNvcnJlc3BvbmQgdG8gZGlmZmVyZW50XG4gKiByZWR1Y2VyIGZ1bmN0aW9ucyB0aGF0IG5lZWQgdG8gYmUgY29tYmluZWQgaW50byBvbmUuIE9uZSBoYW5keSB3YXkgdG8gb2J0YWluXG4gKiBpdCBpcyB0byB1c2UgRVM2IGBpbXBvcnQgKiBhcyByZWR1Y2Vyc2Agc3ludGF4LiBUaGUgcmVkdWNlcnMgbWF5IG5ldmVyIHJldHVyblxuICogdW5kZWZpbmVkIGZvciBhbnkgYWN0aW9uLiBJbnN0ZWFkLCB0aGV5IHNob3VsZCByZXR1cm4gdGhlaXIgaW5pdGlhbCBzdGF0ZVxuICogaWYgdGhlIHN0YXRlIHBhc3NlZCB0byB0aGVtIHdhcyB1bmRlZmluZWQsIGFuZCB0aGUgY3VycmVudCBzdGF0ZSBmb3IgYW55XG4gKiB1bnJlY29nbml6ZWQgYWN0aW9uLlxuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSByZWR1Y2VyIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBldmVyeSByZWR1Y2VyIGluc2lkZSB0aGVcbiAqIHBhc3NlZCBvYmplY3QsIGFuZCBidWlsZHMgYSBzdGF0ZSBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNvbWJpbmVSZWR1Y2VycyhyZWR1Y2Vycykge1xuICB2YXIgcmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XG4gIHZhciBmaW5hbFJlZHVjZXJzID0ge307XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWR1Y2VyS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSByZWR1Y2VyS2V5c1tpXTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHdhcm5pbmcoXCJObyByZWR1Y2VyIHByb3ZpZGVkIGZvciBrZXkgXFxcIlwiICsga2V5ICsgXCJcXFwiXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgZmluYWxSZWR1Y2Vyc1trZXldID0gcmVkdWNlcnNba2V5XTtcbiAgICB9XG4gIH1cblxuICB2YXIgZmluYWxSZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKGZpbmFsUmVkdWNlcnMpOyAvLyBUaGlzIGlzIHVzZWQgdG8gbWFrZSBzdXJlIHdlIGRvbid0IHdhcm4gYWJvdXQgdGhlIHNhbWVcbiAgLy8ga2V5cyBtdWx0aXBsZSB0aW1lcy5cblxuICB2YXIgdW5leHBlY3RlZEtleUNhY2hlO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlID0ge307XG4gIH1cblxuICB2YXIgc2hhcGVBc3NlcnRpb25FcnJvcjtcblxuICB0cnkge1xuICAgIGFzc2VydFJlZHVjZXJTaGFwZShmaW5hbFJlZHVjZXJzKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHNoYXBlQXNzZXJ0aW9uRXJyb3IgPSBlO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbWJpbmF0aW9uKHN0YXRlLCBhY3Rpb24pIHtcbiAgICBpZiAoc3RhdGUgPT09IHZvaWQgMCkge1xuICAgICAgc3RhdGUgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAoc2hhcGVBc3NlcnRpb25FcnJvcikge1xuICAgICAgdGhyb3cgc2hhcGVBc3NlcnRpb25FcnJvcjtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIHdhcm5pbmdNZXNzYWdlID0gZ2V0VW5leHBlY3RlZFN0YXRlU2hhcGVXYXJuaW5nTWVzc2FnZShzdGF0ZSwgZmluYWxSZWR1Y2VycywgYWN0aW9uLCB1bmV4cGVjdGVkS2V5Q2FjaGUpO1xuXG4gICAgICBpZiAod2FybmluZ01lc3NhZ2UpIHtcbiAgICAgICAgd2FybmluZyh3YXJuaW5nTWVzc2FnZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGhhc0NoYW5nZWQgPSBmYWxzZTtcbiAgICB2YXIgbmV4dFN0YXRlID0ge307XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgZmluYWxSZWR1Y2VyS2V5cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfa2V5ID0gZmluYWxSZWR1Y2VyS2V5c1tfaV07XG4gICAgICB2YXIgcmVkdWNlciA9IGZpbmFsUmVkdWNlcnNbX2tleV07XG4gICAgICB2YXIgcHJldmlvdXNTdGF0ZUZvcktleSA9IHN0YXRlW19rZXldO1xuICAgICAgdmFyIG5leHRTdGF0ZUZvcktleSA9IHJlZHVjZXIocHJldmlvdXNTdGF0ZUZvcktleSwgYWN0aW9uKTtcblxuICAgICAgaWYgKHR5cGVvZiBuZXh0U3RhdGVGb3JLZXkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHZhciBlcnJvck1lc3NhZ2UgPSBnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZShfa2V5LCBhY3Rpb24pO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JNZXNzYWdlKTtcbiAgICAgIH1cblxuICAgICAgbmV4dFN0YXRlW19rZXldID0gbmV4dFN0YXRlRm9yS2V5O1xuICAgICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgbmV4dFN0YXRlRm9yS2V5ICE9PSBwcmV2aW91c1N0YXRlRm9yS2V5O1xuICAgIH1cblxuICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhzdGF0ZSkubGVuZ3RoO1xuICAgIHJldHVybiBoYXNDaGFuZ2VkID8gbmV4dFN0YXRlIDogc3RhdGU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoKGFjdGlvbkNyZWF0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH07XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvbiBjcmVhdG9ycywgaW50byBhbiBvYmplY3Qgd2l0aCB0aGVcbiAqIHNhbWUga2V5cywgYnV0IHdpdGggZXZlcnkgZnVuY3Rpb24gd3JhcHBlZCBpbnRvIGEgYGRpc3BhdGNoYCBjYWxsIHNvIHRoZXlcbiAqIG1heSBiZSBpbnZva2VkIGRpcmVjdGx5LiBUaGlzIGlzIGp1c3QgYSBjb252ZW5pZW5jZSBtZXRob2QsIGFzIHlvdSBjYW4gY2FsbFxuICogYHN0b3JlLmRpc3BhdGNoKE15QWN0aW9uQ3JlYXRvcnMuZG9Tb21ldGhpbmcoKSlgIHlvdXJzZWxmIGp1c3QgZmluZS5cbiAqXG4gKiBGb3IgY29udmVuaWVuY2UsIHlvdSBjYW4gYWxzbyBwYXNzIGFuIGFjdGlvbiBjcmVhdG9yIGFzIHRoZSBmaXJzdCBhcmd1bWVudCxcbiAqIGFuZCBnZXQgYSBkaXNwYXRjaCB3cmFwcGVkIGZ1bmN0aW9uIGluIHJldHVybi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gYWN0aW9uQ3JlYXRvcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uXG4gKiBjcmVhdG9yIGZ1bmN0aW9ucy4gT25lIGhhbmR5IHdheSB0byBvYnRhaW4gaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXNgXG4gKiBzeW50YXguIFlvdSBtYXkgYWxzbyBwYXNzIGEgc2luZ2xlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGRpc3BhdGNoIFRoZSBgZGlzcGF0Y2hgIGZ1bmN0aW9uIGF2YWlsYWJsZSBvbiB5b3VyIFJlZHV4XG4gKiBzdG9yZS5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb258T2JqZWN0fSBUaGUgb2JqZWN0IG1pbWlja2luZyB0aGUgb3JpZ2luYWwgb2JqZWN0LCBidXQgd2l0aFxuICogZXZlcnkgYWN0aW9uIGNyZWF0b3Igd3JhcHBlZCBpbnRvIHRoZSBgZGlzcGF0Y2hgIGNhbGwuIElmIHlvdSBwYXNzZWQgYVxuICogZnVuY3Rpb24gYXMgYGFjdGlvbkNyZWF0b3JzYCwgdGhlIHJldHVybiB2YWx1ZSB3aWxsIGFsc28gYmUgYSBzaW5nbGVcbiAqIGZ1bmN0aW9uLlxuICovXG5cblxuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3JzKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCkge1xuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCk7XG4gIH1cblxuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzICE9PSAnb2JqZWN0JyB8fCBhY3Rpb25DcmVhdG9ycyA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcImJpbmRBY3Rpb25DcmVhdG9ycyBleHBlY3RlZCBhbiBvYmplY3Qgb3IgYSBmdW5jdGlvbiwgaW5zdGVhZCByZWNlaXZlZCBcIiArIChhY3Rpb25DcmVhdG9ycyA9PT0gbnVsbCA/ICdudWxsJyA6IHR5cGVvZiBhY3Rpb25DcmVhdG9ycykgKyBcIi4gXCIgKyBcIkRpZCB5b3Ugd3JpdGUgXFxcImltcG9ydCBBY3Rpb25DcmVhdG9ycyBmcm9tXFxcIiBpbnN0ZWFkIG9mIFxcXCJpbXBvcnQgKiBhcyBBY3Rpb25DcmVhdG9ycyBmcm9tXFxcIj9cIik7XG4gIH1cblxuICB2YXIgYm91bmRBY3Rpb25DcmVhdG9ycyA9IHt9O1xuXG4gIGZvciAodmFyIGtleSBpbiBhY3Rpb25DcmVhdG9ycykge1xuICAgIHZhciBhY3Rpb25DcmVhdG9yID0gYWN0aW9uQ3JlYXRvcnNba2V5XTtcblxuICAgIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYm91bmRBY3Rpb25DcmVhdG9yc1trZXldID0gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBib3VuZEFjdGlvbkNyZWF0b3JzO1xufVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIGtleXMucHVzaC5hcHBseShrZXlzLCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCkpO1xuICB9XG5cbiAgaWYgKGVudW1lcmFibGVPbmx5KSBrZXlzID0ga2V5cy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlO1xuICB9KTtcbiAgcmV0dXJuIGtleXM7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQyKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuXG4gICAgaWYgKGkgJSAyKSB7XG4gICAgICBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbi8qKlxuICogQ29tcG9zZXMgc2luZ2xlLWFyZ3VtZW50IGZ1bmN0aW9ucyBmcm9tIHJpZ2h0IHRvIGxlZnQuIFRoZSByaWdodG1vc3RcbiAqIGZ1bmN0aW9uIGNhbiB0YWtlIG11bHRpcGxlIGFyZ3VtZW50cyBhcyBpdCBwcm92aWRlcyB0aGUgc2lnbmF0dXJlIGZvclxuICogdGhlIHJlc3VsdGluZyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gZnVuY3MgVGhlIGZ1bmN0aW9ucyB0byBjb21wb3NlLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIG9idGFpbmVkIGJ5IGNvbXBvc2luZyB0aGUgYXJndW1lbnQgZnVuY3Rpb25zXG4gKiBmcm9tIHJpZ2h0IHRvIGxlZnQuIEZvciBleGFtcGxlLCBjb21wb3NlKGYsIGcsIGgpIGlzIGlkZW50aWNhbCB0byBkb2luZ1xuICogKC4uLmFyZ3MpID0+IGYoZyhoKC4uLmFyZ3MpKSkuXG4gKi9cbmZ1bmN0aW9uIGNvbXBvc2UoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBmdW5jcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmdW5jc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgICAgcmV0dXJuIGFyZztcbiAgICB9O1xuICB9XG5cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBmdW5jc1swXTtcbiAgfVxuXG4gIHJldHVybiBmdW5jcy5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGEoYi5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cykpO1xuICAgIH07XG4gIH0pO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBzdG9yZSBlbmhhbmNlciB0aGF0IGFwcGxpZXMgbWlkZGxld2FyZSB0byB0aGUgZGlzcGF0Y2ggbWV0aG9kXG4gKiBvZiB0aGUgUmVkdXggc3RvcmUuIFRoaXMgaXMgaGFuZHkgZm9yIGEgdmFyaWV0eSBvZiB0YXNrcywgc3VjaCBhcyBleHByZXNzaW5nXG4gKiBhc3luY2hyb25vdXMgYWN0aW9ucyBpbiBhIGNvbmNpc2UgbWFubmVyLCBvciBsb2dnaW5nIGV2ZXJ5IGFjdGlvbiBwYXlsb2FkLlxuICpcbiAqIFNlZSBgcmVkdXgtdGh1bmtgIHBhY2thZ2UgYXMgYW4gZXhhbXBsZSBvZiB0aGUgUmVkdXggbWlkZGxld2FyZS5cbiAqXG4gKiBCZWNhdXNlIG1pZGRsZXdhcmUgaXMgcG90ZW50aWFsbHkgYXN5bmNocm9ub3VzLCB0aGlzIHNob3VsZCBiZSB0aGUgZmlyc3RcbiAqIHN0b3JlIGVuaGFuY2VyIGluIHRoZSBjb21wb3NpdGlvbiBjaGFpbi5cbiAqXG4gKiBOb3RlIHRoYXQgZWFjaCBtaWRkbGV3YXJlIHdpbGwgYmUgZ2l2ZW4gdGhlIGBkaXNwYXRjaGAgYW5kIGBnZXRTdGF0ZWAgZnVuY3Rpb25zXG4gKiBhcyBuYW1lZCBhcmd1bWVudHMuXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gbWlkZGxld2FyZXMgVGhlIG1pZGRsZXdhcmUgY2hhaW4gdG8gYmUgYXBwbGllZC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBzdG9yZSBlbmhhbmNlciBhcHBseWluZyB0aGUgbWlkZGxld2FyZS5cbiAqL1xuXG5mdW5jdGlvbiBhcHBseU1pZGRsZXdhcmUoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBtaWRkbGV3YXJlcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBtaWRkbGV3YXJlc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoY3JlYXRlU3RvcmUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHN0b3JlID0gY3JlYXRlU3RvcmUuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuXG4gICAgICB2YXIgX2Rpc3BhdGNoID0gZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRGlzcGF0Y2hpbmcgd2hpbGUgY29uc3RydWN0aW5nIHlvdXIgbWlkZGxld2FyZSBpcyBub3QgYWxsb3dlZC4gJyArICdPdGhlciBtaWRkbGV3YXJlIHdvdWxkIG5vdCBiZSBhcHBsaWVkIHRvIHRoaXMgZGlzcGF0Y2guJyk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgbWlkZGxld2FyZUFQSSA9IHtcbiAgICAgICAgZ2V0U3RhdGU6IHN0b3JlLmdldFN0YXRlLFxuICAgICAgICBkaXNwYXRjaDogZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gICAgICAgICAgcmV0dXJuIF9kaXNwYXRjaC5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB2YXIgY2hhaW4gPSBtaWRkbGV3YXJlcy5tYXAoZnVuY3Rpb24gKG1pZGRsZXdhcmUpIHtcbiAgICAgICAgcmV0dXJuIG1pZGRsZXdhcmUobWlkZGxld2FyZUFQSSk7XG4gICAgICB9KTtcbiAgICAgIF9kaXNwYXRjaCA9IGNvbXBvc2UuYXBwbHkodm9pZCAwLCBjaGFpbikoc3RvcmUuZGlzcGF0Y2gpO1xuICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQyKHt9LCBzdG9yZSwge1xuICAgICAgICBkaXNwYXRjaDogX2Rpc3BhdGNoXG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xufVxuXG4vKlxuICogVGhpcyBpcyBhIGR1bW15IGZ1bmN0aW9uIHRvIGNoZWNrIGlmIHRoZSBmdW5jdGlvbiBuYW1lIGhhcyBiZWVuIGFsdGVyZWQgYnkgbWluaWZpY2F0aW9uLlxuICogSWYgdGhlIGZ1bmN0aW9uIGhhcyBiZWVuIG1pbmlmaWVkIGFuZCBOT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLCB3YXJuIHRoZSB1c2VyLlxuICovXG5cbmZ1bmN0aW9uIGlzQ3J1c2hlZCgpIHt9XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiBpc0NydXNoZWQubmFtZSA9PT0gJ3N0cmluZycgJiYgaXNDcnVzaGVkLm5hbWUgIT09ICdpc0NydXNoZWQnKSB7XG4gIHdhcm5pbmcoJ1lvdSBhcmUgY3VycmVudGx5IHVzaW5nIG1pbmlmaWVkIGNvZGUgb3V0c2lkZSBvZiBOT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIuICcgKyAnVGhpcyBtZWFucyB0aGF0IHlvdSBhcmUgcnVubmluZyBhIHNsb3dlciBkZXZlbG9wbWVudCBidWlsZCBvZiBSZWR1eC4gJyArICdZb3UgY2FuIHVzZSBsb29zZS1lbnZpZnkgKGh0dHBzOi8vZ2l0aHViLmNvbS96ZXJ0b3NoL2xvb3NlLWVudmlmeSkgZm9yIGJyb3dzZXJpZnkgJyArICdvciBzZXR0aW5nIG1vZGUgdG8gcHJvZHVjdGlvbiBpbiB3ZWJwYWNrIChodHRwczovL3dlYnBhY2suanMub3JnL2NvbmNlcHRzL21vZGUvKSAnICsgJ3RvIGVuc3VyZSB5b3UgaGF2ZSB0aGUgY29ycmVjdCBjb2RlIGZvciB5b3VyIHByb2R1Y3Rpb24gYnVpbGQuJyk7XG59XG5cbmV4cG9ydCB7IEFjdGlvblR5cGVzIGFzIF9fRE9fTk9UX1VTRV9fQWN0aW9uVHlwZXMsIGFwcGx5TWlkZGxld2FyZSwgYmluZEFjdGlvbkNyZWF0b3JzLCBjb21iaW5lUmVkdWNlcnMsIGNvbXBvc2UsIGNyZWF0ZVN0b3JlIH07XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qIGdsb2JhbCB3aW5kb3cgKi9cbmltcG9ydCBwb255ZmlsbCBmcm9tICcuL3BvbnlmaWxsLmpzJztcblxudmFyIHJvb3Q7XG5cbmlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHNlbGY7XG59IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSB3aW5kb3c7XG59IGVsc2UgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBnbG9iYWw7XG59IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBtb2R1bGU7XG59IGVsc2Uge1xuICByb290ID0gRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbn1cblxudmFyIHJlc3VsdCA9IHBvbnlmaWxsKHJvb3QpO1xuZXhwb3J0IGRlZmF1bHQgcmVzdWx0O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgY29udGV4dFR5cGU6IHRydWUsXG4gIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgbWl4aW5zOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgS05PV05fU1RBVElDUyA9IHtcbiAgbmFtZTogdHJ1ZSxcbiAgbGVuZ3RoOiB0cnVlLFxuICBwcm90b3R5cGU6IHRydWUsXG4gIGNhbGxlcjogdHJ1ZSxcbiAgY2FsbGVlOiB0cnVlLFxuICBhcmd1bWVudHM6IHRydWUsXG4gIGFyaXR5OiB0cnVlXG59O1xudmFyIEZPUldBUkRfUkVGX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIHJlbmRlcjogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlXG59O1xudmFyIE1FTU9fU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgY29tcGFyZTogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIFRZUEVfU1RBVElDUyA9IHt9O1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuRm9yd2FyZFJlZl0gPSBGT1JXQVJEX1JFRl9TVEFUSUNTO1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuTWVtb10gPSBNRU1PX1NUQVRJQ1M7XG5cbmZ1bmN0aW9uIGdldFN0YXRpY3MoY29tcG9uZW50KSB7XG4gIC8vIFJlYWN0IHYxNi4xMSBhbmQgYmVsb3dcbiAgaWYgKHJlYWN0SXMuaXNNZW1vKGNvbXBvbmVudCkpIHtcbiAgICByZXR1cm4gTUVNT19TVEFUSUNTO1xuICB9IC8vIFJlYWN0IHYxNi4xMiBhbmQgYWJvdmVcblxuXG4gIHJldHVybiBUWVBFX1NUQVRJQ1NbY29tcG9uZW50WyckJHR5cGVvZiddXSB8fCBSRUFDVF9TVEFUSUNTO1xufVxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0U3RhdGljcyA9IGdldFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50KTtcbiAgICB2YXIgc291cmNlU3RhdGljcyA9IGdldFN0YXRpY3Moc291cmNlQ29tcG9uZW50KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG5cbiAgICAgIGlmICghS05PV05fU1RBVElDU1trZXldICYmICEoYmxhY2tsaXN0ICYmIGJsYWNrbGlzdFtrZXldKSAmJiAhKHNvdXJjZVN0YXRpY3MgJiYgc291cmNlU3RhdGljc1trZXldKSAmJiAhKHRhcmdldFN0YXRpY3MgJiYgdGFyZ2V0U3RhdGljc1trZXldKSkge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaG9pc3ROb25SZWFjdFN0YXRpY3M7XG4iLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiaW1wb3J0IHsgcmVwZWF0IH0gZnJvbSBcIi4vYXJyYXlcIjtcclxuaW1wb3J0IHsgTWF0cml4NEFycmF5IH0gZnJvbSBcIi4vLi4vdmlld2VyL3NyYy90eXBlc1wiO1xyXG5pbXBvcnQgeyB2c2NvZGVBcGkgfSBmcm9tIFwiLi9jb21tdW5pY2F0aW9uL3ZzY29kZUFwaVwiO1xyXG5cclxuZXhwb3J0IHR5cGUgRXh0ZW5zaW9uU3RhdGUgPSB7XHJcbiAgdmVydGV4RmlsZVBhdGg6IHN0cmluZyB8IG51bGw7XHJcbiAgZnJhZ21lbnRGaWxlUGF0aDogc3RyaW5nIHwgbnVsbDtcclxuICB1bmlmb3JtVmFsdWVzOiB7IFtrZXk6IHN0cmluZ106IHsgdHlwZTogbnVtYmVyOyB2YWx1ZTogYW55IH0gfTtcclxuICBhdHRyaWJ1dGVCdWZmZXJWYWx1ZXM6IHsgW2tleTogc3RyaW5nXTogeyB0eXBlOiBudW1iZXI7IHZhbHVlOiBhbnkgfSB9O1xyXG4gIHRleHR1cmVWYWx1ZXM6IHsgW2tleTogc3RyaW5nXTogeyBvcHRpb25JZDogc3RyaW5nOyBvcHRpb25WYWx1ZTogc3RyaW5nIH0gfTtcclxuICBjYW1lcmFQb3NpdGlvbjogTWF0cml4NEFycmF5O1xyXG4gIC8vZHJhd01vZGU6IHN0cmluZztcclxuICAvL21lc2hJZDogc3RyaW5nO1xyXG59O1xyXG5cclxuY29uc3QgZGVmYXVsdFN0YXRlOiBFeHRlbnNpb25TdGF0ZSA9IHtcclxuICB2ZXJ0ZXhGaWxlUGF0aDogbnVsbCxcclxuICBmcmFnbWVudEZpbGVQYXRoOiBudWxsLFxyXG4gIHVuaWZvcm1WYWx1ZXM6IHt9LFxyXG4gIGF0dHJpYnV0ZUJ1ZmZlclZhbHVlczoge30sXHJcbiAgdGV4dHVyZVZhbHVlczoge30sXHJcbiAgY2FtZXJhUG9zaXRpb246IHJlcGVhdCgxNiwgMCkgYXMgTWF0cml4NEFycmF5LFxyXG4gIC8vZHJhd01vZGU6IFwiZWxlbWVudHNcIixcclxuICAvL21lc2hJZDogXCJjdWJlXCIsXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0RXh0ZW5zaW9uU3RhdGUgPSAoKTogRXh0ZW5zaW9uU3RhdGUgPT4gKHtcclxuICAuLi5kZWZhdWx0U3RhdGUsXHJcbiAgLi4udnNjb2RlQXBpLmdldFN0YXRlKCksXHJcbn0pO1xyXG5leHBvcnQgY29uc3Qgc2V0RXh0ZW5zaW9uU3RhdGUgPSAobmV3U3RhdGU6IFBhcnRpYWw8RXh0ZW5zaW9uU3RhdGU+KSA9PlxyXG4gIHZzY29kZUFwaS5zZXRTdGF0ZShuZXdTdGF0ZSk7XHJcbiIsImltcG9ydCB7IE1lc3NhZ2VSZXF1ZXN0IH0gZnJvbSBcIi4vbWVzc2FnZXNcIjtcclxuXHJcbmRlY2xhcmUgY29uc3QgYWNxdWlyZVZzQ29kZUFwaTogKCkgPT4ge1xyXG4gIGdldFN0YXRlOiAoKSA9PiBhbnk7XHJcbiAgc2V0U3RhdGU6IChzdGF0ZTogYW55KSA9PiB2b2lkO1xyXG4gIHBvc3RNZXNzYWdlOiAobWVzc2FnZTogTWVzc2FnZVJlcXVlc3QpID0+IHZvaWQ7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgdnNjb2RlQXBpID0gYWNxdWlyZVZzQ29kZUFwaSgpO1xyXG4iLCJpbXBvcnQgKiBhcyB2c2NvZGUgZnJvbSBcInZzY29kZVwiO1xyXG5pbXBvcnQgeyByZW1vdmUgfSBmcm9tIFwiLi4vYXJyYXlcIjtcclxuaW1wb3J0IHsgdXVpZHY0IH0gZnJvbSBcIi4uL3V1aWRcIjtcclxuaW1wb3J0IHsgTWVzc2FnZVJlc3BvbnNlIH0gZnJvbSBcIi4vbWVzc2FnZXNcIjtcclxuaW1wb3J0IHsgdnNjb2RlQXBpIH0gZnJvbSBcIi4vdnNjb2RlQXBpXCI7XHJcblxyXG50eXBlIFJlc3BvbnNlTGlzdGVuZXIgPSAobWVzc2FnZTogTWVzc2FnZVJlc3BvbnNlKSA9PiB2b2lkO1xyXG5cclxuY2xhc3MgVmlld2VyRW5kcG9pbnQge1xyXG4gIGV2ZW50TGlzdGVuZXJzOiBSZXNwb25zZUxpc3RlbmVyW10gPSBbXTtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgZXZlbnQgPT4ge1xyXG4gICAgICB0aGlzLmV2ZW50TGlzdGVuZXJzLmZvckVhY2gobGlzdGVuZXIgPT4gbGlzdGVuZXIoZXZlbnQuZGF0YSkpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBnZXRXb3Jrc3BhY2VGaWxlc09mVHlwZXMoZXh0ZW5zaW9uczogc3RyaW5nW10pIHtcclxuICAgIGNvbnN0IG1lc3NhZ2VJZCA9IHV1aWR2NCgpO1xyXG5cclxuICAgIHZzY29kZUFwaS5wb3N0TWVzc2FnZSh7XHJcbiAgICAgIHR5cGU6IFwiZ2V0V29ya3NwYWNlRmlsZXNPZlR5cGVzXCIsXHJcbiAgICAgIGlkOiBtZXNzYWdlSWQsXHJcbiAgICAgIHBheWxvYWQ6IHsgZXh0ZW5zaW9ucyB9LFxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPHsgZmlsZU5hbWU6IHN0cmluZzsgZmlsZVBhdGg6IHN0cmluZzsgdXJpOiBzdHJpbmcgfVtdPihcclxuICAgICAgcmVzb2x2ZSA9PiB7XHJcbiAgICAgICAgY29uc3QgbGlzdGVuZXIgPSAobWVzc2FnZTogTWVzc2FnZVJlc3BvbnNlKSA9PiB7XHJcbiAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIG1lc3NhZ2UudHlwZSA9PT0gXCJnZXRXb3Jrc3BhY2VGaWxlc09mVHlwZXNcIiAmJlxyXG4gICAgICAgICAgICBtZXNzYWdlLmlkID09PSBtZXNzYWdlSWRcclxuICAgICAgICAgICkge1xyXG4gICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UucGF5bG9hZC5maWxlcyk7XHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIobGlzdGVuZXIpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMuZXZlbnRMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XHJcbiAgICAgIH1cclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBnZXREb2N1bWVudFRleHQoZmlsZU5hbWU6IHN0cmluZykge1xyXG4gICAgY29uc3QgbWVzc2FnZUlkID0gdXVpZHY0KCk7XHJcblxyXG4gICAgdnNjb2RlQXBpLnBvc3RNZXNzYWdlKHtcclxuICAgICAgdHlwZTogXCJnZXREb2N1bWVudFRleHRcIixcclxuICAgICAgaWQ6IG1lc3NhZ2VJZCxcclxuICAgICAgcGF5bG9hZDogeyBmaWxlTmFtZSB9LFxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPHN0cmluZz4ocmVzb2x2ZSA9PiB7XHJcbiAgICAgIGNvbnN0IGxpc3RlbmVyID0gKG1lc3NhZ2U6IE1lc3NhZ2VSZXNwb25zZSkgPT4ge1xyXG4gICAgICAgIGlmIChtZXNzYWdlLnR5cGUgPT09IFwiZ2V0RG9jdW1lbnRUZXh0XCIgJiYgbWVzc2FnZS5pZCA9PT0gbWVzc2FnZUlkKSB7XHJcbiAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UucGF5bG9hZC50ZXh0KTtcclxuICAgICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIobGlzdGVuZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIHRoaXMuZXZlbnRMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGdldEV4dGVuc2lvbkZpbGVVcmkoZmlsZU5hbWU6IHN0cmluZykge1xyXG4gICAgY29uc3QgbWVzc2FnZUlkID0gdXVpZHY0KCk7XHJcblxyXG4gICAgdnNjb2RlQXBpLnBvc3RNZXNzYWdlKHtcclxuICAgICAgdHlwZTogXCJnZXRFeHRlbnNpb25GaWxlVXJpXCIsXHJcbiAgICAgIGlkOiBtZXNzYWdlSWQsXHJcbiAgICAgIHBheWxvYWQ6IHsgZmlsZU5hbWUgfSxcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZTxzdHJpbmc+KHJlc29sdmUgPT4ge1xyXG4gICAgICBjb25zdCBsaXN0ZW5lciA9IChtZXNzYWdlOiBNZXNzYWdlUmVzcG9uc2UpID0+IHtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICBtZXNzYWdlLnR5cGUgPT09IFwiZ2V0RXh0ZW5zaW9uRmlsZVVyaVwiICYmXHJcbiAgICAgICAgICBtZXNzYWdlLmlkID09PSBtZXNzYWdlSWRcclxuICAgICAgICApIHtcclxuICAgICAgICAgIHJlc29sdmUobWVzc2FnZS5wYXlsb2FkLnVyaSk7XHJcbiAgICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKGxpc3RlbmVyKTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcblxyXG4gICAgICB0aGlzLmV2ZW50TGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBzdWJzY3JpYmVUb0RvY3VtZW50U2F2ZShcclxuICAgIGZpbGVQYXRoOiBzdHJpbmcsXHJcbiAgICBjYWxsYmFjazogKG5ld0NvbnRlbnQ6IHN0cmluZykgPT4gdm9pZFxyXG4gICk6ICgpID0+IHZvaWQge1xyXG4gICAgdnNjb2RlQXBpLnBvc3RNZXNzYWdlKHtcclxuICAgICAgdHlwZTogXCJzdWJzY3JpYmVUb0RvY3VtZW50VGV4dENoYW5nZVwiLFxyXG4gICAgICBwYXlsb2FkOiB7IGZpbGVOYW1lOiBmaWxlUGF0aCB9LFxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgbGlzdGVuZXIgPSAobWVzc2FnZTogTWVzc2FnZVJlc3BvbnNlKSA9PiB7XHJcbiAgICAgIGlmIChcclxuICAgICAgICBtZXNzYWdlLnR5cGUgPT09IFwib25Eb2N1bWVudFRleHRDaGFuZ2VcIiAmJlxyXG4gICAgICAgIG1lc3NhZ2UucGF5bG9hZC5maWxlUGF0aCA9PT0gZmlsZVBhdGhcclxuICAgICAgKSB7XHJcbiAgICAgICAgY2FsbGJhY2sobWVzc2FnZS5wYXlsb2FkLnRleHQpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuZXZlbnRMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XHJcbiAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKGxpc3RlbmVyKTtcclxuICAgICAgdnNjb2RlQXBpLnBvc3RNZXNzYWdlKHtcclxuICAgICAgICB0eXBlOiBcInVuc3Vic2NyaWJlVG9Eb2N1bWVudFRleHRDaGFuZ2VcIixcclxuICAgICAgICBwYXlsb2FkOiB7IGZpbGVOYW1lOiBmaWxlUGF0aCB9LFxyXG4gICAgICB9KTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBzaG93V2ViVmlld0RldlRvb2xzKCkge1xyXG4gICAgdnNjb2RlQXBpLnBvc3RNZXNzYWdlKHtcclxuICAgICAgdHlwZTogXCJzaG93V2ViVmlld0RldlRvb2xzXCIsXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgcmVtb3ZlTGlzdGVuZXIobGlzdGVuZXI6IFJlc3BvbnNlTGlzdGVuZXIpIHtcclxuICAgIHJlbW92ZSh0aGlzLmV2ZW50TGlzdGVuZXJzLCBsaXN0ZW5lcik7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3Qgdmlld2VyRW5kcG9pbnQgPSBuZXcgVmlld2VyRW5kcG9pbnQoKTtcclxuIiwiLy9odHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjExNzUyM1xyXG5leHBvcnQgY29uc3QgdXVpZHY0ID0gKCkgPT4ge1xyXG4gIHJldHVybiBcInh4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eFwiLnJlcGxhY2UoL1t4eV0vZywgZnVuY3Rpb24gKGMpIHtcclxuICAgIHZhciByID0gKE1hdGgucmFuZG9tKCkgKiAxNikgfCAwLFxyXG4gICAgICB2ID0gYyA9PSBcInhcIiA/IHIgOiAociAmIDB4MykgfCAweDg7XHJcbiAgICByZXR1cm4gdi50b1N0cmluZygxNik7XHJcbiAgfSk7XHJcbn07XHJcbiIsImV4cG9ydCBjb25zdCBoYXNQcm9wZXJ0eSA9IDxUIGV4dGVuZHMge30sIFAgZXh0ZW5kcyBQcm9wZXJ0eUtleT4oXHJcbiAgb2JqOiBULFxyXG4gIHByb3A6IFBcclxuKTogb2JqIGlzIFQgJiBSZWNvcmQ8UCwgdW5rbm93bj4gPT4ge1xyXG4gIHJldHVybiBvYmouaGFzT3duUHJvcGVydHkocHJvcCk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgYXNzZXJ0TmV2ZXIgPSAodmFsdWU6IG5ldmVyKTogbmV2ZXIgPT4ge1xyXG4gIHRocm93IG5ldyBFcnJvcihgVW5oYW5kbGVkIHVuaW9uIG1lbWJlcjogJHtKU09OLnN0cmluZ2lmeSh2YWx1ZSl9YCk7XHJcbn07XHJcbiIsImltcG9ydCB7IFZlY3RvcjMgfSBmcm9tIFwiLi4vdHlwZXNcIjtcclxuXHJcbnR5cGUgRXZlbnRUeXBlID0ga2V5b2YgSFRNTEVsZW1lbnRFdmVudE1hcDtcclxudHlwZSBFdmVudEhhbmRsZXI8VCBleHRlbmRzIEV2ZW50PiA9IChldmVudDogVCkgPT4gdm9pZDtcclxuXHJcbmV4cG9ydCBjb25zdCBjYW1lcmFQb3NpdGlvblRvVmVjdG9yMyA9IChcclxuICBjYW1lcmFQb3NpdGlvbjogQ2FtZXJhUG9zaXRpb25cclxuKTogVmVjdG9yMyA9PiB7XHJcbiAgY29uc3QgeSA9IGNhbWVyYVBvc2l0aW9uLnJhZGl1cyAqIE1hdGguc2luKGNhbWVyYVBvc2l0aW9uLmxhdGl0dWRlKTtcclxuICBjb25zdCByID0gY2FtZXJhUG9zaXRpb24ucmFkaXVzICogTWF0aC5jb3MoY2FtZXJhUG9zaXRpb24ubGF0aXR1ZGUpO1xyXG4gIGNvbnN0IHogPSByICogTWF0aC5jb3MoY2FtZXJhUG9zaXRpb24ubG9uZ2l0dWRlKTtcclxuICBjb25zdCB4ID0gciAqIE1hdGguc2luKGNhbWVyYVBvc2l0aW9uLmxvbmdpdHVkZSk7XHJcbiAgcmV0dXJuIHsgeCwgeSwgeiB9O1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgQ2FtZXJhUG9zaXRpb24gPSB7XHJcbiAgbGF0aXR1ZGU6IG51bWJlcjtcclxuICBsb25naXR1ZGU6IG51bWJlcjtcclxuICByYWRpdXM6IG51bWJlcjtcclxufTtcclxuXHJcbnR5cGUgQWN0aW9uID1cclxuICB8IHtcclxuICAgICAgdHlwZTogXCJvcmJpdFJvdGF0ZVwiO1xyXG4gICAgICBkZWx0YUxhdGl0dWRlOiBudW1iZXI7XHJcbiAgICAgIGRlbHRhTG9uZ2l0dWRlOiBudW1iZXI7XHJcbiAgICB9XHJcbiAgfCB7IHR5cGU6IFwiem9vbUluQXRcIiB9XHJcbiAgfCB7IHR5cGU6IFwiem9vbU91dEF0XCIgfTtcclxuXHJcbmNvbnN0IGNsYW1wTGF0aXR1ZGUgPSAobGF0aXR1ZGU6IG51bWJlcikgPT4ge1xyXG4gIHJldHVybiBNYXRoLm1pbihcclxuICAgIE1hdGgubWF4KGxhdGl0dWRlLCAtTWF0aC5QSSAvIDIuMCArIDAuMSksXHJcbiAgICBNYXRoLlBJIC8gMi4wIC0gMC4xXHJcbiAgKTtcclxufTtcclxuXHJcbmNvbnN0IGNsYW1wTG9uZ2l0dWRlID0gKGxvbmdpdHVkZTogbnVtYmVyKSA9PiB7XHJcbiAgaWYgKGxvbmdpdHVkZSA+IE1hdGguUEkpIHJldHVybiBsb25naXR1ZGUgLSBNYXRoLlBJICogMi4wO1xyXG4gIGVsc2UgaWYgKGxvbmdpdHVkZSA8IC1NYXRoLlBJKSByZXR1cm4gbG9uZ2l0dWRlICsgTWF0aC5QSSAqIDIuMDtcclxuICBlbHNlIHJldHVybiBsb25naXR1ZGU7XHJcbn07XHJcblxyXG5jb25zdCBjbGFtcFJhZGl1cyA9IChyYWRpdXM6IG51bWJlcikgPT4ge1xyXG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChyYWRpdXMsIDEpLCAxMCk7XHJcbn07XHJcblxyXG5jb25zdCByZWR1Y2VyID0gKHBvc2l0aW9uOiBDYW1lcmFQb3NpdGlvbiwgYWN0aW9uOiBBY3Rpb24pOiBDYW1lcmFQb3NpdGlvbiA9PiB7XHJcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xyXG4gICAgY2FzZSBcIm9yYml0Um90YXRlXCI6IHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICAuLi5wb3NpdGlvbixcclxuICAgICAgICBsYXRpdHVkZTogY2xhbXBMYXRpdHVkZShwb3NpdGlvbi5sYXRpdHVkZSArIGFjdGlvbi5kZWx0YUxhdGl0dWRlKSxcclxuICAgICAgICBsb25naXR1ZGU6IGNsYW1wTG9uZ2l0dWRlKHBvc2l0aW9uLmxvbmdpdHVkZSArIGFjdGlvbi5kZWx0YUxvbmdpdHVkZSksXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgICBjYXNlIFwiem9vbUluQXRcIjoge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIC4uLnBvc2l0aW9uLFxyXG4gICAgICAgIHJhZGl1czogY2xhbXBSYWRpdXMocG9zaXRpb24ucmFkaXVzIC0gMC4xKSxcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIGNhc2UgXCJ6b29tT3V0QXRcIjoge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIC4uLnBvc2l0aW9uLFxyXG4gICAgICAgIHJhZGl1czogY2xhbXBSYWRpdXMocG9zaXRpb24ucmFkaXVzICsgMC4xKSxcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJldHVybiBwb3NpdGlvbjtcclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgY2xhc3MgQ2FtZXJhUG9zaXRpb25NYW5pcHVsYXRvciB7XHJcbiAgcHJpdmF0ZSBwb2ludGVyUG9zaXRpb24gPSB7IHg6IDAsIHk6IDAgfTtcclxuICBldmVudExpc3RlbmVycyA9IG5ldyBNYXA8c3RyaW5nLCBFdmVudEhhbmRsZXI8RXZlbnQ+PigpO1xyXG4gIHByaXZhdGUgaXNNb3ZpbmcgPSBmYWxzZTtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcm90ZWN0ZWQgZWxlbWVudDogSFRNTEVsZW1lbnQsXHJcbiAgICBwcml2YXRlIHBvc2l0aW9uUHJvdmlkZXI6ICgpID0+IENhbWVyYVBvc2l0aW9uLFxyXG4gICAgcHJpdmF0ZSBvblBvc2l0aW9uQ2hhbmdlOiAobmV3UG9zaXRpb246IENhbWVyYVBvc2l0aW9uKSA9PiB2b2lkXHJcbiAgKSB7XHJcbiAgICB0aGlzLnJlZ2lzdGVyRXZlbnQoXCJtb3VzZWRvd25cIiwgdGhpcy5vbk1vdXNlRG93bik7XHJcbiAgICB0aGlzLnJlZ2lzdGVyRXZlbnQoXCJtb3VzZW1vdmVcIiwgdGhpcy5vbk1vdXNlTW92ZSk7XHJcbiAgICB0aGlzLnJlZ2lzdGVyRXZlbnQoXCJtb3VzZXVwXCIsIHRoaXMub25Nb3VzZVVwKTtcclxuICAgIHRoaXMucmVnaXN0ZXJFdmVudChcIm1vdXNlbGVhdmVcIiwgdGhpcy5vbk1vdXNlTGVhdmUpO1xyXG4gICAgdGhpcy5yZWdpc3RlckV2ZW50KFwid2hlZWxcIiwgdGhpcy5vbldoZWVsKTtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICB0aGlzLmV2ZW50TGlzdGVuZXJzLmZvckVhY2goKHZhbHVlLCBrZXkpID0+XHJcbiAgICAgIHRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGtleSwgdmFsdWUpXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSByZWdpc3RlckV2ZW50PFQgZXh0ZW5kcyBFdmVudD4oXHJcbiAgICB0eXBlOiBFdmVudFR5cGUsXHJcbiAgICBoYW5kbGVyOiBFdmVudEhhbmRsZXI8VD5cclxuICApIHtcclxuICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGhhbmRsZXIpO1xyXG4gICAgdGhpcy5ldmVudExpc3RlbmVycy5zZXQodHlwZSwgaGFuZGxlciBhcyBFdmVudEhhbmRsZXI8RXZlbnQ+KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZGlzcGF0Y2hBY3Rpb24gPSAoYWN0aW9uOiBBY3Rpb24pID0+IHtcclxuICAgIGNvbnN0IG5ld1ZpZXdwb3J0ID0gcmVkdWNlcih0aGlzLnBvc2l0aW9uUHJvdmlkZXIoKSwgYWN0aW9uKTtcclxuICAgIHRoaXMub25Qb3NpdGlvbkNoYW5nZShuZXdWaWV3cG9ydCk7XHJcbiAgfTtcclxuXHJcbiAgcHJpdmF0ZSBvbk1vdXNlRG93biA9IChlOiBNb3VzZUV2ZW50KSA9PiB7XHJcbiAgICBpZiAoZS5idXR0b24gPT09IDApIHtcclxuICAgICAgdGhpcy5wb2ludGVyUG9zaXRpb24gPSB7IHg6IGUub2Zmc2V0WCwgeTogZS5vZmZzZXRZIH07XHJcbiAgICAgIHRoaXMuaXNNb3ZpbmcgPSB0cnVlO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHByaXZhdGUgb25Nb3VzZU1vdmUgPSAoZTogTW91c2VFdmVudCkgPT4ge1xyXG4gICAgaWYgKHRoaXMuaXNNb3ZpbmcpIHtcclxuICAgICAgY29uc3QgbXVsdGlwbGllciA9IDAuMDE7XHJcbiAgICAgIHRoaXMuZGlzcGF0Y2hBY3Rpb24oe1xyXG4gICAgICAgIHR5cGU6IFwib3JiaXRSb3RhdGVcIixcclxuICAgICAgICBkZWx0YUxvbmdpdHVkZTogLShlLm9mZnNldFggLSB0aGlzLnBvaW50ZXJQb3NpdGlvbi54KSAqIG11bHRpcGxpZXIsXHJcbiAgICAgICAgZGVsdGFMYXRpdHVkZTogKGUub2Zmc2V0WSAtIHRoaXMucG9pbnRlclBvc2l0aW9uLnkpICogbXVsdGlwbGllcixcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5wb2ludGVyUG9zaXRpb24gPSB7IHg6IGUub2Zmc2V0WCwgeTogZS5vZmZzZXRZIH07XHJcbiAgfTtcclxuXHJcbiAgcHJpdmF0ZSBvbk1vdXNlVXAgPSAoKSA9PiB7XHJcbiAgICB0aGlzLmlzTW92aW5nID0gZmFsc2U7XHJcbiAgfTtcclxuXHJcbiAgcHJpdmF0ZSBvbk1vdXNlTGVhdmUgPSAoKSA9PiB7XHJcbiAgICB0aGlzLmlzTW92aW5nID0gZmFsc2U7XHJcbiAgfTtcclxuXHJcbiAgcHJpdmF0ZSBvbldoZWVsID0gKGU6IFdoZWVsRXZlbnQpID0+IHtcclxuICAgIGNvbnN0IGFjdGlvbiA9IGUuZGVsdGFZIDwgMCA/IFwiem9vbUluQXRcIiA6IFwiem9vbU91dEF0XCI7XHJcblxyXG4gICAgdGhpcy5kaXNwYXRjaEFjdGlvbih7XHJcbiAgICAgIHR5cGU6IGFjdGlvbixcclxuICAgIH0pO1xyXG4gIH07XHJcbn1cclxuIiwiaW1wb3J0IHsgTWF0cml4NEFycmF5IH0gZnJvbSBcIi4vLi4vLi4vdHlwZXNcIjtcclxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQge1xyXG4gIENhbWVyYVBvc2l0aW9uLFxyXG4gIENhbWVyYVBvc2l0aW9uTWFuaXB1bGF0b3IsXHJcbiAgY2FtZXJhUG9zaXRpb25Ub1ZlY3RvcjMsXHJcbn0gZnJvbSBcIi4uLy4uL3V0aWxzL2NhbWVyYU1hbmlwdWxhdG9yXCI7XHJcbmltcG9ydCB7IG1hdDQgfSBmcm9tIFwiLi4vLi4vdXRpbHMvbWF0aFwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IHVzZVBlcnNwZWN0aXZlQ2FtZXJhID0gKFxyXG4gIGVsZW1lbnQ6IEhUTUxFbGVtZW50LFxyXG4gIHNpemU6IHsgd2lkdGg6IG51bWJlcjsgaGVpZ2h0OiBudW1iZXIgfSxcclxuICBvbkNoYW5nZTogKG5ld1Bvc3RpdGlvbjogTWF0cml4NEFycmF5KSA9PiB2b2lkXHJcbikgPT4ge1xyXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBpZiAoIWVsZW1lbnQpIHJldHVybjtcclxuXHJcbiAgICBsZXQgY2FtZXJhUG9zaXRpb246IENhbWVyYVBvc2l0aW9uID0geyBsb25naXR1ZGU6IDEsIGxhdGl0dWRlOiAxLCByYWRpdXM6IDIgfTtcclxuICAgIG5ldyBDYW1lcmFQb3NpdGlvbk1hbmlwdWxhdG9yKFxyXG4gICAgICBlbGVtZW50LFxyXG4gICAgICAoKSA9PiBjYW1lcmFQb3NpdGlvbixcclxuICAgICAgbmV3UG9zaXRpb24gPT4ge1xyXG4gICAgICAgIGNhbWVyYVBvc2l0aW9uID0gbmV3UG9zaXRpb247XHJcbiAgICAgICAgY29uc3QgZmllbGRPZlZpZXcgPSAoNDUgKiBNYXRoLlBJKSAvIDE4MDsgLy8gaW4gcmFkaWFuc1xyXG4gICAgICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gc2l6ZTtcclxuICAgICAgICBjb25zdCBhc3BlY3QgPSB3aWR0aCAvIGhlaWdodDtcclxuICAgICAgICBjb25zdCB6TmVhciA9IDAuMTtcclxuICAgICAgICBjb25zdCB6RmFyID0gMTAwLjA7XHJcbiAgICAgICAgY29uc3QgcHJvamVjdGlvbk1hdHJpeCA9IG1hdDQuY3JlYXRlKCk7XHJcbiAgICAgICAgbWF0NC5wZXJzcGVjdGl2ZShwcm9qZWN0aW9uTWF0cml4LCBmaWVsZE9mVmlldywgYXNwZWN0LCB6TmVhciwgekZhcik7XHJcbiAgICAgICAgY29uc3QgbW9kZWxWaWV3TWF0cml4ID0gbWF0NC5jcmVhdGUoKTtcclxuICAgICAgICBjb25zdCB2ZWMgPSBjYW1lcmFQb3NpdGlvblRvVmVjdG9yMyhjYW1lcmFQb3NpdGlvbik7XHJcbiAgICAgICAgbWF0NC5sb29rQXQobW9kZWxWaWV3TWF0cml4LCBbdmVjLngsIHZlYy55LCB2ZWMuel0sIFswLCAwLCAwXSwgWzAsIDEsIDBdKTtcclxuICAgICAgICBjb25zdCByZXMgPSBtYXQ0LmNyZWF0ZSgpO1xyXG4gICAgICAgIG1hdDQubXVsdGlwbHkocmVzLCBwcm9qZWN0aW9uTWF0cml4LCBtb2RlbFZpZXdNYXRyaXgpO1xyXG4gICAgICAgIG9uQ2hhbmdlKEFycmF5LmZyb20ocmVzKSBhcyBNYXRyaXg0QXJyYXkpO1xyXG4gICAgICB9XHJcbiAgICApO1xyXG4gIH0sIFtlbGVtZW50XSk7XHJcbn07XHJcbiIsImV4cG9ydCBjb25zdCBzaGFkZXJFeHRlbnNpb25zID0gW1wiZ2xzbFwiXTtcclxuZXhwb3J0IGNvbnN0IGltYWdlRXh0ZW5zaW9ucyA9IFtcImpwZ1wiLCBcImJtcFwiXTtcclxuZXhwb3J0IGNvbnN0IGV4dGVuc2lvblRleHR1cmVzID0gW1widGV4dHVyZTEuanBnXCIsIFwidGV4dHVyZTIuanBnXCJdO1xyXG5leHBvcnQgY29uc3QgY3VzdG9tT3B0aW9uSWQgPSBcImN1c3RvbVwiO1xyXG5leHBvcnQgY29uc3QgZGVmYXVsdFRleHR1cmVVcmwgPVxyXG4gIFwiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL21hdGV1c3ptaWdhcy93ZWJnbC1zaGFkZXItdmlld2VyL21haW4vZG9jcy9pbWFnZXMvc2NyZWVuc2hvdDEuanBnXCI7XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHtcclxuICB1c2VGb2N1c09uU3RhdGVDaGFuZ2UsXHJcbiAgdXNlRHJvcGRvd25DbG9zZVdoZW5DbGlja2VkT3V0c2lkZSxcclxuICB1c2VEcm9wZG93bkxpc3RLZXlib2FyZE5hdmlnYXRvcixcclxuICB1c2VEcm9wZG93blN0YXRlLFxyXG4gIFZpcnR1YWxpemVkTGlzdCxcclxuICBEcm9wZG93bkRpc3BhdGNoLFxyXG4gIERyb3Bkb3duQWN0aW9ucyxcclxufSBmcm9tIFwiQG1hdGV1c3ptaWdhcy9yZWFjdC1kcm9wZG93blwiO1xyXG5cclxuZXhwb3J0IHR5cGUgRHJvcGRvd25PcHRpb24gPSB7XHJcbiAgaWQ6IHN0cmluZztcclxuICBkaXNwbGF5OiBzdHJpbmc7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgRHJvcGRvd24gPSBSZWFjdC5tZW1vKFxyXG4gIChwcm9wczoge1xyXG4gICAgc2VsZWN0ZWRJdGVtSWQ6IHN0cmluZyB8IG51bGw7XHJcbiAgICBvbkNoYW5nZTogKG5ld1NlbGVjdGVkSXRlbUlkOiBzdHJpbmcpID0+IHZvaWQ7XHJcbiAgICBvcHRpb25zOiBEcm9wZG93bk9wdGlvbltdO1xyXG4gIH0pID0+IHtcclxuICAgIGNvbnN0IHsgc2VsZWN0ZWRJdGVtSWQsIG9uQ2hhbmdlLCBvcHRpb25zIH0gPSBwcm9wcztcclxuXHJcbiAgICBjb25zdCBbc3RhdGUsIGRpc3BhdGNoXSA9IHVzZURyb3Bkb3duU3RhdGUoXHJcbiAgICAgIG9wdGlvbnMubGVuZ3RoLFxyXG4gICAgICB7IHNlbGVjdGVkSW5kZXhlczogW10gfSxcclxuICAgICAge30sXHJcbiAgICAgIGNoYW5nZXMgPT4ge1xyXG4gICAgICAgIGlmIChjaGFuZ2VzLnNlbGVjdGVkSW5kZXhlcyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICBvbkNoYW5nZShcclxuICAgICAgICAgICAgY2hhbmdlcy5zZWxlY3RlZEluZGV4ZXMubGVuZ3RoID4gMCA/IG9wdGlvbnNbY2hhbmdlcy5zZWxlY3RlZEluZGV4ZXNbMF1dLmlkIDogbnVsbFxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICk7XHJcblxyXG4gICAgY29uc3QgZm91bmRJbmRleCA9IG9wdGlvbnMuZmluZEluZGV4KGkgPT4gaS5pZCA9PT0gc2VsZWN0ZWRJdGVtSWQpO1xyXG4gICAgY29uc3Qgc2VsZWN0ZWRJbmRleCA9IGZvdW5kSW5kZXggPj0gMCA/IGZvdW5kSW5kZXggOiBudWxsO1xyXG4gICAgY29uc3QgY29udGFpbmVyUmVmID0gUmVhY3QudXNlUmVmPEhUTUxEaXZFbGVtZW50PihudWxsKTtcclxuICAgIGNvbnN0IGxpc3RSZWYgPSBSZWFjdC51c2VSZWY8SFRNTERpdkVsZW1lbnQ+KG51bGwpO1xyXG5cclxuICAgIHVzZURyb3Bkb3duQ2xvc2VXaGVuQ2xpY2tlZE91dHNpZGUoY29udGFpbmVyUmVmLCBkaXNwYXRjaCk7XHJcbiAgICB1c2VGb2N1c09uU3RhdGVDaGFuZ2UobGlzdFJlZiwgc3RhdGUuaXNPcGVuLCB0cnVlKTtcclxuXHJcbiAgICBjb25zdCBsaXN0S2V5Ym9hcmRIYW5kbGVyID0gdXNlRHJvcGRvd25MaXN0S2V5Ym9hcmROYXZpZ2F0b3IoZGlzcGF0Y2gpO1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXYgcmVmPXtjb250YWluZXJSZWZ9IGNsYXNzTmFtZT1cImRyb3Bkb3duLWNvbnRhaW5lclwiPlxyXG4gICAgICAgIDxEcm9wZG93bk1haW5cclxuICAgICAgICAgIHsuLi5zdGF0ZX1cclxuICAgICAgICAgIGRpc3BhdGNoPXtkaXNwYXRjaH1cclxuICAgICAgICAgIHNob3dDbGVhckJ1dHRvbj17ZmFsc2V9XHJcbiAgICAgICAgICBpdGVtUmVuZGVyZXI9eygpID0+IChcclxuICAgICAgICAgICAgPGRpdj57c2VsZWN0ZWRJbmRleCAhPT0gbnVsbCA/IG9wdGlvbnNbc2VsZWN0ZWRJbmRleF0uZGlzcGxheSA6IFwiXCJ9PC9kaXY+XHJcbiAgICAgICAgICApfVxyXG4gICAgICAgID48L0Ryb3Bkb3duTWFpbj5cclxuICAgICAgICB7c3RhdGUuaXNPcGVuICYmIChcclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZHJvcGRvd24tbGlzdFwiIG9uS2V5RG93bj17bGlzdEtleWJvYXJkSGFuZGxlcn0gcmVmPXtsaXN0UmVmfSB0YWJJbmRleD17MH0+XHJcbiAgICAgICAgICAgIDxWaXJ0dWFsaXplZExpc3RcclxuICAgICAgICAgICAgICBpdGVtQ291bnQ9e29wdGlvbnMubGVuZ3RofVxyXG4gICAgICAgICAgICAgIGl0ZW1IZWlnaHQ9ezI1fVxyXG4gICAgICAgICAgICAgIGhpZ2hsaWdodGVkSW5kZXg9e3N0YXRlLmhpZ2hsaWdodGVkSW5kZXh9XHJcbiAgICAgICAgICAgICAgbWF4SGVpZ2h0PXsyMDB9XHJcbiAgICAgICAgICAgICAgaXRlbVJlbmRlcmVyPXtpbmRleCA9PiAoXHJcbiAgICAgICAgICAgICAgICA8RHJvcGRvd25JdGVtXHJcbiAgICAgICAgICAgICAgICAgIHRleHQ9e29wdGlvbnNbaW5kZXhdLmRpc3BsYXl9XHJcbiAgICAgICAgICAgICAgICAgIGluZGV4PXtpbmRleH1cclxuICAgICAgICAgICAgICAgICAgaXNTZWxlY3RlZD17c2VsZWN0ZWRJbmRleCA9PT0gaW5kZXh9XHJcbiAgICAgICAgICAgICAgICAgIGlzSGlnaGxpZ2h0ZWQ9e3N0YXRlLmhpZ2hsaWdodGVkSW5kZXggPT09IGluZGV4fVxyXG4gICAgICAgICAgICAgICAgICBkaXNwYXRjaD17ZGlzcGF0Y2h9XHJcbiAgICAgICAgICAgICAgICA+PC9Ecm9wZG93bkl0ZW0+XHJcbiAgICAgICAgICAgICAgKX1cclxuICAgICAgICAgICAgPjwvVmlydHVhbGl6ZWRMaXN0PlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKX1cclxuICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG4gIH1cclxuKTtcclxuXHJcbmNvbnN0IERyb3Bkb3duTWFpbiA9IChwcm9wczoge1xyXG4gIGlzT3BlbjogYm9vbGVhbjtcclxuICBpdGVtUmVuZGVyZXI6ICgpID0+IEpTWC5FbGVtZW50O1xyXG4gIGRpc3BhdGNoOiBEcm9wZG93bkRpc3BhdGNoPERyb3Bkb3duQWN0aW9ucz47XHJcbiAgc2hvd0NsZWFyQnV0dG9uPzogYm9vbGVhbjtcclxufSkgPT4ge1xyXG4gIGNvbnN0IHsgaXNPcGVuLCBpdGVtUmVuZGVyZXIsIHNob3dDbGVhckJ1dHRvbiA9IHRydWUsIGRpc3BhdGNoIH0gPSBwcm9wcztcclxuICBjb25zdCBkcm9wZG93blNlbGVjdFJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcclxuICBjb25zdCBoYW5kbGVTZWxlY3QgPSBSZWFjdC51c2VDYWxsYmFjaygoKSA9PiBkaXNwYXRjaChbaXNPcGVuID8gXCJDbG9zZUxpc3RcIiA6IFwiT3Blbkxpc3RcIl0pLCBbXHJcbiAgICBpc09wZW4sXHJcbiAgICBkaXNwYXRjaCxcclxuICBdKTtcclxuICBjb25zdCBoYW5kbGVDbGVhciA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IGRpc3BhdGNoKFtcIkNsZWFyU2VsZWN0aW9uXCJdKSwgW2Rpc3BhdGNoXSk7XHJcblxyXG4gIHVzZUZvY3VzT25TdGF0ZUNoYW5nZShkcm9wZG93blNlbGVjdFJlZiwgaXNPcGVuLCBmYWxzZSk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImRyb3Bkb3duLW1haW5cIj5cclxuICAgICAgPGJ1dHRvbiByZWY9e2Ryb3Bkb3duU2VsZWN0UmVmfSBjbGFzc05hbWU9XCJkcm9wZG93bi1zZWxlY3RcIiBvbkNsaWNrPXtoYW5kbGVTZWxlY3R9PlxyXG4gICAgICAgIHtpdGVtUmVuZGVyZXIoKX1cclxuICAgICAgICA8aSBjbGFzc05hbWU9e2BmYSAke2lzT3BlbiA/IFwiZmEtY2FyZXQtdXBcIiA6IFwiZmEtY2FyZXQtZG93blwifWB9PjwvaT5cclxuICAgICAgPC9idXR0b24+XHJcbiAgICAgIHtzaG93Q2xlYXJCdXR0b24gJiYgKFxyXG4gICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiZHJvcGRvd24tY2xlYXJcIiBvbkNsaWNrPXtoYW5kbGVDbGVhcn0+XHJcbiAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS10aW1lc1wiPjwvaT5cclxuICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgKX1cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn07XHJcblxyXG5jb25zdCBEcm9wZG93bkl0ZW0gPSAocHJvcHM6IHtcclxuICB0ZXh0OiBzdHJpbmcgfCBudWxsO1xyXG4gIGluZGV4OiBudW1iZXI7XHJcbiAgaXNTZWxlY3RlZDogYm9vbGVhbjtcclxuICBpc0hpZ2hsaWdodGVkOiBib29sZWFuO1xyXG4gIGRpc3BhdGNoOiBEcm9wZG93bkRpc3BhdGNoPERyb3Bkb3duQWN0aW9ucz47XHJcbn0pID0+IHtcclxuICBjb25zdCB7IHRleHQsIGluZGV4LCBpc1NlbGVjdGVkLCBpc0hpZ2hsaWdodGVkLCBkaXNwYXRjaCB9ID0gcHJvcHM7XHJcbiAgY29uc3Qgc3R5bGUgPSBgZHJvcGRvd24tbGlzdC1pdGVtICR7aXNTZWxlY3RlZCA/IFwic2VsZWN0ZWRcIiA6IFwiXCJ9ICAke1xyXG4gICAgaXNIaWdobGlnaHRlZCA/IFwiaGlnaGxpZ2h0ZWRcIiA6IFwiXCJcclxuICB9YDtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXZcclxuICAgICAga2V5PXtpbmRleH1cclxuICAgICAgb25DbGljaz17KCkgPT4gZGlzcGF0Y2goW3sgdHlwZTogXCJTZWxlY3RJbmRleFwiLCBpbmRleCB9LCBcIkNsb3NlTGlzdFwiXSl9XHJcbiAgICAgIGNsYXNzTmFtZT17c3R5bGV9XHJcbiAgICA+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZHJvcGRvd24tbGlzdC1pdGVtLXRleHRcIj57dGV4dH08L2Rpdj5cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn07XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXHJcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn07XHJcbnZhciBfX3NwcmVhZEFycmF5cyA9ICh0aGlzICYmIHRoaXMuX19zcHJlYWRBcnJheXMpIHx8IGZ1bmN0aW9uICgpIHtcclxuICAgIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xyXG4gICAgZm9yICh2YXIgciA9IEFycmF5KHMpLCBrID0gMCwgaSA9IDA7IGkgPCBpbDsgaSsrKVxyXG4gICAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxyXG4gICAgICAgICAgICByW2tdID0gYVtqXTtcclxuICAgIHJldHVybiByO1xyXG59O1xyXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMudXNlVW5pb25TdGF0ZSA9IHZvaWQgMDtcclxudmFyIHJlYWN0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcclxudmFyIGhlbHBlcnNfMSA9IHJlcXVpcmUoXCIuLi9Db21tb24vaGVscGVyc1wiKTtcclxuZXhwb3J0cy51c2VVbmlvblN0YXRlID0gZnVuY3Rpb24gKGluaXRpYWxJbnRlcm5hbFN0YXRlLCBleHRlcm5hbFN0YXRlLCByZWR1Y2VyLCBvbkNoYW5nZSkge1xyXG4gICAgdmFyIF9hID0gcmVhY3RfMS5kZWZhdWx0LnVzZVN0YXRlKGhlbHBlcnNfMS5vbWl0S2V5cyhpbml0aWFsSW50ZXJuYWxTdGF0ZSwgT2JqZWN0LmtleXMoZXh0ZXJuYWxTdGF0ZSkpKSwgaW50ZXJuYWxTdGF0ZSA9IF9hWzBdLCBzZXRJbnRlcm5hbFN0YXRlID0gX2FbMV07XHJcbiAgICAvL2Nhbm5vdCB1c2UgdXBkYXRlciBmdW5jdGlvbiBpbiBzZXRTdGF0ZSBzbyB3ZSBoYXZlIHRvIHByZXNlcnZlIGN1cnJlbnQgc3RhdGVcclxuICAgIHZhciBpbnRlcm5hbFN0YXRlUmVmID0gcmVhY3RfMS5kZWZhdWx0LnVzZVJlZihpbnRlcm5hbFN0YXRlKTtcclxuICAgIHZhciBkaXNwYXRjaCA9IHJlYWN0XzEuZGVmYXVsdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoYWN0aW9ucykge1xyXG4gICAgICAgIHZhciBvbGRTdGF0ZSA9IGhlbHBlcnNfMS5vdmVycmlkZURlZmluZWRQcm9wc09ubHkoaW50ZXJuYWxTdGF0ZVJlZi5jdXJyZW50LCBleHRlcm5hbFN0YXRlKTtcclxuICAgICAgICB2YXIgbmV3U3RhdGUgPSBhY3Rpb25zLnJlZHVjZShmdW5jdGlvbiAoc3RhdGUsIGFjdGlvbikgeyByZXR1cm4gcmVkdWNlcihzdGF0ZSwgYWN0aW9uKTsgfSwgX19hc3NpZ24oe30sIG9sZFN0YXRlKSk7XHJcbiAgICAgICAgdmFyIGNoYW5nZXMgPSBoZWxwZXJzXzEub3ZlcnJpZGRlblByb3BzKG9sZFN0YXRlLCBuZXdTdGF0ZSk7XHJcbiAgICAgICAgdmFyIG5ld0ludGVybmFsU3RhdGUgPSBoZWxwZXJzXzEub21pdEtleXMobmV3U3RhdGUsIE9iamVjdC5rZXlzKGV4dGVybmFsU3RhdGUpKTtcclxuICAgICAgICBpZiAoIWhlbHBlcnNfMS5hcmVTaGFsbG93RXF1YWwoaW50ZXJuYWxTdGF0ZVJlZi5jdXJyZW50LCBuZXdJbnRlcm5hbFN0YXRlKSkge1xyXG4gICAgICAgICAgICBpbnRlcm5hbFN0YXRlUmVmLmN1cnJlbnQgPSBuZXdJbnRlcm5hbFN0YXRlO1xyXG4gICAgICAgICAgICBzZXRJbnRlcm5hbFN0YXRlKGludGVybmFsU3RhdGVSZWYuY3VycmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG9uQ2hhbmdlID09PSBudWxsIHx8IG9uQ2hhbmdlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvbkNoYW5nZShjaGFuZ2VzKTtcclxuICAgIH0sIF9fc3ByZWFkQXJyYXlzKE9iamVjdC52YWx1ZXMoZXh0ZXJuYWxTdGF0ZSksIFtyZWR1Y2VyLCBvbkNoYW5nZV0pKTtcclxuICAgIHJldHVybiBbaW50ZXJuYWxTdGF0ZSwgZGlzcGF0Y2hdO1xyXG59O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xyXG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcclxuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxyXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfTtcclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMucmVkdWNlciA9IHZvaWQgMDtcclxudmFyIGhlbHBlcnNfMSA9IHJlcXVpcmUoXCIuL2hlbHBlcnNcIik7XHJcbnZhciB0eXBlTmFycm93aW5nXzEgPSByZXF1aXJlKFwiLi90eXBlTmFycm93aW5nXCIpO1xyXG52YXIgbW92ZUluZGV4ID0gZnVuY3Rpb24gKGN1cnJlbnQsIG9mZnNldCwgbWF4KSB7XHJcbiAgICByZXR1cm4gbWF4ID4gMCA/IGhlbHBlcnNfMS5jbGFtcChjdXJyZW50ICsgb2Zmc2V0LCAwLCBtYXggLSAxKSA6IG51bGw7XHJcbn07XHJcbmV4cG9ydHMucmVkdWNlciA9IGZ1bmN0aW9uIChzdGF0ZSwgaXRlbUNvdW50LCBhY3Rpb24pIHtcclxuICAgIGlmICh0eXBlb2YgYWN0aW9uID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgc3dpdGNoIChhY3Rpb24pIHtcclxuICAgICAgICAgICAgY2FzZSBcIkNsb3NlTGlzdFwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCBzdGF0ZSksIHsgaXNPcGVuOiBmYWxzZSB9KTtcclxuICAgICAgICAgICAgY2FzZSBcIk9wZW5MaXN0XCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIHN0YXRlKSwgeyBpc09wZW46IHRydWUgfSk7XHJcbiAgICAgICAgICAgIGNhc2UgXCJIaWdobGlnaHRGaXJzdEluZGV4XCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIHN0YXRlKSwgeyBoaWdobGlnaHRlZEluZGV4OiBpdGVtQ291bnQgPiAwID8gMCA6IG51bGwgfSk7XHJcbiAgICAgICAgICAgIGNhc2UgXCJIaWdobGlnaHRQcmV2aW91c0luZGV4XCI6IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgc3RhdGUpLCB7IGhpZ2hsaWdodGVkSW5kZXg6IHN0YXRlLmhpZ2hsaWdodGVkSW5kZXggIT0gbnVsbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IG1vdmVJbmRleChzdGF0ZS5oaWdobGlnaHRlZEluZGV4LCAtMSwgaXRlbUNvdW50KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IDAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBcIkhpZ2hsaWdodE5leHRJbmRleFwiOiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIHN0YXRlKSwgeyBoaWdobGlnaHRlZEluZGV4OiBzdGF0ZS5oaWdobGlnaHRlZEluZGV4ICE9IG51bGxcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyBtb3ZlSW5kZXgoc3RhdGUuaGlnaGxpZ2h0ZWRJbmRleCwgMSwgaXRlbUNvdW50KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IDAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBcIkhpZ2hsaWdodExhc3RJbmRleFwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCBzdGF0ZSksIHsgaGlnaGxpZ2h0ZWRJbmRleDogaXRlbUNvdW50ID4gMCA/IGl0ZW1Db3VudCAtIDEgOiBudWxsIH0pO1xyXG4gICAgICAgICAgICBjYXNlIFwiU2VsZWN0SGlnaGxpZ2h0ZWRJbmRleFwiOiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIHN0YXRlKSwgeyBzZWxlY3RlZEluZGV4ZXM6IHN0YXRlLmhpZ2hsaWdodGVkSW5kZXggIT0gbnVsbCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5oaWdobGlnaHRlZEluZGV4ICE9IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IFtzdGF0ZS5oaWdobGlnaHRlZEluZGV4XVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IFtdIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgXCJDbGVhclNlbGVjdGlvblwiOiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIHN0YXRlKSwgeyBzZWxlY3RlZEluZGV4ZXM6IFtdLCBoaWdobGlnaHRlZEluZGV4OiBpdGVtQ291bnQgPiAwID8gMCA6IG51bGwgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0eXBlTmFycm93aW5nXzEuYXNzZXJ0TmV2ZXIoYWN0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJTZWxlY3RJbmRleFwiOiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIHN0YXRlKSwgeyBzZWxlY3RlZEluZGV4ZXM6IFthY3Rpb24uaW5kZXhdLCBoaWdobGlnaHRlZEluZGV4OiBhY3Rpb24uaW5kZXggfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBcIlRvZ2dsZVNlbGVjdGVkSW5kZXhcIjoge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCBzdGF0ZSksIHsgc2VsZWN0ZWRJbmRleGVzOiBzdGF0ZS5zZWxlY3RlZEluZGV4ZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoaSkgeyByZXR1cm4gaSAhPT0gYWN0aW9uLmluZGV4OyB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuY29uY2F0KHN0YXRlLnNlbGVjdGVkSW5kZXhlcy5pbmNsdWRlcyhhY3Rpb24uaW5kZXgpID8gW10gOiBbYWN0aW9uLmluZGV4XSksIGhpZ2hsaWdodGVkSW5kZXg6IGFjdGlvbi5pbmRleCB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIFwiSGlnaGxpZ2h0SW5kZXhcIjoge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCBzdGF0ZSksIHsgaGlnaGxpZ2h0ZWRJbmRleDogYWN0aW9uLmluZGV4ID09PSBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gYWN0aW9uLmluZGV4XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogaGVscGVyc18xLmNsYW1wKGFjdGlvbi5pbmRleCwgMCwgaXRlbUNvdW50IC0gMSkgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0eXBlTmFycm93aW5nXzEuYXNzZXJ0TmV2ZXIoYWN0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuaGFzUHJvcGVydHkgPSBleHBvcnRzLmFzc2VydE5ldmVyID0gdm9pZCAwO1xyXG5leHBvcnRzLmFzc2VydE5ldmVyID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIG9iamVjdDogXCIgKyB2YWx1ZSk7XHJcbn07XHJcbmV4cG9ydHMuaGFzUHJvcGVydHkgPSBmdW5jdGlvbiAob2JqLCBwcm9wKSB7XHJcbiAgICByZXR1cm4gb2JqLmhhc093blByb3BlcnR5KHByb3ApO1xyXG59O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnVzZUZvY3VzT3V0SGFuZGxlciA9IHZvaWQgMDtcclxudmFyIHJlYWN0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcclxuZXhwb3J0cy51c2VGb2N1c091dEhhbmRsZXIgPSBmdW5jdGlvbiAoZWxlbWVudFJlZiwgaGFuZGxlcikge1xyXG4gICAgcmVhY3RfMS5kZWZhdWx0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIGZ1bmN0aW9uIGZvY3VzT3V0SGFuZGxlcihlKSB7XHJcbiAgICAgICAgICAgIHZhciBfYTtcclxuICAgICAgICAgICAgaWYgKCEoKF9hID0gZWxlbWVudFJlZi5jdXJyZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY29udGFpbnMoZS5yZWxhdGVkVGFyZ2V0KSkpIHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZXIoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAoX2EgPSBlbGVtZW50UmVmLmN1cnJlbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNvdXRcIiwgZm9jdXNPdXRIYW5kbGVyKTtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgICAgIChfYSA9IGVsZW1lbnRSZWYuY3VycmVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJmb2N1c291dFwiLCBmb2N1c091dEhhbmRsZXIpO1xyXG4gICAgICAgIH07XHJcbiAgICB9LCBbaGFuZGxlcl0pO1xyXG59O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnVzZVByZXZpb3VzVmFsdWUgPSB2b2lkIDA7XHJcbnZhciByZWFjdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XHJcbmV4cG9ydHMudXNlUHJldmlvdXNWYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgdmFyIHZhbHVlUmVmID0gcmVhY3RfMS5kZWZhdWx0LnVzZVJlZigpO1xyXG4gICAgcmVhY3RfMS5kZWZhdWx0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFsdWVSZWYuY3VycmVudCA9IHZhbHVlO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gdmFsdWVSZWYuY3VycmVudDtcclxufTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5jcmVhdGVMaXN0S2V5Ym9hcmROYXZpZ2F0b3IgPSB2b2lkIDA7XHJcbmV4cG9ydHMuY3JlYXRlTGlzdEtleWJvYXJkTmF2aWdhdG9yID0gZnVuY3Rpb24gKGRpc3BhdGNoKSB7IHJldHVybiBmdW5jdGlvbiAoZSkge1xyXG4gICAgc3dpdGNoIChlLmtleSkge1xyXG4gICAgICAgIGNhc2UgXCIgXCI6XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJFbnRlclwiOlxyXG4gICAgICAgICAgICBkaXNwYXRjaChbXCJTZWxlY3RIaWdobGlnaHRlZEluZGV4XCIsIFwiQ2xvc2VMaXN0XCJdKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBcIkVzY1wiOlxyXG4gICAgICAgIGNhc2UgXCJFc2NhcGVcIjpcclxuICAgICAgICBjYXNlIFwiVGFiXCI6XHJcbiAgICAgICAgICAgIGRpc3BhdGNoKFtcIkNsb3NlTGlzdFwiXSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJEb3duXCI6XHJcbiAgICAgICAgY2FzZSBcIkFycm93RG93blwiOlxyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIGRpc3BhdGNoKFtcIkhpZ2hsaWdodE5leHRJbmRleFwiXSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJVcFwiOlxyXG4gICAgICAgIGNhc2UgXCJBcnJvd1VwXCI6XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgZGlzcGF0Y2goW1wiSGlnaGxpZ2h0UHJldmlvdXNJbmRleFwiXSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJIb21lXCI6IHtcclxuICAgICAgICAgICAgZGlzcGF0Y2goW1wiSGlnaGxpZ2h0Rmlyc3RJbmRleFwiXSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXNlIFwiRW5kXCI6IHtcclxuICAgICAgICAgICAgZGlzcGF0Y2goW1wiSGlnaGxpZ2h0TGFzdEluZGV4XCJdKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgIH1cclxufTsgfTtcclxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuXG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59IiwiaW1wb3J0IHNldFByb3RvdHlwZU9mIGZyb20gXCIuL3NldFByb3RvdHlwZU9mLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHtcbiAgaWYgKHNlbGYgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBzZWxmO1xufSIsImZ1bmN0aW9uIGFyZUlucHV0c0VxdWFsKG5ld0lucHV0cywgbGFzdElucHV0cykge1xuICAgIGlmIChuZXdJbnB1dHMubGVuZ3RoICE9PSBsYXN0SW5wdXRzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmV3SW5wdXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChuZXdJbnB1dHNbaV0gIT09IGxhc3RJbnB1dHNbaV0pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gbWVtb2l6ZU9uZShyZXN1bHRGbiwgaXNFcXVhbCkge1xuICAgIGlmIChpc0VxdWFsID09PSB2b2lkIDApIHsgaXNFcXVhbCA9IGFyZUlucHV0c0VxdWFsOyB9XG4gICAgdmFyIGxhc3RUaGlzO1xuICAgIHZhciBsYXN0QXJncyA9IFtdO1xuICAgIHZhciBsYXN0UmVzdWx0O1xuICAgIHZhciBjYWxsZWRPbmNlID0gZmFsc2U7XG4gICAgZnVuY3Rpb24gbWVtb2l6ZWQoKSB7XG4gICAgICAgIHZhciBuZXdBcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBuZXdBcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNhbGxlZE9uY2UgJiYgbGFzdFRoaXMgPT09IHRoaXMgJiYgaXNFcXVhbChuZXdBcmdzLCBsYXN0QXJncykpIHtcbiAgICAgICAgICAgIHJldHVybiBsYXN0UmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGxhc3RSZXN1bHQgPSByZXN1bHRGbi5hcHBseSh0aGlzLCBuZXdBcmdzKTtcbiAgICAgICAgY2FsbGVkT25jZSA9IHRydWU7XG4gICAgICAgIGxhc3RUaGlzID0gdGhpcztcbiAgICAgICAgbGFzdEFyZ3MgPSBuZXdBcmdzO1xuICAgICAgICByZXR1cm4gbGFzdFJlc3VsdDtcbiAgICB9XG4gICAgcmV0dXJuIG1lbW9pemVkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtZW1vaXplT25lO1xuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkJztcbmltcG9ydCBtZW1vaXplT25lIGZyb20gJ21lbW9pemUtb25lJztcbmltcG9ydCB7IGNyZWF0ZUVsZW1lbnQsIFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSc7XG5cbi8vIEFuaW1hdGlvbiBmcmFtZSBiYXNlZCBpbXBsZW1lbnRhdGlvbiBvZiBzZXRUaW1lb3V0LlxuLy8gSW5zcGlyZWQgYnkgSm9lIExhbWJlcnQsIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL2pvZWxhbWJlcnQvMTAwMjExNiNmaWxlLXJlcXVlc3R0aW1lb3V0LWpzXG52YXIgaGFzTmF0aXZlUGVyZm9ybWFuY2VOb3cgPSB0eXBlb2YgcGVyZm9ybWFuY2UgPT09ICdvYmplY3QnICYmIHR5cGVvZiBwZXJmb3JtYW5jZS5ub3cgPT09ICdmdW5jdGlvbic7XG52YXIgbm93ID0gaGFzTmF0aXZlUGVyZm9ybWFuY2VOb3cgPyBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBwZXJmb3JtYW5jZS5ub3coKTtcbn0gOiBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBEYXRlLm5vdygpO1xufTtcbmZ1bmN0aW9uIGNhbmNlbFRpbWVvdXQodGltZW91dElEKSB7XG4gIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRpbWVvdXRJRC5pZCk7XG59XG5mdW5jdGlvbiByZXF1ZXN0VGltZW91dChjYWxsYmFjaywgZGVsYXkpIHtcbiAgdmFyIHN0YXJ0ID0gbm93KCk7XG5cbiAgZnVuY3Rpb24gdGljaygpIHtcbiAgICBpZiAobm93KCkgLSBzdGFydCA+PSBkZWxheSkge1xuICAgICAgY2FsbGJhY2suY2FsbChudWxsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGltZW91dElELmlkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRpY2spO1xuICAgIH1cbiAgfVxuXG4gIHZhciB0aW1lb3V0SUQgPSB7XG4gICAgaWQ6IHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aWNrKVxuICB9O1xuICByZXR1cm4gdGltZW91dElEO1xufVxuXG52YXIgc2l6ZSA9IC0xOyAvLyBUaGlzIHV0aWxpdHkgY29waWVkIGZyb20gXCJkb20taGVscGVyc1wiIHBhY2thZ2UuXG5cbmZ1bmN0aW9uIGdldFNjcm9sbGJhclNpemUocmVjYWxjdWxhdGUpIHtcbiAgaWYgKHJlY2FsY3VsYXRlID09PSB2b2lkIDApIHtcbiAgICByZWNhbGN1bGF0ZSA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKHNpemUgPT09IC0xIHx8IHJlY2FsY3VsYXRlKSB7XG4gICAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBzdHlsZSA9IGRpdi5zdHlsZTtcbiAgICBzdHlsZS53aWR0aCA9ICc1MHB4JztcbiAgICBzdHlsZS5oZWlnaHQgPSAnNTBweCc7XG4gICAgc3R5bGUub3ZlcmZsb3cgPSAnc2Nyb2xsJztcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGRpdik7XG4gICAgc2l6ZSA9IGRpdi5vZmZzZXRXaWR0aCAtIGRpdi5jbGllbnRXaWR0aDtcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGRpdik7XG4gIH1cblxuICByZXR1cm4gc2l6ZTtcbn1cbnZhciBjYWNoZWRSVExSZXN1bHQgPSBudWxsOyAvLyBUUklDS1kgQWNjb3JkaW5nIHRvIHRoZSBzcGVjLCBzY3JvbGxMZWZ0IHNob3VsZCBiZSBuZWdhdGl2ZSBmb3IgUlRMIGFsaWduZWQgZWxlbWVudHMuXG4vLyBDaHJvbWUgZG9lcyBub3Qgc2VlbSB0byBhZGhlcmU7IGl0cyBzY3JvbGxMZWZ0IHZhbHVlcyBhcmUgcG9zaXRpdmUgKG1lYXN1cmVkIHJlbGF0aXZlIHRvIHRoZSBsZWZ0KS5cbi8vIFNhZmFyaSdzIGVsYXN0aWMgYm91bmNlIG1ha2VzIGRldGVjdGluZyB0aGlzIGV2ZW4gbW9yZSBjb21wbGljYXRlZCB3cnQgcG90ZW50aWFsIGZhbHNlIHBvc2l0aXZlcy5cbi8vIFRoZSBzYWZlc3Qgd2F5IHRvIGNoZWNrIHRoaXMgaXMgdG8gaW50ZW50aW9uYWxseSBzZXQgYSBuZWdhdGl2ZSBvZmZzZXQsXG4vLyBhbmQgdGhlbiB2ZXJpZnkgdGhhdCB0aGUgc3Vic2VxdWVudCBcInNjcm9sbFwiIGV2ZW50IG1hdGNoZXMgdGhlIG5lZ2F0aXZlIG9mZnNldC5cbi8vIElmIGl0IGRvZXMgbm90IG1hdGNoLCB0aGVuIHdlIGNhbiBhc3N1bWUgYSBub24tc3RhbmRhcmQgUlRMIHNjcm9sbCBpbXBsZW1lbnRhdGlvbi5cblxuZnVuY3Rpb24gZ2V0UlRMT2Zmc2V0VHlwZShyZWNhbGN1bGF0ZSkge1xuICBpZiAocmVjYWxjdWxhdGUgPT09IHZvaWQgMCkge1xuICAgIHJlY2FsY3VsYXRlID0gZmFsc2U7XG4gIH1cblxuICBpZiAoY2FjaGVkUlRMUmVzdWx0ID09PSBudWxsIHx8IHJlY2FsY3VsYXRlKSB7XG4gICAgdmFyIG91dGVyRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIG91dGVyU3R5bGUgPSBvdXRlckRpdi5zdHlsZTtcbiAgICBvdXRlclN0eWxlLndpZHRoID0gJzUwcHgnO1xuICAgIG91dGVyU3R5bGUuaGVpZ2h0ID0gJzUwcHgnO1xuICAgIG91dGVyU3R5bGUub3ZlcmZsb3cgPSAnc2Nyb2xsJztcbiAgICBvdXRlclN0eWxlLmRpcmVjdGlvbiA9ICdydGwnO1xuICAgIHZhciBpbm5lckRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBpbm5lclN0eWxlID0gaW5uZXJEaXYuc3R5bGU7XG4gICAgaW5uZXJTdHlsZS53aWR0aCA9ICcxMDBweCc7XG4gICAgaW5uZXJTdHlsZS5oZWlnaHQgPSAnMTAwcHgnO1xuICAgIG91dGVyRGl2LmFwcGVuZENoaWxkKGlubmVyRGl2KTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG91dGVyRGl2KTtcblxuICAgIGlmIChvdXRlckRpdi5zY3JvbGxMZWZ0ID4gMCkge1xuICAgICAgY2FjaGVkUlRMUmVzdWx0ID0gJ3Bvc2l0aXZlLWRlc2NlbmRpbmcnO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXRlckRpdi5zY3JvbGxMZWZ0ID0gMTtcblxuICAgICAgaWYgKG91dGVyRGl2LnNjcm9sbExlZnQgPT09IDApIHtcbiAgICAgICAgY2FjaGVkUlRMUmVzdWx0ID0gJ25lZ2F0aXZlJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhY2hlZFJUTFJlc3VsdCA9ICdwb3NpdGl2ZS1hc2NlbmRpbmcnO1xuICAgICAgfVxuICAgIH1cblxuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQob3V0ZXJEaXYpO1xuICAgIHJldHVybiBjYWNoZWRSVExSZXN1bHQ7XG4gIH1cblxuICByZXR1cm4gY2FjaGVkUlRMUmVzdWx0O1xufVxuXG52YXIgSVNfU0NST0xMSU5HX0RFQk9VTkNFX0lOVEVSVkFMID0gMTUwO1xuXG52YXIgZGVmYXVsdEl0ZW1LZXkgPSBmdW5jdGlvbiBkZWZhdWx0SXRlbUtleShfcmVmKSB7XG4gIHZhciBjb2x1bW5JbmRleCA9IF9yZWYuY29sdW1uSW5kZXgsXG4gICAgICBkYXRhID0gX3JlZi5kYXRhLFxuICAgICAgcm93SW5kZXggPSBfcmVmLnJvd0luZGV4O1xuICByZXR1cm4gcm93SW5kZXggKyBcIjpcIiArIGNvbHVtbkluZGV4O1xufTsgLy8gSW4gREVWIG1vZGUsIHRoaXMgU2V0IGhlbHBzIHVzIG9ubHkgbG9nIGEgd2FybmluZyBvbmNlIHBlciBjb21wb25lbnQgaW5zdGFuY2UuXG4vLyBUaGlzIGF2b2lkcyBzcGFtbWluZyB0aGUgY29uc29sZSBldmVyeSB0aW1lIGEgcmVuZGVyIGhhcHBlbnMuXG5cblxudmFyIGRldldhcm5pbmdzT3ZlcnNjYW5Db3VudCA9IG51bGw7XG52YXIgZGV2V2FybmluZ3NPdmVyc2NhblJvd3NDb2x1bW5zQ291bnQgPSBudWxsO1xudmFyIGRldldhcm5pbmdzVGFnTmFtZSA9IG51bGw7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LldlYWtTZXQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgZGV2V2FybmluZ3NPdmVyc2NhbkNvdW50ID1cbiAgICAvKiNfX1BVUkVfXyovXG4gICAgbmV3IFdlYWtTZXQoKTtcbiAgICBkZXZXYXJuaW5nc092ZXJzY2FuUm93c0NvbHVtbnNDb3VudCA9XG4gICAgLyojX19QVVJFX18qL1xuICAgIG5ldyBXZWFrU2V0KCk7XG4gICAgZGV2V2FybmluZ3NUYWdOYW1lID1cbiAgICAvKiNfX1BVUkVfXyovXG4gICAgbmV3IFdlYWtTZXQoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVHcmlkQ29tcG9uZW50KF9yZWYyKSB7XG4gIHZhciBfY2xhc3MsIF90ZW1wO1xuXG4gIHZhciBnZXRDb2x1bW5PZmZzZXQgPSBfcmVmMi5nZXRDb2x1bW5PZmZzZXQsXG4gICAgICBnZXRDb2x1bW5TdGFydEluZGV4Rm9yT2Zmc2V0ID0gX3JlZjIuZ2V0Q29sdW1uU3RhcnRJbmRleEZvck9mZnNldCxcbiAgICAgIGdldENvbHVtblN0b3BJbmRleEZvclN0YXJ0SW5kZXggPSBfcmVmMi5nZXRDb2x1bW5TdG9wSW5kZXhGb3JTdGFydEluZGV4LFxuICAgICAgZ2V0Q29sdW1uV2lkdGggPSBfcmVmMi5nZXRDb2x1bW5XaWR0aCxcbiAgICAgIGdldEVzdGltYXRlZFRvdGFsSGVpZ2h0ID0gX3JlZjIuZ2V0RXN0aW1hdGVkVG90YWxIZWlnaHQsXG4gICAgICBnZXRFc3RpbWF0ZWRUb3RhbFdpZHRoID0gX3JlZjIuZ2V0RXN0aW1hdGVkVG90YWxXaWR0aCxcbiAgICAgIGdldE9mZnNldEZvckNvbHVtbkFuZEFsaWdubWVudCA9IF9yZWYyLmdldE9mZnNldEZvckNvbHVtbkFuZEFsaWdubWVudCxcbiAgICAgIGdldE9mZnNldEZvclJvd0FuZEFsaWdubWVudCA9IF9yZWYyLmdldE9mZnNldEZvclJvd0FuZEFsaWdubWVudCxcbiAgICAgIGdldFJvd0hlaWdodCA9IF9yZWYyLmdldFJvd0hlaWdodCxcbiAgICAgIGdldFJvd09mZnNldCA9IF9yZWYyLmdldFJvd09mZnNldCxcbiAgICAgIGdldFJvd1N0YXJ0SW5kZXhGb3JPZmZzZXQgPSBfcmVmMi5nZXRSb3dTdGFydEluZGV4Rm9yT2Zmc2V0LFxuICAgICAgZ2V0Um93U3RvcEluZGV4Rm9yU3RhcnRJbmRleCA9IF9yZWYyLmdldFJvd1N0b3BJbmRleEZvclN0YXJ0SW5kZXgsXG4gICAgICBpbml0SW5zdGFuY2VQcm9wcyA9IF9yZWYyLmluaXRJbnN0YW5jZVByb3BzLFxuICAgICAgc2hvdWxkUmVzZXRTdHlsZUNhY2hlT25JdGVtU2l6ZUNoYW5nZSA9IF9yZWYyLnNob3VsZFJlc2V0U3R5bGVDYWNoZU9uSXRlbVNpemVDaGFuZ2UsXG4gICAgICB2YWxpZGF0ZVByb3BzID0gX3JlZjIudmFsaWRhdGVQcm9wcztcbiAgcmV0dXJuIF90ZW1wID0gX2NsYXNzID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoX1B1cmVDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHNMb29zZShHcmlkLCBfUHVyZUNvbXBvbmVudCk7XG5cbiAgICAvLyBBbHdheXMgdXNlIGV4cGxpY2l0IGNvbnN0cnVjdG9yIGZvciBSZWFjdCBjb21wb25lbnRzLlxuICAgIC8vIEl0IHByb2R1Y2VzIGxlc3MgY29kZSBhZnRlciB0cmFuc3BpbGF0aW9uLiAoIzI2KVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWNvbnN0cnVjdG9yXG4gICAgZnVuY3Rpb24gR3JpZChwcm9wcykge1xuICAgICAgdmFyIF90aGlzO1xuXG4gICAgICBfdGhpcyA9IF9QdXJlQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XG4gICAgICBfdGhpcy5faW5zdGFuY2VQcm9wcyA9IGluaXRJbnN0YW5jZVByb3BzKF90aGlzLnByb3BzLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSk7XG4gICAgICBfdGhpcy5fcmVzZXRJc1Njcm9sbGluZ1RpbWVvdXRJZCA9IG51bGw7XG4gICAgICBfdGhpcy5fb3V0ZXJSZWYgPSB2b2lkIDA7XG4gICAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgaW5zdGFuY2U6IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLFxuICAgICAgICBpc1Njcm9sbGluZzogZmFsc2UsXG4gICAgICAgIGhvcml6b250YWxTY3JvbGxEaXJlY3Rpb246ICdmb3J3YXJkJyxcbiAgICAgICAgc2Nyb2xsTGVmdDogdHlwZW9mIF90aGlzLnByb3BzLmluaXRpYWxTY3JvbGxMZWZ0ID09PSAnbnVtYmVyJyA/IF90aGlzLnByb3BzLmluaXRpYWxTY3JvbGxMZWZ0IDogMCxcbiAgICAgICAgc2Nyb2xsVG9wOiB0eXBlb2YgX3RoaXMucHJvcHMuaW5pdGlhbFNjcm9sbFRvcCA9PT0gJ251bWJlcicgPyBfdGhpcy5wcm9wcy5pbml0aWFsU2Nyb2xsVG9wIDogMCxcbiAgICAgICAgc2Nyb2xsVXBkYXRlV2FzUmVxdWVzdGVkOiBmYWxzZSxcbiAgICAgICAgdmVydGljYWxTY3JvbGxEaXJlY3Rpb246ICdmb3J3YXJkJ1xuICAgICAgfTtcbiAgICAgIF90aGlzLl9jYWxsT25JdGVtc1JlbmRlcmVkID0gdm9pZCAwO1xuICAgICAgX3RoaXMuX2NhbGxPbkl0ZW1zUmVuZGVyZWQgPSBtZW1vaXplT25lKGZ1bmN0aW9uIChvdmVyc2NhbkNvbHVtblN0YXJ0SW5kZXgsIG92ZXJzY2FuQ29sdW1uU3RvcEluZGV4LCBvdmVyc2NhblJvd1N0YXJ0SW5kZXgsIG92ZXJzY2FuUm93U3RvcEluZGV4LCB2aXNpYmxlQ29sdW1uU3RhcnRJbmRleCwgdmlzaWJsZUNvbHVtblN0b3BJbmRleCwgdmlzaWJsZVJvd1N0YXJ0SW5kZXgsIHZpc2libGVSb3dTdG9wSW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLnByb3BzLm9uSXRlbXNSZW5kZXJlZCh7XG4gICAgICAgICAgb3ZlcnNjYW5Db2x1bW5TdGFydEluZGV4OiBvdmVyc2NhbkNvbHVtblN0YXJ0SW5kZXgsXG4gICAgICAgICAgb3ZlcnNjYW5Db2x1bW5TdG9wSW5kZXg6IG92ZXJzY2FuQ29sdW1uU3RvcEluZGV4LFxuICAgICAgICAgIG92ZXJzY2FuUm93U3RhcnRJbmRleDogb3ZlcnNjYW5Sb3dTdGFydEluZGV4LFxuICAgICAgICAgIG92ZXJzY2FuUm93U3RvcEluZGV4OiBvdmVyc2NhblJvd1N0b3BJbmRleCxcbiAgICAgICAgICB2aXNpYmxlQ29sdW1uU3RhcnRJbmRleDogdmlzaWJsZUNvbHVtblN0YXJ0SW5kZXgsXG4gICAgICAgICAgdmlzaWJsZUNvbHVtblN0b3BJbmRleDogdmlzaWJsZUNvbHVtblN0b3BJbmRleCxcbiAgICAgICAgICB2aXNpYmxlUm93U3RhcnRJbmRleDogdmlzaWJsZVJvd1N0YXJ0SW5kZXgsXG4gICAgICAgICAgdmlzaWJsZVJvd1N0b3BJbmRleDogdmlzaWJsZVJvd1N0b3BJbmRleFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgX3RoaXMuX2NhbGxPblNjcm9sbCA9IHZvaWQgMDtcbiAgICAgIF90aGlzLl9jYWxsT25TY3JvbGwgPSBtZW1vaXplT25lKGZ1bmN0aW9uIChzY3JvbGxMZWZ0LCBzY3JvbGxUb3AsIGhvcml6b250YWxTY3JvbGxEaXJlY3Rpb24sIHZlcnRpY2FsU2Nyb2xsRGlyZWN0aW9uLCBzY3JvbGxVcGRhdGVXYXNSZXF1ZXN0ZWQpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLnByb3BzLm9uU2Nyb2xsKHtcbiAgICAgICAgICBob3Jpem9udGFsU2Nyb2xsRGlyZWN0aW9uOiBob3Jpem9udGFsU2Nyb2xsRGlyZWN0aW9uLFxuICAgICAgICAgIHNjcm9sbExlZnQ6IHNjcm9sbExlZnQsXG4gICAgICAgICAgc2Nyb2xsVG9wOiBzY3JvbGxUb3AsXG4gICAgICAgICAgdmVydGljYWxTY3JvbGxEaXJlY3Rpb246IHZlcnRpY2FsU2Nyb2xsRGlyZWN0aW9uLFxuICAgICAgICAgIHNjcm9sbFVwZGF0ZVdhc1JlcXVlc3RlZDogc2Nyb2xsVXBkYXRlV2FzUmVxdWVzdGVkXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICBfdGhpcy5fZ2V0SXRlbVN0eWxlID0gdm9pZCAwO1xuXG4gICAgICBfdGhpcy5fZ2V0SXRlbVN0eWxlID0gZnVuY3Rpb24gKHJvd0luZGV4LCBjb2x1bW5JbmRleCkge1xuICAgICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIGNvbHVtbldpZHRoID0gX3RoaXMkcHJvcHMuY29sdW1uV2lkdGgsXG4gICAgICAgICAgICBkaXJlY3Rpb24gPSBfdGhpcyRwcm9wcy5kaXJlY3Rpb24sXG4gICAgICAgICAgICByb3dIZWlnaHQgPSBfdGhpcyRwcm9wcy5yb3dIZWlnaHQ7XG5cbiAgICAgICAgdmFyIGl0ZW1TdHlsZUNhY2hlID0gX3RoaXMuX2dldEl0ZW1TdHlsZUNhY2hlKHNob3VsZFJlc2V0U3R5bGVDYWNoZU9uSXRlbVNpemVDaGFuZ2UgJiYgY29sdW1uV2lkdGgsIHNob3VsZFJlc2V0U3R5bGVDYWNoZU9uSXRlbVNpemVDaGFuZ2UgJiYgZGlyZWN0aW9uLCBzaG91bGRSZXNldFN0eWxlQ2FjaGVPbkl0ZW1TaXplQ2hhbmdlICYmIHJvd0hlaWdodCk7XG5cbiAgICAgICAgdmFyIGtleSA9IHJvd0luZGV4ICsgXCI6XCIgKyBjb2x1bW5JbmRleDtcbiAgICAgICAgdmFyIHN0eWxlO1xuXG4gICAgICAgIGlmIChpdGVtU3R5bGVDYWNoZS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgc3R5bGUgPSBpdGVtU3R5bGVDYWNoZVtrZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBfb2Zmc2V0ID0gZ2V0Q29sdW1uT2Zmc2V0KF90aGlzLnByb3BzLCBjb2x1bW5JbmRleCwgX3RoaXMuX2luc3RhbmNlUHJvcHMpO1xuXG4gICAgICAgICAgdmFyIGlzUnRsID0gZGlyZWN0aW9uID09PSAncnRsJztcbiAgICAgICAgICBpdGVtU3R5bGVDYWNoZVtrZXldID0gc3R5bGUgPSB7XG4gICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgIGxlZnQ6IGlzUnRsID8gdW5kZWZpbmVkIDogX29mZnNldCxcbiAgICAgICAgICAgIHJpZ2h0OiBpc1J0bCA/IF9vZmZzZXQgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB0b3A6IGdldFJvd09mZnNldChfdGhpcy5wcm9wcywgcm93SW5kZXgsIF90aGlzLl9pbnN0YW5jZVByb3BzKSxcbiAgICAgICAgICAgIGhlaWdodDogZ2V0Um93SGVpZ2h0KF90aGlzLnByb3BzLCByb3dJbmRleCwgX3RoaXMuX2luc3RhbmNlUHJvcHMpLFxuICAgICAgICAgICAgd2lkdGg6IGdldENvbHVtbldpZHRoKF90aGlzLnByb3BzLCBjb2x1bW5JbmRleCwgX3RoaXMuX2luc3RhbmNlUHJvcHMpXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzdHlsZTtcbiAgICAgIH07XG5cbiAgICAgIF90aGlzLl9nZXRJdGVtU3R5bGVDYWNoZSA9IHZvaWQgMDtcbiAgICAgIF90aGlzLl9nZXRJdGVtU3R5bGVDYWNoZSA9IG1lbW9pemVPbmUoZnVuY3Rpb24gKF8sIF9fLCBfX18pIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfSk7XG5cbiAgICAgIF90aGlzLl9vblNjcm9sbCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB2YXIgX2V2ZW50JGN1cnJlbnRUYXJnZXQgPSBldmVudC5jdXJyZW50VGFyZ2V0LFxuICAgICAgICAgICAgY2xpZW50SGVpZ2h0ID0gX2V2ZW50JGN1cnJlbnRUYXJnZXQuY2xpZW50SGVpZ2h0LFxuICAgICAgICAgICAgY2xpZW50V2lkdGggPSBfZXZlbnQkY3VycmVudFRhcmdldC5jbGllbnRXaWR0aCxcbiAgICAgICAgICAgIHNjcm9sbExlZnQgPSBfZXZlbnQkY3VycmVudFRhcmdldC5zY3JvbGxMZWZ0LFxuICAgICAgICAgICAgc2Nyb2xsVG9wID0gX2V2ZW50JGN1cnJlbnRUYXJnZXQuc2Nyb2xsVG9wLFxuICAgICAgICAgICAgc2Nyb2xsSGVpZ2h0ID0gX2V2ZW50JGN1cnJlbnRUYXJnZXQuc2Nyb2xsSGVpZ2h0LFxuICAgICAgICAgICAgc2Nyb2xsV2lkdGggPSBfZXZlbnQkY3VycmVudFRhcmdldC5zY3JvbGxXaWR0aDtcblxuICAgICAgICBfdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAocHJldlN0YXRlKSB7XG4gICAgICAgICAgaWYgKHByZXZTdGF0ZS5zY3JvbGxMZWZ0ID09PSBzY3JvbGxMZWZ0ICYmIHByZXZTdGF0ZS5zY3JvbGxUb3AgPT09IHNjcm9sbFRvcCkge1xuICAgICAgICAgICAgLy8gU2Nyb2xsIHBvc2l0aW9uIG1heSBoYXZlIGJlZW4gdXBkYXRlZCBieSBjRE0vY0RVLFxuICAgICAgICAgICAgLy8gSW4gd2hpY2ggY2FzZSB3ZSBkb24ndCBuZWVkIHRvIHRyaWdnZXIgYW5vdGhlciByZW5kZXIsXG4gICAgICAgICAgICAvLyBBbmQgd2UgZG9uJ3Qgd2FudCB0byB1cGRhdGUgc3RhdGUuaXNTY3JvbGxpbmcuXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgZGlyZWN0aW9uID0gX3RoaXMucHJvcHMuZGlyZWN0aW9uOyAvLyBUUklDS1kgQWNjb3JkaW5nIHRvIHRoZSBzcGVjLCBzY3JvbGxMZWZ0IHNob3VsZCBiZSBuZWdhdGl2ZSBmb3IgUlRMIGFsaWduZWQgZWxlbWVudHMuXG4gICAgICAgICAgLy8gVGhpcyBpcyBub3QgdGhlIGNhc2UgZm9yIGFsbCBicm93c2VycyB0aG91Z2ggKGUuZy4gQ2hyb21lIHJlcG9ydHMgdmFsdWVzIGFzIHBvc2l0aXZlLCBtZWFzdXJlZCByZWxhdGl2ZSB0byB0aGUgbGVmdCkuXG4gICAgICAgICAgLy8gSXQncyBhbHNvIGVhc2llciBmb3IgdGhpcyBjb21wb25lbnQgaWYgd2UgY29udmVydCBvZmZzZXRzIHRvIHRoZSBzYW1lIGZvcm1hdCBhcyB0aGV5IHdvdWxkIGJlIGluIGZvciBsdHIuXG4gICAgICAgICAgLy8gU28gdGhlIHNpbXBsZXN0IHNvbHV0aW9uIGlzIHRvIGRldGVybWluZSB3aGljaCBicm93c2VyIGJlaGF2aW9yIHdlJ3JlIGRlYWxpbmcgd2l0aCwgYW5kIGNvbnZlcnQgYmFzZWQgb24gaXQuXG5cbiAgICAgICAgICB2YXIgY2FsY3VsYXRlZFNjcm9sbExlZnQgPSBzY3JvbGxMZWZ0O1xuXG4gICAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ3J0bCcpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoZ2V0UlRMT2Zmc2V0VHlwZSgpKSB7XG4gICAgICAgICAgICAgIGNhc2UgJ25lZ2F0aXZlJzpcbiAgICAgICAgICAgICAgICBjYWxjdWxhdGVkU2Nyb2xsTGVmdCA9IC1zY3JvbGxMZWZ0O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgJ3Bvc2l0aXZlLWRlc2NlbmRpbmcnOlxuICAgICAgICAgICAgICAgIGNhbGN1bGF0ZWRTY3JvbGxMZWZ0ID0gc2Nyb2xsV2lkdGggLSBjbGllbnRXaWR0aCAtIHNjcm9sbExlZnQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSAvLyBQcmV2ZW50IFNhZmFyaSdzIGVsYXN0aWMgc2Nyb2xsaW5nIGZyb20gY2F1c2luZyB2aXN1YWwgc2hha2luZyB3aGVuIHNjcm9sbGluZyBwYXN0IGJvdW5kcy5cblxuXG4gICAgICAgICAgY2FsY3VsYXRlZFNjcm9sbExlZnQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihjYWxjdWxhdGVkU2Nyb2xsTGVmdCwgc2Nyb2xsV2lkdGggLSBjbGllbnRXaWR0aCkpO1xuICAgICAgICAgIHZhciBjYWxjdWxhdGVkU2Nyb2xsVG9wID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oc2Nyb2xsVG9wLCBzY3JvbGxIZWlnaHQgLSBjbGllbnRIZWlnaHQpKTtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaXNTY3JvbGxpbmc6IHRydWUsXG4gICAgICAgICAgICBob3Jpem9udGFsU2Nyb2xsRGlyZWN0aW9uOiBwcmV2U3RhdGUuc2Nyb2xsTGVmdCA8IHNjcm9sbExlZnQgPyAnZm9yd2FyZCcgOiAnYmFja3dhcmQnLFxuICAgICAgICAgICAgc2Nyb2xsTGVmdDogY2FsY3VsYXRlZFNjcm9sbExlZnQsXG4gICAgICAgICAgICBzY3JvbGxUb3A6IGNhbGN1bGF0ZWRTY3JvbGxUb3AsXG4gICAgICAgICAgICB2ZXJ0aWNhbFNjcm9sbERpcmVjdGlvbjogcHJldlN0YXRlLnNjcm9sbFRvcCA8IHNjcm9sbFRvcCA/ICdmb3J3YXJkJyA6ICdiYWNrd2FyZCcsXG4gICAgICAgICAgICBzY3JvbGxVcGRhdGVXYXNSZXF1ZXN0ZWQ6IGZhbHNlXG4gICAgICAgICAgfTtcbiAgICAgICAgfSwgX3RoaXMuX3Jlc2V0SXNTY3JvbGxpbmdEZWJvdW5jZWQpO1xuICAgICAgfTtcblxuICAgICAgX3RoaXMuX291dGVyUmVmU2V0dGVyID0gZnVuY3Rpb24gKHJlZikge1xuICAgICAgICB2YXIgb3V0ZXJSZWYgPSBfdGhpcy5wcm9wcy5vdXRlclJlZjtcbiAgICAgICAgX3RoaXMuX291dGVyUmVmID0gcmVmO1xuXG4gICAgICAgIGlmICh0eXBlb2Ygb3V0ZXJSZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBvdXRlclJlZihyZWYpO1xuICAgICAgICB9IGVsc2UgaWYgKG91dGVyUmVmICE9IG51bGwgJiYgdHlwZW9mIG91dGVyUmVmID09PSAnb2JqZWN0JyAmJiBvdXRlclJlZi5oYXNPd25Qcm9wZXJ0eSgnY3VycmVudCcpKSB7XG4gICAgICAgICAgb3V0ZXJSZWYuY3VycmVudCA9IHJlZjtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgX3RoaXMuX3Jlc2V0SXNTY3JvbGxpbmdEZWJvdW5jZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChfdGhpcy5fcmVzZXRJc1Njcm9sbGluZ1RpbWVvdXRJZCAhPT0gbnVsbCkge1xuICAgICAgICAgIGNhbmNlbFRpbWVvdXQoX3RoaXMuX3Jlc2V0SXNTY3JvbGxpbmdUaW1lb3V0SWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMuX3Jlc2V0SXNTY3JvbGxpbmdUaW1lb3V0SWQgPSByZXF1ZXN0VGltZW91dChfdGhpcy5fcmVzZXRJc1Njcm9sbGluZywgSVNfU0NST0xMSU5HX0RFQk9VTkNFX0lOVEVSVkFMKTtcbiAgICAgIH07XG5cbiAgICAgIF90aGlzLl9yZXNldElzU2Nyb2xsaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5fcmVzZXRJc1Njcm9sbGluZ1RpbWVvdXRJZCA9IG51bGw7XG5cbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGlzU2Nyb2xsaW5nOiBmYWxzZVxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgLy8gQ2xlYXIgc3R5bGUgY2FjaGUgYWZ0ZXIgc3RhdGUgdXBkYXRlIGhhcyBiZWVuIGNvbW1pdHRlZC5cbiAgICAgICAgICAvLyBUaGlzIHdheSB3ZSBkb24ndCBicmVhayBwdXJlIHNDVSBmb3IgaXRlbXMgdGhhdCBkb24ndCB1c2UgaXNTY3JvbGxpbmcgcGFyYW0uXG4gICAgICAgICAgX3RoaXMuX2dldEl0ZW1TdHlsZUNhY2hlKC0xKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgR3JpZC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzLCBwcmV2U3RhdGUpIHtcbiAgICAgIHZhbGlkYXRlU2hhcmVkUHJvcHMobmV4dFByb3BzLCBwcmV2U3RhdGUpO1xuICAgICAgdmFsaWRhdGVQcm9wcyhuZXh0UHJvcHMpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcblxuICAgIHZhciBfcHJvdG8gPSBHcmlkLnByb3RvdHlwZTtcblxuICAgIF9wcm90by5zY3JvbGxUbyA9IGZ1bmN0aW9uIHNjcm9sbFRvKF9yZWYzKSB7XG4gICAgICB2YXIgc2Nyb2xsTGVmdCA9IF9yZWYzLnNjcm9sbExlZnQsXG4gICAgICAgICAgc2Nyb2xsVG9wID0gX3JlZjMuc2Nyb2xsVG9wO1xuXG4gICAgICBpZiAoc2Nyb2xsTGVmdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHNjcm9sbExlZnQgPSBNYXRoLm1heCgwLCBzY3JvbGxMZWZ0KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNjcm9sbFRvcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHNjcm9sbFRvcCA9IE1hdGgubWF4KDAsIHNjcm9sbFRvcCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKHByZXZTdGF0ZSkge1xuICAgICAgICBpZiAoc2Nyb2xsTGVmdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgc2Nyb2xsTGVmdCA9IHByZXZTdGF0ZS5zY3JvbGxMZWZ0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNjcm9sbFRvcCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgc2Nyb2xsVG9wID0gcHJldlN0YXRlLnNjcm9sbFRvcDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwcmV2U3RhdGUuc2Nyb2xsTGVmdCA9PT0gc2Nyb2xsTGVmdCAmJiBwcmV2U3RhdGUuc2Nyb2xsVG9wID09PSBzY3JvbGxUb3ApIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaG9yaXpvbnRhbFNjcm9sbERpcmVjdGlvbjogcHJldlN0YXRlLnNjcm9sbExlZnQgPCBzY3JvbGxMZWZ0ID8gJ2ZvcndhcmQnIDogJ2JhY2t3YXJkJyxcbiAgICAgICAgICBzY3JvbGxMZWZ0OiBzY3JvbGxMZWZ0LFxuICAgICAgICAgIHNjcm9sbFRvcDogc2Nyb2xsVG9wLFxuICAgICAgICAgIHNjcm9sbFVwZGF0ZVdhc1JlcXVlc3RlZDogdHJ1ZSxcbiAgICAgICAgICB2ZXJ0aWNhbFNjcm9sbERpcmVjdGlvbjogcHJldlN0YXRlLnNjcm9sbFRvcCA8IHNjcm9sbFRvcCA/ICdmb3J3YXJkJyA6ICdiYWNrd2FyZCdcbiAgICAgICAgfTtcbiAgICAgIH0sIHRoaXMuX3Jlc2V0SXNTY3JvbGxpbmdEZWJvdW5jZWQpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uc2Nyb2xsVG9JdGVtID0gZnVuY3Rpb24gc2Nyb2xsVG9JdGVtKF9yZWY0KSB7XG4gICAgICB2YXIgX3JlZjQkYWxpZ24gPSBfcmVmNC5hbGlnbixcbiAgICAgICAgICBhbGlnbiA9IF9yZWY0JGFsaWduID09PSB2b2lkIDAgPyAnYXV0bycgOiBfcmVmNCRhbGlnbixcbiAgICAgICAgICBjb2x1bW5JbmRleCA9IF9yZWY0LmNvbHVtbkluZGV4LFxuICAgICAgICAgIHJvd0luZGV4ID0gX3JlZjQucm93SW5kZXg7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjb2x1bW5Db3VudCA9IF90aGlzJHByb3BzMi5jb2x1bW5Db3VudCxcbiAgICAgICAgICBoZWlnaHQgPSBfdGhpcyRwcm9wczIuaGVpZ2h0LFxuICAgICAgICAgIHJvd0NvdW50ID0gX3RoaXMkcHJvcHMyLnJvd0NvdW50LFxuICAgICAgICAgIHdpZHRoID0gX3RoaXMkcHJvcHMyLndpZHRoO1xuICAgICAgdmFyIF90aGlzJHN0YXRlID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICBzY3JvbGxMZWZ0ID0gX3RoaXMkc3RhdGUuc2Nyb2xsTGVmdCxcbiAgICAgICAgICBzY3JvbGxUb3AgPSBfdGhpcyRzdGF0ZS5zY3JvbGxUb3A7XG4gICAgICB2YXIgc2Nyb2xsYmFyU2l6ZSA9IGdldFNjcm9sbGJhclNpemUoKTtcblxuICAgICAgaWYgKGNvbHVtbkluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29sdW1uSW5kZXggPSBNYXRoLm1heCgwLCBNYXRoLm1pbihjb2x1bW5JbmRleCwgY29sdW1uQ291bnQgLSAxKSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyb3dJbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJvd0luZGV4ID0gTWF0aC5tYXgoMCwgTWF0aC5taW4ocm93SW5kZXgsIHJvd0NvdW50IC0gMSkpO1xuICAgICAgfVxuXG4gICAgICB2YXIgZXN0aW1hdGVkVG90YWxIZWlnaHQgPSBnZXRFc3RpbWF0ZWRUb3RhbEhlaWdodCh0aGlzLnByb3BzLCB0aGlzLl9pbnN0YW5jZVByb3BzKTtcbiAgICAgIHZhciBlc3RpbWF0ZWRUb3RhbFdpZHRoID0gZ2V0RXN0aW1hdGVkVG90YWxXaWR0aCh0aGlzLnByb3BzLCB0aGlzLl9pbnN0YW5jZVByb3BzKTsgLy8gVGhlIHNjcm9sbGJhciBzaXplIHNob3VsZCBiZSBjb25zaWRlcmVkIHdoZW4gc2Nyb2xsaW5nIGFuIGl0ZW0gaW50byB2aWV3LFxuICAgICAgLy8gdG8gZW5zdXJlIGl0J3MgZnVsbHkgdmlzaWJsZS5cbiAgICAgIC8vIEJ1dCB3ZSBvbmx5IG5lZWQgdG8gYWNjb3VudCBmb3IgaXRzIHNpemUgd2hlbiBpdCdzIGFjdHVhbGx5IHZpc2libGUuXG5cbiAgICAgIHZhciBob3Jpem9udGFsU2Nyb2xsYmFyU2l6ZSA9IGVzdGltYXRlZFRvdGFsV2lkdGggPiB3aWR0aCA/IHNjcm9sbGJhclNpemUgOiAwO1xuICAgICAgdmFyIHZlcnRpY2FsU2Nyb2xsYmFyU2l6ZSA9IGVzdGltYXRlZFRvdGFsSGVpZ2h0ID4gaGVpZ2h0ID8gc2Nyb2xsYmFyU2l6ZSA6IDA7XG4gICAgICB0aGlzLnNjcm9sbFRvKHtcbiAgICAgICAgc2Nyb2xsTGVmdDogY29sdW1uSW5kZXggIT09IHVuZGVmaW5lZCA/IGdldE9mZnNldEZvckNvbHVtbkFuZEFsaWdubWVudCh0aGlzLnByb3BzLCBjb2x1bW5JbmRleCwgYWxpZ24sIHNjcm9sbExlZnQsIHRoaXMuX2luc3RhbmNlUHJvcHMsIHZlcnRpY2FsU2Nyb2xsYmFyU2l6ZSkgOiBzY3JvbGxMZWZ0LFxuICAgICAgICBzY3JvbGxUb3A6IHJvd0luZGV4ICE9PSB1bmRlZmluZWQgPyBnZXRPZmZzZXRGb3JSb3dBbmRBbGlnbm1lbnQodGhpcy5wcm9wcywgcm93SW5kZXgsIGFsaWduLCBzY3JvbGxUb3AsIHRoaXMuX2luc3RhbmNlUHJvcHMsIGhvcml6b250YWxTY3JvbGxiYXJTaXplKSA6IHNjcm9sbFRvcFxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgaW5pdGlhbFNjcm9sbExlZnQgPSBfdGhpcyRwcm9wczMuaW5pdGlhbFNjcm9sbExlZnQsXG4gICAgICAgICAgaW5pdGlhbFNjcm9sbFRvcCA9IF90aGlzJHByb3BzMy5pbml0aWFsU2Nyb2xsVG9wO1xuXG4gICAgICBpZiAodGhpcy5fb3V0ZXJSZWYgIT0gbnVsbCkge1xuICAgICAgICB2YXIgb3V0ZXJSZWYgPSB0aGlzLl9vdXRlclJlZjtcblxuICAgICAgICBpZiAodHlwZW9mIGluaXRpYWxTY3JvbGxMZWZ0ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIG91dGVyUmVmLnNjcm9sbExlZnQgPSBpbml0aWFsU2Nyb2xsTGVmdDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgaW5pdGlhbFNjcm9sbFRvcCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICBvdXRlclJlZi5zY3JvbGxUb3AgPSBpbml0aWFsU2Nyb2xsVG9wO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2NhbGxQcm9wc0NhbGxiYWNrcygpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgdmFyIGRpcmVjdGlvbiA9IHRoaXMucHJvcHMuZGlyZWN0aW9uO1xuICAgICAgdmFyIF90aGlzJHN0YXRlMiA9IHRoaXMuc3RhdGUsXG4gICAgICAgICAgc2Nyb2xsTGVmdCA9IF90aGlzJHN0YXRlMi5zY3JvbGxMZWZ0LFxuICAgICAgICAgIHNjcm9sbFRvcCA9IF90aGlzJHN0YXRlMi5zY3JvbGxUb3AsXG4gICAgICAgICAgc2Nyb2xsVXBkYXRlV2FzUmVxdWVzdGVkID0gX3RoaXMkc3RhdGUyLnNjcm9sbFVwZGF0ZVdhc1JlcXVlc3RlZDtcblxuICAgICAgaWYgKHNjcm9sbFVwZGF0ZVdhc1JlcXVlc3RlZCAmJiB0aGlzLl9vdXRlclJlZiAhPSBudWxsKSB7XG4gICAgICAgIC8vIFRSSUNLWSBBY2NvcmRpbmcgdG8gdGhlIHNwZWMsIHNjcm9sbExlZnQgc2hvdWxkIGJlIG5lZ2F0aXZlIGZvciBSVEwgYWxpZ25lZCBlbGVtZW50cy5cbiAgICAgICAgLy8gVGhpcyBpcyBub3QgdGhlIGNhc2UgZm9yIGFsbCBicm93c2VycyB0aG91Z2ggKGUuZy4gQ2hyb21lIHJlcG9ydHMgdmFsdWVzIGFzIHBvc2l0aXZlLCBtZWFzdXJlZCByZWxhdGl2ZSB0byB0aGUgbGVmdCkuXG4gICAgICAgIC8vIFNvIHdlIG5lZWQgdG8gZGV0ZXJtaW5lIHdoaWNoIGJyb3dzZXIgYmVoYXZpb3Igd2UncmUgZGVhbGluZyB3aXRoLCBhbmQgbWltaWMgaXQuXG4gICAgICAgIHZhciBvdXRlclJlZiA9IHRoaXMuX291dGVyUmVmO1xuXG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT09ICdydGwnKSB7XG4gICAgICAgICAgc3dpdGNoIChnZXRSVExPZmZzZXRUeXBlKCkpIHtcbiAgICAgICAgICAgIGNhc2UgJ25lZ2F0aXZlJzpcbiAgICAgICAgICAgICAgb3V0ZXJSZWYuc2Nyb2xsTGVmdCA9IC1zY3JvbGxMZWZ0O1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAncG9zaXRpdmUtYXNjZW5kaW5nJzpcbiAgICAgICAgICAgICAgb3V0ZXJSZWYuc2Nyb2xsTGVmdCA9IHNjcm9sbExlZnQ7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICB2YXIgY2xpZW50V2lkdGggPSBvdXRlclJlZi5jbGllbnRXaWR0aCxcbiAgICAgICAgICAgICAgICAgIHNjcm9sbFdpZHRoID0gb3V0ZXJSZWYuc2Nyb2xsV2lkdGg7XG4gICAgICAgICAgICAgIG91dGVyUmVmLnNjcm9sbExlZnQgPSBzY3JvbGxXaWR0aCAtIGNsaWVudFdpZHRoIC0gc2Nyb2xsTGVmdDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dGVyUmVmLnNjcm9sbExlZnQgPSBNYXRoLm1heCgwLCBzY3JvbGxMZWZ0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIG91dGVyUmVmLnNjcm9sbFRvcCA9IE1hdGgubWF4KDAsIHNjcm9sbFRvcCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2NhbGxQcm9wc0NhbGxiYWNrcygpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLl9yZXNldElzU2Nyb2xsaW5nVGltZW91dElkICE9PSBudWxsKSB7XG4gICAgICAgIGNhbmNlbFRpbWVvdXQodGhpcy5fcmVzZXRJc1Njcm9sbGluZ1RpbWVvdXRJZCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHM0ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzNC5jaGlsZHJlbixcbiAgICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wczQuY2xhc3NOYW1lLFxuICAgICAgICAgIGNvbHVtbkNvdW50ID0gX3RoaXMkcHJvcHM0LmNvbHVtbkNvdW50LFxuICAgICAgICAgIGRpcmVjdGlvbiA9IF90aGlzJHByb3BzNC5kaXJlY3Rpb24sXG4gICAgICAgICAgaGVpZ2h0ID0gX3RoaXMkcHJvcHM0LmhlaWdodCxcbiAgICAgICAgICBpbm5lclJlZiA9IF90aGlzJHByb3BzNC5pbm5lclJlZixcbiAgICAgICAgICBpbm5lckVsZW1lbnRUeXBlID0gX3RoaXMkcHJvcHM0LmlubmVyRWxlbWVudFR5cGUsXG4gICAgICAgICAgaW5uZXJUYWdOYW1lID0gX3RoaXMkcHJvcHM0LmlubmVyVGFnTmFtZSxcbiAgICAgICAgICBpdGVtRGF0YSA9IF90aGlzJHByb3BzNC5pdGVtRGF0YSxcbiAgICAgICAgICBfdGhpcyRwcm9wczQkaXRlbUtleSA9IF90aGlzJHByb3BzNC5pdGVtS2V5LFxuICAgICAgICAgIGl0ZW1LZXkgPSBfdGhpcyRwcm9wczQkaXRlbUtleSA9PT0gdm9pZCAwID8gZGVmYXVsdEl0ZW1LZXkgOiBfdGhpcyRwcm9wczQkaXRlbUtleSxcbiAgICAgICAgICBvdXRlckVsZW1lbnRUeXBlID0gX3RoaXMkcHJvcHM0Lm91dGVyRWxlbWVudFR5cGUsXG4gICAgICAgICAgb3V0ZXJUYWdOYW1lID0gX3RoaXMkcHJvcHM0Lm91dGVyVGFnTmFtZSxcbiAgICAgICAgICByb3dDb3VudCA9IF90aGlzJHByb3BzNC5yb3dDb3VudCxcbiAgICAgICAgICBzdHlsZSA9IF90aGlzJHByb3BzNC5zdHlsZSxcbiAgICAgICAgICB1c2VJc1Njcm9sbGluZyA9IF90aGlzJHByb3BzNC51c2VJc1Njcm9sbGluZyxcbiAgICAgICAgICB3aWR0aCA9IF90aGlzJHByb3BzNC53aWR0aDtcbiAgICAgIHZhciBpc1Njcm9sbGluZyA9IHRoaXMuc3RhdGUuaXNTY3JvbGxpbmc7XG5cbiAgICAgIHZhciBfdGhpcyRfZ2V0SG9yaXpvbnRhbFIgPSB0aGlzLl9nZXRIb3Jpem9udGFsUmFuZ2VUb1JlbmRlcigpLFxuICAgICAgICAgIGNvbHVtblN0YXJ0SW5kZXggPSBfdGhpcyRfZ2V0SG9yaXpvbnRhbFJbMF0sXG4gICAgICAgICAgY29sdW1uU3RvcEluZGV4ID0gX3RoaXMkX2dldEhvcml6b250YWxSWzFdO1xuXG4gICAgICB2YXIgX3RoaXMkX2dldFZlcnRpY2FsUmFuID0gdGhpcy5fZ2V0VmVydGljYWxSYW5nZVRvUmVuZGVyKCksXG4gICAgICAgICAgcm93U3RhcnRJbmRleCA9IF90aGlzJF9nZXRWZXJ0aWNhbFJhblswXSxcbiAgICAgICAgICByb3dTdG9wSW5kZXggPSBfdGhpcyRfZ2V0VmVydGljYWxSYW5bMV07XG5cbiAgICAgIHZhciBpdGVtcyA9IFtdO1xuXG4gICAgICBpZiAoY29sdW1uQ291bnQgPiAwICYmIHJvd0NvdW50KSB7XG4gICAgICAgIGZvciAodmFyIF9yb3dJbmRleCA9IHJvd1N0YXJ0SW5kZXg7IF9yb3dJbmRleCA8PSByb3dTdG9wSW5kZXg7IF9yb3dJbmRleCsrKSB7XG4gICAgICAgICAgZm9yICh2YXIgX2NvbHVtbkluZGV4ID0gY29sdW1uU3RhcnRJbmRleDsgX2NvbHVtbkluZGV4IDw9IGNvbHVtblN0b3BJbmRleDsgX2NvbHVtbkluZGV4KyspIHtcbiAgICAgICAgICAgIGl0ZW1zLnB1c2goY3JlYXRlRWxlbWVudChjaGlsZHJlbiwge1xuICAgICAgICAgICAgICBjb2x1bW5JbmRleDogX2NvbHVtbkluZGV4LFxuICAgICAgICAgICAgICBkYXRhOiBpdGVtRGF0YSxcbiAgICAgICAgICAgICAgaXNTY3JvbGxpbmc6IHVzZUlzU2Nyb2xsaW5nID8gaXNTY3JvbGxpbmcgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIGtleTogaXRlbUtleSh7XG4gICAgICAgICAgICAgICAgY29sdW1uSW5kZXg6IF9jb2x1bW5JbmRleCxcbiAgICAgICAgICAgICAgICBkYXRhOiBpdGVtRGF0YSxcbiAgICAgICAgICAgICAgICByb3dJbmRleDogX3Jvd0luZGV4XG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICByb3dJbmRleDogX3Jvd0luZGV4LFxuICAgICAgICAgICAgICBzdHlsZTogdGhpcy5fZ2V0SXRlbVN0eWxlKF9yb3dJbmRleCwgX2NvbHVtbkluZGV4KVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSAvLyBSZWFkIHRoaXMgdmFsdWUgQUZURVIgaXRlbXMgaGF2ZSBiZWVuIGNyZWF0ZWQsXG4gICAgICAvLyBTbyB0aGVpciBhY3R1YWwgc2l6ZXMgKGlmIHZhcmlhYmxlKSBhcmUgdGFrZW4gaW50byBjb25zaWRlcmF0aW9uLlxuXG5cbiAgICAgIHZhciBlc3RpbWF0ZWRUb3RhbEhlaWdodCA9IGdldEVzdGltYXRlZFRvdGFsSGVpZ2h0KHRoaXMucHJvcHMsIHRoaXMuX2luc3RhbmNlUHJvcHMpO1xuICAgICAgdmFyIGVzdGltYXRlZFRvdGFsV2lkdGggPSBnZXRFc3RpbWF0ZWRUb3RhbFdpZHRoKHRoaXMucHJvcHMsIHRoaXMuX2luc3RhbmNlUHJvcHMpO1xuICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQob3V0ZXJFbGVtZW50VHlwZSB8fCBvdXRlclRhZ05hbWUgfHwgJ2RpdicsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICAgIG9uU2Nyb2xsOiB0aGlzLl9vblNjcm9sbCxcbiAgICAgICAgcmVmOiB0aGlzLl9vdXRlclJlZlNldHRlcixcbiAgICAgICAgc3R5bGU6IF9leHRlbmRzKHtcbiAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgICAgb3ZlcmZsb3c6ICdhdXRvJyxcbiAgICAgICAgICBXZWJraXRPdmVyZmxvd1Njcm9sbGluZzogJ3RvdWNoJyxcbiAgICAgICAgICB3aWxsQ2hhbmdlOiAndHJhbnNmb3JtJyxcbiAgICAgICAgICBkaXJlY3Rpb246IGRpcmVjdGlvblxuICAgICAgICB9LCBzdHlsZSlcbiAgICAgIH0sIGNyZWF0ZUVsZW1lbnQoaW5uZXJFbGVtZW50VHlwZSB8fCBpbm5lclRhZ05hbWUgfHwgJ2RpdicsIHtcbiAgICAgICAgY2hpbGRyZW46IGl0ZW1zLFxuICAgICAgICByZWY6IGlubmVyUmVmLFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIGhlaWdodDogZXN0aW1hdGVkVG90YWxIZWlnaHQsXG4gICAgICAgICAgcG9pbnRlckV2ZW50czogaXNTY3JvbGxpbmcgPyAnbm9uZScgOiB1bmRlZmluZWQsXG4gICAgICAgICAgd2lkdGg6IGVzdGltYXRlZFRvdGFsV2lkdGhcbiAgICAgICAgfVxuICAgICAgfSkpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2NhbGxQcm9wc0NhbGxiYWNrcyA9IGZ1bmN0aW9uIF9jYWxsUHJvcHNDYWxsYmFja3MoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHM1ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjb2x1bW5Db3VudCA9IF90aGlzJHByb3BzNS5jb2x1bW5Db3VudCxcbiAgICAgICAgICBvbkl0ZW1zUmVuZGVyZWQgPSBfdGhpcyRwcm9wczUub25JdGVtc1JlbmRlcmVkLFxuICAgICAgICAgIG9uU2Nyb2xsID0gX3RoaXMkcHJvcHM1Lm9uU2Nyb2xsLFxuICAgICAgICAgIHJvd0NvdW50ID0gX3RoaXMkcHJvcHM1LnJvd0NvdW50O1xuXG4gICAgICBpZiAodHlwZW9mIG9uSXRlbXNSZW5kZXJlZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBpZiAoY29sdW1uQ291bnQgPiAwICYmIHJvd0NvdW50ID4gMCkge1xuICAgICAgICAgIHZhciBfdGhpcyRfZ2V0SG9yaXpvbnRhbFIyID0gdGhpcy5fZ2V0SG9yaXpvbnRhbFJhbmdlVG9SZW5kZXIoKSxcbiAgICAgICAgICAgICAgX292ZXJzY2FuQ29sdW1uU3RhcnRJbmRleCA9IF90aGlzJF9nZXRIb3Jpem9udGFsUjJbMF0sXG4gICAgICAgICAgICAgIF9vdmVyc2NhbkNvbHVtblN0b3BJbmRleCA9IF90aGlzJF9nZXRIb3Jpem9udGFsUjJbMV0sXG4gICAgICAgICAgICAgIF92aXNpYmxlQ29sdW1uU3RhcnRJbmRleCA9IF90aGlzJF9nZXRIb3Jpem9udGFsUjJbMl0sXG4gICAgICAgICAgICAgIF92aXNpYmxlQ29sdW1uU3RvcEluZGV4ID0gX3RoaXMkX2dldEhvcml6b250YWxSMlszXTtcblxuICAgICAgICAgIHZhciBfdGhpcyRfZ2V0VmVydGljYWxSYW4yID0gdGhpcy5fZ2V0VmVydGljYWxSYW5nZVRvUmVuZGVyKCksXG4gICAgICAgICAgICAgIF9vdmVyc2NhblJvd1N0YXJ0SW5kZXggPSBfdGhpcyRfZ2V0VmVydGljYWxSYW4yWzBdLFxuICAgICAgICAgICAgICBfb3ZlcnNjYW5Sb3dTdG9wSW5kZXggPSBfdGhpcyRfZ2V0VmVydGljYWxSYW4yWzFdLFxuICAgICAgICAgICAgICBfdmlzaWJsZVJvd1N0YXJ0SW5kZXggPSBfdGhpcyRfZ2V0VmVydGljYWxSYW4yWzJdLFxuICAgICAgICAgICAgICBfdmlzaWJsZVJvd1N0b3BJbmRleCA9IF90aGlzJF9nZXRWZXJ0aWNhbFJhbjJbM107XG5cbiAgICAgICAgICB0aGlzLl9jYWxsT25JdGVtc1JlbmRlcmVkKF9vdmVyc2NhbkNvbHVtblN0YXJ0SW5kZXgsIF9vdmVyc2NhbkNvbHVtblN0b3BJbmRleCwgX292ZXJzY2FuUm93U3RhcnRJbmRleCwgX292ZXJzY2FuUm93U3RvcEluZGV4LCBfdmlzaWJsZUNvbHVtblN0YXJ0SW5kZXgsIF92aXNpYmxlQ29sdW1uU3RvcEluZGV4LCBfdmlzaWJsZVJvd1N0YXJ0SW5kZXgsIF92aXNpYmxlUm93U3RvcEluZGV4KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIG9uU2Nyb2xsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhciBfdGhpcyRzdGF0ZTMgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgICAgX2hvcml6b250YWxTY3JvbGxEaXJlY3Rpb24gPSBfdGhpcyRzdGF0ZTMuaG9yaXpvbnRhbFNjcm9sbERpcmVjdGlvbixcbiAgICAgICAgICAgIF9zY3JvbGxMZWZ0ID0gX3RoaXMkc3RhdGUzLnNjcm9sbExlZnQsXG4gICAgICAgICAgICBfc2Nyb2xsVG9wID0gX3RoaXMkc3RhdGUzLnNjcm9sbFRvcCxcbiAgICAgICAgICAgIF9zY3JvbGxVcGRhdGVXYXNSZXF1ZXN0ZWQgPSBfdGhpcyRzdGF0ZTMuc2Nyb2xsVXBkYXRlV2FzUmVxdWVzdGVkLFxuICAgICAgICAgICAgX3ZlcnRpY2FsU2Nyb2xsRGlyZWN0aW9uID0gX3RoaXMkc3RhdGUzLnZlcnRpY2FsU2Nyb2xsRGlyZWN0aW9uO1xuXG4gICAgICAgIHRoaXMuX2NhbGxPblNjcm9sbChfc2Nyb2xsTGVmdCwgX3Njcm9sbFRvcCwgX2hvcml6b250YWxTY3JvbGxEaXJlY3Rpb24sIF92ZXJ0aWNhbFNjcm9sbERpcmVjdGlvbiwgX3Njcm9sbFVwZGF0ZVdhc1JlcXVlc3RlZCk7XG4gICAgICB9XG4gICAgfTsgLy8gTGF6aWx5IGNyZWF0ZSBhbmQgY2FjaGUgaXRlbSBzdHlsZXMgd2hpbGUgc2Nyb2xsaW5nLFxuICAgIC8vIFNvIHRoYXQgcHVyZSBjb21wb25lbnQgc0NVIHdpbGwgcHJldmVudCByZS1yZW5kZXJzLlxuICAgIC8vIFdlIG1haW50YWluIHRoaXMgY2FjaGUsIGFuZCBwYXNzIGEgc3R5bGUgcHJvcCByYXRoZXIgdGhhbiBpbmRleCxcbiAgICAvLyBTbyB0aGF0IExpc3QgY2FuIGNsZWFyIGNhY2hlZCBzdHlsZXMgYW5kIGZvcmNlIGl0ZW0gcmUtcmVuZGVyIGlmIG5lY2Vzc2FyeS5cblxuXG4gICAgX3Byb3RvLl9nZXRIb3Jpem9udGFsUmFuZ2VUb1JlbmRlciA9IGZ1bmN0aW9uIF9nZXRIb3Jpem9udGFsUmFuZ2VUb1JlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczYgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNvbHVtbkNvdW50ID0gX3RoaXMkcHJvcHM2LmNvbHVtbkNvdW50LFxuICAgICAgICAgIG92ZXJzY2FuQ29sdW1uQ291bnQgPSBfdGhpcyRwcm9wczYub3ZlcnNjYW5Db2x1bW5Db3VudCxcbiAgICAgICAgICBvdmVyc2NhbkNvbHVtbnNDb3VudCA9IF90aGlzJHByb3BzNi5vdmVyc2NhbkNvbHVtbnNDb3VudCxcbiAgICAgICAgICBvdmVyc2NhbkNvdW50ID0gX3RoaXMkcHJvcHM2Lm92ZXJzY2FuQ291bnQsXG4gICAgICAgICAgcm93Q291bnQgPSBfdGhpcyRwcm9wczYucm93Q291bnQ7XG4gICAgICB2YXIgX3RoaXMkc3RhdGU0ID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICBob3Jpem9udGFsU2Nyb2xsRGlyZWN0aW9uID0gX3RoaXMkc3RhdGU0Lmhvcml6b250YWxTY3JvbGxEaXJlY3Rpb24sXG4gICAgICAgICAgaXNTY3JvbGxpbmcgPSBfdGhpcyRzdGF0ZTQuaXNTY3JvbGxpbmcsXG4gICAgICAgICAgc2Nyb2xsTGVmdCA9IF90aGlzJHN0YXRlNC5zY3JvbGxMZWZ0O1xuICAgICAgdmFyIG92ZXJzY2FuQ291bnRSZXNvbHZlZCA9IG92ZXJzY2FuQ29sdW1uQ291bnQgfHwgb3ZlcnNjYW5Db2x1bW5zQ291bnQgfHwgb3ZlcnNjYW5Db3VudCB8fCAxO1xuXG4gICAgICBpZiAoY29sdW1uQ291bnQgPT09IDAgfHwgcm93Q291bnQgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIFswLCAwLCAwLCAwXTtcbiAgICAgIH1cblxuICAgICAgdmFyIHN0YXJ0SW5kZXggPSBnZXRDb2x1bW5TdGFydEluZGV4Rm9yT2Zmc2V0KHRoaXMucHJvcHMsIHNjcm9sbExlZnQsIHRoaXMuX2luc3RhbmNlUHJvcHMpO1xuICAgICAgdmFyIHN0b3BJbmRleCA9IGdldENvbHVtblN0b3BJbmRleEZvclN0YXJ0SW5kZXgodGhpcy5wcm9wcywgc3RhcnRJbmRleCwgc2Nyb2xsTGVmdCwgdGhpcy5faW5zdGFuY2VQcm9wcyk7IC8vIE92ZXJzY2FuIGJ5IG9uZSBpdGVtIGluIGVhY2ggZGlyZWN0aW9uIHNvIHRoYXQgdGFiL2ZvY3VzIHdvcmtzLlxuICAgICAgLy8gSWYgdGhlcmUgaXNuJ3QgYXQgbGVhc3Qgb25lIGV4dHJhIGl0ZW0sIHRhYiBsb29wcyBiYWNrIGFyb3VuZC5cblxuICAgICAgdmFyIG92ZXJzY2FuQmFja3dhcmQgPSAhaXNTY3JvbGxpbmcgfHwgaG9yaXpvbnRhbFNjcm9sbERpcmVjdGlvbiA9PT0gJ2JhY2t3YXJkJyA/IE1hdGgubWF4KDEsIG92ZXJzY2FuQ291bnRSZXNvbHZlZCkgOiAxO1xuICAgICAgdmFyIG92ZXJzY2FuRm9yd2FyZCA9ICFpc1Njcm9sbGluZyB8fCBob3Jpem9udGFsU2Nyb2xsRGlyZWN0aW9uID09PSAnZm9yd2FyZCcgPyBNYXRoLm1heCgxLCBvdmVyc2NhbkNvdW50UmVzb2x2ZWQpIDogMTtcbiAgICAgIHJldHVybiBbTWF0aC5tYXgoMCwgc3RhcnRJbmRleCAtIG92ZXJzY2FuQmFja3dhcmQpLCBNYXRoLm1heCgwLCBNYXRoLm1pbihjb2x1bW5Db3VudCAtIDEsIHN0b3BJbmRleCArIG92ZXJzY2FuRm9yd2FyZCkpLCBzdGFydEluZGV4LCBzdG9wSW5kZXhdO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldFZlcnRpY2FsUmFuZ2VUb1JlbmRlciA9IGZ1bmN0aW9uIF9nZXRWZXJ0aWNhbFJhbmdlVG9SZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHM3ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjb2x1bW5Db3VudCA9IF90aGlzJHByb3BzNy5jb2x1bW5Db3VudCxcbiAgICAgICAgICBvdmVyc2NhbkNvdW50ID0gX3RoaXMkcHJvcHM3Lm92ZXJzY2FuQ291bnQsXG4gICAgICAgICAgb3ZlcnNjYW5Sb3dDb3VudCA9IF90aGlzJHByb3BzNy5vdmVyc2NhblJvd0NvdW50LFxuICAgICAgICAgIG92ZXJzY2FuUm93c0NvdW50ID0gX3RoaXMkcHJvcHM3Lm92ZXJzY2FuUm93c0NvdW50LFxuICAgICAgICAgIHJvd0NvdW50ID0gX3RoaXMkcHJvcHM3LnJvd0NvdW50O1xuICAgICAgdmFyIF90aGlzJHN0YXRlNSA9IHRoaXMuc3RhdGUsXG4gICAgICAgICAgaXNTY3JvbGxpbmcgPSBfdGhpcyRzdGF0ZTUuaXNTY3JvbGxpbmcsXG4gICAgICAgICAgdmVydGljYWxTY3JvbGxEaXJlY3Rpb24gPSBfdGhpcyRzdGF0ZTUudmVydGljYWxTY3JvbGxEaXJlY3Rpb24sXG4gICAgICAgICAgc2Nyb2xsVG9wID0gX3RoaXMkc3RhdGU1LnNjcm9sbFRvcDtcbiAgICAgIHZhciBvdmVyc2NhbkNvdW50UmVzb2x2ZWQgPSBvdmVyc2NhblJvd0NvdW50IHx8IG92ZXJzY2FuUm93c0NvdW50IHx8IG92ZXJzY2FuQ291bnQgfHwgMTtcblxuICAgICAgaWYgKGNvbHVtbkNvdW50ID09PSAwIHx8IHJvd0NvdW50ID09PSAwKSB7XG4gICAgICAgIHJldHVybiBbMCwgMCwgMCwgMF07XG4gICAgICB9XG5cbiAgICAgIHZhciBzdGFydEluZGV4ID0gZ2V0Um93U3RhcnRJbmRleEZvck9mZnNldCh0aGlzLnByb3BzLCBzY3JvbGxUb3AsIHRoaXMuX2luc3RhbmNlUHJvcHMpO1xuICAgICAgdmFyIHN0b3BJbmRleCA9IGdldFJvd1N0b3BJbmRleEZvclN0YXJ0SW5kZXgodGhpcy5wcm9wcywgc3RhcnRJbmRleCwgc2Nyb2xsVG9wLCB0aGlzLl9pbnN0YW5jZVByb3BzKTsgLy8gT3ZlcnNjYW4gYnkgb25lIGl0ZW0gaW4gZWFjaCBkaXJlY3Rpb24gc28gdGhhdCB0YWIvZm9jdXMgd29ya3MuXG4gICAgICAvLyBJZiB0aGVyZSBpc24ndCBhdCBsZWFzdCBvbmUgZXh0cmEgaXRlbSwgdGFiIGxvb3BzIGJhY2sgYXJvdW5kLlxuXG4gICAgICB2YXIgb3ZlcnNjYW5CYWNrd2FyZCA9ICFpc1Njcm9sbGluZyB8fCB2ZXJ0aWNhbFNjcm9sbERpcmVjdGlvbiA9PT0gJ2JhY2t3YXJkJyA/IE1hdGgubWF4KDEsIG92ZXJzY2FuQ291bnRSZXNvbHZlZCkgOiAxO1xuICAgICAgdmFyIG92ZXJzY2FuRm9yd2FyZCA9ICFpc1Njcm9sbGluZyB8fCB2ZXJ0aWNhbFNjcm9sbERpcmVjdGlvbiA9PT0gJ2ZvcndhcmQnID8gTWF0aC5tYXgoMSwgb3ZlcnNjYW5Db3VudFJlc29sdmVkKSA6IDE7XG4gICAgICByZXR1cm4gW01hdGgubWF4KDAsIHN0YXJ0SW5kZXggLSBvdmVyc2NhbkJhY2t3YXJkKSwgTWF0aC5tYXgoMCwgTWF0aC5taW4ocm93Q291bnQgLSAxLCBzdG9wSW5kZXggKyBvdmVyc2NhbkZvcndhcmQpKSwgc3RhcnRJbmRleCwgc3RvcEluZGV4XTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIEdyaWQ7XG4gIH0oUHVyZUNvbXBvbmVudCksIF9jbGFzcy5kZWZhdWx0UHJvcHMgPSB7XG4gICAgZGlyZWN0aW9uOiAnbHRyJyxcbiAgICBpdGVtRGF0YTogdW5kZWZpbmVkLFxuICAgIHVzZUlzU2Nyb2xsaW5nOiBmYWxzZVxuICB9LCBfdGVtcDtcbn1cblxudmFyIHZhbGlkYXRlU2hhcmVkUHJvcHMgPSBmdW5jdGlvbiB2YWxpZGF0ZVNoYXJlZFByb3BzKF9yZWY1LCBfcmVmNikge1xuICB2YXIgY2hpbGRyZW4gPSBfcmVmNS5jaGlsZHJlbixcbiAgICAgIGRpcmVjdGlvbiA9IF9yZWY1LmRpcmVjdGlvbixcbiAgICAgIGhlaWdodCA9IF9yZWY1LmhlaWdodCxcbiAgICAgIGlubmVyVGFnTmFtZSA9IF9yZWY1LmlubmVyVGFnTmFtZSxcbiAgICAgIG91dGVyVGFnTmFtZSA9IF9yZWY1Lm91dGVyVGFnTmFtZSxcbiAgICAgIG92ZXJzY2FuQ29sdW1uc0NvdW50ID0gX3JlZjUub3ZlcnNjYW5Db2x1bW5zQ291bnQsXG4gICAgICBvdmVyc2NhbkNvdW50ID0gX3JlZjUub3ZlcnNjYW5Db3VudCxcbiAgICAgIG92ZXJzY2FuUm93c0NvdW50ID0gX3JlZjUub3ZlcnNjYW5Sb3dzQ291bnQsXG4gICAgICB3aWR0aCA9IF9yZWY1LndpZHRoO1xuICB2YXIgaW5zdGFuY2UgPSBfcmVmNi5pbnN0YW5jZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICh0eXBlb2Ygb3ZlcnNjYW5Db3VudCA9PT0gJ251bWJlcicpIHtcbiAgICAgIGlmIChkZXZXYXJuaW5nc092ZXJzY2FuQ291bnQgJiYgIWRldldhcm5pbmdzT3ZlcnNjYW5Db3VudC5oYXMoaW5zdGFuY2UpKSB7XG4gICAgICAgIGRldldhcm5pbmdzT3ZlcnNjYW5Db3VudC5hZGQoaW5zdGFuY2UpO1xuICAgICAgICBjb25zb2xlLndhcm4oJ1RoZSBvdmVyc2NhbkNvdW50IHByb3AgaGFzIGJlZW4gZGVwcmVjYXRlZC4gJyArICdQbGVhc2UgdXNlIHRoZSBvdmVyc2NhbkNvbHVtbkNvdW50IGFuZCBvdmVyc2NhblJvd0NvdW50IHByb3BzIGluc3RlYWQuJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvdmVyc2NhbkNvbHVtbnNDb3VudCA9PT0gJ251bWJlcicgfHwgdHlwZW9mIG92ZXJzY2FuUm93c0NvdW50ID09PSAnbnVtYmVyJykge1xuICAgICAgaWYgKGRldldhcm5pbmdzT3ZlcnNjYW5Sb3dzQ29sdW1uc0NvdW50ICYmICFkZXZXYXJuaW5nc092ZXJzY2FuUm93c0NvbHVtbnNDb3VudC5oYXMoaW5zdGFuY2UpKSB7XG4gICAgICAgIGRldldhcm5pbmdzT3ZlcnNjYW5Sb3dzQ29sdW1uc0NvdW50LmFkZChpbnN0YW5jZSk7XG4gICAgICAgIGNvbnNvbGUud2FybignVGhlIG92ZXJzY2FuQ29sdW1uc0NvdW50IGFuZCBvdmVyc2NhblJvd3NDb3VudCBwcm9wcyBoYXZlIGJlZW4gZGVwcmVjYXRlZC4gJyArICdQbGVhc2UgdXNlIHRoZSBvdmVyc2NhbkNvbHVtbkNvdW50IGFuZCBvdmVyc2NhblJvd0NvdW50IHByb3BzIGluc3RlYWQuJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGlubmVyVGFnTmFtZSAhPSBudWxsIHx8IG91dGVyVGFnTmFtZSAhPSBudWxsKSB7XG4gICAgICBpZiAoZGV2V2FybmluZ3NUYWdOYW1lICYmICFkZXZXYXJuaW5nc1RhZ05hbWUuaGFzKGluc3RhbmNlKSkge1xuICAgICAgICBkZXZXYXJuaW5nc1RhZ05hbWUuYWRkKGluc3RhbmNlKTtcbiAgICAgICAgY29uc29sZS53YXJuKCdUaGUgaW5uZXJUYWdOYW1lIGFuZCBvdXRlclRhZ05hbWUgcHJvcHMgaGF2ZSBiZWVuIGRlcHJlY2F0ZWQuICcgKyAnUGxlYXNlIHVzZSB0aGUgaW5uZXJFbGVtZW50VHlwZSBhbmQgb3V0ZXJFbGVtZW50VHlwZSBwcm9wcyBpbnN0ZWFkLicpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjaGlsZHJlbiA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBFcnJvcignQW4gaW52YWxpZCBcImNoaWxkcmVuXCIgcHJvcCBoYXMgYmVlbiBzcGVjaWZpZWQuICcgKyAnVmFsdWUgc2hvdWxkIGJlIGEgUmVhY3QgY29tcG9uZW50LiAnICsgKFwiXFxcIlwiICsgKGNoaWxkcmVuID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIGNoaWxkcmVuKSArIFwiXFxcIiB3YXMgc3BlY2lmaWVkLlwiKSk7XG4gICAgfVxuXG4gICAgc3dpdGNoIChkaXJlY3Rpb24pIHtcbiAgICAgIGNhc2UgJ2x0cic6XG4gICAgICBjYXNlICdydGwnOlxuICAgICAgICAvLyBWYWxpZCB2YWx1ZXNcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IEVycm9yKCdBbiBpbnZhbGlkIFwiZGlyZWN0aW9uXCIgcHJvcCBoYXMgYmVlbiBzcGVjaWZpZWQuICcgKyAnVmFsdWUgc2hvdWxkIGJlIGVpdGhlciBcImx0clwiIG9yIFwicnRsXCIuICcgKyAoXCJcXFwiXCIgKyBkaXJlY3Rpb24gKyBcIlxcXCIgd2FzIHNwZWNpZmllZC5cIikpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygd2lkdGggIT09ICdudW1iZXInKSB7XG4gICAgICB0aHJvdyBFcnJvcignQW4gaW52YWxpZCBcIndpZHRoXCIgcHJvcCBoYXMgYmVlbiBzcGVjaWZpZWQuICcgKyAnR3JpZHMgbXVzdCBzcGVjaWZ5IGEgbnVtYmVyIGZvciB3aWR0aC4gJyArIChcIlxcXCJcIiArICh3aWR0aCA9PT0gbnVsbCA/ICdudWxsJyA6IHR5cGVvZiB3aWR0aCkgKyBcIlxcXCIgd2FzIHNwZWNpZmllZC5cIikpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgaGVpZ2h0ICE9PSAnbnVtYmVyJykge1xuICAgICAgdGhyb3cgRXJyb3IoJ0FuIGludmFsaWQgXCJoZWlnaHRcIiBwcm9wIGhhcyBiZWVuIHNwZWNpZmllZC4gJyArICdHcmlkcyBtdXN0IHNwZWNpZnkgYSBudW1iZXIgZm9yIGhlaWdodC4gJyArIChcIlxcXCJcIiArIChoZWlnaHQgPT09IG51bGwgPyAnbnVsbCcgOiB0eXBlb2YgaGVpZ2h0KSArIFwiXFxcIiB3YXMgc3BlY2lmaWVkLlwiKSk7XG4gICAgfVxuICB9XG59O1xuXG52YXIgREVGQVVMVF9FU1RJTUFURURfSVRFTV9TSVpFID0gNTA7XG5cbnZhciBnZXRFc3RpbWF0ZWRUb3RhbEhlaWdodCA9IGZ1bmN0aW9uIGdldEVzdGltYXRlZFRvdGFsSGVpZ2h0KF9yZWYsIF9yZWYyKSB7XG4gIHZhciByb3dDb3VudCA9IF9yZWYucm93Q291bnQ7XG4gIHZhciByb3dNZXRhZGF0YU1hcCA9IF9yZWYyLnJvd01ldGFkYXRhTWFwLFxuICAgICAgZXN0aW1hdGVkUm93SGVpZ2h0ID0gX3JlZjIuZXN0aW1hdGVkUm93SGVpZ2h0LFxuICAgICAgbGFzdE1lYXN1cmVkUm93SW5kZXggPSBfcmVmMi5sYXN0TWVhc3VyZWRSb3dJbmRleDtcbiAgdmFyIHRvdGFsU2l6ZU9mTWVhc3VyZWRSb3dzID0gMDsgLy8gRWRnZSBjYXNlIGNoZWNrIGZvciB3aGVuIHRoZSBudW1iZXIgb2YgaXRlbXMgZGVjcmVhc2VzIHdoaWxlIGEgc2Nyb2xsIGlzIGluIHByb2dyZXNzLlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vYnZhdWdobi9yZWFjdC13aW5kb3cvcHVsbC8xMzhcblxuICBpZiAobGFzdE1lYXN1cmVkUm93SW5kZXggPj0gcm93Q291bnQpIHtcbiAgICBsYXN0TWVhc3VyZWRSb3dJbmRleCA9IHJvd0NvdW50IC0gMTtcbiAgfVxuXG4gIGlmIChsYXN0TWVhc3VyZWRSb3dJbmRleCA+PSAwKSB7XG4gICAgdmFyIGl0ZW1NZXRhZGF0YSA9IHJvd01ldGFkYXRhTWFwW2xhc3RNZWFzdXJlZFJvd0luZGV4XTtcbiAgICB0b3RhbFNpemVPZk1lYXN1cmVkUm93cyA9IGl0ZW1NZXRhZGF0YS5vZmZzZXQgKyBpdGVtTWV0YWRhdGEuc2l6ZTtcbiAgfVxuXG4gIHZhciBudW1Vbm1lYXN1cmVkSXRlbXMgPSByb3dDb3VudCAtIGxhc3RNZWFzdXJlZFJvd0luZGV4IC0gMTtcbiAgdmFyIHRvdGFsU2l6ZU9mVW5tZWFzdXJlZEl0ZW1zID0gbnVtVW5tZWFzdXJlZEl0ZW1zICogZXN0aW1hdGVkUm93SGVpZ2h0O1xuICByZXR1cm4gdG90YWxTaXplT2ZNZWFzdXJlZFJvd3MgKyB0b3RhbFNpemVPZlVubWVhc3VyZWRJdGVtcztcbn07XG5cbnZhciBnZXRFc3RpbWF0ZWRUb3RhbFdpZHRoID0gZnVuY3Rpb24gZ2V0RXN0aW1hdGVkVG90YWxXaWR0aChfcmVmMywgX3JlZjQpIHtcbiAgdmFyIGNvbHVtbkNvdW50ID0gX3JlZjMuY29sdW1uQ291bnQ7XG4gIHZhciBjb2x1bW5NZXRhZGF0YU1hcCA9IF9yZWY0LmNvbHVtbk1ldGFkYXRhTWFwLFxuICAgICAgZXN0aW1hdGVkQ29sdW1uV2lkdGggPSBfcmVmNC5lc3RpbWF0ZWRDb2x1bW5XaWR0aCxcbiAgICAgIGxhc3RNZWFzdXJlZENvbHVtbkluZGV4ID0gX3JlZjQubGFzdE1lYXN1cmVkQ29sdW1uSW5kZXg7XG4gIHZhciB0b3RhbFNpemVPZk1lYXN1cmVkUm93cyA9IDA7IC8vIEVkZ2UgY2FzZSBjaGVjayBmb3Igd2hlbiB0aGUgbnVtYmVyIG9mIGl0ZW1zIGRlY3JlYXNlcyB3aGlsZSBhIHNjcm9sbCBpcyBpbiBwcm9ncmVzcy5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2J2YXVnaG4vcmVhY3Qtd2luZG93L3B1bGwvMTM4XG5cbiAgaWYgKGxhc3RNZWFzdXJlZENvbHVtbkluZGV4ID49IGNvbHVtbkNvdW50KSB7XG4gICAgbGFzdE1lYXN1cmVkQ29sdW1uSW5kZXggPSBjb2x1bW5Db3VudCAtIDE7XG4gIH1cblxuICBpZiAobGFzdE1lYXN1cmVkQ29sdW1uSW5kZXggPj0gMCkge1xuICAgIHZhciBpdGVtTWV0YWRhdGEgPSBjb2x1bW5NZXRhZGF0YU1hcFtsYXN0TWVhc3VyZWRDb2x1bW5JbmRleF07XG4gICAgdG90YWxTaXplT2ZNZWFzdXJlZFJvd3MgPSBpdGVtTWV0YWRhdGEub2Zmc2V0ICsgaXRlbU1ldGFkYXRhLnNpemU7XG4gIH1cblxuICB2YXIgbnVtVW5tZWFzdXJlZEl0ZW1zID0gY29sdW1uQ291bnQgLSBsYXN0TWVhc3VyZWRDb2x1bW5JbmRleCAtIDE7XG4gIHZhciB0b3RhbFNpemVPZlVubWVhc3VyZWRJdGVtcyA9IG51bVVubWVhc3VyZWRJdGVtcyAqIGVzdGltYXRlZENvbHVtbldpZHRoO1xuICByZXR1cm4gdG90YWxTaXplT2ZNZWFzdXJlZFJvd3MgKyB0b3RhbFNpemVPZlVubWVhc3VyZWRJdGVtcztcbn07XG5cbnZhciBnZXRJdGVtTWV0YWRhdGEgPSBmdW5jdGlvbiBnZXRJdGVtTWV0YWRhdGEoaXRlbVR5cGUsIHByb3BzLCBpbmRleCwgaW5zdGFuY2VQcm9wcykge1xuICB2YXIgaXRlbU1ldGFkYXRhTWFwLCBpdGVtU2l6ZSwgbGFzdE1lYXN1cmVkSW5kZXg7XG5cbiAgaWYgKGl0ZW1UeXBlID09PSAnY29sdW1uJykge1xuICAgIGl0ZW1NZXRhZGF0YU1hcCA9IGluc3RhbmNlUHJvcHMuY29sdW1uTWV0YWRhdGFNYXA7XG4gICAgaXRlbVNpemUgPSBwcm9wcy5jb2x1bW5XaWR0aDtcbiAgICBsYXN0TWVhc3VyZWRJbmRleCA9IGluc3RhbmNlUHJvcHMubGFzdE1lYXN1cmVkQ29sdW1uSW5kZXg7XG4gIH0gZWxzZSB7XG4gICAgaXRlbU1ldGFkYXRhTWFwID0gaW5zdGFuY2VQcm9wcy5yb3dNZXRhZGF0YU1hcDtcbiAgICBpdGVtU2l6ZSA9IHByb3BzLnJvd0hlaWdodDtcbiAgICBsYXN0TWVhc3VyZWRJbmRleCA9IGluc3RhbmNlUHJvcHMubGFzdE1lYXN1cmVkUm93SW5kZXg7XG4gIH1cblxuICBpZiAoaW5kZXggPiBsYXN0TWVhc3VyZWRJbmRleCkge1xuICAgIHZhciBvZmZzZXQgPSAwO1xuXG4gICAgaWYgKGxhc3RNZWFzdXJlZEluZGV4ID49IDApIHtcbiAgICAgIHZhciBpdGVtTWV0YWRhdGEgPSBpdGVtTWV0YWRhdGFNYXBbbGFzdE1lYXN1cmVkSW5kZXhdO1xuICAgICAgb2Zmc2V0ID0gaXRlbU1ldGFkYXRhLm9mZnNldCArIGl0ZW1NZXRhZGF0YS5zaXplO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSBsYXN0TWVhc3VyZWRJbmRleCArIDE7IGkgPD0gaW5kZXg7IGkrKykge1xuICAgICAgdmFyIHNpemUgPSBpdGVtU2l6ZShpKTtcbiAgICAgIGl0ZW1NZXRhZGF0YU1hcFtpXSA9IHtcbiAgICAgICAgb2Zmc2V0OiBvZmZzZXQsXG4gICAgICAgIHNpemU6IHNpemVcbiAgICAgIH07XG4gICAgICBvZmZzZXQgKz0gc2l6ZTtcbiAgICB9XG5cbiAgICBpZiAoaXRlbVR5cGUgPT09ICdjb2x1bW4nKSB7XG4gICAgICBpbnN0YW5jZVByb3BzLmxhc3RNZWFzdXJlZENvbHVtbkluZGV4ID0gaW5kZXg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluc3RhbmNlUHJvcHMubGFzdE1lYXN1cmVkUm93SW5kZXggPSBpbmRleDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaXRlbU1ldGFkYXRhTWFwW2luZGV4XTtcbn07XG5cbnZhciBmaW5kTmVhcmVzdEl0ZW0gPSBmdW5jdGlvbiBmaW5kTmVhcmVzdEl0ZW0oaXRlbVR5cGUsIHByb3BzLCBpbnN0YW5jZVByb3BzLCBvZmZzZXQpIHtcbiAgdmFyIGl0ZW1NZXRhZGF0YU1hcCwgbGFzdE1lYXN1cmVkSW5kZXg7XG5cbiAgaWYgKGl0ZW1UeXBlID09PSAnY29sdW1uJykge1xuICAgIGl0ZW1NZXRhZGF0YU1hcCA9IGluc3RhbmNlUHJvcHMuY29sdW1uTWV0YWRhdGFNYXA7XG4gICAgbGFzdE1lYXN1cmVkSW5kZXggPSBpbnN0YW5jZVByb3BzLmxhc3RNZWFzdXJlZENvbHVtbkluZGV4O1xuICB9IGVsc2Uge1xuICAgIGl0ZW1NZXRhZGF0YU1hcCA9IGluc3RhbmNlUHJvcHMucm93TWV0YWRhdGFNYXA7XG4gICAgbGFzdE1lYXN1cmVkSW5kZXggPSBpbnN0YW5jZVByb3BzLmxhc3RNZWFzdXJlZFJvd0luZGV4O1xuICB9XG5cbiAgdmFyIGxhc3RNZWFzdXJlZEl0ZW1PZmZzZXQgPSBsYXN0TWVhc3VyZWRJbmRleCA+IDAgPyBpdGVtTWV0YWRhdGFNYXBbbGFzdE1lYXN1cmVkSW5kZXhdLm9mZnNldCA6IDA7XG5cbiAgaWYgKGxhc3RNZWFzdXJlZEl0ZW1PZmZzZXQgPj0gb2Zmc2V0KSB7XG4gICAgLy8gSWYgd2UndmUgYWxyZWFkeSBtZWFzdXJlZCBpdGVtcyB3aXRoaW4gdGhpcyByYW5nZSBqdXN0IHVzZSBhIGJpbmFyeSBzZWFyY2ggYXMgaXQncyBmYXN0ZXIuXG4gICAgcmV0dXJuIGZpbmROZWFyZXN0SXRlbUJpbmFyeVNlYXJjaChpdGVtVHlwZSwgcHJvcHMsIGluc3RhbmNlUHJvcHMsIGxhc3RNZWFzdXJlZEluZGV4LCAwLCBvZmZzZXQpO1xuICB9IGVsc2Uge1xuICAgIC8vIElmIHdlIGhhdmVuJ3QgeWV0IG1lYXN1cmVkIHRoaXMgaGlnaCwgZmFsbGJhY2sgdG8gYW4gZXhwb25lbnRpYWwgc2VhcmNoIHdpdGggYW4gaW5uZXIgYmluYXJ5IHNlYXJjaC5cbiAgICAvLyBUaGUgZXhwb25lbnRpYWwgc2VhcmNoIGF2b2lkcyBwcmUtY29tcHV0aW5nIHNpemVzIGZvciB0aGUgZnVsbCBzZXQgb2YgaXRlbXMgYXMgYSBiaW5hcnkgc2VhcmNoIHdvdWxkLlxuICAgIC8vIFRoZSBvdmVyYWxsIGNvbXBsZXhpdHkgZm9yIHRoaXMgYXBwcm9hY2ggaXMgTyhsb2cgbikuXG4gICAgcmV0dXJuIGZpbmROZWFyZXN0SXRlbUV4cG9uZW50aWFsU2VhcmNoKGl0ZW1UeXBlLCBwcm9wcywgaW5zdGFuY2VQcm9wcywgTWF0aC5tYXgoMCwgbGFzdE1lYXN1cmVkSW5kZXgpLCBvZmZzZXQpO1xuICB9XG59O1xuXG52YXIgZmluZE5lYXJlc3RJdGVtQmluYXJ5U2VhcmNoID0gZnVuY3Rpb24gZmluZE5lYXJlc3RJdGVtQmluYXJ5U2VhcmNoKGl0ZW1UeXBlLCBwcm9wcywgaW5zdGFuY2VQcm9wcywgaGlnaCwgbG93LCBvZmZzZXQpIHtcbiAgd2hpbGUgKGxvdyA8PSBoaWdoKSB7XG4gICAgdmFyIG1pZGRsZSA9IGxvdyArIE1hdGguZmxvb3IoKGhpZ2ggLSBsb3cpIC8gMik7XG4gICAgdmFyIGN1cnJlbnRPZmZzZXQgPSBnZXRJdGVtTWV0YWRhdGEoaXRlbVR5cGUsIHByb3BzLCBtaWRkbGUsIGluc3RhbmNlUHJvcHMpLm9mZnNldDtcblxuICAgIGlmIChjdXJyZW50T2Zmc2V0ID09PSBvZmZzZXQpIHtcbiAgICAgIHJldHVybiBtaWRkbGU7XG4gICAgfSBlbHNlIGlmIChjdXJyZW50T2Zmc2V0IDwgb2Zmc2V0KSB7XG4gICAgICBsb3cgPSBtaWRkbGUgKyAxO1xuICAgIH0gZWxzZSBpZiAoY3VycmVudE9mZnNldCA+IG9mZnNldCkge1xuICAgICAgaGlnaCA9IG1pZGRsZSAtIDE7XG4gICAgfVxuICB9XG5cbiAgaWYgKGxvdyA+IDApIHtcbiAgICByZXR1cm4gbG93IC0gMTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gMDtcbiAgfVxufTtcblxudmFyIGZpbmROZWFyZXN0SXRlbUV4cG9uZW50aWFsU2VhcmNoID0gZnVuY3Rpb24gZmluZE5lYXJlc3RJdGVtRXhwb25lbnRpYWxTZWFyY2goaXRlbVR5cGUsIHByb3BzLCBpbnN0YW5jZVByb3BzLCBpbmRleCwgb2Zmc2V0KSB7XG4gIHZhciBpdGVtQ291bnQgPSBpdGVtVHlwZSA9PT0gJ2NvbHVtbicgPyBwcm9wcy5jb2x1bW5Db3VudCA6IHByb3BzLnJvd0NvdW50O1xuICB2YXIgaW50ZXJ2YWwgPSAxO1xuXG4gIHdoaWxlIChpbmRleCA8IGl0ZW1Db3VudCAmJiBnZXRJdGVtTWV0YWRhdGEoaXRlbVR5cGUsIHByb3BzLCBpbmRleCwgaW5zdGFuY2VQcm9wcykub2Zmc2V0IDwgb2Zmc2V0KSB7XG4gICAgaW5kZXggKz0gaW50ZXJ2YWw7XG4gICAgaW50ZXJ2YWwgKj0gMjtcbiAgfVxuXG4gIHJldHVybiBmaW5kTmVhcmVzdEl0ZW1CaW5hcnlTZWFyY2goaXRlbVR5cGUsIHByb3BzLCBpbnN0YW5jZVByb3BzLCBNYXRoLm1pbihpbmRleCwgaXRlbUNvdW50IC0gMSksIE1hdGguZmxvb3IoaW5kZXggLyAyKSwgb2Zmc2V0KTtcbn07XG5cbnZhciBnZXRPZmZzZXRGb3JJbmRleEFuZEFsaWdubWVudCA9IGZ1bmN0aW9uIGdldE9mZnNldEZvckluZGV4QW5kQWxpZ25tZW50KGl0ZW1UeXBlLCBwcm9wcywgaW5kZXgsIGFsaWduLCBzY3JvbGxPZmZzZXQsIGluc3RhbmNlUHJvcHMsIHNjcm9sbGJhclNpemUpIHtcbiAgdmFyIHNpemUgPSBpdGVtVHlwZSA9PT0gJ2NvbHVtbicgPyBwcm9wcy53aWR0aCA6IHByb3BzLmhlaWdodDtcbiAgdmFyIGl0ZW1NZXRhZGF0YSA9IGdldEl0ZW1NZXRhZGF0YShpdGVtVHlwZSwgcHJvcHMsIGluZGV4LCBpbnN0YW5jZVByb3BzKTsgLy8gR2V0IGVzdGltYXRlZCB0b3RhbCBzaXplIGFmdGVyIEl0ZW1NZXRhZGF0YSBpcyBjb21wdXRlZCxcbiAgLy8gVG8gZW5zdXJlIGl0IHJlZmxlY3RzIGFjdHVhbCBtZWFzdXJlbWVudHMgaW5zdGVhZCBvZiBqdXN0IGVzdGltYXRlcy5cblxuICB2YXIgZXN0aW1hdGVkVG90YWxTaXplID0gaXRlbVR5cGUgPT09ICdjb2x1bW4nID8gZ2V0RXN0aW1hdGVkVG90YWxXaWR0aChwcm9wcywgaW5zdGFuY2VQcm9wcykgOiBnZXRFc3RpbWF0ZWRUb3RhbEhlaWdodChwcm9wcywgaW5zdGFuY2VQcm9wcyk7XG4gIHZhciBtYXhPZmZzZXQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihlc3RpbWF0ZWRUb3RhbFNpemUgLSBzaXplLCBpdGVtTWV0YWRhdGEub2Zmc2V0KSk7XG4gIHZhciBtaW5PZmZzZXQgPSBNYXRoLm1heCgwLCBpdGVtTWV0YWRhdGEub2Zmc2V0IC0gc2l6ZSArIHNjcm9sbGJhclNpemUgKyBpdGVtTWV0YWRhdGEuc2l6ZSk7XG5cbiAgaWYgKGFsaWduID09PSAnc21hcnQnKSB7XG4gICAgaWYgKHNjcm9sbE9mZnNldCA+PSBtaW5PZmZzZXQgLSBzaXplICYmIHNjcm9sbE9mZnNldCA8PSBtYXhPZmZzZXQgKyBzaXplKSB7XG4gICAgICBhbGlnbiA9ICdhdXRvJztcbiAgICB9IGVsc2Uge1xuICAgICAgYWxpZ24gPSAnY2VudGVyJztcbiAgICB9XG4gIH1cblxuICBzd2l0Y2ggKGFsaWduKSB7XG4gICAgY2FzZSAnc3RhcnQnOlxuICAgICAgcmV0dXJuIG1heE9mZnNldDtcblxuICAgIGNhc2UgJ2VuZCc6XG4gICAgICByZXR1cm4gbWluT2Zmc2V0O1xuXG4gICAgY2FzZSAnY2VudGVyJzpcbiAgICAgIHJldHVybiBNYXRoLnJvdW5kKG1pbk9mZnNldCArIChtYXhPZmZzZXQgLSBtaW5PZmZzZXQpIC8gMik7XG5cbiAgICBjYXNlICdhdXRvJzpcbiAgICBkZWZhdWx0OlxuICAgICAgaWYgKHNjcm9sbE9mZnNldCA+PSBtaW5PZmZzZXQgJiYgc2Nyb2xsT2Zmc2V0IDw9IG1heE9mZnNldCkge1xuICAgICAgICByZXR1cm4gc2Nyb2xsT2Zmc2V0O1xuICAgICAgfSBlbHNlIGlmIChtaW5PZmZzZXQgPiBtYXhPZmZzZXQpIHtcbiAgICAgICAgLy8gQmVjYXVzZSB3ZSBvbmx5IHRha2UgaW50byBhY2NvdW50IHRoZSBzY3JvbGxiYXIgc2l6ZSB3aGVuIGNhbGN1bGF0aW5nIG1pbk9mZnNldFxuICAgICAgICAvLyB0aGlzIHZhbHVlIGNhbiBiZSBsYXJnZXIgdGhhbiBtYXhPZmZzZXQgd2hlbiBhdCB0aGUgZW5kIG9mIHRoZSBsaXN0XG4gICAgICAgIHJldHVybiBtaW5PZmZzZXQ7XG4gICAgICB9IGVsc2UgaWYgKHNjcm9sbE9mZnNldCA8IG1pbk9mZnNldCkge1xuICAgICAgICByZXR1cm4gbWluT2Zmc2V0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG1heE9mZnNldDtcbiAgICAgIH1cblxuICB9XG59O1xuXG52YXIgVmFyaWFibGVTaXplR3JpZCA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVHcmlkQ29tcG9uZW50KHtcbiAgZ2V0Q29sdW1uT2Zmc2V0OiBmdW5jdGlvbiBnZXRDb2x1bW5PZmZzZXQocHJvcHMsIGluZGV4LCBpbnN0YW5jZVByb3BzKSB7XG4gICAgcmV0dXJuIGdldEl0ZW1NZXRhZGF0YSgnY29sdW1uJywgcHJvcHMsIGluZGV4LCBpbnN0YW5jZVByb3BzKS5vZmZzZXQ7XG4gIH0sXG4gIGdldENvbHVtblN0YXJ0SW5kZXhGb3JPZmZzZXQ6IGZ1bmN0aW9uIGdldENvbHVtblN0YXJ0SW5kZXhGb3JPZmZzZXQocHJvcHMsIHNjcm9sbExlZnQsIGluc3RhbmNlUHJvcHMpIHtcbiAgICByZXR1cm4gZmluZE5lYXJlc3RJdGVtKCdjb2x1bW4nLCBwcm9wcywgaW5zdGFuY2VQcm9wcywgc2Nyb2xsTGVmdCk7XG4gIH0sXG4gIGdldENvbHVtblN0b3BJbmRleEZvclN0YXJ0SW5kZXg6IGZ1bmN0aW9uIGdldENvbHVtblN0b3BJbmRleEZvclN0YXJ0SW5kZXgocHJvcHMsIHN0YXJ0SW5kZXgsIHNjcm9sbExlZnQsIGluc3RhbmNlUHJvcHMpIHtcbiAgICB2YXIgY29sdW1uQ291bnQgPSBwcm9wcy5jb2x1bW5Db3VudCxcbiAgICAgICAgd2lkdGggPSBwcm9wcy53aWR0aDtcbiAgICB2YXIgaXRlbU1ldGFkYXRhID0gZ2V0SXRlbU1ldGFkYXRhKCdjb2x1bW4nLCBwcm9wcywgc3RhcnRJbmRleCwgaW5zdGFuY2VQcm9wcyk7XG4gICAgdmFyIG1heE9mZnNldCA9IHNjcm9sbExlZnQgKyB3aWR0aDtcbiAgICB2YXIgb2Zmc2V0ID0gaXRlbU1ldGFkYXRhLm9mZnNldCArIGl0ZW1NZXRhZGF0YS5zaXplO1xuICAgIHZhciBzdG9wSW5kZXggPSBzdGFydEluZGV4O1xuXG4gICAgd2hpbGUgKHN0b3BJbmRleCA8IGNvbHVtbkNvdW50IC0gMSAmJiBvZmZzZXQgPCBtYXhPZmZzZXQpIHtcbiAgICAgIHN0b3BJbmRleCsrO1xuICAgICAgb2Zmc2V0ICs9IGdldEl0ZW1NZXRhZGF0YSgnY29sdW1uJywgcHJvcHMsIHN0b3BJbmRleCwgaW5zdGFuY2VQcm9wcykuc2l6ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RvcEluZGV4O1xuICB9LFxuICBnZXRDb2x1bW5XaWR0aDogZnVuY3Rpb24gZ2V0Q29sdW1uV2lkdGgocHJvcHMsIGluZGV4LCBpbnN0YW5jZVByb3BzKSB7XG4gICAgcmV0dXJuIGluc3RhbmNlUHJvcHMuY29sdW1uTWV0YWRhdGFNYXBbaW5kZXhdLnNpemU7XG4gIH0sXG4gIGdldEVzdGltYXRlZFRvdGFsSGVpZ2h0OiBnZXRFc3RpbWF0ZWRUb3RhbEhlaWdodCxcbiAgZ2V0RXN0aW1hdGVkVG90YWxXaWR0aDogZ2V0RXN0aW1hdGVkVG90YWxXaWR0aCxcbiAgZ2V0T2Zmc2V0Rm9yQ29sdW1uQW5kQWxpZ25tZW50OiBmdW5jdGlvbiBnZXRPZmZzZXRGb3JDb2x1bW5BbmRBbGlnbm1lbnQocHJvcHMsIGluZGV4LCBhbGlnbiwgc2Nyb2xsT2Zmc2V0LCBpbnN0YW5jZVByb3BzLCBzY3JvbGxiYXJTaXplKSB7XG4gICAgcmV0dXJuIGdldE9mZnNldEZvckluZGV4QW5kQWxpZ25tZW50KCdjb2x1bW4nLCBwcm9wcywgaW5kZXgsIGFsaWduLCBzY3JvbGxPZmZzZXQsIGluc3RhbmNlUHJvcHMsIHNjcm9sbGJhclNpemUpO1xuICB9LFxuICBnZXRPZmZzZXRGb3JSb3dBbmRBbGlnbm1lbnQ6IGZ1bmN0aW9uIGdldE9mZnNldEZvclJvd0FuZEFsaWdubWVudChwcm9wcywgaW5kZXgsIGFsaWduLCBzY3JvbGxPZmZzZXQsIGluc3RhbmNlUHJvcHMsIHNjcm9sbGJhclNpemUpIHtcbiAgICByZXR1cm4gZ2V0T2Zmc2V0Rm9ySW5kZXhBbmRBbGlnbm1lbnQoJ3JvdycsIHByb3BzLCBpbmRleCwgYWxpZ24sIHNjcm9sbE9mZnNldCwgaW5zdGFuY2VQcm9wcywgc2Nyb2xsYmFyU2l6ZSk7XG4gIH0sXG4gIGdldFJvd09mZnNldDogZnVuY3Rpb24gZ2V0Um93T2Zmc2V0KHByb3BzLCBpbmRleCwgaW5zdGFuY2VQcm9wcykge1xuICAgIHJldHVybiBnZXRJdGVtTWV0YWRhdGEoJ3JvdycsIHByb3BzLCBpbmRleCwgaW5zdGFuY2VQcm9wcykub2Zmc2V0O1xuICB9LFxuICBnZXRSb3dIZWlnaHQ6IGZ1bmN0aW9uIGdldFJvd0hlaWdodChwcm9wcywgaW5kZXgsIGluc3RhbmNlUHJvcHMpIHtcbiAgICByZXR1cm4gaW5zdGFuY2VQcm9wcy5yb3dNZXRhZGF0YU1hcFtpbmRleF0uc2l6ZTtcbiAgfSxcbiAgZ2V0Um93U3RhcnRJbmRleEZvck9mZnNldDogZnVuY3Rpb24gZ2V0Um93U3RhcnRJbmRleEZvck9mZnNldChwcm9wcywgc2Nyb2xsVG9wLCBpbnN0YW5jZVByb3BzKSB7XG4gICAgcmV0dXJuIGZpbmROZWFyZXN0SXRlbSgncm93JywgcHJvcHMsIGluc3RhbmNlUHJvcHMsIHNjcm9sbFRvcCk7XG4gIH0sXG4gIGdldFJvd1N0b3BJbmRleEZvclN0YXJ0SW5kZXg6IGZ1bmN0aW9uIGdldFJvd1N0b3BJbmRleEZvclN0YXJ0SW5kZXgocHJvcHMsIHN0YXJ0SW5kZXgsIHNjcm9sbFRvcCwgaW5zdGFuY2VQcm9wcykge1xuICAgIHZhciByb3dDb3VudCA9IHByb3BzLnJvd0NvdW50LFxuICAgICAgICBoZWlnaHQgPSBwcm9wcy5oZWlnaHQ7XG4gICAgdmFyIGl0ZW1NZXRhZGF0YSA9IGdldEl0ZW1NZXRhZGF0YSgncm93JywgcHJvcHMsIHN0YXJ0SW5kZXgsIGluc3RhbmNlUHJvcHMpO1xuICAgIHZhciBtYXhPZmZzZXQgPSBzY3JvbGxUb3AgKyBoZWlnaHQ7XG4gICAgdmFyIG9mZnNldCA9IGl0ZW1NZXRhZGF0YS5vZmZzZXQgKyBpdGVtTWV0YWRhdGEuc2l6ZTtcbiAgICB2YXIgc3RvcEluZGV4ID0gc3RhcnRJbmRleDtcblxuICAgIHdoaWxlIChzdG9wSW5kZXggPCByb3dDb3VudCAtIDEgJiYgb2Zmc2V0IDwgbWF4T2Zmc2V0KSB7XG4gICAgICBzdG9wSW5kZXgrKztcbiAgICAgIG9mZnNldCArPSBnZXRJdGVtTWV0YWRhdGEoJ3JvdycsIHByb3BzLCBzdG9wSW5kZXgsIGluc3RhbmNlUHJvcHMpLnNpemU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0b3BJbmRleDtcbiAgfSxcbiAgaW5pdEluc3RhbmNlUHJvcHM6IGZ1bmN0aW9uIGluaXRJbnN0YW5jZVByb3BzKHByb3BzLCBpbnN0YW5jZSkge1xuICAgIHZhciBfcmVmNSA9IHByb3BzLFxuICAgICAgICBlc3RpbWF0ZWRDb2x1bW5XaWR0aCA9IF9yZWY1LmVzdGltYXRlZENvbHVtbldpZHRoLFxuICAgICAgICBlc3RpbWF0ZWRSb3dIZWlnaHQgPSBfcmVmNS5lc3RpbWF0ZWRSb3dIZWlnaHQ7XG4gICAgdmFyIGluc3RhbmNlUHJvcHMgPSB7XG4gICAgICBjb2x1bW5NZXRhZGF0YU1hcDoge30sXG4gICAgICBlc3RpbWF0ZWRDb2x1bW5XaWR0aDogZXN0aW1hdGVkQ29sdW1uV2lkdGggfHwgREVGQVVMVF9FU1RJTUFURURfSVRFTV9TSVpFLFxuICAgICAgZXN0aW1hdGVkUm93SGVpZ2h0OiBlc3RpbWF0ZWRSb3dIZWlnaHQgfHwgREVGQVVMVF9FU1RJTUFURURfSVRFTV9TSVpFLFxuICAgICAgbGFzdE1lYXN1cmVkQ29sdW1uSW5kZXg6IC0xLFxuICAgICAgbGFzdE1lYXN1cmVkUm93SW5kZXg6IC0xLFxuICAgICAgcm93TWV0YWRhdGFNYXA6IHt9XG4gICAgfTtcblxuICAgIGluc3RhbmNlLnJlc2V0QWZ0ZXJDb2x1bW5JbmRleCA9IGZ1bmN0aW9uIChjb2x1bW5JbmRleCwgc2hvdWxkRm9yY2VVcGRhdGUpIHtcbiAgICAgIGlmIChzaG91bGRGb3JjZVVwZGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHNob3VsZEZvcmNlVXBkYXRlID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaW5zdGFuY2UucmVzZXRBZnRlckluZGljZXMoe1xuICAgICAgICBjb2x1bW5JbmRleDogY29sdW1uSW5kZXgsXG4gICAgICAgIHNob3VsZEZvcmNlVXBkYXRlOiBzaG91bGRGb3JjZVVwZGF0ZVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGluc3RhbmNlLnJlc2V0QWZ0ZXJSb3dJbmRleCA9IGZ1bmN0aW9uIChyb3dJbmRleCwgc2hvdWxkRm9yY2VVcGRhdGUpIHtcbiAgICAgIGlmIChzaG91bGRGb3JjZVVwZGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHNob3VsZEZvcmNlVXBkYXRlID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaW5zdGFuY2UucmVzZXRBZnRlckluZGljZXMoe1xuICAgICAgICByb3dJbmRleDogcm93SW5kZXgsXG4gICAgICAgIHNob3VsZEZvcmNlVXBkYXRlOiBzaG91bGRGb3JjZVVwZGF0ZVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGluc3RhbmNlLnJlc2V0QWZ0ZXJJbmRpY2VzID0gZnVuY3Rpb24gKF9yZWY2KSB7XG4gICAgICB2YXIgY29sdW1uSW5kZXggPSBfcmVmNi5jb2x1bW5JbmRleCxcbiAgICAgICAgICByb3dJbmRleCA9IF9yZWY2LnJvd0luZGV4LFxuICAgICAgICAgIF9yZWY2JHNob3VsZEZvcmNlVXBkYSA9IF9yZWY2LnNob3VsZEZvcmNlVXBkYXRlLFxuICAgICAgICAgIHNob3VsZEZvcmNlVXBkYXRlID0gX3JlZjYkc2hvdWxkRm9yY2VVcGRhID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZjYkc2hvdWxkRm9yY2VVcGRhO1xuXG4gICAgICBpZiAodHlwZW9mIGNvbHVtbkluZGV4ID09PSAnbnVtYmVyJykge1xuICAgICAgICBpbnN0YW5jZVByb3BzLmxhc3RNZWFzdXJlZENvbHVtbkluZGV4ID0gTWF0aC5taW4oaW5zdGFuY2VQcm9wcy5sYXN0TWVhc3VyZWRDb2x1bW5JbmRleCwgY29sdW1uSW5kZXggLSAxKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiByb3dJbmRleCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgaW5zdGFuY2VQcm9wcy5sYXN0TWVhc3VyZWRSb3dJbmRleCA9IE1hdGgubWluKGluc3RhbmNlUHJvcHMubGFzdE1lYXN1cmVkUm93SW5kZXgsIHJvd0luZGV4IC0gMSk7XG4gICAgICB9IC8vIFdlIGNvdWxkIHBvdGVudGlhbGx5IG9wdGltaXplIGZ1cnRoZXIgYnkgb25seSBldmljdGluZyBzdHlsZXMgYWZ0ZXIgdGhpcyBpbmRleCxcbiAgICAgIC8vIEJ1dCBzaW5jZSBzdHlsZXMgYXJlIG9ubHkgY2FjaGVkIHdoaWxlIHNjcm9sbGluZyBpcyBpbiBwcm9ncmVzcy1cbiAgICAgIC8vIEl0IHNlZW1zIGFuIHVubmVjZXNzYXJ5IG9wdGltaXphdGlvbi5cbiAgICAgIC8vIEl0J3MgdW5saWtlbHkgdGhhdCByZXNldEFmdGVySW5kZXgoKSB3aWxsIGJlIGNhbGxlZCB3aGlsZSBhIHVzZXIgaXMgc2Nyb2xsaW5nLlxuXG5cbiAgICAgIGluc3RhbmNlLl9nZXRJdGVtU3R5bGVDYWNoZSgtMSk7XG5cbiAgICAgIGlmIChzaG91bGRGb3JjZVVwZGF0ZSkge1xuICAgICAgICBpbnN0YW5jZS5mb3JjZVVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gaW5zdGFuY2VQcm9wcztcbiAgfSxcbiAgc2hvdWxkUmVzZXRTdHlsZUNhY2hlT25JdGVtU2l6ZUNoYW5nZTogZmFsc2UsXG4gIHZhbGlkYXRlUHJvcHM6IGZ1bmN0aW9uIHZhbGlkYXRlUHJvcHMoX3JlZjcpIHtcbiAgICB2YXIgY29sdW1uV2lkdGggPSBfcmVmNy5jb2x1bW5XaWR0aCxcbiAgICAgICAgcm93SGVpZ2h0ID0gX3JlZjcucm93SGVpZ2h0O1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICh0eXBlb2YgY29sdW1uV2lkdGggIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ0FuIGludmFsaWQgXCJjb2x1bW5XaWR0aFwiIHByb3AgaGFzIGJlZW4gc3BlY2lmaWVkLiAnICsgJ1ZhbHVlIHNob3VsZCBiZSBhIGZ1bmN0aW9uLiAnICsgKFwiXFxcIlwiICsgKGNvbHVtbldpZHRoID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIGNvbHVtbldpZHRoKSArIFwiXFxcIiB3YXMgc3BlY2lmaWVkLlwiKSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiByb3dIZWlnaHQgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ0FuIGludmFsaWQgXCJyb3dIZWlnaHRcIiBwcm9wIGhhcyBiZWVuIHNwZWNpZmllZC4gJyArICdWYWx1ZSBzaG91bGQgYmUgYSBmdW5jdGlvbi4gJyArIChcIlxcXCJcIiArIChyb3dIZWlnaHQgPT09IG51bGwgPyAnbnVsbCcgOiB0eXBlb2Ygcm93SGVpZ2h0KSArIFwiXFxcIiB3YXMgc3BlY2lmaWVkLlwiKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59KTtcblxudmFyIElTX1NDUk9MTElOR19ERUJPVU5DRV9JTlRFUlZBTCQxID0gMTUwO1xuXG52YXIgZGVmYXVsdEl0ZW1LZXkkMSA9IGZ1bmN0aW9uIGRlZmF1bHRJdGVtS2V5KGluZGV4LCBkYXRhKSB7XG4gIHJldHVybiBpbmRleDtcbn07IC8vIEluIERFViBtb2RlLCB0aGlzIFNldCBoZWxwcyB1cyBvbmx5IGxvZyBhIHdhcm5pbmcgb25jZSBwZXIgY29tcG9uZW50IGluc3RhbmNlLlxuLy8gVGhpcyBhdm9pZHMgc3BhbW1pbmcgdGhlIGNvbnNvbGUgZXZlcnkgdGltZSBhIHJlbmRlciBoYXBwZW5zLlxuXG5cbnZhciBkZXZXYXJuaW5nc0RpcmVjdGlvbiA9IG51bGw7XG52YXIgZGV2V2FybmluZ3NUYWdOYW1lJDEgPSBudWxsO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5XZWFrU2V0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIGRldldhcm5pbmdzRGlyZWN0aW9uID1cbiAgICAvKiNfX1BVUkVfXyovXG4gICAgbmV3IFdlYWtTZXQoKTtcbiAgICBkZXZXYXJuaW5nc1RhZ05hbWUkMSA9XG4gICAgLyojX19QVVJFX18qL1xuICAgIG5ldyBXZWFrU2V0KCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlTGlzdENvbXBvbmVudChfcmVmKSB7XG4gIHZhciBfY2xhc3MsIF90ZW1wO1xuXG4gIHZhciBnZXRJdGVtT2Zmc2V0ID0gX3JlZi5nZXRJdGVtT2Zmc2V0LFxuICAgICAgZ2V0RXN0aW1hdGVkVG90YWxTaXplID0gX3JlZi5nZXRFc3RpbWF0ZWRUb3RhbFNpemUsXG4gICAgICBnZXRJdGVtU2l6ZSA9IF9yZWYuZ2V0SXRlbVNpemUsXG4gICAgICBnZXRPZmZzZXRGb3JJbmRleEFuZEFsaWdubWVudCA9IF9yZWYuZ2V0T2Zmc2V0Rm9ySW5kZXhBbmRBbGlnbm1lbnQsXG4gICAgICBnZXRTdGFydEluZGV4Rm9yT2Zmc2V0ID0gX3JlZi5nZXRTdGFydEluZGV4Rm9yT2Zmc2V0LFxuICAgICAgZ2V0U3RvcEluZGV4Rm9yU3RhcnRJbmRleCA9IF9yZWYuZ2V0U3RvcEluZGV4Rm9yU3RhcnRJbmRleCxcbiAgICAgIGluaXRJbnN0YW5jZVByb3BzID0gX3JlZi5pbml0SW5zdGFuY2VQcm9wcyxcbiAgICAgIHNob3VsZFJlc2V0U3R5bGVDYWNoZU9uSXRlbVNpemVDaGFuZ2UgPSBfcmVmLnNob3VsZFJlc2V0U3R5bGVDYWNoZU9uSXRlbVNpemVDaGFuZ2UsXG4gICAgICB2YWxpZGF0ZVByb3BzID0gX3JlZi52YWxpZGF0ZVByb3BzO1xuICByZXR1cm4gX3RlbXAgPSBfY2xhc3MgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uIChfUHVyZUNvbXBvbmVudCkge1xuICAgIF9pbmhlcml0c0xvb3NlKExpc3QsIF9QdXJlQ29tcG9uZW50KTtcblxuICAgIC8vIEFsd2F5cyB1c2UgZXhwbGljaXQgY29uc3RydWN0b3IgZm9yIFJlYWN0IGNvbXBvbmVudHMuXG4gICAgLy8gSXQgcHJvZHVjZXMgbGVzcyBjb2RlIGFmdGVyIHRyYW5zcGlsYXRpb24uICgjMjYpXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtY29uc3RydWN0b3JcbiAgICBmdW5jdGlvbiBMaXN0KHByb3BzKSB7XG4gICAgICB2YXIgX3RoaXM7XG5cbiAgICAgIF90aGlzID0gX1B1cmVDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcbiAgICAgIF90aGlzLl9pbnN0YW5jZVByb3BzID0gaW5pdEluc3RhbmNlUHJvcHMoX3RoaXMucHJvcHMsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpKTtcbiAgICAgIF90aGlzLl9vdXRlclJlZiA9IHZvaWQgMDtcbiAgICAgIF90aGlzLl9yZXNldElzU2Nyb2xsaW5nVGltZW91dElkID0gbnVsbDtcbiAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICBpbnN0YW5jZTogX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksXG4gICAgICAgIGlzU2Nyb2xsaW5nOiBmYWxzZSxcbiAgICAgICAgc2Nyb2xsRGlyZWN0aW9uOiAnZm9yd2FyZCcsXG4gICAgICAgIHNjcm9sbE9mZnNldDogdHlwZW9mIF90aGlzLnByb3BzLmluaXRpYWxTY3JvbGxPZmZzZXQgPT09ICdudW1iZXInID8gX3RoaXMucHJvcHMuaW5pdGlhbFNjcm9sbE9mZnNldCA6IDAsXG4gICAgICAgIHNjcm9sbFVwZGF0ZVdhc1JlcXVlc3RlZDogZmFsc2VcbiAgICAgIH07XG4gICAgICBfdGhpcy5fY2FsbE9uSXRlbXNSZW5kZXJlZCA9IHZvaWQgMDtcbiAgICAgIF90aGlzLl9jYWxsT25JdGVtc1JlbmRlcmVkID0gbWVtb2l6ZU9uZShmdW5jdGlvbiAob3ZlcnNjYW5TdGFydEluZGV4LCBvdmVyc2NhblN0b3BJbmRleCwgdmlzaWJsZVN0YXJ0SW5kZXgsIHZpc2libGVTdG9wSW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLnByb3BzLm9uSXRlbXNSZW5kZXJlZCh7XG4gICAgICAgICAgb3ZlcnNjYW5TdGFydEluZGV4OiBvdmVyc2NhblN0YXJ0SW5kZXgsXG4gICAgICAgICAgb3ZlcnNjYW5TdG9wSW5kZXg6IG92ZXJzY2FuU3RvcEluZGV4LFxuICAgICAgICAgIHZpc2libGVTdGFydEluZGV4OiB2aXNpYmxlU3RhcnRJbmRleCxcbiAgICAgICAgICB2aXNpYmxlU3RvcEluZGV4OiB2aXNpYmxlU3RvcEluZGV4XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICBfdGhpcy5fY2FsbE9uU2Nyb2xsID0gdm9pZCAwO1xuICAgICAgX3RoaXMuX2NhbGxPblNjcm9sbCA9IG1lbW9pemVPbmUoZnVuY3Rpb24gKHNjcm9sbERpcmVjdGlvbiwgc2Nyb2xsT2Zmc2V0LCBzY3JvbGxVcGRhdGVXYXNSZXF1ZXN0ZWQpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLnByb3BzLm9uU2Nyb2xsKHtcbiAgICAgICAgICBzY3JvbGxEaXJlY3Rpb246IHNjcm9sbERpcmVjdGlvbixcbiAgICAgICAgICBzY3JvbGxPZmZzZXQ6IHNjcm9sbE9mZnNldCxcbiAgICAgICAgICBzY3JvbGxVcGRhdGVXYXNSZXF1ZXN0ZWQ6IHNjcm9sbFVwZGF0ZVdhc1JlcXVlc3RlZFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgX3RoaXMuX2dldEl0ZW1TdHlsZSA9IHZvaWQgMDtcblxuICAgICAgX3RoaXMuX2dldEl0ZW1TdHlsZSA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIGRpcmVjdGlvbiA9IF90aGlzJHByb3BzLmRpcmVjdGlvbixcbiAgICAgICAgICAgIGl0ZW1TaXplID0gX3RoaXMkcHJvcHMuaXRlbVNpemUsXG4gICAgICAgICAgICBsYXlvdXQgPSBfdGhpcyRwcm9wcy5sYXlvdXQ7XG5cbiAgICAgICAgdmFyIGl0ZW1TdHlsZUNhY2hlID0gX3RoaXMuX2dldEl0ZW1TdHlsZUNhY2hlKHNob3VsZFJlc2V0U3R5bGVDYWNoZU9uSXRlbVNpemVDaGFuZ2UgJiYgaXRlbVNpemUsIHNob3VsZFJlc2V0U3R5bGVDYWNoZU9uSXRlbVNpemVDaGFuZ2UgJiYgbGF5b3V0LCBzaG91bGRSZXNldFN0eWxlQ2FjaGVPbkl0ZW1TaXplQ2hhbmdlICYmIGRpcmVjdGlvbik7XG5cbiAgICAgICAgdmFyIHN0eWxlO1xuXG4gICAgICAgIGlmIChpdGVtU3R5bGVDYWNoZS5oYXNPd25Qcm9wZXJ0eShpbmRleCkpIHtcbiAgICAgICAgICBzdHlsZSA9IGl0ZW1TdHlsZUNhY2hlW2luZGV4XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgX29mZnNldCA9IGdldEl0ZW1PZmZzZXQoX3RoaXMucHJvcHMsIGluZGV4LCBfdGhpcy5faW5zdGFuY2VQcm9wcyk7XG5cbiAgICAgICAgICB2YXIgc2l6ZSA9IGdldEl0ZW1TaXplKF90aGlzLnByb3BzLCBpbmRleCwgX3RoaXMuX2luc3RhbmNlUHJvcHMpOyAvLyBUT0RPIERlcHJlY2F0ZSBkaXJlY3Rpb24gXCJob3Jpem9udGFsXCJcblxuICAgICAgICAgIHZhciBpc0hvcml6b250YWwgPSBkaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyB8fCBsYXlvdXQgPT09ICdob3Jpem9udGFsJztcbiAgICAgICAgICB2YXIgaXNSdGwgPSBkaXJlY3Rpb24gPT09ICdydGwnO1xuICAgICAgICAgIHZhciBvZmZzZXRIb3Jpem9udGFsID0gaXNIb3Jpem9udGFsID8gX29mZnNldCA6IDA7XG4gICAgICAgICAgaXRlbVN0eWxlQ2FjaGVbaW5kZXhdID0gc3R5bGUgPSB7XG4gICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgIGxlZnQ6IGlzUnRsID8gdW5kZWZpbmVkIDogb2Zmc2V0SG9yaXpvbnRhbCxcbiAgICAgICAgICAgIHJpZ2h0OiBpc1J0bCA/IG9mZnNldEhvcml6b250YWwgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB0b3A6ICFpc0hvcml6b250YWwgPyBfb2Zmc2V0IDogMCxcbiAgICAgICAgICAgIGhlaWdodDogIWlzSG9yaXpvbnRhbCA/IHNpemUgOiAnMTAwJScsXG4gICAgICAgICAgICB3aWR0aDogaXNIb3Jpem9udGFsID8gc2l6ZSA6ICcxMDAlJ1xuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc3R5bGU7XG4gICAgICB9O1xuXG4gICAgICBfdGhpcy5fZ2V0SXRlbVN0eWxlQ2FjaGUgPSB2b2lkIDA7XG4gICAgICBfdGhpcy5fZ2V0SXRlbVN0eWxlQ2FjaGUgPSBtZW1vaXplT25lKGZ1bmN0aW9uIChfLCBfXywgX19fKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpcy5fb25TY3JvbGxIb3Jpem9udGFsID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHZhciBfZXZlbnQkY3VycmVudFRhcmdldCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQsXG4gICAgICAgICAgICBjbGllbnRXaWR0aCA9IF9ldmVudCRjdXJyZW50VGFyZ2V0LmNsaWVudFdpZHRoLFxuICAgICAgICAgICAgc2Nyb2xsTGVmdCA9IF9ldmVudCRjdXJyZW50VGFyZ2V0LnNjcm9sbExlZnQsXG4gICAgICAgICAgICBzY3JvbGxXaWR0aCA9IF9ldmVudCRjdXJyZW50VGFyZ2V0LnNjcm9sbFdpZHRoO1xuXG4gICAgICAgIF90aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChwcmV2U3RhdGUpIHtcbiAgICAgICAgICBpZiAocHJldlN0YXRlLnNjcm9sbE9mZnNldCA9PT0gc2Nyb2xsTGVmdCkge1xuICAgICAgICAgICAgLy8gU2Nyb2xsIHBvc2l0aW9uIG1heSBoYXZlIGJlZW4gdXBkYXRlZCBieSBjRE0vY0RVLFxuICAgICAgICAgICAgLy8gSW4gd2hpY2ggY2FzZSB3ZSBkb24ndCBuZWVkIHRvIHRyaWdnZXIgYW5vdGhlciByZW5kZXIsXG4gICAgICAgICAgICAvLyBBbmQgd2UgZG9uJ3Qgd2FudCB0byB1cGRhdGUgc3RhdGUuaXNTY3JvbGxpbmcuXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgZGlyZWN0aW9uID0gX3RoaXMucHJvcHMuZGlyZWN0aW9uO1xuICAgICAgICAgIHZhciBzY3JvbGxPZmZzZXQgPSBzY3JvbGxMZWZ0O1xuXG4gICAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ3J0bCcpIHtcbiAgICAgICAgICAgIC8vIFRSSUNLWSBBY2NvcmRpbmcgdG8gdGhlIHNwZWMsIHNjcm9sbExlZnQgc2hvdWxkIGJlIG5lZ2F0aXZlIGZvciBSVEwgYWxpZ25lZCBlbGVtZW50cy5cbiAgICAgICAgICAgIC8vIFRoaXMgaXMgbm90IHRoZSBjYXNlIGZvciBhbGwgYnJvd3NlcnMgdGhvdWdoIChlLmcuIENocm9tZSByZXBvcnRzIHZhbHVlcyBhcyBwb3NpdGl2ZSwgbWVhc3VyZWQgcmVsYXRpdmUgdG8gdGhlIGxlZnQpLlxuICAgICAgICAgICAgLy8gSXQncyBhbHNvIGVhc2llciBmb3IgdGhpcyBjb21wb25lbnQgaWYgd2UgY29udmVydCBvZmZzZXRzIHRvIHRoZSBzYW1lIGZvcm1hdCBhcyB0aGV5IHdvdWxkIGJlIGluIGZvciBsdHIuXG4gICAgICAgICAgICAvLyBTbyB0aGUgc2ltcGxlc3Qgc29sdXRpb24gaXMgdG8gZGV0ZXJtaW5lIHdoaWNoIGJyb3dzZXIgYmVoYXZpb3Igd2UncmUgZGVhbGluZyB3aXRoLCBhbmQgY29udmVydCBiYXNlZCBvbiBpdC5cbiAgICAgICAgICAgIHN3aXRjaCAoZ2V0UlRMT2Zmc2V0VHlwZSgpKSB7XG4gICAgICAgICAgICAgIGNhc2UgJ25lZ2F0aXZlJzpcbiAgICAgICAgICAgICAgICBzY3JvbGxPZmZzZXQgPSAtc2Nyb2xsTGVmdDtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlICdwb3NpdGl2ZS1kZXNjZW5kaW5nJzpcbiAgICAgICAgICAgICAgICBzY3JvbGxPZmZzZXQgPSBzY3JvbGxXaWR0aCAtIGNsaWVudFdpZHRoIC0gc2Nyb2xsTGVmdDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IC8vIFByZXZlbnQgU2FmYXJpJ3MgZWxhc3RpYyBzY3JvbGxpbmcgZnJvbSBjYXVzaW5nIHZpc3VhbCBzaGFraW5nIHdoZW4gc2Nyb2xsaW5nIHBhc3QgYm91bmRzLlxuXG5cbiAgICAgICAgICBzY3JvbGxPZmZzZXQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihzY3JvbGxPZmZzZXQsIHNjcm9sbFdpZHRoIC0gY2xpZW50V2lkdGgpKTtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaXNTY3JvbGxpbmc6IHRydWUsXG4gICAgICAgICAgICBzY3JvbGxEaXJlY3Rpb246IHByZXZTdGF0ZS5zY3JvbGxPZmZzZXQgPCBzY3JvbGxMZWZ0ID8gJ2ZvcndhcmQnIDogJ2JhY2t3YXJkJyxcbiAgICAgICAgICAgIHNjcm9sbE9mZnNldDogc2Nyb2xsT2Zmc2V0LFxuICAgICAgICAgICAgc2Nyb2xsVXBkYXRlV2FzUmVxdWVzdGVkOiBmYWxzZVxuICAgICAgICAgIH07XG4gICAgICAgIH0sIF90aGlzLl9yZXNldElzU2Nyb2xsaW5nRGVib3VuY2VkKTtcbiAgICAgIH07XG5cbiAgICAgIF90aGlzLl9vblNjcm9sbFZlcnRpY2FsID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHZhciBfZXZlbnQkY3VycmVudFRhcmdldDIgPSBldmVudC5jdXJyZW50VGFyZ2V0LFxuICAgICAgICAgICAgY2xpZW50SGVpZ2h0ID0gX2V2ZW50JGN1cnJlbnRUYXJnZXQyLmNsaWVudEhlaWdodCxcbiAgICAgICAgICAgIHNjcm9sbEhlaWdodCA9IF9ldmVudCRjdXJyZW50VGFyZ2V0Mi5zY3JvbGxIZWlnaHQsXG4gICAgICAgICAgICBzY3JvbGxUb3AgPSBfZXZlbnQkY3VycmVudFRhcmdldDIuc2Nyb2xsVG9wO1xuXG4gICAgICAgIF90aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChwcmV2U3RhdGUpIHtcbiAgICAgICAgICBpZiAocHJldlN0YXRlLnNjcm9sbE9mZnNldCA9PT0gc2Nyb2xsVG9wKSB7XG4gICAgICAgICAgICAvLyBTY3JvbGwgcG9zaXRpb24gbWF5IGhhdmUgYmVlbiB1cGRhdGVkIGJ5IGNETS9jRFUsXG4gICAgICAgICAgICAvLyBJbiB3aGljaCBjYXNlIHdlIGRvbid0IG5lZWQgdG8gdHJpZ2dlciBhbm90aGVyIHJlbmRlcixcbiAgICAgICAgICAgIC8vIEFuZCB3ZSBkb24ndCB3YW50IHRvIHVwZGF0ZSBzdGF0ZS5pc1Njcm9sbGluZy5cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH0gLy8gUHJldmVudCBTYWZhcmkncyBlbGFzdGljIHNjcm9sbGluZyBmcm9tIGNhdXNpbmcgdmlzdWFsIHNoYWtpbmcgd2hlbiBzY3JvbGxpbmcgcGFzdCBib3VuZHMuXG5cblxuICAgICAgICAgIHZhciBzY3JvbGxPZmZzZXQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihzY3JvbGxUb3AsIHNjcm9sbEhlaWdodCAtIGNsaWVudEhlaWdodCkpO1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpc1Njcm9sbGluZzogdHJ1ZSxcbiAgICAgICAgICAgIHNjcm9sbERpcmVjdGlvbjogcHJldlN0YXRlLnNjcm9sbE9mZnNldCA8IHNjcm9sbE9mZnNldCA/ICdmb3J3YXJkJyA6ICdiYWNrd2FyZCcsXG4gICAgICAgICAgICBzY3JvbGxPZmZzZXQ6IHNjcm9sbE9mZnNldCxcbiAgICAgICAgICAgIHNjcm9sbFVwZGF0ZVdhc1JlcXVlc3RlZDogZmFsc2VcbiAgICAgICAgICB9O1xuICAgICAgICB9LCBfdGhpcy5fcmVzZXRJc1Njcm9sbGluZ0RlYm91bmNlZCk7XG4gICAgICB9O1xuXG4gICAgICBfdGhpcy5fb3V0ZXJSZWZTZXR0ZXIgPSBmdW5jdGlvbiAocmVmKSB7XG4gICAgICAgIHZhciBvdXRlclJlZiA9IF90aGlzLnByb3BzLm91dGVyUmVmO1xuICAgICAgICBfdGhpcy5fb3V0ZXJSZWYgPSByZWY7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBvdXRlclJlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIG91dGVyUmVmKHJlZik7XG4gICAgICAgIH0gZWxzZSBpZiAob3V0ZXJSZWYgIT0gbnVsbCAmJiB0eXBlb2Ygb3V0ZXJSZWYgPT09ICdvYmplY3QnICYmIG91dGVyUmVmLmhhc093blByb3BlcnR5KCdjdXJyZW50JykpIHtcbiAgICAgICAgICBvdXRlclJlZi5jdXJyZW50ID0gcmVmO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBfdGhpcy5fcmVzZXRJc1Njcm9sbGluZ0RlYm91bmNlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKF90aGlzLl9yZXNldElzU2Nyb2xsaW5nVGltZW91dElkICE9PSBudWxsKSB7XG4gICAgICAgICAgY2FuY2VsVGltZW91dChfdGhpcy5fcmVzZXRJc1Njcm9sbGluZ1RpbWVvdXRJZCk7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpcy5fcmVzZXRJc1Njcm9sbGluZ1RpbWVvdXRJZCA9IHJlcXVlc3RUaW1lb3V0KF90aGlzLl9yZXNldElzU2Nyb2xsaW5nLCBJU19TQ1JPTExJTkdfREVCT1VOQ0VfSU5URVJWQUwkMSk7XG4gICAgICB9O1xuXG4gICAgICBfdGhpcy5fcmVzZXRJc1Njcm9sbGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMuX3Jlc2V0SXNTY3JvbGxpbmdUaW1lb3V0SWQgPSBudWxsO1xuXG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBpc1Njcm9sbGluZzogZmFsc2VcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIC8vIENsZWFyIHN0eWxlIGNhY2hlIGFmdGVyIHN0YXRlIHVwZGF0ZSBoYXMgYmVlbiBjb21taXR0ZWQuXG4gICAgICAgICAgLy8gVGhpcyB3YXkgd2UgZG9uJ3QgYnJlYWsgcHVyZSBzQ1UgZm9yIGl0ZW1zIHRoYXQgZG9uJ3QgdXNlIGlzU2Nyb2xsaW5nIHBhcmFtLlxuICAgICAgICAgIF90aGlzLl9nZXRJdGVtU3R5bGVDYWNoZSgtMSwgbnVsbCk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIExpc3QuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgICB2YWxpZGF0ZVNoYXJlZFByb3BzJDEobmV4dFByb3BzLCBwcmV2U3RhdGUpO1xuICAgICAgdmFsaWRhdGVQcm9wcyhuZXh0UHJvcHMpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcblxuICAgIHZhciBfcHJvdG8gPSBMaXN0LnByb3RvdHlwZTtcblxuICAgIF9wcm90by5zY3JvbGxUbyA9IGZ1bmN0aW9uIHNjcm9sbFRvKHNjcm9sbE9mZnNldCkge1xuICAgICAgc2Nyb2xsT2Zmc2V0ID0gTWF0aC5tYXgoMCwgc2Nyb2xsT2Zmc2V0KTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKHByZXZTdGF0ZSkge1xuICAgICAgICBpZiAocHJldlN0YXRlLnNjcm9sbE9mZnNldCA9PT0gc2Nyb2xsT2Zmc2V0KSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHNjcm9sbERpcmVjdGlvbjogcHJldlN0YXRlLnNjcm9sbE9mZnNldCA8IHNjcm9sbE9mZnNldCA/ICdmb3J3YXJkJyA6ICdiYWNrd2FyZCcsXG4gICAgICAgICAgc2Nyb2xsT2Zmc2V0OiBzY3JvbGxPZmZzZXQsXG4gICAgICAgICAgc2Nyb2xsVXBkYXRlV2FzUmVxdWVzdGVkOiB0cnVlXG4gICAgICAgIH07XG4gICAgICB9LCB0aGlzLl9yZXNldElzU2Nyb2xsaW5nRGVib3VuY2VkKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLnNjcm9sbFRvSXRlbSA9IGZ1bmN0aW9uIHNjcm9sbFRvSXRlbShpbmRleCwgYWxpZ24pIHtcbiAgICAgIGlmIChhbGlnbiA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGFsaWduID0gJ2F1dG8nO1xuICAgICAgfVxuXG4gICAgICB2YXIgaXRlbUNvdW50ID0gdGhpcy5wcm9wcy5pdGVtQ291bnQ7XG4gICAgICB2YXIgc2Nyb2xsT2Zmc2V0ID0gdGhpcy5zdGF0ZS5zY3JvbGxPZmZzZXQ7XG4gICAgICBpbmRleCA9IE1hdGgubWF4KDAsIE1hdGgubWluKGluZGV4LCBpdGVtQ291bnQgLSAxKSk7XG4gICAgICB0aGlzLnNjcm9sbFRvKGdldE9mZnNldEZvckluZGV4QW5kQWxpZ25tZW50KHRoaXMucHJvcHMsIGluZGV4LCBhbGlnbiwgc2Nyb2xsT2Zmc2V0LCB0aGlzLl9pbnN0YW5jZVByb3BzKSk7XG4gICAgfTtcblxuICAgIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgZGlyZWN0aW9uID0gX3RoaXMkcHJvcHMyLmRpcmVjdGlvbixcbiAgICAgICAgICBpbml0aWFsU2Nyb2xsT2Zmc2V0ID0gX3RoaXMkcHJvcHMyLmluaXRpYWxTY3JvbGxPZmZzZXQsXG4gICAgICAgICAgbGF5b3V0ID0gX3RoaXMkcHJvcHMyLmxheW91dDtcblxuICAgICAgaWYgKHR5cGVvZiBpbml0aWFsU2Nyb2xsT2Zmc2V0ID09PSAnbnVtYmVyJyAmJiB0aGlzLl9vdXRlclJlZiAhPSBudWxsKSB7XG4gICAgICAgIHZhciBvdXRlclJlZiA9IHRoaXMuX291dGVyUmVmOyAvLyBUT0RPIERlcHJlY2F0ZSBkaXJlY3Rpb24gXCJob3Jpem9udGFsXCJcblxuICAgICAgICBpZiAoZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcgfHwgbGF5b3V0ID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgICBvdXRlclJlZi5zY3JvbGxMZWZ0ID0gaW5pdGlhbFNjcm9sbE9mZnNldDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXRlclJlZi5zY3JvbGxUb3AgPSBpbml0aWFsU2Nyb2xsT2Zmc2V0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2NhbGxQcm9wc0NhbGxiYWNrcygpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgZGlyZWN0aW9uID0gX3RoaXMkcHJvcHMzLmRpcmVjdGlvbixcbiAgICAgICAgICBsYXlvdXQgPSBfdGhpcyRwcm9wczMubGF5b3V0O1xuICAgICAgdmFyIF90aGlzJHN0YXRlID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICBzY3JvbGxPZmZzZXQgPSBfdGhpcyRzdGF0ZS5zY3JvbGxPZmZzZXQsXG4gICAgICAgICAgc2Nyb2xsVXBkYXRlV2FzUmVxdWVzdGVkID0gX3RoaXMkc3RhdGUuc2Nyb2xsVXBkYXRlV2FzUmVxdWVzdGVkO1xuXG4gICAgICBpZiAoc2Nyb2xsVXBkYXRlV2FzUmVxdWVzdGVkICYmIHRoaXMuX291dGVyUmVmICE9IG51bGwpIHtcbiAgICAgICAgdmFyIG91dGVyUmVmID0gdGhpcy5fb3V0ZXJSZWY7IC8vIFRPRE8gRGVwcmVjYXRlIGRpcmVjdGlvbiBcImhvcml6b250YWxcIlxuXG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyB8fCBsYXlvdXQgPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICAgIGlmIChkaXJlY3Rpb24gPT09ICdydGwnKSB7XG4gICAgICAgICAgICAvLyBUUklDS1kgQWNjb3JkaW5nIHRvIHRoZSBzcGVjLCBzY3JvbGxMZWZ0IHNob3VsZCBiZSBuZWdhdGl2ZSBmb3IgUlRMIGFsaWduZWQgZWxlbWVudHMuXG4gICAgICAgICAgICAvLyBUaGlzIGlzIG5vdCB0aGUgY2FzZSBmb3IgYWxsIGJyb3dzZXJzIHRob3VnaCAoZS5nLiBDaHJvbWUgcmVwb3J0cyB2YWx1ZXMgYXMgcG9zaXRpdmUsIG1lYXN1cmVkIHJlbGF0aXZlIHRvIHRoZSBsZWZ0KS5cbiAgICAgICAgICAgIC8vIFNvIHdlIG5lZWQgdG8gZGV0ZXJtaW5lIHdoaWNoIGJyb3dzZXIgYmVoYXZpb3Igd2UncmUgZGVhbGluZyB3aXRoLCBhbmQgbWltaWMgaXQuXG4gICAgICAgICAgICBzd2l0Y2ggKGdldFJUTE9mZnNldFR5cGUoKSkge1xuICAgICAgICAgICAgICBjYXNlICduZWdhdGl2ZSc6XG4gICAgICAgICAgICAgICAgb3V0ZXJSZWYuc2Nyb2xsTGVmdCA9IC1zY3JvbGxPZmZzZXQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSAncG9zaXRpdmUtYXNjZW5kaW5nJzpcbiAgICAgICAgICAgICAgICBvdXRlclJlZi5zY3JvbGxMZWZ0ID0gc2Nyb2xsT2Zmc2V0O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdmFyIGNsaWVudFdpZHRoID0gb3V0ZXJSZWYuY2xpZW50V2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbFdpZHRoID0gb3V0ZXJSZWYuc2Nyb2xsV2lkdGg7XG4gICAgICAgICAgICAgICAgb3V0ZXJSZWYuc2Nyb2xsTGVmdCA9IHNjcm9sbFdpZHRoIC0gY2xpZW50V2lkdGggLSBzY3JvbGxPZmZzZXQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG91dGVyUmVmLnNjcm9sbExlZnQgPSBzY3JvbGxPZmZzZXQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dGVyUmVmLnNjcm9sbFRvcCA9IHNjcm9sbE9mZnNldDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9jYWxsUHJvcHNDYWxsYmFja3MoKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5fcmVzZXRJc1Njcm9sbGluZ1RpbWVvdXRJZCAhPT0gbnVsbCkge1xuICAgICAgICBjYW5jZWxUaW1lb3V0KHRoaXMuX3Jlc2V0SXNTY3JvbGxpbmdUaW1lb3V0SWQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzNCA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wczQuY2hpbGRyZW4sXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHM0LmNsYXNzTmFtZSxcbiAgICAgICAgICBkaXJlY3Rpb24gPSBfdGhpcyRwcm9wczQuZGlyZWN0aW9uLFxuICAgICAgICAgIGhlaWdodCA9IF90aGlzJHByb3BzNC5oZWlnaHQsXG4gICAgICAgICAgaW5uZXJSZWYgPSBfdGhpcyRwcm9wczQuaW5uZXJSZWYsXG4gICAgICAgICAgaW5uZXJFbGVtZW50VHlwZSA9IF90aGlzJHByb3BzNC5pbm5lckVsZW1lbnRUeXBlLFxuICAgICAgICAgIGlubmVyVGFnTmFtZSA9IF90aGlzJHByb3BzNC5pbm5lclRhZ05hbWUsXG4gICAgICAgICAgaXRlbUNvdW50ID0gX3RoaXMkcHJvcHM0Lml0ZW1Db3VudCxcbiAgICAgICAgICBpdGVtRGF0YSA9IF90aGlzJHByb3BzNC5pdGVtRGF0YSxcbiAgICAgICAgICBfdGhpcyRwcm9wczQkaXRlbUtleSA9IF90aGlzJHByb3BzNC5pdGVtS2V5LFxuICAgICAgICAgIGl0ZW1LZXkgPSBfdGhpcyRwcm9wczQkaXRlbUtleSA9PT0gdm9pZCAwID8gZGVmYXVsdEl0ZW1LZXkkMSA6IF90aGlzJHByb3BzNCRpdGVtS2V5LFxuICAgICAgICAgIGxheW91dCA9IF90aGlzJHByb3BzNC5sYXlvdXQsXG4gICAgICAgICAgb3V0ZXJFbGVtZW50VHlwZSA9IF90aGlzJHByb3BzNC5vdXRlckVsZW1lbnRUeXBlLFxuICAgICAgICAgIG91dGVyVGFnTmFtZSA9IF90aGlzJHByb3BzNC5vdXRlclRhZ05hbWUsXG4gICAgICAgICAgc3R5bGUgPSBfdGhpcyRwcm9wczQuc3R5bGUsXG4gICAgICAgICAgdXNlSXNTY3JvbGxpbmcgPSBfdGhpcyRwcm9wczQudXNlSXNTY3JvbGxpbmcsXG4gICAgICAgICAgd2lkdGggPSBfdGhpcyRwcm9wczQud2lkdGg7XG4gICAgICB2YXIgaXNTY3JvbGxpbmcgPSB0aGlzLnN0YXRlLmlzU2Nyb2xsaW5nOyAvLyBUT0RPIERlcHJlY2F0ZSBkaXJlY3Rpb24gXCJob3Jpem9udGFsXCJcblxuICAgICAgdmFyIGlzSG9yaXpvbnRhbCA9IGRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnIHx8IGxheW91dCA9PT0gJ2hvcml6b250YWwnO1xuICAgICAgdmFyIG9uU2Nyb2xsID0gaXNIb3Jpem9udGFsID8gdGhpcy5fb25TY3JvbGxIb3Jpem9udGFsIDogdGhpcy5fb25TY3JvbGxWZXJ0aWNhbDtcblxuICAgICAgdmFyIF90aGlzJF9nZXRSYW5nZVRvUmVuZCA9IHRoaXMuX2dldFJhbmdlVG9SZW5kZXIoKSxcbiAgICAgICAgICBzdGFydEluZGV4ID0gX3RoaXMkX2dldFJhbmdlVG9SZW5kWzBdLFxuICAgICAgICAgIHN0b3BJbmRleCA9IF90aGlzJF9nZXRSYW5nZVRvUmVuZFsxXTtcblxuICAgICAgdmFyIGl0ZW1zID0gW107XG5cbiAgICAgIGlmIChpdGVtQ291bnQgPiAwKSB7XG4gICAgICAgIGZvciAodmFyIF9pbmRleCA9IHN0YXJ0SW5kZXg7IF9pbmRleCA8PSBzdG9wSW5kZXg7IF9pbmRleCsrKSB7XG4gICAgICAgICAgaXRlbXMucHVzaChjcmVhdGVFbGVtZW50KGNoaWxkcmVuLCB7XG4gICAgICAgICAgICBkYXRhOiBpdGVtRGF0YSxcbiAgICAgICAgICAgIGtleTogaXRlbUtleShfaW5kZXgsIGl0ZW1EYXRhKSxcbiAgICAgICAgICAgIGluZGV4OiBfaW5kZXgsXG4gICAgICAgICAgICBpc1Njcm9sbGluZzogdXNlSXNTY3JvbGxpbmcgPyBpc1Njcm9sbGluZyA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHN0eWxlOiB0aGlzLl9nZXRJdGVtU3R5bGUoX2luZGV4KVxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgICAgfSAvLyBSZWFkIHRoaXMgdmFsdWUgQUZURVIgaXRlbXMgaGF2ZSBiZWVuIGNyZWF0ZWQsXG4gICAgICAvLyBTbyB0aGVpciBhY3R1YWwgc2l6ZXMgKGlmIHZhcmlhYmxlKSBhcmUgdGFrZW4gaW50byBjb25zaWRlcmF0aW9uLlxuXG5cbiAgICAgIHZhciBlc3RpbWF0ZWRUb3RhbFNpemUgPSBnZXRFc3RpbWF0ZWRUb3RhbFNpemUodGhpcy5wcm9wcywgdGhpcy5faW5zdGFuY2VQcm9wcyk7XG4gICAgICByZXR1cm4gY3JlYXRlRWxlbWVudChvdXRlckVsZW1lbnRUeXBlIHx8IG91dGVyVGFnTmFtZSB8fCAnZGl2Jywge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgICAgb25TY3JvbGw6IG9uU2Nyb2xsLFxuICAgICAgICByZWY6IHRoaXMuX291dGVyUmVmU2V0dGVyLFxuICAgICAgICBzdHlsZTogX2V4dGVuZHMoe1xuICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgICBvdmVyZmxvdzogJ2F1dG8nLFxuICAgICAgICAgIFdlYmtpdE92ZXJmbG93U2Nyb2xsaW5nOiAndG91Y2gnLFxuICAgICAgICAgIHdpbGxDaGFuZ2U6ICd0cmFuc2Zvcm0nLFxuICAgICAgICAgIGRpcmVjdGlvbjogZGlyZWN0aW9uXG4gICAgICAgIH0sIHN0eWxlKVxuICAgICAgfSwgY3JlYXRlRWxlbWVudChpbm5lckVsZW1lbnRUeXBlIHx8IGlubmVyVGFnTmFtZSB8fCAnZGl2Jywge1xuICAgICAgICBjaGlsZHJlbjogaXRlbXMsXG4gICAgICAgIHJlZjogaW5uZXJSZWYsXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgaGVpZ2h0OiBpc0hvcml6b250YWwgPyAnMTAwJScgOiBlc3RpbWF0ZWRUb3RhbFNpemUsXG4gICAgICAgICAgcG9pbnRlckV2ZW50czogaXNTY3JvbGxpbmcgPyAnbm9uZScgOiB1bmRlZmluZWQsXG4gICAgICAgICAgd2lkdGg6IGlzSG9yaXpvbnRhbCA/IGVzdGltYXRlZFRvdGFsU2l6ZSA6ICcxMDAlJ1xuICAgICAgICB9XG4gICAgICB9KSk7XG4gICAgfTtcblxuICAgIF9wcm90by5fY2FsbFByb3BzQ2FsbGJhY2tzID0gZnVuY3Rpb24gX2NhbGxQcm9wc0NhbGxiYWNrcygpIHtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5wcm9wcy5vbkl0ZW1zUmVuZGVyZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFyIGl0ZW1Db3VudCA9IHRoaXMucHJvcHMuaXRlbUNvdW50O1xuXG4gICAgICAgIGlmIChpdGVtQ291bnQgPiAwKSB7XG4gICAgICAgICAgdmFyIF90aGlzJF9nZXRSYW5nZVRvUmVuZDIgPSB0aGlzLl9nZXRSYW5nZVRvUmVuZGVyKCksXG4gICAgICAgICAgICAgIF9vdmVyc2NhblN0YXJ0SW5kZXggPSBfdGhpcyRfZ2V0UmFuZ2VUb1JlbmQyWzBdLFxuICAgICAgICAgICAgICBfb3ZlcnNjYW5TdG9wSW5kZXggPSBfdGhpcyRfZ2V0UmFuZ2VUb1JlbmQyWzFdLFxuICAgICAgICAgICAgICBfdmlzaWJsZVN0YXJ0SW5kZXggPSBfdGhpcyRfZ2V0UmFuZ2VUb1JlbmQyWzJdLFxuICAgICAgICAgICAgICBfdmlzaWJsZVN0b3BJbmRleCA9IF90aGlzJF9nZXRSYW5nZVRvUmVuZDJbM107XG5cbiAgICAgICAgICB0aGlzLl9jYWxsT25JdGVtc1JlbmRlcmVkKF9vdmVyc2NhblN0YXJ0SW5kZXgsIF9vdmVyc2NhblN0b3BJbmRleCwgX3Zpc2libGVTdGFydEluZGV4LCBfdmlzaWJsZVN0b3BJbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiB0aGlzLnByb3BzLm9uU2Nyb2xsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhciBfdGhpcyRzdGF0ZTIgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgICAgX3Njcm9sbERpcmVjdGlvbiA9IF90aGlzJHN0YXRlMi5zY3JvbGxEaXJlY3Rpb24sXG4gICAgICAgICAgICBfc2Nyb2xsT2Zmc2V0ID0gX3RoaXMkc3RhdGUyLnNjcm9sbE9mZnNldCxcbiAgICAgICAgICAgIF9zY3JvbGxVcGRhdGVXYXNSZXF1ZXN0ZWQgPSBfdGhpcyRzdGF0ZTIuc2Nyb2xsVXBkYXRlV2FzUmVxdWVzdGVkO1xuXG4gICAgICAgIHRoaXMuX2NhbGxPblNjcm9sbChfc2Nyb2xsRGlyZWN0aW9uLCBfc2Nyb2xsT2Zmc2V0LCBfc2Nyb2xsVXBkYXRlV2FzUmVxdWVzdGVkKTtcbiAgICAgIH1cbiAgICB9OyAvLyBMYXppbHkgY3JlYXRlIGFuZCBjYWNoZSBpdGVtIHN0eWxlcyB3aGlsZSBzY3JvbGxpbmcsXG4gICAgLy8gU28gdGhhdCBwdXJlIGNvbXBvbmVudCBzQ1Ugd2lsbCBwcmV2ZW50IHJlLXJlbmRlcnMuXG4gICAgLy8gV2UgbWFpbnRhaW4gdGhpcyBjYWNoZSwgYW5kIHBhc3MgYSBzdHlsZSBwcm9wIHJhdGhlciB0aGFuIGluZGV4LFxuICAgIC8vIFNvIHRoYXQgTGlzdCBjYW4gY2xlYXIgY2FjaGVkIHN0eWxlcyBhbmQgZm9yY2UgaXRlbSByZS1yZW5kZXIgaWYgbmVjZXNzYXJ5LlxuXG5cbiAgICBfcHJvdG8uX2dldFJhbmdlVG9SZW5kZXIgPSBmdW5jdGlvbiBfZ2V0UmFuZ2VUb1JlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczUgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGl0ZW1Db3VudCA9IF90aGlzJHByb3BzNS5pdGVtQ291bnQsXG4gICAgICAgICAgb3ZlcnNjYW5Db3VudCA9IF90aGlzJHByb3BzNS5vdmVyc2NhbkNvdW50O1xuICAgICAgdmFyIF90aGlzJHN0YXRlMyA9IHRoaXMuc3RhdGUsXG4gICAgICAgICAgaXNTY3JvbGxpbmcgPSBfdGhpcyRzdGF0ZTMuaXNTY3JvbGxpbmcsXG4gICAgICAgICAgc2Nyb2xsRGlyZWN0aW9uID0gX3RoaXMkc3RhdGUzLnNjcm9sbERpcmVjdGlvbixcbiAgICAgICAgICBzY3JvbGxPZmZzZXQgPSBfdGhpcyRzdGF0ZTMuc2Nyb2xsT2Zmc2V0O1xuXG4gICAgICBpZiAoaXRlbUNvdW50ID09PSAwKSB7XG4gICAgICAgIHJldHVybiBbMCwgMCwgMCwgMF07XG4gICAgICB9XG5cbiAgICAgIHZhciBzdGFydEluZGV4ID0gZ2V0U3RhcnRJbmRleEZvck9mZnNldCh0aGlzLnByb3BzLCBzY3JvbGxPZmZzZXQsIHRoaXMuX2luc3RhbmNlUHJvcHMpO1xuICAgICAgdmFyIHN0b3BJbmRleCA9IGdldFN0b3BJbmRleEZvclN0YXJ0SW5kZXgodGhpcy5wcm9wcywgc3RhcnRJbmRleCwgc2Nyb2xsT2Zmc2V0LCB0aGlzLl9pbnN0YW5jZVByb3BzKTsgLy8gT3ZlcnNjYW4gYnkgb25lIGl0ZW0gaW4gZWFjaCBkaXJlY3Rpb24gc28gdGhhdCB0YWIvZm9jdXMgd29ya3MuXG4gICAgICAvLyBJZiB0aGVyZSBpc24ndCBhdCBsZWFzdCBvbmUgZXh0cmEgaXRlbSwgdGFiIGxvb3BzIGJhY2sgYXJvdW5kLlxuXG4gICAgICB2YXIgb3ZlcnNjYW5CYWNrd2FyZCA9ICFpc1Njcm9sbGluZyB8fCBzY3JvbGxEaXJlY3Rpb24gPT09ICdiYWNrd2FyZCcgPyBNYXRoLm1heCgxLCBvdmVyc2NhbkNvdW50KSA6IDE7XG4gICAgICB2YXIgb3ZlcnNjYW5Gb3J3YXJkID0gIWlzU2Nyb2xsaW5nIHx8IHNjcm9sbERpcmVjdGlvbiA9PT0gJ2ZvcndhcmQnID8gTWF0aC5tYXgoMSwgb3ZlcnNjYW5Db3VudCkgOiAxO1xuICAgICAgcmV0dXJuIFtNYXRoLm1heCgwLCBzdGFydEluZGV4IC0gb3ZlcnNjYW5CYWNrd2FyZCksIE1hdGgubWF4KDAsIE1hdGgubWluKGl0ZW1Db3VudCAtIDEsIHN0b3BJbmRleCArIG92ZXJzY2FuRm9yd2FyZCkpLCBzdGFydEluZGV4LCBzdG9wSW5kZXhdO1xuICAgIH07XG5cbiAgICByZXR1cm4gTGlzdDtcbiAgfShQdXJlQ29tcG9uZW50KSwgX2NsYXNzLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBkaXJlY3Rpb246ICdsdHInLFxuICAgIGl0ZW1EYXRhOiB1bmRlZmluZWQsXG4gICAgbGF5b3V0OiAndmVydGljYWwnLFxuICAgIG92ZXJzY2FuQ291bnQ6IDIsXG4gICAgdXNlSXNTY3JvbGxpbmc6IGZhbHNlXG4gIH0sIF90ZW1wO1xufSAvLyBOT1RFOiBJIGNvbnNpZGVyZWQgZnVydGhlciB3cmFwcGluZyBpbmRpdmlkdWFsIGl0ZW1zIHdpdGggYSBwdXJlIExpc3RJdGVtIGNvbXBvbmVudC5cbi8vIFRoaXMgd291bGQgYXZvaWQgZXZlciBjYWxsaW5nIHRoZSByZW5kZXIgZnVuY3Rpb24gZm9yIHRoZSBzYW1lIGluZGV4IG1vcmUgdGhhbiBvbmNlLFxuLy8gQnV0IGl0IHdvdWxkIGFsc28gYWRkIHRoZSBvdmVyaGVhZCBvZiBhIGxvdCBvZiBjb21wb25lbnRzL2ZpYmVycy5cbi8vIEkgYXNzdW1lIHBlb3BsZSBhbHJlYWR5IGRvIHRoaXMgKHJlbmRlciBmdW5jdGlvbiByZXR1cm5pbmcgYSBjbGFzcyBjb21wb25lbnQpLFxuLy8gU28gbXkgZG9pbmcgaXQgd291bGQganVzdCB1bm5lY2Vzc2FyaWx5IGRvdWJsZSB0aGUgd3JhcHBlcnMuXG5cbnZhciB2YWxpZGF0ZVNoYXJlZFByb3BzJDEgPSBmdW5jdGlvbiB2YWxpZGF0ZVNoYXJlZFByb3BzKF9yZWYyLCBfcmVmMykge1xuICB2YXIgY2hpbGRyZW4gPSBfcmVmMi5jaGlsZHJlbixcbiAgICAgIGRpcmVjdGlvbiA9IF9yZWYyLmRpcmVjdGlvbixcbiAgICAgIGhlaWdodCA9IF9yZWYyLmhlaWdodCxcbiAgICAgIGxheW91dCA9IF9yZWYyLmxheW91dCxcbiAgICAgIGlubmVyVGFnTmFtZSA9IF9yZWYyLmlubmVyVGFnTmFtZSxcbiAgICAgIG91dGVyVGFnTmFtZSA9IF9yZWYyLm91dGVyVGFnTmFtZSxcbiAgICAgIHdpZHRoID0gX3JlZjIud2lkdGg7XG4gIHZhciBpbnN0YW5jZSA9IF9yZWYzLmluc3RhbmNlO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGlubmVyVGFnTmFtZSAhPSBudWxsIHx8IG91dGVyVGFnTmFtZSAhPSBudWxsKSB7XG4gICAgICBpZiAoZGV2V2FybmluZ3NUYWdOYW1lJDEgJiYgIWRldldhcm5pbmdzVGFnTmFtZSQxLmhhcyhpbnN0YW5jZSkpIHtcbiAgICAgICAgZGV2V2FybmluZ3NUYWdOYW1lJDEuYWRkKGluc3RhbmNlKTtcbiAgICAgICAgY29uc29sZS53YXJuKCdUaGUgaW5uZXJUYWdOYW1lIGFuZCBvdXRlclRhZ05hbWUgcHJvcHMgaGF2ZSBiZWVuIGRlcHJlY2F0ZWQuICcgKyAnUGxlYXNlIHVzZSB0aGUgaW5uZXJFbGVtZW50VHlwZSBhbmQgb3V0ZXJFbGVtZW50VHlwZSBwcm9wcyBpbnN0ZWFkLicpO1xuICAgICAgfVxuICAgIH0gLy8gVE9ETyBEZXByZWNhdGUgZGlyZWN0aW9uIFwiaG9yaXpvbnRhbFwiXG5cblxuICAgIHZhciBpc0hvcml6b250YWwgPSBkaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyB8fCBsYXlvdXQgPT09ICdob3Jpem9udGFsJztcblxuICAgIHN3aXRjaCAoZGlyZWN0aW9uKSB7XG4gICAgICBjYXNlICdob3Jpem9udGFsJzpcbiAgICAgIGNhc2UgJ3ZlcnRpY2FsJzpcbiAgICAgICAgaWYgKGRldldhcm5pbmdzRGlyZWN0aW9uICYmICFkZXZXYXJuaW5nc0RpcmVjdGlvbi5oYXMoaW5zdGFuY2UpKSB7XG4gICAgICAgICAgZGV2V2FybmluZ3NEaXJlY3Rpb24uYWRkKGluc3RhbmNlKTtcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ1RoZSBkaXJlY3Rpb24gcHJvcCBzaG91bGQgYmUgZWl0aGVyIFwibHRyXCIgKGRlZmF1bHQpIG9yIFwicnRsXCIuICcgKyAnUGxlYXNlIHVzZSB0aGUgbGF5b3V0IHByb3AgdG8gc3BlY2lmeSBcInZlcnRpY2FsXCIgKGRlZmF1bHQpIG9yIFwiaG9yaXpvbnRhbFwiIG9yaWVudGF0aW9uLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2x0cic6XG4gICAgICBjYXNlICdydGwnOlxuICAgICAgICAvLyBWYWxpZCB2YWx1ZXNcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IEVycm9yKCdBbiBpbnZhbGlkIFwiZGlyZWN0aW9uXCIgcHJvcCBoYXMgYmVlbiBzcGVjaWZpZWQuICcgKyAnVmFsdWUgc2hvdWxkIGJlIGVpdGhlciBcImx0clwiIG9yIFwicnRsXCIuICcgKyAoXCJcXFwiXCIgKyBkaXJlY3Rpb24gKyBcIlxcXCIgd2FzIHNwZWNpZmllZC5cIikpO1xuICAgIH1cblxuICAgIHN3aXRjaCAobGF5b3V0KSB7XG4gICAgICBjYXNlICdob3Jpem9udGFsJzpcbiAgICAgIGNhc2UgJ3ZlcnRpY2FsJzpcbiAgICAgICAgLy8gVmFsaWQgdmFsdWVzXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBFcnJvcignQW4gaW52YWxpZCBcImxheW91dFwiIHByb3AgaGFzIGJlZW4gc3BlY2lmaWVkLiAnICsgJ1ZhbHVlIHNob3VsZCBiZSBlaXRoZXIgXCJob3Jpem9udGFsXCIgb3IgXCJ2ZXJ0aWNhbFwiLiAnICsgKFwiXFxcIlwiICsgbGF5b3V0ICsgXCJcXFwiIHdhcyBzcGVjaWZpZWQuXCIpKTtcbiAgICB9XG5cbiAgICBpZiAoY2hpbGRyZW4gPT0gbnVsbCkge1xuICAgICAgdGhyb3cgRXJyb3IoJ0FuIGludmFsaWQgXCJjaGlsZHJlblwiIHByb3AgaGFzIGJlZW4gc3BlY2lmaWVkLiAnICsgJ1ZhbHVlIHNob3VsZCBiZSBhIFJlYWN0IGNvbXBvbmVudC4gJyArIChcIlxcXCJcIiArIChjaGlsZHJlbiA9PT0gbnVsbCA/ICdudWxsJyA6IHR5cGVvZiBjaGlsZHJlbikgKyBcIlxcXCIgd2FzIHNwZWNpZmllZC5cIikpO1xuICAgIH1cblxuICAgIGlmIChpc0hvcml6b250YWwgJiYgdHlwZW9mIHdpZHRoICE9PSAnbnVtYmVyJykge1xuICAgICAgdGhyb3cgRXJyb3IoJ0FuIGludmFsaWQgXCJ3aWR0aFwiIHByb3AgaGFzIGJlZW4gc3BlY2lmaWVkLiAnICsgJ0hvcml6b250YWwgbGlzdHMgbXVzdCBzcGVjaWZ5IGEgbnVtYmVyIGZvciB3aWR0aC4gJyArIChcIlxcXCJcIiArICh3aWR0aCA9PT0gbnVsbCA/ICdudWxsJyA6IHR5cGVvZiB3aWR0aCkgKyBcIlxcXCIgd2FzIHNwZWNpZmllZC5cIikpO1xuICAgIH0gZWxzZSBpZiAoIWlzSG9yaXpvbnRhbCAmJiB0eXBlb2YgaGVpZ2h0ICE9PSAnbnVtYmVyJykge1xuICAgICAgdGhyb3cgRXJyb3IoJ0FuIGludmFsaWQgXCJoZWlnaHRcIiBwcm9wIGhhcyBiZWVuIHNwZWNpZmllZC4gJyArICdWZXJ0aWNhbCBsaXN0cyBtdXN0IHNwZWNpZnkgYSBudW1iZXIgZm9yIGhlaWdodC4gJyArIChcIlxcXCJcIiArIChoZWlnaHQgPT09IG51bGwgPyAnbnVsbCcgOiB0eXBlb2YgaGVpZ2h0KSArIFwiXFxcIiB3YXMgc3BlY2lmaWVkLlwiKSk7XG4gICAgfVxuICB9XG59O1xuXG52YXIgREVGQVVMVF9FU1RJTUFURURfSVRFTV9TSVpFJDEgPSA1MDtcblxudmFyIGdldEl0ZW1NZXRhZGF0YSQxID0gZnVuY3Rpb24gZ2V0SXRlbU1ldGFkYXRhKHByb3BzLCBpbmRleCwgaW5zdGFuY2VQcm9wcykge1xuICB2YXIgX3JlZiA9IHByb3BzLFxuICAgICAgaXRlbVNpemUgPSBfcmVmLml0ZW1TaXplO1xuICB2YXIgaXRlbU1ldGFkYXRhTWFwID0gaW5zdGFuY2VQcm9wcy5pdGVtTWV0YWRhdGFNYXAsXG4gICAgICBsYXN0TWVhc3VyZWRJbmRleCA9IGluc3RhbmNlUHJvcHMubGFzdE1lYXN1cmVkSW5kZXg7XG5cbiAgaWYgKGluZGV4ID4gbGFzdE1lYXN1cmVkSW5kZXgpIHtcbiAgICB2YXIgb2Zmc2V0ID0gMDtcblxuICAgIGlmIChsYXN0TWVhc3VyZWRJbmRleCA+PSAwKSB7XG4gICAgICB2YXIgaXRlbU1ldGFkYXRhID0gaXRlbU1ldGFkYXRhTWFwW2xhc3RNZWFzdXJlZEluZGV4XTtcbiAgICAgIG9mZnNldCA9IGl0ZW1NZXRhZGF0YS5vZmZzZXQgKyBpdGVtTWV0YWRhdGEuc2l6ZTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gbGFzdE1lYXN1cmVkSW5kZXggKyAxOyBpIDw9IGluZGV4OyBpKyspIHtcbiAgICAgIHZhciBzaXplID0gaXRlbVNpemUoaSk7XG4gICAgICBpdGVtTWV0YWRhdGFNYXBbaV0gPSB7XG4gICAgICAgIG9mZnNldDogb2Zmc2V0LFxuICAgICAgICBzaXplOiBzaXplXG4gICAgICB9O1xuICAgICAgb2Zmc2V0ICs9IHNpemU7XG4gICAgfVxuXG4gICAgaW5zdGFuY2VQcm9wcy5sYXN0TWVhc3VyZWRJbmRleCA9IGluZGV4O1xuICB9XG5cbiAgcmV0dXJuIGl0ZW1NZXRhZGF0YU1hcFtpbmRleF07XG59O1xuXG52YXIgZmluZE5lYXJlc3RJdGVtJDEgPSBmdW5jdGlvbiBmaW5kTmVhcmVzdEl0ZW0ocHJvcHMsIGluc3RhbmNlUHJvcHMsIG9mZnNldCkge1xuICB2YXIgaXRlbU1ldGFkYXRhTWFwID0gaW5zdGFuY2VQcm9wcy5pdGVtTWV0YWRhdGFNYXAsXG4gICAgICBsYXN0TWVhc3VyZWRJbmRleCA9IGluc3RhbmNlUHJvcHMubGFzdE1lYXN1cmVkSW5kZXg7XG4gIHZhciBsYXN0TWVhc3VyZWRJdGVtT2Zmc2V0ID0gbGFzdE1lYXN1cmVkSW5kZXggPiAwID8gaXRlbU1ldGFkYXRhTWFwW2xhc3RNZWFzdXJlZEluZGV4XS5vZmZzZXQgOiAwO1xuXG4gIGlmIChsYXN0TWVhc3VyZWRJdGVtT2Zmc2V0ID49IG9mZnNldCkge1xuICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgbWVhc3VyZWQgaXRlbXMgd2l0aGluIHRoaXMgcmFuZ2UganVzdCB1c2UgYSBiaW5hcnkgc2VhcmNoIGFzIGl0J3MgZmFzdGVyLlxuICAgIHJldHVybiBmaW5kTmVhcmVzdEl0ZW1CaW5hcnlTZWFyY2gkMShwcm9wcywgaW5zdGFuY2VQcm9wcywgbGFzdE1lYXN1cmVkSW5kZXgsIDAsIG9mZnNldCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gSWYgd2UgaGF2ZW4ndCB5ZXQgbWVhc3VyZWQgdGhpcyBoaWdoLCBmYWxsYmFjayB0byBhbiBleHBvbmVudGlhbCBzZWFyY2ggd2l0aCBhbiBpbm5lciBiaW5hcnkgc2VhcmNoLlxuICAgIC8vIFRoZSBleHBvbmVudGlhbCBzZWFyY2ggYXZvaWRzIHByZS1jb21wdXRpbmcgc2l6ZXMgZm9yIHRoZSBmdWxsIHNldCBvZiBpdGVtcyBhcyBhIGJpbmFyeSBzZWFyY2ggd291bGQuXG4gICAgLy8gVGhlIG92ZXJhbGwgY29tcGxleGl0eSBmb3IgdGhpcyBhcHByb2FjaCBpcyBPKGxvZyBuKS5cbiAgICByZXR1cm4gZmluZE5lYXJlc3RJdGVtRXhwb25lbnRpYWxTZWFyY2gkMShwcm9wcywgaW5zdGFuY2VQcm9wcywgTWF0aC5tYXgoMCwgbGFzdE1lYXN1cmVkSW5kZXgpLCBvZmZzZXQpO1xuICB9XG59O1xuXG52YXIgZmluZE5lYXJlc3RJdGVtQmluYXJ5U2VhcmNoJDEgPSBmdW5jdGlvbiBmaW5kTmVhcmVzdEl0ZW1CaW5hcnlTZWFyY2gocHJvcHMsIGluc3RhbmNlUHJvcHMsIGhpZ2gsIGxvdywgb2Zmc2V0KSB7XG4gIHdoaWxlIChsb3cgPD0gaGlnaCkge1xuICAgIHZhciBtaWRkbGUgPSBsb3cgKyBNYXRoLmZsb29yKChoaWdoIC0gbG93KSAvIDIpO1xuICAgIHZhciBjdXJyZW50T2Zmc2V0ID0gZ2V0SXRlbU1ldGFkYXRhJDEocHJvcHMsIG1pZGRsZSwgaW5zdGFuY2VQcm9wcykub2Zmc2V0O1xuXG4gICAgaWYgKGN1cnJlbnRPZmZzZXQgPT09IG9mZnNldCkge1xuICAgICAgcmV0dXJuIG1pZGRsZTtcbiAgICB9IGVsc2UgaWYgKGN1cnJlbnRPZmZzZXQgPCBvZmZzZXQpIHtcbiAgICAgIGxvdyA9IG1pZGRsZSArIDE7XG4gICAgfSBlbHNlIGlmIChjdXJyZW50T2Zmc2V0ID4gb2Zmc2V0KSB7XG4gICAgICBoaWdoID0gbWlkZGxlIC0gMTtcbiAgICB9XG4gIH1cblxuICBpZiAobG93ID4gMCkge1xuICAgIHJldHVybiBsb3cgLSAxO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAwO1xuICB9XG59O1xuXG52YXIgZmluZE5lYXJlc3RJdGVtRXhwb25lbnRpYWxTZWFyY2gkMSA9IGZ1bmN0aW9uIGZpbmROZWFyZXN0SXRlbUV4cG9uZW50aWFsU2VhcmNoKHByb3BzLCBpbnN0YW5jZVByb3BzLCBpbmRleCwgb2Zmc2V0KSB7XG4gIHZhciBpdGVtQ291bnQgPSBwcm9wcy5pdGVtQ291bnQ7XG4gIHZhciBpbnRlcnZhbCA9IDE7XG5cbiAgd2hpbGUgKGluZGV4IDwgaXRlbUNvdW50ICYmIGdldEl0ZW1NZXRhZGF0YSQxKHByb3BzLCBpbmRleCwgaW5zdGFuY2VQcm9wcykub2Zmc2V0IDwgb2Zmc2V0KSB7XG4gICAgaW5kZXggKz0gaW50ZXJ2YWw7XG4gICAgaW50ZXJ2YWwgKj0gMjtcbiAgfVxuXG4gIHJldHVybiBmaW5kTmVhcmVzdEl0ZW1CaW5hcnlTZWFyY2gkMShwcm9wcywgaW5zdGFuY2VQcm9wcywgTWF0aC5taW4oaW5kZXgsIGl0ZW1Db3VudCAtIDEpLCBNYXRoLmZsb29yKGluZGV4IC8gMiksIG9mZnNldCk7XG59O1xuXG52YXIgZ2V0RXN0aW1hdGVkVG90YWxTaXplID0gZnVuY3Rpb24gZ2V0RXN0aW1hdGVkVG90YWxTaXplKF9yZWYyLCBfcmVmMykge1xuICB2YXIgaXRlbUNvdW50ID0gX3JlZjIuaXRlbUNvdW50O1xuICB2YXIgaXRlbU1ldGFkYXRhTWFwID0gX3JlZjMuaXRlbU1ldGFkYXRhTWFwLFxuICAgICAgZXN0aW1hdGVkSXRlbVNpemUgPSBfcmVmMy5lc3RpbWF0ZWRJdGVtU2l6ZSxcbiAgICAgIGxhc3RNZWFzdXJlZEluZGV4ID0gX3JlZjMubGFzdE1lYXN1cmVkSW5kZXg7XG4gIHZhciB0b3RhbFNpemVPZk1lYXN1cmVkSXRlbXMgPSAwOyAvLyBFZGdlIGNhc2UgY2hlY2sgZm9yIHdoZW4gdGhlIG51bWJlciBvZiBpdGVtcyBkZWNyZWFzZXMgd2hpbGUgYSBzY3JvbGwgaXMgaW4gcHJvZ3Jlc3MuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9idmF1Z2huL3JlYWN0LXdpbmRvdy9wdWxsLzEzOFxuXG4gIGlmIChsYXN0TWVhc3VyZWRJbmRleCA+PSBpdGVtQ291bnQpIHtcbiAgICBsYXN0TWVhc3VyZWRJbmRleCA9IGl0ZW1Db3VudCAtIDE7XG4gIH1cblxuICBpZiAobGFzdE1lYXN1cmVkSW5kZXggPj0gMCkge1xuICAgIHZhciBpdGVtTWV0YWRhdGEgPSBpdGVtTWV0YWRhdGFNYXBbbGFzdE1lYXN1cmVkSW5kZXhdO1xuICAgIHRvdGFsU2l6ZU9mTWVhc3VyZWRJdGVtcyA9IGl0ZW1NZXRhZGF0YS5vZmZzZXQgKyBpdGVtTWV0YWRhdGEuc2l6ZTtcbiAgfVxuXG4gIHZhciBudW1Vbm1lYXN1cmVkSXRlbXMgPSBpdGVtQ291bnQgLSBsYXN0TWVhc3VyZWRJbmRleCAtIDE7XG4gIHZhciB0b3RhbFNpemVPZlVubWVhc3VyZWRJdGVtcyA9IG51bVVubWVhc3VyZWRJdGVtcyAqIGVzdGltYXRlZEl0ZW1TaXplO1xuICByZXR1cm4gdG90YWxTaXplT2ZNZWFzdXJlZEl0ZW1zICsgdG90YWxTaXplT2ZVbm1lYXN1cmVkSXRlbXM7XG59O1xuXG52YXIgVmFyaWFibGVTaXplTGlzdCA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVMaXN0Q29tcG9uZW50KHtcbiAgZ2V0SXRlbU9mZnNldDogZnVuY3Rpb24gZ2V0SXRlbU9mZnNldChwcm9wcywgaW5kZXgsIGluc3RhbmNlUHJvcHMpIHtcbiAgICByZXR1cm4gZ2V0SXRlbU1ldGFkYXRhJDEocHJvcHMsIGluZGV4LCBpbnN0YW5jZVByb3BzKS5vZmZzZXQ7XG4gIH0sXG4gIGdldEl0ZW1TaXplOiBmdW5jdGlvbiBnZXRJdGVtU2l6ZShwcm9wcywgaW5kZXgsIGluc3RhbmNlUHJvcHMpIHtcbiAgICByZXR1cm4gaW5zdGFuY2VQcm9wcy5pdGVtTWV0YWRhdGFNYXBbaW5kZXhdLnNpemU7XG4gIH0sXG4gIGdldEVzdGltYXRlZFRvdGFsU2l6ZTogZ2V0RXN0aW1hdGVkVG90YWxTaXplLFxuICBnZXRPZmZzZXRGb3JJbmRleEFuZEFsaWdubWVudDogZnVuY3Rpb24gZ2V0T2Zmc2V0Rm9ySW5kZXhBbmRBbGlnbm1lbnQocHJvcHMsIGluZGV4LCBhbGlnbiwgc2Nyb2xsT2Zmc2V0LCBpbnN0YW5jZVByb3BzKSB7XG4gICAgdmFyIGRpcmVjdGlvbiA9IHByb3BzLmRpcmVjdGlvbixcbiAgICAgICAgaGVpZ2h0ID0gcHJvcHMuaGVpZ2h0LFxuICAgICAgICBsYXlvdXQgPSBwcm9wcy5sYXlvdXQsXG4gICAgICAgIHdpZHRoID0gcHJvcHMud2lkdGg7IC8vIFRPRE8gRGVwcmVjYXRlIGRpcmVjdGlvbiBcImhvcml6b250YWxcIlxuXG4gICAgdmFyIGlzSG9yaXpvbnRhbCA9IGRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnIHx8IGxheW91dCA9PT0gJ2hvcml6b250YWwnO1xuICAgIHZhciBzaXplID0gaXNIb3Jpem9udGFsID8gd2lkdGggOiBoZWlnaHQ7XG4gICAgdmFyIGl0ZW1NZXRhZGF0YSA9IGdldEl0ZW1NZXRhZGF0YSQxKHByb3BzLCBpbmRleCwgaW5zdGFuY2VQcm9wcyk7IC8vIEdldCBlc3RpbWF0ZWQgdG90YWwgc2l6ZSBhZnRlciBJdGVtTWV0YWRhdGEgaXMgY29tcHV0ZWQsXG4gICAgLy8gVG8gZW5zdXJlIGl0IHJlZmxlY3RzIGFjdHVhbCBtZWFzdXJlbWVudHMgaW5zdGVhZCBvZiBqdXN0IGVzdGltYXRlcy5cblxuICAgIHZhciBlc3RpbWF0ZWRUb3RhbFNpemUgPSBnZXRFc3RpbWF0ZWRUb3RhbFNpemUocHJvcHMsIGluc3RhbmNlUHJvcHMpO1xuICAgIHZhciBtYXhPZmZzZXQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihlc3RpbWF0ZWRUb3RhbFNpemUgLSBzaXplLCBpdGVtTWV0YWRhdGEub2Zmc2V0KSk7XG4gICAgdmFyIG1pbk9mZnNldCA9IE1hdGgubWF4KDAsIGl0ZW1NZXRhZGF0YS5vZmZzZXQgLSBzaXplICsgaXRlbU1ldGFkYXRhLnNpemUpO1xuXG4gICAgaWYgKGFsaWduID09PSAnc21hcnQnKSB7XG4gICAgICBpZiAoc2Nyb2xsT2Zmc2V0ID49IG1pbk9mZnNldCAtIHNpemUgJiYgc2Nyb2xsT2Zmc2V0IDw9IG1heE9mZnNldCArIHNpemUpIHtcbiAgICAgICAgYWxpZ24gPSAnYXV0byc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhbGlnbiA9ICdjZW50ZXInO1xuICAgICAgfVxuICAgIH1cblxuICAgIHN3aXRjaCAoYWxpZ24pIHtcbiAgICAgIGNhc2UgJ3N0YXJ0JzpcbiAgICAgICAgcmV0dXJuIG1heE9mZnNldDtcblxuICAgICAgY2FzZSAnZW5kJzpcbiAgICAgICAgcmV0dXJuIG1pbk9mZnNldDtcblxuICAgICAgY2FzZSAnY2VudGVyJzpcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQobWluT2Zmc2V0ICsgKG1heE9mZnNldCAtIG1pbk9mZnNldCkgLyAyKTtcblxuICAgICAgY2FzZSAnYXV0byc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAoc2Nyb2xsT2Zmc2V0ID49IG1pbk9mZnNldCAmJiBzY3JvbGxPZmZzZXQgPD0gbWF4T2Zmc2V0KSB7XG4gICAgICAgICAgcmV0dXJuIHNjcm9sbE9mZnNldDtcbiAgICAgICAgfSBlbHNlIGlmIChzY3JvbGxPZmZzZXQgPCBtaW5PZmZzZXQpIHtcbiAgICAgICAgICByZXR1cm4gbWluT2Zmc2V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBtYXhPZmZzZXQ7XG4gICAgICAgIH1cblxuICAgIH1cbiAgfSxcbiAgZ2V0U3RhcnRJbmRleEZvck9mZnNldDogZnVuY3Rpb24gZ2V0U3RhcnRJbmRleEZvck9mZnNldChwcm9wcywgb2Zmc2V0LCBpbnN0YW5jZVByb3BzKSB7XG4gICAgcmV0dXJuIGZpbmROZWFyZXN0SXRlbSQxKHByb3BzLCBpbnN0YW5jZVByb3BzLCBvZmZzZXQpO1xuICB9LFxuICBnZXRTdG9wSW5kZXhGb3JTdGFydEluZGV4OiBmdW5jdGlvbiBnZXRTdG9wSW5kZXhGb3JTdGFydEluZGV4KHByb3BzLCBzdGFydEluZGV4LCBzY3JvbGxPZmZzZXQsIGluc3RhbmNlUHJvcHMpIHtcbiAgICB2YXIgZGlyZWN0aW9uID0gcHJvcHMuZGlyZWN0aW9uLFxuICAgICAgICBoZWlnaHQgPSBwcm9wcy5oZWlnaHQsXG4gICAgICAgIGl0ZW1Db3VudCA9IHByb3BzLml0ZW1Db3VudCxcbiAgICAgICAgbGF5b3V0ID0gcHJvcHMubGF5b3V0LFxuICAgICAgICB3aWR0aCA9IHByb3BzLndpZHRoOyAvLyBUT0RPIERlcHJlY2F0ZSBkaXJlY3Rpb24gXCJob3Jpem9udGFsXCJcblxuICAgIHZhciBpc0hvcml6b250YWwgPSBkaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyB8fCBsYXlvdXQgPT09ICdob3Jpem9udGFsJztcbiAgICB2YXIgc2l6ZSA9IGlzSG9yaXpvbnRhbCA/IHdpZHRoIDogaGVpZ2h0O1xuICAgIHZhciBpdGVtTWV0YWRhdGEgPSBnZXRJdGVtTWV0YWRhdGEkMShwcm9wcywgc3RhcnRJbmRleCwgaW5zdGFuY2VQcm9wcyk7XG4gICAgdmFyIG1heE9mZnNldCA9IHNjcm9sbE9mZnNldCArIHNpemU7XG4gICAgdmFyIG9mZnNldCA9IGl0ZW1NZXRhZGF0YS5vZmZzZXQgKyBpdGVtTWV0YWRhdGEuc2l6ZTtcbiAgICB2YXIgc3RvcEluZGV4ID0gc3RhcnRJbmRleDtcblxuICAgIHdoaWxlIChzdG9wSW5kZXggPCBpdGVtQ291bnQgLSAxICYmIG9mZnNldCA8IG1heE9mZnNldCkge1xuICAgICAgc3RvcEluZGV4Kys7XG4gICAgICBvZmZzZXQgKz0gZ2V0SXRlbU1ldGFkYXRhJDEocHJvcHMsIHN0b3BJbmRleCwgaW5zdGFuY2VQcm9wcykuc2l6ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RvcEluZGV4O1xuICB9LFxuICBpbml0SW5zdGFuY2VQcm9wczogZnVuY3Rpb24gaW5pdEluc3RhbmNlUHJvcHMocHJvcHMsIGluc3RhbmNlKSB7XG4gICAgdmFyIF9yZWY0ID0gcHJvcHMsXG4gICAgICAgIGVzdGltYXRlZEl0ZW1TaXplID0gX3JlZjQuZXN0aW1hdGVkSXRlbVNpemU7XG4gICAgdmFyIGluc3RhbmNlUHJvcHMgPSB7XG4gICAgICBpdGVtTWV0YWRhdGFNYXA6IHt9LFxuICAgICAgZXN0aW1hdGVkSXRlbVNpemU6IGVzdGltYXRlZEl0ZW1TaXplIHx8IERFRkFVTFRfRVNUSU1BVEVEX0lURU1fU0laRSQxLFxuICAgICAgbGFzdE1lYXN1cmVkSW5kZXg6IC0xXG4gICAgfTtcblxuICAgIGluc3RhbmNlLnJlc2V0QWZ0ZXJJbmRleCA9IGZ1bmN0aW9uIChpbmRleCwgc2hvdWxkRm9yY2VVcGRhdGUpIHtcbiAgICAgIGlmIChzaG91bGRGb3JjZVVwZGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHNob3VsZEZvcmNlVXBkYXRlID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaW5zdGFuY2VQcm9wcy5sYXN0TWVhc3VyZWRJbmRleCA9IE1hdGgubWluKGluc3RhbmNlUHJvcHMubGFzdE1lYXN1cmVkSW5kZXgsIGluZGV4IC0gMSk7IC8vIFdlIGNvdWxkIHBvdGVudGlhbGx5IG9wdGltaXplIGZ1cnRoZXIgYnkgb25seSBldmljdGluZyBzdHlsZXMgYWZ0ZXIgdGhpcyBpbmRleCxcbiAgICAgIC8vIEJ1dCBzaW5jZSBzdHlsZXMgYXJlIG9ubHkgY2FjaGVkIHdoaWxlIHNjcm9sbGluZyBpcyBpbiBwcm9ncmVzcy1cbiAgICAgIC8vIEl0IHNlZW1zIGFuIHVubmVjZXNzYXJ5IG9wdGltaXphdGlvbi5cbiAgICAgIC8vIEl0J3MgdW5saWtlbHkgdGhhdCByZXNldEFmdGVySW5kZXgoKSB3aWxsIGJlIGNhbGxlZCB3aGlsZSBhIHVzZXIgaXMgc2Nyb2xsaW5nLlxuXG4gICAgICBpbnN0YW5jZS5fZ2V0SXRlbVN0eWxlQ2FjaGUoLTEpO1xuXG4gICAgICBpZiAoc2hvdWxkRm9yY2VVcGRhdGUpIHtcbiAgICAgICAgaW5zdGFuY2UuZm9yY2VVcGRhdGUoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIGluc3RhbmNlUHJvcHM7XG4gIH0sXG4gIHNob3VsZFJlc2V0U3R5bGVDYWNoZU9uSXRlbVNpemVDaGFuZ2U6IGZhbHNlLFxuICB2YWxpZGF0ZVByb3BzOiBmdW5jdGlvbiB2YWxpZGF0ZVByb3BzKF9yZWY1KSB7XG4gICAgdmFyIGl0ZW1TaXplID0gX3JlZjUuaXRlbVNpemU7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHR5cGVvZiBpdGVtU2l6ZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBFcnJvcignQW4gaW52YWxpZCBcIml0ZW1TaXplXCIgcHJvcCBoYXMgYmVlbiBzcGVjaWZpZWQuICcgKyAnVmFsdWUgc2hvdWxkIGJlIGEgZnVuY3Rpb24uICcgKyAoXCJcXFwiXCIgKyAoaXRlbVNpemUgPT09IG51bGwgPyAnbnVsbCcgOiB0eXBlb2YgaXRlbVNpemUpICsgXCJcXFwiIHdhcyBzcGVjaWZpZWQuXCIpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pO1xuXG52YXIgRml4ZWRTaXplR3JpZCA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVHcmlkQ29tcG9uZW50KHtcbiAgZ2V0Q29sdW1uT2Zmc2V0OiBmdW5jdGlvbiBnZXRDb2x1bW5PZmZzZXQoX3JlZiwgaW5kZXgpIHtcbiAgICB2YXIgY29sdW1uV2lkdGggPSBfcmVmLmNvbHVtbldpZHRoO1xuICAgIHJldHVybiBpbmRleCAqIGNvbHVtbldpZHRoO1xuICB9LFxuICBnZXRDb2x1bW5XaWR0aDogZnVuY3Rpb24gZ2V0Q29sdW1uV2lkdGgoX3JlZjIsIGluZGV4KSB7XG4gICAgdmFyIGNvbHVtbldpZHRoID0gX3JlZjIuY29sdW1uV2lkdGg7XG4gICAgcmV0dXJuIGNvbHVtbldpZHRoO1xuICB9LFxuICBnZXRSb3dPZmZzZXQ6IGZ1bmN0aW9uIGdldFJvd09mZnNldChfcmVmMywgaW5kZXgpIHtcbiAgICB2YXIgcm93SGVpZ2h0ID0gX3JlZjMucm93SGVpZ2h0O1xuICAgIHJldHVybiBpbmRleCAqIHJvd0hlaWdodDtcbiAgfSxcbiAgZ2V0Um93SGVpZ2h0OiBmdW5jdGlvbiBnZXRSb3dIZWlnaHQoX3JlZjQsIGluZGV4KSB7XG4gICAgdmFyIHJvd0hlaWdodCA9IF9yZWY0LnJvd0hlaWdodDtcbiAgICByZXR1cm4gcm93SGVpZ2h0O1xuICB9LFxuICBnZXRFc3RpbWF0ZWRUb3RhbEhlaWdodDogZnVuY3Rpb24gZ2V0RXN0aW1hdGVkVG90YWxIZWlnaHQoX3JlZjUpIHtcbiAgICB2YXIgcm93Q291bnQgPSBfcmVmNS5yb3dDb3VudCxcbiAgICAgICAgcm93SGVpZ2h0ID0gX3JlZjUucm93SGVpZ2h0O1xuICAgIHJldHVybiByb3dIZWlnaHQgKiByb3dDb3VudDtcbiAgfSxcbiAgZ2V0RXN0aW1hdGVkVG90YWxXaWR0aDogZnVuY3Rpb24gZ2V0RXN0aW1hdGVkVG90YWxXaWR0aChfcmVmNikge1xuICAgIHZhciBjb2x1bW5Db3VudCA9IF9yZWY2LmNvbHVtbkNvdW50LFxuICAgICAgICBjb2x1bW5XaWR0aCA9IF9yZWY2LmNvbHVtbldpZHRoO1xuICAgIHJldHVybiBjb2x1bW5XaWR0aCAqIGNvbHVtbkNvdW50O1xuICB9LFxuICBnZXRPZmZzZXRGb3JDb2x1bW5BbmRBbGlnbm1lbnQ6IGZ1bmN0aW9uIGdldE9mZnNldEZvckNvbHVtbkFuZEFsaWdubWVudChfcmVmNywgY29sdW1uSW5kZXgsIGFsaWduLCBzY3JvbGxMZWZ0LCBpbnN0YW5jZVByb3BzLCBzY3JvbGxiYXJTaXplKSB7XG4gICAgdmFyIGNvbHVtbkNvdW50ID0gX3JlZjcuY29sdW1uQ291bnQsXG4gICAgICAgIGNvbHVtbldpZHRoID0gX3JlZjcuY29sdW1uV2lkdGgsXG4gICAgICAgIHdpZHRoID0gX3JlZjcud2lkdGg7XG4gICAgdmFyIGxhc3RDb2x1bW5PZmZzZXQgPSBNYXRoLm1heCgwLCBjb2x1bW5Db3VudCAqIGNvbHVtbldpZHRoIC0gd2lkdGgpO1xuICAgIHZhciBtYXhPZmZzZXQgPSBNYXRoLm1pbihsYXN0Q29sdW1uT2Zmc2V0LCBjb2x1bW5JbmRleCAqIGNvbHVtbldpZHRoKTtcbiAgICB2YXIgbWluT2Zmc2V0ID0gTWF0aC5tYXgoMCwgY29sdW1uSW5kZXggKiBjb2x1bW5XaWR0aCAtIHdpZHRoICsgc2Nyb2xsYmFyU2l6ZSArIGNvbHVtbldpZHRoKTtcblxuICAgIGlmIChhbGlnbiA9PT0gJ3NtYXJ0Jykge1xuICAgICAgaWYgKHNjcm9sbExlZnQgPj0gbWluT2Zmc2V0IC0gd2lkdGggJiYgc2Nyb2xsTGVmdCA8PSBtYXhPZmZzZXQgKyB3aWR0aCkge1xuICAgICAgICBhbGlnbiA9ICdhdXRvJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFsaWduID0gJ2NlbnRlcic7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3dpdGNoIChhbGlnbikge1xuICAgICAgY2FzZSAnc3RhcnQnOlxuICAgICAgICByZXR1cm4gbWF4T2Zmc2V0O1xuXG4gICAgICBjYXNlICdlbmQnOlxuICAgICAgICByZXR1cm4gbWluT2Zmc2V0O1xuXG4gICAgICBjYXNlICdjZW50ZXInOlxuICAgICAgICAvLyBcIkNlbnRlcmVkXCIgb2Zmc2V0IGlzIHVzdWFsbHkgdGhlIGF2ZXJhZ2Ugb2YgdGhlIG1pbiBhbmQgbWF4LlxuICAgICAgICAvLyBCdXQgbmVhciB0aGUgZWRnZXMgb2YgdGhlIGxpc3QsIHRoaXMgZG9lc24ndCBob2xkIHRydWUuXG4gICAgICAgIHZhciBtaWRkbGVPZmZzZXQgPSBNYXRoLnJvdW5kKG1pbk9mZnNldCArIChtYXhPZmZzZXQgLSBtaW5PZmZzZXQpIC8gMik7XG5cbiAgICAgICAgaWYgKG1pZGRsZU9mZnNldCA8IE1hdGguY2VpbCh3aWR0aCAvIDIpKSB7XG4gICAgICAgICAgcmV0dXJuIDA7IC8vIG5lYXIgdGhlIGJlZ2lubmluZ1xuICAgICAgICB9IGVsc2UgaWYgKG1pZGRsZU9mZnNldCA+IGxhc3RDb2x1bW5PZmZzZXQgKyBNYXRoLmZsb29yKHdpZHRoIC8gMikpIHtcbiAgICAgICAgICByZXR1cm4gbGFzdENvbHVtbk9mZnNldDsgLy8gbmVhciB0aGUgZW5kXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIG1pZGRsZU9mZnNldDtcbiAgICAgICAgfVxuXG4gICAgICBjYXNlICdhdXRvJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChzY3JvbGxMZWZ0ID49IG1pbk9mZnNldCAmJiBzY3JvbGxMZWZ0IDw9IG1heE9mZnNldCkge1xuICAgICAgICAgIHJldHVybiBzY3JvbGxMZWZ0O1xuICAgICAgICB9IGVsc2UgaWYgKG1pbk9mZnNldCA+IG1heE9mZnNldCkge1xuICAgICAgICAgIC8vIEJlY2F1c2Ugd2Ugb25seSB0YWtlIGludG8gYWNjb3VudCB0aGUgc2Nyb2xsYmFyIHNpemUgd2hlbiBjYWxjdWxhdGluZyBtaW5PZmZzZXRcbiAgICAgICAgICAvLyB0aGlzIHZhbHVlIGNhbiBiZSBsYXJnZXIgdGhhbiBtYXhPZmZzZXQgd2hlbiBhdCB0aGUgZW5kIG9mIHRoZSBsaXN0XG4gICAgICAgICAgcmV0dXJuIG1pbk9mZnNldDtcbiAgICAgICAgfSBlbHNlIGlmIChzY3JvbGxMZWZ0IDwgbWluT2Zmc2V0KSB7XG4gICAgICAgICAgcmV0dXJuIG1pbk9mZnNldDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gbWF4T2Zmc2V0O1xuICAgICAgICB9XG5cbiAgICB9XG4gIH0sXG4gIGdldE9mZnNldEZvclJvd0FuZEFsaWdubWVudDogZnVuY3Rpb24gZ2V0T2Zmc2V0Rm9yUm93QW5kQWxpZ25tZW50KF9yZWY4LCByb3dJbmRleCwgYWxpZ24sIHNjcm9sbFRvcCwgaW5zdGFuY2VQcm9wcywgc2Nyb2xsYmFyU2l6ZSkge1xuICAgIHZhciByb3dIZWlnaHQgPSBfcmVmOC5yb3dIZWlnaHQsXG4gICAgICAgIGhlaWdodCA9IF9yZWY4LmhlaWdodCxcbiAgICAgICAgcm93Q291bnQgPSBfcmVmOC5yb3dDb3VudDtcbiAgICB2YXIgbGFzdFJvd09mZnNldCA9IE1hdGgubWF4KDAsIHJvd0NvdW50ICogcm93SGVpZ2h0IC0gaGVpZ2h0KTtcbiAgICB2YXIgbWF4T2Zmc2V0ID0gTWF0aC5taW4obGFzdFJvd09mZnNldCwgcm93SW5kZXggKiByb3dIZWlnaHQpO1xuICAgIHZhciBtaW5PZmZzZXQgPSBNYXRoLm1heCgwLCByb3dJbmRleCAqIHJvd0hlaWdodCAtIGhlaWdodCArIHNjcm9sbGJhclNpemUgKyByb3dIZWlnaHQpO1xuXG4gICAgaWYgKGFsaWduID09PSAnc21hcnQnKSB7XG4gICAgICBpZiAoc2Nyb2xsVG9wID49IG1pbk9mZnNldCAtIGhlaWdodCAmJiBzY3JvbGxUb3AgPD0gbWF4T2Zmc2V0ICsgaGVpZ2h0KSB7XG4gICAgICAgIGFsaWduID0gJ2F1dG8nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWxpZ24gPSAnY2VudGVyJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzd2l0Y2ggKGFsaWduKSB7XG4gICAgICBjYXNlICdzdGFydCc6XG4gICAgICAgIHJldHVybiBtYXhPZmZzZXQ7XG5cbiAgICAgIGNhc2UgJ2VuZCc6XG4gICAgICAgIHJldHVybiBtaW5PZmZzZXQ7XG5cbiAgICAgIGNhc2UgJ2NlbnRlcic6XG4gICAgICAgIC8vIFwiQ2VudGVyZWRcIiBvZmZzZXQgaXMgdXN1YWxseSB0aGUgYXZlcmFnZSBvZiB0aGUgbWluIGFuZCBtYXguXG4gICAgICAgIC8vIEJ1dCBuZWFyIHRoZSBlZGdlcyBvZiB0aGUgbGlzdCwgdGhpcyBkb2Vzbid0IGhvbGQgdHJ1ZS5cbiAgICAgICAgdmFyIG1pZGRsZU9mZnNldCA9IE1hdGgucm91bmQobWluT2Zmc2V0ICsgKG1heE9mZnNldCAtIG1pbk9mZnNldCkgLyAyKTtcblxuICAgICAgICBpZiAobWlkZGxlT2Zmc2V0IDwgTWF0aC5jZWlsKGhlaWdodCAvIDIpKSB7XG4gICAgICAgICAgcmV0dXJuIDA7IC8vIG5lYXIgdGhlIGJlZ2lubmluZ1xuICAgICAgICB9IGVsc2UgaWYgKG1pZGRsZU9mZnNldCA+IGxhc3RSb3dPZmZzZXQgKyBNYXRoLmZsb29yKGhlaWdodCAvIDIpKSB7XG4gICAgICAgICAgcmV0dXJuIGxhc3RSb3dPZmZzZXQ7IC8vIG5lYXIgdGhlIGVuZFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBtaWRkbGVPZmZzZXQ7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSAnYXV0byc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAoc2Nyb2xsVG9wID49IG1pbk9mZnNldCAmJiBzY3JvbGxUb3AgPD0gbWF4T2Zmc2V0KSB7XG4gICAgICAgICAgcmV0dXJuIHNjcm9sbFRvcDtcbiAgICAgICAgfSBlbHNlIGlmIChtaW5PZmZzZXQgPiBtYXhPZmZzZXQpIHtcbiAgICAgICAgICAvLyBCZWNhdXNlIHdlIG9ubHkgdGFrZSBpbnRvIGFjY291bnQgdGhlIHNjcm9sbGJhciBzaXplIHdoZW4gY2FsY3VsYXRpbmcgbWluT2Zmc2V0XG4gICAgICAgICAgLy8gdGhpcyB2YWx1ZSBjYW4gYmUgbGFyZ2VyIHRoYW4gbWF4T2Zmc2V0IHdoZW4gYXQgdGhlIGVuZCBvZiB0aGUgbGlzdFxuICAgICAgICAgIHJldHVybiBtaW5PZmZzZXQ7XG4gICAgICAgIH0gZWxzZSBpZiAoc2Nyb2xsVG9wIDwgbWluT2Zmc2V0KSB7XG4gICAgICAgICAgcmV0dXJuIG1pbk9mZnNldDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gbWF4T2Zmc2V0O1xuICAgICAgICB9XG5cbiAgICB9XG4gIH0sXG4gIGdldENvbHVtblN0YXJ0SW5kZXhGb3JPZmZzZXQ6IGZ1bmN0aW9uIGdldENvbHVtblN0YXJ0SW5kZXhGb3JPZmZzZXQoX3JlZjksIHNjcm9sbExlZnQpIHtcbiAgICB2YXIgY29sdW1uV2lkdGggPSBfcmVmOS5jb2x1bW5XaWR0aCxcbiAgICAgICAgY29sdW1uQ291bnQgPSBfcmVmOS5jb2x1bW5Db3VudDtcbiAgICByZXR1cm4gTWF0aC5tYXgoMCwgTWF0aC5taW4oY29sdW1uQ291bnQgLSAxLCBNYXRoLmZsb29yKHNjcm9sbExlZnQgLyBjb2x1bW5XaWR0aCkpKTtcbiAgfSxcbiAgZ2V0Q29sdW1uU3RvcEluZGV4Rm9yU3RhcnRJbmRleDogZnVuY3Rpb24gZ2V0Q29sdW1uU3RvcEluZGV4Rm9yU3RhcnRJbmRleChfcmVmMTAsIHN0YXJ0SW5kZXgsIHNjcm9sbExlZnQpIHtcbiAgICB2YXIgY29sdW1uV2lkdGggPSBfcmVmMTAuY29sdW1uV2lkdGgsXG4gICAgICAgIGNvbHVtbkNvdW50ID0gX3JlZjEwLmNvbHVtbkNvdW50LFxuICAgICAgICB3aWR0aCA9IF9yZWYxMC53aWR0aDtcbiAgICB2YXIgbGVmdCA9IHN0YXJ0SW5kZXggKiBjb2x1bW5XaWR0aDtcbiAgICB2YXIgbnVtVmlzaWJsZUNvbHVtbnMgPSBNYXRoLmNlaWwoKHdpZHRoICsgc2Nyb2xsTGVmdCAtIGxlZnQpIC8gY29sdW1uV2lkdGgpO1xuICAgIHJldHVybiBNYXRoLm1heCgwLCBNYXRoLm1pbihjb2x1bW5Db3VudCAtIDEsIHN0YXJ0SW5kZXggKyBudW1WaXNpYmxlQ29sdW1ucyAtIDEgLy8gLTEgaXMgYmVjYXVzZSBzdG9wIGluZGV4IGlzIGluY2x1c2l2ZVxuICAgICkpO1xuICB9LFxuICBnZXRSb3dTdGFydEluZGV4Rm9yT2Zmc2V0OiBmdW5jdGlvbiBnZXRSb3dTdGFydEluZGV4Rm9yT2Zmc2V0KF9yZWYxMSwgc2Nyb2xsVG9wKSB7XG4gICAgdmFyIHJvd0hlaWdodCA9IF9yZWYxMS5yb3dIZWlnaHQsXG4gICAgICAgIHJvd0NvdW50ID0gX3JlZjExLnJvd0NvdW50O1xuICAgIHJldHVybiBNYXRoLm1heCgwLCBNYXRoLm1pbihyb3dDb3VudCAtIDEsIE1hdGguZmxvb3Ioc2Nyb2xsVG9wIC8gcm93SGVpZ2h0KSkpO1xuICB9LFxuICBnZXRSb3dTdG9wSW5kZXhGb3JTdGFydEluZGV4OiBmdW5jdGlvbiBnZXRSb3dTdG9wSW5kZXhGb3JTdGFydEluZGV4KF9yZWYxMiwgc3RhcnRJbmRleCwgc2Nyb2xsVG9wKSB7XG4gICAgdmFyIHJvd0hlaWdodCA9IF9yZWYxMi5yb3dIZWlnaHQsXG4gICAgICAgIHJvd0NvdW50ID0gX3JlZjEyLnJvd0NvdW50LFxuICAgICAgICBoZWlnaHQgPSBfcmVmMTIuaGVpZ2h0O1xuICAgIHZhciB0b3AgPSBzdGFydEluZGV4ICogcm93SGVpZ2h0O1xuICAgIHZhciBudW1WaXNpYmxlUm93cyA9IE1hdGguY2VpbCgoaGVpZ2h0ICsgc2Nyb2xsVG9wIC0gdG9wKSAvIHJvd0hlaWdodCk7XG4gICAgcmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWluKHJvd0NvdW50IC0gMSwgc3RhcnRJbmRleCArIG51bVZpc2libGVSb3dzIC0gMSAvLyAtMSBpcyBiZWNhdXNlIHN0b3AgaW5kZXggaXMgaW5jbHVzaXZlXG4gICAgKSk7XG4gIH0sXG4gIGluaXRJbnN0YW5jZVByb3BzOiBmdW5jdGlvbiBpbml0SW5zdGFuY2VQcm9wcyhwcm9wcykgey8vIE5vb3BcbiAgfSxcbiAgc2hvdWxkUmVzZXRTdHlsZUNhY2hlT25JdGVtU2l6ZUNoYW5nZTogdHJ1ZSxcbiAgdmFsaWRhdGVQcm9wczogZnVuY3Rpb24gdmFsaWRhdGVQcm9wcyhfcmVmMTMpIHtcbiAgICB2YXIgY29sdW1uV2lkdGggPSBfcmVmMTMuY29sdW1uV2lkdGgsXG4gICAgICAgIHJvd0hlaWdodCA9IF9yZWYxMy5yb3dIZWlnaHQ7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHR5cGVvZiBjb2x1bW5XaWR0aCAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ0FuIGludmFsaWQgXCJjb2x1bW5XaWR0aFwiIHByb3AgaGFzIGJlZW4gc3BlY2lmaWVkLiAnICsgJ1ZhbHVlIHNob3VsZCBiZSBhIG51bWJlci4gJyArIChcIlxcXCJcIiArIChjb2x1bW5XaWR0aCA9PT0gbnVsbCA/ICdudWxsJyA6IHR5cGVvZiBjb2x1bW5XaWR0aCkgKyBcIlxcXCIgd2FzIHNwZWNpZmllZC5cIikpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHJvd0hlaWdodCAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ0FuIGludmFsaWQgXCJyb3dIZWlnaHRcIiBwcm9wIGhhcyBiZWVuIHNwZWNpZmllZC4gJyArICdWYWx1ZSBzaG91bGQgYmUgYSBudW1iZXIuICcgKyAoXCJcXFwiXCIgKyAocm93SGVpZ2h0ID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIHJvd0hlaWdodCkgKyBcIlxcXCIgd2FzIHNwZWNpZmllZC5cIikpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufSk7XG5cbnZhciBGaXhlZFNpemVMaXN0ID1cbi8qI19fUFVSRV9fKi9cbmNyZWF0ZUxpc3RDb21wb25lbnQoe1xuICBnZXRJdGVtT2Zmc2V0OiBmdW5jdGlvbiBnZXRJdGVtT2Zmc2V0KF9yZWYsIGluZGV4KSB7XG4gICAgdmFyIGl0ZW1TaXplID0gX3JlZi5pdGVtU2l6ZTtcbiAgICByZXR1cm4gaW5kZXggKiBpdGVtU2l6ZTtcbiAgfSxcbiAgZ2V0SXRlbVNpemU6IGZ1bmN0aW9uIGdldEl0ZW1TaXplKF9yZWYyLCBpbmRleCkge1xuICAgIHZhciBpdGVtU2l6ZSA9IF9yZWYyLml0ZW1TaXplO1xuICAgIHJldHVybiBpdGVtU2l6ZTtcbiAgfSxcbiAgZ2V0RXN0aW1hdGVkVG90YWxTaXplOiBmdW5jdGlvbiBnZXRFc3RpbWF0ZWRUb3RhbFNpemUoX3JlZjMpIHtcbiAgICB2YXIgaXRlbUNvdW50ID0gX3JlZjMuaXRlbUNvdW50LFxuICAgICAgICBpdGVtU2l6ZSA9IF9yZWYzLml0ZW1TaXplO1xuICAgIHJldHVybiBpdGVtU2l6ZSAqIGl0ZW1Db3VudDtcbiAgfSxcbiAgZ2V0T2Zmc2V0Rm9ySW5kZXhBbmRBbGlnbm1lbnQ6IGZ1bmN0aW9uIGdldE9mZnNldEZvckluZGV4QW5kQWxpZ25tZW50KF9yZWY0LCBpbmRleCwgYWxpZ24sIHNjcm9sbE9mZnNldCkge1xuICAgIHZhciBkaXJlY3Rpb24gPSBfcmVmNC5kaXJlY3Rpb24sXG4gICAgICAgIGhlaWdodCA9IF9yZWY0LmhlaWdodCxcbiAgICAgICAgaXRlbUNvdW50ID0gX3JlZjQuaXRlbUNvdW50LFxuICAgICAgICBpdGVtU2l6ZSA9IF9yZWY0Lml0ZW1TaXplLFxuICAgICAgICBsYXlvdXQgPSBfcmVmNC5sYXlvdXQsXG4gICAgICAgIHdpZHRoID0gX3JlZjQud2lkdGg7XG4gICAgLy8gVE9ETyBEZXByZWNhdGUgZGlyZWN0aW9uIFwiaG9yaXpvbnRhbFwiXG4gICAgdmFyIGlzSG9yaXpvbnRhbCA9IGRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnIHx8IGxheW91dCA9PT0gJ2hvcml6b250YWwnO1xuICAgIHZhciBzaXplID0gaXNIb3Jpem9udGFsID8gd2lkdGggOiBoZWlnaHQ7XG4gICAgdmFyIGxhc3RJdGVtT2Zmc2V0ID0gTWF0aC5tYXgoMCwgaXRlbUNvdW50ICogaXRlbVNpemUgLSBzaXplKTtcbiAgICB2YXIgbWF4T2Zmc2V0ID0gTWF0aC5taW4obGFzdEl0ZW1PZmZzZXQsIGluZGV4ICogaXRlbVNpemUpO1xuICAgIHZhciBtaW5PZmZzZXQgPSBNYXRoLm1heCgwLCBpbmRleCAqIGl0ZW1TaXplIC0gc2l6ZSArIGl0ZW1TaXplKTtcblxuICAgIGlmIChhbGlnbiA9PT0gJ3NtYXJ0Jykge1xuICAgICAgaWYgKHNjcm9sbE9mZnNldCA+PSBtaW5PZmZzZXQgLSBzaXplICYmIHNjcm9sbE9mZnNldCA8PSBtYXhPZmZzZXQgKyBzaXplKSB7XG4gICAgICAgIGFsaWduID0gJ2F1dG8nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWxpZ24gPSAnY2VudGVyJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzd2l0Y2ggKGFsaWduKSB7XG4gICAgICBjYXNlICdzdGFydCc6XG4gICAgICAgIHJldHVybiBtYXhPZmZzZXQ7XG5cbiAgICAgIGNhc2UgJ2VuZCc6XG4gICAgICAgIHJldHVybiBtaW5PZmZzZXQ7XG5cbiAgICAgIGNhc2UgJ2NlbnRlcic6XG4gICAgICAgIHtcbiAgICAgICAgICAvLyBcIkNlbnRlcmVkXCIgb2Zmc2V0IGlzIHVzdWFsbHkgdGhlIGF2ZXJhZ2Ugb2YgdGhlIG1pbiBhbmQgbWF4LlxuICAgICAgICAgIC8vIEJ1dCBuZWFyIHRoZSBlZGdlcyBvZiB0aGUgbGlzdCwgdGhpcyBkb2Vzbid0IGhvbGQgdHJ1ZS5cbiAgICAgICAgICB2YXIgbWlkZGxlT2Zmc2V0ID0gTWF0aC5yb3VuZChtaW5PZmZzZXQgKyAobWF4T2Zmc2V0IC0gbWluT2Zmc2V0KSAvIDIpO1xuXG4gICAgICAgICAgaWYgKG1pZGRsZU9mZnNldCA8IE1hdGguY2VpbChzaXplIC8gMikpIHtcbiAgICAgICAgICAgIHJldHVybiAwOyAvLyBuZWFyIHRoZSBiZWdpbm5pbmdcbiAgICAgICAgICB9IGVsc2UgaWYgKG1pZGRsZU9mZnNldCA+IGxhc3RJdGVtT2Zmc2V0ICsgTWF0aC5mbG9vcihzaXplIC8gMikpIHtcbiAgICAgICAgICAgIHJldHVybiBsYXN0SXRlbU9mZnNldDsgLy8gbmVhciB0aGUgZW5kXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBtaWRkbGVPZmZzZXQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgIGNhc2UgJ2F1dG8nOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKHNjcm9sbE9mZnNldCA+PSBtaW5PZmZzZXQgJiYgc2Nyb2xsT2Zmc2V0IDw9IG1heE9mZnNldCkge1xuICAgICAgICAgIHJldHVybiBzY3JvbGxPZmZzZXQ7XG4gICAgICAgIH0gZWxzZSBpZiAoc2Nyb2xsT2Zmc2V0IDwgbWluT2Zmc2V0KSB7XG4gICAgICAgICAgcmV0dXJuIG1pbk9mZnNldDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gbWF4T2Zmc2V0O1xuICAgICAgICB9XG5cbiAgICB9XG4gIH0sXG4gIGdldFN0YXJ0SW5kZXhGb3JPZmZzZXQ6IGZ1bmN0aW9uIGdldFN0YXJ0SW5kZXhGb3JPZmZzZXQoX3JlZjUsIG9mZnNldCkge1xuICAgIHZhciBpdGVtQ291bnQgPSBfcmVmNS5pdGVtQ291bnQsXG4gICAgICAgIGl0ZW1TaXplID0gX3JlZjUuaXRlbVNpemU7XG4gICAgcmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWluKGl0ZW1Db3VudCAtIDEsIE1hdGguZmxvb3Iob2Zmc2V0IC8gaXRlbVNpemUpKSk7XG4gIH0sXG4gIGdldFN0b3BJbmRleEZvclN0YXJ0SW5kZXg6IGZ1bmN0aW9uIGdldFN0b3BJbmRleEZvclN0YXJ0SW5kZXgoX3JlZjYsIHN0YXJ0SW5kZXgsIHNjcm9sbE9mZnNldCkge1xuICAgIHZhciBkaXJlY3Rpb24gPSBfcmVmNi5kaXJlY3Rpb24sXG4gICAgICAgIGhlaWdodCA9IF9yZWY2LmhlaWdodCxcbiAgICAgICAgaXRlbUNvdW50ID0gX3JlZjYuaXRlbUNvdW50LFxuICAgICAgICBpdGVtU2l6ZSA9IF9yZWY2Lml0ZW1TaXplLFxuICAgICAgICBsYXlvdXQgPSBfcmVmNi5sYXlvdXQsXG4gICAgICAgIHdpZHRoID0gX3JlZjYud2lkdGg7XG4gICAgLy8gVE9ETyBEZXByZWNhdGUgZGlyZWN0aW9uIFwiaG9yaXpvbnRhbFwiXG4gICAgdmFyIGlzSG9yaXpvbnRhbCA9IGRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnIHx8IGxheW91dCA9PT0gJ2hvcml6b250YWwnO1xuICAgIHZhciBvZmZzZXQgPSBzdGFydEluZGV4ICogaXRlbVNpemU7XG4gICAgdmFyIHNpemUgPSBpc0hvcml6b250YWwgPyB3aWR0aCA6IGhlaWdodDtcbiAgICB2YXIgbnVtVmlzaWJsZUl0ZW1zID0gTWF0aC5jZWlsKChzaXplICsgc2Nyb2xsT2Zmc2V0IC0gb2Zmc2V0KSAvIGl0ZW1TaXplKTtcbiAgICByZXR1cm4gTWF0aC5tYXgoMCwgTWF0aC5taW4oaXRlbUNvdW50IC0gMSwgc3RhcnRJbmRleCArIG51bVZpc2libGVJdGVtcyAtIDEgLy8gLTEgaXMgYmVjYXVzZSBzdG9wIGluZGV4IGlzIGluY2x1c2l2ZVxuICAgICkpO1xuICB9LFxuICBpbml0SW5zdGFuY2VQcm9wczogZnVuY3Rpb24gaW5pdEluc3RhbmNlUHJvcHMocHJvcHMpIHsvLyBOb29wXG4gIH0sXG4gIHNob3VsZFJlc2V0U3R5bGVDYWNoZU9uSXRlbVNpemVDaGFuZ2U6IHRydWUsXG4gIHZhbGlkYXRlUHJvcHM6IGZ1bmN0aW9uIHZhbGlkYXRlUHJvcHMoX3JlZjcpIHtcbiAgICB2YXIgaXRlbVNpemUgPSBfcmVmNy5pdGVtU2l6ZTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAodHlwZW9mIGl0ZW1TaXplICE9PSAnbnVtYmVyJykge1xuICAgICAgICB0aHJvdyBFcnJvcignQW4gaW52YWxpZCBcIml0ZW1TaXplXCIgcHJvcCBoYXMgYmVlbiBzcGVjaWZpZWQuICcgKyAnVmFsdWUgc2hvdWxkIGJlIGEgbnVtYmVyLiAnICsgKFwiXFxcIlwiICsgKGl0ZW1TaXplID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIGl0ZW1TaXplKSArIFwiXFxcIiB3YXMgc3BlY2lmaWVkLlwiKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59KTtcblxuLy8gUHVsbGVkIGZyb20gcmVhY3QtY29tcGF0XG4vLyBodHRwczovL2dpdGh1Yi5jb20vZGV2ZWxvcGl0L3ByZWFjdC1jb21wYXQvYmxvYi83YzVkZTAwZTdjODVlMmZmZDAxMWJmM2FmMDI4OTliNjNmNjk5ZDNhL3NyYy9pbmRleC5qcyNMMzQ5XG5mdW5jdGlvbiBzaGFsbG93RGlmZmVycyhwcmV2LCBuZXh0KSB7XG4gIGZvciAodmFyIGF0dHJpYnV0ZSBpbiBwcmV2KSB7XG4gICAgaWYgKCEoYXR0cmlidXRlIGluIG5leHQpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBfYXR0cmlidXRlIGluIG5leHQpIHtcbiAgICBpZiAocHJldltfYXR0cmlidXRlXSAhPT0gbmV4dFtfYXR0cmlidXRlXSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vLyBJdCBrbm93cyB0byBjb21wYXJlIGluZGl2aWR1YWwgc3R5bGUgcHJvcHMgYW5kIGlnbm9yZSB0aGUgd3JhcHBlciBvYmplY3QuXG4vLyBTZWUgaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL3JlYWN0LWFwaS5odG1sI3JlYWN0bWVtb1xuXG5mdW5jdGlvbiBhcmVFcXVhbChwcmV2UHJvcHMsIG5leHRQcm9wcykge1xuICB2YXIgcHJldlN0eWxlID0gcHJldlByb3BzLnN0eWxlLFxuICAgICAgcHJldlJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcmV2UHJvcHMsIFtcInN0eWxlXCJdKTtcblxuICB2YXIgbmV4dFN0eWxlID0gbmV4dFByb3BzLnN0eWxlLFxuICAgICAgbmV4dFJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShuZXh0UHJvcHMsIFtcInN0eWxlXCJdKTtcblxuICByZXR1cm4gIXNoYWxsb3dEaWZmZXJzKHByZXZTdHlsZSwgbmV4dFN0eWxlKSAmJiAhc2hhbGxvd0RpZmZlcnMocHJldlJlc3QsIG5leHRSZXN0KTtcbn1cblxuLy8gSXQga25vd3MgdG8gY29tcGFyZSBpbmRpdmlkdWFsIHN0eWxlIHByb3BzIGFuZCBpZ25vcmUgdGhlIHdyYXBwZXIgb2JqZWN0LlxuLy8gU2VlIGh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9yZWFjdC1jb21wb25lbnQuaHRtbCNzaG91bGRjb21wb25lbnR1cGRhdGVcblxuZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gIHJldHVybiAhYXJlRXF1YWwodGhpcy5wcm9wcywgbmV4dFByb3BzKSB8fCBzaGFsbG93RGlmZmVycyh0aGlzLnN0YXRlLCBuZXh0U3RhdGUpO1xufVxuXG5leHBvcnQgeyBWYXJpYWJsZVNpemVHcmlkLCBWYXJpYWJsZVNpemVMaXN0LCBGaXhlZFNpemVHcmlkLCBGaXhlZFNpemVMaXN0LCBhcmVFcXVhbCwgc2hvdWxkQ29tcG9uZW50VXBkYXRlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5lc20uanMubWFwXG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwocm9vdCkge1xuXHR2YXIgcmVzdWx0O1xuXHR2YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cblx0aWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcblx0XHRpZiAoU3ltYm9sLm9ic2VydmFibGUpIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbC5vYnNlcnZhYmxlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2woJ29ic2VydmFibGUnKTtcblx0XHRcdFN5bWJvbC5vYnNlcnZhYmxlID0gcmVzdWx0O1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRyZXN1bHQgPSAnQEBvYnNlcnZhYmxlJztcblx0fVxuXG5cdHJldHVybiByZXN1bHQ7XG59O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgUmVhY3RET00gZnJvbSBcInJlYWN0LWRvbVwiO1xyXG5pbXBvcnQgeyBzZXRFeHRlbnNpb25TdGF0ZSB9IGZyb20gXCIuLi8uLi9jb21tb24vZXh0ZW5zaW9uU3RhdGVcIjtcclxuaW1wb3J0IHsgY3JlYXRlU3RvcmUsIFN0b3JlIH0gZnJvbSBcInJlZHV4XCI7XHJcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XHJcbmltcG9ydCB7IHJlZHVjZXIgfSBmcm9tIFwiLi9zdG9yZS9yZWR1Y2VyXCI7XHJcbmltcG9ydCB7IFZpZXdlckFjdGlvbiB9IGZyb20gXCIuL3N0b3JlL2FjdGlvbnNcIjtcclxuaW1wb3J0IHsgVmlld2VyU3RhdGUgfSBmcm9tIFwiLi9zdG9yZS9zdGF0ZVwiO1xyXG5pbXBvcnQgeyBWaWV3ZXIgfSBmcm9tIFwiLi9jb21wb25lbnRzL1ZpZXdlclwiO1xyXG5cclxuY29uc3Qgc3RvcmU6IFN0b3JlPFZpZXdlclN0YXRlLCBWaWV3ZXJBY3Rpb24+ID0gY3JlYXRlU3RvcmUocmVkdWNlcik7XHJcbnN0b3JlLnN1YnNjcmliZSgoKSA9PiB7XHJcbiAgY29uc3QgeyBjb3VudGVyLCAuLi5zdGF0ZSB9ID0gc3RvcmUuZ2V0U3RhdGUoKTtcclxuICBzZXRFeHRlbnNpb25TdGF0ZShzdGF0ZSk7XHJcbn0pO1xyXG5cclxuUmVhY3RET00ucmVuZGVyKFxyXG4gIDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxyXG4gICAgPFZpZXdlciAvPlxyXG4gIDwvUHJvdmlkZXI+LFxyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidmlld2VyXCIpXHJcbik7XHJcblxyXG4vLyBjb25zdCBjcmVhdGVWaWV3ZXIgPSBhc3luYyAoKSA9PiB7XHJcbi8vICAgY29uc3Qgc2hhZGVyQ29tcGlsYXRpb25FcnJvcnMgPSBjcmVhdGVEaXYoXCJ2aWV3ZXItY29udGVudCBzaGFkZXItZXJyb3JzXCIpO1xyXG4vLyAgIGNvbnN0IFt3ZWJHTENhbnZhcywgd2ViR0xDb250cm9sbGVyXSA9IGNyZWF0ZVdlYkdMQ2FudmFzKFwidmlld2VyLWNvbnRlbnRcIik7XHJcbi8vICAgY29uc3QgbWVzaEJpbmRpbmdzID0gY3JlYXRlTWVzaEJpbmRpbmdzKCk7XHJcbi8vICAgY29uc3QgdW5pZm9ybUJpbmRpbmdzID0gY3JlYXRlVW5pZm9ybUJpbmRpbmdzKCk7XHJcbi8vICAgY29uc3QgaW5kZXhCdWZmZXJJbmZvID0gbmV3IEluZGV4QnVmZmVySW5mbyh3ZWJHTENvbnRyb2xsZXIuY29udGV4dCk7XHJcbi8vICAgY29uc3QgaW5kZXhCdWZmZXJCaW5kaW5nVmFsdWUgPSBuZXcgT2JzZXJ2YWJsZTxudW1iZXJbXT4oW10pO1xyXG4vLyAgIGNvbnN0IGRyYXdPcHRpb25zOiBEcmF3T3B0aW9ucyA9IHsgZHJhd01vZGU6IFwiYXJyYXlzXCIgfTtcclxuXHJcbi8vICAgbGV0IGFuaW1hdGlvbkZyYW1lSGFuZGxlOiBudW1iZXIgPSBudWxsO1xyXG5cclxuLy8gICBjb25zdCBvbk1lc2hDaGFuZ2VkID0gKGlkOiBzdHJpbmcpID0+IHtcclxuLy8gICAgIGNvbnN0IHsgcG9zaXRpb25zLCBjb2xvcnMsIHRleHR1cmVDb29yZGluYXRlcywgaW5kaWNlcyB9ID0gbWVzaGVzLmdldChpZCk7XHJcbi8vICAgICAvL3RvZG8gbWFrZSBpdCBzdHJvbmdseSB0eXBlZCBvYmplY3RcclxuLy8gICAgIG1lc2hCaW5kaW5ncy5nZXQoXCJwb3NpdGlvbnNcIikudmFsdWUuc2V0VmFsdWUocG9zaXRpb25zKTtcclxuLy8gICAgIG1lc2hCaW5kaW5ncy5nZXQoXCJjb2xvcnNcIikudmFsdWUuc2V0VmFsdWUoY29sb3JzKTtcclxuLy8gICAgIG1lc2hCaW5kaW5ncy5nZXQoXCJ0ZXh0dXJlQ29vcmRpbmF0ZXNcIikudmFsdWUuc2V0VmFsdWUodGV4dHVyZUNvb3JkaW5hdGVzKTtcclxuLy8gICAgIGluZGV4QnVmZmVyQmluZGluZ1ZhbHVlLnNldFZhbHVlKGluZGljZXMpO1xyXG4vLyAgIH07XHJcblxyXG4vLyAgIGNvbnN0IG9uU2hhZGVyQ29udGVudENoYW5nZWQgPSAoKSA9PiB7XHJcbi8vICAgICBzaGFkZXJPcHRpb25zLmlubmVySFRNTCA9IFwiXCI7XHJcbi8vICAgICBjb25zdCBjb250ZXh0ID0gd2ViR0xDb250cm9sbGVyLmNvbnRleHQ7XHJcblxyXG4vLyAgICAgaWYgKHNlbGVjdGVkRnJhZ21lbnRDb250ZW50ICYmIHNlbGVjdGVkVmVydGV4Q29udGVudCkge1xyXG4vLyAgICAgICBjb25zdCByZXN1bHQgPSBjb21waWxlU2hhZGVyc0Zyb21Tb3VyY2UoXHJcbi8vICAgICAgICAgY29udGV4dCxcclxuLy8gICAgICAgICBzZWxlY3RlZFZlcnRleENvbnRlbnQsXHJcbi8vICAgICAgICAgc2VsZWN0ZWRGcmFnbWVudENvbnRlbnRcclxuLy8gICAgICAgKTtcclxuXHJcbi8vICAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlc3VsdCkpIHtcclxuLy8gICAgICAgICBzaG93Q29udGVudChcImVycm9yc1wiKTtcclxuLy8gICAgICAgICBzaGFkZXJDb21waWxhdGlvbkVycm9ycy5pbm5lclRleHQgPSBmb3JtYXRTaGFkZXJDb21waWxlRXJyb3JzKFxyXG4vLyAgICAgICAgICAgcmVzdWx0IGFzIFNoYWRlckNvbXBpbGVFcnJvcnNcclxuLy8gICAgICAgICApO1xyXG4vLyAgICAgICB9IGVsc2Uge1xyXG4vLyAgICAgICAgIHNob3dDb250ZW50KFwiY2FudmFzXCIpO1xyXG4vLyAgICAgICAgIGNvbnN0IHByb2dyYW0gPSByZXN1bHQgYXMgV2ViR0xQcm9ncmFtO1xyXG5cclxuLy8gICAgICAgICBjb25zdCB1bmlmb3JtSW5mb3MgPSB1bmlmb3JtQ29tcG9uZW50cy5tYXAodWMgPT4gdWMudW5pZm9ybUluZm8pO1xyXG4vLyAgICAgICAgIGNvbnN0IHRleHR1cmVJbmZvcyA9IHRleHR1cmVDb21wb25lbnRzLm1hcCh0YyA9PiB0Yy50ZXh0dXJlSW5mbyk7XHJcbi8vICAgICAgICAgY29uc3QgYXR0cmlidXRlQnVmZmVySW5mb3MgPSBhdHRyaWJ1dGVCdWZmZXJDb21wb25lbnRzLm1hcChcclxuLy8gICAgICAgICAgIGFiYyA9PiBhYmMuYXR0cmlidXRlQnVmZmVySW5mb1xyXG4vLyAgICAgICAgICk7XHJcblxyXG4vLyAgICAgICAgIGlmIChhbmltYXRpb25GcmFtZUhhbmRsZSAhPT0gbnVsbClcclxuLy8gICAgICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKGFuaW1hdGlvbkZyYW1lSGFuZGxlKTtcclxuXHJcbi8vICAgICAgICAgY29uc3QgcmVuZGVyID0gKCkgPT4ge1xyXG4vLyAgICAgICAgICAgcmVuZGVyUHJvZ3JhbShcclxuLy8gICAgICAgICAgICAgY29udGV4dCxcclxuLy8gICAgICAgICAgICAgcHJvZ3JhbSxcclxuLy8gICAgICAgICAgICAge1xyXG4vLyAgICAgICAgICAgICAgIHVuaWZvcm1JbmZvcyxcclxuLy8gICAgICAgICAgICAgICB0ZXh0dXJlSW5mb3MsXHJcbi8vICAgICAgICAgICAgICAgYXR0cmlidXRlQnVmZmVySW5mb3MsXHJcbi8vICAgICAgICAgICAgICAgaW5kZXhCdWZmZXJJbmZvLFxyXG4vLyAgICAgICAgICAgICB9LFxyXG4vLyAgICAgICAgICAgICBkcmF3T3B0aW9uc1xyXG4vLyAgICAgICAgICAgKTtcclxuXHJcbi8vICAgICAgICAgICBhbmltYXRpb25GcmFtZUhhbmRsZSA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShyZW5kZXIpO1xyXG4vLyAgICAgICAgIH07XHJcblxyXG4vLyAgICAgICAgIHJlbmRlcigpO1xyXG4vLyAgICAgICB9XHJcbi8vICAgICB9IGVsc2Uge1xyXG4vLyAgICAgICBzaG93Q29udGVudChcIm5vbmVcIik7XHJcbi8vICAgICB9XHJcbi8vICAgfTtcclxuXHJcbi8vICAgdmlld2VyT3B0aW9ucy5hcHBlbmRDaGlsZChcclxuLy8gICAgIGNyZWF0ZURpdihcInZpZXdlci1zaGFkZXJzLXRpdGxlXCIsIFtcclxuLy8gICAgICAgY3JlYXRlU2VjdGlvblRpdGxlKFwiRFJBVyBPUFRJT05TXCIsIFwiXCIpLmVsZW1lbnQsXHJcbi8vICAgICBdKVxyXG4vLyAgICk7XHJcblxyXG4vLyAgIGNvbnN0IFttZXNoRHJvcGRvd25FbGVtZW50LCBtZXNoRHJvcGRvd25Db250cm9sbGVyXSA9IGNyZWF0ZURyb3Bkb3duKGl0ZW0gPT4ge1xyXG4vLyAgICAgaWYgKCFpdGVtKSByZXR1cm47XHJcblxyXG4vLyAgICAgb25NZXNoQ2hhbmdlZChpdGVtLmlkKTtcclxuLy8gICAgIHNldFN0YXRlKHsgbWVzaElkOiBpdGVtLmlkIH0pO1xyXG4vLyAgIH0pO1xyXG4vLyAgIG1lc2hEcm9wZG93bkNvbnRyb2xsZXIuc2V0SXRlbXMoXHJcbi8vICAgICBBcnJheS5mcm9tKG1lc2hlcy5lbnRyaWVzKCkpLm1hcCgoW2tleSwgdmFsdWVdKSA9PiAoe1xyXG4vLyAgICAgICBpZDoga2V5LFxyXG4vLyAgICAgICBkaXNwbGF5OiB2YWx1ZS5kaXNwbGF5LFxyXG4vLyAgICAgfSkpXHJcbi8vICAgKTtcclxuLy8gICBtZXNoRHJvcGRvd25Db250cm9sbGVyLnNldFNlbGVjdGVkSXRlbUJ5SWQodmlld2VyU3RhdGUubWVzaElkKTtcclxuLy8gICB2aWV3ZXJPcHRpb25zLmFwcGVuZENoaWxkKHdpdGhMYWJlbChtZXNoRHJvcGRvd25FbGVtZW50LCBcIk1lc2hcIikpO1xyXG5cclxuLy8gICBjb25zdCB7XHJcbi8vICAgICBlbGVtZW50OiBpbmRleEJ1ZmZlckVsZW1lbnQsXHJcbi8vICAgfSA9IGNyZWF0ZUluZGV4QnVmZmVyQ29tcG9uZW50KGluZGV4QnVmZmVyQmluZGluZ1ZhbHVlLCBuZXdWYWx1ZSA9PlxyXG4vLyAgICAgaW5kZXhCdWZmZXJJbmZvLnNldFZhbHVlKG5ld1ZhbHVlKVxyXG4vLyAgICk7XHJcbi8vICAgY29uc3QgaW5kZXhCdWZmZXJDb21wb25lbnQgPSB3aXRoTGFiZWwoaW5kZXhCdWZmZXJFbGVtZW50LCBcIkluZGljZXNcIik7XHJcblxyXG4vLyAgIGNvbnN0IFtkcmF3TW9kZUVsZW1lbnQsIGRyYXdNb2RlQ29udHJvbGxlcl0gPSBjcmVhdGVEcm9wZG93bihpdGVtID0+IHtcclxuLy8gICAgIGlmICghaXRlbSkgcmV0dXJuO1xyXG4vLyAgICAgZHJhd09wdGlvbnMuZHJhd01vZGUgPSBpdGVtLmlkIGFzIFwiYXJyYXlzXCIgfCBcImVsZW1lbnRzXCI7XHJcbi8vICAgICBzZXRFbGVtZW50VmlzaWJpbGl0eShcclxuLy8gICAgICAgaW5kZXhCdWZmZXJDb21wb25lbnQsXHJcbi8vICAgICAgIGRyYXdPcHRpb25zLmRyYXdNb2RlID09PSBcImVsZW1lbnRzXCJcclxuLy8gICAgICk7XHJcbi8vICAgICBzZXRTdGF0ZSh7IGRyYXdNb2RlOiBpdGVtLmlkIH0pO1xyXG4vLyAgIH0pO1xyXG4vLyAgIGRyYXdNb2RlQ29udHJvbGxlci5zZXRJdGVtcyhbXHJcbi8vICAgICB7IGlkOiBcImFycmF5c1wiLCBkaXNwbGF5OiBcIkFycmF5c1wiIH0sXHJcbi8vICAgICB7IGlkOiBcImVsZW1lbnRzXCIsIGRpc3BsYXk6IFwiRWxlbWVudHNcIiB9LFxyXG4vLyAgIF0pO1xyXG4vLyAgIGRyYXdNb2RlQ29udHJvbGxlci5zZXRTZWxlY3RlZEl0ZW1CeUlkKHZpZXdlclN0YXRlLmRyYXdNb2RlKTtcclxuLy8gICB2aWV3ZXJPcHRpb25zLmFwcGVuZENoaWxkKHdpdGhMYWJlbChkcmF3TW9kZUVsZW1lbnQsIFwiRHJhdyBtb2RlXCIpKTtcclxuXHJcbi8vICAgdmlld2VyT3B0aW9ucy5hcHBlbmRDaGlsZChpbmRleEJ1ZmZlckNvbXBvbmVudCk7XHJcbi8vIH07XHJcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTcuMC4xXG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGw9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbj02MDEwMyxwPTYwMTA2O2V4cG9ydHMuRnJhZ21lbnQ9NjAxMDc7ZXhwb3J0cy5TdHJpY3RNb2RlPTYwMTA4O2V4cG9ydHMuUHJvZmlsZXI9NjAxMTQ7dmFyIHE9NjAxMDkscj02MDExMCx0PTYwMTEyO2V4cG9ydHMuU3VzcGVuc2U9NjAxMTM7dmFyIHU9NjAxMTUsdj02MDExNjtcbmlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3Ipe3ZhciB3PVN5bWJvbC5mb3I7bj13KFwicmVhY3QuZWxlbWVudFwiKTtwPXcoXCJyZWFjdC5wb3J0YWxcIik7ZXhwb3J0cy5GcmFnbWVudD13KFwicmVhY3QuZnJhZ21lbnRcIik7ZXhwb3J0cy5TdHJpY3RNb2RlPXcoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTtleHBvcnRzLlByb2ZpbGVyPXcoXCJyZWFjdC5wcm9maWxlclwiKTtxPXcoXCJyZWFjdC5wcm92aWRlclwiKTtyPXcoXCJyZWFjdC5jb250ZXh0XCIpO3Q9dyhcInJlYWN0LmZvcndhcmRfcmVmXCIpO2V4cG9ydHMuU3VzcGVuc2U9dyhcInJlYWN0LnN1c3BlbnNlXCIpO3U9dyhcInJlYWN0Lm1lbW9cIik7dj13KFwicmVhY3QubGF6eVwiKX12YXIgeD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7XG5mdW5jdGlvbiB5KGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT14JiZhW3hdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9ZnVuY3Rpb24geihhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1cbnZhciBBPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxCPXt9O2Z1bmN0aW9uIEMoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9Qjt0aGlzLnVwZGF0ZXI9Y3x8QX1DLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0MucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBFcnJvcih6KDg1KSk7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtDLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtcbmZ1bmN0aW9uIEQoKXt9RC5wcm90b3R5cGU9Qy5wcm90b3R5cGU7ZnVuY3Rpb24gRShhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1CO3RoaXMudXBkYXRlcj1jfHxBfXZhciBGPUUucHJvdG90eXBlPW5ldyBEO0YuY29uc3RydWN0b3I9RTtsKEYsQy5wcm90b3R5cGUpO0YuaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEc9e2N1cnJlbnQ6bnVsbH0sSD1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEk9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIEooYSxiLGMpe3ZhciBlLGQ9e30saz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihlIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihrPVwiXCIrYi5rZXkpLGIpSC5jYWxsKGIsZSkmJiFJLmhhc093blByb3BlcnR5KGUpJiYoZFtlXT1iW2VdKTt2YXIgZz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWcpZC5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxnKXtmb3IodmFyIGY9QXJyYXkoZyksbT0wO208ZzttKyspZlttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWZ9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGUgaW4gZz1hLmRlZmF1bHRQcm9wcyxnKXZvaWQgMD09PWRbZV0mJihkW2VdPWdbZV0pO3JldHVybnskJHR5cGVvZjpuLHR5cGU6YSxrZXk6ayxyZWY6aCxwcm9wczpkLF9vd25lcjpHLmN1cnJlbnR9fVxuZnVuY3Rpb24gSyhhLGIpe3JldHVybnskJHR5cGVvZjpuLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTChhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09bn1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiK2EucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIE09L1xcLysvZztmdW5jdGlvbiBOKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKFwiXCIrYS5rZXkpOmIudG9TdHJpbmcoMzYpfVxuZnVuY3Rpb24gTyhhLGIsYyxlLGQpe3ZhciBrPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1rfHxcImJvb2xlYW5cIj09PWspYT1udWxsO3ZhciBoPSExO2lmKG51bGw9PT1hKWg9ITA7ZWxzZSBzd2l0Y2goayl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpoPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBuOmNhc2UgcDpoPSEwfX1pZihoKXJldHVybiBoPWEsZD1kKGgpLGE9XCJcIj09PWU/XCIuXCIrTihoLDApOmUsQXJyYXkuaXNBcnJheShkKT8oYz1cIlwiLG51bGwhPWEmJihjPWEucmVwbGFjZShNLFwiJCYvXCIpK1wiL1wiKSxPKGQsYixjLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KSk6bnVsbCE9ZCYmKEwoZCkmJihkPUsoZCxjKyghZC5rZXl8fGgmJmgua2V5PT09ZC5rZXk/XCJcIjooXCJcIitkLmtleSkucmVwbGFjZShNLFwiJCYvXCIpK1wiL1wiKSthKSksYi5wdXNoKGQpKSwxO2g9MDtlPVwiXCI9PT1lP1wiLlwiOmUrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGc9XG4wO2c8YS5sZW5ndGg7ZysrKXtrPWFbZ107dmFyIGY9ZStOKGssZyk7aCs9TyhrLGIsYyxmLGQpfWVsc2UgaWYoZj15KGEpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxnPTA7IShrPWEubmV4dCgpKS5kb25lOylrPWsudmFsdWUsZj1lK04oayxnKyspLGgrPU8oayxiLGMsZixkKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1rKXRocm93IGI9XCJcIithLEVycm9yKHooMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PWI/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6YikpO3JldHVybiBofWZ1bmN0aW9uIFAoYSxiLGMpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGU9W10sZD0wO08oYSxlLFwiXCIsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYi5jYWxsKGMsYSxkKyspfSk7cmV0dXJuIGV9XG5mdW5jdGlvbiBRKGEpe2lmKC0xPT09YS5fc3RhdHVzKXt2YXIgYj1hLl9yZXN1bHQ7Yj1iKCk7YS5fc3RhdHVzPTA7YS5fcmVzdWx0PWI7Yi50aGVuKGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihiPWIuZGVmYXVsdCxhLl9zdGF0dXM9MSxhLl9yZXN1bHQ9Yil9LGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yil9KX1pZigxPT09YS5fc3RhdHVzKXJldHVybiBhLl9yZXN1bHQ7dGhyb3cgYS5fcmVzdWx0O312YXIgUj17Y3VycmVudDpudWxsfTtmdW5jdGlvbiBTKCl7dmFyIGE9Ui5jdXJyZW50O2lmKG51bGw9PT1hKXRocm93IEVycm9yKHooMzIxKSk7cmV0dXJuIGF9dmFyIFQ9e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6UixSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzp7dHJhbnNpdGlvbjowfSxSZWFjdEN1cnJlbnRPd25lcjpHLElzU29tZVJlbmRlcmVyQWN0aW5nOntjdXJyZW50OiExfSxhc3NpZ246bH07XG5leHBvcnRzLkNoaWxkcmVuPXttYXA6UCxmb3JFYWNoOmZ1bmN0aW9uKGEsYixjKXtQKGEsZnVuY3Rpb24oKXtiLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sYyl9LGNvdW50OmZ1bmN0aW9uKGEpe3ZhciBiPTA7UChhLGZ1bmN0aW9uKCl7YisrfSk7cmV0dXJuIGJ9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7cmV0dXJuIFAoYSxmdW5jdGlvbihhKXtyZXR1cm4gYX0pfHxbXX0sb25seTpmdW5jdGlvbihhKXtpZighTChhKSl0aHJvdyBFcnJvcih6KDE0MykpO3JldHVybiBhfX07ZXhwb3J0cy5Db21wb25lbnQ9QztleHBvcnRzLlB1cmVDb21wb25lbnQ9RTtleHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPVQ7XG5leHBvcnRzLmNsb25lRWxlbWVudD1mdW5jdGlvbihhLGIsYyl7aWYobnVsbD09PWF8fHZvaWQgMD09PWEpdGhyb3cgRXJyb3IoeigyNjcsYSkpO3ZhciBlPWwoe30sYS5wcm9wcyksZD1hLmtleSxrPWEucmVmLGg9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihrPWIucmVmLGg9Ry5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGQ9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBnPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGYgaW4gYilILmNhbGwoYixmKSYmIUkuaGFzT3duUHJvcGVydHkoZikmJihlW2ZdPXZvaWQgMD09PWJbZl0mJnZvaWQgMCE9PWc/Z1tmXTpiW2ZdKX12YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZS5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxmKXtnPUFycmF5KGYpO2Zvcih2YXIgbT0wO208ZjttKyspZ1ttXT1hcmd1bWVudHNbbSsyXTtlLmNoaWxkcmVuPWd9cmV0dXJueyQkdHlwZW9mOm4sdHlwZTphLnR5cGUsXG5rZXk6ZCxyZWY6ayxwcm9wczplLF9vd25lcjpofX07ZXhwb3J0cy5jcmVhdGVDb250ZXh0PWZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9bnVsbCk7YT17JCR0eXBlb2Y6cixfY2FsY3VsYXRlQ2hhbmdlZEJpdHM6YixfY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnEsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX07ZXhwb3J0cy5jcmVhdGVFbGVtZW50PUo7ZXhwb3J0cy5jcmVhdGVGYWN0b3J5PWZ1bmN0aW9uKGEpe3ZhciBiPUouYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifTtleHBvcnRzLmNyZWF0ZVJlZj1mdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fTtleHBvcnRzLmZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnQscmVuZGVyOmF9fTtleHBvcnRzLmlzVmFsaWRFbGVtZW50PUw7XG5leHBvcnRzLmxhenk9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnYsX3BheWxvYWQ6e19zdGF0dXM6LTEsX3Jlc3VsdDphfSxfaW5pdDpRfX07ZXhwb3J0cy5tZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOnUsdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fTtleHBvcnRzLnVzZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VDYWxsYmFjayhhLGIpfTtleHBvcnRzLnVzZUNvbnRleHQ9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUNvbnRleHQoYSxiKX07ZXhwb3J0cy51c2VEZWJ1Z1ZhbHVlPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVzZUVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlSW1wZXJhdGl2ZUhhbmRsZT1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIFMoKS51c2VJbXBlcmF0aXZlSGFuZGxlKGEsYixjKX07XG5leHBvcnRzLnVzZUxheW91dEVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlTGF5b3V0RWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTWVtbz1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlTWVtbyhhLGIpfTtleHBvcnRzLnVzZVJlZHVjZXI9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBTKCkudXNlUmVkdWNlcihhLGIsYyl9O2V4cG9ydHMudXNlUmVmPWZ1bmN0aW9uKGEpe3JldHVybiBTKCkudXNlUmVmKGEpfTtleHBvcnRzLnVzZVN0YXRlPWZ1bmN0aW9uKGEpe3JldHVybiBTKCkudXNlU3RhdGUoYSl9O2V4cG9ydHMudmVyc2lvbj1cIjE3LjAuMVwiO1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNy4wLjFcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLG09cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIikscj1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIHkoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9aWYoIWFhKXRocm93IEVycm9yKHkoMjI3KSk7dmFyIGJhPW5ldyBTZXQsY2E9e307ZnVuY3Rpb24gZGEoYSxiKXtlYShhLGIpO2VhKGErXCJDYXB0dXJlXCIsYil9XG5mdW5jdGlvbiBlYShhLGIpe2NhW2FdPWI7Zm9yKGE9MDthPGIubGVuZ3RoO2ErKyliYS5hZGQoYlthXSl9XG52YXIgZmE9IShcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnR8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpLGhhPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxpYT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LFxuamE9e30sa2E9e307ZnVuY3Rpb24gbGEoYSl7aWYoaWEuY2FsbChrYSxhKSlyZXR1cm4hMDtpZihpYS5jYWxsKGphLGEpKXJldHVybiExO2lmKGhhLnRlc3QoYSkpcmV0dXJuIGthW2FdPSEwO2phW2FdPSEwO3JldHVybiExfWZ1bmN0aW9uIG1hKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gbmEoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8bWEoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1mdW5jdGlvbiBCKGEsYixjLGQsZSxmLGcpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWI7dGhpcy5zYW5pdGl6ZVVSTD1mO3RoaXMucmVtb3ZlRW1wdHlTdHJpbmc9Z312YXIgRD17fTtcblwiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDAsITEsYSxudWxsLCExLCExKX0pO1tbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTtEW2JdPW5ldyBCKGIsMSwhMSxhWzFdLG51bGwsITEsITEpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwiZm9jdXNhYmxlXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDIsITEsYSxudWxsLCExLCExKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlIGRpc2FibGVSZW1vdGVQbGF5YmFjayBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuW1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwzLCEwLGEsbnVsbCwhMSwhMSl9KTtbXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSw0LCExLGEsbnVsbCwhMSwhMSl9KTtbXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDYsITEsYSxudWxsLCExLCExKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7dmFyIG9hPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gcGEoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uob2EsXG5wYSk7RFtiXT1uZXcgQihiLDEsITEsYSxudWxsLCExLCExKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKG9hLHBhKTtEW2JdPW5ldyBCKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCExLCExKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKG9hLHBhKTtEW2JdPW5ldyBCKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsITEsITEpfSk7W1widGFiSW5kZXhcIixcImNyb3NzT3JpZ2luXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5ELnhsaW5rSHJlZj1uZXcgQihcInhsaW5rSHJlZlwiLDEsITEsXCJ4bGluazpocmVmXCIsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITAsITEpO1tcInNyY1wiLFwiaHJlZlwiLFwiYWN0aW9uXCIsXCJmb3JtQWN0aW9uXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITAsITApfSk7XG5mdW5jdGlvbiBxYShhLGIsYyxkKXt2YXIgZT1ELmhhc093blByb3BlcnR5KGIpP0RbYl06bnVsbDt2YXIgZj1udWxsIT09ZT8wPT09ZS50eXBlOmQ/ITE6ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdPyExOiEwO2Z8fChuYShiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/bGEoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpKX1cbnZhciByYT1hYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCxzYT02MDEwMyx0YT02MDEwNix1YT02MDEwNyx3YT02MDEwOCx4YT02MDExNCx5YT02MDEwOSx6YT02MDExMCxBYT02MDExMixCYT02MDExMyxDYT02MDEyMCxEYT02MDExNSxFYT02MDExNixGYT02MDEyMSxHYT02MDEyOCxIYT02MDEyOSxJYT02MDEzMCxKYT02MDEzMTtcbmlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3Ipe3ZhciBFPVN5bWJvbC5mb3I7c2E9RShcInJlYWN0LmVsZW1lbnRcIik7dGE9RShcInJlYWN0LnBvcnRhbFwiKTt1YT1FKFwicmVhY3QuZnJhZ21lbnRcIik7d2E9RShcInJlYWN0LnN0cmljdF9tb2RlXCIpO3hhPUUoXCJyZWFjdC5wcm9maWxlclwiKTt5YT1FKFwicmVhY3QucHJvdmlkZXJcIik7emE9RShcInJlYWN0LmNvbnRleHRcIik7QWE9RShcInJlYWN0LmZvcndhcmRfcmVmXCIpO0JhPUUoXCJyZWFjdC5zdXNwZW5zZVwiKTtDYT1FKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTtEYT1FKFwicmVhY3QubWVtb1wiKTtFYT1FKFwicmVhY3QubGF6eVwiKTtGYT1FKFwicmVhY3QuYmxvY2tcIik7RShcInJlYWN0LnNjb3BlXCIpO0dhPUUoXCJyZWFjdC5vcGFxdWUuaWRcIik7SGE9RShcInJlYWN0LmRlYnVnX3RyYWNlX21vZGVcIik7SWE9RShcInJlYWN0Lm9mZnNjcmVlblwiKTtKYT1FKFwicmVhY3QubGVnYWN5X2hpZGRlblwiKX1cbnZhciBLYT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gTGEoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPUthJiZhW0thXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfXZhciBNYTtmdW5jdGlvbiBOYShhKXtpZih2b2lkIDA9PT1NYSl0cnl7dGhyb3cgRXJyb3IoKTt9Y2F0Y2goYyl7dmFyIGI9Yy5zdGFjay50cmltKCkubWF0Y2goL1xcbiggKihhdCApPykvKTtNYT1iJiZiWzFdfHxcIlwifXJldHVyblwiXFxuXCIrTWErYX12YXIgT2E9ITE7XG5mdW5jdGlvbiBQYShhLGIpe2lmKCFhfHxPYSlyZXR1cm5cIlwiO09hPSEwO3ZhciBjPUVycm9yLnByZXBhcmVTdGFja1RyYWNlO0Vycm9yLnByZXBhcmVTdGFja1RyYWNlPXZvaWQgMDt0cnl7aWYoYilpZihiPWZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcInByb3BzXCIse3NldDpmdW5jdGlvbigpe3Rocm93IEVycm9yKCk7fX0pLFwib2JqZWN0XCI9PT10eXBlb2YgUmVmbGVjdCYmUmVmbGVjdC5jb25zdHJ1Y3Qpe3RyeXtSZWZsZWN0LmNvbnN0cnVjdChiLFtdKX1jYXRjaChrKXt2YXIgZD1rfVJlZmxlY3QuY29uc3RydWN0KGEsW10sYil9ZWxzZXt0cnl7Yi5jYWxsKCl9Y2F0Y2goayl7ZD1rfWEuY2FsbChiLnByb3RvdHlwZSl9ZWxzZXt0cnl7dGhyb3cgRXJyb3IoKTt9Y2F0Y2goayl7ZD1rfWEoKX19Y2F0Y2goayl7aWYoayYmZCYmXCJzdHJpbmdcIj09PXR5cGVvZiBrLnN0YWNrKXtmb3IodmFyIGU9ay5zdGFjay5zcGxpdChcIlxcblwiKSxcbmY9ZC5zdGFjay5zcGxpdChcIlxcblwiKSxnPWUubGVuZ3RoLTEsaD1mLmxlbmd0aC0xOzE8PWcmJjA8PWgmJmVbZ10hPT1mW2hdOyloLS07Zm9yKDsxPD1nJiYwPD1oO2ctLSxoLS0paWYoZVtnXSE9PWZbaF0pe2lmKDEhPT1nfHwxIT09aCl7ZG8gaWYoZy0tLGgtLSwwPmh8fGVbZ10hPT1mW2hdKXJldHVyblwiXFxuXCIrZVtnXS5yZXBsYWNlKFwiIGF0IG5ldyBcIixcIiBhdCBcIik7d2hpbGUoMTw9ZyYmMDw9aCl9YnJlYWt9fX1maW5hbGx5e09hPSExLEVycm9yLnByZXBhcmVTdGFja1RyYWNlPWN9cmV0dXJuKGE9YT9hLmRpc3BsYXlOYW1lfHxhLm5hbWU6XCJcIik/TmEoYSk6XCJcIn1cbmZ1bmN0aW9uIFFhKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnJldHVybiBOYShhLnR5cGUpO2Nhc2UgMTY6cmV0dXJuIE5hKFwiTGF6eVwiKTtjYXNlIDEzOnJldHVybiBOYShcIlN1c3BlbnNlXCIpO2Nhc2UgMTk6cmV0dXJuIE5hKFwiU3VzcGVuc2VMaXN0XCIpO2Nhc2UgMDpjYXNlIDI6Y2FzZSAxNTpyZXR1cm4gYT1QYShhLnR5cGUsITEpLGE7Y2FzZSAxMTpyZXR1cm4gYT1QYShhLnR5cGUucmVuZGVyLCExKSxhO2Nhc2UgMjI6cmV0dXJuIGE9UGEoYS50eXBlLl9yZW5kZXIsITEpLGE7Y2FzZSAxOnJldHVybiBhPVBhKGEudHlwZSwhMCksYTtkZWZhdWx0OnJldHVyblwiXCJ9fVxuZnVuY3Rpb24gUmEoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSB1YTpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSB0YTpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgeGE6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2Ugd2E6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBCYTpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSBDYTpyZXR1cm5cIlN1c3BlbnNlTGlzdFwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSB6YTpyZXR1cm4oYS5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLkNvbnN1bWVyXCI7Y2FzZSB5YTpyZXR1cm4oYS5fY29udGV4dC5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLlByb3ZpZGVyXCI7Y2FzZSBBYTp2YXIgYj1hLnJlbmRlcjtiPWIuZGlzcGxheU5hbWV8fGIubmFtZXx8XCJcIjtcbnJldHVybiBhLmRpc3BsYXlOYW1lfHwoXCJcIiE9PWI/XCJGb3J3YXJkUmVmKFwiK2IrXCIpXCI6XCJGb3J3YXJkUmVmXCIpO2Nhc2UgRGE6cmV0dXJuIFJhKGEudHlwZSk7Y2FzZSBGYTpyZXR1cm4gUmEoYS5fcmVuZGVyKTtjYXNlIEVhOmI9YS5fcGF5bG9hZDthPWEuX2luaXQ7dHJ5e3JldHVybiBSYShhKGIpKX1jYXRjaChjKXt9fXJldHVybiBudWxsfWZ1bmN0aW9uIFNhKGEpe3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJzdHJpbmdcIjpjYXNlIFwidW5kZWZpbmVkXCI6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1mdW5jdGlvbiBUYShhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24gVWEoYSl7dmFyIGI9VGEoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnNldCl7dmFyIGU9Yy5nZXQsZj1jLnNldDtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2YuY2FsbCh0aGlzLGEpfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlfSk7cmV0dXJue2dldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldFZhbHVlOmZ1bmN0aW9uKGEpe2Q9XCJcIithfSxzdG9wVHJhY2tpbmc6ZnVuY3Rpb24oKXthLl92YWx1ZVRyYWNrZXI9XG5udWxsO2RlbGV0ZSBhW2JdfX19fWZ1bmN0aW9uIFZhKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj1VYShhKSl9ZnVuY3Rpb24gV2EoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPVRhKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9ZnVuY3Rpb24gWGEoYSl7YT1hfHwoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkb2N1bWVudD9kb2N1bWVudDp2b2lkIDApO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYSlyZXR1cm4gbnVsbDt0cnl7cmV0dXJuIGEuYWN0aXZlRWxlbWVudHx8YS5ib2R5fWNhdGNoKGIpe3JldHVybiBhLmJvZHl9fVxuZnVuY3Rpb24gWWEoYSxiKXt2YXIgYz1iLmNoZWNrZWQ7cmV0dXJuIG0oe30sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6dm9pZCAwLGNoZWNrZWQ6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfWZ1bmN0aW9uIFphKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPVNhKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24gJGEoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZxYShhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24gYWIoYSxiKXskYShhLGIpO3ZhciBjPVNhKGIudmFsdWUpLGQ9Yi50eXBlO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWQpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7ZWxzZSBpZihcInN1Ym1pdFwiPT09ZHx8XCJyZXNldFwiPT09ZCl7YS5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtyZXR1cm59Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpP2JiKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJmJiKGEsYi50eXBlLFNhKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gY2IoYSxiLGMpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSl7dmFyIGQ9Yi50eXBlO2lmKCEoXCJzdWJtaXRcIiE9PWQmJlwicmVzZXRcIiE9PWR8fHZvaWQgMCE9PWIudmFsdWUmJm51bGwhPT1iLnZhbHVlKSlyZXR1cm47Yj1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7Y3x8Yj09PWEudmFsdWV8fChhLnZhbHVlPWIpO2EuZGVmYXVsdFZhbHVlPWJ9Yz1hLm5hbWU7XCJcIiE9PWMmJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hIWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZDtcIlwiIT09YyYmKGEubmFtZT1jKX1cbmZ1bmN0aW9uIGJiKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8WGEoYS5vd25lckRvY3VtZW50KSE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfWZ1bmN0aW9uIGRiKGEpe3ZhciBiPVwiXCI7YWEuQ2hpbGRyZW4uZm9yRWFjaChhLGZ1bmN0aW9uKGEpe251bGwhPWEmJihiKz1hKX0pO3JldHVybiBifWZ1bmN0aW9uIGViKGEsYil7YT1tKHtjaGlsZHJlbjp2b2lkIDB9LGIpO2lmKGI9ZGIoYi5jaGlsZHJlbikpYS5jaGlsZHJlbj1iO3JldHVybiBhfVxuZnVuY3Rpb24gZmIoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK1NhKGMpO2I9bnVsbDtmb3IoZT0wO2U8YS5sZW5ndGg7ZSsrKXtpZihhW2VdLnZhbHVlPT09Yyl7YVtlXS5zZWxlY3RlZD0hMDtkJiYoYVtlXS5kZWZhdWx0U2VsZWN0ZWQ9ITApO3JldHVybn1udWxsIT09Ynx8YVtlXS5kaXNhYmxlZHx8KGI9YVtlXSl9bnVsbCE9PWImJihiLnNlbGVjdGVkPSEwKX19XG5mdW5jdGlvbiBnYihhLGIpe2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpdGhyb3cgRXJyb3IoeSg5MSkpO3JldHVybiBtKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIGhiKGEsYil7dmFyIGM9Yi52YWx1ZTtpZihudWxsPT1jKXtjPWIuY2hpbGRyZW47Yj1iLmRlZmF1bHRWYWx1ZTtpZihudWxsIT1jKXtpZihudWxsIT1iKXRocm93IEVycm9yKHkoOTIpKTtpZihBcnJheS5pc0FycmF5KGMpKXtpZighKDE+PWMubGVuZ3RoKSl0aHJvdyBFcnJvcih5KDkzKSk7Yz1jWzBdfWI9Y31udWxsPT1iJiYoYj1cIlwiKTtjPWJ9YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6U2EoYyl9fVxuZnVuY3Rpb24gaWIoYSxiKXt2YXIgYz1TYShiLnZhbHVlKSxkPVNhKGIuZGVmYXVsdFZhbHVlKTtudWxsIT1jJiYoYz1cIlwiK2MsYyE9PWEudmFsdWUmJihhLnZhbHVlPWMpLG51bGw9PWIuZGVmYXVsdFZhbHVlJiZhLmRlZmF1bHRWYWx1ZSE9PWMmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9ZCYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrZCl9ZnVuY3Rpb24gamIoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmXCJcIiE9PWImJm51bGwhPT1iJiYoYS52YWx1ZT1iKX12YXIga2I9e2h0bWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsbWF0aG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLHN2ZzpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJ9O1xuZnVuY3Rpb24gbGIoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1mdW5jdGlvbiBtYihhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/bGIoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgbmIsb2I9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKGEubmFtZXNwYWNlVVJJIT09a2Iuc3ZnfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7bmI9bmJ8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7bmIuaW5uZXJIVE1MPVwiPHN2Zz5cIitiLnZhbHVlT2YoKS50b1N0cmluZygpK1wiPC9zdmc+XCI7Zm9yKGI9bmIuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24gcGIoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1cbnZhciBxYj17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkQXJlYTohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLHpvb206ITAsZmlsbE9wYWNpdHk6ITAsXG5mbG9vZE9wYWNpdHk6ITAsc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxyYj1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMocWIpLmZvckVhY2goZnVuY3Rpb24oYSl7cmIuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtxYltiXT1xYlthXX0pfSk7ZnVuY3Rpb24gc2IoYSxiLGMpe3JldHVybiBudWxsPT1ifHxcImJvb2xlYW5cIj09PXR5cGVvZiBifHxcIlwiPT09Yj9cIlwiOmN8fFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MD09PWJ8fHFiLmhhc093blByb3BlcnR5KGEpJiZxYlthXT8oXCJcIitiKS50cmltKCk6YitcInB4XCJ9XG5mdW5jdGlvbiB0YihhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIiksZT1zYihjLGJbY10sZCk7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciB1Yj1tKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gdmIoYSxiKXtpZihiKXtpZih1YlthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHkoMTM3LGEpKTtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXtpZihudWxsIT1iLmNoaWxkcmVuKXRocm93IEVycm9yKHkoNjApKTtpZighKFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHkoNjEpKTt9aWYobnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlKXRocm93IEVycm9yKHkoNjIpKTt9fVxuZnVuY3Rpb24gd2IoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fWZ1bmN0aW9uIHhiKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX12YXIgeWI9bnVsbCx6Yj1udWxsLEFiPW51bGw7XG5mdW5jdGlvbiBCYihhKXtpZihhPUNiKGEpKXtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgeWIpdGhyb3cgRXJyb3IoeSgyODApKTt2YXIgYj1hLnN0YXRlTm9kZTtiJiYoYj1EYihiKSx5YihhLnN0YXRlTm9kZSxhLnR5cGUsYikpfX1mdW5jdGlvbiBFYihhKXt6Yj9BYj9BYi5wdXNoKGEpOkFiPVthXTp6Yj1hfWZ1bmN0aW9uIEZiKCl7aWYoemIpe3ZhciBhPXpiLGI9QWI7QWI9emI9bnVsbDtCYihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspQmIoYlthXSl9fWZ1bmN0aW9uIEdiKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gSGIoYSxiLGMsZCxlKXtyZXR1cm4gYShiLGMsZCxlKX1mdW5jdGlvbiBJYigpe312YXIgSmI9R2IsS2I9ITEsTGI9ITE7ZnVuY3Rpb24gTWIoKXtpZihudWxsIT09emJ8fG51bGwhPT1BYilJYigpLEZiKCl9XG5mdW5jdGlvbiBOYihhLGIsYyl7aWYoTGIpcmV0dXJuIGEoYixjKTtMYj0hMDt0cnl7cmV0dXJuIEpiKGEsYixjKX1maW5hbGx5e0xiPSExLE1iKCl9fVxuZnVuY3Rpb24gT2IoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZihudWxsPT09YylyZXR1cm4gbnVsbDt2YXIgZD1EYihjKTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VFbnRlclwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7aWYoYyYmXCJmdW5jdGlvblwiIT09XG50eXBlb2YgYyl0aHJvdyBFcnJvcih5KDIzMSxiLHR5cGVvZiBjKSk7cmV0dXJuIGN9dmFyIFBiPSExO2lmKGZhKXRyeXt2YXIgUWI9e307T2JqZWN0LmRlZmluZVByb3BlcnR5KFFiLFwicGFzc2l2ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtQYj0hMH19KTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRlc3RcIixRYixRYik7d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsUWIsUWIpfWNhdGNoKGEpe1BiPSExfWZ1bmN0aW9uIFJiKGEsYixjLGQsZSxmLGcsaCxrKXt2YXIgbD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyxsKX1jYXRjaChuKXt0aGlzLm9uRXJyb3Iobil9fXZhciBTYj0hMSxUYj1udWxsLFViPSExLFZiPW51bGwsV2I9e29uRXJyb3I6ZnVuY3Rpb24oYSl7U2I9ITA7VGI9YX19O2Z1bmN0aW9uIFhiKGEsYixjLGQsZSxmLGcsaCxrKXtTYj0hMTtUYj1udWxsO1JiLmFwcGx5KFdiLGFyZ3VtZW50cyl9XG5mdW5jdGlvbiBZYihhLGIsYyxkLGUsZixnLGgsayl7WGIuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKFNiKXtpZihTYil7dmFyIGw9VGI7U2I9ITE7VGI9bnVsbH1lbHNlIHRocm93IEVycm9yKHkoMTk4KSk7VWJ8fChVYj0hMCxWYj1sKX19ZnVuY3Rpb24gWmIoYSl7dmFyIGI9YSxjPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2E9YjtkbyBiPWEsMCE9PShiLmZsYWdzJjEwMjYpJiYoYz1iLnJldHVybiksYT1iLnJldHVybjt3aGlsZShhKX1yZXR1cm4gMz09PWIudGFnP2M6bnVsbH1mdW5jdGlvbiAkYihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWImJihhPWEuYWx0ZXJuYXRlLG51bGwhPT1hJiYoYj1hLm1lbW9pemVkU3RhdGUpKTtpZihudWxsIT09YilyZXR1cm4gYi5kZWh5ZHJhdGVkfXJldHVybiBudWxsfWZ1bmN0aW9uIGFjKGEpe2lmKFpiKGEpIT09YSl0aHJvdyBFcnJvcih5KDE4OCkpO31cbmZ1bmN0aW9uIGJjKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXtiPVpiKGEpO2lmKG51bGw9PT1iKXRocm93IEVycm9yKHkoMTg4KSk7cmV0dXJuIGIhPT1hP251bGw6YX1mb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Yy5yZXR1cm47aWYobnVsbD09PWUpYnJlYWs7dmFyIGY9ZS5hbHRlcm5hdGU7aWYobnVsbD09PWYpe2Q9ZS5yZXR1cm47aWYobnVsbCE9PWQpe2M9ZDtjb250aW51ZX1icmVha31pZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKGY9ZS5jaGlsZDtmOyl7aWYoZj09PWMpcmV0dXJuIGFjKGUpLGE7aWYoZj09PWQpcmV0dXJuIGFjKGUpLGI7Zj1mLnNpYmxpbmd9dGhyb3cgRXJyb3IoeSgxODgpKTt9aWYoYy5yZXR1cm4hPT1kLnJldHVybiljPWUsZD1mO2Vsc2V7Zm9yKHZhciBnPSExLGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09XG5jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31oPWguc2libGluZ31pZighZyl0aHJvdyBFcnJvcih5KDE4OSkpO319aWYoYy5hbHRlcm5hdGUhPT1kKXRocm93IEVycm9yKHkoMTkwKSk7fWlmKDMhPT1jLnRhZyl0aHJvdyBFcnJvcih5KDE4OCkpO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gY2MoYSl7YT1iYyhhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkKWIuY2hpbGQucmV0dXJuPWIsYj1iLmNoaWxkO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDshYi5zaWJsaW5nOyl7aWYoIWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGRjKGEsYil7Zm9yKHZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1iOyl7aWYoYj09PWF8fGI9PT1jKXJldHVybiEwO2I9Yi5yZXR1cm59cmV0dXJuITF9dmFyIGVjLGZjLGdjLGhjLGljPSExLGpjPVtdLGtjPW51bGwsbGM9bnVsbCxtYz1udWxsLG5jPW5ldyBNYXAsb2M9bmV3IE1hcCxwYz1bXSxxYz1cIm1vdXNlZG93biBtb3VzZXVwIHRvdWNoY2FuY2VsIHRvdWNoZW5kIHRvdWNoc3RhcnQgYXV4Y2xpY2sgZGJsY2xpY2sgcG9pbnRlcmNhbmNlbCBwb2ludGVyZG93biBwb2ludGVydXAgZHJhZ2VuZCBkcmFnc3RhcnQgZHJvcCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgaW5wdXQgdGV4dElucHV0IGNvcHkgY3V0IHBhc3RlIGNsaWNrIGNoYW5nZSBjb250ZXh0bWVudSByZXNldCBzdWJtaXRcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiByYyhhLGIsYyxkLGUpe3JldHVybntibG9ja2VkT246YSxkb21FdmVudE5hbWU6YixldmVudFN5c3RlbUZsYWdzOmN8MTYsbmF0aXZlRXZlbnQ6ZSx0YXJnZXRDb250YWluZXJzOltkXX19ZnVuY3Rpb24gc2MoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImZvY3VzaW5cIjpjYXNlIFwiZm9jdXNvdXRcIjprYz1udWxsO2JyZWFrO2Nhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6bGM9bnVsbDticmVhaztjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcIm1vdXNlb3V0XCI6bWM9bnVsbDticmVhaztjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcm91dFwiOm5jLmRlbGV0ZShiLnBvaW50ZXJJZCk7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOm9jLmRlbGV0ZShiLnBvaW50ZXJJZCl9fVxuZnVuY3Rpb24gdGMoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hfHxhLm5hdGl2ZUV2ZW50IT09ZilyZXR1cm4gYT1yYyhiLGMsZCxlLGYpLG51bGwhPT1iJiYoYj1DYihiKSxudWxsIT09YiYmZmMoYikpLGE7YS5ldmVudFN5c3RlbUZsYWdzfD1kO2I9YS50YXJnZXRDb250YWluZXJzO251bGwhPT1lJiYtMT09PWIuaW5kZXhPZihlKSYmYi5wdXNoKGUpO3JldHVybiBhfVxuZnVuY3Rpb24gdWMoYSxiLGMsZCxlKXtzd2l0Y2goYil7Y2FzZSBcImZvY3VzaW5cIjpyZXR1cm4ga2M9dGMoa2MsYSxiLGMsZCxlKSwhMDtjYXNlIFwiZHJhZ2VudGVyXCI6cmV0dXJuIGxjPXRjKGxjLGEsYixjLGQsZSksITA7Y2FzZSBcIm1vdXNlb3ZlclwiOnJldHVybiBtYz10YyhtYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJwb2ludGVyb3ZlclwiOnZhciBmPWUucG9pbnRlcklkO25jLnNldChmLHRjKG5jLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKTtyZXR1cm4hMDtjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpyZXR1cm4gZj1lLnBvaW50ZXJJZCxvYy5zZXQoZix0YyhvYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSksITB9cmV0dXJuITF9XG5mdW5jdGlvbiB2YyhhKXt2YXIgYj13YyhhLnRhcmdldCk7aWYobnVsbCE9PWIpe3ZhciBjPVpiKGIpO2lmKG51bGwhPT1jKWlmKGI9Yy50YWcsMTM9PT1iKXtpZihiPSRiKGMpLG51bGwhPT1iKXthLmJsb2NrZWRPbj1iO2hjKGEubGFuZVByaW9yaXR5LGZ1bmN0aW9uKCl7ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkoYS5wcmlvcml0eSxmdW5jdGlvbigpe2djKGMpfSl9KTtyZXR1cm59fWVsc2UgaWYoMz09PWImJmMuc3RhdGVOb2RlLmh5ZHJhdGUpe2EuYmxvY2tlZE9uPTM9PT1jLnRhZz9jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7cmV0dXJufX1hLmJsb2NrZWRPbj1udWxsfVxuZnVuY3Rpb24geGMoYSl7aWYobnVsbCE9PWEuYmxvY2tlZE9uKXJldHVybiExO2Zvcih2YXIgYj1hLnRhcmdldENvbnRhaW5lcnM7MDxiLmxlbmd0aDspe3ZhciBjPXljKGEuZG9tRXZlbnROYW1lLGEuZXZlbnRTeXN0ZW1GbGFncyxiWzBdLGEubmF0aXZlRXZlbnQpO2lmKG51bGwhPT1jKXJldHVybiBiPUNiKGMpLG51bGwhPT1iJiZmYyhiKSxhLmJsb2NrZWRPbj1jLCExO2Iuc2hpZnQoKX1yZXR1cm4hMH1mdW5jdGlvbiB6YyhhLGIsYyl7eGMoYSkmJmMuZGVsZXRlKGIpfVxuZnVuY3Rpb24gQWMoKXtmb3IoaWM9ITE7MDxqYy5sZW5ndGg7KXt2YXIgYT1qY1swXTtpZihudWxsIT09YS5ibG9ja2VkT24pe2E9Q2IoYS5ibG9ja2VkT24pO251bGwhPT1hJiZlYyhhKTticmVha31mb3IodmFyIGI9YS50YXJnZXRDb250YWluZXJzOzA8Yi5sZW5ndGg7KXt2YXIgYz15YyhhLmRvbUV2ZW50TmFtZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYlswXSxhLm5hdGl2ZUV2ZW50KTtpZihudWxsIT09Yyl7YS5ibG9ja2VkT249YzticmVha31iLnNoaWZ0KCl9bnVsbD09PWEuYmxvY2tlZE9uJiZqYy5zaGlmdCgpfW51bGwhPT1rYyYmeGMoa2MpJiYoa2M9bnVsbCk7bnVsbCE9PWxjJiZ4YyhsYykmJihsYz1udWxsKTtudWxsIT09bWMmJnhjKG1jKSYmKG1jPW51bGwpO25jLmZvckVhY2goemMpO29jLmZvckVhY2goemMpfVxuZnVuY3Rpb24gQmMoYSxiKXthLmJsb2NrZWRPbj09PWImJihhLmJsb2NrZWRPbj1udWxsLGljfHwoaWM9ITAsci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKHIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksQWMpKSl9XG5mdW5jdGlvbiBDYyhhKXtmdW5jdGlvbiBiKGIpe3JldHVybiBCYyhiLGEpfWlmKDA8amMubGVuZ3RoKXtCYyhqY1swXSxhKTtmb3IodmFyIGM9MTtjPGpjLmxlbmd0aDtjKyspe3ZhciBkPWpjW2NdO2QuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpfX1udWxsIT09a2MmJkJjKGtjLGEpO251bGwhPT1sYyYmQmMobGMsYSk7bnVsbCE9PW1jJiZCYyhtYyxhKTtuYy5mb3JFYWNoKGIpO29jLmZvckVhY2goYik7Zm9yKGM9MDtjPHBjLmxlbmd0aDtjKyspZD1wY1tjXSxkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKTtmb3IoOzA8cGMubGVuZ3RoJiYoYz1wY1swXSxudWxsPT09Yy5ibG9ja2VkT24pOyl2YyhjKSxudWxsPT09Yy5ibG9ja2VkT24mJnBjLnNoaWZ0KCl9XG5mdW5jdGlvbiBEYyhhLGIpe3ZhciBjPXt9O2NbYS50b0xvd2VyQ2FzZSgpXT1iLnRvTG93ZXJDYXNlKCk7Y1tcIldlYmtpdFwiK2FdPVwid2Via2l0XCIrYjtjW1wiTW96XCIrYV09XCJtb3pcIitiO3JldHVybiBjfXZhciBFYz17YW5pbWF0aW9uZW5kOkRjKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOkRjKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6RGMoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6RGMoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxGYz17fSxHYz17fTtcbmZhJiYoR2M9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgRWMuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgRWMuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgRWMuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgRWMudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtmdW5jdGlvbiBIYyhhKXtpZihGY1thXSlyZXR1cm4gRmNbYV07aWYoIUVjW2FdKXJldHVybiBhO3ZhciBiPUVjW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIEdjKXJldHVybiBGY1thXT1iW2NdO3JldHVybiBhfVxudmFyIEljPUhjKFwiYW5pbWF0aW9uZW5kXCIpLEpjPUhjKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpLEtjPUhjKFwiYW5pbWF0aW9uc3RhcnRcIiksTGM9SGMoXCJ0cmFuc2l0aW9uZW5kXCIpLE1jPW5ldyBNYXAsTmM9bmV3IE1hcCxPYz1bXCJhYm9ydFwiLFwiYWJvcnRcIixJYyxcImFuaW1hdGlvbkVuZFwiLEpjLFwiYW5pbWF0aW9uSXRlcmF0aW9uXCIsS2MsXCJhbmltYXRpb25TdGFydFwiLFwiY2FucGxheVwiLFwiY2FuUGxheVwiLFwiY2FucGxheXRocm91Z2hcIixcImNhblBsYXlUaHJvdWdoXCIsXCJkdXJhdGlvbmNoYW5nZVwiLFwiZHVyYXRpb25DaGFuZ2VcIixcImVtcHRpZWRcIixcImVtcHRpZWRcIixcImVuY3J5cHRlZFwiLFwiZW5jcnlwdGVkXCIsXCJlbmRlZFwiLFwiZW5kZWRcIixcImVycm9yXCIsXCJlcnJvclwiLFwiZ290cG9pbnRlcmNhcHR1cmVcIixcImdvdFBvaW50ZXJDYXB0dXJlXCIsXCJsb2FkXCIsXCJsb2FkXCIsXCJsb2FkZWRkYXRhXCIsXCJsb2FkZWREYXRhXCIsXCJsb2FkZWRtZXRhZGF0YVwiLFwibG9hZGVkTWV0YWRhdGFcIixcImxvYWRzdGFydFwiLFwibG9hZFN0YXJ0XCIsXG5cImxvc3Rwb2ludGVyY2FwdHVyZVwiLFwibG9zdFBvaW50ZXJDYXB0dXJlXCIsXCJwbGF5aW5nXCIsXCJwbGF5aW5nXCIsXCJwcm9ncmVzc1wiLFwicHJvZ3Jlc3NcIixcInNlZWtpbmdcIixcInNlZWtpbmdcIixcInN0YWxsZWRcIixcInN0YWxsZWRcIixcInN1c3BlbmRcIixcInN1c3BlbmRcIixcInRpbWV1cGRhdGVcIixcInRpbWVVcGRhdGVcIixMYyxcInRyYW5zaXRpb25FbmRcIixcIndhaXRpbmdcIixcIndhaXRpbmdcIl07ZnVuY3Rpb24gUGMoYSxiKXtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrPTIpe3ZhciBkPWFbY10sZT1hW2MrMV07ZT1cIm9uXCIrKGVbMF0udG9VcHBlckNhc2UoKStlLnNsaWNlKDEpKTtOYy5zZXQoZCxiKTtNYy5zZXQoZCxlKTtkYShlLFtkXSl9fXZhciBRYz1yLnVuc3RhYmxlX25vdztRYygpO3ZhciBGPTg7XG5mdW5jdGlvbiBSYyhhKXtpZigwIT09KDEmYSkpcmV0dXJuIEY9MTUsMTtpZigwIT09KDImYSkpcmV0dXJuIEY9MTQsMjtpZigwIT09KDQmYSkpcmV0dXJuIEY9MTMsNDt2YXIgYj0yNCZhO2lmKDAhPT1iKXJldHVybiBGPTEyLGI7aWYoMCE9PShhJjMyKSlyZXR1cm4gRj0xMSwzMjtiPTE5MiZhO2lmKDAhPT1iKXJldHVybiBGPTEwLGI7aWYoMCE9PShhJjI1NikpcmV0dXJuIEY9OSwyNTY7Yj0zNTg0JmE7aWYoMCE9PWIpcmV0dXJuIEY9OCxiO2lmKDAhPT0oYSY0MDk2KSlyZXR1cm4gRj03LDQwOTY7Yj00MTg2MTEyJmE7aWYoMCE9PWIpcmV0dXJuIEY9NixiO2I9NjI5MTQ1NjAmYTtpZigwIT09YilyZXR1cm4gRj01LGI7aWYoYSY2NzEwODg2NClyZXR1cm4gRj00LDY3MTA4ODY0O2lmKDAhPT0oYSYxMzQyMTc3MjgpKXJldHVybiBGPTMsMTM0MjE3NzI4O2I9ODA1MzA2MzY4JmE7aWYoMCE9PWIpcmV0dXJuIEY9MixiO2lmKDAhPT0oMTA3Mzc0MTgyNCZhKSlyZXR1cm4gRj0xLDEwNzM3NDE4MjQ7XG5GPTg7cmV0dXJuIGF9ZnVuY3Rpb24gU2MoYSl7c3dpdGNoKGEpe2Nhc2UgOTk6cmV0dXJuIDE1O2Nhc2UgOTg6cmV0dXJuIDEwO2Nhc2UgOTc6Y2FzZSA5NjpyZXR1cm4gODtjYXNlIDk1OnJldHVybiAyO2RlZmF1bHQ6cmV0dXJuIDB9fWZ1bmN0aW9uIFRjKGEpe3N3aXRjaChhKXtjYXNlIDE1OmNhc2UgMTQ6cmV0dXJuIDk5O2Nhc2UgMTM6Y2FzZSAxMjpjYXNlIDExOmNhc2UgMTA6cmV0dXJuIDk4O2Nhc2UgOTpjYXNlIDg6Y2FzZSA3OmNhc2UgNjpjYXNlIDQ6Y2FzZSA1OnJldHVybiA5NztjYXNlIDM6Y2FzZSAyOmNhc2UgMTpyZXR1cm4gOTU7Y2FzZSAwOnJldHVybiA5MDtkZWZhdWx0OnRocm93IEVycm9yKHkoMzU4LGEpKTt9fVxuZnVuY3Rpb24gVWMoYSxiKXt2YXIgYz1hLnBlbmRpbmdMYW5lcztpZigwPT09YylyZXR1cm4gRj0wO3ZhciBkPTAsZT0wLGY9YS5leHBpcmVkTGFuZXMsZz1hLnN1c3BlbmRlZExhbmVzLGg9YS5waW5nZWRMYW5lcztpZigwIT09ZilkPWYsZT1GPTE1O2Vsc2UgaWYoZj1jJjEzNDIxNzcyNywwIT09Zil7dmFyIGs9ZiZ+ZzswIT09az8oZD1SYyhrKSxlPUYpOihoJj1mLDAhPT1oJiYoZD1SYyhoKSxlPUYpKX1lbHNlIGY9YyZ+ZywwIT09Zj8oZD1SYyhmKSxlPUYpOjAhPT1oJiYoZD1SYyhoKSxlPUYpO2lmKDA9PT1kKXJldHVybiAwO2Q9MzEtVmMoZCk7ZD1jJigoMD5kPzA6MTw8ZCk8PDEpLTE7aWYoMCE9PWImJmIhPT1kJiYwPT09KGImZykpe1JjKGIpO2lmKGU8PUYpcmV0dXJuIGI7Rj1lfWI9YS5lbnRhbmdsZWRMYW5lcztpZigwIT09Yilmb3IoYT1hLmVudGFuZ2xlbWVudHMsYiY9ZDswPGI7KWM9MzEtVmMoYiksZT0xPDxjLGR8PWFbY10sYiY9fmU7cmV0dXJuIGR9XG5mdW5jdGlvbiBXYyhhKXthPWEucGVuZGluZ0xhbmVzJi0xMDczNzQxODI1O3JldHVybiAwIT09YT9hOmEmMTA3Mzc0MTgyND8xMDczNzQxODI0OjB9ZnVuY3Rpb24gWGMoYSxiKXtzd2l0Y2goYSl7Y2FzZSAxNTpyZXR1cm4gMTtjYXNlIDE0OnJldHVybiAyO2Nhc2UgMTI6cmV0dXJuIGE9WWMoMjQmfmIpLDA9PT1hP1hjKDEwLGIpOmE7Y2FzZSAxMDpyZXR1cm4gYT1ZYygxOTImfmIpLDA9PT1hP1hjKDgsYik6YTtjYXNlIDg6cmV0dXJuIGE9WWMoMzU4NCZ+YiksMD09PWEmJihhPVljKDQxODYxMTImfmIpLDA9PT1hJiYoYT01MTIpKSxhO2Nhc2UgMjpyZXR1cm4gYj1ZYyg4MDUzMDYzNjgmfmIpLDA9PT1iJiYoYj0yNjg0MzU0NTYpLGJ9dGhyb3cgRXJyb3IoeSgzNTgsYSkpO31mdW5jdGlvbiBZYyhhKXtyZXR1cm4gYSYtYX1mdW5jdGlvbiBaYyhhKXtmb3IodmFyIGI9W10sYz0wOzMxPmM7YysrKWIucHVzaChhKTtyZXR1cm4gYn1cbmZ1bmN0aW9uICRjKGEsYixjKXthLnBlbmRpbmdMYW5lc3w9Yjt2YXIgZD1iLTE7YS5zdXNwZW5kZWRMYW5lcyY9ZDthLnBpbmdlZExhbmVzJj1kO2E9YS5ldmVudFRpbWVzO2I9MzEtVmMoYik7YVtiXT1jfXZhciBWYz1NYXRoLmNsejMyP01hdGguY2x6MzI6YWQsYmQ9TWF0aC5sb2csY2Q9TWF0aC5MTjI7ZnVuY3Rpb24gYWQoYSl7cmV0dXJuIDA9PT1hPzMyOjMxLShiZChhKS9jZHwwKXwwfXZhciBkZD1yLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LGVkPXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5LGZkPSEwO2Z1bmN0aW9uIGdkKGEsYixjLGQpe0tifHxJYigpO3ZhciBlPWhkLGY9S2I7S2I9ITA7dHJ5e0hiKGUsYSxiLGMsZCl9ZmluYWxseXsoS2I9Zil8fE1iKCl9fWZ1bmN0aW9uIGlkKGEsYixjLGQpe2VkKGRkLGhkLmJpbmQobnVsbCxhLGIsYyxkKSl9XG5mdW5jdGlvbiBoZChhLGIsYyxkKXtpZihmZCl7dmFyIGU7aWYoKGU9MD09PShiJjQpKSYmMDxqYy5sZW5ndGgmJi0xPHFjLmluZGV4T2YoYSkpYT1yYyhudWxsLGEsYixjLGQpLGpjLnB1c2goYSk7ZWxzZXt2YXIgZj15YyhhLGIsYyxkKTtpZihudWxsPT09ZillJiZzYyhhLGQpO2Vsc2V7aWYoZSl7aWYoLTE8cWMuaW5kZXhPZihhKSl7YT1yYyhmLGEsYixjLGQpO2pjLnB1c2goYSk7cmV0dXJufWlmKHVjKGYsYSxiLGMsZCkpcmV0dXJuO3NjKGEsZCl9amQoYSxiLGQsbnVsbCxjKX19fX1cbmZ1bmN0aW9uIHljKGEsYixjLGQpe3ZhciBlPXhiKGQpO2U9d2MoZSk7aWYobnVsbCE9PWUpe3ZhciBmPVpiKGUpO2lmKG51bGw9PT1mKWU9bnVsbDtlbHNle3ZhciBnPWYudGFnO2lmKDEzPT09Zyl7ZT0kYihmKTtpZihudWxsIT09ZSlyZXR1cm4gZTtlPW51bGx9ZWxzZSBpZigzPT09Zyl7aWYoZi5zdGF0ZU5vZGUuaHlkcmF0ZSlyZXR1cm4gMz09PWYudGFnP2Yuc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtlPW51bGx9ZWxzZSBmIT09ZSYmKGU9bnVsbCl9fWpkKGEsYixkLGUsYyk7cmV0dXJuIG51bGx9dmFyIGtkPW51bGwsbGQ9bnVsbCxtZD1udWxsO1xuZnVuY3Rpb24gbmQoKXtpZihtZClyZXR1cm4gbWQ7dmFyIGEsYj1sZCxjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiBrZD9rZC52YWx1ZTprZC50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiBtZD1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfWZ1bmN0aW9uIG9kKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfWZ1bmN0aW9uIHBkKCl7cmV0dXJuITB9ZnVuY3Rpb24gcWQoKXtyZXR1cm4hMX1cbmZ1bmN0aW9uIHJkKGEpe2Z1bmN0aW9uIGIoYixkLGUsZixnKXt0aGlzLl9yZWFjdE5hbWU9Yjt0aGlzLl90YXJnZXRJbnN0PWU7dGhpcy50eXBlPWQ7dGhpcy5uYXRpdmVFdmVudD1mO3RoaXMudGFyZ2V0PWc7dGhpcy5jdXJyZW50VGFyZ2V0PW51bGw7Zm9yKHZhciBjIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShjKSYmKGI9YVtjXSx0aGlzW2NdPWI/YihmKTpmW2NdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Zi5kZWZhdWx0UHJldmVudGVkP2YuZGVmYXVsdFByZXZlbnRlZDohMT09PWYucmV0dXJuVmFsdWUpP3BkOnFkO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9cWQ7cmV0dXJuIHRoaXN9bShiLnByb3RvdHlwZSx7cHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5yZXR1cm5WYWx1ZSYmXG4oYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9cGQpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9cGQpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7fSxpc1BlcnNpc3RlbnQ6cGR9KTtyZXR1cm4gYn1cbnZhciBzZD17ZXZlbnRQaGFzZTowLGJ1YmJsZXM6MCxjYW5jZWxhYmxlOjAsdGltZVN0YW1wOmZ1bmN0aW9uKGEpe3JldHVybiBhLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX0sZGVmYXVsdFByZXZlbnRlZDowLGlzVHJ1c3RlZDowfSx0ZD1yZChzZCksdWQ9bSh7fSxzZCx7dmlldzowLGRldGFpbDowfSksdmQ9cmQodWQpLHdkLHhkLHlkLEFkPW0oe30sdWQse3NjcmVlblg6MCxzY3JlZW5ZOjAsY2xpZW50WDowLGNsaWVudFk6MCxwYWdlWDowLHBhZ2VZOjAsY3RybEtleTowLHNoaWZ0S2V5OjAsYWx0S2V5OjAsbWV0YUtleTowLGdldE1vZGlmaWVyU3RhdGU6emQsYnV0dG9uOjAsYnV0dG9uczowLHJlbGF0ZWRUYXJnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIHZvaWQgMD09PWEucmVsYXRlZFRhcmdldD9hLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQ6YS5yZWxhdGVkVGFyZ2V0fSxtb3ZlbWVudFg6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFhcImluXG5hKXJldHVybiBhLm1vdmVtZW50WDthIT09eWQmJih5ZCYmXCJtb3VzZW1vdmVcIj09PWEudHlwZT8od2Q9YS5zY3JlZW5YLXlkLnNjcmVlblgseGQ9YS5zY3JlZW5ZLXlkLnNjcmVlblkpOnhkPXdkPTAseWQ9YSk7cmV0dXJuIHdkfSxtb3ZlbWVudFk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJtb3ZlbWVudFlcImluIGE/YS5tb3ZlbWVudFk6eGR9fSksQmQ9cmQoQWQpLENkPW0oe30sQWQse2RhdGFUcmFuc2ZlcjowfSksRGQ9cmQoQ2QpLEVkPW0oe30sdWQse3JlbGF0ZWRUYXJnZXQ6MH0pLEZkPXJkKEVkKSxHZD1tKHt9LHNkLHthbmltYXRpb25OYW1lOjAsZWxhcHNlZFRpbWU6MCxwc2V1ZG9FbGVtZW50OjB9KSxIZD1yZChHZCksSWQ9bSh7fSxzZCx7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pLEpkPXJkKElkKSxLZD1tKHt9LHNkLHtkYXRhOjB9KSxMZD1yZChLZCksTWQ9e0VzYzpcIkVzY2FwZVwiLFxuU3BhY2ViYXI6XCIgXCIsTGVmdDpcIkFycm93TGVmdFwiLFVwOlwiQXJyb3dVcFwiLFJpZ2h0OlwiQXJyb3dSaWdodFwiLERvd246XCJBcnJvd0Rvd25cIixEZWw6XCJEZWxldGVcIixXaW46XCJPU1wiLE1lbnU6XCJDb250ZXh0TWVudVwiLEFwcHM6XCJDb250ZXh0TWVudVwiLFNjcm9sbDpcIlNjcm9sbExvY2tcIixNb3pQcmludGFibGVLZXk6XCJVbmlkZW50aWZpZWRcIn0sTmQ9ezg6XCJCYWNrc3BhY2VcIiw5OlwiVGFiXCIsMTI6XCJDbGVhclwiLDEzOlwiRW50ZXJcIiwxNjpcIlNoaWZ0XCIsMTc6XCJDb250cm9sXCIsMTg6XCJBbHRcIiwxOTpcIlBhdXNlXCIsMjA6XCJDYXBzTG9ja1wiLDI3OlwiRXNjYXBlXCIsMzI6XCIgXCIsMzM6XCJQYWdlVXBcIiwzNDpcIlBhZ2VEb3duXCIsMzU6XCJFbmRcIiwzNjpcIkhvbWVcIiwzNzpcIkFycm93TGVmdFwiLDM4OlwiQXJyb3dVcFwiLDM5OlwiQXJyb3dSaWdodFwiLDQwOlwiQXJyb3dEb3duXCIsNDU6XCJJbnNlcnRcIiw0NjpcIkRlbGV0ZVwiLDExMjpcIkYxXCIsMTEzOlwiRjJcIiwxMTQ6XCJGM1wiLDExNTpcIkY0XCIsMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsXG4xMTk6XCJGOFwiLDEyMDpcIkY5XCIsMTIxOlwiRjEwXCIsMTIyOlwiRjExXCIsMTIzOlwiRjEyXCIsMTQ0OlwiTnVtTG9ja1wiLDE0NTpcIlNjcm9sbExvY2tcIiwyMjQ6XCJNZXRhXCJ9LE9kPXtBbHQ6XCJhbHRLZXlcIixDb250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBQZChhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPU9kW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gemQoKXtyZXR1cm4gUGR9XG52YXIgUWQ9bSh7fSx1ZCx7a2V5OmZ1bmN0aW9uKGEpe2lmKGEua2V5KXt2YXIgYj1NZFthLmtleV18fGEua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1iKXJldHVybiBifXJldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT8oYT1vZChhKSwxMz09PWE/XCJFbnRlclwiOlN0cmluZy5mcm9tQ2hhckNvZGUoYSkpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/TmRbYS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifSxjb2RlOjAsbG9jYXRpb246MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAscmVwZWF0OjAsbG9jYWxlOjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZCxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/b2QoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9vZChhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLFJkPXJkKFFkKSxTZD1tKHt9LEFkLHtwb2ludGVySWQ6MCx3aWR0aDowLGhlaWdodDowLHByZXNzdXJlOjAsdGFuZ2VudGlhbFByZXNzdXJlOjAsdGlsdFg6MCx0aWx0WTowLHR3aXN0OjAscG9pbnRlclR5cGU6MCxpc1ByaW1hcnk6MH0pLFRkPXJkKFNkKSxVZD1tKHt9LHVkLHt0b3VjaGVzOjAsdGFyZ2V0VG91Y2hlczowLGNoYW5nZWRUb3VjaGVzOjAsYWx0S2V5OjAsbWV0YUtleTowLGN0cmxLZXk6MCxzaGlmdEtleTowLGdldE1vZGlmaWVyU3RhdGU6emR9KSxWZD1yZChVZCksV2Q9bSh7fSxzZCx7cHJvcGVydHlOYW1lOjAsZWxhcHNlZFRpbWU6MCxwc2V1ZG9FbGVtZW50OjB9KSxYZD1yZChXZCksWWQ9bSh7fSxBZCx7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluIGE/LWEud2hlZWxEZWx0YVg6MH0sXG5kZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6MCxkZWx0YU1vZGU6MH0pLFpkPXJkKFlkKSwkZD1bOSwxMywyNywzMl0sYWU9ZmEmJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LGJlPW51bGw7ZmEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmKGJlPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7dmFyIGNlPWZhJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYhYmUsZGU9ZmEmJighYWV8fGJlJiY4PGJlJiYxMT49YmUpLGVlPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLGZlPSExO1xuZnVuY3Rpb24gZ2UoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT0kZC5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiZm9jdXNvdXRcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBoZShhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciBpZT0hMTtmdW5jdGlvbiBqZShhLGIpe3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gaGUoYik7Y2FzZSBcImtleXByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO2ZlPSEwO3JldHVybiBlZTtjYXNlIFwidGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT1lZSYmZmU/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24ga2UoYSxiKXtpZihpZSlyZXR1cm5cImNvbXBvc2l0aW9uZW5kXCI9PT1hfHwhYWUmJmdlKGEsYik/KGE9bmQoKSxtZD1sZD1rZD1udWxsLGllPSExLGEpOm51bGw7c3dpdGNoKGEpe2Nhc2UgXCJwYXN0ZVwiOnJldHVybiBudWxsO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKCEoYi5jdHJsS2V5fHxiLmFsdEtleXx8Yi5tZXRhS2V5KXx8Yi5jdHJsS2V5JiZiLmFsdEtleSl7aWYoYi5jaGFyJiYxPGIuY2hhci5sZW5ndGgpcmV0dXJuIGIuY2hhcjtpZihiLndoaWNoKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpfXJldHVybiBudWxsO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBkZSYmXCJrb1wiIT09Yi5sb2NhbGU/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgbGU9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07ZnVuY3Rpb24gbWUoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISFsZVthLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9ZnVuY3Rpb24gbmUoYSxiLGMsZCl7RWIoZCk7Yj1vZShiLFwib25DaGFuZ2VcIik7MDxiLmxlbmd0aCYmKGM9bmV3IHRkKFwib25DaGFuZ2VcIixcImNoYW5nZVwiLG51bGwsYyxkKSxhLnB1c2goe2V2ZW50OmMsbGlzdGVuZXJzOmJ9KSl9dmFyIHBlPW51bGwscWU9bnVsbDtmdW5jdGlvbiByZShhKXtzZShhLDApfWZ1bmN0aW9uIHRlKGEpe3ZhciBiPXVlKGEpO2lmKFdhKGIpKXJldHVybiBhfVxuZnVuY3Rpb24gdmUoYSxiKXtpZihcImNoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgd2U9ITE7aWYoZmEpe3ZhciB4ZTtpZihmYSl7dmFyIHllPVwib25pbnB1dFwiaW4gZG9jdW1lbnQ7aWYoIXllKXt2YXIgemU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTt6ZS5zZXRBdHRyaWJ1dGUoXCJvbmlucHV0XCIsXCJyZXR1cm47XCIpO3llPVwiZnVuY3Rpb25cIj09PXR5cGVvZiB6ZS5vbmlucHV0fXhlPXllfWVsc2UgeGU9ITE7d2U9eGUmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSl9ZnVuY3Rpb24gQWUoKXtwZSYmKHBlLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEJlKSxxZT1wZT1udWxsKX1mdW5jdGlvbiBCZShhKXtpZihcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmdGUocWUpKXt2YXIgYj1bXTtuZShiLHFlLGEseGIoYSkpO2E9cmU7aWYoS2IpYShiKTtlbHNle0tiPSEwO3RyeXtHYihhLGIpfWZpbmFsbHl7S2I9ITEsTWIoKX19fX1cbmZ1bmN0aW9uIENlKGEsYixjKXtcImZvY3VzaW5cIj09PWE/KEFlKCkscGU9YixxZT1jLHBlLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEJlKSk6XCJmb2N1c291dFwiPT09YSYmQWUoKX1mdW5jdGlvbiBEZShhKXtpZihcInNlbGVjdGlvbmNoYW5nZVwiPT09YXx8XCJrZXl1cFwiPT09YXx8XCJrZXlkb3duXCI9PT1hKXJldHVybiB0ZShxZSl9ZnVuY3Rpb24gRWUoYSxiKXtpZihcImNsaWNrXCI9PT1hKXJldHVybiB0ZShiKX1mdW5jdGlvbiBGZShhLGIpe2lmKFwiaW5wdXRcIj09PWF8fFwiY2hhbmdlXCI9PT1hKXJldHVybiB0ZShiKX1mdW5jdGlvbiBHZShhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyIEhlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBPYmplY3QuaXM/T2JqZWN0LmlzOkdlLEllPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBKZShhLGIpe2lmKEhlKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKylpZighSWUuY2FsbChiLGNbZF0pfHwhSGUoYVtjW2RdXSxiW2NbZF1dKSlyZXR1cm4hMTtyZXR1cm4hMH1mdW5jdGlvbiBLZShhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBMZShhLGIpe3ZhciBjPUtlKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPUtlKGMpfX1mdW5jdGlvbiBNZShhLGIpe3JldHVybiBhJiZiP2E9PT1iPyEwOmEmJjM9PT1hLm5vZGVUeXBlPyExOmImJjM9PT1iLm5vZGVUeXBlP01lKGEsYi5wYXJlbnROb2RlKTpcImNvbnRhaW5zXCJpbiBhP2EuY29udGFpbnMoYik6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj8hIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpJjE2KTohMTohMX1cbmZ1bmN0aW9uIE5lKCl7Zm9yKHZhciBhPXdpbmRvdyxiPVhhKCk7YiBpbnN0YW5jZW9mIGEuSFRNTElGcmFtZUVsZW1lbnQ7KXt0cnl7dmFyIGM9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNvbnRlbnRXaW5kb3cubG9jYXRpb24uaHJlZn1jYXRjaChkKXtjPSExfWlmKGMpYT1iLmNvbnRlbnRXaW5kb3c7ZWxzZSBicmVhaztiPVhhKGEuZG9jdW1lbnQpfXJldHVybiBifWZ1bmN0aW9uIE9lKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJihcInRleHRcIj09PWEudHlwZXx8XCJzZWFyY2hcIj09PWEudHlwZXx8XCJ0ZWxcIj09PWEudHlwZXx8XCJ1cmxcIj09PWEudHlwZXx8XCJwYXNzd29yZFwiPT09YS50eXBlKXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9XG52YXIgUGU9ZmEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxRZT1udWxsLFJlPW51bGwsU2U9bnVsbCxUZT0hMTtcbmZ1bmN0aW9uIFVlKGEsYixjKXt2YXIgZD1jLndpbmRvdz09PWM/Yy5kb2N1bWVudDo5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudDtUZXx8bnVsbD09UWV8fFFlIT09WGEoZCl8fChkPVFlLFwic2VsZWN0aW9uU3RhcnRcImluIGQmJk9lKGQpP2Q9e3N0YXJ0OmQuc2VsZWN0aW9uU3RhcnQsZW5kOmQuc2VsZWN0aW9uRW5kfTooZD0oZC5vd25lckRvY3VtZW50JiZkLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXd8fHdpbmRvdykuZ2V0U2VsZWN0aW9uKCksZD17YW5jaG9yTm9kZTpkLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmQuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpkLmZvY3VzTm9kZSxmb2N1c09mZnNldDpkLmZvY3VzT2Zmc2V0fSksU2UmJkplKFNlLGQpfHwoU2U9ZCxkPW9lKFJlLFwib25TZWxlY3RcIiksMDxkLmxlbmd0aCYmKGI9bmV3IHRkKFwib25TZWxlY3RcIixcInNlbGVjdFwiLG51bGwsYixjKSxhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmR9KSxiLnRhcmdldD1RZSkpKX1cblBjKFwiY2FuY2VsIGNhbmNlbCBjbGljayBjbGljayBjbG9zZSBjbG9zZSBjb250ZXh0bWVudSBjb250ZXh0TWVudSBjb3B5IGNvcHkgY3V0IGN1dCBhdXhjbGljayBhdXhDbGljayBkYmxjbGljayBkb3VibGVDbGljayBkcmFnZW5kIGRyYWdFbmQgZHJhZ3N0YXJ0IGRyYWdTdGFydCBkcm9wIGRyb3AgZm9jdXNpbiBmb2N1cyBmb2N1c291dCBibHVyIGlucHV0IGlucHV0IGludmFsaWQgaW52YWxpZCBrZXlkb3duIGtleURvd24ga2V5cHJlc3Mga2V5UHJlc3Mga2V5dXAga2V5VXAgbW91c2Vkb3duIG1vdXNlRG93biBtb3VzZXVwIG1vdXNlVXAgcGFzdGUgcGFzdGUgcGF1c2UgcGF1c2UgcGxheSBwbGF5IHBvaW50ZXJjYW5jZWwgcG9pbnRlckNhbmNlbCBwb2ludGVyZG93biBwb2ludGVyRG93biBwb2ludGVydXAgcG9pbnRlclVwIHJhdGVjaGFuZ2UgcmF0ZUNoYW5nZSByZXNldCByZXNldCBzZWVrZWQgc2Vla2VkIHN1Ym1pdCBzdWJtaXQgdG91Y2hjYW5jZWwgdG91Y2hDYW5jZWwgdG91Y2hlbmQgdG91Y2hFbmQgdG91Y2hzdGFydCB0b3VjaFN0YXJ0IHZvbHVtZWNoYW5nZSB2b2x1bWVDaGFuZ2VcIi5zcGxpdChcIiBcIiksXG4wKTtQYyhcImRyYWcgZHJhZyBkcmFnZW50ZXIgZHJhZ0VudGVyIGRyYWdleGl0IGRyYWdFeGl0IGRyYWdsZWF2ZSBkcmFnTGVhdmUgZHJhZ292ZXIgZHJhZ092ZXIgbW91c2Vtb3ZlIG1vdXNlTW92ZSBtb3VzZW91dCBtb3VzZU91dCBtb3VzZW92ZXIgbW91c2VPdmVyIHBvaW50ZXJtb3ZlIHBvaW50ZXJNb3ZlIHBvaW50ZXJvdXQgcG9pbnRlck91dCBwb2ludGVyb3ZlciBwb2ludGVyT3ZlciBzY3JvbGwgc2Nyb2xsIHRvZ2dsZSB0b2dnbGUgdG91Y2htb3ZlIHRvdWNoTW92ZSB3aGVlbCB3aGVlbFwiLnNwbGl0KFwiIFwiKSwxKTtQYyhPYywyKTtmb3IodmFyIFZlPVwiY2hhbmdlIHNlbGVjdGlvbmNoYW5nZSB0ZXh0SW5wdXQgY29tcG9zaXRpb25zdGFydCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnVwZGF0ZVwiLnNwbGl0KFwiIFwiKSxXZT0wO1dlPFZlLmxlbmd0aDtXZSsrKU5jLnNldChWZVtXZV0sMCk7ZWEoXCJvbk1vdXNlRW50ZXJcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtcbmVhKFwib25Nb3VzZUxlYXZlXCIsW1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXSk7ZWEoXCJvblBvaW50ZXJFbnRlclwiLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdKTtlYShcIm9uUG9pbnRlckxlYXZlXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO2RhKFwib25DaGFuZ2VcIixcImNoYW5nZSBjbGljayBmb2N1c2luIGZvY3Vzb3V0IGlucHV0IGtleWRvd24ga2V5dXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpKTtkYShcIm9uU2VsZWN0XCIsXCJmb2N1c291dCBjb250ZXh0bWVudSBkcmFnZW5kIGZvY3VzaW4ga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2RhKFwib25CZWZvcmVJbnB1dFwiLFtcImNvbXBvc2l0aW9uZW5kXCIsXCJrZXlwcmVzc1wiLFwidGV4dElucHV0XCIsXCJwYXN0ZVwiXSk7ZGEoXCJvbkNvbXBvc2l0aW9uRW5kXCIsXCJjb21wb3NpdGlvbmVuZCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7XG5kYShcIm9uQ29tcG9zaXRpb25TdGFydFwiLFwiY29tcG9zaXRpb25zdGFydCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7ZGEoXCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsXCJjb21wb3NpdGlvbnVwZGF0ZSBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7dmFyIFhlPVwiYWJvcnQgY2FucGxheSBjYW5wbGF5dGhyb3VnaCBkdXJhdGlvbmNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBsb2FkZWRkYXRhIGxvYWRlZG1ldGFkYXRhIGxvYWRzdGFydCBwYXVzZSBwbGF5IHBsYXlpbmcgcHJvZ3Jlc3MgcmF0ZWNoYW5nZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1c3BlbmQgdGltZXVwZGF0ZSB2b2x1bWVjaGFuZ2Ugd2FpdGluZ1wiLnNwbGl0KFwiIFwiKSxZZT1uZXcgU2V0KFwiY2FuY2VsIGNsb3NlIGludmFsaWQgbG9hZCBzY3JvbGwgdG9nZ2xlXCIuc3BsaXQoXCIgXCIpLmNvbmNhdChYZSkpO1xuZnVuY3Rpb24gWmUoYSxiLGMpe3ZhciBkPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PWM7WWIoZCxiLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1cbmZ1bmN0aW9uIHNlKGEsYil7Yj0wIT09KGImNCk7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspe3ZhciBkPWFbY10sZT1kLmV2ZW50O2Q9ZC5saXN0ZW5lcnM7YTp7dmFyIGY9dm9pZCAwO2lmKGIpZm9yKHZhciBnPWQubGVuZ3RoLTE7MDw9ZztnLS0pe3ZhciBoPWRbZ10saz1oLmluc3RhbmNlLGw9aC5jdXJyZW50VGFyZ2V0O2g9aC5saXN0ZW5lcjtpZihrIT09ZiYmZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWJyZWFrIGE7WmUoZSxoLGwpO2Y9a31lbHNlIGZvcihnPTA7ZzxkLmxlbmd0aDtnKyspe2g9ZFtnXTtrPWguaW5zdGFuY2U7bD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtaZShlLGgsbCk7Zj1rfX19aWYoVWIpdGhyb3cgYT1WYixVYj0hMSxWYj1udWxsLGE7fVxuZnVuY3Rpb24gRyhhLGIpe3ZhciBjPSRlKGIpLGQ9YStcIl9fYnViYmxlXCI7Yy5oYXMoZCl8fChhZihiLGEsMiwhMSksYy5hZGQoZCkpfXZhciBiZj1cIl9yZWFjdExpc3RlbmluZ1wiK01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpO2Z1bmN0aW9uIGNmKGEpe2FbYmZdfHwoYVtiZl09ITAsYmEuZm9yRWFjaChmdW5jdGlvbihiKXtZZS5oYXMoYil8fGRmKGIsITEsYSxudWxsKTtkZihiLCEwLGEsbnVsbCl9KSl9XG5mdW5jdGlvbiBkZihhLGIsYyxkKXt2YXIgZT00PGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1s0XT9hcmd1bWVudHNbNF06MCxmPWM7XCJzZWxlY3Rpb25jaGFuZ2VcIj09PWEmJjkhPT1jLm5vZGVUeXBlJiYoZj1jLm93bmVyRG9jdW1lbnQpO2lmKG51bGwhPT1kJiYhYiYmWWUuaGFzKGEpKXtpZihcInNjcm9sbFwiIT09YSlyZXR1cm47ZXw9MjtmPWR9dmFyIGc9JGUoZiksaD1hK1wiX19cIisoYj9cImNhcHR1cmVcIjpcImJ1YmJsZVwiKTtnLmhhcyhoKXx8KGImJihlfD00KSxhZihmLGEsZSxiKSxnLmFkZChoKSl9XG5mdW5jdGlvbiBhZihhLGIsYyxkKXt2YXIgZT1OYy5nZXQoYik7c3dpdGNoKHZvaWQgMD09PWU/MjplKXtjYXNlIDA6ZT1nZDticmVhaztjYXNlIDE6ZT1pZDticmVhaztkZWZhdWx0OmU9aGR9Yz1lLmJpbmQobnVsbCxiLGMsYSk7ZT12b2lkIDA7IVBifHxcInRvdWNoc3RhcnRcIiE9PWImJlwidG91Y2htb3ZlXCIhPT1iJiZcIndoZWVsXCIhPT1ifHwoZT0hMCk7ZD92b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse2NhcHR1cmU6ITAscGFzc2l2ZTplfSk6YS5hZGRFdmVudExpc3RlbmVyKGIsYywhMCk6dm9pZCAwIT09ZT9hLmFkZEV2ZW50TGlzdGVuZXIoYixjLHtwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCExKX1cbmZ1bmN0aW9uIGpkKGEsYixjLGQsZSl7dmFyIGY9ZDtpZigwPT09KGImMSkmJjA9PT0oYiYyKSYmbnVsbCE9PWQpYTpmb3IoOzspe2lmKG51bGw9PT1kKXJldHVybjt2YXIgZz1kLnRhZztpZigzPT09Z3x8ND09PWcpe3ZhciBoPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoaD09PWV8fDg9PT1oLm5vZGVUeXBlJiZoLnBhcmVudE5vZGU9PT1lKWJyZWFrO2lmKDQ9PT1nKWZvcihnPWQucmV0dXJuO251bGwhPT1nOyl7dmFyIGs9Zy50YWc7aWYoMz09PWt8fDQ9PT1rKWlmKGs9Zy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyxrPT09ZXx8OD09PWsubm9kZVR5cGUmJmsucGFyZW50Tm9kZT09PWUpcmV0dXJuO2c9Zy5yZXR1cm59Zm9yKDtudWxsIT09aDspe2c9d2MoaCk7aWYobnVsbD09PWcpcmV0dXJuO2s9Zy50YWc7aWYoNT09PWt8fDY9PT1rKXtkPWY9Zztjb250aW51ZSBhfWg9aC5wYXJlbnROb2RlfX1kPWQucmV0dXJufU5iKGZ1bmN0aW9uKCl7dmFyIGQ9ZixlPXhiKGMpLGc9W107XG5hOnt2YXIgaD1NYy5nZXQoYSk7aWYodm9pZCAwIT09aCl7dmFyIGs9dGQseD1hO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09b2QoYykpYnJlYWsgYTtjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOms9UmQ7YnJlYWs7Y2FzZSBcImZvY3VzaW5cIjp4PVwiZm9jdXNcIjtrPUZkO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOng9XCJibHVyXCI7az1GZDticmVhaztjYXNlIFwiYmVmb3JlYmx1clwiOmNhc2UgXCJhZnRlcmJsdXJcIjprPUZkO2JyZWFrO2Nhc2UgXCJjbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilicmVhayBhO2Nhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6az1CZDticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjprPVxuRGQ7YnJlYWs7Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6az1WZDticmVhaztjYXNlIEljOmNhc2UgSmM6Y2FzZSBLYzprPUhkO2JyZWFrO2Nhc2UgTGM6az1YZDticmVhaztjYXNlIFwic2Nyb2xsXCI6az12ZDticmVhaztjYXNlIFwid2hlZWxcIjprPVpkO2JyZWFrO2Nhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJwYXN0ZVwiOms9SmQ7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcnVwXCI6az1UZH12YXIgdz0wIT09KGImNCksej0hdyYmXCJzY3JvbGxcIj09PWEsdT13P251bGwhPT1oP2grXCJDYXB0dXJlXCI6bnVsbDpoO3c9W107Zm9yKHZhciB0PWQscTtudWxsIT09XG50Oyl7cT10O3ZhciB2PXEuc3RhdGVOb2RlOzU9PT1xLnRhZyYmbnVsbCE9PXYmJihxPXYsbnVsbCE9PXUmJih2PU9iKHQsdSksbnVsbCE9diYmdy5wdXNoKGVmKHQsdixxKSkpKTtpZih6KWJyZWFrO3Q9dC5yZXR1cm59MDx3Lmxlbmd0aCYmKGg9bmV3IGsoaCx4LG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmgsbGlzdGVuZXJzOnd9KSl9fWlmKDA9PT0oYiY3KSl7YTp7aD1cIm1vdXNlb3ZlclwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YTtrPVwibW91c2VvdXRcIj09PWF8fFwicG9pbnRlcm91dFwiPT09YTtpZihoJiYwPT09KGImMTYpJiYoeD1jLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpJiYod2MoeCl8fHhbZmZdKSlicmVhayBhO2lmKGt8fGgpe2g9ZS53aW5kb3c9PT1lP2U6KGg9ZS5vd25lckRvY3VtZW50KT9oLmRlZmF1bHRWaWV3fHxoLnBhcmVudFdpbmRvdzp3aW5kb3c7aWYoayl7aWYoeD1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50LGs9ZCx4PXg/d2MoeCk6bnVsbCxudWxsIT09XG54JiYoej1aYih4KSx4IT09enx8NSE9PXgudGFnJiY2IT09eC50YWcpKXg9bnVsbH1lbHNlIGs9bnVsbCx4PWQ7aWYoayE9PXgpe3c9QmQ7dj1cIm9uTW91c2VMZWF2ZVwiO3U9XCJvbk1vdXNlRW50ZXJcIjt0PVwibW91c2VcIjtpZihcInBvaW50ZXJvdXRcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEpdz1UZCx2PVwib25Qb2ludGVyTGVhdmVcIix1PVwib25Qb2ludGVyRW50ZXJcIix0PVwicG9pbnRlclwiO3o9bnVsbD09az9oOnVlKGspO3E9bnVsbD09eD9oOnVlKHgpO2g9bmV3IHcodix0K1wibGVhdmVcIixrLGMsZSk7aC50YXJnZXQ9ejtoLnJlbGF0ZWRUYXJnZXQ9cTt2PW51bGw7d2MoZSk9PT1kJiYodz1uZXcgdyh1LHQrXCJlbnRlclwiLHgsYyxlKSx3LnRhcmdldD1xLHcucmVsYXRlZFRhcmdldD16LHY9dyk7ej12O2lmKGsmJngpYjp7dz1rO3U9eDt0PTA7Zm9yKHE9dztxO3E9Z2YocSkpdCsrO3E9MDtmb3Iodj11O3Y7dj1nZih2KSlxKys7Zm9yKDswPHQtcTspdz1nZih3KSx0LS07Zm9yKDswPHEtdDspdT1cbmdmKHUpLHEtLTtmb3IoO3QtLTspe2lmKHc9PT11fHxudWxsIT09dSYmdz09PXUuYWx0ZXJuYXRlKWJyZWFrIGI7dz1nZih3KTt1PWdmKHUpfXc9bnVsbH1lbHNlIHc9bnVsbDtudWxsIT09ayYmaGYoZyxoLGssdywhMSk7bnVsbCE9PXgmJm51bGwhPT16JiZoZihnLHoseCx3LCEwKX19fWE6e2g9ZD91ZShkKTp3aW5kb3c7az1oLm5vZGVOYW1lJiZoLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7aWYoXCJzZWxlY3RcIj09PWt8fFwiaW5wdXRcIj09PWsmJlwiZmlsZVwiPT09aC50eXBlKXZhciBKPXZlO2Vsc2UgaWYobWUoaCkpaWYod2UpSj1GZTtlbHNle0o9RGU7dmFyIEs9Q2V9ZWxzZShrPWgubm9kZU5hbWUpJiZcImlucHV0XCI9PT1rLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1oLnR5cGV8fFwicmFkaW9cIj09PWgudHlwZSkmJihKPUVlKTtpZihKJiYoSj1KKGEsZCkpKXtuZShnLEosYyxlKTticmVhayBhfUsmJksoYSxoLGQpO1wiZm9jdXNvdXRcIj09PWEmJihLPWguX3dyYXBwZXJTdGF0ZSkmJlxuSy5jb250cm9sbGVkJiZcIm51bWJlclwiPT09aC50eXBlJiZiYihoLFwibnVtYmVyXCIsaC52YWx1ZSl9Sz1kP3VlKGQpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcImZvY3VzaW5cIjppZihtZShLKXx8XCJ0cnVlXCI9PT1LLmNvbnRlbnRFZGl0YWJsZSlRZT1LLFJlPWQsU2U9bnVsbDticmVhaztjYXNlIFwiZm9jdXNvdXRcIjpTZT1SZT1RZT1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZWRvd25cIjpUZT0hMDticmVhaztjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJkcmFnZW5kXCI6VGU9ITE7VWUoZyxjLGUpO2JyZWFrO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihQZSlicmVhaztjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOlVlKGcsYyxlKX12YXIgUTtpZihhZSliOntzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjp2YXIgTD1cIm9uQ29tcG9zaXRpb25TdGFydFwiO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6TD1cIm9uQ29tcG9zaXRpb25FbmRcIjticmVhayBiO1xuY2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6TD1cIm9uQ29tcG9zaXRpb25VcGRhdGVcIjticmVhayBifUw9dm9pZCAwfWVsc2UgaWU/Z2UoYSxjKSYmKEw9XCJvbkNvbXBvc2l0aW9uRW5kXCIpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoTD1cIm9uQ29tcG9zaXRpb25TdGFydFwiKTtMJiYoZGUmJlwia29cIiE9PWMubG9jYWxlJiYoaWV8fFwib25Db21wb3NpdGlvblN0YXJ0XCIhPT1MP1wib25Db21wb3NpdGlvbkVuZFwiPT09TCYmaWUmJihRPW5kKCkpOihrZD1lLGxkPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGllPSEwKSksSz1vZShkLEwpLDA8Sy5sZW5ndGgmJihMPW5ldyBMZChMLGEsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6TCxsaXN0ZW5lcnM6S30pLFE/TC5kYXRhPVE6KFE9aGUoYyksbnVsbCE9PVEmJihMLmRhdGE9USkpKSk7aWYoUT1jZT9qZShhLGMpOmtlKGEsYykpZD1vZShkLFwib25CZWZvcmVJbnB1dFwiKSwwPGQubGVuZ3RoJiYoZT1uZXcgTGQoXCJvbkJlZm9yZUlucHV0XCIsXG5cImJlZm9yZWlucHV0XCIsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6ZSxsaXN0ZW5lcnM6ZH0pLGUuZGF0YT1RKX1zZShnLGIpfSl9ZnVuY3Rpb24gZWYoYSxiLGMpe3JldHVybntpbnN0YW5jZTphLGxpc3RlbmVyOmIsY3VycmVudFRhcmdldDpjfX1mdW5jdGlvbiBvZShhLGIpe2Zvcih2YXIgYz1iK1wiQ2FwdHVyZVwiLGQ9W107bnVsbCE9PWE7KXt2YXIgZT1hLGY9ZS5zdGF0ZU5vZGU7NT09PWUudGFnJiZudWxsIT09ZiYmKGU9ZixmPU9iKGEsYyksbnVsbCE9ZiYmZC51bnNoaWZ0KGVmKGEsZixlKSksZj1PYihhLGIpLG51bGwhPWYmJmQucHVzaChlZihhLGYsZSkpKTthPWEucmV0dXJufXJldHVybiBkfWZ1bmN0aW9uIGdmKGEpe2lmKG51bGw9PT1hKXJldHVybiBudWxsO2RvIGE9YS5yZXR1cm47d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9XG5mdW5jdGlvbiBoZihhLGIsYyxkLGUpe2Zvcih2YXIgZj1iLl9yZWFjdE5hbWUsZz1bXTtudWxsIT09YyYmYyE9PWQ7KXt2YXIgaD1jLGs9aC5hbHRlcm5hdGUsbD1oLnN0YXRlTm9kZTtpZihudWxsIT09ayYmaz09PWQpYnJlYWs7NT09PWgudGFnJiZudWxsIT09bCYmKGg9bCxlPyhrPU9iKGMsZiksbnVsbCE9ayYmZy51bnNoaWZ0KGVmKGMsayxoKSkpOmV8fChrPU9iKGMsZiksbnVsbCE9ayYmZy5wdXNoKGVmKGMsayxoKSkpKTtjPWMucmV0dXJufTAhPT1nLmxlbmd0aCYmYS5wdXNoKHtldmVudDpiLGxpc3RlbmVyczpnfSl9ZnVuY3Rpb24gamYoKXt9dmFyIGtmPW51bGwsbGY9bnVsbDtmdW5jdGlvbiBtZihhLGIpe3N3aXRjaChhKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOnJldHVybiEhYi5hdXRvRm9jdXN9cmV0dXJuITF9XG5mdW5jdGlvbiBuZihhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwib3B0aW9uXCI9PT1hfHxcIm5vc2NyaXB0XCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9dmFyIG9mPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLHBmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OnZvaWQgMDtmdW5jdGlvbiBxZihhKXsxPT09YS5ub2RlVHlwZT9hLnRleHRDb250ZW50PVwiXCI6OT09PWEubm9kZVR5cGUmJihhPWEuYm9keSxudWxsIT1hJiYoYS50ZXh0Q29udGVudD1cIlwiKSl9XG5mdW5jdGlvbiByZihhKXtmb3IoO251bGwhPWE7YT1hLm5leHRTaWJsaW5nKXt2YXIgYj1hLm5vZGVUeXBlO2lmKDE9PT1ifHwzPT09YilicmVha31yZXR1cm4gYX1mdW5jdGlvbiBzZihhKXthPWEucHJldmlvdXNTaWJsaW5nO2Zvcih2YXIgYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKFwiJFwiPT09Y3x8XCIkIVwiPT09Y3x8XCIkP1wiPT09Yyl7aWYoMD09PWIpcmV0dXJuIGE7Yi0tfWVsc2VcIi8kXCI9PT1jJiZiKyt9YT1hLnByZXZpb3VzU2libGluZ31yZXR1cm4gbnVsbH12YXIgdGY9MDtmdW5jdGlvbiB1ZihhKXtyZXR1cm57JCR0eXBlb2Y6R2EsdG9TdHJpbmc6YSx2YWx1ZU9mOmF9fXZhciB2Zj1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSx3Zj1cIl9fcmVhY3RGaWJlciRcIit2Zix4Zj1cIl9fcmVhY3RQcm9wcyRcIit2ZixmZj1cIl9fcmVhY3RDb250YWluZXIkXCIrdmYseWY9XCJfX3JlYWN0RXZlbnRzJFwiK3ZmO1xuZnVuY3Rpb24gd2MoYSl7dmFyIGI9YVt3Zl07aWYoYilyZXR1cm4gYjtmb3IodmFyIGM9YS5wYXJlbnROb2RlO2M7KXtpZihiPWNbZmZdfHxjW3dmXSl7Yz1iLmFsdGVybmF0ZTtpZihudWxsIT09Yi5jaGlsZHx8bnVsbCE9PWMmJm51bGwhPT1jLmNoaWxkKWZvcihhPXNmKGEpO251bGwhPT1hOyl7aWYoYz1hW3dmXSlyZXR1cm4gYzthPXNmKGEpfXJldHVybiBifWE9YztjPWEucGFyZW50Tm9kZX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBDYihhKXthPWFbd2ZdfHxhW2ZmXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWcmJjEzIT09YS50YWcmJjMhPT1hLnRhZz9udWxsOmF9ZnVuY3Rpb24gdWUoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO3Rocm93IEVycm9yKHkoMzMpKTt9ZnVuY3Rpb24gRGIoYSl7cmV0dXJuIGFbeGZdfHxudWxsfVxuZnVuY3Rpb24gJGUoYSl7dmFyIGI9YVt5Zl07dm9pZCAwPT09YiYmKGI9YVt5Zl09bmV3IFNldCk7cmV0dXJuIGJ9dmFyIHpmPVtdLEFmPS0xO2Z1bmN0aW9uIEJmKGEpe3JldHVybntjdXJyZW50OmF9fWZ1bmN0aW9uIEgoYSl7MD5BZnx8KGEuY3VycmVudD16ZltBZl0semZbQWZdPW51bGwsQWYtLSl9ZnVuY3Rpb24gSShhLGIpe0FmKys7emZbQWZdPWEuY3VycmVudDthLmN1cnJlbnQ9Yn12YXIgQ2Y9e30sTT1CZihDZiksTj1CZighMSksRGY9Q2Y7XG5mdW5jdGlvbiBFZihhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIENmO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfWZ1bmN0aW9uIEZmKGEpe2E9YS5jaGlsZENvbnRleHRUeXBlcztyZXR1cm4gbnVsbCE9PWEmJnZvaWQgMCE9PWF9ZnVuY3Rpb24gR2YoKXtIKE4pO0goTSl9ZnVuY3Rpb24gSGYoYSxiLGMpe2lmKE0uY3VycmVudCE9PUNmKXRocm93IEVycm9yKHkoMTY4KSk7SShNLGIpO0koTixjKX1cbmZ1bmN0aW9uIElmKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTthPWIuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBjO2Q9ZC5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gZClpZighKGUgaW4gYSkpdGhyb3cgRXJyb3IoeSgxMDgsUmEoYil8fFwiVW5rbm93blwiLGUpKTtyZXR1cm4gbSh7fSxjLGQpfWZ1bmN0aW9uIEpmKGEpe2E9KGE9YS5zdGF0ZU5vZGUpJiZhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0fHxDZjtEZj1NLmN1cnJlbnQ7SShNLGEpO0koTixOLmN1cnJlbnQpO3JldHVybiEwfWZ1bmN0aW9uIEtmKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtpZighZCl0aHJvdyBFcnJvcih5KDE2OSkpO2M/KGE9SWYoYSxiLERmKSxkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWEsSChOKSxIKE0pLEkoTSxhKSk6SChOKTtJKE4sYyl9XG52YXIgTGY9bnVsbCxNZj1udWxsLE5mPXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5LE9mPXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxQZj1yLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrLFFmPXIudW5zdGFibGVfc2hvdWxkWWllbGQsUmY9ci51bnN0YWJsZV9yZXF1ZXN0UGFpbnQsU2Y9ci51bnN0YWJsZV9ub3csVGY9ci51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCxVZj1yLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5LFZmPXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksV2Y9ci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxYZj1yLnVuc3RhYmxlX0xvd1ByaW9yaXR5LFlmPXIudW5zdGFibGVfSWRsZVByaW9yaXR5LFpmPXt9LCRmPXZvaWQgMCE9PVJmP1JmOmZ1bmN0aW9uKCl7fSxhZz1udWxsLGJnPW51bGwsY2c9ITEsZGc9U2YoKSxPPTFFND5kZz9TZjpmdW5jdGlvbigpe3JldHVybiBTZigpLWRnfTtcbmZ1bmN0aW9uIGVnKCl7c3dpdGNoKFRmKCkpe2Nhc2UgVWY6cmV0dXJuIDk5O2Nhc2UgVmY6cmV0dXJuIDk4O2Nhc2UgV2Y6cmV0dXJuIDk3O2Nhc2UgWGY6cmV0dXJuIDk2O2Nhc2UgWWY6cmV0dXJuIDk1O2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzMzIpKTt9fWZ1bmN0aW9uIGZnKGEpe3N3aXRjaChhKXtjYXNlIDk5OnJldHVybiBVZjtjYXNlIDk4OnJldHVybiBWZjtjYXNlIDk3OnJldHVybiBXZjtjYXNlIDk2OnJldHVybiBYZjtjYXNlIDk1OnJldHVybiBZZjtkZWZhdWx0OnRocm93IEVycm9yKHkoMzMyKSk7fX1mdW5jdGlvbiBnZyhhLGIpe2E9ZmcoYSk7cmV0dXJuIE5mKGEsYil9ZnVuY3Rpb24gaGcoYSxiLGMpe2E9ZmcoYSk7cmV0dXJuIE9mKGEsYixjKX1mdW5jdGlvbiBpZygpe2lmKG51bGwhPT1iZyl7dmFyIGE9Ymc7Ymc9bnVsbDtQZihhKX1qZygpfVxuZnVuY3Rpb24gamcoKXtpZighY2cmJm51bGwhPT1hZyl7Y2c9ITA7dmFyIGE9MDt0cnl7dmFyIGI9YWc7Z2coOTksZnVuY3Rpb24oKXtmb3IoO2E8Yi5sZW5ndGg7YSsrKXt2YXIgYz1iW2FdO2RvIGM9YyghMCk7d2hpbGUobnVsbCE9PWMpfX0pO2FnPW51bGx9Y2F0Y2goYyl7dGhyb3cgbnVsbCE9PWFnJiYoYWc9YWcuc2xpY2UoYSsxKSksT2YoVWYsaWcpLGM7fWZpbmFsbHl7Y2c9ITF9fX12YXIga2c9cmEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWc7ZnVuY3Rpb24gbGcoYSxiKXtpZihhJiZhLmRlZmF1bHRQcm9wcyl7Yj1tKHt9LGIpO2E9YS5kZWZhdWx0UHJvcHM7Zm9yKHZhciBjIGluIGEpdm9pZCAwPT09YltjXSYmKGJbY109YVtjXSk7cmV0dXJuIGJ9cmV0dXJuIGJ9dmFyIG1nPUJmKG51bGwpLG5nPW51bGwsb2c9bnVsbCxwZz1udWxsO2Z1bmN0aW9uIHFnKCl7cGc9b2c9bmc9bnVsbH1cbmZ1bmN0aW9uIHJnKGEpe3ZhciBiPW1nLmN1cnJlbnQ7SChtZyk7YS50eXBlLl9jb250ZXh0Ll9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiBzZyhhLGIpe2Zvcig7bnVsbCE9PWE7KXt2YXIgYz1hLmFsdGVybmF0ZTtpZigoYS5jaGlsZExhbmVzJmIpPT09YilpZihudWxsPT09Y3x8KGMuY2hpbGRMYW5lcyZiKT09PWIpYnJlYWs7ZWxzZSBjLmNoaWxkTGFuZXN8PWI7ZWxzZSBhLmNoaWxkTGFuZXN8PWIsbnVsbCE9PWMmJihjLmNoaWxkTGFuZXN8PWIpO2E9YS5yZXR1cm59fWZ1bmN0aW9uIHRnKGEsYil7bmc9YTtwZz1vZz1udWxsO2E9YS5kZXBlbmRlbmNpZXM7bnVsbCE9PWEmJm51bGwhPT1hLmZpcnN0Q29udGV4dCYmKDAhPT0oYS5sYW5lcyZiKSYmKHVnPSEwKSxhLmZpcnN0Q29udGV4dD1udWxsKX1cbmZ1bmN0aW9uIHZnKGEsYil7aWYocGchPT1hJiYhMSE9PWImJjAhPT1iKXtpZihcIm51bWJlclwiIT09dHlwZW9mIGJ8fDEwNzM3NDE4MjM9PT1iKXBnPWEsYj0xMDczNzQxODIzO2I9e2NvbnRleHQ6YSxvYnNlcnZlZEJpdHM6YixuZXh0Om51bGx9O2lmKG51bGw9PT1vZyl7aWYobnVsbD09PW5nKXRocm93IEVycm9yKHkoMzA4KSk7b2c9YjtuZy5kZXBlbmRlbmNpZXM9e2xhbmVzOjAsZmlyc3RDb250ZXh0OmIscmVzcG9uZGVyczpudWxsfX1lbHNlIG9nPW9nLm5leHQ9Yn1yZXR1cm4gYS5fY3VycmVudFZhbHVlfXZhciB3Zz0hMTtmdW5jdGlvbiB4ZyhhKXthLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5tZW1vaXplZFN0YXRlLGZpcnN0QmFzZVVwZGF0ZTpudWxsLGxhc3RCYXNlVXBkYXRlOm51bGwsc2hhcmVkOntwZW5kaW5nOm51bGx9LGVmZmVjdHM6bnVsbH19XG5mdW5jdGlvbiB5ZyhhLGIpe2E9YS51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPT09YSYmKGIudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6YS5maXJzdEJhc2VVcGRhdGUsbGFzdEJhc2VVcGRhdGU6YS5sYXN0QmFzZVVwZGF0ZSxzaGFyZWQ6YS5zaGFyZWQsZWZmZWN0czphLmVmZmVjdHN9KX1mdW5jdGlvbiB6ZyhhLGIpe3JldHVybntldmVudFRpbWU6YSxsYW5lOmIsdGFnOjAscGF5bG9hZDpudWxsLGNhbGxiYWNrOm51bGwsbmV4dDpudWxsfX1mdW5jdGlvbiBBZyhhLGIpe2E9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09YSl7YT1hLnNoYXJlZDt2YXIgYz1hLnBlbmRpbmc7bnVsbD09PWM/Yi5uZXh0PWI6KGIubmV4dD1jLm5leHQsYy5uZXh0PWIpO2EucGVuZGluZz1ifX1cbmZ1bmN0aW9uIEJnKGEsYil7dmFyIGM9YS51cGRhdGVRdWV1ZSxkPWEuYWx0ZXJuYXRlO2lmKG51bGwhPT1kJiYoZD1kLnVwZGF0ZVF1ZXVlLGM9PT1kKSl7dmFyIGU9bnVsbCxmPW51bGw7Yz1jLmZpcnN0QmFzZVVwZGF0ZTtpZihudWxsIT09Yyl7ZG97dmFyIGc9e2V2ZW50VGltZTpjLmV2ZW50VGltZSxsYW5lOmMubGFuZSx0YWc6Yy50YWcscGF5bG9hZDpjLnBheWxvYWQsY2FsbGJhY2s6Yy5jYWxsYmFjayxuZXh0Om51bGx9O251bGw9PT1mP2U9Zj1nOmY9Zi5uZXh0PWc7Yz1jLm5leHR9d2hpbGUobnVsbCE9PWMpO251bGw9PT1mP2U9Zj1iOmY9Zi5uZXh0PWJ9ZWxzZSBlPWY9YjtjPXtiYXNlU3RhdGU6ZC5iYXNlU3RhdGUsZmlyc3RCYXNlVXBkYXRlOmUsbGFzdEJhc2VVcGRhdGU6ZixzaGFyZWQ6ZC5zaGFyZWQsZWZmZWN0czpkLmVmZmVjdHN9O2EudXBkYXRlUXVldWU9YztyZXR1cm59YT1jLmxhc3RCYXNlVXBkYXRlO251bGw9PT1hP2MuZmlyc3RCYXNlVXBkYXRlPWI6YS5uZXh0PVxuYjtjLmxhc3RCYXNlVXBkYXRlPWJ9XG5mdW5jdGlvbiBDZyhhLGIsYyxkKXt2YXIgZT1hLnVwZGF0ZVF1ZXVlO3dnPSExO3ZhciBmPWUuZmlyc3RCYXNlVXBkYXRlLGc9ZS5sYXN0QmFzZVVwZGF0ZSxoPWUuc2hhcmVkLnBlbmRpbmc7aWYobnVsbCE9PWgpe2Uuc2hhcmVkLnBlbmRpbmc9bnVsbDt2YXIgaz1oLGw9ay5uZXh0O2submV4dD1udWxsO251bGw9PT1nP2Y9bDpnLm5leHQ9bDtnPWs7dmFyIG49YS5hbHRlcm5hdGU7aWYobnVsbCE9PW4pe249bi51cGRhdGVRdWV1ZTt2YXIgQT1uLmxhc3RCYXNlVXBkYXRlO0EhPT1nJiYobnVsbD09PUE/bi5maXJzdEJhc2VVcGRhdGU9bDpBLm5leHQ9bCxuLmxhc3RCYXNlVXBkYXRlPWspfX1pZihudWxsIT09Zil7QT1lLmJhc2VTdGF0ZTtnPTA7bj1sPWs9bnVsbDtkb3toPWYubGFuZTt2YXIgcD1mLmV2ZW50VGltZTtpZigoZCZoKT09PWgpe251bGwhPT1uJiYobj1uLm5leHQ9e2V2ZW50VGltZTpwLGxhbmU6MCx0YWc6Zi50YWcscGF5bG9hZDpmLnBheWxvYWQsY2FsbGJhY2s6Zi5jYWxsYmFjayxcbm5leHQ6bnVsbH0pO2E6e3ZhciBDPWEseD1mO2g9YjtwPWM7c3dpdGNoKHgudGFnKXtjYXNlIDE6Qz14LnBheWxvYWQ7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIEMpe0E9Qy5jYWxsKHAsQSxoKTticmVhayBhfUE9QzticmVhayBhO2Nhc2UgMzpDLmZsYWdzPUMuZmxhZ3MmLTQwOTd8NjQ7Y2FzZSAwOkM9eC5wYXlsb2FkO2g9XCJmdW5jdGlvblwiPT09dHlwZW9mIEM/Qy5jYWxsKHAsQSxoKTpDO2lmKG51bGw9PT1ofHx2b2lkIDA9PT1oKWJyZWFrIGE7QT1tKHt9LEEsaCk7YnJlYWsgYTtjYXNlIDI6d2c9ITB9fW51bGwhPT1mLmNhbGxiYWNrJiYoYS5mbGFnc3w9MzIsaD1lLmVmZmVjdHMsbnVsbD09PWg/ZS5lZmZlY3RzPVtmXTpoLnB1c2goZikpfWVsc2UgcD17ZXZlbnRUaW1lOnAsbGFuZTpoLHRhZzpmLnRhZyxwYXlsb2FkOmYucGF5bG9hZCxjYWxsYmFjazpmLmNhbGxiYWNrLG5leHQ6bnVsbH0sbnVsbD09PW4/KGw9bj1wLGs9QSk6bj1uLm5leHQ9cCxnfD1oO2Y9Zi5uZXh0O2lmKG51bGw9PT1cbmYpaWYoaD1lLnNoYXJlZC5wZW5kaW5nLG51bGw9PT1oKWJyZWFrO2Vsc2UgZj1oLm5leHQsaC5uZXh0PW51bGwsZS5sYXN0QmFzZVVwZGF0ZT1oLGUuc2hhcmVkLnBlbmRpbmc9bnVsbH13aGlsZSgxKTtudWxsPT09biYmKGs9QSk7ZS5iYXNlU3RhdGU9aztlLmZpcnN0QmFzZVVwZGF0ZT1sO2UubGFzdEJhc2VVcGRhdGU9bjtEZ3w9ZzthLmxhbmVzPWc7YS5tZW1vaXplZFN0YXRlPUF9fWZ1bmN0aW9uIEVnKGEsYixjKXthPWIuZWZmZWN0cztiLmVmZmVjdHM9bnVsbDtpZihudWxsIT09YSlmb3IoYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgZD1hW2JdLGU9ZC5jYWxsYmFjaztpZihudWxsIT09ZSl7ZC5jYWxsYmFjaz1udWxsO2Q9YztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZSl0aHJvdyBFcnJvcih5KDE5MSxlKSk7ZS5jYWxsKGQpfX19dmFyIEZnPShuZXcgYWEuQ29tcG9uZW50KS5yZWZzO1xuZnVuY3Rpb24gR2coYSxiLGMsZCl7Yj1hLm1lbW9pemVkU3RhdGU7Yz1jKGQsYik7Yz1udWxsPT09Y3x8dm9pZCAwPT09Yz9iOm0oe30sYixjKTthLm1lbW9pemVkU3RhdGU9YzswPT09YS5sYW5lcyYmKGEudXBkYXRlUXVldWUuYmFzZVN0YXRlPWMpfVxudmFyIEtnPXtpc01vdW50ZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuKGE9YS5fcmVhY3RJbnRlcm5hbHMpP1piKGEpPT09YTohMX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBkPUhnKCksZT1JZyhhKSxmPXpnKGQsZSk7Zi5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihmLmNhbGxiYWNrPWMpO0FnKGEsZik7SmcoYSxlLGQpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBkPUhnKCksZT1JZyhhKSxmPXpnKGQsZSk7Zi50YWc9MTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7QWcoYSxmKTtKZyhhLGUsZCl9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihhLGIpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGM9SGcoKSxkPUlnKGEpLGU9emcoYyxkKTtlLnRhZz0yO3ZvaWQgMCE9PWImJm51bGwhPT1iJiYoZS5jYWxsYmFjaz1cbmIpO0FnKGEsZSk7SmcoYSxkLGMpfX07ZnVuY3Rpb24gTGcoYSxiLGMsZCxlLGYsZyl7YT1hLnN0YXRlTm9kZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5zaG91bGRDb21wb25lbnRVcGRhdGU/YS5zaG91bGRDb21wb25lbnRVcGRhdGUoZCxmLGcpOmIucHJvdG90eXBlJiZiLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8hSmUoYyxkKXx8IUplKGUsZik6ITB9XG5mdW5jdGlvbiBNZyhhLGIsYyl7dmFyIGQ9ITEsZT1DZjt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/Zj12ZyhmKTooZT1GZihiKT9EZjpNLmN1cnJlbnQsZD1iLmNvbnRleHRUeXBlcyxmPShkPW51bGwhPT1kJiZ2b2lkIDAhPT1kKT9FZihhLGUpOkNmKTtiPW5ldyBiKGMsZik7YS5tZW1vaXplZFN0YXRlPW51bGwhPT1iLnN0YXRlJiZ2b2lkIDAhPT1iLnN0YXRlP2Iuc3RhdGU6bnVsbDtiLnVwZGF0ZXI9S2c7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFscz1hO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1lLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Zik7cmV0dXJuIGJ9XG5mdW5jdGlvbiBOZyhhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmS2cuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9XG5mdW5jdGlvbiBPZyhhLGIsYyxkKXt2YXIgZT1hLnN0YXRlTm9kZTtlLnByb3BzPWM7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZS5yZWZzPUZnO3hnKGEpO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9lLmNvbnRleHQ9dmcoZik6KGY9RmYoYik/RGY6TS5jdXJyZW50LGUuY29udGV4dD1FZihhLGYpKTtDZyhhLGMsZSxkKTtlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtmPWIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYoR2coYSxiLGYsYyksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudHx8XG4oYj1lLnN0YXRlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudCYmZS5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSxiIT09ZS5zdGF0ZSYmS2cuZW5xdWV1ZVJlcGxhY2VTdGF0ZShlLGUuc3RhdGUsbnVsbCksQ2coYSxjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudERpZE1vdW50JiYoYS5mbGFnc3w9NCl9dmFyIFBnPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBRZyhhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7aWYoYyl7aWYoMSE9PWMudGFnKXRocm93IEVycm9yKHkoMzA5KSk7dmFyIGQ9Yy5zdGF0ZU5vZGV9aWYoIWQpdGhyb3cgRXJyb3IoeSgxNDcsYSkpO3ZhciBlPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1lKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWQucmVmcztiPT09RmcmJihiPWQucmVmcz17fSk7bnVsbD09PWE/ZGVsZXRlIGJbZV06YltlXT1hfTtiLl9zdHJpbmdSZWY9ZTtyZXR1cm4gYn1pZihcInN0cmluZ1wiIT09dHlwZW9mIGEpdGhyb3cgRXJyb3IoeSgyODQpKTtpZighYy5fb3duZXIpdGhyb3cgRXJyb3IoeSgyOTAsYSkpO31yZXR1cm4gYX1cbmZ1bmN0aW9uIFJnKGEsYil7aWYoXCJ0ZXh0YXJlYVwiIT09YS50eXBlKXRocm93IEVycm9yKHkoMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjpiKSk7fVxuZnVuY3Rpb24gU2coYSl7ZnVuY3Rpb24gYihiLGMpe2lmKGEpe3ZhciBkPWIubGFzdEVmZmVjdDtudWxsIT09ZD8oZC5uZXh0RWZmZWN0PWMsYi5sYXN0RWZmZWN0PWMpOmIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWM7Yy5uZXh0RWZmZWN0PW51bGw7Yy5mbGFncz04fX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYil7YT1UZyhhLGIpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5mbGFncz0yLFxuYyk6ZDtiLmZsYWdzPTI7cmV0dXJuIGN9ZnVuY3Rpb24gZyhiKXthJiZudWxsPT09Yi5hbHRlcm5hdGUmJihiLmZsYWdzPTIpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj1VZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe2lmKG51bGwhPT1iJiZiLmVsZW1lbnRUeXBlPT09Yy50eXBlKXJldHVybiBkPWUoYixjLnByb3BzKSxkLnJlZj1RZyhhLGIsYyksZC5yZXR1cm49YSxkO2Q9VmcoYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9UWcoYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PWMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9XG5XZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10pO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbihhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9WGcoYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBBKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj1VZyhcIlwiK2IsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSBzYTpyZXR1cm4gYz1WZyhiLnR5cGUsYi5rZXksYi5wcm9wcyxudWxsLGEubW9kZSxjKSxjLnJlZj1RZyhhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2UgdGE6cmV0dXJuIGI9V2coYixhLm1vZGUsYyksYi5yZXR1cm49YSxifWlmKFBnKGIpfHxMYShiKSlyZXR1cm4gYj1YZyhiLFxuYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49YSxiO1JnKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24gcChhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgY3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmgoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSBzYTpyZXR1cm4gYy5rZXk9PT1lP2MudHlwZT09PXVhP24oYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxlKTprKGEsYixjLGQpOm51bGw7Y2FzZSB0YTpyZXR1cm4gYy5rZXk9PT1lP2woYSxiLGMsZCk6bnVsbH1pZihQZyhjKXx8TGEoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bihhLGIsYyxkLG51bGwpO1JnKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQyhhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPWEuZ2V0KGMpfHxcbm51bGwsaChiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIHNhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxkLnR5cGU9PT11YT9uKGIsYSxkLnByb3BzLmNoaWxkcmVuLGUsZC5rZXkpOmsoYixhLGQsZSk7Y2FzZSB0YTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsbChiLGEsZCxlKX1pZihQZyhkKXx8TGEoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbihiLGEsZCxlLG51bGwpO1JnKGIsZCl9cmV0dXJuIG51bGx9ZnVuY3Rpb24geChlLGcsaCxrKXtmb3IodmFyIGw9bnVsbCx0PW51bGwsdT1nLHo9Zz0wLHE9bnVsbDtudWxsIT09dSYmejxoLmxlbmd0aDt6Kyspe3UuaW5kZXg+ej8ocT11LHU9bnVsbCk6cT11LnNpYmxpbmc7dmFyIG49cChlLHUsaFt6XSxrKTtpZihudWxsPT09bil7bnVsbD09PXUmJih1PXEpO2JyZWFrfWEmJnUmJm51bGw9PT1cbm4uYWx0ZXJuYXRlJiZiKGUsdSk7Zz1mKG4sZyx6KTtudWxsPT09dD9sPW46dC5zaWJsaW5nPW47dD1uO3U9cX1pZih6PT09aC5sZW5ndGgpcmV0dXJuIGMoZSx1KSxsO2lmKG51bGw9PT11KXtmb3IoO3o8aC5sZW5ndGg7eisrKXU9QShlLGhbel0sayksbnVsbCE9PXUmJihnPWYodSxnLHopLG51bGw9PT10P2w9dTp0LnNpYmxpbmc9dSx0PXUpO3JldHVybiBsfWZvcih1PWQoZSx1KTt6PGgubGVuZ3RoO3orKylxPUModSxlLHosaFt6XSxrKSxudWxsIT09cSYmKGEmJm51bGwhPT1xLmFsdGVybmF0ZSYmdS5kZWxldGUobnVsbD09PXEua2V5P3o6cS5rZXkpLGc9ZihxLGcseiksbnVsbD09PXQ/bD1xOnQuc2libGluZz1xLHQ9cSk7YSYmdS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1mdW5jdGlvbiB3KGUsZyxoLGspe3ZhciBsPUxhKGgpO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBsKXRocm93IEVycm9yKHkoMTUwKSk7aD1sLmNhbGwoaCk7aWYobnVsbD09XG5oKXRocm93IEVycm9yKHkoMTUxKSk7Zm9yKHZhciB0PWw9bnVsbCx1PWcsej1nPTAscT1udWxsLG49aC5uZXh0KCk7bnVsbCE9PXUmJiFuLmRvbmU7eisrLG49aC5uZXh0KCkpe3UuaW5kZXg+ej8ocT11LHU9bnVsbCk6cT11LnNpYmxpbmc7dmFyIHc9cChlLHUsbi52YWx1ZSxrKTtpZihudWxsPT09dyl7bnVsbD09PXUmJih1PXEpO2JyZWFrfWEmJnUmJm51bGw9PT13LmFsdGVybmF0ZSYmYihlLHUpO2c9Zih3LGcseik7bnVsbD09PXQ/bD13OnQuc2libGluZz13O3Q9dzt1PXF9aWYobi5kb25lKXJldHVybiBjKGUsdSksbDtpZihudWxsPT09dSl7Zm9yKDshbi5kb25lO3orKyxuPWgubmV4dCgpKW49QShlLG4udmFsdWUsayksbnVsbCE9PW4mJihnPWYobixnLHopLG51bGw9PT10P2w9bjp0LnNpYmxpbmc9bix0PW4pO3JldHVybiBsfWZvcih1PWQoZSx1KTshbi5kb25lO3orKyxuPWgubmV4dCgpKW49Qyh1LGUseixuLnZhbHVlLGspLG51bGwhPT1uJiYoYSYmbnVsbCE9PW4uYWx0ZXJuYXRlJiZcbnUuZGVsZXRlKG51bGw9PT1uLmtleT96Om4ua2V5KSxnPWYobixnLHopLG51bGw9PT10P2w9bjp0LnNpYmxpbmc9bix0PW4pO2EmJnUuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9cmV0dXJuIGZ1bmN0aW9uKGEsZCxmLGgpe3ZhciBrPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PXVhJiZudWxsPT09Zi5rZXk7ayYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7dmFyIGw9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZjtpZihsKXN3aXRjaChmLiQkdHlwZW9mKXtjYXNlIHNhOmE6e2w9Zi5rZXk7Zm9yKGs9ZDtudWxsIT09azspe2lmKGsua2V5PT09bCl7c3dpdGNoKGsudGFnKXtjYXNlIDc6aWYoZi50eXBlPT09dWEpe2MoYSxrLnNpYmxpbmcpO2Q9ZShrLGYucHJvcHMuY2hpbGRyZW4pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9YnJlYWs7ZGVmYXVsdDppZihrLmVsZW1lbnRUeXBlPT09Zi50eXBlKXtjKGEsay5zaWJsaW5nKTtcbmQ9ZShrLGYucHJvcHMpO2QucmVmPVFnKGEsayxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfX1jKGEsayk7YnJlYWt9ZWxzZSBiKGEsayk7az1rLnNpYmxpbmd9Zi50eXBlPT09dWE/KGQ9WGcoZi5wcm9wcy5jaGlsZHJlbixhLm1vZGUsaCxmLmtleSksZC5yZXR1cm49YSxhPWQpOihoPVZnKGYudHlwZSxmLmtleSxmLnByb3BzLG51bGwsYS5tb2RlLGgpLGgucmVmPVFnKGEsZCxmKSxoLnJldHVybj1hLGE9aCl9cmV0dXJuIGcoYSk7Y2FzZSB0YTphOntmb3Ioaz1mLmtleTtudWxsIT09ZDspe2lmKGQua2V5PT09aylpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1kLnNpYmxpbmd9ZD1cbldnKGYsYS5tb2RlLGgpO2QucmV0dXJuPWE7YT1kfXJldHVybiBnKGEpfWlmKFwic3RyaW5nXCI9PT10eXBlb2YgZnx8XCJudW1iZXJcIj09PXR5cGVvZiBmKXJldHVybiBmPVwiXCIrZixudWxsIT09ZCYmNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmKSxkLnJldHVybj1hLGE9ZCk6KGMoYSxkKSxkPVVnKGYsYS5tb2RlLGgpLGQucmV0dXJuPWEsYT1kKSxnKGEpO2lmKFBnKGYpKXJldHVybiB4KGEsZCxmLGgpO2lmKExhKGYpKXJldHVybiB3KGEsZCxmLGgpO2wmJlJnKGEsZik7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBmJiYhaylzd2l0Y2goYS50YWcpe2Nhc2UgMTpjYXNlIDIyOmNhc2UgMDpjYXNlIDExOmNhc2UgMTU6dGhyb3cgRXJyb3IoeSgxNTIsUmEoYS50eXBlKXx8XCJDb21wb25lbnRcIikpO31yZXR1cm4gYyhhLGQpfX12YXIgWWc9U2coITApLFpnPVNnKCExKSwkZz17fSxhaD1CZigkZyksYmg9QmYoJGcpLGNoPUJmKCRnKTtcbmZ1bmN0aW9uIGRoKGEpe2lmKGE9PT0kZyl0aHJvdyBFcnJvcih5KDE3NCkpO3JldHVybiBhfWZ1bmN0aW9uIGVoKGEsYil7SShjaCxiKTtJKGJoLGEpO0koYWgsJGcpO2E9Yi5ub2RlVHlwZTtzd2l0Y2goYSl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6bWIobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmE9OD09PWE/Yi5wYXJlbnROb2RlOmIsYj1hLm5hbWVzcGFjZVVSSXx8bnVsbCxhPWEudGFnTmFtZSxiPW1iKGIsYSl9SChhaCk7SShhaCxiKX1mdW5jdGlvbiBmaCgpe0goYWgpO0goYmgpO0goY2gpfWZ1bmN0aW9uIGdoKGEpe2RoKGNoLmN1cnJlbnQpO3ZhciBiPWRoKGFoLmN1cnJlbnQpO3ZhciBjPW1iKGIsYS50eXBlKTtiIT09YyYmKEkoYmgsYSksSShhaCxjKSl9ZnVuY3Rpb24gaGgoYSl7YmguY3VycmVudD09PWEmJihIKGFoKSxIKGJoKSl9dmFyIFA9QmYoMCk7XG5mdW5jdGlvbiBpaChhKXtmb3IodmFyIGI9YTtudWxsIT09Yjspe2lmKDEzPT09Yi50YWcpe3ZhciBjPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGw9PT1jfHxcIiQ/XCI9PT1jLmRhdGF8fFwiJCFcIj09PWMuZGF0YSkpcmV0dXJuIGJ9ZWxzZSBpZigxOT09PWIudGFnJiZ2b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMucmV2ZWFsT3JkZXIpe2lmKDAhPT0oYi5mbGFncyY2NCkpcmV0dXJuIGJ9ZWxzZSBpZihudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfXJldHVybiBudWxsfXZhciBqaD1udWxsLGtoPW51bGwsbGg9ITE7XG5mdW5jdGlvbiBtaChhLGIpe3ZhciBjPW5oKDUsbnVsbCxudWxsLDApO2MuZWxlbWVudFR5cGU9XCJERUxFVEVEXCI7Yy50eXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Yy5yZXR1cm49YTtjLmZsYWdzPTg7bnVsbCE9PWEubGFzdEVmZmVjdD8oYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxhLmxhc3RFZmZlY3Q9Yyk6YS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9Y31mdW5jdGlvbiBvaChhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPVwiXCI9PT1hLnBlbmRpbmdQcm9wc3x8MyE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDEzOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gcGgoYSl7aWYobGgpe3ZhciBiPWtoO2lmKGIpe3ZhciBjPWI7aWYoIW9oKGEsYikpe2I9cmYoYy5uZXh0U2libGluZyk7aWYoIWJ8fCFvaChhLGIpKXthLmZsYWdzPWEuZmxhZ3MmLTEwMjV8MjtsaD0hMTtqaD1hO3JldHVybn1taChqaCxjKX1qaD1hO2toPXJmKGIuZmlyc3RDaGlsZCl9ZWxzZSBhLmZsYWdzPWEuZmxhZ3MmLTEwMjV8MixsaD0hMSxqaD1hfX1mdW5jdGlvbiBxaChhKXtmb3IoYT1hLnJldHVybjtudWxsIT09YSYmNSE9PWEudGFnJiYzIT09YS50YWcmJjEzIT09YS50YWc7KWE9YS5yZXR1cm47amg9YX1cbmZ1bmN0aW9uIHJoKGEpe2lmKGEhPT1qaClyZXR1cm4hMTtpZighbGgpcmV0dXJuIHFoKGEpLGxoPSEwLCExO3ZhciBiPWEudHlwZTtpZig1IT09YS50YWd8fFwiaGVhZFwiIT09YiYmXCJib2R5XCIhPT1iJiYhbmYoYixhLm1lbW9pemVkUHJvcHMpKWZvcihiPWtoO2I7KW1oKGEsYiksYj1yZihiLm5leHRTaWJsaW5nKTtxaChhKTtpZigxMz09PWEudGFnKXthPWEubWVtb2l6ZWRTdGF0ZTthPW51bGwhPT1hP2EuZGVoeWRyYXRlZDpudWxsO2lmKCFhKXRocm93IEVycm9yKHkoMzE3KSk7YTp7YT1hLm5leHRTaWJsaW5nO2ZvcihiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIvJFwiPT09Yyl7aWYoMD09PWIpe2toPXJmKGEubmV4dFNpYmxpbmcpO2JyZWFrIGF9Yi0tfWVsc2VcIiRcIiE9PWMmJlwiJCFcIiE9PWMmJlwiJD9cIiE9PWN8fGIrK31hPWEubmV4dFNpYmxpbmd9a2g9bnVsbH19ZWxzZSBraD1qaD9yZihhLnN0YXRlTm9kZS5uZXh0U2libGluZyk6bnVsbDtyZXR1cm4hMH1cbmZ1bmN0aW9uIHNoKCl7a2g9amg9bnVsbDtsaD0hMX12YXIgdGg9W107ZnVuY3Rpb24gdWgoKXtmb3IodmFyIGE9MDthPHRoLmxlbmd0aDthKyspdGhbYV0uX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk9bnVsbDt0aC5sZW5ndGg9MH12YXIgdmg9cmEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcix3aD1yYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyx4aD0wLFI9bnVsbCxTPW51bGwsVD1udWxsLHloPSExLHpoPSExO2Z1bmN0aW9uIEFoKCl7dGhyb3cgRXJyb3IoeSgzMjEpKTt9ZnVuY3Rpb24gQmgoYSxiKXtpZihudWxsPT09YilyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoJiZjPGEubGVuZ3RoO2MrKylpZighSGUoYVtjXSxiW2NdKSlyZXR1cm4hMTtyZXR1cm4hMH1cbmZ1bmN0aW9uIENoKGEsYixjLGQsZSxmKXt4aD1mO1I9YjtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7Yi5sYW5lcz0wO3ZoLmN1cnJlbnQ9bnVsbD09PWF8fG51bGw9PT1hLm1lbW9pemVkU3RhdGU/RGg6RWg7YT1jKGQsZSk7aWYoemgpe2Y9MDtkb3t6aD0hMTtpZighKDI1PmYpKXRocm93IEVycm9yKHkoMzAxKSk7Zis9MTtUPVM9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7dmguY3VycmVudD1GaDthPWMoZCxlKX13aGlsZSh6aCl9dmguY3VycmVudD1HaDtiPW51bGwhPT1TJiZudWxsIT09Uy5uZXh0O3hoPTA7VD1TPVI9bnVsbDt5aD0hMTtpZihiKXRocm93IEVycm9yKHkoMzAwKSk7cmV0dXJuIGF9ZnVuY3Rpb24gSGgoKXt2YXIgYT17bWVtb2l6ZWRTdGF0ZTpudWxsLGJhc2VTdGF0ZTpudWxsLGJhc2VRdWV1ZTpudWxsLHF1ZXVlOm51bGwsbmV4dDpudWxsfTtudWxsPT09VD9SLm1lbW9pemVkU3RhdGU9VD1hOlQ9VC5uZXh0PWE7cmV0dXJuIFR9XG5mdW5jdGlvbiBJaCgpe2lmKG51bGw9PT1TKXt2YXIgYT1SLmFsdGVybmF0ZTthPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsfWVsc2UgYT1TLm5leHQ7dmFyIGI9bnVsbD09PVQ/Ui5tZW1vaXplZFN0YXRlOlQubmV4dDtpZihudWxsIT09YilUPWIsUz1hO2Vsc2V7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IoeSgzMTApKTtTPWE7YT17bWVtb2l6ZWRTdGF0ZTpTLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOlMuYmFzZVN0YXRlLGJhc2VRdWV1ZTpTLmJhc2VRdWV1ZSxxdWV1ZTpTLnF1ZXVlLG5leHQ6bnVsbH07bnVsbD09PVQ/Ui5tZW1vaXplZFN0YXRlPVQ9YTpUPVQubmV4dD1hfXJldHVybiBUfWZ1bmN0aW9uIEpoKGEsYil7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpifVxuZnVuY3Rpb24gS2goYSl7dmFyIGI9SWgoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IoeSgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1TLGU9ZC5iYXNlUXVldWUsZj1jLnBlbmRpbmc7aWYobnVsbCE9PWYpe2lmKG51bGwhPT1lKXt2YXIgZz1lLm5leHQ7ZS5uZXh0PWYubmV4dDtmLm5leHQ9Z31kLmJhc2VRdWV1ZT1lPWY7Yy5wZW5kaW5nPW51bGx9aWYobnVsbCE9PWUpe2U9ZS5uZXh0O2Q9ZC5iYXNlU3RhdGU7dmFyIGg9Zz1mPW51bGwsaz1lO2Rve3ZhciBsPWsubGFuZTtpZigoeGgmbCk9PT1sKW51bGwhPT1oJiYoaD1oLm5leHQ9e2xhbmU6MCxhY3Rpb246ay5hY3Rpb24sZWFnZXJSZWR1Y2VyOmsuZWFnZXJSZWR1Y2VyLGVhZ2VyU3RhdGU6ay5lYWdlclN0YXRlLG5leHQ6bnVsbH0pLGQ9ay5lYWdlclJlZHVjZXI9PT1hP2suZWFnZXJTdGF0ZTphKGQsay5hY3Rpb24pO2Vsc2V7dmFyIG49e2xhbmU6bCxhY3Rpb246ay5hY3Rpb24sZWFnZXJSZWR1Y2VyOmsuZWFnZXJSZWR1Y2VyLFxuZWFnZXJTdGF0ZTprLmVhZ2VyU3RhdGUsbmV4dDpudWxsfTtudWxsPT09aD8oZz1oPW4sZj1kKTpoPWgubmV4dD1uO1IubGFuZXN8PWw7RGd8PWx9az1rLm5leHR9d2hpbGUobnVsbCE9PWsmJmshPT1lKTtudWxsPT09aD9mPWQ6aC5uZXh0PWc7SGUoZCxiLm1lbW9pemVkU3RhdGUpfHwodWc9ITApO2IubWVtb2l6ZWRTdGF0ZT1kO2IuYmFzZVN0YXRlPWY7Yi5iYXNlUXVldWU9aDtjLmxhc3RSZW5kZXJlZFN0YXRlPWR9cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxjLmRpc3BhdGNoXX1cbmZ1bmN0aW9uIExoKGEpe3ZhciBiPUloKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHkoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9Yy5kaXNwYXRjaCxlPWMucGVuZGluZyxmPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZSl7Yy5wZW5kaW5nPW51bGw7dmFyIGc9ZT1lLm5leHQ7ZG8gZj1hKGYsZy5hY3Rpb24pLGc9Zy5uZXh0O3doaWxlKGchPT1lKTtIZShmLGIubWVtb2l6ZWRTdGF0ZSl8fCh1Zz0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7bnVsbD09PWIuYmFzZVF1ZXVlJiYoYi5iYXNlU3RhdGU9Zik7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1mfXJldHVybltmLGRdfVxuZnVuY3Rpb24gTWgoYSxiLGMpe3ZhciBkPWIuX2dldFZlcnNpb247ZD1kKGIuX3NvdXJjZSk7dmFyIGU9Yi5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeTtpZihudWxsIT09ZSlhPWU9PT1kO2Vsc2UgaWYoYT1hLm11dGFibGVSZWFkTGFuZXMsYT0oeGgmYSk9PT1hKWIuX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk9ZCx0aC5wdXNoKGIpO2lmKGEpcmV0dXJuIGMoYi5fc291cmNlKTt0aC5wdXNoKGIpO3Rocm93IEVycm9yKHkoMzUwKSk7fVxuZnVuY3Rpb24gTmgoYSxiLGMsZCl7dmFyIGU9VTtpZihudWxsPT09ZSl0aHJvdyBFcnJvcih5KDM0OSkpO3ZhciBmPWIuX2dldFZlcnNpb24sZz1mKGIuX3NvdXJjZSksaD12aC5jdXJyZW50LGs9aC51c2VTdGF0ZShmdW5jdGlvbigpe3JldHVybiBNaChlLGIsYyl9KSxsPWtbMV0sbj1rWzBdO2s9VDt2YXIgQT1hLm1lbW9pemVkU3RhdGUscD1BLnJlZnMsQz1wLmdldFNuYXBzaG90LHg9QS5zb3VyY2U7QT1BLnN1YnNjcmliZTt2YXIgdz1SO2EubWVtb2l6ZWRTdGF0ZT17cmVmczpwLHNvdXJjZTpiLHN1YnNjcmliZTpkfTtoLnVzZUVmZmVjdChmdW5jdGlvbigpe3AuZ2V0U25hcHNob3Q9YztwLnNldFNuYXBzaG90PWw7dmFyIGE9ZihiLl9zb3VyY2UpO2lmKCFIZShnLGEpKXthPWMoYi5fc291cmNlKTtIZShuLGEpfHwobChhKSxhPUlnKHcpLGUubXV0YWJsZVJlYWRMYW5lc3w9YSZlLnBlbmRpbmdMYW5lcyk7YT1lLm11dGFibGVSZWFkTGFuZXM7ZS5lbnRhbmdsZWRMYW5lc3w9YTtmb3IodmFyIGQ9XG5lLmVudGFuZ2xlbWVudHMsaD1hOzA8aDspe3ZhciBrPTMxLVZjKGgpLHY9MTw8aztkW2tdfD1hO2gmPX52fX19LFtjLGIsZF0pO2gudXNlRWZmZWN0KGZ1bmN0aW9uKCl7cmV0dXJuIGQoYi5fc291cmNlLGZ1bmN0aW9uKCl7dmFyIGE9cC5nZXRTbmFwc2hvdCxjPXAuc2V0U25hcHNob3Q7dHJ5e2MoYShiLl9zb3VyY2UpKTt2YXIgZD1JZyh3KTtlLm11dGFibGVSZWFkTGFuZXN8PWQmZS5wZW5kaW5nTGFuZXN9Y2F0Y2gocSl7YyhmdW5jdGlvbigpe3Rocm93IHE7fSl9fSl9LFtiLGRdKTtIZShDLGMpJiZIZSh4LGIpJiZIZShBLGQpfHwoYT17cGVuZGluZzpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjpKaCxsYXN0UmVuZGVyZWRTdGF0ZTpufSxhLmRpc3BhdGNoPWw9T2guYmluZChudWxsLFIsYSksay5xdWV1ZT1hLGsuYmFzZVF1ZXVlPW51bGwsbj1NaChlLGIsYyksay5tZW1vaXplZFN0YXRlPWsuYmFzZVN0YXRlPW4pO3JldHVybiBufVxuZnVuY3Rpb24gUGgoYSxiLGMpe3ZhciBkPUloKCk7cmV0dXJuIE5oKGQsYSxiLGMpfWZ1bmN0aW9uIFFoKGEpe3ZhciBiPUhoKCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGEmJihhPWEoKSk7Yi5tZW1vaXplZFN0YXRlPWIuYmFzZVN0YXRlPWE7YT1iLnF1ZXVlPXtwZW5kaW5nOm51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOkpoLGxhc3RSZW5kZXJlZFN0YXRlOmF9O2E9YS5kaXNwYXRjaD1PaC5iaW5kKG51bGwsUixhKTtyZXR1cm5bYi5tZW1vaXplZFN0YXRlLGFdfVxuZnVuY3Rpb24gUmgoYSxiLGMsZCl7YT17dGFnOmEsY3JlYXRlOmIsZGVzdHJveTpjLGRlcHM6ZCxuZXh0Om51bGx9O2I9Ui51cGRhdGVRdWV1ZTtudWxsPT09Yj8oYj17bGFzdEVmZmVjdDpudWxsfSxSLnVwZGF0ZVF1ZXVlPWIsYi5sYXN0RWZmZWN0PWEubmV4dD1hKTooYz1iLmxhc3RFZmZlY3QsbnVsbD09PWM/Yi5sYXN0RWZmZWN0PWEubmV4dD1hOihkPWMubmV4dCxjLm5leHQ9YSxhLm5leHQ9ZCxiLmxhc3RFZmZlY3Q9YSkpO3JldHVybiBhfWZ1bmN0aW9uIFNoKGEpe3ZhciBiPUhoKCk7YT17Y3VycmVudDphfTtyZXR1cm4gYi5tZW1vaXplZFN0YXRlPWF9ZnVuY3Rpb24gVGgoKXtyZXR1cm4gSWgoKS5tZW1vaXplZFN0YXRlfWZ1bmN0aW9uIFVoKGEsYixjLGQpe3ZhciBlPUhoKCk7Ui5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9UmgoMXxiLGMsdm9pZCAwLHZvaWQgMD09PWQ/bnVsbDpkKX1cbmZ1bmN0aW9uIFZoKGEsYixjLGQpe3ZhciBlPUloKCk7ZD12b2lkIDA9PT1kP251bGw6ZDt2YXIgZj12b2lkIDA7aWYobnVsbCE9PVMpe3ZhciBnPVMubWVtb2l6ZWRTdGF0ZTtmPWcuZGVzdHJveTtpZihudWxsIT09ZCYmQmgoZCxnLmRlcHMpKXtSaChiLGMsZixkKTtyZXR1cm59fVIuZmxhZ3N8PWE7ZS5tZW1vaXplZFN0YXRlPVJoKDF8YixjLGYsZCl9ZnVuY3Rpb24gV2goYSxiKXtyZXR1cm4gVWgoNTE2LDQsYSxiKX1mdW5jdGlvbiBYaChhLGIpe3JldHVybiBWaCg1MTYsNCxhLGIpfWZ1bmN0aW9uIFloKGEsYil7cmV0dXJuIFZoKDQsMixhLGIpfWZ1bmN0aW9uIFpoKGEsYil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGE9YSgpLGIoYSksZnVuY3Rpb24oKXtiKG51bGwpfTtpZihudWxsIT09YiYmdm9pZCAwIT09YilyZXR1cm4gYT1hKCksYi5jdXJyZW50PWEsZnVuY3Rpb24oKXtiLmN1cnJlbnQ9bnVsbH19XG5mdW5jdGlvbiAkaChhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIFZoKDQsMixaaC5iaW5kKG51bGwsYixhKSxjKX1mdW5jdGlvbiBhaSgpe31mdW5jdGlvbiBiaShhLGIpe3ZhciBjPUloKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZCaChiLGRbMV0pKXJldHVybiBkWzBdO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1mdW5jdGlvbiBjaShhLGIpe3ZhciBjPUloKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZCaChiLGRbMV0pKXJldHVybiBkWzBdO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1cbmZ1bmN0aW9uIGRpKGEsYil7dmFyIGM9ZWcoKTtnZyg5OD5jPzk4OmMsZnVuY3Rpb24oKXthKCEwKX0pO2dnKDk3PGM/OTc6YyxmdW5jdGlvbigpe3ZhciBjPXdoLnRyYW5zaXRpb247d2gudHJhbnNpdGlvbj0xO3RyeXthKCExKSxiKCl9ZmluYWxseXt3aC50cmFuc2l0aW9uPWN9fSl9XG5mdW5jdGlvbiBPaChhLGIsYyl7dmFyIGQ9SGcoKSxlPUlnKGEpLGY9e2xhbmU6ZSxhY3Rpb246YyxlYWdlclJlZHVjZXI6bnVsbCxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfSxnPWIucGVuZGluZztudWxsPT09Zz9mLm5leHQ9ZjooZi5uZXh0PWcubmV4dCxnLm5leHQ9Zik7Yi5wZW5kaW5nPWY7Zz1hLmFsdGVybmF0ZTtpZihhPT09Unx8bnVsbCE9PWcmJmc9PT1SKXpoPXloPSEwO2Vsc2V7aWYoMD09PWEubGFuZXMmJihudWxsPT09Z3x8MD09PWcubGFuZXMpJiYoZz1iLmxhc3RSZW5kZXJlZFJlZHVjZXIsbnVsbCE9PWcpKXRyeXt2YXIgaD1iLmxhc3RSZW5kZXJlZFN0YXRlLGs9ZyhoLGMpO2YuZWFnZXJSZWR1Y2VyPWc7Zi5lYWdlclN0YXRlPWs7aWYoSGUoayxoKSlyZXR1cm59Y2F0Y2gobCl7fWZpbmFsbHl7fUpnKGEsZSxkKX19XG52YXIgR2g9e3JlYWRDb250ZXh0OnZnLHVzZUNhbGxiYWNrOkFoLHVzZUNvbnRleHQ6QWgsdXNlRWZmZWN0OkFoLHVzZUltcGVyYXRpdmVIYW5kbGU6QWgsdXNlTGF5b3V0RWZmZWN0OkFoLHVzZU1lbW86QWgsdXNlUmVkdWNlcjpBaCx1c2VSZWY6QWgsdXNlU3RhdGU6QWgsdXNlRGVidWdWYWx1ZTpBaCx1c2VEZWZlcnJlZFZhbHVlOkFoLHVzZVRyYW5zaXRpb246QWgsdXNlTXV0YWJsZVNvdXJjZTpBaCx1c2VPcGFxdWVJZGVudGlmaWVyOkFoLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sRGg9e3JlYWRDb250ZXh0OnZnLHVzZUNhbGxiYWNrOmZ1bmN0aW9uKGEsYil7SGgoKS5tZW1vaXplZFN0YXRlPVthLHZvaWQgMD09PWI/bnVsbDpiXTtyZXR1cm4gYX0sdXNlQ29udGV4dDp2Zyx1c2VFZmZlY3Q6V2gsdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIFVoKDQsMixaaC5iaW5kKG51bGwsXG5iLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVWgoNCwyLGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz1IaCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfSx1c2VSZWR1Y2VyOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1IaCgpO2I9dm9pZCAwIT09Yz9jKGIpOmI7ZC5tZW1vaXplZFN0YXRlPWQuYmFzZVN0YXRlPWI7YT1kLnF1ZXVlPXtwZW5kaW5nOm51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOmEsbGFzdFJlbmRlcmVkU3RhdGU6Yn07YT1hLmRpc3BhdGNoPU9oLmJpbmQobnVsbCxSLGEpO3JldHVybltkLm1lbW9pemVkU3RhdGUsYV19LHVzZVJlZjpTaCx1c2VTdGF0ZTpRaCx1c2VEZWJ1Z1ZhbHVlOmFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9UWgoYSksYz1iWzBdLGQ9YlsxXTtXaChmdW5jdGlvbigpe3ZhciBiPXdoLnRyYW5zaXRpb247XG53aC50cmFuc2l0aW9uPTE7dHJ5e2QoYSl9ZmluYWxseXt3aC50cmFuc2l0aW9uPWJ9fSxbYV0pO3JldHVybiBjfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9UWgoITEpLGI9YVswXTthPWRpLmJpbmQobnVsbCxhWzFdKTtTaChhKTtyZXR1cm5bYSxiXX0sdXNlTXV0YWJsZVNvdXJjZTpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9SGgoKTtkLm1lbW9pemVkU3RhdGU9e3JlZnM6e2dldFNuYXBzaG90OmIsc2V0U25hcHNob3Q6bnVsbH0sc291cmNlOmEsc3Vic2NyaWJlOmN9O3JldHVybiBOaChkLGEsYixjKX0sdXNlT3BhcXVlSWRlbnRpZmllcjpmdW5jdGlvbigpe2lmKGxoKXt2YXIgYT0hMSxiPXVmKGZ1bmN0aW9uKCl7YXx8KGE9ITAsYyhcInI6XCIrKHRmKyspLnRvU3RyaW5nKDM2KSkpO3Rocm93IEVycm9yKHkoMzU1KSk7fSksYz1RaChiKVsxXTswPT09KFIubW9kZSYyKSYmKFIuZmxhZ3N8PTUxNixSaCg1LGZ1bmN0aW9uKCl7YyhcInI6XCIrKHRmKyspLnRvU3RyaW5nKDM2KSl9LFxudm9pZCAwLG51bGwpKTtyZXR1cm4gYn1iPVwicjpcIisodGYrKykudG9TdHJpbmcoMzYpO1FoKGIpO3JldHVybiBifSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LEVoPXtyZWFkQ29udGV4dDp2Zyx1c2VDYWxsYmFjazpiaSx1c2VDb250ZXh0OnZnLHVzZUVmZmVjdDpYaCx1c2VJbXBlcmF0aXZlSGFuZGxlOiRoLHVzZUxheW91dEVmZmVjdDpZaCx1c2VNZW1vOmNpLHVzZVJlZHVjZXI6S2gsdXNlUmVmOlRoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIEtoKEpoKX0sdXNlRGVidWdWYWx1ZTphaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPUtoKEpoKSxjPWJbMF0sZD1iWzFdO1hoKGZ1bmN0aW9uKCl7dmFyIGI9d2gudHJhbnNpdGlvbjt3aC50cmFuc2l0aW9uPTE7dHJ5e2QoYSl9ZmluYWxseXt3aC50cmFuc2l0aW9uPWJ9fSxbYV0pO3JldHVybiBjfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9S2goSmgpWzBdO3JldHVybltUaCgpLmN1cnJlbnQsXG5hXX0sdXNlTXV0YWJsZVNvdXJjZTpQaCx1c2VPcGFxdWVJZGVudGlmaWVyOmZ1bmN0aW9uKCl7cmV0dXJuIEtoKEpoKVswXX0sdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxGaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6YmksdXNlQ29udGV4dDp2Zyx1c2VFZmZlY3Q6WGgsdXNlSW1wZXJhdGl2ZUhhbmRsZTokaCx1c2VMYXlvdXRFZmZlY3Q6WWgsdXNlTWVtbzpjaSx1c2VSZWR1Y2VyOkxoLHVzZVJlZjpUaCx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiBMaChKaCl9LHVzZURlYnVnVmFsdWU6YWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1MaChKaCksYz1iWzBdLGQ9YlsxXTtYaChmdW5jdGlvbigpe3ZhciBiPXdoLnRyYW5zaXRpb247d2gudHJhbnNpdGlvbj0xO3RyeXtkKGEpfWZpbmFsbHl7d2gudHJhbnNpdGlvbj1ifX0sW2FdKTtyZXR1cm4gY30sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPUxoKEpoKVswXTtyZXR1cm5bVGgoKS5jdXJyZW50LFxuYV19LHVzZU11dGFibGVTb3VyY2U6UGgsdXNlT3BhcXVlSWRlbnRpZmllcjpmdW5jdGlvbigpe3JldHVybiBMaChKaClbMF19LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sZWk9cmEuUmVhY3RDdXJyZW50T3duZXIsdWc9ITE7ZnVuY3Rpb24gZmkoYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT9aZyhiLG51bGwsYyxkKTpZZyhiLGEuY2hpbGQsYyxkKX1mdW5jdGlvbiBnaShhLGIsYyxkLGUpe2M9Yy5yZW5kZXI7dmFyIGY9Yi5yZWY7dGcoYixlKTtkPUNoKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXVnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTUxNyxhLmxhbmVzJj1+ZSxoaShhLGIsZSk7Yi5mbGFnc3w9MTtmaShhLGIsZCxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGlpKGEsYixjLGQsZSxmKXtpZihudWxsPT09YSl7dmFyIGc9Yy50eXBlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiYhamkoZykmJnZvaWQgMD09PWcuZGVmYXVsdFByb3BzJiZudWxsPT09Yy5jb21wYXJlJiZ2b2lkIDA9PT1jLmRlZmF1bHRQcm9wcylyZXR1cm4gYi50YWc9MTUsYi50eXBlPWcsa2koYSxiLGcsZCxlLGYpO2E9VmcoYy50eXBlLG51bGwsZCxiLGIubW9kZSxmKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9Zz1hLmNoaWxkO2lmKDA9PT0oZSZmKSYmKGU9Zy5tZW1vaXplZFByb3BzLGM9Yy5jb21wYXJlLGM9bnVsbCE9PWM/YzpKZSxjKGUsZCkmJmEucmVmPT09Yi5yZWYpKXJldHVybiBoaShhLGIsZik7Yi5mbGFnc3w9MTthPVRnKGcsZCk7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfVxuZnVuY3Rpb24ga2koYSxiLGMsZCxlLGYpe2lmKG51bGwhPT1hJiZKZShhLm1lbW9pemVkUHJvcHMsZCkmJmEucmVmPT09Yi5yZWYpaWYodWc9ITEsMCE9PShmJmUpKTAhPT0oYS5mbGFncyYxNjM4NCkmJih1Zz0hMCk7ZWxzZSByZXR1cm4gYi5sYW5lcz1hLmxhbmVzLGhpKGEsYixmKTtyZXR1cm4gbGkoYSxiLGMsZCxmKX1cbmZ1bmN0aW9uIG1pKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQuY2hpbGRyZW4sZj1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbDtpZihcImhpZGRlblwiPT09ZC5tb2RlfHxcInVuc3RhYmxlLWRlZmVyLXdpdGhvdXQtaGlkaW5nXCI9PT1kLm1vZGUpaWYoMD09PShiLm1vZGUmNCkpYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6MH0sbmkoYixjKTtlbHNlIGlmKDAhPT0oYyYxMDczNzQxODI0KSliLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowfSxuaShiLG51bGwhPT1mP2YuYmFzZUxhbmVzOmMpO2Vsc2UgcmV0dXJuIGE9bnVsbCE9PWY/Zi5iYXNlTGFuZXN8YzpjLGIubGFuZXM9Yi5jaGlsZExhbmVzPTEwNzM3NDE4MjQsYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6YX0sbmkoYixhKSxudWxsO2Vsc2UgbnVsbCE9PWY/KGQ9Zi5iYXNlTGFuZXN8YyxiLm1lbW9pemVkU3RhdGU9bnVsbCk6ZD1jLG5pKGIsZCk7ZmkoYSxiLGUsYyk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBvaShhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmZsYWdzfD0xMjh9ZnVuY3Rpb24gbGkoYSxiLGMsZCxlKXt2YXIgZj1GZihjKT9EZjpNLmN1cnJlbnQ7Zj1FZihiLGYpO3RnKGIsZSk7Yz1DaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiF1ZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZmxhZ3MmPS01MTcsYS5sYW5lcyY9fmUsaGkoYSxiLGUpO2IuZmxhZ3N8PTE7ZmkoYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBwaShhLGIsYyxkLGUpe2lmKEZmKGMpKXt2YXIgZj0hMDtKZihiKX1lbHNlIGY9ITE7dGcoYixlKTtpZihudWxsPT09Yi5zdGF0ZU5vZGUpbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9MiksTWcoYixjLGQpLE9nKGIsYyxkLGUpLGQ9ITA7ZWxzZSBpZihudWxsPT09YSl7dmFyIGc9Yi5zdGF0ZU5vZGUsaD1iLm1lbW9pemVkUHJvcHM7Zy5wcm9wcz1oO3ZhciBrPWcuY29udGV4dCxsPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBsJiZudWxsIT09bD9sPXZnKGwpOihsPUZmKGMpP0RmOk0uY3VycmVudCxsPUVmKGIsbCkpO3ZhciBuPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLEE9XCJmdW5jdGlvblwiPT09dHlwZW9mIG58fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlO0F8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8ayE9PWwpJiZOZyhiLGcsZCxsKTt3Zz0hMTt2YXIgcD1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT1wO0NnKGIsZCxnLGUpO2s9Yi5tZW1vaXplZFN0YXRlO2ghPT1kfHxwIT09a3x8Ti5jdXJyZW50fHx3Zz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG4mJihHZyhiLGMsbixkKSxrPWIubWVtb2l6ZWRTdGF0ZSksKGg9d2d8fExnKGIsYyxoLGQscCxrLGwpKT8oQXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50JiZnLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NCkpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1rKSxnLnByb3BzPWQsZy5zdGF0ZT1rLGcuY29udGV4dD1sLGQ9aCk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NCksZD0hMSl9ZWxzZXtnPWIuc3RhdGVOb2RlO3lnKGEsYik7aD1iLm1lbW9pemVkUHJvcHM7bD1iLnR5cGU9PT1iLmVsZW1lbnRUeXBlP2g6bGcoYi50eXBlLGgpO2cucHJvcHM9bDtBPWIucGVuZGluZ1Byb3BzO3A9Zy5jb250ZXh0O2s9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rP2s9dmcoayk6KGs9RmYoYyk/RGY6TS5jdXJyZW50LGs9RWYoYixrKSk7dmFyIEM9Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7KG49XCJmdW5jdGlvblwiPT09dHlwZW9mIEN8fFxuXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1BfHxwIT09aykmJk5nKGIsZyxkLGspO3dnPSExO3A9Yi5tZW1vaXplZFN0YXRlO2cuc3RhdGU9cDtDZyhiLGQsZyxlKTt2YXIgeD1iLm1lbW9pemVkU3RhdGU7aCE9PUF8fHAhPT14fHxOLmN1cnJlbnR8fHdnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgQyYmKEdnKGIsYyxDLGQpLHg9Yi5tZW1vaXplZFN0YXRlKSwobD13Z3x8TGcoYixjLGwsZCxwLHgsaykpPyhufHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUmJmcuY29tcG9uZW50V2lsbFVwZGF0ZShkLFxueCxrKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLHgsaykpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5mbGFnc3w9MjU2KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9MjU2KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9eCksZy5wcm9wcz1kLGcuc3RhdGU9eCxnLmNvbnRleHQ9ayxkPWwpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fFxuaD09PWEubWVtb2l6ZWRQcm9wcyYmcD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9MjU2KSxkPSExKX1yZXR1cm4gcWkoYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24gcWkoYSxiLGMsZCxlLGYpe29pKGEsYik7dmFyIGc9MCE9PShiLmZsYWdzJjY0KTtpZighZCYmIWcpcmV0dXJuIGUmJktmKGIsYywhMSksaGkoYSxiLGYpO2Q9Yi5zdGF0ZU5vZGU7ZWkuY3VycmVudD1iO3ZhciBoPWcmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcj9udWxsOmQucmVuZGVyKCk7Yi5mbGFnc3w9MTtudWxsIT09YSYmZz8oYi5jaGlsZD1ZZyhiLGEuY2hpbGQsbnVsbCxmKSxiLmNoaWxkPVlnKGIsbnVsbCxoLGYpKTpmaShhLGIsaCxmKTtiLm1lbW9pemVkU3RhdGU9ZC5zdGF0ZTtlJiZLZihiLGMsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIHJpKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/SGYoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmSGYoYSxiLmNvbnRleHQsITEpO2VoKGEsYi5jb250YWluZXJJbmZvKX1cbnZhciBzaT17ZGVoeWRyYXRlZDpudWxsLHJldHJ5TGFuZTowfTtcbmZ1bmN0aW9uIHRpKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPVAuY3VycmVudCxmPSExLGc7KGc9MCE9PShiLmZsYWdzJjY0KSl8fChnPW51bGwhPT1hJiZudWxsPT09YS5tZW1vaXplZFN0YXRlPyExOjAhPT0oZSYyKSk7Zz8oZj0hMCxiLmZsYWdzJj0tNjUpOm51bGwhPT1hJiZudWxsPT09YS5tZW1vaXplZFN0YXRlfHx2b2lkIDA9PT1kLmZhbGxiYWNrfHwhMD09PWQudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fChlfD0xKTtJKFAsZSYxKTtpZihudWxsPT09YSl7dm9pZCAwIT09ZC5mYWxsYmFjayYmcGgoYik7YT1kLmNoaWxkcmVuO2U9ZC5mYWxsYmFjaztpZihmKXJldHVybiBhPXVpKGIsYSxlLGMpLGIuY2hpbGQubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOmN9LGIubWVtb2l6ZWRTdGF0ZT1zaSxhO2lmKFwibnVtYmVyXCI9PT10eXBlb2YgZC51bnN0YWJsZV9leHBlY3RlZExvYWRUaW1lKXJldHVybiBhPXVpKGIsYSxlLGMpLGIuY2hpbGQubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOmN9LFxuYi5tZW1vaXplZFN0YXRlPXNpLGIubGFuZXM9MzM1NTQ0MzIsYTtjPXZpKHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmF9LGIubW9kZSxjLG51bGwpO2MucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9Y31pZihudWxsIT09YS5tZW1vaXplZFN0YXRlKXtpZihmKXJldHVybiBkPXdpKGEsYixkLmNoaWxkcmVuLGQuZmFsbGJhY2ssYyksZj1iLmNoaWxkLGU9YS5jaGlsZC5tZW1vaXplZFN0YXRlLGYubWVtb2l6ZWRTdGF0ZT1udWxsPT09ZT97YmFzZUxhbmVzOmN9OntiYXNlTGFuZXM6ZS5iYXNlTGFuZXN8Y30sZi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YyxiLm1lbW9pemVkU3RhdGU9c2ksZDtjPXhpKGEsYixkLmNoaWxkcmVuLGMpO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBjfWlmKGYpcmV0dXJuIGQ9d2koYSxiLGQuY2hpbGRyZW4sZC5mYWxsYmFjayxjKSxmPWIuY2hpbGQsZT1hLmNoaWxkLm1lbW9pemVkU3RhdGUsZi5tZW1vaXplZFN0YXRlPW51bGw9PT1lP3tiYXNlTGFuZXM6Y306XG57YmFzZUxhbmVzOmUuYmFzZUxhbmVzfGN9LGYuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXMmfmMsYi5tZW1vaXplZFN0YXRlPXNpLGQ7Yz14aShhLGIsZC5jaGlsZHJlbixjKTtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gY31mdW5jdGlvbiB1aShhLGIsYyxkKXt2YXIgZT1hLm1vZGUsZj1hLmNoaWxkO2I9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjpifTswPT09KGUmMikmJm51bGwhPT1mPyhmLmNoaWxkTGFuZXM9MCxmLnBlbmRpbmdQcm9wcz1iKTpmPXZpKGIsZSwwLG51bGwpO2M9WGcoYyxlLGQsbnVsbCk7Zi5yZXR1cm49YTtjLnJldHVybj1hO2Yuc2libGluZz1jO2EuY2hpbGQ9ZjtyZXR1cm4gY31cbmZ1bmN0aW9uIHhpKGEsYixjLGQpe3ZhciBlPWEuY2hpbGQ7YT1lLnNpYmxpbmc7Yz1UZyhlLHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmN9KTswPT09KGIubW9kZSYyKSYmKGMubGFuZXM9ZCk7Yy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbDtudWxsIT09YSYmKGEubmV4dEVmZmVjdD1udWxsLGEuZmxhZ3M9OCxiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1hKTtyZXR1cm4gYi5jaGlsZD1jfVxuZnVuY3Rpb24gd2koYSxiLGMsZCxlKXt2YXIgZj1iLm1vZGUsZz1hLmNoaWxkO2E9Zy5zaWJsaW5nO3ZhciBoPXttb2RlOlwiaGlkZGVuXCIsY2hpbGRyZW46Y307MD09PShmJjIpJiZiLmNoaWxkIT09Zz8oYz1iLmNoaWxkLGMuY2hpbGRMYW5lcz0wLGMucGVuZGluZ1Byb3BzPWgsZz1jLmxhc3RFZmZlY3QsbnVsbCE9PWc/KGIuZmlyc3RFZmZlY3Q9Yy5maXJzdEVmZmVjdCxiLmxhc3RFZmZlY3Q9ZyxnLm5leHRFZmZlY3Q9bnVsbCk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9bnVsbCk6Yz1UZyhnLGgpO251bGwhPT1hP2Q9VGcoYSxkKTooZD1YZyhkLGYsZSxudWxsKSxkLmZsYWdzfD0yKTtkLnJldHVybj1iO2MucmV0dXJuPWI7Yy5zaWJsaW5nPWQ7Yi5jaGlsZD1jO3JldHVybiBkfWZ1bmN0aW9uIHlpKGEsYil7YS5sYW5lc3w9Yjt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmKGMubGFuZXN8PWIpO3NnKGEucmV0dXJuLGIpfVxuZnVuY3Rpb24gemkoYSxiLGMsZCxlLGYpe3ZhciBnPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09Zz9hLm1lbW9pemVkU3RhdGU9e2lzQmFja3dhcmRzOmIscmVuZGVyaW5nOm51bGwscmVuZGVyaW5nU3RhcnRUaW1lOjAsbGFzdDpkLHRhaWw6Yyx0YWlsTW9kZTplLGxhc3RFZmZlY3Q6Zn06KGcuaXNCYWNrd2FyZHM9YixnLnJlbmRlcmluZz1udWxsLGcucmVuZGVyaW5nU3RhcnRUaW1lPTAsZy5sYXN0PWQsZy50YWlsPWMsZy50YWlsTW9kZT1lLGcubGFzdEVmZmVjdD1mKX1cbmZ1bmN0aW9uIEFpKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQucmV2ZWFsT3JkZXIsZj1kLnRhaWw7ZmkoYSxiLGQuY2hpbGRyZW4sYyk7ZD1QLmN1cnJlbnQ7aWYoMCE9PShkJjIpKWQ9ZCYxfDIsYi5mbGFnc3w9NjQ7ZWxzZXtpZihudWxsIT09YSYmMCE9PShhLmZsYWdzJjY0KSlhOmZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtpZigxMz09PWEudGFnKW51bGwhPT1hLm1lbW9pemVkU3RhdGUmJnlpKGEsYyk7ZWxzZSBpZigxOT09PWEudGFnKXlpKGEsYyk7ZWxzZSBpZihudWxsIT09YS5jaGlsZCl7YS5jaGlsZC5yZXR1cm49YTthPWEuY2hpbGQ7Y29udGludWV9aWYoYT09PWIpYnJlYWsgYTtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fGEucmV0dXJuPT09YilicmVhayBhO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjthPWEuc2libGluZ31kJj0xfUkoUCxkKTtpZigwPT09KGIubW9kZSYyKSliLm1lbW9pemVkU3RhdGU9XG5udWxsO2Vsc2Ugc3dpdGNoKGUpe2Nhc2UgXCJmb3J3YXJkc1wiOmM9Yi5jaGlsZDtmb3IoZT1udWxsO251bGwhPT1jOylhPWMuYWx0ZXJuYXRlLG51bGwhPT1hJiZudWxsPT09aWgoYSkmJihlPWMpLGM9Yy5zaWJsaW5nO2M9ZTtudWxsPT09Yz8oZT1iLmNoaWxkLGIuY2hpbGQ9bnVsbCk6KGU9Yy5zaWJsaW5nLGMuc2libGluZz1udWxsKTt6aShiLCExLGUsYyxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcImJhY2t3YXJkc1wiOmM9bnVsbDtlPWIuY2hpbGQ7Zm9yKGIuY2hpbGQ9bnVsbDtudWxsIT09ZTspe2E9ZS5hbHRlcm5hdGU7aWYobnVsbCE9PWEmJm51bGw9PT1paChhKSl7Yi5jaGlsZD1lO2JyZWFrfWE9ZS5zaWJsaW5nO2Uuc2libGluZz1jO2M9ZTtlPWF9emkoYiwhMCxjLG51bGwsZixiLmxhc3RFZmZlY3QpO2JyZWFrO2Nhc2UgXCJ0b2dldGhlclwiOnppKGIsITEsbnVsbCxudWxsLHZvaWQgMCxiLmxhc3RFZmZlY3QpO2JyZWFrO2RlZmF1bHQ6Yi5tZW1vaXplZFN0YXRlPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBoaShhLGIsYyl7bnVsbCE9PWEmJihiLmRlcGVuZGVuY2llcz1hLmRlcGVuZGVuY2llcyk7RGd8PWIubGFuZXM7aWYoMCE9PShjJmIuY2hpbGRMYW5lcykpe2lmKG51bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZCl0aHJvdyBFcnJvcih5KDE1MykpO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7Yz1UZyhhLGEucGVuZGluZ1Byb3BzKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9VGcoYSxhLnBlbmRpbmdQcm9wcyksYy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH1yZXR1cm4gbnVsbH12YXIgQmksQ2ksRGksRWk7XG5CaT1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1iLmNoaWxkO251bGwhPT1jOyl7aWYoNT09PWMudGFnfHw2PT09Yy50YWcpYS5hcHBlbmRDaGlsZChjLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09Yy50YWcmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX07Q2k9ZnVuY3Rpb24oKXt9O1xuRGk9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9YS5tZW1vaXplZFByb3BzO2lmKGUhPT1kKXthPWIuc3RhdGVOb2RlO2RoKGFoLmN1cnJlbnQpO3ZhciBmPW51bGw7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOmU9WWEoYSxlKTtkPVlhKGEsZCk7Zj1bXTticmVhaztjYXNlIFwib3B0aW9uXCI6ZT1lYihhLGUpO2Q9ZWIoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjplPW0oe30sZSx7dmFsdWU6dm9pZCAwfSk7ZD1tKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2Y9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6ZT1nYihhLGUpO2Q9Z2IoYSxkKTtmPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGUub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGEub25jbGljaz1qZil9dmIoYyxkKTt2YXIgZztjPW51bGw7Zm9yKGwgaW4gZSlpZighZC5oYXNPd25Qcm9wZXJ0eShsKSYmZS5oYXNPd25Qcm9wZXJ0eShsKSYmbnVsbCE9ZVtsXSlpZihcInN0eWxlXCI9PT1cbmwpe3ZhciBoPWVbbF07Zm9yKGcgaW4gaCloLmhhc093blByb3BlcnR5KGcpJiYoY3x8KGM9e30pLGNbZ109XCJcIil9ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWwmJlwiY2hpbGRyZW5cIiE9PWwmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmXCJhdXRvRm9jdXNcIiE9PWwmJihjYS5oYXNPd25Qcm9wZXJ0eShsKT9mfHwoZj1bXSk6KGY9Znx8W10pLnB1c2gobCxudWxsKSk7Zm9yKGwgaW4gZCl7dmFyIGs9ZFtsXTtoPW51bGwhPWU/ZVtsXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShsKSYmayE9PWgmJihudWxsIT1rfHxudWxsIT1oKSlpZihcInN0eWxlXCI9PT1sKWlmKGgpe2ZvcihnIGluIGgpIWguaGFzT3duUHJvcGVydHkoZyl8fGsmJmsuaGFzT3duUHJvcGVydHkoZyl8fChjfHwoYz17fSksY1tnXT1cIlwiKTtmb3IoZyBpbiBrKWsuaGFzT3duUHJvcGVydHkoZykmJmhbZ10hPT1rW2ddJiYoY3x8XG4oYz17fSksY1tnXT1rW2ddKX1lbHNlIGN8fChmfHwoZj1bXSksZi5wdXNoKGwsYykpLGM9aztlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09bD8oaz1rP2suX19odG1sOnZvaWQgMCxoPWg/aC5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJmghPT1rJiYoZj1mfHxbXSkucHVzaChsLGspKTpcImNoaWxkcmVuXCI9PT1sP1wic3RyaW5nXCIhPT10eXBlb2YgayYmXCJudW1iZXJcIiE9PXR5cGVvZiBrfHwoZj1mfHxbXSkucHVzaChsLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiYoY2EuaGFzT3duUHJvcGVydHkobCk/KG51bGwhPWsmJlwib25TY3JvbGxcIj09PWwmJkcoXCJzY3JvbGxcIixhKSxmfHxoPT09a3x8KGY9W10pKTpcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rJiZrLiQkdHlwZW9mPT09R2E/ay50b1N0cmluZygpOihmPWZ8fFtdKS5wdXNoKGwsaykpfWMmJihmPWZ8fFtdKS5wdXNoKFwic3R5bGVcIixcbmMpO3ZhciBsPWY7aWYoYi51cGRhdGVRdWV1ZT1sKWIuZmxhZ3N8PTR9fTtFaT1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmKGIuZmxhZ3N8PTQpfTtmdW5jdGlvbiBGaShhLGIpe2lmKCFsaClzd2l0Y2goYS50YWlsTW9kZSl7Y2FzZSBcImhpZGRlblwiOmI9YS50YWlsO2Zvcih2YXIgYz1udWxsO251bGwhPT1iOyludWxsIT09Yi5hbHRlcm5hdGUmJihjPWIpLGI9Yi5zaWJsaW5nO251bGw9PT1jP2EudGFpbD1udWxsOmMuc2libGluZz1udWxsO2JyZWFrO2Nhc2UgXCJjb2xsYXBzZWRcIjpjPWEudGFpbDtmb3IodmFyIGQ9bnVsbDtudWxsIT09YzspbnVsbCE9PWMuYWx0ZXJuYXRlJiYoZD1jKSxjPWMuc2libGluZztudWxsPT09ZD9ifHxudWxsPT09YS50YWlsP2EudGFpbD1udWxsOmEudGFpbC5zaWJsaW5nPW51bGw6ZC5zaWJsaW5nPW51bGx9fVxuZnVuY3Rpb24gR2koYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmNhc2UgMTY6Y2FzZSAxNTpjYXNlIDA6Y2FzZSAxMTpjYXNlIDc6Y2FzZSA4OmNhc2UgMTI6Y2FzZSA5OmNhc2UgMTQ6cmV0dXJuIG51bGw7Y2FzZSAxOnJldHVybiBGZihiLnR5cGUpJiZHZigpLG51bGw7Y2FzZSAzOmZoKCk7SChOKTtIKE0pO3VoKCk7ZD1iLnN0YXRlTm9kZTtkLnBlbmRpbmdDb250ZXh0JiYoZC5jb250ZXh0PWQucGVuZGluZ0NvbnRleHQsZC5wZW5kaW5nQ29udGV4dD1udWxsKTtpZihudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpcmgoYik/Yi5mbGFnc3w9NDpkLmh5ZHJhdGV8fChiLmZsYWdzfD0yNTYpO0NpKGIpO3JldHVybiBudWxsO2Nhc2UgNTpoaChiKTt2YXIgZT1kaChjaC5jdXJyZW50KTtjPWIudHlwZTtpZihudWxsIT09YSYmbnVsbCE9Yi5zdGF0ZU5vZGUpRGkoYSxiLGMsZCxlKSxhLnJlZiE9PWIucmVmJiYoYi5mbGFnc3w9MTI4KTtlbHNle2lmKCFkKXtpZihudWxsPT09XG5iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih5KDE2NikpO3JldHVybiBudWxsfWE9ZGgoYWguY3VycmVudCk7aWYocmgoYikpe2Q9Yi5zdGF0ZU5vZGU7Yz1iLnR5cGU7dmFyIGY9Yi5tZW1vaXplZFByb3BzO2Rbd2ZdPWI7ZFt4Zl09Zjtzd2l0Y2goYyl7Y2FzZSBcImRpYWxvZ1wiOkcoXCJjYW5jZWxcIixkKTtHKFwiY2xvc2VcIixkKTticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkcoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGE9MDthPFhlLmxlbmd0aDthKyspRyhYZVthXSxkKTticmVhaztjYXNlIFwic291cmNlXCI6RyhcImVycm9yXCIsZCk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RyhcImVycm9yXCIsZCk7RyhcImxvYWRcIixkKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkcoXCJ0b2dnbGVcIixkKTticmVhaztjYXNlIFwiaW5wdXRcIjpaYShkLGYpO0coXCJpbnZhbGlkXCIsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmQuX3dyYXBwZXJTdGF0ZT1cbnt3YXNNdWx0aXBsZTohIWYubXVsdGlwbGV9O0coXCJpbnZhbGlkXCIsZCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoZCxmKSxHKFwiaW52YWxpZFwiLGQpfXZiKGMsZik7YT1udWxsO2Zvcih2YXIgZyBpbiBmKWYuaGFzT3duUHJvcGVydHkoZykmJihlPWZbZ10sXCJjaGlsZHJlblwiPT09Zz9cInN0cmluZ1wiPT09dHlwZW9mIGU/ZC50ZXh0Q29udGVudCE9PWUmJihhPVtcImNoaWxkcmVuXCIsZV0pOlwibnVtYmVyXCI9PT10eXBlb2YgZSYmZC50ZXh0Q29udGVudCE9PVwiXCIrZSYmKGE9W1wiY2hpbGRyZW5cIixcIlwiK2VdKTpjYS5oYXNPd25Qcm9wZXJ0eShnKSYmbnVsbCE9ZSYmXCJvblNjcm9sbFwiPT09ZyYmRyhcInNjcm9sbFwiLGQpKTtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoZCk7Y2IoZCxmLCEwKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpWYShkKTtqYihkKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGYub25DbGljayYmKGQub25jbGljaz1cbmpmKX1kPWE7Yi51cGRhdGVRdWV1ZT1kO251bGwhPT1kJiYoYi5mbGFnc3w9NCl9ZWxzZXtnPTk9PT1lLm5vZGVUeXBlP2U6ZS5vd25lckRvY3VtZW50O2E9PT1rYi5odG1sJiYoYT1sYihjKSk7YT09PWtiLmh0bWw/XCJzY3JpcHRcIj09PWM/KGE9Zy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGEuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsYT1hLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpOlwic3RyaW5nXCI9PT10eXBlb2YgZC5pcz9hPWcuY3JlYXRlRWxlbWVudChjLHtpczpkLmlzfSk6KGE9Zy5jcmVhdGVFbGVtZW50KGMpLFwic2VsZWN0XCI9PT1jJiYoZz1hLGQubXVsdGlwbGU/Zy5tdWx0aXBsZT0hMDpkLnNpemUmJihnLnNpemU9ZC5zaXplKSkpOmE9Zy5jcmVhdGVFbGVtZW50TlMoYSxjKTthW3dmXT1iO2FbeGZdPWQ7QmkoYSxiLCExLCExKTtiLnN0YXRlTm9kZT1hO2c9d2IoYyxkKTtzd2l0Y2goYyl7Y2FzZSBcImRpYWxvZ1wiOkcoXCJjYW5jZWxcIixhKTtHKFwiY2xvc2VcIixhKTtcbmU9ZDticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkcoXCJsb2FkXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihlPTA7ZTxYZS5sZW5ndGg7ZSsrKUcoWGVbZV0sYSk7ZT1kO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpHKFwiZXJyb3JcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RyhcImVycm9yXCIsYSk7RyhcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpHKFwidG9nZ2xlXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGEsZCk7ZT1ZYShhLGQpO0coXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmU9ZWIoYSxkKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIWQubXVsdGlwbGV9O2U9bSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtHKFwiaW52YWxpZFwiLGEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhiKGEsZCk7ZT1cbmdiKGEsZCk7RyhcImludmFsaWRcIixhKTticmVhaztkZWZhdWx0OmU9ZH12YihjLGUpO3ZhciBoPWU7Zm9yKGYgaW4gaClpZihoLmhhc093blByb3BlcnR5KGYpKXt2YXIgaz1oW2ZdO1wic3R5bGVcIj09PWY/dGIoYSxrKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1mPyhrPWs/ay5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJm9iKGEsaykpOlwiY2hpbGRyZW5cIj09PWY/XCJzdHJpbmdcIj09PXR5cGVvZiBrPyhcInRleHRhcmVhXCIhPT1jfHxcIlwiIT09aykmJnBiKGEsayk6XCJudW1iZXJcIj09PXR5cGVvZiBrJiZwYihhLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWYmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1mJiZcImF1dG9Gb2N1c1wiIT09ZiYmKGNhLmhhc093blByb3BlcnR5KGYpP251bGwhPWsmJlwib25TY3JvbGxcIj09PWYmJkcoXCJzY3JvbGxcIixhKTpudWxsIT1rJiZxYShhLGYsayxnKSl9c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlZhKGEpO2NiKGEsZCwhMSk7XG5icmVhaztjYXNlIFwidGV4dGFyZWFcIjpWYShhKTtqYihhKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9ZC52YWx1ZSYmYS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIrU2EoZC52YWx1ZSkpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLm11bHRpcGxlPSEhZC5tdWx0aXBsZTtmPWQudmFsdWU7bnVsbCE9Zj9mYihhLCEhZC5tdWx0aXBsZSxmLCExKTpudWxsIT1kLmRlZmF1bHRWYWx1ZSYmZmIoYSwhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsITApO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGUub25DbGljayYmKGEub25jbGljaz1qZil9bWYoYyxkKSYmKGIuZmxhZ3N8PTQpfW51bGwhPT1iLnJlZiYmKGIuZmxhZ3N8PTEyOCl9cmV0dXJuIG51bGw7Y2FzZSA2OmlmKGEmJm51bGwhPWIuc3RhdGVOb2RlKUVpKGEsYixhLm1lbW9pemVkUHJvcHMsZCk7ZWxzZXtpZihcInN0cmluZ1wiIT09dHlwZW9mIGQmJm51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih5KDE2NikpO1xuYz1kaChjaC5jdXJyZW50KTtkaChhaC5jdXJyZW50KTtyaChiKT8oZD1iLnN0YXRlTm9kZSxjPWIubWVtb2l6ZWRQcm9wcyxkW3dmXT1iLGQubm9kZVZhbHVlIT09YyYmKGIuZmxhZ3N8PTQpKTooZD0oOT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGQpLGRbd2ZdPWIsYi5zdGF0ZU5vZGU9ZCl9cmV0dXJuIG51bGw7Y2FzZSAxMzpIKFApO2Q9Yi5tZW1vaXplZFN0YXRlO2lmKDAhPT0oYi5mbGFncyY2NCkpcmV0dXJuIGIubGFuZXM9YyxiO2Q9bnVsbCE9PWQ7Yz0hMTtudWxsPT09YT92b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMuZmFsbGJhY2smJnJoKGIpOmM9bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZTtpZihkJiYhYyYmMCE9PShiLm1vZGUmMikpaWYobnVsbD09PWEmJiEwIT09Yi5tZW1vaXplZFByb3BzLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrfHwwIT09KFAuY3VycmVudCYxKSkwPT09ViYmKFY9Myk7ZWxzZXtpZigwPT09Vnx8Mz09PVYpVj1cbjQ7bnVsbD09PVV8fDA9PT0oRGcmMTM0MjE3NzI3KSYmMD09PShIaSYxMzQyMTc3MjcpfHxJaShVLFcpfWlmKGR8fGMpYi5mbGFnc3w9NDtyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIGZoKCksQ2koYiksbnVsbD09PWEmJmNmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLG51bGw7Y2FzZSAxMDpyZXR1cm4gcmcoYiksbnVsbDtjYXNlIDE3OnJldHVybiBGZihiLnR5cGUpJiZHZigpLG51bGw7Y2FzZSAxOTpIKFApO2Q9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2Y9MCE9PShiLmZsYWdzJjY0KTtnPWQucmVuZGVyaW5nO2lmKG51bGw9PT1nKWlmKGYpRmkoZCwhMSk7ZWxzZXtpZigwIT09Vnx8bnVsbCE9PWEmJjAhPT0oYS5mbGFncyY2NCkpZm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2c9aWgoYSk7aWYobnVsbCE9PWcpe2IuZmxhZ3N8PTY0O0ZpKGQsITEpO2Y9Zy51cGRhdGVRdWV1ZTtudWxsIT09ZiYmKGIudXBkYXRlUXVldWU9ZixiLmZsYWdzfD00KTtcbm51bGw9PT1kLmxhc3RFZmZlY3QmJihiLmZpcnN0RWZmZWN0PW51bGwpO2IubGFzdEVmZmVjdD1kLmxhc3RFZmZlY3Q7ZD1jO2ZvcihjPWIuY2hpbGQ7bnVsbCE9PWM7KWY9YyxhPWQsZi5mbGFncyY9MixmLm5leHRFZmZlY3Q9bnVsbCxmLmZpcnN0RWZmZWN0PW51bGwsZi5sYXN0RWZmZWN0PW51bGwsZz1mLmFsdGVybmF0ZSxudWxsPT09Zz8oZi5jaGlsZExhbmVzPTAsZi5sYW5lcz1hLGYuY2hpbGQ9bnVsbCxmLm1lbW9pemVkUHJvcHM9bnVsbCxmLm1lbW9pemVkU3RhdGU9bnVsbCxmLnVwZGF0ZVF1ZXVlPW51bGwsZi5kZXBlbmRlbmNpZXM9bnVsbCxmLnN0YXRlTm9kZT1udWxsKTooZi5jaGlsZExhbmVzPWcuY2hpbGRMYW5lcyxmLmxhbmVzPWcubGFuZXMsZi5jaGlsZD1nLmNoaWxkLGYubWVtb2l6ZWRQcm9wcz1nLm1lbW9pemVkUHJvcHMsZi5tZW1vaXplZFN0YXRlPWcubWVtb2l6ZWRTdGF0ZSxmLnVwZGF0ZVF1ZXVlPWcudXBkYXRlUXVldWUsZi50eXBlPWcudHlwZSxhPWcuZGVwZW5kZW5jaWVzLFxuZi5kZXBlbmRlbmNpZXM9bnVsbD09PWE/bnVsbDp7bGFuZXM6YS5sYW5lcyxmaXJzdENvbnRleHQ6YS5maXJzdENvbnRleHR9KSxjPWMuc2libGluZztJKFAsUC5jdXJyZW50JjF8Mik7cmV0dXJuIGIuY2hpbGR9YT1hLnNpYmxpbmd9bnVsbCE9PWQudGFpbCYmTygpPkppJiYoYi5mbGFnc3w9NjQsZj0hMCxGaShkLCExKSxiLmxhbmVzPTMzNTU0NDMyKX1lbHNle2lmKCFmKWlmKGE9aWgoZyksbnVsbCE9PWEpe2lmKGIuZmxhZ3N8PTY0LGY9ITAsYz1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1jJiYoYi51cGRhdGVRdWV1ZT1jLGIuZmxhZ3N8PTQpLEZpKGQsITApLG51bGw9PT1kLnRhaWwmJlwiaGlkZGVuXCI9PT1kLnRhaWxNb2RlJiYhZy5hbHRlcm5hdGUmJiFsaClyZXR1cm4gYj1iLmxhc3RFZmZlY3Q9ZC5sYXN0RWZmZWN0LG51bGwhPT1iJiYoYi5uZXh0RWZmZWN0PW51bGwpLG51bGx9ZWxzZSAyKk8oKS1kLnJlbmRlcmluZ1N0YXJ0VGltZT5KaSYmMTA3Mzc0MTgyNCE9PWMmJihiLmZsYWdzfD1cbjY0LGY9ITAsRmkoZCwhMSksYi5sYW5lcz0zMzU1NDQzMik7ZC5pc0JhY2t3YXJkcz8oZy5zaWJsaW5nPWIuY2hpbGQsYi5jaGlsZD1nKTooYz1kLmxhc3QsbnVsbCE9PWM/Yy5zaWJsaW5nPWc6Yi5jaGlsZD1nLGQubGFzdD1nKX1yZXR1cm4gbnVsbCE9PWQudGFpbD8oYz1kLnRhaWwsZC5yZW5kZXJpbmc9YyxkLnRhaWw9Yy5zaWJsaW5nLGQubGFzdEVmZmVjdD1iLmxhc3RFZmZlY3QsZC5yZW5kZXJpbmdTdGFydFRpbWU9TygpLGMuc2libGluZz1udWxsLGI9UC5jdXJyZW50LEkoUCxmP2ImMXwyOmImMSksYyk6bnVsbDtjYXNlIDIzOmNhc2UgMjQ6cmV0dXJuIEtpKCksbnVsbCE9PWEmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUhPT0obnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSkmJlwidW5zdGFibGUtZGVmZXItd2l0aG91dC1oaWRpbmdcIiE9PWQubW9kZSYmKGIuZmxhZ3N8PTQpLG51bGx9dGhyb3cgRXJyb3IoeSgxNTYsYi50YWcpKTt9XG5mdW5jdGlvbiBMaShhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMTpGZihhLnR5cGUpJiZHZigpO3ZhciBiPWEuZmxhZ3M7cmV0dXJuIGImNDA5Nj8oYS5mbGFncz1iJi00MDk3fDY0LGEpOm51bGw7Y2FzZSAzOmZoKCk7SChOKTtIKE0pO3VoKCk7Yj1hLmZsYWdzO2lmKDAhPT0oYiY2NCkpdGhyb3cgRXJyb3IoeSgyODUpKTthLmZsYWdzPWImLTQwOTd8NjQ7cmV0dXJuIGE7Y2FzZSA1OnJldHVybiBoaChhKSxudWxsO2Nhc2UgMTM6cmV0dXJuIEgoUCksYj1hLmZsYWdzLGImNDA5Nj8oYS5mbGFncz1iJi00MDk3fDY0LGEpOm51bGw7Y2FzZSAxOTpyZXR1cm4gSChQKSxudWxsO2Nhc2UgNDpyZXR1cm4gZmgoKSxudWxsO2Nhc2UgMTA6cmV0dXJuIHJnKGEpLG51bGw7Y2FzZSAyMzpjYXNlIDI0OnJldHVybiBLaSgpLG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBNaShhLGIpe3RyeXt2YXIgYz1cIlwiLGQ9YjtkbyBjKz1RYShkKSxkPWQucmV0dXJuO3doaWxlKGQpO3ZhciBlPWN9Y2F0Y2goZil7ZT1cIlxcbkVycm9yIGdlbmVyYXRpbmcgc3RhY2s6IFwiK2YubWVzc2FnZStcIlxcblwiK2Yuc3RhY2t9cmV0dXJue3ZhbHVlOmEsc291cmNlOmIsc3RhY2s6ZX19ZnVuY3Rpb24gTmkoYSxiKXt0cnl7Y29uc29sZS5lcnJvcihiLnZhbHVlKX1jYXRjaChjKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgYzt9KX19dmFyIE9pPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwO2Z1bmN0aW9uIFBpKGEsYixjKXtjPXpnKC0xLGMpO2MudGFnPTM7Yy5wYXlsb2FkPXtlbGVtZW50Om51bGx9O3ZhciBkPWIudmFsdWU7Yy5jYWxsYmFjaz1mdW5jdGlvbigpe1FpfHwoUWk9ITAsUmk9ZCk7TmkoYSxiKX07cmV0dXJuIGN9XG5mdW5jdGlvbiBTaShhLGIsYyl7Yz16ZygtMSxjKTtjLnRhZz0zO3ZhciBkPWEudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBlPWIudmFsdWU7Yy5wYXlsb2FkPWZ1bmN0aW9uKCl7TmkoYSxiKTtyZXR1cm4gZChlKX19dmFyIGY9YS5zdGF0ZU5vZGU7bnVsbCE9PWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmNvbXBvbmVudERpZENhdGNoJiYoYy5jYWxsYmFjaz1mdW5jdGlvbigpe1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBkJiYobnVsbD09PVRpP1RpPW5ldyBTZXQoW3RoaXNdKTpUaS5hZGQodGhpcyksTmkoYSxiKSk7dmFyIGM9Yi5zdGFjazt0aGlzLmNvbXBvbmVudERpZENhdGNoKGIudmFsdWUse2NvbXBvbmVudFN0YWNrOm51bGwhPT1jP2M6XCJcIn0pfSk7cmV0dXJuIGN9dmFyIFVpPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrU2V0P1dlYWtTZXQ6U2V0O1xuZnVuY3Rpb24gVmkoYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpdHJ5e2IobnVsbCl9Y2F0Y2goYyl7V2koYSxjKX1lbHNlIGIuY3VycmVudD1udWxsfWZ1bmN0aW9uIFhpKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmNhc2UgMjI6cmV0dXJuO2Nhc2UgMTppZihiLmZsYWdzJjI1NiYmbnVsbCE9PWEpe3ZhciBjPWEubWVtb2l6ZWRQcm9wcyxkPWEubWVtb2l6ZWRTdGF0ZTthPWIuc3RhdGVOb2RlO2I9YS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShiLmVsZW1lbnRUeXBlPT09Yi50eXBlP2M6bGcoYi50eXBlLGMpLGQpO2EuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9Yn1yZXR1cm47Y2FzZSAzOmIuZmxhZ3MmMjU2JiZxZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTtyZXR1cm47Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6Y2FzZSAxNzpyZXR1cm59dGhyb3cgRXJyb3IoeSgxNjMpKTt9XG5mdW5jdGlvbiBZaShhLGIsYyl7c3dpdGNoKGMudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmNhc2UgMjI6Yj1jLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe2E9Yj1iLm5leHQ7ZG97aWYoMz09PShhLnRhZyYzKSl7dmFyIGQ9YS5jcmVhdGU7YS5kZXN0cm95PWQoKX1hPWEubmV4dH13aGlsZShhIT09Yil9Yj1jLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe2E9Yj1iLm5leHQ7ZG97dmFyIGU9YTtkPWUubmV4dDtlPWUudGFnOzAhPT0oZSY0KSYmMCE9PShlJjEpJiYoWmkoYyxhKSwkaShjLGEpKTthPWR9d2hpbGUoYSE9PWIpfXJldHVybjtjYXNlIDE6YT1jLnN0YXRlTm9kZTtjLmZsYWdzJjQmJihudWxsPT09Yj9hLmNvbXBvbmVudERpZE1vdW50KCk6KGQ9Yy5lbGVtZW50VHlwZT09PWMudHlwZT9iLm1lbW9pemVkUHJvcHM6bGcoYy50eXBlLGIubWVtb2l6ZWRQcm9wcyksYS5jb21wb25lbnREaWRVcGRhdGUoZCxcbmIubWVtb2l6ZWRTdGF0ZSxhLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKSkpO2I9Yy51cGRhdGVRdWV1ZTtudWxsIT09YiYmRWcoYyxiLGEpO3JldHVybjtjYXNlIDM6Yj1jLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthPW51bGw7aWYobnVsbCE9PWMuY2hpbGQpc3dpdGNoKGMuY2hpbGQudGFnKXtjYXNlIDU6YT1jLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6YT1jLmNoaWxkLnN0YXRlTm9kZX1FZyhjLGIsYSl9cmV0dXJuO2Nhc2UgNTphPWMuc3RhdGVOb2RlO251bGw9PT1iJiZjLmZsYWdzJjQmJm1mKGMudHlwZSxjLm1lbW9pemVkUHJvcHMpJiZhLmZvY3VzKCk7cmV0dXJuO2Nhc2UgNjpyZXR1cm47Y2FzZSA0OnJldHVybjtjYXNlIDEyOnJldHVybjtjYXNlIDEzOm51bGw9PT1jLm1lbW9pemVkU3RhdGUmJihjPWMuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYz1jLm1lbW9pemVkU3RhdGUsbnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsIT09YyYmQ2MoYykpKSk7XG5yZXR1cm47Y2FzZSAxOTpjYXNlIDE3OmNhc2UgMjA6Y2FzZSAyMTpjYXNlIDIzOmNhc2UgMjQ6cmV0dXJufXRocm93IEVycm9yKHkoMTYzKSk7fVxuZnVuY3Rpb24gYWooYSxiKXtmb3IodmFyIGM9YTs7KXtpZig1PT09Yy50YWcpe3ZhciBkPWMuc3RhdGVOb2RlO2lmKGIpZD1kLnN0eWxlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLnNldFByb3BlcnR5P2Quc2V0UHJvcGVydHkoXCJkaXNwbGF5XCIsXCJub25lXCIsXCJpbXBvcnRhbnRcIik6ZC5kaXNwbGF5PVwibm9uZVwiO2Vsc2V7ZD1jLnN0YXRlTm9kZTt2YXIgZT1jLm1lbW9pemVkUHJvcHMuc3R5bGU7ZT12b2lkIDAhPT1lJiZudWxsIT09ZSYmZS5oYXNPd25Qcm9wZXJ0eShcImRpc3BsYXlcIik/ZS5kaXNwbGF5Om51bGw7ZC5zdHlsZS5kaXNwbGF5PXNiKFwiZGlzcGxheVwiLGUpfX1lbHNlIGlmKDY9PT1jLnRhZyljLnN0YXRlTm9kZS5ub2RlVmFsdWU9Yj9cIlwiOmMubWVtb2l6ZWRQcm9wcztlbHNlIGlmKCgyMyE9PWMudGFnJiYyNCE9PWMudGFnfHxudWxsPT09Yy5tZW1vaXplZFN0YXRlfHxjPT09YSkmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09XG5hKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1hKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fVxuZnVuY3Rpb24gYmooYSxiKXtpZihNZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIE1mLm9uQ29tbWl0RmliZXJVbm1vdW50KXRyeXtNZi5vbkNvbW1pdEZpYmVyVW5tb3VudChMZixiKX1jYXRjaChmKXt9c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6Y2FzZSAyMjphPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWEmJihhPWEubGFzdEVmZmVjdCxudWxsIT09YSkpe3ZhciBjPWE9YS5uZXh0O2Rve3ZhciBkPWMsZT1kLmRlc3Ryb3k7ZD1kLnRhZztpZih2b2lkIDAhPT1lKWlmKDAhPT0oZCY0KSlaaShiLGMpO2Vsc2V7ZD1iO3RyeXtlKCl9Y2F0Y2goZil7V2koZCxmKX19Yz1jLm5leHR9d2hpbGUoYyE9PWEpfWJyZWFrO2Nhc2UgMTpWaShiKTthPWIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLmNvbXBvbmVudFdpbGxVbm1vdW50KXRyeXthLnByb3BzPWIubWVtb2l6ZWRQcm9wcyxhLnN0YXRlPWIubWVtb2l6ZWRTdGF0ZSxhLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2goZil7V2koYixcbmYpfWJyZWFrO2Nhc2UgNTpWaShiKTticmVhaztjYXNlIDQ6Y2ooYSxiKX19ZnVuY3Rpb24gZGooYSl7YS5hbHRlcm5hdGU9bnVsbDthLmNoaWxkPW51bGw7YS5kZXBlbmRlbmNpZXM9bnVsbDthLmZpcnN0RWZmZWN0PW51bGw7YS5sYXN0RWZmZWN0PW51bGw7YS5tZW1vaXplZFByb3BzPW51bGw7YS5tZW1vaXplZFN0YXRlPW51bGw7YS5wZW5kaW5nUHJvcHM9bnVsbDthLnJldHVybj1udWxsO2EudXBkYXRlUXVldWU9bnVsbH1mdW5jdGlvbiBlaihhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIGZqKGEpe2E6e2Zvcih2YXIgYj1hLnJldHVybjtudWxsIT09Yjspe2lmKGVqKGIpKWJyZWFrIGE7Yj1iLnJldHVybn10aHJvdyBFcnJvcih5KDE2MCkpO312YXIgYz1iO2I9Yy5zdGF0ZU5vZGU7c3dpdGNoKGMudGFnKXtjYXNlIDU6dmFyIGQ9ITE7YnJlYWs7Y2FzZSAzOmI9Yi5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7Y2FzZSA0OmI9Yi5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDE2MSkpO31jLmZsYWdzJjE2JiYocGIoYixcIlwiKSxjLmZsYWdzJj0tMTcpO2E6Yjpmb3IoYz1hOzspe2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8ZWooYy5yZXR1cm4pKXtjPW51bGw7YnJlYWsgYX1jPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Zm9yKGM9Yy5zaWJsaW5nOzUhPT1jLnRhZyYmNiE9PWMudGFnJiYxOCE9PWMudGFnOyl7aWYoYy5mbGFncyYyKWNvbnRpbnVlIGI7aWYobnVsbD09PVxuYy5jaGlsZHx8ND09PWMudGFnKWNvbnRpbnVlIGI7ZWxzZSBjLmNoaWxkLnJldHVybj1jLGM9Yy5jaGlsZH1pZighKGMuZmxhZ3MmMikpe2M9Yy5zdGF0ZU5vZGU7YnJlYWsgYX19ZD9naihhLGMsYik6aGooYSxjLGIpfVxuZnVuY3Rpb24gZ2ooYSxiLGMpe3ZhciBkPWEudGFnLGU9NT09PWR8fDY9PT1kO2lmKGUpYT1lP2Euc3RhdGVOb2RlOmEuc3RhdGVOb2RlLmluc3RhbmNlLGI/OD09PWMubm9kZVR5cGU/Yy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLGIpOmMuaW5zZXJ0QmVmb3JlKGEsYik6KDg9PT1jLm5vZGVUeXBlPyhiPWMucGFyZW50Tm9kZSxiLmluc2VydEJlZm9yZShhLGMpKTooYj1jLGIuYXBwZW5kQ2hpbGQoYSkpLGM9Yy5fcmVhY3RSb290Q29udGFpbmVyLG51bGwhPT1jJiZ2b2lkIDAhPT1jfHxudWxsIT09Yi5vbmNsaWNrfHwoYi5vbmNsaWNrPWpmKSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKGdqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspZ2ooYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gaGooYSxiLGMpe3ZhciBkPWEudGFnLGU9NT09PWR8fDY9PT1kO2lmKGUpYT1lP2Euc3RhdGVOb2RlOmEuc3RhdGVOb2RlLmluc3RhbmNlLGI/Yy5pbnNlcnRCZWZvcmUoYSxiKTpjLmFwcGVuZENoaWxkKGEpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihoaihhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KWhqKGEsYixjKSxhPWEuc2libGluZ31cbmZ1bmN0aW9uIGNqKGEsYil7Zm9yKHZhciBjPWIsZD0hMSxlLGY7Oyl7aWYoIWQpe2Q9Yy5yZXR1cm47YTpmb3IoOzspe2lmKG51bGw9PT1kKXRocm93IEVycm9yKHkoMTYwKSk7ZT1kLnN0YXRlTm9kZTtzd2l0Y2goZC50YWcpe2Nhc2UgNTpmPSExO2JyZWFrIGE7Y2FzZSAzOmU9ZS5jb250YWluZXJJbmZvO2Y9ITA7YnJlYWsgYTtjYXNlIDQ6ZT1lLmNvbnRhaW5lckluZm87Zj0hMDticmVhayBhfWQ9ZC5yZXR1cm59ZD0hMH1pZig1PT09Yy50YWd8fDY9PT1jLnRhZyl7YTpmb3IodmFyIGc9YSxoPWMsaz1oOzspaWYoYmooZyxrKSxudWxsIT09ay5jaGlsZCYmNCE9PWsudGFnKWsuY2hpbGQucmV0dXJuPWssaz1rLmNoaWxkO2Vsc2V7aWYoaz09PWgpYnJlYWsgYTtmb3IoO251bGw9PT1rLnNpYmxpbmc7KXtpZihudWxsPT09ay5yZXR1cm58fGsucmV0dXJuPT09aClicmVhayBhO2s9ay5yZXR1cm59ay5zaWJsaW5nLnJldHVybj1rLnJldHVybjtrPWsuc2libGluZ31mPyhnPWUsaD1jLnN0YXRlTm9kZSxcbjg9PT1nLm5vZGVUeXBlP2cucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChoKTpnLnJlbW92ZUNoaWxkKGgpKTplLnJlbW92ZUNoaWxkKGMuc3RhdGVOb2RlKX1lbHNlIGlmKDQ9PT1jLnRhZyl7aWYobnVsbCE9PWMuY2hpbGQpe2U9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztmPSEwO2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfX1lbHNlIGlmKGJqKGEsYyksbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJuOzQ9PT1jLnRhZyYmKGQ9ITEpfWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fVxuZnVuY3Rpb24gaWooYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpjYXNlIDIyOnZhciBjPWIudXBkYXRlUXVldWU7Yz1udWxsIT09Yz9jLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yyl7dmFyIGQ9Yz1jLm5leHQ7ZG8gMz09PShkLnRhZyYzKSYmKGE9ZC5kZXN0cm95LGQuZGVzdHJveT12b2lkIDAsdm9pZCAwIT09YSYmYSgpKSxkPWQubmV4dDt3aGlsZShkIT09Yyl9cmV0dXJuO2Nhc2UgMTpyZXR1cm47Y2FzZSA1OmM9Yi5zdGF0ZU5vZGU7aWYobnVsbCE9Yyl7ZD1iLm1lbW9pemVkUHJvcHM7dmFyIGU9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOmQ7YT1iLnR5cGU7dmFyIGY9Yi51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYobnVsbCE9PWYpe2NbeGZdPWQ7XCJpbnB1dFwiPT09YSYmXCJyYWRpb1wiPT09ZC50eXBlJiZudWxsIT1kLm5hbWUmJiRhKGMsZCk7d2IoYSxlKTtiPXdiKGEsZCk7Zm9yKGU9MDtlPGYubGVuZ3RoO2UrPVxuMil7dmFyIGc9ZltlXSxoPWZbZSsxXTtcInN0eWxlXCI9PT1nP3RiKGMsaCk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zz9vYihjLGgpOlwiY2hpbGRyZW5cIj09PWc/cGIoYyxoKTpxYShjLGcsaCxiKX1zd2l0Y2goYSl7Y2FzZSBcImlucHV0XCI6YWIoYyxkKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjppYihjLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphPWMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSxjLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFkLm11bHRpcGxlLGY9ZC52YWx1ZSxudWxsIT1mP2ZiKGMsISFkLm11bHRpcGxlLGYsITEpOmEhPT0hIWQubXVsdGlwbGUmJihudWxsIT1kLmRlZmF1bHRWYWx1ZT9mYihjLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk6ZmIoYywhIWQubXVsdGlwbGUsZC5tdWx0aXBsZT9bXTpcIlwiLCExKSl9fX1yZXR1cm47Y2FzZSA2OmlmKG51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih5KDE2MikpO2Iuc3RhdGVOb2RlLm5vZGVWYWx1ZT1cbmIubWVtb2l6ZWRQcm9wcztyZXR1cm47Y2FzZSAzOmM9Yi5zdGF0ZU5vZGU7Yy5oeWRyYXRlJiYoYy5oeWRyYXRlPSExLENjKGMuY29udGFpbmVySW5mbykpO3JldHVybjtjYXNlIDEyOnJldHVybjtjYXNlIDEzOm51bGwhPT1iLm1lbW9pemVkU3RhdGUmJihqaj1PKCksYWooYi5jaGlsZCwhMCkpO2tqKGIpO3JldHVybjtjYXNlIDE5OmtqKGIpO3JldHVybjtjYXNlIDE3OnJldHVybjtjYXNlIDIzOmNhc2UgMjQ6YWooYixudWxsIT09Yi5tZW1vaXplZFN0YXRlKTtyZXR1cm59dGhyb3cgRXJyb3IoeSgxNjMpKTt9ZnVuY3Rpb24ga2ooYSl7dmFyIGI9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09Yil7YS51cGRhdGVRdWV1ZT1udWxsO3ZhciBjPWEuc3RhdGVOb2RlO251bGw9PT1jJiYoYz1hLnN0YXRlTm9kZT1uZXcgVWkpO2IuZm9yRWFjaChmdW5jdGlvbihiKXt2YXIgZD1sai5iaW5kKG51bGwsYSxiKTtjLmhhcyhiKXx8KGMuYWRkKGIpLGIudGhlbihkLGQpKX0pfX1cbmZ1bmN0aW9uIG1qKGEsYil7cmV0dXJuIG51bGwhPT1hJiYoYT1hLm1lbW9pemVkU3RhdGUsbnVsbD09PWF8fG51bGwhPT1hLmRlaHlkcmF0ZWQpPyhiPWIubWVtb2l6ZWRTdGF0ZSxudWxsIT09YiYmbnVsbD09PWIuZGVoeWRyYXRlZCk6ITF9dmFyIG5qPU1hdGguY2VpbCxvaj1yYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLHBqPXJhLlJlYWN0Q3VycmVudE93bmVyLFg9MCxVPW51bGwsWT1udWxsLFc9MCxxaj0wLHJqPUJmKDApLFY9MCxzaj1udWxsLHRqPTAsRGc9MCxIaT0wLHVqPTAsdmo9bnVsbCxqaj0wLEppPUluZmluaXR5O2Z1bmN0aW9uIHdqKCl7Smk9TygpKzUwMH12YXIgWj1udWxsLFFpPSExLFJpPW51bGwsVGk9bnVsbCx4aj0hMSx5aj1udWxsLHpqPTkwLEFqPVtdLEJqPVtdLENqPW51bGwsRGo9MCxFaj1udWxsLEZqPS0xLEdqPTAsSGo9MCxJaj1udWxsLEpqPSExO2Z1bmN0aW9uIEhnKCl7cmV0dXJuIDAhPT0oWCY0OCk/TygpOi0xIT09Rmo/Rmo6Rmo9TygpfVxuZnVuY3Rpb24gSWcoYSl7YT1hLm1vZGU7aWYoMD09PShhJjIpKXJldHVybiAxO2lmKDA9PT0oYSY0KSlyZXR1cm4gOTk9PT1lZygpPzE6MjswPT09R2omJihHaj10aik7aWYoMCE9PWtnLnRyYW5zaXRpb24pezAhPT1IaiYmKEhqPW51bGwhPT12aj92ai5wZW5kaW5nTGFuZXM6MCk7YT1Hajt2YXIgYj00MTg2MTEyJn5IajtiJj0tYjswPT09YiYmKGE9NDE4NjExMiZ+YSxiPWEmLWEsMD09PWImJihiPTgxOTIpKTtyZXR1cm4gYn1hPWVnKCk7MCE9PShYJjQpJiY5OD09PWE/YT1YYygxMixHaik6KGE9U2MoYSksYT1YYyhhLEdqKSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBKZyhhLGIsYyl7aWYoNTA8RGopdGhyb3cgRGo9MCxFaj1udWxsLEVycm9yKHkoMTg1KSk7YT1LaihhLGIpO2lmKG51bGw9PT1hKXJldHVybiBudWxsOyRjKGEsYixjKTthPT09VSYmKEhpfD1iLDQ9PT1WJiZJaShhLFcpKTt2YXIgZD1lZygpOzE9PT1iPzAhPT0oWCY4KSYmMD09PShYJjQ4KT9MaihhKTooTWooYSxjKSwwPT09WCYmKHdqKCksaWcoKSkpOigwPT09KFgmNCl8fDk4IT09ZCYmOTkhPT1kfHwobnVsbD09PUNqP0NqPW5ldyBTZXQoW2FdKTpDai5hZGQoYSkpLE1qKGEsYykpO3ZqPWF9ZnVuY3Rpb24gS2ooYSxiKXthLmxhbmVzfD1iO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiYoYy5sYW5lc3w9Yik7Yz1hO2ZvcihhPWEucmV0dXJuO251bGwhPT1hOylhLmNoaWxkTGFuZXN8PWIsYz1hLmFsdGVybmF0ZSxudWxsIT09YyYmKGMuY2hpbGRMYW5lc3w9YiksYz1hLGE9YS5yZXR1cm47cmV0dXJuIDM9PT1jLnRhZz9jLnN0YXRlTm9kZTpudWxsfVxuZnVuY3Rpb24gTWooYSxiKXtmb3IodmFyIGM9YS5jYWxsYmFja05vZGUsZD1hLnN1c3BlbmRlZExhbmVzLGU9YS5waW5nZWRMYW5lcyxmPWEuZXhwaXJhdGlvblRpbWVzLGc9YS5wZW5kaW5nTGFuZXM7MDxnOyl7dmFyIGg9MzEtVmMoZyksaz0xPDxoLGw9ZltoXTtpZigtMT09PWwpe2lmKDA9PT0oayZkKXx8MCE9PShrJmUpKXtsPWI7UmMoayk7dmFyIG49RjtmW2hdPTEwPD1uP2wrMjUwOjY8PW4/bCs1RTM6LTF9fWVsc2UgbDw9YiYmKGEuZXhwaXJlZExhbmVzfD1rKTtnJj1+a31kPVVjKGEsYT09PVU/VzowKTtiPUY7aWYoMD09PWQpbnVsbCE9PWMmJihjIT09WmYmJlBmKGMpLGEuY2FsbGJhY2tOb2RlPW51bGwsYS5jYWxsYmFja1ByaW9yaXR5PTApO2Vsc2V7aWYobnVsbCE9PWMpe2lmKGEuY2FsbGJhY2tQcmlvcml0eT09PWIpcmV0dXJuO2MhPT1aZiYmUGYoYyl9MTU9PT1iPyhjPUxqLmJpbmQobnVsbCxhKSxudWxsPT09YWc/KGFnPVtjXSxiZz1PZihVZixqZykpOmFnLnB1c2goYyksXG5jPVpmKToxND09PWI/Yz1oZyg5OSxMai5iaW5kKG51bGwsYSkpOihjPVRjKGIpLGM9aGcoYyxOai5iaW5kKG51bGwsYSkpKTthLmNhbGxiYWNrUHJpb3JpdHk9YjthLmNhbGxiYWNrTm9kZT1jfX1cbmZ1bmN0aW9uIE5qKGEpe0ZqPS0xO0hqPUdqPTA7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMyNykpO3ZhciBiPWEuY2FsbGJhY2tOb2RlO2lmKE9qKCkmJmEuY2FsbGJhY2tOb2RlIT09YilyZXR1cm4gbnVsbDt2YXIgYz1VYyhhLGE9PT1VP1c6MCk7aWYoMD09PWMpcmV0dXJuIG51bGw7dmFyIGQ9Yzt2YXIgZT1YO1h8PTE2O3ZhciBmPVBqKCk7aWYoVSE9PWF8fFchPT1kKXdqKCksUWooYSxkKTtkbyB0cnl7UmooKTticmVha31jYXRjaChoKXtTaihhLGgpfXdoaWxlKDEpO3FnKCk7b2ouY3VycmVudD1mO1g9ZTtudWxsIT09WT9kPTA6KFU9bnVsbCxXPTAsZD1WKTtpZigwIT09KHRqJkhpKSlRaihhLDApO2Vsc2UgaWYoMCE9PWQpezI9PT1kJiYoWHw9NjQsYS5oeWRyYXRlJiYoYS5oeWRyYXRlPSExLHFmKGEuY29udGFpbmVySW5mbykpLGM9V2MoYSksMCE9PWMmJihkPVRqKGEsYykpKTtpZigxPT09ZCl0aHJvdyBiPXNqLFFqKGEsMCksSWkoYSxjKSxNaihhLE8oKSksYjthLmZpbmlzaGVkV29yaz1cbmEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZExhbmVzPWM7c3dpdGNoKGQpe2Nhc2UgMDpjYXNlIDE6dGhyb3cgRXJyb3IoeSgzNDUpKTtjYXNlIDI6VWooYSk7YnJlYWs7Y2FzZSAzOklpKGEsYyk7aWYoKGMmNjI5MTQ1NjApPT09YyYmKGQ9amorNTAwLU8oKSwxMDxkKSl7aWYoMCE9PVVjKGEsMCkpYnJlYWs7ZT1hLnN1c3BlbmRlZExhbmVzO2lmKChlJmMpIT09Yyl7SGcoKTthLnBpbmdlZExhbmVzfD1hLnN1c3BlbmRlZExhbmVzJmU7YnJlYWt9YS50aW1lb3V0SGFuZGxlPW9mKFVqLmJpbmQobnVsbCxhKSxkKTticmVha31VaihhKTticmVhaztjYXNlIDQ6SWkoYSxjKTtpZigoYyY0MTg2MTEyKT09PWMpYnJlYWs7ZD1hLmV2ZW50VGltZXM7Zm9yKGU9LTE7MDxjOyl7dmFyIGc9MzEtVmMoYyk7Zj0xPDxnO2c9ZFtnXTtnPmUmJihlPWcpO2MmPX5mfWM9ZTtjPU8oKS1jO2M9KDEyMD5jPzEyMDo0ODA+Yz80ODA6MTA4MD5jPzEwODA6MTkyMD5jPzE5MjA6M0UzPmM/M0UzOjQzMjA+XG5jPzQzMjA6MTk2MCpuaihjLzE5NjApKS1jO2lmKDEwPGMpe2EudGltZW91dEhhbmRsZT1vZihVai5iaW5kKG51bGwsYSksYyk7YnJlYWt9VWooYSk7YnJlYWs7Y2FzZSA1OlVqKGEpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzMjkpKTt9fU1qKGEsTygpKTtyZXR1cm4gYS5jYWxsYmFja05vZGU9PT1iP05qLmJpbmQobnVsbCxhKTpudWxsfWZ1bmN0aW9uIElpKGEsYil7YiY9fnVqO2ImPX5IaTthLnN1c3BlbmRlZExhbmVzfD1iO2EucGluZ2VkTGFuZXMmPX5iO2ZvcihhPWEuZXhwaXJhdGlvblRpbWVzOzA8Yjspe3ZhciBjPTMxLVZjKGIpLGQ9MTw8YzthW2NdPS0xO2ImPX5kfX1cbmZ1bmN0aW9uIExqKGEpe2lmKDAhPT0oWCY0OCkpdGhyb3cgRXJyb3IoeSgzMjcpKTtPaigpO2lmKGE9PT1VJiYwIT09KGEuZXhwaXJlZExhbmVzJlcpKXt2YXIgYj1XO3ZhciBjPVRqKGEsYik7MCE9PSh0aiZIaSkmJihiPVVjKGEsYiksYz1UaihhLGIpKX1lbHNlIGI9VWMoYSwwKSxjPVRqKGEsYik7MCE9PWEudGFnJiYyPT09YyYmKFh8PTY0LGEuaHlkcmF0ZSYmKGEuaHlkcmF0ZT0hMSxxZihhLmNvbnRhaW5lckluZm8pKSxiPVdjKGEpLDAhPT1iJiYoYz1UaihhLGIpKSk7aWYoMT09PWMpdGhyb3cgYz1zaixRaihhLDApLElpKGEsYiksTWooYSxPKCkpLGM7YS5maW5pc2hlZFdvcms9YS5jdXJyZW50LmFsdGVybmF0ZTthLmZpbmlzaGVkTGFuZXM9YjtVaihhKTtNaihhLE8oKSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBWaigpe2lmKG51bGwhPT1Dail7dmFyIGE9Q2o7Q2o9bnVsbDthLmZvckVhY2goZnVuY3Rpb24oYSl7YS5leHBpcmVkTGFuZXN8PTI0JmEucGVuZGluZ0xhbmVzO01qKGEsTygpKX0pfWlnKCl9ZnVuY3Rpb24gV2ooYSxiKXt2YXIgYz1YO1h8PTE7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7WD1jLDA9PT1YJiYod2ooKSxpZygpKX19ZnVuY3Rpb24gWGooYSxiKXt2YXIgYz1YO1gmPS0yO1h8PTg7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7WD1jLDA9PT1YJiYod2ooKSxpZygpKX19ZnVuY3Rpb24gbmkoYSxiKXtJKHJqLHFqKTtxanw9Yjt0anw9Yn1mdW5jdGlvbiBLaSgpe3FqPXJqLmN1cnJlbnQ7SChyail9XG5mdW5jdGlvbiBRaihhLGIpe2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7dmFyIGM9YS50aW1lb3V0SGFuZGxlOy0xIT09YyYmKGEudGltZW91dEhhbmRsZT0tMSxwZihjKSk7aWYobnVsbCE9PVkpZm9yKGM9WS5yZXR1cm47bnVsbCE9PWM7KXt2YXIgZD1jO3N3aXRjaChkLnRhZyl7Y2FzZSAxOmQ9ZC50eXBlLmNoaWxkQ29udGV4dFR5cGVzO251bGwhPT1kJiZ2b2lkIDAhPT1kJiZHZigpO2JyZWFrO2Nhc2UgMzpmaCgpO0goTik7SChNKTt1aCgpO2JyZWFrO2Nhc2UgNTpoaChkKTticmVhaztjYXNlIDQ6ZmgoKTticmVhaztjYXNlIDEzOkgoUCk7YnJlYWs7Y2FzZSAxOTpIKFApO2JyZWFrO2Nhc2UgMTA6cmcoZCk7YnJlYWs7Y2FzZSAyMzpjYXNlIDI0OktpKCl9Yz1jLnJldHVybn1VPWE7WT1UZyhhLmN1cnJlbnQsbnVsbCk7Vz1xaj10aj1iO1Y9MDtzaj1udWxsO3VqPUhpPURnPTB9XG5mdW5jdGlvbiBTaihhLGIpe2Rve3ZhciBjPVk7dHJ5e3FnKCk7dmguY3VycmVudD1HaDtpZih5aCl7Zm9yKHZhciBkPVIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZDspe3ZhciBlPWQucXVldWU7bnVsbCE9PWUmJihlLnBlbmRpbmc9bnVsbCk7ZD1kLm5leHR9eWg9ITF9eGg9MDtUPVM9Uj1udWxsO3poPSExO3BqLmN1cnJlbnQ9bnVsbDtpZihudWxsPT09Y3x8bnVsbD09PWMucmV0dXJuKXtWPTE7c2o9YjtZPW51bGw7YnJlYWt9YTp7dmFyIGY9YSxnPWMucmV0dXJuLGg9YyxrPWI7Yj1XO2guZmxhZ3N8PTIwNDg7aC5maXJzdEVmZmVjdD1oLmxhc3RFZmZlY3Q9bnVsbDtpZihudWxsIT09ayYmXCJvYmplY3RcIj09PXR5cGVvZiBrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2Ygay50aGVuKXt2YXIgbD1rO2lmKDA9PT0oaC5tb2RlJjIpKXt2YXIgbj1oLmFsdGVybmF0ZTtuPyhoLnVwZGF0ZVF1ZXVlPW4udXBkYXRlUXVldWUsaC5tZW1vaXplZFN0YXRlPW4ubWVtb2l6ZWRTdGF0ZSxoLmxhbmVzPW4ubGFuZXMpOlxuKGgudXBkYXRlUXVldWU9bnVsbCxoLm1lbW9pemVkU3RhdGU9bnVsbCl9dmFyIEE9MCE9PShQLmN1cnJlbnQmMSkscD1nO2Rve3ZhciBDO2lmKEM9MTM9PT1wLnRhZyl7dmFyIHg9cC5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT14KUM9bnVsbCE9PXguZGVoeWRyYXRlZD8hMDohMTtlbHNle3ZhciB3PXAubWVtb2l6ZWRQcm9wcztDPXZvaWQgMD09PXcuZmFsbGJhY2s/ITE6ITAhPT13LnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrPyEwOkE/ITE6ITB9fWlmKEMpe3ZhciB6PXAudXBkYXRlUXVldWU7aWYobnVsbD09PXope3ZhciB1PW5ldyBTZXQ7dS5hZGQobCk7cC51cGRhdGVRdWV1ZT11fWVsc2Ugei5hZGQobCk7aWYoMD09PShwLm1vZGUmMikpe3AuZmxhZ3N8PTY0O2guZmxhZ3N8PTE2Mzg0O2guZmxhZ3MmPS0yOTgxO2lmKDE9PT1oLnRhZylpZihudWxsPT09aC5hbHRlcm5hdGUpaC50YWc9MTc7ZWxzZXt2YXIgdD16ZygtMSwxKTt0LnRhZz0yO0FnKGgsdCl9aC5sYW5lc3w9MTticmVhayBhfWs9XG52b2lkIDA7aD1iO3ZhciBxPWYucGluZ0NhY2hlO251bGw9PT1xPyhxPWYucGluZ0NhY2hlPW5ldyBPaSxrPW5ldyBTZXQscS5zZXQobCxrKSk6KGs9cS5nZXQobCksdm9pZCAwPT09ayYmKGs9bmV3IFNldCxxLnNldChsLGspKSk7aWYoIWsuaGFzKGgpKXtrLmFkZChoKTt2YXIgdj1Zai5iaW5kKG51bGwsZixsLGgpO2wudGhlbih2LHYpfXAuZmxhZ3N8PTQwOTY7cC5sYW5lcz1iO2JyZWFrIGF9cD1wLnJldHVybn13aGlsZShudWxsIT09cCk7az1FcnJvcigoUmEoaC50eXBlKXx8XCJBIFJlYWN0IGNvbXBvbmVudFwiKStcIiBzdXNwZW5kZWQgd2hpbGUgcmVuZGVyaW5nLCBidXQgbm8gZmFsbGJhY2sgVUkgd2FzIHNwZWNpZmllZC5cXG5cXG5BZGQgYSA8U3VzcGVuc2UgZmFsbGJhY2s9Li4uPiBjb21wb25lbnQgaGlnaGVyIGluIHRoZSB0cmVlIHRvIHByb3ZpZGUgYSBsb2FkaW5nIGluZGljYXRvciBvciBwbGFjZWhvbGRlciB0byBkaXNwbGF5LlwiKX01IT09ViYmKFY9Mik7az1NaShrLGgpO3A9XG5nO2Rve3N3aXRjaChwLnRhZyl7Y2FzZSAzOmY9aztwLmZsYWdzfD00MDk2O2ImPS1iO3AubGFuZXN8PWI7dmFyIEo9UGkocCxmLGIpO0JnKHAsSik7YnJlYWsgYTtjYXNlIDE6Zj1rO3ZhciBLPXAudHlwZSxRPXAuc3RhdGVOb2RlO2lmKDA9PT0ocC5mbGFncyY2NCkmJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgSy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fG51bGwhPT1RJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgUS5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1UaXx8IVRpLmhhcyhRKSkpKXtwLmZsYWdzfD00MDk2O2ImPS1iO3AubGFuZXN8PWI7dmFyIEw9U2kocCxmLGIpO0JnKHAsTCk7YnJlYWsgYX19cD1wLnJldHVybn13aGlsZShudWxsIT09cCl9WmooYyl9Y2F0Y2godmEpe2I9dmE7WT09PWMmJm51bGwhPT1jJiYoWT1jPWMucmV0dXJuKTtjb250aW51ZX1icmVha313aGlsZSgxKX1cbmZ1bmN0aW9uIFBqKCl7dmFyIGE9b2ouY3VycmVudDtvai5jdXJyZW50PUdoO3JldHVybiBudWxsPT09YT9HaDphfWZ1bmN0aW9uIFRqKGEsYil7dmFyIGM9WDtYfD0xNjt2YXIgZD1QaigpO1U9PT1hJiZXPT09Ynx8UWooYSxiKTtkbyB0cnl7YWsoKTticmVha31jYXRjaChlKXtTaihhLGUpfXdoaWxlKDEpO3FnKCk7WD1jO29qLmN1cnJlbnQ9ZDtpZihudWxsIT09WSl0aHJvdyBFcnJvcih5KDI2MSkpO1U9bnVsbDtXPTA7cmV0dXJuIFZ9ZnVuY3Rpb24gYWsoKXtmb3IoO251bGwhPT1ZOyliayhZKX1mdW5jdGlvbiBSaigpe2Zvcig7bnVsbCE9PVkmJiFRZigpOyliayhZKX1mdW5jdGlvbiBiayhhKXt2YXIgYj1jayhhLmFsdGVybmF0ZSxhLHFqKTthLm1lbW9pemVkUHJvcHM9YS5wZW5kaW5nUHJvcHM7bnVsbD09PWI/WmooYSk6WT1iO3BqLmN1cnJlbnQ9bnVsbH1cbmZ1bmN0aW9uIFpqKGEpe3ZhciBiPWE7ZG97dmFyIGM9Yi5hbHRlcm5hdGU7YT1iLnJldHVybjtpZigwPT09KGIuZmxhZ3MmMjA0OCkpe2M9R2koYyxiLHFqKTtpZihudWxsIT09Yyl7WT1jO3JldHVybn1jPWI7aWYoMjQhPT1jLnRhZyYmMjMhPT1jLnRhZ3x8bnVsbD09PWMubWVtb2l6ZWRTdGF0ZXx8MCE9PShxaiYxMDczNzQxODI0KXx8MD09PShjLm1vZGUmNCkpe2Zvcih2YXIgZD0wLGU9Yy5jaGlsZDtudWxsIT09ZTspZHw9ZS5sYW5lc3xlLmNoaWxkTGFuZXMsZT1lLnNpYmxpbmc7Yy5jaGlsZExhbmVzPWR9bnVsbCE9PWEmJjA9PT0oYS5mbGFncyYyMDQ4KSYmKG51bGw9PT1hLmZpcnN0RWZmZWN0JiYoYS5maXJzdEVmZmVjdD1iLmZpcnN0RWZmZWN0KSxudWxsIT09Yi5sYXN0RWZmZWN0JiYobnVsbCE9PWEubGFzdEVmZmVjdCYmKGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWIuZmlyc3RFZmZlY3QpLGEubGFzdEVmZmVjdD1iLmxhc3RFZmZlY3QpLDE8Yi5mbGFncyYmKG51bGwhPT1cbmEubGFzdEVmZmVjdD9hLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1iOmEuZmlyc3RFZmZlY3Q9YixhLmxhc3RFZmZlY3Q9YikpfWVsc2V7Yz1MaShiKTtpZihudWxsIT09Yyl7Yy5mbGFncyY9MjA0NztZPWM7cmV0dXJufW51bGwhPT1hJiYoYS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9bnVsbCxhLmZsYWdzfD0yMDQ4KX1iPWIuc2libGluZztpZihudWxsIT09Yil7WT1iO3JldHVybn1ZPWI9YX13aGlsZShudWxsIT09Yik7MD09PVYmJihWPTUpfWZ1bmN0aW9uIFVqKGEpe3ZhciBiPWVnKCk7Z2coOTksZGsuYmluZChudWxsLGEsYikpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gZGsoYSxiKXtkbyBPaigpO3doaWxlKG51bGwhPT15aik7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMyNykpO3ZhciBjPWEuZmluaXNoZWRXb3JrO2lmKG51bGw9PT1jKXJldHVybiBudWxsO2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7aWYoYz09PWEuY3VycmVudCl0aHJvdyBFcnJvcih5KDE3NykpO2EuY2FsbGJhY2tOb2RlPW51bGw7dmFyIGQ9Yy5sYW5lc3xjLmNoaWxkTGFuZXMsZT1kLGY9YS5wZW5kaW5nTGFuZXMmfmU7YS5wZW5kaW5nTGFuZXM9ZTthLnN1c3BlbmRlZExhbmVzPTA7YS5waW5nZWRMYW5lcz0wO2EuZXhwaXJlZExhbmVzJj1lO2EubXV0YWJsZVJlYWRMYW5lcyY9ZTthLmVudGFuZ2xlZExhbmVzJj1lO2U9YS5lbnRhbmdsZW1lbnRzO2Zvcih2YXIgZz1hLmV2ZW50VGltZXMsaD1hLmV4cGlyYXRpb25UaW1lczswPGY7KXt2YXIgaz0zMS1WYyhmKSxsPTE8PGs7ZVtrXT0wO2dba109LTE7aFtrXT0tMTtmJj1+bH1udWxsIT09XG5DaiYmMD09PShkJjI0KSYmQ2ouaGFzKGEpJiZDai5kZWxldGUoYSk7YT09PVUmJihZPVU9bnVsbCxXPTApOzE8Yy5mbGFncz9udWxsIT09Yy5sYXN0RWZmZWN0PyhjLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGQ9Yy5maXJzdEVmZmVjdCk6ZD1jOmQ9Yy5maXJzdEVmZmVjdDtpZihudWxsIT09ZCl7ZT1YO1h8PTMyO3BqLmN1cnJlbnQ9bnVsbDtrZj1mZDtnPU5lKCk7aWYoT2UoZykpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGcpaD17c3RhcnQ6Zy5zZWxlY3Rpb25TdGFydCxlbmQ6Zy5zZWxlY3Rpb25FbmR9O2Vsc2UgYTppZihoPShoPWcub3duZXJEb2N1bWVudCkmJmguZGVmYXVsdFZpZXd8fHdpbmRvdywobD1oLmdldFNlbGVjdGlvbiYmaC5nZXRTZWxlY3Rpb24oKSkmJjAhPT1sLnJhbmdlQ291bnQpe2g9bC5hbmNob3JOb2RlO2Y9bC5hbmNob3JPZmZzZXQ7az1sLmZvY3VzTm9kZTtsPWwuZm9jdXNPZmZzZXQ7dHJ5e2gubm9kZVR5cGUsay5ub2RlVHlwZX1jYXRjaCh2YSl7aD1udWxsO1xuYnJlYWsgYX12YXIgbj0wLEE9LTEscD0tMSxDPTAseD0wLHc9Zyx6PW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgdTs7KXt3IT09aHx8MCE9PWYmJjMhPT13Lm5vZGVUeXBlfHwoQT1uK2YpO3chPT1rfHwwIT09bCYmMyE9PXcubm9kZVR5cGV8fChwPW4rbCk7Mz09PXcubm9kZVR5cGUmJihuKz13Lm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0odT13LmZpcnN0Q2hpbGQpKWJyZWFrO3o9dzt3PXV9Zm9yKDs7KXtpZih3PT09ZylicmVhayBiO3o9PT1oJiYrK0M9PT1mJiYoQT1uKTt6PT09ayYmKyt4PT09bCYmKHA9bik7aWYobnVsbCE9PSh1PXcubmV4dFNpYmxpbmcpKWJyZWFrO3c9ejt6PXcucGFyZW50Tm9kZX13PXV9aD0tMT09PUF8fC0xPT09cD9udWxsOntzdGFydDpBLGVuZDpwfX1lbHNlIGg9bnVsbDtoPWh8fHtzdGFydDowLGVuZDowfX1lbHNlIGg9bnVsbDtsZj17Zm9jdXNlZEVsZW06ZyxzZWxlY3Rpb25SYW5nZTpofTtmZD0hMTtJaj1udWxsO0pqPSExO1o9ZDtkbyB0cnl7ZWsoKX1jYXRjaCh2YSl7aWYobnVsbD09PVxuWil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKFosdmEpO1o9Wi5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1aKTtJaj1udWxsO1o9ZDtkbyB0cnl7Zm9yKGc9YTtudWxsIT09Wjspe3ZhciB0PVouZmxhZ3M7dCYxNiYmcGIoWi5zdGF0ZU5vZGUsXCJcIik7aWYodCYxMjgpe3ZhciBxPVouYWx0ZXJuYXRlO2lmKG51bGwhPT1xKXt2YXIgdj1xLnJlZjtudWxsIT09diYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiB2P3YobnVsbCk6di5jdXJyZW50PW51bGwpfX1zd2l0Y2godCYxMDM4KXtjYXNlIDI6ZmooWik7Wi5mbGFncyY9LTM7YnJlYWs7Y2FzZSA2OmZqKFopO1ouZmxhZ3MmPS0zO2lqKFouYWx0ZXJuYXRlLFopO2JyZWFrO2Nhc2UgMTAyNDpaLmZsYWdzJj0tMTAyNTticmVhaztjYXNlIDEwMjg6Wi5mbGFncyY9LTEwMjU7aWooWi5hbHRlcm5hdGUsWik7YnJlYWs7Y2FzZSA0OmlqKFouYWx0ZXJuYXRlLFopO2JyZWFrO2Nhc2UgODpoPVo7Y2ooZyxoKTt2YXIgSj1oLmFsdGVybmF0ZTtkaihoKTtudWxsIT09XG5KJiZkaihKKX1aPVoubmV4dEVmZmVjdH19Y2F0Y2godmEpe2lmKG51bGw9PT1aKXRocm93IEVycm9yKHkoMzMwKSk7V2koWix2YSk7Wj1aLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVopO3Y9bGY7cT1OZSgpO3Q9di5mb2N1c2VkRWxlbTtnPXYuc2VsZWN0aW9uUmFuZ2U7aWYocSE9PXQmJnQmJnQub3duZXJEb2N1bWVudCYmTWUodC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCx0KSl7bnVsbCE9PWcmJk9lKHQpJiYocT1nLnN0YXJ0LHY9Zy5lbmQsdm9pZCAwPT09diYmKHY9cSksXCJzZWxlY3Rpb25TdGFydFwiaW4gdD8odC5zZWxlY3Rpb25TdGFydD1xLHQuc2VsZWN0aW9uRW5kPU1hdGgubWluKHYsdC52YWx1ZS5sZW5ndGgpKToodj0ocT10Lm93bmVyRG9jdW1lbnR8fGRvY3VtZW50KSYmcS5kZWZhdWx0Vmlld3x8d2luZG93LHYuZ2V0U2VsZWN0aW9uJiYodj12LmdldFNlbGVjdGlvbigpLGg9dC50ZXh0Q29udGVudC5sZW5ndGgsSj1NYXRoLm1pbihnLnN0YXJ0LGgpLGc9dm9pZCAwPT09XG5nLmVuZD9KOk1hdGgubWluKGcuZW5kLGgpLCF2LmV4dGVuZCYmSj5nJiYoaD1nLGc9SixKPWgpLGg9TGUodCxKKSxmPUxlKHQsZyksaCYmZiYmKDEhPT12LnJhbmdlQ291bnR8fHYuYW5jaG9yTm9kZSE9PWgubm9kZXx8di5hbmNob3JPZmZzZXQhPT1oLm9mZnNldHx8di5mb2N1c05vZGUhPT1mLm5vZGV8fHYuZm9jdXNPZmZzZXQhPT1mLm9mZnNldCkmJihxPXEuY3JlYXRlUmFuZ2UoKSxxLnNldFN0YXJ0KGgubm9kZSxoLm9mZnNldCksdi5yZW1vdmVBbGxSYW5nZXMoKSxKPmc/KHYuYWRkUmFuZ2UocSksdi5leHRlbmQoZi5ub2RlLGYub2Zmc2V0KSk6KHEuc2V0RW5kKGYubm9kZSxmLm9mZnNldCksdi5hZGRSYW5nZShxKSkpKSkpO3E9W107Zm9yKHY9dDt2PXYucGFyZW50Tm9kZTspMT09PXYubm9kZVR5cGUmJnEucHVzaCh7ZWxlbWVudDp2LGxlZnQ6di5zY3JvbGxMZWZ0LHRvcDp2LnNjcm9sbFRvcH0pO1wiZnVuY3Rpb25cIj09PXR5cGVvZiB0LmZvY3VzJiZ0LmZvY3VzKCk7Zm9yKHQ9XG4wO3Q8cS5sZW5ndGg7dCsrKXY9cVt0XSx2LmVsZW1lbnQuc2Nyb2xsTGVmdD12LmxlZnQsdi5lbGVtZW50LnNjcm9sbFRvcD12LnRvcH1mZD0hIWtmO2xmPWtmPW51bGw7YS5jdXJyZW50PWM7Wj1kO2RvIHRyeXtmb3IodD1hO251bGwhPT1aOyl7dmFyIEs9Wi5mbGFncztLJjM2JiZZaSh0LFouYWx0ZXJuYXRlLFopO2lmKEsmMTI4KXtxPXZvaWQgMDt2YXIgUT1aLnJlZjtpZihudWxsIT09USl7dmFyIEw9Wi5zdGF0ZU5vZGU7c3dpdGNoKFoudGFnKXtjYXNlIDU6cT1MO2JyZWFrO2RlZmF1bHQ6cT1MfVwiZnVuY3Rpb25cIj09PXR5cGVvZiBRP1EocSk6US5jdXJyZW50PXF9fVo9Wi5uZXh0RWZmZWN0fX1jYXRjaCh2YSl7aWYobnVsbD09PVopdGhyb3cgRXJyb3IoeSgzMzApKTtXaShaLHZhKTtaPVoubmV4dEVmZmVjdH13aGlsZShudWxsIT09Wik7Wj1udWxsOyRmKCk7WD1lfWVsc2UgYS5jdXJyZW50PWM7aWYoeGopeGo9ITEseWo9YSx6aj1iO2Vsc2UgZm9yKFo9ZDtudWxsIT09WjspYj1cbloubmV4dEVmZmVjdCxaLm5leHRFZmZlY3Q9bnVsbCxaLmZsYWdzJjgmJihLPVosSy5zaWJsaW5nPW51bGwsSy5zdGF0ZU5vZGU9bnVsbCksWj1iO2Q9YS5wZW5kaW5nTGFuZXM7MD09PWQmJihUaT1udWxsKTsxPT09ZD9hPT09RWo/RGorKzooRGo9MCxFaj1hKTpEaj0wO2M9Yy5zdGF0ZU5vZGU7aWYoTWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBNZi5vbkNvbW1pdEZpYmVyUm9vdCl0cnl7TWYub25Db21taXRGaWJlclJvb3QoTGYsYyx2b2lkIDAsNjQ9PT0oYy5jdXJyZW50LmZsYWdzJjY0KSl9Y2F0Y2godmEpe31NaihhLE8oKSk7aWYoUWkpdGhyb3cgUWk9ITEsYT1SaSxSaT1udWxsLGE7aWYoMCE9PShYJjgpKXJldHVybiBudWxsO2lnKCk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBlaygpe2Zvcig7bnVsbCE9PVo7KXt2YXIgYT1aLmFsdGVybmF0ZTtKanx8bnVsbD09PUlqfHwoMCE9PShaLmZsYWdzJjgpP2RjKFosSWopJiYoSmo9ITApOjEzPT09Wi50YWcmJm1qKGEsWikmJmRjKFosSWopJiYoSmo9ITApKTt2YXIgYj1aLmZsYWdzOzAhPT0oYiYyNTYpJiZYaShhLFopOzA9PT0oYiY1MTIpfHx4anx8KHhqPSEwLGhnKDk3LGZ1bmN0aW9uKCl7T2ooKTtyZXR1cm4gbnVsbH0pKTtaPVoubmV4dEVmZmVjdH19ZnVuY3Rpb24gT2ooKXtpZig5MCE9PXpqKXt2YXIgYT05Nzx6aj85Nzp6ajt6aj05MDtyZXR1cm4gZ2coYSxmayl9cmV0dXJuITF9ZnVuY3Rpb24gJGkoYSxiKXtBai5wdXNoKGIsYSk7eGp8fCh4aj0hMCxoZyg5NyxmdW5jdGlvbigpe09qKCk7cmV0dXJuIG51bGx9KSl9ZnVuY3Rpb24gWmkoYSxiKXtCai5wdXNoKGIsYSk7eGp8fCh4aj0hMCxoZyg5NyxmdW5jdGlvbigpe09qKCk7cmV0dXJuIG51bGx9KSl9XG5mdW5jdGlvbiBmaygpe2lmKG51bGw9PT15ailyZXR1cm4hMTt2YXIgYT15ajt5aj1udWxsO2lmKDAhPT0oWCY0OCkpdGhyb3cgRXJyb3IoeSgzMzEpKTt2YXIgYj1YO1h8PTMyO3ZhciBjPUJqO0JqPVtdO2Zvcih2YXIgZD0wO2Q8Yy5sZW5ndGg7ZCs9Mil7dmFyIGU9Y1tkXSxmPWNbZCsxXSxnPWUuZGVzdHJveTtlLmRlc3Ryb3k9dm9pZCAwO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnKXRyeXtnKCl9Y2F0Y2goayl7aWYobnVsbD09PWYpdGhyb3cgRXJyb3IoeSgzMzApKTtXaShmLGspfX1jPUFqO0FqPVtdO2ZvcihkPTA7ZDxjLmxlbmd0aDtkKz0yKXtlPWNbZF07Zj1jW2QrMV07dHJ5e3ZhciBoPWUuY3JlYXRlO2UuZGVzdHJveT1oKCl9Y2F0Y2goayl7aWYobnVsbD09PWYpdGhyb3cgRXJyb3IoeSgzMzApKTtXaShmLGspfX1mb3IoaD1hLmN1cnJlbnQuZmlyc3RFZmZlY3Q7bnVsbCE9PWg7KWE9aC5uZXh0RWZmZWN0LGgubmV4dEVmZmVjdD1udWxsLGguZmxhZ3MmOCYmKGguc2libGluZz1cbm51bGwsaC5zdGF0ZU5vZGU9bnVsbCksaD1hO1g9YjtpZygpO3JldHVybiEwfWZ1bmN0aW9uIGdrKGEsYixjKXtiPU1pKGMsYik7Yj1QaShhLGIsMSk7QWcoYSxiKTtiPUhnKCk7YT1LaihhLDEpO251bGwhPT1hJiYoJGMoYSwxLGIpLE1qKGEsYikpfVxuZnVuY3Rpb24gV2koYSxiKXtpZigzPT09YS50YWcpZ2soYSxhLGIpO2Vsc2UgZm9yKHZhciBjPWEucmV0dXJuO251bGwhPT1jOyl7aWYoMz09PWMudGFnKXtnayhjLGEsYik7YnJlYWt9ZWxzZSBpZigxPT09Yy50YWcpe3ZhciBkPWMuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1UaXx8IVRpLmhhcyhkKSkpe2E9TWkoYixhKTt2YXIgZT1TaShjLGEsMSk7QWcoYyxlKTtlPUhnKCk7Yz1LaihjLDEpO2lmKG51bGwhPT1jKSRjKGMsMSxlKSxNaihjLGUpO2Vsc2UgaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09VGl8fCFUaS5oYXMoZCkpKXRyeXtkLmNvbXBvbmVudERpZENhdGNoKGIsYSl9Y2F0Y2goZil7fWJyZWFrfX1jPWMucmV0dXJufX1cbmZ1bmN0aW9uIFlqKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtudWxsIT09ZCYmZC5kZWxldGUoYik7Yj1IZygpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmYztVPT09YSYmKFcmYyk9PT1jJiYoND09PVZ8fDM9PT1WJiYoVyY2MjkxNDU2MCk9PT1XJiY1MDA+TygpLWpqP1FqKGEsMCk6dWp8PWMpO01qKGEsYil9ZnVuY3Rpb24gbGooYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtudWxsIT09YyYmYy5kZWxldGUoYik7Yj0wOzA9PT1iJiYoYj1hLm1vZGUsMD09PShiJjIpP2I9MTowPT09KGImNCk/Yj05OT09PWVnKCk/MToyOigwPT09R2omJihHaj10aiksYj1ZYyg2MjkxNDU2MCZ+R2opLDA9PT1iJiYoYj00MTk0MzA0KSkpO2M9SGcoKTthPUtqKGEsYik7bnVsbCE9PWEmJigkYyhhLGIsYyksTWooYSxjKSl9dmFyIGNrO1xuY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWIubGFuZXM7aWYobnVsbCE9PWEpaWYoYS5tZW1vaXplZFByb3BzIT09Yi5wZW5kaW5nUHJvcHN8fE4uY3VycmVudCl1Zz0hMDtlbHNlIGlmKDAhPT0oYyZkKSl1Zz0wIT09KGEuZmxhZ3MmMTYzODQpPyEwOiExO2Vsc2V7dWc9ITE7c3dpdGNoKGIudGFnKXtjYXNlIDM6cmkoYik7c2goKTticmVhaztjYXNlIDU6Z2goYik7YnJlYWs7Y2FzZSAxOkZmKGIudHlwZSkmJkpmKGIpO2JyZWFrO2Nhc2UgNDplaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2JyZWFrO2Nhc2UgMTA6ZD1iLm1lbW9pemVkUHJvcHMudmFsdWU7dmFyIGU9Yi50eXBlLl9jb250ZXh0O0kobWcsZS5fY3VycmVudFZhbHVlKTtlLl9jdXJyZW50VmFsdWU9ZDticmVhaztjYXNlIDEzOmlmKG51bGwhPT1iLm1lbW9pemVkU3RhdGUpe2lmKDAhPT0oYyZiLmNoaWxkLmNoaWxkTGFuZXMpKXJldHVybiB0aShhLGIsYyk7SShQLFAuY3VycmVudCYxKTtiPWhpKGEsYixjKTtyZXR1cm4gbnVsbCE9PVxuYj9iLnNpYmxpbmc6bnVsbH1JKFAsUC5jdXJyZW50JjEpO2JyZWFrO2Nhc2UgMTk6ZD0wIT09KGMmYi5jaGlsZExhbmVzKTtpZigwIT09KGEuZmxhZ3MmNjQpKXtpZihkKXJldHVybiBBaShhLGIsYyk7Yi5mbGFnc3w9NjR9ZT1iLm1lbW9pemVkU3RhdGU7bnVsbCE9PWUmJihlLnJlbmRlcmluZz1udWxsLGUudGFpbD1udWxsLGUubGFzdEVmZmVjdD1udWxsKTtJKFAsUC5jdXJyZW50KTtpZihkKWJyZWFrO2Vsc2UgcmV0dXJuIG51bGw7Y2FzZSAyMzpjYXNlIDI0OnJldHVybiBiLmxhbmVzPTAsbWkoYSxiLGMpfXJldHVybiBoaShhLGIsYyl9ZWxzZSB1Zz0hMTtiLmxhbmVzPTA7c3dpdGNoKGIudGFnKXtjYXNlIDI6ZD1iLnR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9Mik7YT1iLnBlbmRpbmdQcm9wcztlPUVmKGIsTS5jdXJyZW50KTt0ZyhiLGMpO2U9Q2gobnVsbCxiLGQsYSxlLGMpO2IuZmxhZ3N8PTE7aWYoXCJvYmplY3RcIj09PVxudHlwZW9mIGUmJm51bGwhPT1lJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5yZW5kZXImJnZvaWQgMD09PWUuJCR0eXBlb2Ype2IudGFnPTE7Yi5tZW1vaXplZFN0YXRlPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2lmKEZmKGQpKXt2YXIgZj0hMDtKZihiKX1lbHNlIGY9ITE7Yi5tZW1vaXplZFN0YXRlPW51bGwhPT1lLnN0YXRlJiZ2b2lkIDAhPT1lLnN0YXRlP2Uuc3RhdGU6bnVsbDt4ZyhiKTt2YXIgZz1kLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYmR2coYixkLGcsYSk7ZS51cGRhdGVyPUtnO2Iuc3RhdGVOb2RlPWU7ZS5fcmVhY3RJbnRlcm5hbHM9YjtPZyhiLGQsYSxjKTtiPXFpKG51bGwsYixkLCEwLGYsYyl9ZWxzZSBiLnRhZz0wLGZpKG51bGwsYixlLGMpLGI9Yi5jaGlsZDtyZXR1cm4gYjtjYXNlIDE2OmU9Yi5lbGVtZW50VHlwZTthOntudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKTtcbmE9Yi5wZW5kaW5nUHJvcHM7Zj1lLl9pbml0O2U9ZihlLl9wYXlsb2FkKTtiLnR5cGU9ZTtmPWIudGFnPWhrKGUpO2E9bGcoZSxhKTtzd2l0Y2goZil7Y2FzZSAwOmI9bGkobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTpiPXBpKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDExOmI9Z2kobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTQ6Yj1paShudWxsLGIsZSxsZyhlLnR5cGUsYSksZCxjKTticmVhayBhfXRocm93IEVycm9yKHkoMzA2LGUsXCJcIikpO31yZXR1cm4gYjtjYXNlIDA6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmxnKGQsZSksbGkoYSxiLGQsZSxjKTtjYXNlIDE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmxnKGQsZSkscGkoYSxiLGQsZSxjKTtjYXNlIDM6cmkoYik7ZD1iLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT1hfHxudWxsPT09ZCl0aHJvdyBFcnJvcih5KDI4MikpO1xuZD1iLnBlbmRpbmdQcm9wcztlPWIubWVtb2l6ZWRTdGF0ZTtlPW51bGwhPT1lP2UuZWxlbWVudDpudWxsO3lnKGEsYik7Q2coYixkLG51bGwsYyk7ZD1iLm1lbW9pemVkU3RhdGUuZWxlbWVudDtpZihkPT09ZSlzaCgpLGI9aGkoYSxiLGMpO2Vsc2V7ZT1iLnN0YXRlTm9kZTtpZihmPWUuaHlkcmF0ZSlraD1yZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLmZpcnN0Q2hpbGQpLGpoPWIsZj1saD0hMDtpZihmKXthPWUubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YTtpZihudWxsIT1hKWZvcihlPTA7ZTxhLmxlbmd0aDtlKz0yKWY9YVtlXSxmLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5PWFbZSsxXSx0aC5wdXNoKGYpO2M9WmcoYixudWxsLGQsYyk7Zm9yKGIuY2hpbGQ9YztjOyljLmZsYWdzPWMuZmxhZ3MmLTN8MTAyNCxjPWMuc2libGluZ31lbHNlIGZpKGEsYixkLGMpLHNoKCk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gZ2goYiksbnVsbD09PWEmJlxucGgoYiksZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpudWxsLGc9ZS5jaGlsZHJlbixuZihkLGUpP2c9bnVsbDpudWxsIT09ZiYmbmYoZCxmKSYmKGIuZmxhZ3N8PTE2KSxvaShhLGIpLGZpKGEsYixnLGMpLGIuY2hpbGQ7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmcGgoYiksbnVsbDtjYXNlIDEzOnJldHVybiB0aShhLGIsYyk7Y2FzZSA0OnJldHVybiBlaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGQ9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWE/Yi5jaGlsZD1ZZyhiLG51bGwsZCxjKTpmaShhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmxnKGQsZSksZ2koYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIGZpKGEsYixiLnBlbmRpbmdQcm9wcyxjKSxiLmNoaWxkO2Nhc2UgODpyZXR1cm4gZmkoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLFxuYyksYi5jaGlsZDtjYXNlIDEyOnJldHVybiBmaShhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEwOmE6e2Q9Yi50eXBlLl9jb250ZXh0O2U9Yi5wZW5kaW5nUHJvcHM7Zz1iLm1lbW9pemVkUHJvcHM7Zj1lLnZhbHVlO3ZhciBoPWIudHlwZS5fY29udGV4dDtJKG1nLGguX2N1cnJlbnRWYWx1ZSk7aC5fY3VycmVudFZhbHVlPWY7aWYobnVsbCE9PWcpaWYoaD1nLnZhbHVlLGY9SGUoaCxmKT8wOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM/ZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHMoaCxmKToxMDczNzQxODIzKXwwLDA9PT1mKXtpZihnLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIU4uY3VycmVudCl7Yj1oaShhLGIsYyk7YnJlYWsgYX19ZWxzZSBmb3IoaD1iLmNoaWxkLG51bGwhPT1oJiYoaC5yZXR1cm49Yik7bnVsbCE9PWg7KXt2YXIgaz1oLmRlcGVuZGVuY2llcztpZihudWxsIT09ayl7Zz1oLmNoaWxkO2Zvcih2YXIgbD1cbmsuZmlyc3RDb250ZXh0O251bGwhPT1sOyl7aWYobC5jb250ZXh0PT09ZCYmMCE9PShsLm9ic2VydmVkQml0cyZmKSl7MT09PWgudGFnJiYobD16ZygtMSxjJi1jKSxsLnRhZz0yLEFnKGgsbCkpO2gubGFuZXN8PWM7bD1oLmFsdGVybmF0ZTtudWxsIT09bCYmKGwubGFuZXN8PWMpO3NnKGgucmV0dXJuLGMpO2subGFuZXN8PWM7YnJlYWt9bD1sLm5leHR9fWVsc2UgZz0xMD09PWgudGFnP2gudHlwZT09PWIudHlwZT9udWxsOmguY2hpbGQ6aC5jaGlsZDtpZihudWxsIT09ZylnLnJldHVybj1oO2Vsc2UgZm9yKGc9aDtudWxsIT09Zzspe2lmKGc9PT1iKXtnPW51bGw7YnJlYWt9aD1nLnNpYmxpbmc7aWYobnVsbCE9PWgpe2gucmV0dXJuPWcucmV0dXJuO2c9aDticmVha31nPWcucmV0dXJufWg9Z31maShhLGIsZS5jaGlsZHJlbixjKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA5OnJldHVybiBlPWIudHlwZSxmPWIucGVuZGluZ1Byb3BzLGQ9Zi5jaGlsZHJlbix0ZyhiLGMpLGU9dmcoZSxcbmYudW5zdGFibGVfb2JzZXJ2ZWRCaXRzKSxkPWQoZSksYi5mbGFnc3w9MSxmaShhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTQ6cmV0dXJuIGU9Yi50eXBlLGY9bGcoZSxiLnBlbmRpbmdQcm9wcyksZj1sZyhlLnR5cGUsZiksaWkoYSxiLGUsZixkLGMpO2Nhc2UgMTU6cmV0dXJuIGtpKGEsYixiLnR5cGUsYi5wZW5kaW5nUHJvcHMsZCxjKTtjYXNlIDE3OnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpsZyhkLGUpLG51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpLGIudGFnPTEsRmYoZCk/KGE9ITAsSmYoYikpOmE9ITEsdGcoYixjKSxNZyhiLGQsZSksT2coYixkLGUsYykscWkobnVsbCxiLGQsITAsYSxjKTtjYXNlIDE5OnJldHVybiBBaShhLGIsYyk7Y2FzZSAyMzpyZXR1cm4gbWkoYSxiLGMpO2Nhc2UgMjQ6cmV0dXJuIG1pKGEsYixjKX10aHJvdyBFcnJvcih5KDE1NixiLnRhZykpO1xufTtmdW5jdGlvbiBpayhhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpcy5yZXR1cm49dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPXRoaXMuZWxlbWVudFR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMuZGVwZW5kZW5jaWVzPXRoaXMubWVtb2l6ZWRTdGF0ZT10aGlzLnVwZGF0ZVF1ZXVlPXRoaXMubWVtb2l6ZWRQcm9wcz1udWxsO3RoaXMubW9kZT1kO3RoaXMuZmxhZ3M9MDt0aGlzLmxhc3RFZmZlY3Q9dGhpcy5maXJzdEVmZmVjdD10aGlzLm5leHRFZmZlY3Q9bnVsbDt0aGlzLmNoaWxkTGFuZXM9dGhpcy5sYW5lcz0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9ZnVuY3Rpb24gbmgoYSxiLGMsZCl7cmV0dXJuIG5ldyBpayhhLGIsYyxkKX1mdW5jdGlvbiBqaShhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfVxuZnVuY3Rpb24gaGsoYSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGppKGEpPzE6MDtpZih2b2lkIDAhPT1hJiZudWxsIT09YSl7YT1hLiQkdHlwZW9mO2lmKGE9PT1BYSlyZXR1cm4gMTE7aWYoYT09PURhKXJldHVybiAxNH1yZXR1cm4gMn1cbmZ1bmN0aW9uIFRnKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbD09PWM/KGM9bmgoYS50YWcsYixhLmtleSxhLm1vZGUpLGMuZWxlbWVudFR5cGU9YS5lbGVtZW50VHlwZSxjLnR5cGU9YS50eXBlLGMuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGMuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9Yyk6KGMucGVuZGluZ1Byb3BzPWIsYy50eXBlPWEudHlwZSxjLmZsYWdzPTAsYy5uZXh0RWZmZWN0PW51bGwsYy5maXJzdEVmZmVjdD1udWxsLGMubGFzdEVmZmVjdD1udWxsKTtjLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzO2MubGFuZXM9YS5sYW5lcztjLmNoaWxkPWEuY2hpbGQ7Yy5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztjLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2MudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtiPWEuZGVwZW5kZW5jaWVzO2MuZGVwZW5kZW5jaWVzPW51bGw9PT1iP251bGw6e2xhbmVzOmIubGFuZXMsZmlyc3RDb250ZXh0OmIuZmlyc3RDb250ZXh0fTtcbmMuc2libGluZz1hLnNpYmxpbmc7Yy5pbmRleD1hLmluZGV4O2MucmVmPWEucmVmO3JldHVybiBjfVxuZnVuY3Rpb24gVmcoYSxiLGMsZCxlLGYpe3ZhciBnPTI7ZD1hO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKWppKGEpJiYoZz0xKTtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlnPTU7ZWxzZSBhOnN3aXRjaChhKXtjYXNlIHVhOnJldHVybiBYZyhjLmNoaWxkcmVuLGUsZixiKTtjYXNlIEhhOmc9ODtlfD0xNjticmVhaztjYXNlIHdhOmc9ODtlfD0xO2JyZWFrO2Nhc2UgeGE6cmV0dXJuIGE9bmgoMTIsYyxiLGV8OCksYS5lbGVtZW50VHlwZT14YSxhLnR5cGU9eGEsYS5sYW5lcz1mLGE7Y2FzZSBCYTpyZXR1cm4gYT1uaCgxMyxjLGIsZSksYS50eXBlPUJhLGEuZWxlbWVudFR5cGU9QmEsYS5sYW5lcz1mLGE7Y2FzZSBDYTpyZXR1cm4gYT1uaCgxOSxjLGIsZSksYS5lbGVtZW50VHlwZT1DYSxhLmxhbmVzPWYsYTtjYXNlIElhOnJldHVybiB2aShjLGUsZixiKTtjYXNlIEphOnJldHVybiBhPW5oKDI0LGMsYixlKSxhLmVsZW1lbnRUeXBlPUphLGEubGFuZXM9ZixhO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PVxudHlwZW9mIGEmJm51bGwhPT1hKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHlhOmc9MTA7YnJlYWsgYTtjYXNlIHphOmc9OTticmVhayBhO2Nhc2UgQWE6Zz0xMTticmVhayBhO2Nhc2UgRGE6Zz0xNDticmVhayBhO2Nhc2UgRWE6Zz0xNjtkPW51bGw7YnJlYWsgYTtjYXNlIEZhOmc9MjI7YnJlYWsgYX10aHJvdyBFcnJvcih5KDEzMCxudWxsPT1hP2E6dHlwZW9mIGEsXCJcIikpO31iPW5oKGcsYyxiLGUpO2IuZWxlbWVudFR5cGU9YTtiLnR5cGU9ZDtiLmxhbmVzPWY7cmV0dXJuIGJ9ZnVuY3Rpb24gWGcoYSxiLGMsZCl7YT1uaCg3LGEsZCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9ZnVuY3Rpb24gdmkoYSxiLGMsZCl7YT1uaCgyMyxhLGQsYik7YS5lbGVtZW50VHlwZT1JYTthLmxhbmVzPWM7cmV0dXJuIGF9ZnVuY3Rpb24gVWcoYSxiLGMpe2E9bmgoNixhLG51bGwsYik7YS5sYW5lcz1jO3JldHVybiBhfVxuZnVuY3Rpb24gV2coYSxiLGMpe2I9bmgoNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IubGFuZXM9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9XG5mdW5jdGlvbiBqayhhLGIsYyl7dGhpcy50YWc9Yjt0aGlzLmNvbnRhaW5lckluZm89YTt0aGlzLmZpbmlzaGVkV29yaz10aGlzLnBpbmdDYWNoZT10aGlzLmN1cnJlbnQ9dGhpcy5wZW5kaW5nQ2hpbGRyZW49bnVsbDt0aGlzLnRpbWVvdXRIYW5kbGU9LTE7dGhpcy5wZW5kaW5nQ29udGV4dD10aGlzLmNvbnRleHQ9bnVsbDt0aGlzLmh5ZHJhdGU9Yzt0aGlzLmNhbGxiYWNrTm9kZT1udWxsO3RoaXMuY2FsbGJhY2tQcmlvcml0eT0wO3RoaXMuZXZlbnRUaW1lcz1aYygwKTt0aGlzLmV4cGlyYXRpb25UaW1lcz1aYygtMSk7dGhpcy5lbnRhbmdsZWRMYW5lcz10aGlzLmZpbmlzaGVkTGFuZXM9dGhpcy5tdXRhYmxlUmVhZExhbmVzPXRoaXMuZXhwaXJlZExhbmVzPXRoaXMucGluZ2VkTGFuZXM9dGhpcy5zdXNwZW5kZWRMYW5lcz10aGlzLnBlbmRpbmdMYW5lcz0wO3RoaXMuZW50YW5nbGVtZW50cz1aYygwKTt0aGlzLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE9bnVsbH1cbmZ1bmN0aW9uIGtrKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6dGEsa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319XG5mdW5jdGlvbiBsayhhLGIsYyxkKXt2YXIgZT1iLmN1cnJlbnQsZj1IZygpLGc9SWcoZSk7YTppZihjKXtjPWMuX3JlYWN0SW50ZXJuYWxzO2I6e2lmKFpiKGMpIT09Y3x8MSE9PWMudGFnKXRocm93IEVycm9yKHkoMTcwKSk7dmFyIGg9Yztkb3tzd2l0Y2goaC50YWcpe2Nhc2UgMzpoPWguc3RhdGVOb2RlLmNvbnRleHQ7YnJlYWsgYjtjYXNlIDE6aWYoRmYoaC50eXBlKSl7aD1oLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBifX1oPWgucmV0dXJufXdoaWxlKG51bGwhPT1oKTt0aHJvdyBFcnJvcih5KDE3MSkpO31pZigxPT09Yy50YWcpe3ZhciBrPWMudHlwZTtpZihGZihrKSl7Yz1JZihjLGssaCk7YnJlYWsgYX19Yz1ofWVsc2UgYz1DZjtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPXpnKGYsZyk7Yi5wYXlsb2FkPXtlbGVtZW50OmF9O2Q9dm9pZCAwPT09ZD9udWxsOmQ7bnVsbCE9PVxuZCYmKGIuY2FsbGJhY2s9ZCk7QWcoZSxiKTtKZyhlLGcsZik7cmV0dXJuIGd9ZnVuY3Rpb24gbWsoYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX1mdW5jdGlvbiBuayhhLGIpe2E9YS5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiZudWxsIT09YS5kZWh5ZHJhdGVkKXt2YXIgYz1hLnJldHJ5TGFuZTthLnJldHJ5TGFuZT0wIT09YyYmYzxiP2M6Yn19ZnVuY3Rpb24gb2soYSxiKXtuayhhLGIpOyhhPWEuYWx0ZXJuYXRlKSYmbmsoYSxiKX1mdW5jdGlvbiBwaygpe3JldHVybiBudWxsfVxuZnVuY3Rpb24gcWsoYSxiLGMpe3ZhciBkPW51bGwhPWMmJm51bGwhPWMuaHlkcmF0aW9uT3B0aW9ucyYmYy5oeWRyYXRpb25PcHRpb25zLm11dGFibGVTb3VyY2VzfHxudWxsO2M9bmV3IGprKGEsYixudWxsIT1jJiYhMD09PWMuaHlkcmF0ZSk7Yj1uaCgzLG51bGwsbnVsbCwyPT09Yj83OjE9PT1iPzM6MCk7Yy5jdXJyZW50PWI7Yi5zdGF0ZU5vZGU9Yzt4ZyhiKTthW2ZmXT1jLmN1cnJlbnQ7Y2YoOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmEpO2lmKGQpZm9yKGE9MDthPGQubGVuZ3RoO2ErKyl7Yj1kW2FdO3ZhciBlPWIuX2dldFZlcnNpb247ZT1lKGIuX3NvdXJjZSk7bnVsbD09Yy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhP2MubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1bYixlXTpjLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEucHVzaChiLGUpfXRoaXMuX2ludGVybmFsUm9vdD1jfVxucWsucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXtsayhhLHRoaXMuX2ludGVybmFsUm9vdCxudWxsLG51bGwpfTtxay5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX2ludGVybmFsUm9vdCxiPWEuY29udGFpbmVySW5mbztsayhudWxsLGEsbnVsbCxmdW5jdGlvbigpe2JbZmZdPW51bGx9KX07ZnVuY3Rpb24gcmsoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfVxuZnVuY3Rpb24gc2soYSxiKXtifHwoYj1hPzk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEuZmlyc3RDaGlsZDpudWxsLGI9ISghYnx8MSE9PWIubm9kZVR5cGV8fCFiLmhhc0F0dHJpYnV0ZShcImRhdGEtcmVhY3Ryb290XCIpKSk7aWYoIWIpZm9yKHZhciBjO2M9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYyk7cmV0dXJuIG5ldyBxayhhLDAsYj97aHlkcmF0ZTohMH06dm9pZCAwKX1cbmZ1bmN0aW9uIHRrKGEsYixjLGQsZSl7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe3ZhciBnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9bWsoZyk7aC5jYWxsKGEpfX1sayhiLGcsYSxlKX1lbHNle2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPXNrKGMsZCk7Zz1mLl9pbnRlcm5hbFJvb3Q7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBrPWU7ZT1mdW5jdGlvbigpe3ZhciBhPW1rKGcpO2suY2FsbChhKX19WGooZnVuY3Rpb24oKXtsayhiLGcsYSxlKX0pfXJldHVybiBtayhnKX1lYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1IZygpO0pnKGEsNCxiKTtvayhhLDQpfX07ZmM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9SGcoKTtKZyhhLDY3MTA4ODY0LGIpO29rKGEsNjcxMDg4NjQpfX07XG5nYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1IZygpLGM9SWcoYSk7SmcoYSxjLGIpO29rKGEsYyl9fTtoYz1mdW5jdGlvbihhLGIpe3JldHVybiBiKCl9O1xueWI9ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjphYihhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGU9XCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9RGIoZCk7aWYoIWUpdGhyb3cgRXJyb3IoeSg5MCkpO1dhKGQpO2FiKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjppYihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmZmIoYSwhIWMubXVsdGlwbGUsYiwhMSl9fTtHYj1XajtcbkhiPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9WDtYfD00O3RyeXtyZXR1cm4gZ2coOTgsYS5iaW5kKG51bGwsYixjLGQsZSkpfWZpbmFsbHl7WD1mLDA9PT1YJiYod2ooKSxpZygpKX19O0liPWZ1bmN0aW9uKCl7MD09PShYJjQ5KSYmKFZqKCksT2ooKSl9O0piPWZ1bmN0aW9uKGEsYil7dmFyIGM9WDtYfD0yO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1g9YywwPT09WCYmKHdqKCksaWcoKSl9fTtmdW5jdGlvbiB1ayhhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO2lmKCFyayhiKSl0aHJvdyBFcnJvcih5KDIwMCkpO3JldHVybiBrayhhLGIsbnVsbCxjKX12YXIgdms9e0V2ZW50czpbQ2IsdWUsRGIsRWIsRmIsT2ose2N1cnJlbnQ6ITF9XX0sd2s9e2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOndjLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTcuMC4xXCIscmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifTtcbnZhciB4az17YnVuZGxlVHlwZTp3ay5idW5kbGVUeXBlLHZlcnNpb246d2sudmVyc2lvbixyZW5kZXJlclBhY2thZ2VOYW1lOndrLnJlbmRlcmVyUGFja2FnZU5hbWUscmVuZGVyZXJDb25maWc6d2sucmVuZGVyZXJDb25maWcsb3ZlcnJpZGVIb29rU3RhdGU6bnVsbCxvdmVycmlkZUhvb2tTdGF0ZURlbGV0ZVBhdGg6bnVsbCxvdmVycmlkZUhvb2tTdGF0ZVJlbmFtZVBhdGg6bnVsbCxvdmVycmlkZVByb3BzOm51bGwsb3ZlcnJpZGVQcm9wc0RlbGV0ZVBhdGg6bnVsbCxvdmVycmlkZVByb3BzUmVuYW1lUGF0aDpudWxsLHNldFN1c3BlbnNlSGFuZGxlcjpudWxsLHNjaGVkdWxlVXBkYXRlOm51bGwsY3VycmVudERpc3BhdGNoZXJSZWY6cmEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXthPWNjKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTp3ay5maW5kRmliZXJCeUhvc3RJbnN0YW5jZXx8XG5wayxmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2g6bnVsbCxzY2hlZHVsZVJlZnJlc2g6bnVsbCxzY2hlZHVsZVJvb3Q6bnVsbCxzZXRSZWZyZXNoSGFuZGxlcjpudWxsLGdldEN1cnJlbnRGaWJlcjpudWxsfTtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyl7dmFyIHlrPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZigheWsuaXNEaXNhYmxlZCYmeWsuc3VwcG9ydHNGaWJlcil0cnl7TGY9eWsuaW5qZWN0KHhrKSxNZj15a31jYXRjaChhKXt9fWV4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9dms7ZXhwb3J0cy5jcmVhdGVQb3J0YWw9dWs7XG5leHBvcnRzLmZpbmRET01Ob2RlPWZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbHM7aWYodm9pZCAwPT09Yil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEucmVuZGVyKXRocm93IEVycm9yKHkoMTg4KSk7dGhyb3cgRXJyb3IoeSgyNjgsT2JqZWN0LmtleXMoYSkpKTt9YT1jYyhiKTthPW51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGU7cmV0dXJuIGF9O2V4cG9ydHMuZmx1c2hTeW5jPWZ1bmN0aW9uKGEsYil7dmFyIGM9WDtpZigwIT09KGMmNDgpKXJldHVybiBhKGIpO1h8PTE7dHJ5e2lmKGEpcmV0dXJuIGdnKDk5LGEuYmluZChudWxsLGIpKX1maW5hbGx5e1g9YyxpZygpfX07ZXhwb3J0cy5oeWRyYXRlPWZ1bmN0aW9uKGEsYixjKXtpZighcmsoYikpdGhyb3cgRXJyb3IoeSgyMDApKTtyZXR1cm4gdGsobnVsbCxhLGIsITAsYyl9O1xuZXhwb3J0cy5yZW5kZXI9ZnVuY3Rpb24oYSxiLGMpe2lmKCFyayhiKSl0aHJvdyBFcnJvcih5KDIwMCkpO3JldHVybiB0ayhudWxsLGEsYiwhMSxjKX07ZXhwb3J0cy51bm1vdW50Q29tcG9uZW50QXROb2RlPWZ1bmN0aW9uKGEpe2lmKCFyayhhKSl0aHJvdyBFcnJvcih5KDQwKSk7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oWGooZnVuY3Rpb24oKXt0ayhudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsO2FbZmZdPW51bGx9KX0pLCEwKTohMX07ZXhwb3J0cy51bnN0YWJsZV9iYXRjaGVkVXBkYXRlcz1XajtleHBvcnRzLnVuc3RhYmxlX2NyZWF0ZVBvcnRhbD1mdW5jdGlvbihhLGIpe3JldHVybiB1ayhhLGIsMjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGwpfTtcbmV4cG9ydHMudW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMsZCl7aWYoIXJrKGMpKXRocm93IEVycm9yKHkoMjAwKSk7aWYobnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbHMpdGhyb3cgRXJyb3IoeSgzOCkpO3JldHVybiB0ayhhLGIsYywhMSxkKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTcuMC4xXCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYwLjIwLjFcbiAqIHNjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGYsZyxoLGs7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBwZXJmb3JtYW5jZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHBlcmZvcm1hbmNlLm5vdyl7dmFyIGw9cGVyZm9ybWFuY2U7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gbC5ub3coKX19ZWxzZXt2YXIgcD1EYXRlLHE9cC5ub3coKTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBwLm5vdygpLXF9fVxuaWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBNZXNzYWdlQ2hhbm5lbCl7dmFyIHQ9bnVsbCx1PW51bGwsdz1mdW5jdGlvbigpe2lmKG51bGwhPT10KXRyeXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO3QoITAsYSk7dD1udWxsfWNhdGNoKGIpe3Rocm93IHNldFRpbWVvdXQodywwKSxiO319O2Y9ZnVuY3Rpb24oYSl7bnVsbCE9PXQ/c2V0VGltZW91dChmLDAsYSk6KHQ9YSxzZXRUaW1lb3V0KHcsMCkpfTtnPWZ1bmN0aW9uKGEsYil7dT1zZXRUaW1lb3V0KGEsYil9O2g9ZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQodSl9O2V4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9ZnVuY3Rpb24oKXtyZXR1cm4hMX07az1leHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKCl7fX1lbHNle3ZhciB4PXdpbmRvdy5zZXRUaW1lb3V0LHk9d2luZG93LmNsZWFyVGltZW91dDtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIGNvbnNvbGUpe3ZhciB6PVxud2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lJiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9yZWFjdC1wb2x5ZmlsbHNcIik7XCJmdW5jdGlvblwiIT09dHlwZW9mIHomJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IGNhbmNlbEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL3JlYWN0anMub3JnL2xpbmsvcmVhY3QtcG9seWZpbGxzXCIpfXZhciBBPSExLEI9bnVsbCxDPS0xLEQ9NSxFPTA7ZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1mdW5jdGlvbigpe3JldHVybiBleHBvcnRzLnVuc3RhYmxlX25vdygpPj1cbkV9O2s9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oYSl7MD5hfHwxMjU8YT9jb25zb2xlLmVycm9yKFwiZm9yY2VGcmFtZVJhdGUgdGFrZXMgYSBwb3NpdGl2ZSBpbnQgYmV0d2VlbiAwIGFuZCAxMjUsIGZvcmNpbmcgZnJhbWUgcmF0ZXMgaGlnaGVyIHRoYW4gMTI1IGZwcyBpcyBub3Qgc3VwcG9ydGVkXCIpOkQ9MDxhP01hdGguZmxvb3IoMUUzL2EpOjV9O3ZhciBGPW5ldyBNZXNzYWdlQ2hhbm5lbCxHPUYucG9ydDI7Ri5wb3J0MS5vbm1lc3NhZ2U9ZnVuY3Rpb24oKXtpZihudWxsIT09Qil7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtFPWErRDt0cnl7QighMCxhKT9HLnBvc3RNZXNzYWdlKG51bGwpOihBPSExLEI9bnVsbCl9Y2F0Y2goYil7dGhyb3cgRy5wb3N0TWVzc2FnZShudWxsKSxiO319ZWxzZSBBPSExfTtmPWZ1bmN0aW9uKGEpe0I9YTtBfHwoQT0hMCxHLnBvc3RNZXNzYWdlKG51bGwpKX07Zz1mdW5jdGlvbihhLGIpe0M9XG54KGZ1bmN0aW9uKCl7YShleHBvcnRzLnVuc3RhYmxlX25vdygpKX0sYil9O2g9ZnVuY3Rpb24oKXt5KEMpO0M9LTF9fWZ1bmN0aW9uIEgoYSxiKXt2YXIgYz1hLmxlbmd0aDthLnB1c2goYik7YTpmb3IoOzspe3ZhciBkPWMtMT4+PjEsZT1hW2RdO2lmKHZvaWQgMCE9PWUmJjA8SShlLGIpKWFbZF09YixhW2NdPWUsYz1kO2Vsc2UgYnJlYWsgYX19ZnVuY3Rpb24gSihhKXthPWFbMF07cmV0dXJuIHZvaWQgMD09PWE/bnVsbDphfVxuZnVuY3Rpb24gSyhhKXt2YXIgYj1hWzBdO2lmKHZvaWQgMCE9PWIpe3ZhciBjPWEucG9wKCk7aWYoYyE9PWIpe2FbMF09YzthOmZvcih2YXIgZD0wLGU9YS5sZW5ndGg7ZDxlOyl7dmFyIG09MiooZCsxKS0xLG49YVttXSx2PW0rMSxyPWFbdl07aWYodm9pZCAwIT09biYmMD5JKG4sYykpdm9pZCAwIT09ciYmMD5JKHIsbik/KGFbZF09cixhW3ZdPWMsZD12KTooYVtkXT1uLGFbbV09YyxkPW0pO2Vsc2UgaWYodm9pZCAwIT09ciYmMD5JKHIsYykpYVtkXT1yLGFbdl09YyxkPXY7ZWxzZSBicmVhayBhfX1yZXR1cm4gYn1yZXR1cm4gbnVsbH1mdW5jdGlvbiBJKGEsYil7dmFyIGM9YS5zb3J0SW5kZXgtYi5zb3J0SW5kZXg7cmV0dXJuIDAhPT1jP2M6YS5pZC1iLmlkfXZhciBMPVtdLE09W10sTj0xLE89bnVsbCxQPTMsUT0hMSxSPSExLFM9ITE7XG5mdW5jdGlvbiBUKGEpe2Zvcih2YXIgYj1KKE0pO251bGwhPT1iOyl7aWYobnVsbD09PWIuY2FsbGJhY2spSyhNKTtlbHNlIGlmKGIuc3RhcnRUaW1lPD1hKUsoTSksYi5zb3J0SW5kZXg9Yi5leHBpcmF0aW9uVGltZSxIKEwsYik7ZWxzZSBicmVhaztiPUooTSl9fWZ1bmN0aW9uIFUoYSl7Uz0hMTtUKGEpO2lmKCFSKWlmKG51bGwhPT1KKEwpKVI9ITAsZihWKTtlbHNle3ZhciBiPUooTSk7bnVsbCE9PWImJmcoVSxiLnN0YXJ0VGltZS1hKX19XG5mdW5jdGlvbiBWKGEsYil7Uj0hMTtTJiYoUz0hMSxoKCkpO1E9ITA7dmFyIGM9UDt0cnl7VChiKTtmb3IoTz1KKEwpO251bGwhPT1PJiYoIShPLmV4cGlyYXRpb25UaW1lPmIpfHxhJiYhZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZCgpKTspe3ZhciBkPU8uY2FsbGJhY2s7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe08uY2FsbGJhY2s9bnVsbDtQPU8ucHJpb3JpdHlMZXZlbDt2YXIgZT1kKE8uZXhwaXJhdGlvblRpbWU8PWIpO2I9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZT9PLmNhbGxiYWNrPWU6Tz09PUooTCkmJksoTCk7VChiKX1lbHNlIEsoTCk7Tz1KKEwpfWlmKG51bGwhPT1PKXZhciBtPSEwO2Vsc2V7dmFyIG49SihNKTtudWxsIT09biYmZyhVLG4uc3RhcnRUaW1lLWIpO209ITF9cmV0dXJuIG19ZmluYWxseXtPPW51bGwsUD1jLFE9ITF9fXZhciBXPWs7ZXhwb3J0cy51bnN0YWJsZV9JZGxlUHJpb3JpdHk9NTtcbmV4cG9ydHMudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHk9MTtleHBvcnRzLnVuc3RhYmxlX0xvd1ByaW9yaXR5PTQ7ZXhwb3J0cy51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eT0zO2V4cG9ydHMudW5zdGFibGVfUHJvZmlsaW5nPW51bGw7ZXhwb3J0cy51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eT0yO2V4cG9ydHMudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7YS5jYWxsYmFjaz1udWxsfTtleHBvcnRzLnVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7Unx8UXx8KFI9ITAsZihWKSl9O2V4cG9ydHMudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWw9ZnVuY3Rpb24oKXtyZXR1cm4gUH07ZXhwb3J0cy51bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZT1mdW5jdGlvbigpe3JldHVybiBKKEwpfTtcbmV4cG9ydHMudW5zdGFibGVfbmV4dD1mdW5jdGlvbihhKXtzd2l0Y2goUCl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6dmFyIGI9MzticmVhaztkZWZhdWx0OmI9UH12YXIgYz1QO1A9Yjt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e1A9Y319O2V4cG9ydHMudW5zdGFibGVfcGF1c2VFeGVjdXRpb249ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfcmVxdWVzdFBhaW50PVc7ZXhwb3J0cy51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHk9ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6Y2FzZSA0OmNhc2UgNTpicmVhaztkZWZhdWx0OmE9M312YXIgYz1QO1A9YTt0cnl7cmV0dXJuIGIoKX1maW5hbGx5e1A9Y319O1xuZXhwb3J0cy51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWM/KGM9Yy5kZWxheSxjPVwibnVtYmVyXCI9PT10eXBlb2YgYyYmMDxjP2QrYzpkKTpjPWQ7c3dpdGNoKGEpe2Nhc2UgMTp2YXIgZT0tMTticmVhaztjYXNlIDI6ZT0yNTA7YnJlYWs7Y2FzZSA1OmU9MTA3Mzc0MTgyMzticmVhaztjYXNlIDQ6ZT0xRTQ7YnJlYWs7ZGVmYXVsdDplPTVFM31lPWMrZTthPXtpZDpOKyssY2FsbGJhY2s6Yixwcmlvcml0eUxldmVsOmEsc3RhcnRUaW1lOmMsZXhwaXJhdGlvblRpbWU6ZSxzb3J0SW5kZXg6LTF9O2M+ZD8oYS5zb3J0SW5kZXg9YyxIKE0sYSksbnVsbD09PUooTCkmJmE9PT1KKE0pJiYoUz9oKCk6Uz0hMCxnKFUsYy1kKSkpOihhLnNvcnRJbmRleD1lLEgoTCxhKSxSfHxRfHwoUj0hMCxmKFYpKSk7cmV0dXJuIGF9O1xuZXhwb3J0cy51bnN0YWJsZV93cmFwQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7dmFyIGI9UDtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYz1QO1A9Yjt0cnl7cmV0dXJuIGEuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZpbmFsbHl7UD1jfX19O1xuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcmlnaW5hbE1vZHVsZSkge1xuXHRpZiAoIW9yaWdpbmFsTW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdHZhciBtb2R1bGUgPSBPYmplY3QuY3JlYXRlKG9yaWdpbmFsTW9kdWxlKTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJleHBvcnRzXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWVcblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoUmVhY3RJcy5pc0VsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQoKSB7fVxuZW1wdHlGdW5jdGlvbldpdGhSZXNldC5yZXNldFdhcm5pbmdDYWNoZSA9IGVtcHR5RnVuY3Rpb247XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB0aHJvdyBlcnI7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBlbGVtZW50VHlwZTogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltLFxuXG4gICAgY2hlY2tQcm9wVHlwZXM6IGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQsXG4gICAgcmVzZXRXYXJuaW5nQ2FjaGU6IGVtcHR5RnVuY3Rpb25cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEzLjFcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsYz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGU9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsZj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxnPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksaz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGw9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxtPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxuPWI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHA9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMscT1iP1xuU3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik6NjAxMjAscj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LHQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNix2PWI/U3ltYm9sLmZvcihcInJlYWN0LmJsb2NrXCIpOjYwMTIxLHc9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnVuZGFtZW50YWxcIik6NjAxMTcseD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5yZXNwb25kZXJcIik6NjAxMTgseT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTo2MDExOTtcbmZ1bmN0aW9uIHooYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHU9YS4kJHR5cGVvZjtzd2l0Y2godSl7Y2FzZSBjOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGw6Y2FzZSBtOmNhc2UgZTpjYXNlIGc6Y2FzZSBmOmNhc2UgcDpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBrOmNhc2UgbjpjYXNlIHQ6Y2FzZSByOmNhc2UgaDpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB1fX1jYXNlIGQ6cmV0dXJuIHV9fX1mdW5jdGlvbiBBKGEpe3JldHVybiB6KGEpPT09bX1leHBvcnRzLkFzeW5jTW9kZT1sO2V4cG9ydHMuQ29uY3VycmVudE1vZGU9bTtleHBvcnRzLkNvbnRleHRDb25zdW1lcj1rO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWg7ZXhwb3J0cy5FbGVtZW50PWM7ZXhwb3J0cy5Gb3J3YXJkUmVmPW47ZXhwb3J0cy5GcmFnbWVudD1lO2V4cG9ydHMuTGF6eT10O2V4cG9ydHMuTWVtbz1yO2V4cG9ydHMuUG9ydGFsPWQ7XG5leHBvcnRzLlByb2ZpbGVyPWc7ZXhwb3J0cy5TdHJpY3RNb2RlPWY7ZXhwb3J0cy5TdXNwZW5zZT1wO2V4cG9ydHMuaXNBc3luY01vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIEEoYSl8fHooYSk9PT1sfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9QTtleHBvcnRzLmlzQ29udGV4dENvbnN1bWVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09a307ZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWh9O2V4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWV9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09dH07XG5leHBvcnRzLmlzTWVtbz1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXJ9O2V4cG9ydHMuaXNQb3J0YWw9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1kfTtleHBvcnRzLmlzUHJvZmlsZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1nfTtleHBvcnRzLmlzU3RyaWN0TW9kZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWZ9O2V4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXB9O1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYXx8YT09PWV8fGE9PT1tfHxhPT09Z3x8YT09PWZ8fGE9PT1wfHxhPT09cXx8XCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT10fHxhLiQkdHlwZW9mPT09cnx8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1rfHxhLiQkdHlwZW9mPT09bnx8YS4kJHR5cGVvZj09PXd8fGEuJCR0eXBlb2Y9PT14fHxhLiQkdHlwZW9mPT09eXx8YS4kJHR5cGVvZj09PXYpfTtleHBvcnRzLnR5cGVPZj16O1xuIiwiaW1wb3J0IHsgZ2V0RXh0ZW5zaW9uU3RhdGUgfSBmcm9tIFwiLi4vLi4vLi4vY29tbW9uL2V4dGVuc2lvblN0YXRlXCI7XHJcbmltcG9ydCB7IFZpZXdlckFjdGlvbiB9IGZyb20gXCIuL2FjdGlvbnNcIjtcclxuaW1wb3J0IHsgVmlld2VyU3RhdGUgfSBmcm9tIFwiLi9zdGF0ZVwiO1xyXG5cclxuY29uc3QgaW5pdGlhbFN0YXRlOiBWaWV3ZXJTdGF0ZSA9IHtcclxuICAuLi5nZXRFeHRlbnNpb25TdGF0ZSgpLFxyXG4gIGNvdW50ZXI6IDAsXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgcmVkdWNlciA9IChzdGF0ZTogVmlld2VyU3RhdGUgPSBpbml0aWFsU3RhdGUsIGFjdGlvbjogVmlld2VyQWN0aW9uKTogVmlld2VyU3RhdGUgPT4ge1xyXG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcclxuICAgIGNhc2UgXCJTRVRfVkVSVEVYX0ZJTEVfUEFUSFwiOiB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4uc3RhdGUsXHJcbiAgICAgICAgdmVydGV4RmlsZVBhdGg6IGFjdGlvbi5wYXlsb2FkLnBhdGgsXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgICBjYXNlIFwiU0VUX0ZSQUdNRU5UX0ZJTEVfUEFUSFwiOiB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4uc3RhdGUsXHJcbiAgICAgICAgZnJhZ21lbnRGaWxlUGF0aDogYWN0aW9uLnBheWxvYWQucGF0aCxcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIGNhc2UgXCJTRVRfVU5JRk9STVwiOiB7XHJcbiAgICAgIGNvbnN0IHsgbmFtZSwgLi4ucmVzdCB9ID0gYWN0aW9uLnBheWxvYWQ7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4uc3RhdGUsXHJcbiAgICAgICAgdW5pZm9ybVZhbHVlczogeyAuLi5zdGF0ZS51bmlmb3JtVmFsdWVzLCBbbmFtZV06IHJlc3QgfSxcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIGNhc2UgXCJTRVRfQVRUUklCVVRFX0JVRkZFUlwiOiB7XHJcbiAgICAgIGNvbnN0IHsgbmFtZSwgLi4ucmVzdCB9ID0gYWN0aW9uLnBheWxvYWQ7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4uc3RhdGUsXHJcbiAgICAgICAgYXR0cmlidXRlQnVmZmVyVmFsdWVzOiB7IC4uLnN0YXRlLmF0dHJpYnV0ZUJ1ZmZlclZhbHVlcywgW25hbWVdOiByZXN0IH0sXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgICBjYXNlIFwiU0VUX1RFWFRVUkVcIjoge1xyXG4gICAgICBjb25zdCB7IG5hbWUsIC4uLnJlc3QgfSA9IGFjdGlvbi5wYXlsb2FkO1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIC4uLnN0YXRlLFxyXG4gICAgICAgIHRleHR1cmVWYWx1ZXM6IHsgLi4uc3RhdGUudGV4dHVyZVZhbHVlcywgW25hbWVdOiByZXN0IH0sXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgICBjYXNlIFwiU0VUX0NBTUVSQV9QT1NJVElPTlwiOiB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4uc3RhdGUsXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgICBjYXNlIFwiVVBBRFRFX0NPVU5URVJcIjoge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIC4uLnN0YXRlLFxyXG4gICAgICAgIGNvdW50ZXI6IGFjdGlvbi5wYXlsb2FkLnZhbHVlLFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gICAgZGVmYXVsdDoge1xyXG4gICAgICByZXR1cm4gc3RhdGU7XHJcbiAgICB9XHJcbiAgfVxyXG59O1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcclxuaW1wb3J0IHsgdmlld2VyRW5kcG9pbnQgfSBmcm9tIFwiLi4vLi4vLi4vY29tbW9uL2NvbW11bmljYXRpb24vdmlld2VyRW5kcG9pbnRcIjtcclxuaW1wb3J0IHsgVmlld2VyU3RhdGUgfSBmcm9tIFwiLi4vc3RvcmUvc3RhdGVcIjtcclxuaW1wb3J0IHsgb2JzZXJ2ZUVsZW1lbnRCb3VuZGluZ1JlY3QgfSBmcm9tIFwiLi4vdXRpbHMvaHRtbFwiO1xyXG5pbXBvcnQge1xyXG4gIGNvbXBpbGVTaGFkZXJzRnJvbVNvdXJjZSxcclxuICBmb3JtYXRTaGFkZXJDb21waWxlRXJyb3JzLFxyXG4gIGdldFByb2dyYW1BdHRyaWJ1dGVCdWZmZXJzLFxyXG4gIGdldFByb2dyYW1Vbmlmb3JtcyxcclxuICByZW5kZXJQcm9ncmFtLFxyXG59IGZyb20gXCIuLi91dGlscy93ZWJnbFwiO1xyXG5pbXBvcnQgeyBnZXRGcm9tQ2FjaGVPckNyZWF0ZSB9IGZyb20gXCIuLi91dGlscy93ZWJnbC9hdHRyaWJ1dGVCdWZmZXJDb21wb25lbnRcIjtcclxuaW1wb3J0IHsgSW5kZXhCdWZmZXJJbmZvIH0gZnJvbSBcIi4uL3V0aWxzL3dlYmdsL2luZGV4QnVmZmVyXCI7XHJcbmltcG9ydCB7IFVuaWZvcm1UeXBlIH0gZnJvbSBcIi4uL3V0aWxzL3dlYmdsL3VuaWZvcm1cIjtcclxuaW1wb3J0IHsgQXR0cmlidXRlQnVmZmVyRmllbGRJbmZvLCBBdHRyaWJ1dGVCdWZmZXJTZWN0aW9uIH0gZnJvbSBcIi4vQXR0cmlidXRlQnVmZmVyU2VjdGlvblwiO1xyXG5pbXBvcnQgeyBEcmF3T3B0aW9uc1NlY3Rpb24gfSBmcm9tIFwiLi9EcmF3T3B0aW9uc1NlY3Rpb25cIjtcclxuaW1wb3J0IHsgU2hhZGVyc1NlbGVjdG9yU2VjdGlvbiB9IGZyb20gXCIuL1NoYWRlcnNTZWxlY3RvclNlY3Rpb25cIjtcclxuaW1wb3J0IHsgVGV4dHVyZUZpZWxkSW5mbywgVGV4dHVyZVNlY3Rpb24gfSBmcm9tIFwiLi9UZXh0dXJlc1NlY3Rpb25cIjtcclxuaW1wb3J0IHsgVW5pZm9ybVNlY3Rpb24gfSBmcm9tIFwiLi9Vbmlmb3Jtc1NlY3Rpb25cIjtcclxuaW1wb3J0IHsgU2hhZGVyc0NvbXBpbGVSZXN1bHRBcmVhIH0gZnJvbSBcIi4vU2hhZGVyc0NvbXBpbGVSZXN1bHRBcmVhXCI7XHJcbmltcG9ydCB7IENhbWVyYVBvc2l0aW9uTWFuaXB1bGF0b3IgfSBmcm9tIFwiLi4vdXRpbHMvY2FtZXJhTWFuaXB1bGF0b3JcIjtcclxuaW1wb3J0IHsgdXNlUGVyc3BlY3RpdmVDYW1lcmEgfSBmcm9tIFwiLi9ob29rcy91c2VQZXJzcGVjdGl2ZUNhbWVyYVwiO1xyXG5pbXBvcnQgeyBEaXNwYXRjaCB9IGZyb20gXCJyZWR1eFwiO1xyXG5pbXBvcnQgeyBWaWV3ZXJBY3Rpb24gfSBmcm9tIFwiLi4vc3RvcmUvYWN0aW9uc1wiO1xyXG5pbXBvcnQgeyBNYXRyaXg0QXJyYXkgfSBmcm9tIFwiLi4vdHlwZXNcIjtcclxuXHJcbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZTogVmlld2VyU3RhdGUpID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAgc2VsZWN0ZWRWZXJ0ZXhGaWxlSWQ6IHN0YXRlLnZlcnRleEZpbGVQYXRoLFxyXG4gICAgc2VsZWN0ZWRGcmFnbWVudEZpbGVJZDogc3RhdGUuZnJhZ21lbnRGaWxlUGF0aCxcclxuICB9O1xyXG59O1xyXG5cclxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gKGRpc3BhdGNoOiBEaXNwYXRjaDxWaWV3ZXJBY3Rpb24+KSA9PiB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHVwZGF0ZUNhbWVyYVBvc2l0aW9uOiAocG9zaXRpb246IE1hdHJpeDRBcnJheSkgPT5cclxuICAgICAgZGlzcGF0Y2goeyB0eXBlOiBcIlNFVF9DQU1FUkFfUE9TSVRJT05cIiwgcGF5bG9hZDogeyBwb3NpdGlvbiB9IH0pLFxyXG4gIH07XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgVmlld2VyID0gY29ubmVjdChcclxuICBtYXBTdGF0ZVRvUHJvcHMsXHJcbiAgbWFwRGlzcGF0Y2hUb1Byb3BzXHJcbikoXHJcbiAgKHByb3BzOiB7XHJcbiAgICBzZWxlY3RlZFZlcnRleEZpbGVJZDogc3RyaW5nO1xyXG4gICAgc2VsZWN0ZWRGcmFnbWVudEZpbGVJZDogc3RyaW5nO1xyXG4gICAgdXBkYXRlQ2FtZXJhUG9zaXRpb246IChwb3NpdGlvbjogTWF0cml4NEFycmF5KSA9PiB2b2lkO1xyXG4gIH0pID0+IHtcclxuICAgIGNvbnN0IHsgc2VsZWN0ZWRWZXJ0ZXhGaWxlSWQsIHNlbGVjdGVkRnJhZ21lbnRGaWxlSWQsIHVwZGF0ZUNhbWVyYVBvc2l0aW9uIH0gPSBwcm9wcztcclxuXHJcbiAgICBjb25zdCBbc2hhZGVyQ29tcGlsZUVycm9ycywgc2V0U2hhZGVyQ29tcGlsZUVycm9yc10gPSBSZWFjdC51c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IFtzZWxlY3RlZFZlcnRleEZpbGVUZXh0LCBzZXRTZWxlY3RlZFZlcnRleEZpbGVUZXh0XSA9IFJlYWN0LnVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW3NlbGVjdGVkRnJhZ21lbnRGaWxlVGV4dCwgc2V0U2VsZWN0ZWRGcmFnbWVudEZpbGVUZXh0XSA9IFJlYWN0LnVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW2F0dHJpYnV0ZUJ1ZmZlckZpZWxkc0luZm8sIHNldEF0dHJpYnV0ZUJ1ZmZlckZpZWxkc0luZm9dID0gUmVhY3QudXNlU3RhdGU8XHJcbiAgICAgIEF0dHJpYnV0ZUJ1ZmZlckZpZWxkSW5mb1tdXHJcbiAgICA+KFtdKTtcclxuICAgIGNvbnN0IFt1bmlmb3JtRmllbGRzSW5mbywgc2V0VW5pZm9ybUZpZWxkc0luZm9dID0gUmVhY3QudXNlU3RhdGU8XHJcbiAgICAgIHsgbmFtZTogc3RyaW5nOyB0eXBlOiBVbmlmb3JtVHlwZSB9W11cclxuICAgID4oW10pO1xyXG4gICAgY29uc3QgW3RleHR1cmVGaWVsZHNJbmZvLCBzZXRUZXh0dXJlRmllbGRzSW5mb10gPSBSZWFjdC51c2VTdGF0ZTxUZXh0dXJlRmllbGRJbmZvW10+KFtdKTtcclxuICAgIGNvbnN0IFt2aWV3ZXJTaXplLCBzZXRWaWV3ZXJTaXplXSA9IFJlYWN0LnVzZVN0YXRlKHsgd2lkdGg6IDAsIGhlaWdodDogMCB9KTtcclxuICAgIGNvbnN0IGNvbnRlbnRSZWYgPSBSZWFjdC51c2VSZWY8SFRNTERpdkVsZW1lbnQ+KG51bGwpO1xyXG4gICAgY29uc3QgY2FudmFzUmVmID0gUmVhY3QudXNlUmVmPEhUTUxDYW52YXNFbGVtZW50PihudWxsKTtcclxuICAgIGNvbnN0IGNvbnRleHRSZWYgPSBSZWFjdC51c2VSZWY8V2ViR0xSZW5kZXJpbmdDb250ZXh0PihudWxsKTtcclxuICAgIGNvbnN0IGluZGV4QnVmZmVySW5mb1JlZiA9IFJlYWN0LnVzZVJlZjxJbmRleEJ1ZmZlckluZm8+KG51bGwpO1xyXG4gICAgY29uc3QgYW5pbWF0aW9uRnJhbWVIYW5kbGVSZWYgPSBSZWFjdC51c2VSZWY8bnVtYmVyIHwgbnVsbD4obnVsbCk7XHJcblxyXG4gICAgLy9zdGFydHVwXHJcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICBjb250ZXh0UmVmLmN1cnJlbnQgPSBjYW52YXNSZWYuY3VycmVudC5nZXRDb250ZXh0KFwid2ViZ2xcIik7XHJcblxyXG4gICAgICBpZiAoIWNvbnRleHRSZWYuY3VycmVudCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuYWJsZSB0byBjcmVhdGUgd2ViZ2wgY29udGV4dFwiKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaW5kZXhCdWZmZXJJbmZvUmVmLmN1cnJlbnQgPSBuZXcgSW5kZXhCdWZmZXJJbmZvKGNvbnRleHRSZWYuY3VycmVudCk7XHJcblxyXG4gICAgICBvYnNlcnZlRWxlbWVudEJvdW5kaW5nUmVjdChjb250ZW50UmVmLmN1cnJlbnQsIHJlY3QgPT4ge1xyXG4gICAgICAgIGNhbnZhc1JlZi5jdXJyZW50LndpZHRoID0gcmVjdC53aWR0aDtcclxuICAgICAgICBjYW52YXNSZWYuY3VycmVudC5oZWlnaHQgPSByZWN0LmhlaWdodDtcclxuICAgICAgICBzZXRWaWV3ZXJTaXplKHsgLi4ucmVjdCB9KTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICB2aWV3ZXJFbmRwb2ludC5nZXREb2N1bWVudFRleHQoc2VsZWN0ZWRWZXJ0ZXhGaWxlSWQpLnRoZW4oc2V0U2VsZWN0ZWRWZXJ0ZXhGaWxlVGV4dCk7XHJcbiAgICAgIHZpZXdlckVuZHBvaW50LmdldERvY3VtZW50VGV4dChzZWxlY3RlZEZyYWdtZW50RmlsZUlkKS50aGVuKHNldFNlbGVjdGVkRnJhZ21lbnRGaWxlVGV4dCk7XHJcbiAgICAgIHZpZXdlckVuZHBvaW50LnNob3dXZWJWaWV3RGV2VG9vbHMoKTtcclxuICAgIH0sIFtdKTtcclxuXHJcbiAgICAvL2NvbnN0IGNvbnRleHQgPSB1c2VXZWJHTENvbnRleHQoY2FudmFzUmVmLmN1cnJlbnQpXHJcblxyXG4gICAgLy8gdXNlU2hhZGVyQ29tcGlsZXIoc2VsZWN0ZWRWZXJ0ZXhGaWxlVGV4dCwgc2V0U2VsZWN0ZWRGcmFnbWVudEZpbGVUZXh0LCBjb21waWxhdGlvblJlc3VsdCA9PiB7XHJcbiAgICAvLyAgIGlmIChjb21waWxhdGlvblJlc3VsdCkge1xyXG5cclxuICAgIC8vICAgfVxyXG4gICAgLy8gICBlbHNlIHtcclxuXHJcbiAgICAvLyAgIH1cclxuICAgIC8vIH0pXHJcblxyXG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgaWYgKCFzZWxlY3RlZFZlcnRleEZpbGVUZXh0IHx8ICFzZWxlY3RlZEZyYWdtZW50RmlsZVRleHQpIHJldHVybjtcclxuXHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGNvbXBpbGVTaGFkZXJzRnJvbVNvdXJjZShcclxuICAgICAgICBjb250ZXh0UmVmLmN1cnJlbnQsXHJcbiAgICAgICAgc2VsZWN0ZWRWZXJ0ZXhGaWxlVGV4dCxcclxuICAgICAgICBzZWxlY3RlZEZyYWdtZW50RmlsZVRleHRcclxuICAgICAgKTtcclxuXHJcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlc3VsdCkpIHtcclxuICAgICAgICBzZXRTaGFkZXJDb21waWxlRXJyb3JzKGZvcm1hdFNoYWRlckNvbXBpbGVFcnJvcnMocmVzdWx0KSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc2V0U2hhZGVyQ29tcGlsZUVycm9ycyhcIlwiKTtcclxuICAgICAgICBjb25zdCBwcm9ncmFtID0gcmVzdWx0O1xyXG4gICAgICAgIGNvbnN0IHByb2dyYW1Vbmlmb3JtcyA9IGdldFByb2dyYW1Vbmlmb3Jtcyhjb250ZXh0UmVmLmN1cnJlbnQsIHByb2dyYW0pO1xyXG4gICAgICAgIGNvbnN0IHByb2dyYW1BdHRyaWJ1dGVCdWZmZXJzID0gZ2V0UHJvZ3JhbUF0dHJpYnV0ZUJ1ZmZlcnMoY29udGV4dFJlZi5jdXJyZW50LCBwcm9ncmFtKTtcclxuICAgICAgICBzZXRVbmlmb3JtRmllbGRzSW5mbyhwcm9ncmFtVW5pZm9ybXMuZGF0YVVuaWZvcm1zKTtcclxuICAgICAgICBzZXRUZXh0dXJlRmllbGRzSW5mbyhwcm9ncmFtVW5pZm9ybXMudGV4dHVyZVVuaWZvcm1zKTtcclxuICAgICAgICBzZXRBdHRyaWJ1dGVCdWZmZXJGaWVsZHNJbmZvKHByb2dyYW1BdHRyaWJ1dGVCdWZmZXJzKTtcclxuICAgICAgICBjb25zdCBuZXdMb2NhbCA9IGdldEZyb21DYWNoZU9yQ3JlYXRlKGNvbnRleHRSZWYuY3VycmVudCwgcHJvZ3JhbSwgcHJvZ3JhbUF0dHJpYnV0ZUJ1ZmZlcnMpO1xyXG5cclxuICAgICAgICBjb25zdCByZW5kZXIgPSAoKSA9PiB7XHJcbiAgICAgICAgICByZW5kZXJQcm9ncmFtKFxyXG4gICAgICAgICAgICBjb250ZXh0UmVmLmN1cnJlbnQsXHJcbiAgICAgICAgICAgIHByb2dyYW0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICB1bmlmb3JtSW5mb3M6IFtdLFxyXG4gICAgICAgICAgICAgIHRleHR1cmVJbmZvczogW10sXHJcbiAgICAgICAgICAgICAgYXR0cmlidXRlQnVmZmVySW5mb3M6IG5ld0xvY2FsLFxyXG4gICAgICAgICAgICAgIGluZGV4QnVmZmVySW5mbzogaW5kZXhCdWZmZXJJbmZvUmVmLmN1cnJlbnQsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHsgZHJhd01vZGU6IFwiYXJyYXlzXCIgfVxyXG4gICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICBhbmltYXRpb25GcmFtZUhhbmRsZVJlZi5jdXJyZW50ID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlbmRlcik7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmVuZGVyKCk7XHJcblxyXG4gICAgICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhcImRlbGV0aW5nIHByb2dcIik7XHJcblxyXG4gICAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoYW5pbWF0aW9uRnJhbWVIYW5kbGVSZWYuY3VycmVudCk7XHJcbiAgICAgICAgICBjb250ZXh0UmVmLmN1cnJlbnQuZGVsZXRlUHJvZ3JhbShyZXN1bHQpO1xyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuICAgIH0sIFtzZWxlY3RlZFZlcnRleEZpbGVUZXh0LCBzZWxlY3RlZEZyYWdtZW50RmlsZVRleHRdKTtcclxuXHJcbiAgICB1c2VQZXJzcGVjdGl2ZUNhbWVyYShjb250ZW50UmVmLmN1cnJlbnQsIHZpZXdlclNpemUsIHVwZGF0ZUNhbWVyYVBvc2l0aW9uKTtcclxuICAgIHVzZURvY3VtZW50V2F0Y2hlcihzZWxlY3RlZFZlcnRleEZpbGVJZCwgc2V0U2VsZWN0ZWRWZXJ0ZXhGaWxlVGV4dCk7XHJcbiAgICB1c2VEb2N1bWVudFdhdGNoZXIoc2VsZWN0ZWRGcmFnbWVudEZpbGVJZCwgc2V0U2VsZWN0ZWRGcmFnbWVudEZpbGVUZXh0KTtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInZpZXdlci1ncmlkXCI+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ2aWV3ZXItb3B0aW9uc1wiPlxyXG4gICAgICAgICAgPFNoYWRlcnNTZWxlY3RvclNlY3Rpb24+PC9TaGFkZXJzU2VsZWN0b3JTZWN0aW9uPlxyXG4gICAgICAgICAgPERyYXdPcHRpb25zU2VjdGlvbj48L0RyYXdPcHRpb25zU2VjdGlvbj5cclxuICAgICAgICAgIDxVbmlmb3JtU2VjdGlvbiB1bmlmb3JtRmllbGRzPXt1bmlmb3JtRmllbGRzSW5mb30+PC9Vbmlmb3JtU2VjdGlvbj5cclxuICAgICAgICAgIDxBdHRyaWJ1dGVCdWZmZXJTZWN0aW9uXHJcbiAgICAgICAgICAgIGF0dHJpYnV0ZUJ1ZmZlckZpZWxkcz17YXR0cmlidXRlQnVmZmVyRmllbGRzSW5mb31cclxuICAgICAgICAgID48L0F0dHJpYnV0ZUJ1ZmZlclNlY3Rpb24+XHJcbiAgICAgICAgICA8VGV4dHVyZVNlY3Rpb24gdGV4dHVyZUZpZWxkcz17dGV4dHVyZUZpZWxkc0luZm99PjwvVGV4dHVyZVNlY3Rpb24+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiByZWY9e2NvbnRlbnRSZWZ9IGNsYXNzTmFtZT1cInZpZXdlci1jb250ZW50XCI+XHJcbiAgICAgICAgICB7c2hhZGVyQ29tcGlsZUVycm9ycyAmJiAoXHJcbiAgICAgICAgICAgIDxTaGFkZXJzQ29tcGlsZVJlc3VsdEFyZWEgZXJyb3JzPXtzaGFkZXJDb21waWxlRXJyb3JzfT48L1NoYWRlcnNDb21waWxlUmVzdWx0QXJlYT5cclxuICAgICAgICAgICl9XHJcbiAgICAgICAgICA8Y2FudmFzIGNsYXNzTmFtZT1cInZpZXdlci1jYW52YXNcIiByZWY9e2NhbnZhc1JlZn0+PC9jYW52YXM+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxuICB9XHJcbik7XHJcblxyXG5leHBvcnQgY29uc3QgdXNlRG9jdW1lbnRXYXRjaGVyID0gKGZpbGVQYXRoOiBzdHJpbmcsIG9uQ2hhbmdlOiAoZmlsZVRleHQ6IHN0cmluZykgPT4gdm9pZCkgPT4ge1xyXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBjb25zdCB1bnN1YnNjcmliZSA9IHZpZXdlckVuZHBvaW50LnN1YnNjcmliZVRvRG9jdW1lbnRTYXZlKGZpbGVQYXRoLCBvbkNoYW5nZSk7XHJcbiAgICByZXR1cm4gKCkgPT4gdW5zdWJzY3JpYmUoKTtcclxuICB9LCBbZmlsZVBhdGhdKTtcclxufTtcclxuIiwiZXhwb3J0IGNvbnN0IG9ic2VydmVFbGVtZW50Qm91bmRpbmdSZWN0ID0gKFxyXG4gIGVsZW1lbnQ6IEVsZW1lbnQsXHJcbiAgY2FsbGJhY2s6IChyZWN0YW5nbGU6IHtcclxuICAgIHg6IG51bWJlcjtcclxuICAgIHk6IG51bWJlcjtcclxuICAgIHdpZHRoOiBudW1iZXI7XHJcbiAgICBoZWlnaHQ6IG51bWJlcjtcclxuICB9KSA9PiB2b2lkXHJcbik6ICgoKSA9PiB2b2lkKSA9PiB7XHJcbiAgY29uc3QgcmVzaXplT2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIoZWxlbWVudHMgPT4ge1xyXG4gICAgY29uc3Qgb2JzZXJ2ZXJFbnRyeSA9IGVsZW1lbnRzLmZpbmQoZSA9PiBlLnRhcmdldCA9PT0gZWxlbWVudCk7XHJcblxyXG4gICAgaWYgKG9ic2VydmVyRW50cnkpIHtcclxuICAgICAgY29uc3QgZG9tUmVjdCA9IG9ic2VydmVyRW50cnkudGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICBjYWxsYmFjayh7XHJcbiAgICAgICAgeDogZG9tUmVjdC54LFxyXG4gICAgICAgIHk6IGRvbVJlY3QueSxcclxuICAgICAgICB3aWR0aDogZG9tUmVjdC53aWR0aCxcclxuICAgICAgICBoZWlnaHQ6IGRvbVJlY3QuaGVpZ2h0LFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgcmVzaXplT2JzZXJ2ZXIub2JzZXJ2ZShlbGVtZW50KTtcclxuICByZXR1cm4gKCkgPT4gcmVzaXplT2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xyXG59O1xyXG4iLCJpbXBvcnQgeyBUZXh0dXJlSW5mbyB9IGZyb20gXCIuL3RleHR1cmVJbmZvXCI7XHJcbmltcG9ydCB7IEluZGV4QnVmZmVySW5mbyB9IGZyb20gXCIuL2luZGV4QnVmZmVyXCI7XHJcbmltcG9ydCB7IHJlbW92ZUxhc3QgfSBmcm9tIFwiLi4vLi4vLi4vLi4vY29tbW9uL2FycmF5XCI7XHJcbmltcG9ydCB7IGhhc1Byb3BlcnR5IH0gZnJvbSBcIi4uL3R5cGVHdWFyZHNcIjtcclxuaW1wb3J0IHsgQXR0cmlidXRlQnVmZmVySW5mbywgQXR0cmlidXRlQnVmZmVyVHlwZSB9IGZyb20gXCIuL2F0dHJpYnV0ZUJ1ZmZlclwiO1xyXG5pbXBvcnQgeyBVbmlmb3JtSW5mbywgVW5pZm9ybVR5cGUgfSBmcm9tIFwiLi91bmlmb3JtXCI7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwiLi4vb2JzZXJ2YWJsZVwiO1xyXG4vL2ltcG9ydCB7IGNyZWF0ZUF0dHJpYnV0ZUJ1ZmZlckNvbXBvbmVudHMgfSBmcm9tIFwiLi9hdHRyaWJ1dGVCdWZmZXJDb21wb25lbnRcIjtcclxuaW1wb3J0IHsgZ2V0VGV4dHVyZUluZm9zIH0gZnJvbSBcIi4vdGV4dHVyZUluZm9TdG9yZVwiO1xyXG5pbXBvcnQgeyBVbmlmb3JtQmluZGluZywgY3JlYXRlVW5pZm9ybUNvbXBvbmVudHMgfSBmcm9tIFwiLi91bmlmb3JtQ29tcG9uZW50XCI7XHJcblxyXG5leHBvcnQgdHlwZSBEcmF3T3B0aW9ucyA9IHtcclxuICBkcmF3TW9kZTogXCJlbGVtZW50c1wiIHwgXCJhcnJheXNcIjtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBjb21waWxlU2hhZGVyID0gKFxyXG4gIHJlbmRlcmluZ0NvbnRleHQ6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCxcclxuICB0eXBlOiBHTGVudW0sXHJcbiAgc291cmNlOiBzdHJpbmdcclxuKTogV2ViR0xTaGFkZXIgfCB7IGVycm9yOiBzdHJpbmcgfSA9PiB7XHJcbiAgY29uc3Qgc2hhZGVyID0gcmVuZGVyaW5nQ29udGV4dC5jcmVhdGVTaGFkZXIodHlwZSk7XHJcbiAgcmVuZGVyaW5nQ29udGV4dC5zaGFkZXJTb3VyY2Uoc2hhZGVyLCBzb3VyY2UpO1xyXG4gIHJlbmRlcmluZ0NvbnRleHQuY29tcGlsZVNoYWRlcihzaGFkZXIpO1xyXG5cclxuICBjb25zdCByZXN1bHQgPSByZW5kZXJpbmdDb250ZXh0LmdldFNoYWRlclBhcmFtZXRlcihzaGFkZXIsIHJlbmRlcmluZ0NvbnRleHQuQ09NUElMRV9TVEFUVVMpO1xyXG5cclxuICBpZiAocmVzdWx0KSB7XHJcbiAgICByZXR1cm4gc2hhZGVyO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBjb25zdCBlcnJvciA9IHJlbmRlcmluZ0NvbnRleHQuZ2V0U2hhZGVySW5mb0xvZyhzaGFkZXIpO1xyXG4gICAgcmVuZGVyaW5nQ29udGV4dC5kZWxldGVTaGFkZXIoc2hhZGVyKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGVycm9yLFxyXG4gICAgfTtcclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgY29tcGlsZVNoYWRlcnNGcm9tU291cmNlID0gKFxyXG4gIGNvbnRleHQ6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCxcclxuICB2ZXJ0ZXhTaGFkZXJDb250ZW50OiBzdHJpbmcsXHJcbiAgZnJhZ21lbnRTaGFkZXJDb250ZW50OiBzdHJpbmdcclxuKTogV2ViR0xQcm9ncmFtIHwgU2hhZGVyQ29tcGlsZUVycm9ycyA9PiB7XHJcbiAgY29uc3QgdmVydGV4U2hhZGVyID0gY29tcGlsZVNoYWRlcihjb250ZXh0LCBjb250ZXh0LlZFUlRFWF9TSEFERVIsIHZlcnRleFNoYWRlckNvbnRlbnQpO1xyXG5cclxuICBjb25zdCBmcmFnbWVudFNoYWRlciA9IGNvbXBpbGVTaGFkZXIoY29udGV4dCwgY29udGV4dC5GUkFHTUVOVF9TSEFERVIsIGZyYWdtZW50U2hhZGVyQ29udGVudCk7XHJcblxyXG4gIGxldCB2ZXJ0ZXhFcnJvcjogc3RyaW5nID0gdW5kZWZpbmVkO1xyXG4gIGlmIChoYXNQcm9wZXJ0eSh2ZXJ0ZXhTaGFkZXIsIFwiZXJyb3JcIikpIHtcclxuICAgIHZlcnRleEVycm9yID0gcmVtb3ZlTGFzdCh2ZXJ0ZXhTaGFkZXIuZXJyb3IsIDEpO1xyXG4gIH1cclxuXHJcbiAgbGV0IGZyYWdtZW50RXJyb3I6IHN0cmluZyA9IHVuZGVmaW5lZDtcclxuICBpZiAoaGFzUHJvcGVydHkoZnJhZ21lbnRTaGFkZXIsIFwiZXJyb3JcIikpIHtcclxuICAgIGZyYWdtZW50RXJyb3IgPSByZW1vdmVMYXN0KGZyYWdtZW50U2hhZGVyLmVycm9yLCAxKTtcclxuICB9XHJcblxyXG4gIGlmICh2ZXJ0ZXhFcnJvciB8fCBmcmFnbWVudEVycm9yKSB7XHJcbiAgICAvL3RvZG8gY2xlYW51cFxyXG4gICAgcmV0dXJuIFt2ZXJ0ZXhFcnJvciwgZnJhZ21lbnRFcnJvcl0gYXMgU2hhZGVyQ29tcGlsZUVycm9ycztcclxuICB9XHJcblxyXG4gIHJldHVybiBjcmVhdGVQcm9ncmFtKGNvbnRleHQsIHZlcnRleFNoYWRlciwgZnJhZ21lbnRTaGFkZXIpO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGNyZWF0ZVByb2dyYW0gPSAoXHJcbiAgcmVuZGVyaW5nQ29udGV4dDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LFxyXG4gIHZlcnRleFNoYWRlcjogV2ViR0xTaGFkZXIsXHJcbiAgZnJhZ21lbnRTaGFkZXI6IFdlYkdMU2hhZGVyXHJcbikgPT4ge1xyXG4gIGNvbnN0IHByb2dyYW0gPSByZW5kZXJpbmdDb250ZXh0LmNyZWF0ZVByb2dyYW0oKTtcclxuICByZW5kZXJpbmdDb250ZXh0LmF0dGFjaFNoYWRlcihwcm9ncmFtLCB2ZXJ0ZXhTaGFkZXIpO1xyXG4gIHJlbmRlcmluZ0NvbnRleHQuYXR0YWNoU2hhZGVyKHByb2dyYW0sIGZyYWdtZW50U2hhZGVyKTtcclxuICByZW5kZXJpbmdDb250ZXh0LmxpbmtQcm9ncmFtKHByb2dyYW0pO1xyXG5cclxuICBjb25zdCByZXN1bHQgPSByZW5kZXJpbmdDb250ZXh0LmdldFByb2dyYW1QYXJhbWV0ZXIocHJvZ3JhbSwgcmVuZGVyaW5nQ29udGV4dC5MSU5LX1NUQVRVUyk7XHJcblxyXG4gIGlmIChyZXN1bHQpIHtcclxuICAgIHJldHVybiBwcm9ncmFtO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBjb25zdCBpbmZvTG9nID0gcmVuZGVyaW5nQ29udGV4dC5nZXRQcm9ncmFtSW5mb0xvZyhwcm9ncmFtKTtcclxuICAgIHJlbmRlcmluZ0NvbnRleHQuZGVsZXRlUHJvZ3JhbShwcm9ncmFtKTtcclxuICAgIHRocm93IG5ldyBFcnJvcihgQ3JlYXRpbmcgcHJvZ3JhbSBmYWlsZWQ6ICR7aW5mb0xvZ31gKTtcclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0UHJvZ3JhbVVuaWZvcm1zID0gKFxyXG4gIGNvbnRleHQ6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCxcclxuICBwcm9ncmFtOiBXZWJHTFByb2dyYW1cclxuKToge1xyXG4gIGRhdGFVbmlmb3JtczogeyBuYW1lOiBzdHJpbmc7IHR5cGU6IFVuaWZvcm1UeXBlIH1bXTtcclxuICB0ZXh0dXJlVW5pZm9ybXM6IHsgbmFtZTogc3RyaW5nOyB1bml0OiBudW1iZXIgfVtdO1xyXG59ID0+IHtcclxuICBjb25zdCBudW1Vbmlmb3JtcyA9IGNvbnRleHQuZ2V0UHJvZ3JhbVBhcmFtZXRlcihwcm9ncmFtLCBjb250ZXh0LkFDVElWRV9VTklGT1JNUyk7XHJcbiAgY29uc3QgZGF0YVVuaWZvcm1zOiB7IG5hbWU6IHN0cmluZzsgdHlwZTogVW5pZm9ybVR5cGUgfVtdID0gW107XHJcbiAgY29uc3QgdGV4dHVyZVVuaWZvcm1zOiB7IG5hbWU6IHN0cmluZzsgdW5pdDogbnVtYmVyIH1bXSA9IFtdO1xyXG5cclxuICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgbnVtVW5pZm9ybXM7ICsraW5kZXgpIHtcclxuICAgIGNvbnN0IHVuaWZvcm0gPSBjb250ZXh0LmdldEFjdGl2ZVVuaWZvcm0ocHJvZ3JhbSwgaW5kZXgpO1xyXG5cclxuICAgIC8vc2FtcGxlcjJEXHJcbiAgICBpZiAodW5pZm9ybS50eXBlID09PSAzNTY3OCkge1xyXG4gICAgICB0ZXh0dXJlVW5pZm9ybXMucHVzaCh7XHJcbiAgICAgICAgbmFtZTogdW5pZm9ybS5uYW1lLFxyXG4gICAgICAgIHVuaXQ6IHRleHR1cmVVbmlmb3Jtcy5sZW5ndGgsXHJcbiAgICAgIH0pO1xyXG4gICAgfSBlbHNlIGRhdGFVbmlmb3Jtcy5wdXNoKHsgbmFtZTogdW5pZm9ybS5uYW1lLCB0eXBlOiB1bmlmb3JtLnR5cGUgfSk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4geyBkYXRhVW5pZm9ybXMsIHRleHR1cmVVbmlmb3JtcyB9O1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldFByb2dyYW1BdHRyaWJ1dGVCdWZmZXJzID0gKFxyXG4gIGNvbnRleHQ6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCxcclxuICBwcm9ncmFtOiBXZWJHTFByb2dyYW1cclxuKSA9PiB7XHJcbiAgY29uc3QgbnVtQXR0cmlidXRlQnVmZmVycyA9IGNvbnRleHQuZ2V0UHJvZ3JhbVBhcmFtZXRlcihwcm9ncmFtLCBjb250ZXh0LkFDVElWRV9BVFRSSUJVVEVTKTtcclxuXHJcbiAgY29uc3QgcmVzdWx0OiB7IG5hbWU6IHN0cmluZzsgdHlwZTogQXR0cmlidXRlQnVmZmVyVHlwZSB9W10gPSBbXTtcclxuXHJcbiAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IG51bUF0dHJpYnV0ZUJ1ZmZlcnM7ICsraW5kZXgpIHtcclxuICAgIGNvbnN0IGF0dHJpYnV0ZUJ1ZmZlciA9IGNvbnRleHQuZ2V0QWN0aXZlQXR0cmliKHByb2dyYW0sIGluZGV4KTtcclxuICAgIHJlc3VsdC5wdXNoKHsgbmFtZTogYXR0cmlidXRlQnVmZmVyLm5hbWUsIHR5cGU6IGF0dHJpYnV0ZUJ1ZmZlci50eXBlIH0pO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHJlc3VsdDtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCByZW5kZXJQcm9ncmFtID0gKFxyXG4gIGNvbnRleHQ6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCxcclxuICBwcm9ncmFtOiBXZWJHTFByb2dyYW0sXHJcbiAgcmVuZGVySW5mbzoge1xyXG4gICAgdW5pZm9ybUluZm9zOiBVbmlmb3JtSW5mb1tdO1xyXG4gICAgdGV4dHVyZUluZm9zOiBUZXh0dXJlSW5mb1tdO1xyXG4gICAgYXR0cmlidXRlQnVmZmVySW5mb3M6IEF0dHJpYnV0ZUJ1ZmZlckluZm9bXTtcclxuICAgIGluZGV4QnVmZmVySW5mbzogSW5kZXhCdWZmZXJJbmZvO1xyXG4gIH0sXHJcbiAgZHJhd09wdGlvbnM6IERyYXdPcHRpb25zXHJcbikgPT4ge1xyXG4gIC8vdG9kb1xyXG4gIGNvbnRleHQudXNlUHJvZ3JhbShwcm9ncmFtKTtcclxuICBjb250ZXh0LnZpZXdwb3J0KDAsIDAsIGNvbnRleHQuY2FudmFzLndpZHRoLCBjb250ZXh0LmNhbnZhcy5oZWlnaHQpO1xyXG4gIC8vY29udGV4dC5jbGVhckNvbG9yKDAsIDAsIDAsIDApO1xyXG4gIGNvbnRleHQuY2xlYXJDb2xvcigxLjAsIDEuMCwgMC4wLCAxLjApOyAvLyBDbGVhciB0byBibGFjaywgZnVsbHkgb3BhcXVlXHJcbiAgY29udGV4dC5jbGVhckRlcHRoKDEuMCk7IC8vIENsZWFyIGV2ZXJ5dGhpbmdcclxuICAvLyBnbC5lbmFibGUoZ2wuREVQVEhfVEVTVCk7ICAgICAgICAgICAvLyBFbmFibGUgZGVwdGggdGVzdGluZ1xyXG4gIGNvbnRleHQuZW5hYmxlKGNvbnRleHQuREVQVEhfVEVTVCk7XHJcblxyXG4gIGNvbnRleHQuZGVwdGhGdW5jKGNvbnRleHQuTEVRVUFMKTsgLy8gTmVhciB0aGluZ3Mgb2JzY3VyZSBmYXIgdGhpbmdzXHJcbiAgY29udGV4dC5jbGVhcihjb250ZXh0LkNPTE9SX0JVRkZFUl9CSVQgfCBjb250ZXh0LkRFUFRIX0JVRkZFUl9CSVQpO1xyXG4gIC8vY29udGV4dC5lbmFibGUoY29udGV4dC5DVUxMX0ZBQ0UpO1xyXG5cclxuICByZW5kZXJJbmZvLnVuaWZvcm1JbmZvcy5mb3JFYWNoKHUgPT4gdS5wcmVwYXJlRm9yUmVuZGVyKCkpO1xyXG4gIHJlbmRlckluZm8udGV4dHVyZUluZm9zLmZvckVhY2godSA9PiB1LnByZXBhcmVGb3JSZW5kZXIoKSk7XHJcbiAgcmVuZGVySW5mby5hdHRyaWJ1dGVCdWZmZXJJbmZvcy5mb3JFYWNoKGFiID0+IGFiLnNldEF0dHJpYnV0ZUJ1ZmZlcigpKTtcclxuXHJcbiAgY29uc3QgcHJpbWl0aXZlVHlwZSA9IGNvbnRleHQuVFJJQU5HTEVTO1xyXG4gIGNvbnN0IG9mZnNldCA9IDA7XHJcblxyXG4gIGlmIChkcmF3T3B0aW9ucy5kcmF3TW9kZSA9PT0gXCJhcnJheXNcIikge1xyXG4gICAgY29uc3QgbnVtRWxlbWVudHMgPSBNYXRoLm1pbiguLi5yZW5kZXJJbmZvLmF0dHJpYnV0ZUJ1ZmZlckluZm9zLm1hcChhYiA9PiBhYi5nZXRDb3VudCgpKSk7XHJcbiAgICBjb250ZXh0LmRyYXdBcnJheXMocHJpbWl0aXZlVHlwZSwgb2Zmc2V0LCBudW1FbGVtZW50cyk7XHJcbiAgfSBlbHNlIHtcclxuICAgIHJlbmRlckluZm8uaW5kZXhCdWZmZXJJbmZvLnNldEluZGV4QnVmZmVyKCk7XHJcbiAgICBjb250ZXh0LmRyYXdFbGVtZW50cyhcclxuICAgICAgcHJpbWl0aXZlVHlwZSxcclxuICAgICAgcmVuZGVySW5mby5pbmRleEJ1ZmZlckluZm8uZ2V0Q291bnQoKSwgLy9udW1FbGVtZW50cyxcclxuICAgICAgY29udGV4dC5VTlNJR05FRF9TSE9SVCxcclxuICAgICAgb2Zmc2V0XHJcbiAgICApO1xyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIFNoYWRlckNvbXBpbGVFcnJvcnMgPSBbdmVydGV4U2hhZGVyRXJyb3JzOiBzdHJpbmcsIGZyYWdtZW50U2hhZGVyRXJyb3JzOiBzdHJpbmddO1xyXG5leHBvcnQgY29uc3QgZm9ybWF0U2hhZGVyQ29tcGlsZUVycm9ycyA9IChyZXN1bHQ6IFNoYWRlckNvbXBpbGVFcnJvcnMpID0+IHtcclxuICBjb25zdCBbdmVydGV4U2hhZGVyRXJyb3JzLCBmcmFnbWVudFNoYWRlckVycm9yc10gPSByZXN1bHQ7XHJcblxyXG4gIGNvbnN0IGVycm9yczogc3RyaW5nW10gPSBbXTtcclxuXHJcbiAgaWYgKHZlcnRleFNoYWRlckVycm9ycykge1xyXG4gICAgZXJyb3JzLnB1c2goXCJWRVJURVggU0hBREVSOlwiLCB2ZXJ0ZXhTaGFkZXJFcnJvcnMpO1xyXG4gIH1cclxuXHJcbiAgaWYgKGZyYWdtZW50U2hhZGVyRXJyb3JzKSB7XHJcbiAgICBlcnJvcnMucHVzaChcIkZSQUdNRU5UIFNIQURFUjpcIiwgZnJhZ21lbnRTaGFkZXJFcnJvcnMpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGVycm9ycy5qb2luKFwiXFxyXFxuXCIpO1xyXG59O1xyXG5cclxuLy8gZXhwb3J0IGNvbnN0IGNyZWF0ZUNvbXBvbmVudHNGb3JQcm9ncmFtID0gKFxyXG4vLyAgIGNvbnRleHQ6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCxcclxuLy8gICBwcm9ncmFtOiBXZWJHTFByb2dyYW0sXHJcbi8vICAgYmluZGluZ3M6IHtcclxuLy8gICAgIHVuaWZvcm06IE1hcDxzdHJpbmcsIFVuaWZvcm1CaW5kaW5nPjtcclxuLy8gICAgIG1lc2g6IE1hcDxcclxuLy8gICAgICAgc3RyaW5nLFxyXG4vLyAgICAgICB7XHJcbi8vICAgICAgICAgbmFtZTogc3RyaW5nO1xyXG4vLyAgICAgICAgIHR5cGU6IEF0dHJpYnV0ZUJ1ZmZlclR5cGU7XHJcbi8vICAgICAgICAgdmFsdWU6IE9ic2VydmFibGU8YW55W10+O1xyXG4vLyAgICAgICB9XHJcbi8vICAgICA+O1xyXG4vLyAgIH1cclxuLy8gKSA9PiB7XHJcbi8vICAgY29uc3QgcHJvZ3JhbVVuaWZvcm1zID0gZ2V0UHJvZ3JhbVVuaWZvcm1zKGNvbnRleHQsIHByb2dyYW0pO1xyXG4vLyAgIGNvbnN0IHByb2dyYW1BdHRyaWJ1dGVCdWZmZXJzID0gZ2V0UHJvZ3JhbUF0dHJpYnV0ZUJ1ZmZlcnMoY29udGV4dCwgcHJvZ3JhbSk7XHJcblxyXG4vLyAgIGNvbnN0IHVuaWZvcm1Db21wb25lbnRzID0gY3JlYXRlVW5pZm9ybUNvbXBvbmVudHMoXHJcbi8vICAgICBjb250ZXh0LFxyXG4vLyAgICAgcHJvZ3JhbSxcclxuLy8gICAgIHByb2dyYW1Vbmlmb3Jtcy5kYXRhVW5pZm9ybXMsXHJcbi8vICAgICBBcnJheS5mcm9tKGJpbmRpbmdzLnVuaWZvcm0udmFsdWVzKCkpXHJcbi8vICAgKTtcclxuXHJcbi8vICAgY29uc3QgdGV4dHVyZUNvbXBvbmVudHMgPSBnZXRUZXh0dXJlSW5mb3MoY29udGV4dCwgcHJvZ3JhbSwgcHJvZ3JhbVVuaWZvcm1zLnRleHR1cmVVbmlmb3Jtcyk7XHJcblxyXG4vLyAgIGNvbnN0IGF0dHJpYnV0ZUJ1ZmZlckNvbXBvbmVudHMgPSBjcmVhdGVBdHRyaWJ1dGVCdWZmZXJDb21wb25lbnRzKFxyXG4vLyAgICAgY29udGV4dCxcclxuLy8gICAgIHByb2dyYW0sXHJcbi8vICAgICBwcm9ncmFtQXR0cmlidXRlQnVmZmVycyxcclxuLy8gICAgIEFycmF5LmZyb20oYmluZGluZ3MubWVzaC52YWx1ZXMoKSlcclxuLy8gICApO1xyXG4vLyAgIHJldHVybiB7IHVuaWZvcm1Db21wb25lbnRzLCB0ZXh0dXJlQ29tcG9uZW50cywgYXR0cmlidXRlQnVmZmVyQ29tcG9uZW50cyB9O1xyXG4vLyB9O1xyXG4iLCJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcIi4vLi4vb2JzZXJ2YWJsZVwiO1xyXG5pbXBvcnQgeyBDb21wb3NpdGVLZXlNYXAgfSBmcm9tIFwiLi4vLi4vdXRpbHMvY29tcG9zaXRlS2V5TWFwXCI7XHJcbmltcG9ydCB7IEF0dHJpYnV0ZUJ1ZmZlckluZm8sIEF0dHJpYnV0ZUJ1ZmZlclR5cGUgfSBmcm9tIFwiLi9hdHRyaWJ1dGVCdWZmZXJcIjtcclxuXHJcbnR5cGUgQ2FjaGVLZXkgPSB7XHJcbiAgbmFtZTogc3RyaW5nO1xyXG4gIHR5cGU6IEF0dHJpYnV0ZUJ1ZmZlclR5cGU7XHJcbn07XHJcblxyXG50eXBlIENhY2hlVmFsdWUgPSB7XHJcbiAgYXR0cmlidXRlQnVmZmVySW5mbzogQXR0cmlidXRlQnVmZmVySW5mbztcclxuICBkaXNwb3NlOiAoKSA9PiB2b2lkO1xyXG59O1xyXG5cclxuY29uc3Qga2V5U2VsZWN0b3IgPSAoa2V5OiBDYWNoZUtleSk6IHN0cmluZyA9PiBgJHtrZXkubmFtZX07JHtrZXkudHlwZX1gO1xyXG5jb25zdCBjb21wb25lbnRDYWNoZSA9IG5ldyBDb21wb3NpdGVLZXlNYXA8Q2FjaGVLZXksIENhY2hlVmFsdWU+KGtleVNlbGVjdG9yKTtcclxuXHJcbmNvbnN0IHJlYnVpbGRDYWNoZSA9IChuZXdWYWx1ZXM6IHsga2V5OiBDYWNoZUtleTsgdmFsdWU6IENhY2hlVmFsdWUgfVtdKSA9PiB7XHJcbiAgY29uc3QgbmV3VmFsdWVzU3RyS2V5cyA9IG5ld1ZhbHVlcy5tYXAodiA9PiBrZXlTZWxlY3Rvcih2LmtleSkpO1xyXG4gIGNvbnN0IGNvbXBvbmVudHNUb1JlbW92ZSA9IGNvbXBvbmVudENhY2hlXHJcbiAgICAuZW50cmllc1N0cktleSgpXHJcbiAgICAuZmlsdGVyKGUgPT4gIW5ld1ZhbHVlc1N0cktleXMuaW5jbHVkZXMoZVswXSkpO1xyXG5cclxuICBjb21wb25lbnRzVG9SZW1vdmUuZm9yRWFjaChjID0+IHtcclxuICAgIGNbMV0uZGlzcG9zZSgpO1xyXG4gICAgY29tcG9uZW50Q2FjaGUuZGVsZXRlU3RyS2V5KGNbMF0pO1xyXG4gIH0pO1xyXG5cclxuICBuZXdWYWx1ZXMuZm9yRWFjaChudyA9PiB7XHJcbiAgICBpZiAoIWNvbXBvbmVudENhY2hlLmhhcyhudy5rZXkpKSBjb21wb25lbnRDYWNoZS5zZXQobncua2V5LCBudy52YWx1ZSk7XHJcbiAgfSk7XHJcbn07XHJcblxyXG5jb25zdCBnZXREZWZhdWx0VmFsdWUgPSAodHlwZTogQXR0cmlidXRlQnVmZmVyVHlwZSkgPT4ge1xyXG4gIHJldHVybiBbXHJcbiAgICBbMCwgMCwgMCwgMV0sXHJcbiAgICBbMCwgMC41LCAwLCAxXSxcclxuICAgIFswLjksIDAsIDAsIDFdLFxyXG4gICAgWzAsIDAuNSwgMCwgMV0sXHJcbiAgICBbMC43LCAwLCAwLCAxXSxcclxuICAgIFswLjcsIDAuNSwgMCwgMV0sXHJcbiAgXTtcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIEF0dHJpYnV0ZUJ1ZmZlckJpbmRpbmcgPSB7XHJcbiAgbmFtZTogc3RyaW5nO1xyXG4gIHR5cGU6IEF0dHJpYnV0ZUJ1ZmZlclR5cGU7XHJcbiAgdmFsdWU6IE9ic2VydmFibGU8YW55PjtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRCeU5hbWUgPSAobmFtZTogc3RyaW5nLCB0eXBlOiBBdHRyaWJ1dGVCdWZmZXJUeXBlKSA9PlxyXG4gIGNvbXBvbmVudENhY2hlLmdldCh7IG5hbWUsIHR5cGUgfSk7XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0RnJvbUNhY2hlT3JDcmVhdGUgPSAoXHJcbiAgY29udGV4dDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LFxyXG4gIHByb2dyYW06IFdlYkdMUHJvZ3JhbSxcclxuICBhdHRyaWJ1dGVCdWZmZXJzOiB7IG5hbWU6IHN0cmluZzsgdHlwZTogQXR0cmlidXRlQnVmZmVyVHlwZSB9W11cclxuKTogQXR0cmlidXRlQnVmZmVySW5mb1tdID0+IHtcclxuICBjb25zdCBjb21wb25lbnRzID0gYXR0cmlidXRlQnVmZmVycy5tYXAoYXR0cmlidXRlQnVmZmVyID0+IHtcclxuICAgIGNvbnN0IGtleSA9IHtcclxuICAgICAgLi4uYXR0cmlidXRlQnVmZmVyLFxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBmcm9tQ2FjaGUgPSBjb21wb25lbnRDYWNoZS5nZXQoa2V5KTtcclxuXHJcbiAgICBpZiAoZnJvbUNhY2hlKSB7XHJcbiAgICAgIGZyb21DYWNoZS5hdHRyaWJ1dGVCdWZmZXJJbmZvLmF0dGFjaFRvUHJvZ3JhbShwcm9ncmFtKTtcclxuICAgICAgcmV0dXJuIHsga2V5LCB2YWx1ZTogZnJvbUNhY2hlIH07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zdCBhdHRyaWJ1dGVCdWZmZXJJbmZvID0gbmV3IEF0dHJpYnV0ZUJ1ZmZlckluZm8oXHJcbiAgICAgICAgY29udGV4dCxcclxuICAgICAgICBwcm9ncmFtLFxyXG4gICAgICAgIGF0dHJpYnV0ZUJ1ZmZlci5uYW1lLFxyXG4gICAgICAgIGF0dHJpYnV0ZUJ1ZmZlci50eXBlXHJcbiAgICAgICk7XHJcblxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIGtleSxcclxuICAgICAgICB2YWx1ZToge1xyXG4gICAgICAgICAgYXR0cmlidXRlQnVmZmVySW5mbyxcclxuICAgICAgICAgIGRpc3Bvc2U6ICgpID0+IGF0dHJpYnV0ZUJ1ZmZlckluZm8uZGVsZXRlQnVmZmVyKCksXHJcbiAgICAgICAgfSxcclxuICAgICAgfTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgcmVidWlsZENhY2hlKGNvbXBvbmVudHMpO1xyXG4gIHJldHVybiBjb21wb25lbnRzLm1hcChjID0+IGMudmFsdWUuYXR0cmlidXRlQnVmZmVySW5mbyk7XHJcbn07XHJcblxyXG4vLyBjb25zdCBjcmVhdGVDdXN0b21PcHRpb24gPSAoYXR0cmlidXRlQnVmZmVySW5mbzogQXR0cmlidXRlQnVmZmVySW5mbykgPT4ge1xyXG4vLyAgIHJldHVybiB7XHJcbi8vICAgICBpZDogXCJjdXN0b21cIixcclxuLy8gICAgIGRpc3BsYXk6IFwiQ3VzdG9tXCIsXHJcbi8vICAgICAuLi5jcmVhdGVFZGl0YWJsZUNvbXBvbmVudChhdHRyaWJ1dGVCdWZmZXJJbmZvKSxcclxuLy8gICB9O1xyXG4vLyB9O1xyXG5cclxuLy8gY29uc3QgY3JlYXRlQmluZGluZ09wdGlvbnMgPSAoXHJcbi8vICAgYXR0cmlidXRlQnVmZmVyQmluZGluZ3M6IEF0dHJpYnV0ZUJ1ZmZlckJpbmRpbmdbXSxcclxuLy8gICBhdHRyaWJ1dGVCdWZmZXJJbmZvOiBBdHRyaWJ1dGVCdWZmZXJJbmZvXHJcbi8vICkgPT4ge1xyXG4vLyAgIHJldHVybiBhdHRyaWJ1dGVCdWZmZXJCaW5kaW5ncy5tYXAoYmluZGluZyA9PiB7XHJcbi8vICAgICBjb25zdCBlbGVtZW50ID0gY3JlYXRlRWxlbWVudEZvclR5cGUoXHJcbi8vICAgICAgIGF0dHJpYnV0ZUJ1ZmZlckluZm8uZ2V0QXR0cmlidXRlQnVmZmVyVHlwZSgpLFxyXG4vLyAgICAgICBmYWxzZSxcclxuLy8gICAgICAgYmluZGluZy52YWx1ZVxyXG4vLyAgICAgKTtcclxuXHJcbi8vICAgICByZXR1cm4ge1xyXG4vLyAgICAgICBpZDogdXVpZHY0KCksXHJcbi8vICAgICAgIGVsZW1lbnQsXHJcbi8vICAgICAgIGRpc3BsYXk6IGJpbmRpbmcubmFtZSxcclxuLy8gICAgICAgdmFsdWU6IGJpbmRpbmcudmFsdWUsXHJcbi8vICAgICB9O1xyXG4vLyAgIH0pO1xyXG4vLyB9O1xyXG5cclxuLy8gY29uc3QgY3JlYXRlRWRpdGFibGVDb21wb25lbnQgPSAoXHJcbi8vICAgYXR0cmlidXRlQnVmZmVySW5mbzogQXR0cmlidXRlQnVmZmVySW5mbyxcclxuLy8gICBvbkNoYW5nZT86ICh2YWx1ZTogYW55KSA9PiB2b2lkXHJcbi8vICkgPT4ge1xyXG4vLyAgIGNvbnN0IGluaXRpYWxWYWx1ZSA9IGdldERlZmF1bHRWYWx1ZShhdHRyaWJ1dGVCdWZmZXJJbmZvLmdldEF0dHJpYnV0ZUJ1ZmZlclR5cGUoKSk7XHJcbi8vICAgY29uc3QgY3VzdG9tVmFsdWUgPSBuZXcgT2JzZXJ2YWJsZTxhbnk+KGluaXRpYWxWYWx1ZSk7XHJcblxyXG4vLyAgIGlmIChvbkNoYW5nZSkge1xyXG4vLyAgICAgY3VzdG9tVmFsdWUuYXR0YWNoKCh2YWx1ZTogYW55KSA9PiBvbkNoYW5nZSh2YWx1ZSkpO1xyXG4vLyAgICAgb25DaGFuZ2UoaW5pdGlhbFZhbHVlKTtcclxuLy8gICB9XHJcblxyXG4vLyAgIGNvbnN0IGVsZW1lbnQgPSBjcmVhdGVFbGVtZW50Rm9yVHlwZShcclxuLy8gICAgIGF0dHJpYnV0ZUJ1ZmZlckluZm8uZ2V0QXR0cmlidXRlQnVmZmVyVHlwZSgpLFxyXG4vLyAgICAgdHJ1ZSxcclxuLy8gICAgIGN1c3RvbVZhbHVlXHJcbi8vICAgKTtcclxuXHJcbi8vICAgcmV0dXJuIHtcclxuLy8gICAgIGVsZW1lbnQsXHJcbi8vICAgICB2YWx1ZTogY3VzdG9tVmFsdWUsXHJcbi8vICAgICBkaXNwb3NlOiAoKSA9PiBjdXN0b21WYWx1ZS5kZXRhY2hBbGwoKSxcclxuLy8gICB9O1xyXG4vLyB9O1xyXG5cclxuLy8gY29uc3QgY3JlYXRlRWxlbWVudEZvclR5cGUgPSAoXHJcbi8vICAgYXR0cmlidXRlQnVmZmVyVHlwZTogQXR0cmlidXRlQnVmZmVyVHlwZSxcclxuLy8gICBlZGl0YWJsZTogYm9vbGVhbixcclxuLy8gICBjdXJyZW50VmFsdWU6IE9ic2VydmFibGU8YW55PlxyXG4vLyApID0+IHtcclxuLy8gICBzd2l0Y2ggKGF0dHJpYnV0ZUJ1ZmZlclR5cGUpIHtcclxuLy8gICAgIGNhc2UgQXR0cmlidXRlQnVmZmVyVHlwZS5GTE9BVF9WRUMyOlxyXG4vLyAgICAgICByZXR1cm4gY3JlYXRlRWxlbWVudEFycmF5KDIsIGN1cnJlbnRWYWx1ZSwgZWRpdGFibGUpO1xyXG4vLyAgICAgY2FzZSBBdHRyaWJ1dGVCdWZmZXJUeXBlLkZMT0FUX1ZFQzM6XHJcbi8vICAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50QXJyYXkoMywgY3VycmVudFZhbHVlLCBlZGl0YWJsZSk7XHJcbi8vICAgICBjYXNlIEF0dHJpYnV0ZUJ1ZmZlclR5cGUuRkxPQVRfVkVDNDpcclxuLy8gICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnRBcnJheSg0LCBjdXJyZW50VmFsdWUsIGVkaXRhYmxlKTtcclxuLy8gICAgIGRlZmF1bHQ6XHJcbi8vICAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50Tm90U3VwcG9ydGVkKCk7XHJcbi8vICAgfVxyXG4vLyB9O1xyXG4iLCJleHBvcnQgY2xhc3MgQ29tcG9zaXRlS2V5TWFwPFRLZXksIFRWYWx1ZT4ge1xyXG4gIHByaXZhdGUgbWFwID0gbmV3IE1hcDxzdHJpbmcsIFRWYWx1ZT4oKTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBrZXlTZWxlY3RvcjogKGNvbXBvc2l0ZUtleTogVEtleSkgPT4gc3RyaW5nKSB7fVxyXG5cclxuICBnZXQoa2V5OiBUS2V5KSB7XHJcbiAgICByZXR1cm4gdGhpcy5tYXAuZ2V0KHRoaXMua2V5U2VsZWN0b3Ioa2V5KSk7XHJcbiAgfVxyXG5cclxuICBzZXQoa2V5OiBUS2V5LCB2YWx1ZTogVFZhbHVlKSB7XHJcbiAgICB0aGlzLm1hcC5zZXQodGhpcy5rZXlTZWxlY3RvcihrZXkpLCB2YWx1ZSk7XHJcbiAgfVxyXG5cclxuICBoYXMoa2V5OiBUS2V5KSB7XHJcbiAgICByZXR1cm4gdGhpcy5tYXAuaGFzKHRoaXMua2V5U2VsZWN0b3Ioa2V5KSk7XHJcbiAgfVxyXG5cclxuICBlbnRyaWVzU3RyS2V5KCkge1xyXG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5tYXAuZW50cmllcygpKTtcclxuICB9XHJcblxyXG4gIGRlbGV0ZVN0cktleShrZXk6IHN0cmluZykge1xyXG4gICAgdGhpcy5tYXAuZGVsZXRlKGtleSk7XHJcbiAgfVxyXG5cclxuICBkZWxldGUoa2V5OiBUS2V5KSB7XHJcbiAgICB0aGlzLm1hcC5kZWxldGUodGhpcy5rZXlTZWxlY3RvcihrZXkpKTtcclxuICB9XHJcblxyXG4gIGNsZWFyKCkge1xyXG4gICAgdGhpcy5tYXAuY2xlYXIoKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgYXNzZXJ0TmV2ZXIgfSBmcm9tIFwiLi4vdHlwZUd1YXJkc1wiO1xyXG5cclxuZXhwb3J0IGVudW0gQXR0cmlidXRlQnVmZmVyVHlwZSB7XHJcbiAgRkxPQVRfVkVDMiA9IDM1NjY0LFxyXG4gIEZMT0FUX1ZFQzMgPSAzNTY2NSxcclxuICBGTE9BVF9WRUM0ID0gMzU2NjYsXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBBdHRyaWJ1dGVCdWZmZXJJbmZvIHtcclxuICBwcml2YXRlIGJ1ZmZlcjogV2ViR0xCdWZmZXIgfCBudWxsO1xyXG4gIHByaXZhdGUgbG9jYXRpb246IG51bWJlcjtcclxuICBwcml2YXRlIGNvdW50OiBudW1iZXIgPSAwO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgY29udGV4dDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LFxyXG4gICAgcHJvZ3JhbTogV2ViR0xQcm9ncmFtLFxyXG4gICAgcHJpdmF0ZSBuYW1lOiBzdHJpbmcsXHJcbiAgICBwcml2YXRlIHR5cGU6IEF0dHJpYnV0ZUJ1ZmZlclR5cGVcclxuICApIHtcclxuICAgIHRoaXMuYXR0YWNoVG9Qcm9ncmFtKHByb2dyYW0pO1xyXG4gICAgdGhpcy5idWZmZXIgPSBjb250ZXh0LmNyZWF0ZUJ1ZmZlcigpO1xyXG4gIH1cclxuXHJcbiAgYXR0YWNoVG9Qcm9ncmFtKHByb2dyYW06IFdlYkdMUHJvZ3JhbSkge1xyXG4gICAgdGhpcy5sb2NhdGlvbiA9IHRoaXMuY29udGV4dC5nZXRBdHRyaWJMb2NhdGlvbihwcm9ncmFtLCB0aGlzLm5hbWUpO1xyXG4gIH1cclxuXHJcbiAgc2V0VmFsdWUobmV3VmFsdWU6IG51bWJlcltdW10pIHtcclxuICAgIHRoaXMuY291bnQgPSBuZXdWYWx1ZS5sZW5ndGg7XHJcbiAgICB0aGlzLmNvbnRleHQuYmluZEJ1ZmZlcih0aGlzLmNvbnRleHQuQVJSQVlfQlVGRkVSLCB0aGlzLmJ1ZmZlcik7XHJcbiAgICBjb25zdCBmbGF0dGVuID0gW10uY29uY2F0KC4uLm5ld1ZhbHVlKTtcclxuICAgIHRoaXMuY29udGV4dC5idWZmZXJEYXRhKFxyXG4gICAgICB0aGlzLmNvbnRleHQuQVJSQVlfQlVGRkVSLFxyXG4gICAgICBuZXcgRmxvYXQzMkFycmF5KGZsYXR0ZW4pLFxyXG4gICAgICB0aGlzLmNvbnRleHQuU1RBVElDX0RSQVdcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBzZXRBdHRyaWJ1dGVCdWZmZXIoKSB7XHJcbiAgICBpZiAodGhpcy5idWZmZXIgIT09IG51bGwpIHtcclxuICAgICAgdGhpcy5jb250ZXh0LmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHRoaXMubG9jYXRpb24pO1xyXG4gICAgICB0aGlzLmNvbnRleHQuYmluZEJ1ZmZlcih0aGlzLmNvbnRleHQuQVJSQVlfQlVGRkVSLCB0aGlzLmJ1ZmZlcik7XHJcbiAgICAgIGNvbnN0IHNpemUgPSBnZXROdW1Db21wb25lbnRzKHRoaXMudHlwZSk7IC8vIDIgY29tcG9uZW50cyBwZXIgaXRlcmF0aW9uXHJcbiAgICAgIGNvbnN0IHR5cGUgPSB0aGlzLmNvbnRleHQuRkxPQVQ7IC8vIHRoZSBkYXRhIGlzIDMyYml0IGZsb2F0c1xyXG4gICAgICBjb25zdCBub3JtYWxpemUgPSBmYWxzZTsgLy8gZG9uJ3Qgbm9ybWFsaXplIHRoZSBkYXRhXHJcbiAgICAgIGNvbnN0IHN0cmlkZSA9IDA7IC8vIDAgPSBtb3ZlIGZvcndhcmQgc2l6ZSAqIHNpemVvZih0eXBlKSBlYWNoIGl0ZXJhdGlvbiB0byBnZXQgdGhlIG5leHQgcG9zaXRpb25cclxuICAgICAgY29uc3Qgb2Zmc2V0ID0gMDsgLy8gc3RhcnQgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgYnVmZmVyXHJcbiAgICAgIHRoaXMuY29udGV4dC52ZXJ0ZXhBdHRyaWJQb2ludGVyKFxyXG4gICAgICAgIHRoaXMubG9jYXRpb24sXHJcbiAgICAgICAgc2l6ZSxcclxuICAgICAgICB0eXBlLFxyXG4gICAgICAgIG5vcm1hbGl6ZSxcclxuICAgICAgICBzdHJpZGUsXHJcbiAgICAgICAgb2Zmc2V0XHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXRBdHRyaWJ1dGVCdWZmZXJUeXBlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMudHlwZTtcclxuICB9XHJcblxyXG4gIGdldENvdW50KCkge1xyXG4gICAgcmV0dXJuIHRoaXMuY291bnQ7XHJcbiAgfVxyXG5cclxuICBkZWxldGVCdWZmZXIoKSB7XHJcbiAgICB0aGlzLmNvbnRleHQuZGVsZXRlQnVmZmVyKHRoaXMuYnVmZmVyKTtcclxuICAgIHRoaXMuYnVmZmVyID0gbnVsbDtcclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IGdldE51bUNvbXBvbmVudHMgPSAoYnVmZmVyVHlwZTogQXR0cmlidXRlQnVmZmVyVHlwZSkgPT4ge1xyXG4gIHN3aXRjaCAoYnVmZmVyVHlwZSkge1xyXG4gICAgY2FzZSBBdHRyaWJ1dGVCdWZmZXJUeXBlLkZMT0FUX1ZFQzI6XHJcbiAgICAgIHJldHVybiAyO1xyXG4gICAgY2FzZSBBdHRyaWJ1dGVCdWZmZXJUeXBlLkZMT0FUX1ZFQzM6XHJcbiAgICAgIHJldHVybiAzO1xyXG4gICAgY2FzZSBBdHRyaWJ1dGVCdWZmZXJUeXBlLkZMT0FUX1ZFQzQ6XHJcbiAgICAgIHJldHVybiA0O1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgYXNzZXJ0TmV2ZXIoYnVmZmVyVHlwZSk7XHJcbiAgfVxyXG59O1xyXG4iLCJleHBvcnQgY29uc3QgaXNQb3dlck9mMiA9ICh2YWx1ZTogbnVtYmVyKSA9PiAodmFsdWUgJiAodmFsdWUgLSAxKSkgPT0gMDtcclxuXHJcbi8vZ2wtbWF0cml4IGZ1bmN0aW9uc1xyXG5leHBvcnQgbmFtZXNwYWNlIG1hdDQge1xyXG4gIGNvbnN0IEVQU0lMT04gPSAwLjAwMDAwMTtcclxuICBleHBvcnQgZnVuY3Rpb24gY3JlYXRlKCkge1xyXG4gICAgY29uc3Qgb3V0ID0gbmV3IEZsb2F0MzJBcnJheSgxNik7XHJcbiAgICBvdXRbMF0gPSAxO1xyXG4gICAgb3V0WzVdID0gMTtcclxuICAgIG91dFsxMF0gPSAxO1xyXG4gICAgb3V0WzE1XSA9IDE7XHJcbiAgICByZXR1cm4gb3V0O1xyXG4gIH1cclxuICBleHBvcnQgZnVuY3Rpb24gcGVyc3BlY3RpdmUoXHJcbiAgICBvdXQ6IGFueSxcclxuICAgIGZvdnk6IGFueSxcclxuICAgIGFzcGVjdDogYW55LFxyXG4gICAgbmVhcjogYW55LFxyXG4gICAgZmFyOiBhbnlcclxuICApIHtcclxuICAgIGxldCBmID0gMS4wIC8gTWF0aC50YW4oZm92eSAvIDIpLFxyXG4gICAgICBuZjtcclxuICAgIG91dFswXSA9IGYgLyBhc3BlY3Q7XHJcbiAgICBvdXRbMV0gPSAwO1xyXG4gICAgb3V0WzJdID0gMDtcclxuICAgIG91dFszXSA9IDA7XHJcbiAgICBvdXRbNF0gPSAwO1xyXG4gICAgb3V0WzVdID0gZjtcclxuICAgIG91dFs2XSA9IDA7XHJcbiAgICBvdXRbN10gPSAwO1xyXG4gICAgb3V0WzhdID0gMDtcclxuICAgIG91dFs5XSA9IDA7XHJcbiAgICBvdXRbMTFdID0gLTE7XHJcbiAgICBvdXRbMTJdID0gMDtcclxuICAgIG91dFsxM10gPSAwO1xyXG4gICAgb3V0WzE1XSA9IDA7XHJcblxyXG4gICAgaWYgKGZhciAhPSBudWxsICYmIGZhciAhPT0gSW5maW5pdHkpIHtcclxuICAgICAgbmYgPSAxIC8gKG5lYXIgLSBmYXIpO1xyXG4gICAgICBvdXRbMTBdID0gKGZhciArIG5lYXIpICogbmY7XHJcbiAgICAgIG91dFsxNF0gPSAyICogZmFyICogbmVhciAqIG5mO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgb3V0WzEwXSA9IC0xO1xyXG4gICAgICBvdXRbMTRdID0gLTIgKiBuZWFyO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBvdXQ7XHJcbiAgfVxyXG4gIGZ1bmN0aW9uIGlkZW50aXR5MyhvdXQ6IGFueSkge1xyXG4gICAgb3V0WzBdID0gMTtcclxuICAgIG91dFsxXSA9IDA7XHJcbiAgICBvdXRbMl0gPSAwO1xyXG4gICAgb3V0WzNdID0gMDtcclxuICAgIG91dFs0XSA9IDA7XHJcbiAgICBvdXRbNV0gPSAxO1xyXG4gICAgb3V0WzZdID0gMDtcclxuICAgIG91dFs3XSA9IDA7XHJcbiAgICBvdXRbOF0gPSAwO1xyXG4gICAgb3V0WzldID0gMDtcclxuICAgIG91dFsxMF0gPSAxO1xyXG4gICAgb3V0WzExXSA9IDA7XHJcbiAgICBvdXRbMTJdID0gMDtcclxuICAgIG91dFsxM10gPSAwO1xyXG4gICAgb3V0WzE0XSA9IDA7XHJcbiAgICBvdXRbMTVdID0gMTtcclxuICAgIHJldHVybiBvdXQ7XHJcbiAgfVxyXG4gIGV4cG9ydCBmdW5jdGlvbiBsb29rQXQob3V0OiBhbnksIGV5ZTogYW55LCBjZW50ZXI6IGFueSwgdXA6IGFueSkge1xyXG4gICAgdmFyIHgwLCB4MSwgeDIsIHkwLCB5MSwgeTIsIHowLCB6MSwgejIsIGxlbjtcclxuICAgIHZhciBleWV4ID0gZXllWzBdO1xyXG4gICAgdmFyIGV5ZXkgPSBleWVbMV07XHJcbiAgICB2YXIgZXlleiA9IGV5ZVsyXTtcclxuICAgIHZhciB1cHggPSB1cFswXTtcclxuICAgIHZhciB1cHkgPSB1cFsxXTtcclxuICAgIHZhciB1cHogPSB1cFsyXTtcclxuICAgIHZhciBjZW50ZXJ4ID0gY2VudGVyWzBdO1xyXG4gICAgdmFyIGNlbnRlcnkgPSBjZW50ZXJbMV07XHJcbiAgICB2YXIgY2VudGVyeiA9IGNlbnRlclsyXTtcclxuXHJcbiAgICBpZiAoXHJcbiAgICAgIE1hdGguYWJzKGV5ZXggLSBjZW50ZXJ4KSA8IEVQU0lMT04gJiZcclxuICAgICAgTWF0aC5hYnMoZXlleSAtIGNlbnRlcnkpIDwgRVBTSUxPTiAmJlxyXG4gICAgICBNYXRoLmFicyhleWV6IC0gY2VudGVyeikgPCBFUFNJTE9OXHJcbiAgICApIHtcclxuICAgICAgcmV0dXJuIGlkZW50aXR5MyhvdXQpO1xyXG4gICAgfVxyXG5cclxuICAgIHowID0gZXlleCAtIGNlbnRlcng7XHJcbiAgICB6MSA9IGV5ZXkgLSBjZW50ZXJ5O1xyXG4gICAgejIgPSBleWV6IC0gY2VudGVyejtcclxuICAgIGxlbiA9IDEgLyBNYXRoLmh5cG90KHowLCB6MSwgejIpO1xyXG4gICAgejAgKj0gbGVuO1xyXG4gICAgejEgKj0gbGVuO1xyXG4gICAgejIgKj0gbGVuO1xyXG4gICAgeDAgPSB1cHkgKiB6MiAtIHVweiAqIHoxO1xyXG4gICAgeDEgPSB1cHogKiB6MCAtIHVweCAqIHoyO1xyXG4gICAgeDIgPSB1cHggKiB6MSAtIHVweSAqIHowO1xyXG4gICAgbGVuID0gTWF0aC5oeXBvdCh4MCwgeDEsIHgyKTtcclxuXHJcbiAgICBpZiAoIWxlbikge1xyXG4gICAgICB4MCA9IDA7XHJcbiAgICAgIHgxID0gMDtcclxuICAgICAgeDIgPSAwO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbGVuID0gMSAvIGxlbjtcclxuICAgICAgeDAgKj0gbGVuO1xyXG4gICAgICB4MSAqPSBsZW47XHJcbiAgICAgIHgyICo9IGxlbjtcclxuICAgIH1cclxuXHJcbiAgICB5MCA9IHoxICogeDIgLSB6MiAqIHgxO1xyXG4gICAgeTEgPSB6MiAqIHgwIC0gejAgKiB4MjtcclxuICAgIHkyID0gejAgKiB4MSAtIHoxICogeDA7XHJcbiAgICBsZW4gPSBNYXRoLmh5cG90KHkwLCB5MSwgeTIpO1xyXG5cclxuICAgIGlmICghbGVuKSB7XHJcbiAgICAgIHkwID0gMDtcclxuICAgICAgeTEgPSAwO1xyXG4gICAgICB5MiA9IDA7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBsZW4gPSAxIC8gbGVuO1xyXG4gICAgICB5MCAqPSBsZW47XHJcbiAgICAgIHkxICo9IGxlbjtcclxuICAgICAgeTIgKj0gbGVuO1xyXG4gICAgfVxyXG5cclxuICAgIG91dFswXSA9IHgwO1xyXG4gICAgb3V0WzFdID0geTA7XHJcbiAgICBvdXRbMl0gPSB6MDtcclxuICAgIG91dFszXSA9IDA7XHJcbiAgICBvdXRbNF0gPSB4MTtcclxuICAgIG91dFs1XSA9IHkxO1xyXG4gICAgb3V0WzZdID0gejE7XHJcbiAgICBvdXRbN10gPSAwO1xyXG4gICAgb3V0WzhdID0geDI7XHJcbiAgICBvdXRbOV0gPSB5MjtcclxuICAgIG91dFsxMF0gPSB6MjtcclxuICAgIG91dFsxMV0gPSAwO1xyXG4gICAgb3V0WzEyXSA9IC0oeDAgKiBleWV4ICsgeDEgKiBleWV5ICsgeDIgKiBleWV6KTtcclxuICAgIG91dFsxM10gPSAtKHkwICogZXlleCArIHkxICogZXlleSArIHkyICogZXlleik7XHJcbiAgICBvdXRbMTRdID0gLSh6MCAqIGV5ZXggKyB6MSAqIGV5ZXkgKyB6MiAqIGV5ZXopO1xyXG4gICAgb3V0WzE1XSA9IDE7XHJcbiAgICByZXR1cm4gb3V0O1xyXG4gIH1cclxuXHJcbiAgZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5KG91dDogYW55LCBhOiBhbnksIGI6IGFueSkge1xyXG4gICAgbGV0IGEwMCA9IGFbMF0sXHJcbiAgICAgIGEwMSA9IGFbMV0sXHJcbiAgICAgIGEwMiA9IGFbMl0sXHJcbiAgICAgIGEwMyA9IGFbM107XHJcbiAgICBsZXQgYTEwID0gYVs0XSxcclxuICAgICAgYTExID0gYVs1XSxcclxuICAgICAgYTEyID0gYVs2XSxcclxuICAgICAgYTEzID0gYVs3XTtcclxuICAgIGxldCBhMjAgPSBhWzhdLFxyXG4gICAgICBhMjEgPSBhWzldLFxyXG4gICAgICBhMjIgPSBhWzEwXSxcclxuICAgICAgYTIzID0gYVsxMV07XHJcbiAgICBsZXQgYTMwID0gYVsxMl0sXHJcbiAgICAgIGEzMSA9IGFbMTNdLFxyXG4gICAgICBhMzIgPSBhWzE0XSxcclxuICAgICAgYTMzID0gYVsxNV07XHJcblxyXG4gICAgLy8gQ2FjaGUgb25seSB0aGUgY3VycmVudCBsaW5lIG9mIHRoZSBzZWNvbmQgbWF0cml4XHJcbiAgICBsZXQgYjAgPSBiWzBdLFxyXG4gICAgICBiMSA9IGJbMV0sXHJcbiAgICAgIGIyID0gYlsyXSxcclxuICAgICAgYjMgPSBiWzNdO1xyXG4gICAgb3V0WzBdID0gYjAgKiBhMDAgKyBiMSAqIGExMCArIGIyICogYTIwICsgYjMgKiBhMzA7XHJcbiAgICBvdXRbMV0gPSBiMCAqIGEwMSArIGIxICogYTExICsgYjIgKiBhMjEgKyBiMyAqIGEzMTtcclxuICAgIG91dFsyXSA9IGIwICogYTAyICsgYjEgKiBhMTIgKyBiMiAqIGEyMiArIGIzICogYTMyO1xyXG4gICAgb3V0WzNdID0gYjAgKiBhMDMgKyBiMSAqIGExMyArIGIyICogYTIzICsgYjMgKiBhMzM7XHJcblxyXG4gICAgYjAgPSBiWzRdO1xyXG4gICAgYjEgPSBiWzVdO1xyXG4gICAgYjIgPSBiWzZdO1xyXG4gICAgYjMgPSBiWzddO1xyXG4gICAgb3V0WzRdID0gYjAgKiBhMDAgKyBiMSAqIGExMCArIGIyICogYTIwICsgYjMgKiBhMzA7XHJcbiAgICBvdXRbNV0gPSBiMCAqIGEwMSArIGIxICogYTExICsgYjIgKiBhMjEgKyBiMyAqIGEzMTtcclxuICAgIG91dFs2XSA9IGIwICogYTAyICsgYjEgKiBhMTIgKyBiMiAqIGEyMiArIGIzICogYTMyO1xyXG4gICAgb3V0WzddID0gYjAgKiBhMDMgKyBiMSAqIGExMyArIGIyICogYTIzICsgYjMgKiBhMzM7XHJcblxyXG4gICAgYjAgPSBiWzhdO1xyXG4gICAgYjEgPSBiWzldO1xyXG4gICAgYjIgPSBiWzEwXTtcclxuICAgIGIzID0gYlsxMV07XHJcbiAgICBvdXRbOF0gPSBiMCAqIGEwMCArIGIxICogYTEwICsgYjIgKiBhMjAgKyBiMyAqIGEzMDtcclxuICAgIG91dFs5XSA9IGIwICogYTAxICsgYjEgKiBhMTEgKyBiMiAqIGEyMSArIGIzICogYTMxO1xyXG4gICAgb3V0WzEwXSA9IGIwICogYTAyICsgYjEgKiBhMTIgKyBiMiAqIGEyMiArIGIzICogYTMyO1xyXG4gICAgb3V0WzExXSA9IGIwICogYTAzICsgYjEgKiBhMTMgKyBiMiAqIGEyMyArIGIzICogYTMzO1xyXG5cclxuICAgIGIwID0gYlsxMl07XHJcbiAgICBiMSA9IGJbMTNdO1xyXG4gICAgYjIgPSBiWzE0XTtcclxuICAgIGIzID0gYlsxNV07XHJcbiAgICBvdXRbMTJdID0gYjAgKiBhMDAgKyBiMSAqIGExMCArIGIyICogYTIwICsgYjMgKiBhMzA7XHJcbiAgICBvdXRbMTNdID0gYjAgKiBhMDEgKyBiMSAqIGExMSArIGIyICogYTIxICsgYjMgKiBhMzE7XHJcbiAgICBvdXRbMTRdID0gYjAgKiBhMDIgKyBiMSAqIGExMiArIGIyICogYTIyICsgYjMgKiBhMzI7XHJcbiAgICBvdXRbMTVdID0gYjAgKiBhMDMgKyBiMSAqIGExMyArIGIyICogYTIzICsgYjMgKiBhMzM7XHJcbiAgICByZXR1cm4gb3V0O1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgY2xhc3MgSW5kZXhCdWZmZXJJbmZvIHtcclxuICBwcml2YXRlIGJ1ZmZlcjogV2ViR0xCdWZmZXIgfCBudWxsO1xyXG4gIHByaXZhdGUgY291bnQ6IG51bWJlciA9IDA7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY29udGV4dDogV2ViR0xSZW5kZXJpbmdDb250ZXh0KSB7XHJcbiAgICB0aGlzLmJ1ZmZlciA9IGNvbnRleHQuY3JlYXRlQnVmZmVyKCk7XHJcbiAgfVxyXG5cclxuICBzZXRWYWx1ZShuZXdWYWx1ZTogbnVtYmVyW10pIHtcclxuICAgIHRoaXMuY291bnQgPSBuZXdWYWx1ZS5sZW5ndGg7XHJcbiAgICB0aGlzLmNvbnRleHQuYmluZEJ1ZmZlcih0aGlzLmNvbnRleHQuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIHRoaXMuYnVmZmVyKTtcclxuICAgIHRoaXMuY29udGV4dC5idWZmZXJEYXRhKFxyXG4gICAgICB0aGlzLmNvbnRleHQuRUxFTUVOVF9BUlJBWV9CVUZGRVIsXHJcbiAgICAgIG5ldyBVaW50MTZBcnJheShuZXdWYWx1ZSksXHJcbiAgICAgIHRoaXMuY29udGV4dC5TVEFUSUNfRFJBV1xyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHNldEluZGV4QnVmZmVyKCkge1xyXG4gICAgdGhpcy5jb250ZXh0LmJpbmRCdWZmZXIodGhpcy5jb250ZXh0LkVMRU1FTlRfQVJSQVlfQlVGRkVSLCB0aGlzLmJ1ZmZlcik7XHJcbiAgfVxyXG5cclxuICBnZXRDb3VudCgpIHtcclxuICAgIHJldHVybiB0aGlzLmNvdW50O1xyXG4gIH1cclxuXHJcbiAgZGVsZXRlQnVmZmVyKCkge1xyXG4gICAgdGhpcy5jb250ZXh0LmRlbGV0ZUJ1ZmZlcih0aGlzLmJ1ZmZlcik7XHJcbiAgICB0aGlzLmJ1ZmZlciA9IG51bGw7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xyXG5pbXBvcnQgeyBEaXNwYXRjaCB9IGZyb20gXCJyZWR1eFwiO1xyXG5pbXBvcnQgeyBWaWV3ZXJBY3Rpb24gfSBmcm9tIFwiLi4vc3RvcmUvYWN0aW9uc1wiO1xyXG5pbXBvcnQgeyBWaWV3ZXJTdGF0ZSB9IGZyb20gXCIuLi9zdG9yZS9zdGF0ZVwiO1xyXG5pbXBvcnQgeyB0cmFuc2xhdGlvbnMgfSBmcm9tIFwiLi4vdHJhbnNsYXRpb25zXCI7XHJcbmltcG9ydCB7IEF0dHJpYnV0ZUJ1ZmZlclR5cGUgfSBmcm9tIFwiLi4vdXRpbHMvd2ViZ2wvYXR0cmlidXRlQnVmZmVyXCI7XHJcbmltcG9ydCB7IFNlY3Rpb25GaWVsZCB9IGZyb20gXCIuL1NlY3Rpb25GaWVsZFwiO1xyXG5pbXBvcnQgeyBTZWN0aW9uVGl0bGUgfSBmcm9tIFwiLi9TZWN0aW9uVGl0bGVcIjtcclxuXHJcbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZTogVmlld2VyU3RhdGUpID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAgdmFsdWVzOiBzdGF0ZS5hdHRyaWJ1dGVCdWZmZXJWYWx1ZXMsXHJcbiAgfTtcclxufTtcclxuXHJcbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IChkaXNwYXRjaDogRGlzcGF0Y2g8Vmlld2VyQWN0aW9uPikgPT4ge1xyXG4gIHJldHVybiB7XHJcbiAgICBzZXRWYWx1ZTogKG5hbWU6IHN0cmluZywgdHlwZTogbnVtYmVyLCB2YWx1ZTogc3RyaW5nKSA9PlxyXG4gICAgICBkaXNwYXRjaCh7IHR5cGU6IFwiU0VUX0FUVFJJQlVURV9CVUZGRVJcIiwgcGF5bG9hZDogeyBuYW1lLCB0eXBlLCB2YWx1ZSB9IH0pLFxyXG4gIH07XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBBdHRyaWJ1dGVCdWZmZXJGaWVsZEluZm8gPSB7IG5hbWU6IHN0cmluZzsgdHlwZTogQXR0cmlidXRlQnVmZmVyVHlwZSB9O1xyXG5cclxuZXhwb3J0IGNvbnN0IEF0dHJpYnV0ZUJ1ZmZlclNlY3Rpb24gPSBSZWFjdC5tZW1vKFxyXG4gIGNvbm5lY3QoXHJcbiAgICBtYXBTdGF0ZVRvUHJvcHMsXHJcbiAgICBtYXBEaXNwYXRjaFRvUHJvcHNcclxuICApKFxyXG4gICAgKHByb3BzOiB7XHJcbiAgICAgIGF0dHJpYnV0ZUJ1ZmZlckZpZWxkczogQXR0cmlidXRlQnVmZmVyRmllbGRJbmZvW107XHJcbiAgICAgIHZhbHVlczogeyBba2V5OiBzdHJpbmddOiB7IHR5cGU6IG51bWJlcjsgdmFsdWU6IGFueSB9IH07XHJcbiAgICAgIHNldFZhbHVlOiAobmFtZTogc3RyaW5nLCB0eXBlOiBudW1iZXIsIHZhbHVlOiBzdHJpbmcpID0+IHZvaWQ7XHJcbiAgICB9KSA9PiB7XHJcbiAgICAgIGNvbnN0IHsgYXR0cmlidXRlQnVmZmVyRmllbGRzLCB2YWx1ZXMsIHNldFZhbHVlIH0gPSBwcm9wcztcclxuXHJcbiAgICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ2aWV3ZXItb3B0aW9ucy1zZWN0aW9uXCI+XHJcbiAgICAgICAgICA8U2VjdGlvblRpdGxlIHRleHQ9e3RyYW5zbGF0aW9ucy5hdHRyaWJ1dGVCdWZmZXJzfT48L1NlY3Rpb25UaXRsZT5cclxuICAgICAgICAgIHthdHRyaWJ1dGVCdWZmZXJGaWVsZHMubWFwKGFiaSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgPFNlY3Rpb25GaWVsZCB0ZXh0PXthYmkubmFtZX0+XHJcbiAgICAgICAgICAgICAgICA8aW5wdXRcclxuICAgICAgICAgICAgICAgICAgdmFsdWU9e3ZhbHVlc1thYmkubmFtZV0/LnZhbHVlfVxyXG4gICAgICAgICAgICAgICAgICBvbkNoYW5nZT17ZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9nZXRmcm9tIGNhY2hlIGFuZCB1cGRhdGVcclxuICAgICAgICAgICAgICAgICAgICBzZXRWYWx1ZShhYmkubmFtZSwgMiwgZS50YXJnZXQudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgICAvL29uQmx1clxyXG4gICAgICAgICAgICAgICAgPjwvaW5wdXQ+XHJcbiAgICAgICAgICAgICAgPC9TZWN0aW9uRmllbGQ+XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICB9KX1cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgKTtcclxuICAgIH1cclxuICApXHJcbik7XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgdHJhbnNsYXRpb25zIH0gZnJvbSBcIi4uL3RyYW5zbGF0aW9uc1wiO1xyXG5pbXBvcnQgeyBTZWN0aW9uVGl0bGUgfSBmcm9tIFwiLi9TZWN0aW9uVGl0bGVcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBEcmF3T3B0aW9uc1NlY3Rpb24gPSBSZWFjdC5tZW1vKCgpID0+IHtcclxuICByZXR1cm4gKFxyXG4gICAgPGRpdiBjbGFzc05hbWU9XCJ2aWV3ZXItb3B0aW9ucy1zZWN0aW9uXCI+XHJcbiAgICAgIDxTZWN0aW9uVGl0bGUgdGV4dD17dHJhbnNsYXRpb25zLmRyYXdPcHRpb25zfT48L1NlY3Rpb25UaXRsZT5cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn0pO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IHJhbmdlIH0gZnJvbSBcIi4uLy4uLy4uLy4uL2NvbW1vbi9hcnJheVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IE11bHRpTnVtYmVySW5wdXQgPSBSZWFjdC5tZW1vKFxyXG4gIChwcm9wczoge1xyXG4gICAgcm93czogbnVtYmVyO1xyXG4gICAgY29sdW1uczogbnVtYmVyO1xyXG4gICAgdmFsdWU6IG51bWJlcltdO1xyXG4gICAgb25DaGFuZ2U6IChuZXdWYWx1ZTogbnVtYmVyW10pID0+IHZvaWQ7XHJcbiAgICByZWFkb25seT86IGJvb2xlYW47XHJcbiAgfSkgPT4ge1xyXG4gICAgY29uc3QgeyByb3dzLCBjb2x1bW5zLCB2YWx1ZSA9IFtdLCBvbkNoYW5nZSwgcmVhZG9ubHkgPSBmYWxzZSB9ID0gcHJvcHM7XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJlZGl0LWlucHV0LWdyaWRcIj5cclxuICAgICAgICB7cmFuZ2UoMCwgcm93cykubWFwKHJvdyA9PiAoXHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImVkaXQtaW5wdXQtcm93XCI+XHJcbiAgICAgICAgICAgIHtyYW5nZSgwLCBjb2x1bW5zKS5tYXAoY29sdW1uID0+IHtcclxuICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IHJvdyAqIGNvbHVtbnMgKyBjb2x1bW47XHJcbiAgICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJlZGl0LWlucHV0XCJcclxuICAgICAgICAgICAgICAgICAgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXtyZWFkb25seX1cclxuICAgICAgICAgICAgICAgICAgdmFsdWU9e3ZhbHVlW2luZGV4XX1cclxuICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2UgPT5cclxuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZSh2YWx1ZS5tYXAoKHYsIGkpID0+IChpID09PSBpbmRleCA/IE51bWJlcihlLnRhcmdldC52YWx1ZSkgOiB2KSkpXHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgID48L2lucHV0PlxyXG4gICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH0pfVxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKSl9XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxuICB9XHJcbik7XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xyXG5pbXBvcnQgeyBEaXNwYXRjaCB9IGZyb20gXCJyZWR1eFwiO1xyXG5pbXBvcnQgeyB2aWV3ZXJFbmRwb2ludCB9IGZyb20gXCIuLi8uLi8uLi9jb21tb24vY29tbXVuaWNhdGlvbi92aWV3ZXJFbmRwb2ludFwiO1xyXG5pbXBvcnQgeyBzaGFkZXJFeHRlbnNpb25zIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xyXG5pbXBvcnQgeyBWaWV3ZXJBY3Rpb24gfSBmcm9tIFwiLi4vc3RvcmUvYWN0aW9uc1wiO1xyXG5pbXBvcnQgeyBWaWV3ZXJTdGF0ZSB9IGZyb20gXCIuLi9zdG9yZS9zdGF0ZVwiO1xyXG5pbXBvcnQgeyB0cmFuc2xhdGlvbnMgfSBmcm9tIFwiLi4vdHJhbnNsYXRpb25zXCI7XHJcbmltcG9ydCB7IERyb3Bkb3duLCBEcm9wZG93bk9wdGlvbiB9IGZyb20gXCIuL0Ryb3Bkb3duXCI7XHJcbmltcG9ydCB7IFNlY3Rpb25GaWVsZCBhcyBTZWN0aW9uRmllbGQgfSBmcm9tIFwiLi9TZWN0aW9uRmllbGRcIjtcclxuaW1wb3J0IHsgU2VjdGlvblRpdGxlIH0gZnJvbSBcIi4vU2VjdGlvblRpdGxlXCI7XHJcblxyXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGU6IFZpZXdlclN0YXRlKSA9PiB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHNlbGVjdGVkVmVydGV4RmlsZUlkOiBzdGF0ZS52ZXJ0ZXhGaWxlUGF0aCxcclxuICAgIHNlbGVjdGVkRnJhZ21lbnRGaWxlSWQ6IHN0YXRlLmZyYWdtZW50RmlsZVBhdGgsXHJcbiAgfTtcclxufTtcclxuXHJcbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IChkaXNwYXRjaDogRGlzcGF0Y2g8Vmlld2VyQWN0aW9uPikgPT4ge1xyXG4gIHJldHVybiB7XHJcbiAgICBzZXRTZWxlY3RlZFZlcnRleEZpbGVJZDogKHZhbHVlOiBzdHJpbmcgfCBudWxsKSA9PlxyXG4gICAgICBkaXNwYXRjaCh7IHR5cGU6IFwiU0VUX1ZFUlRFWF9GSUxFX1BBVEhcIiwgcGF5bG9hZDogeyBwYXRoOiB2YWx1ZSB9IH0pLFxyXG4gICAgc2V0U2VsZWN0ZWRGcmFnbWVudEZpbGVJZDogKHZhbHVlOiBzdHJpbmcgfCBudWxsKSA9PlxyXG4gICAgICBkaXNwYXRjaCh7IHR5cGU6IFwiU0VUX0ZSQUdNRU5UX0ZJTEVfUEFUSFwiLCBwYXlsb2FkOiB7IHBhdGg6IHZhbHVlIH0gfSksXHJcbiAgfTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBTaGFkZXJzU2VsZWN0b3JTZWN0aW9uID0gUmVhY3QubWVtbyhcclxuICBjb25uZWN0KFxyXG4gICAgbWFwU3RhdGVUb1Byb3BzLFxyXG4gICAgbWFwRGlzcGF0Y2hUb1Byb3BzXHJcbiAgKShcclxuICAgIChwcm9wczoge1xyXG4gICAgICBzZWxlY3RlZFZlcnRleEZpbGVJZDogc3RyaW5nO1xyXG4gICAgICBzZWxlY3RlZEZyYWdtZW50RmlsZUlkOiBzdHJpbmc7XHJcbiAgICAgIHNldFNlbGVjdGVkVmVydGV4RmlsZUlkOiAodmFsdWU6IHN0cmluZyB8IG51bGwpID0+IHZvaWQ7XHJcbiAgICAgIHNldFNlbGVjdGVkRnJhZ21lbnRGaWxlSWQ6ICh2YWx1ZTogc3RyaW5nIHwgbnVsbCkgPT4gdm9pZDtcclxuICAgIH0pID0+IHtcclxuICAgICAgY29uc3Qge1xyXG4gICAgICAgIHNlbGVjdGVkVmVydGV4RmlsZUlkLFxyXG4gICAgICAgIHNlbGVjdGVkRnJhZ21lbnRGaWxlSWQsXHJcbiAgICAgICAgc2V0U2VsZWN0ZWRWZXJ0ZXhGaWxlSWQsXHJcbiAgICAgICAgc2V0U2VsZWN0ZWRGcmFnbWVudEZpbGVJZCxcclxuICAgICAgfSA9IHByb3BzO1xyXG5cclxuICAgICAgY29uc3QgW3NoYWRlckZpbGVPcHRpb25zLCBzZXRTaGFkZXJGaWxlT3B0aW9uc10gPSBSZWFjdC51c2VTdGF0ZTxEcm9wZG93bk9wdGlvbltdPihbXSk7XHJcblxyXG4gICAgICBjb25zdCBzeW5jU2hhZGVyRG9jdW1lbnRzID0gUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4ge1xyXG4gICAgICAgIHZpZXdlckVuZHBvaW50LmdldFdvcmtzcGFjZUZpbGVzT2ZUeXBlcyhzaGFkZXJFeHRlbnNpb25zKS50aGVuKGZpbGVzID0+IHtcclxuICAgICAgICAgIHNldFNoYWRlckZpbGVPcHRpb25zKFxyXG4gICAgICAgICAgICBmaWxlcy5tYXAoZmlsZSA9PiAoe1xyXG4gICAgICAgICAgICAgIGlkOiBmaWxlLmZpbGVQYXRoLFxyXG4gICAgICAgICAgICAgIGRpc3BsYXk6IGZpbGUuZmlsZU5hbWUsXHJcbiAgICAgICAgICAgIH0pKVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSwgW10pO1xyXG5cclxuICAgICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHN5bmNTaGFkZXJEb2N1bWVudHMoKSwgW10pO1xyXG5cclxuICAgICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInZpZXdlci1vcHRpb25zLXNlY3Rpb25cIj5cclxuICAgICAgICAgIDxTZWN0aW9uVGl0bGUgdGV4dD17dHJhbnNsYXRpb25zLnNoYWRlcnN9PlxyXG4gICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e3N5bmNTaGFkZXJEb2N1bWVudHN9PlN5bmM8L2J1dHRvbj5cclxuICAgICAgICAgIDwvU2VjdGlvblRpdGxlPlxyXG4gICAgICAgICAgPFNlY3Rpb25GaWVsZCB0ZXh0PXt0cmFuc2xhdGlvbnMudmVydGV4U2hhZGVyfT5cclxuICAgICAgICAgICAgPERyb3Bkb3duXHJcbiAgICAgICAgICAgICAgc2VsZWN0ZWRJdGVtSWQ9e3NlbGVjdGVkVmVydGV4RmlsZUlkfVxyXG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtzZXRTZWxlY3RlZFZlcnRleEZpbGVJZH1cclxuICAgICAgICAgICAgICBvcHRpb25zPXtzaGFkZXJGaWxlT3B0aW9uc31cclxuICAgICAgICAgICAgPjwvRHJvcGRvd24+XHJcbiAgICAgICAgICA8L1NlY3Rpb25GaWVsZD5cclxuICAgICAgICAgIDxTZWN0aW9uRmllbGQgdGV4dD17dHJhbnNsYXRpb25zLmZyYWdtZW50U2hhZGVyfT5cclxuICAgICAgICAgICAgPERyb3Bkb3duXHJcbiAgICAgICAgICAgICAgc2VsZWN0ZWRJdGVtSWQ9e3NlbGVjdGVkRnJhZ21lbnRGaWxlSWR9XHJcbiAgICAgICAgICAgICAgb25DaGFuZ2U9e3NldFNlbGVjdGVkRnJhZ21lbnRGaWxlSWR9XHJcbiAgICAgICAgICAgICAgb3B0aW9ucz17c2hhZGVyRmlsZU9wdGlvbnN9XHJcbiAgICAgICAgICAgID48L0Ryb3Bkb3duPlxyXG4gICAgICAgICAgPC9TZWN0aW9uRmllbGQ+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgKVxyXG4pO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcclxufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBvW2syXSA9IG1ba107XHJcbn0pKTtcclxudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9Db21wb25lbnRzXCIpLCBleHBvcnRzKTtcclxuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0hvb2tzXCIpLCBleHBvcnRzKTtcclxuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0NvbW1vblwiKSwgZXhwb3J0cyk7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xyXG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIG9bazJdID0gbVtrXTtcclxufSkpO1xyXG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL1ZpcnR1YWxpemVkTGlzdFwiKSwgZXhwb3J0cyk7XHJcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9WaXJ0dWFsaXplZExhenlMb2FkaW5nTGlzdFwiKSwgZXhwb3J0cyk7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuVmlydHVhbGl6ZWRMaXN0ID0gdm9pZCAwO1xyXG52YXIgcmVhY3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xyXG52YXIgcmVhY3Rfd2luZG93XzEgPSByZXF1aXJlKFwicmVhY3Qtd2luZG93XCIpO1xyXG52YXIgSG9va3NfMSA9IHJlcXVpcmUoXCIuLi9Ib29rc1wiKTtcclxudmFyIG1lbW9pemVkUm93ID0gcmVhY3RfMS5kZWZhdWx0Lm1lbW8oZnVuY3Rpb24gTGlzdFJvdyhwcm9wcykge1xyXG4gICAgdmFyIGluZGV4ID0gcHJvcHMuaW5kZXgsIHN0eWxlID0gcHJvcHMuc3R5bGUsIGl0ZW1SZW5kZXJlciA9IHByb3BzLmRhdGEuaXRlbVJlbmRlcmVyO1xyXG4gICAgcmV0dXJuIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgc3R5bGU6IHN0eWxlIH0sIGl0ZW1SZW5kZXJlcihpbmRleCkpO1xyXG59KTtcclxuZnVuY3Rpb24gVmlydHVhbGl6ZWRMaXN0KHByb3BzKSB7XHJcbiAgICB2YXIgaXRlbUNvdW50ID0gcHJvcHMuaXRlbUNvdW50LCBpdGVtSGVpZ2h0ID0gcHJvcHMuaXRlbUhlaWdodCwgbWF4SGVpZ2h0ID0gcHJvcHMubWF4SGVpZ2h0LCBpdGVtUmVuZGVyZXIgPSBwcm9wcy5pdGVtUmVuZGVyZXIsIF9hID0gcHJvcHMud2lkdGgsIHdpZHRoID0gX2EgPT09IHZvaWQgMCA/IFwiMTAwJVwiIDogX2EsIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZTtcclxuICAgIHZhciBoZWlnaHQgPSBNYXRoLm1pbihpdGVtQ291bnQgKiBpdGVtSGVpZ2h0LCBtYXhIZWlnaHQpO1xyXG4gICAgdmFyIGl0ZW1EYXRhID0gcmVhY3RfMS5kZWZhdWx0LnVzZU1lbW8oZnVuY3Rpb24gKCkgeyByZXR1cm4gKHtcclxuICAgICAgICBpdGVtUmVuZGVyZXI6IGl0ZW1SZW5kZXJlcixcclxuICAgIH0pOyB9LCBbaXRlbVJlbmRlcmVyXSk7XHJcbiAgICB2YXIgbGlzdFJlZiA9IHJlYWN0XzEuZGVmYXVsdC51c2VSZWYobnVsbCk7XHJcbiAgICBIb29rc18xLnVzZVNjcm9sbExpc3RUb0luZGV4KGxpc3RSZWYsIHByb3BzLmhpZ2hsaWdodGVkSW5kZXgpO1xyXG4gICAgcmV0dXJuIChyZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChyZWFjdF93aW5kb3dfMS5GaXhlZFNpemVMaXN0LCB7IGNsYXNzTmFtZTogY2xhc3NOYW1lLCByZWY6IGxpc3RSZWYsIGhlaWdodDogaGVpZ2h0LCBpdGVtQ291bnQ6IGl0ZW1Db3VudCwgaXRlbVNpemU6IGl0ZW1IZWlnaHQsIHdpZHRoOiB3aWR0aCwgaXRlbURhdGE6IGl0ZW1EYXRhIH0sIG1lbW9pemVkUm93KSk7XHJcbn1cclxuZXhwb3J0cy5WaXJ0dWFsaXplZExpc3QgPSBWaXJ0dWFsaXplZExpc3Q7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMudXNlRHJvcGRvd25TdGF0ZSA9IHZvaWQgMDtcclxudmFyIHJlYWN0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcclxudmFyIHJlZHVjZXJfMSA9IHJlcXVpcmUoXCIuLi9Db21tb24vcmVkdWNlclwiKTtcclxudmFyIGhlbHBlcnNfMSA9IHJlcXVpcmUoXCIuLi9Db21tb24vaGVscGVyc1wiKTtcclxudmFyIHVzZVVuaW9uU3RhdGVfMSA9IHJlcXVpcmUoXCIuL3VzZVVuaW9uU3RhdGVcIik7XHJcbnZhciBkZWZhdWx0SW5pdGlhbFN0YXRlID0ge1xyXG4gICAgc2VsZWN0ZWRJbmRleGVzOiBbXSxcclxuICAgIGhpZ2hsaWdodGVkSW5kZXg6IG51bGwsXHJcbiAgICBpc09wZW46IGZhbHNlLFxyXG59O1xyXG52YXIgZGVmYXVsdERyb3Bkb3duUmVkdWNlciA9IGZ1bmN0aW9uIChzdGF0ZSwgaXRlbUNvdW50LCBhY3Rpb24pIHsgcmV0dXJuIHJlZHVjZXJfMS5yZWR1Y2VyKHN0YXRlLCBpdGVtQ291bnQsIGFjdGlvbik7IH07XHJcbmV4cG9ydHMudXNlRHJvcGRvd25TdGF0ZSA9IGZ1bmN0aW9uIChpdGVtQ291bnQsIGV4dGVybmFsU3RhdGUsIGRlZmF1bHRJbnRlcm5hbFN0YXRlLCBvbkNoYW5nZSwgcmVkdWNlcikge1xyXG4gICAgaWYgKHJlZHVjZXIgPT09IHZvaWQgMCkgeyByZWR1Y2VyID0gZGVmYXVsdERyb3Bkb3duUmVkdWNlcjsgfVxyXG4gICAgdmFyIHN0YXRlUmVkdWNlciA9IHJlYWN0XzEuZGVmYXVsdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoc3RhdGUsIGFjdGlvbikge1xyXG4gICAgICAgIHJldHVybiByZWR1Y2VyKHN0YXRlLCBpdGVtQ291bnQsIGFjdGlvbik7XHJcbiAgICB9LCBbaXRlbUNvdW50LCByZWR1Y2VyXSk7XHJcbiAgICB2YXIgaW5pdGlhbEludGVybmFsU3RhdGUgPSBkZWZhdWx0SW50ZXJuYWxTdGF0ZVxyXG4gICAgICAgID8gaGVscGVyc18xLm92ZXJyaWRlRGVmaW5lZFByb3BzT25seShkZWZhdWx0SW5pdGlhbFN0YXRlLCBkZWZhdWx0SW50ZXJuYWxTdGF0ZSlcclxuICAgICAgICA6IGRlZmF1bHRJbml0aWFsU3RhdGU7XHJcbiAgICByZXR1cm4gdXNlVW5pb25TdGF0ZV8xLnVzZVVuaW9uU3RhdGUoaW5pdGlhbEludGVybmFsU3RhdGUsIGV4dGVybmFsU3RhdGUsIHN0YXRlUmVkdWNlciwgb25DaGFuZ2UpO1xyXG59O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnVzZVNjcm9sbExpc3RUb0luZGV4ID0gdm9pZCAwO1xyXG52YXIgcmVhY3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xyXG52YXIgdHlwZU5hcnJvd2luZ18xID0gcmVxdWlyZShcIi4uL0NvbW1vbi90eXBlTmFycm93aW5nXCIpO1xyXG5leHBvcnRzLnVzZVNjcm9sbExpc3RUb0luZGV4ID0gZnVuY3Rpb24gKGVsZW1lbnRSZWYsIGluZGV4KSB7XHJcbiAgICByZWFjdF8xLmRlZmF1bHQudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoaW5kZXggIT09IG51bGwgJiYgZWxlbWVudFJlZi5jdXJyZW50KSB7XHJcbiAgICAgICAgICAgIHZhciBlbGVtZW50ID0gZWxlbWVudFJlZi5jdXJyZW50O1xyXG4gICAgICAgICAgICB2YXIgc2Nyb2xsZXIgPSB0eXBlTmFycm93aW5nXzEuaGFzUHJvcGVydHkoZWxlbWVudCwgXCJfbGlzdFJlZlwiKVxyXG4gICAgICAgICAgICAgICAgPyBlbGVtZW50Ll9saXN0UmVmXHJcbiAgICAgICAgICAgICAgICA6IGVsZW1lbnQ7XHJcbiAgICAgICAgICAgIHNjcm9sbGVyLnNjcm9sbFRvSXRlbShpbmRleCwgXCJzbWFydFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9LCBbaW5kZXhdKTtcclxufTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy51c2VEcm9wZG93bkNsb3NlV2hlbkNsaWNrZWRPdXRzaWRlID0gdm9pZCAwO1xyXG52YXIgcmVhY3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xyXG52YXIgXzEgPSByZXF1aXJlKFwiLlwiKTtcclxuZXhwb3J0cy51c2VEcm9wZG93bkNsb3NlV2hlbkNsaWNrZWRPdXRzaWRlID0gZnVuY3Rpb24gKGVsZW1lbnRSZWYsIGRpc3BhdGNoKSB7XHJcbiAgICB2YXIgY2xpY2tIYW5kbGVyID0gcmVhY3RfMS5kZWZhdWx0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRpc3BhdGNoKFtcIkNsb3NlTGlzdFwiXSk7IH0sIFtcclxuICAgICAgICBkaXNwYXRjaCxcclxuICAgIF0pO1xyXG4gICAgXzEudXNlQ2xpY2tlZE91dHNpZGVIYW5kbGVyKGVsZW1lbnRSZWYsIGNsaWNrSGFuZGxlcik7XHJcbn07XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMudXNlRHJvcGRvd25DbG9zZVdoZW5Gb2N1c091dCA9IHZvaWQgMDtcclxudmFyIHJlYWN0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcclxudmFyIHVzZUZvY3VzT3V0SGFuZGxlcl8xID0gcmVxdWlyZShcIi4vdXNlRm9jdXNPdXRIYW5kbGVyXCIpO1xyXG5leHBvcnRzLnVzZURyb3Bkb3duQ2xvc2VXaGVuRm9jdXNPdXQgPSBmdW5jdGlvbiAoZWxlbWVudFJlZiwgZGlzcGF0Y2gpIHtcclxuICAgIHZhciBjbGlja0hhbmRsZXIgPSByZWFjdF8xLmRlZmF1bHQudXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkgeyByZXR1cm4gZGlzcGF0Y2goW1wiQ2xvc2VMaXN0XCJdKTsgfSwgW1xyXG4gICAgICAgIGRpc3BhdGNoLFxyXG4gICAgXSk7XHJcbiAgICB1c2VGb2N1c091dEhhbmRsZXJfMS51c2VGb2N1c091dEhhbmRsZXIoZWxlbWVudFJlZiwgY2xpY2tIYW5kbGVyKTtcclxufTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy51c2VGb2N1c09uU3RhdGVDaGFuZ2UgPSB2b2lkIDA7XHJcbnZhciByZWFjdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XHJcbnZhciB1c2VQcmV2aW91c1ZhbHVlXzEgPSByZXF1aXJlKFwiLi91c2VQcmV2aW91c1ZhbHVlXCIpO1xyXG5leHBvcnRzLnVzZUZvY3VzT25TdGF0ZUNoYW5nZSA9IGZ1bmN0aW9uIChlbGVtZW50UmVmLCBzdGF0ZSwgdmFsdWVUb1RyaWdnZXIpIHtcclxuICAgIHZhciBpbml0aWFsUmVuZGVyID0gcmVhY3RfMS5kZWZhdWx0LnVzZVJlZih0cnVlKTtcclxuICAgIHZhciBwcmV2aW91c1N0YXRlID0gdXNlUHJldmlvdXNWYWx1ZV8xLnVzZVByZXZpb3VzVmFsdWUoc3RhdGUpO1xyXG4gICAgcmVhY3RfMS5kZWZhdWx0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHN0YXRlICE9PSBwcmV2aW91c1N0YXRlICYmXHJcbiAgICAgICAgICAgIHN0YXRlID09PSB2YWx1ZVRvVHJpZ2dlciAmJlxyXG4gICAgICAgICAgICAhaW5pdGlhbFJlbmRlci5jdXJyZW50KSB7XHJcbiAgICAgICAgICAgIGlmIChlbGVtZW50UmVmLmN1cnJlbnQgIT09IG51bGwpXHJcbiAgICAgICAgICAgICAgICBlbGVtZW50UmVmLmN1cnJlbnQuZm9jdXMoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaW5pdGlhbFJlbmRlci5jdXJyZW50ID0gZmFsc2U7XHJcbiAgICB9LCBbc3RhdGVdKTtcclxufTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy51c2VDbGlja2VkT3V0c2lkZUhhbmRsZXIgPSB2b2lkIDA7XHJcbnZhciByZWFjdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XHJcbmV4cG9ydHMudXNlQ2xpY2tlZE91dHNpZGVIYW5kbGVyID0gZnVuY3Rpb24gKGVsZW1lbnRSZWYsIGhhbmRsZXIpIHtcclxuICAgIHJlYWN0XzEuZGVmYXVsdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIG1vdXNlSGFuZGxlcihlKSB7XHJcbiAgICAgICAgICAgIHZhciBfYTtcclxuICAgICAgICAgICAgaWYgKCEoKF9hID0gZWxlbWVudFJlZi5jdXJyZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY29udGFpbnMoZS50YXJnZXQpKSkge1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlcigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgbW91c2VIYW5kbGVyKTtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIG1vdXNlSGFuZGxlcik7XHJcbiAgICAgICAgfTtcclxuICAgIH0sIFtoYW5kbGVyXSk7XHJcbn07XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMudXNlQ2h1bmtMb2FkZXIgPSB2b2lkIDA7XHJcbnZhciByZWFjdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XHJcbmV4cG9ydHMudXNlQ2h1bmtMb2FkZXIgPSBmdW5jdGlvbiAoaXRlbUNvdW50LCBsb2FkKSB7XHJcbiAgICB2YXIgaXRlbXMgPSByZWFjdF8xLmRlZmF1bHQudXNlTWVtbyhmdW5jdGlvbiAoKSB7IHJldHVybiBBcnJheShpdGVtQ291bnQpLmZpbGwoeyB2YWx1ZTogbnVsbCwgaXNMb2FkZWQ6IGZhbHNlIH0pOyB9LCBbaXRlbUNvdW50XSk7XHJcbiAgICB2YXIgaXNJdGVtTG9hZGVkID0gcmVhY3RfMS5kZWZhdWx0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChpbmRleCkgeyByZXR1cm4gaXRlbXNbaW5kZXhdLmlzTG9hZGVkOyB9LCBbaXRlbXNdKTtcclxuICAgIHZhciBsb2FkTW9yZUl0ZW1zID0gcmVhY3RfMS5kZWZhdWx0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChzdGFydEluZGV4LCBlbmRJbmRleCkge1xyXG4gICAgICAgIHJldHVybiBsb2FkKHN0YXJ0SW5kZXgsIGVuZEluZGV4KS50aGVuKGZ1bmN0aW9uIChuZXdJdGVtcykge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpdGVtc0luZGV4ID0gc3RhcnRJbmRleCwgaW5kZXggPSAwOyBpdGVtc0luZGV4IDw9IGVuZEluZGV4OyBpdGVtc0luZGV4KyssIGluZGV4KyspIHtcclxuICAgICAgICAgICAgICAgIGl0ZW1zW2l0ZW1zSW5kZXhdID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBuZXdJdGVtc1tpbmRleF0sXHJcbiAgICAgICAgICAgICAgICAgICAgaXNMb2FkZWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LCBbaXRlbXNdKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgaXRlbXM6IGl0ZW1zLFxyXG4gICAgICAgIGlzSXRlbUxvYWRlZDogaXNJdGVtTG9hZGVkLFxyXG4gICAgICAgIGxvYWRNb3JlSXRlbXM6IGxvYWRNb3JlSXRlbXMsXHJcbiAgICB9O1xyXG59O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnVzZURyb3Bkb3duTGlzdEtleWJvYXJkTmF2aWdhdG9yID0gdm9pZCAwO1xyXG52YXIgcmVhY3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xyXG52YXIga2V5Ym9hcmROYXZpZ2F0b3JfMSA9IHJlcXVpcmUoXCIuLi9Db21tb24va2V5Ym9hcmROYXZpZ2F0b3JcIik7XHJcbmV4cG9ydHMudXNlRHJvcGRvd25MaXN0S2V5Ym9hcmROYXZpZ2F0b3IgPSBmdW5jdGlvbiAoZGlzcGF0Y2gpIHsgcmV0dXJuIHJlYWN0XzEuZGVmYXVsdC51c2VNZW1vKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGtleWJvYXJkTmF2aWdhdG9yXzEuY3JlYXRlTGlzdEtleWJvYXJkTmF2aWdhdG9yKGRpc3BhdGNoKTsgfSwgW2Rpc3BhdGNoXSk7IH07XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuVmlydHVhbGl6ZWRMYXp5TG9hZGluZ0xpc3QgPSB2b2lkIDA7XHJcbnZhciByZWFjdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XHJcbnZhciByZWFjdF93aW5kb3dfMSA9IHJlcXVpcmUoXCJyZWFjdC13aW5kb3dcIik7XHJcbnZhciBIb29rc18xID0gcmVxdWlyZShcIi4uL0hvb2tzXCIpO1xyXG52YXIgcmVhY3Rfd2luZG93X2luZmluaXRlX2xvYWRlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC13aW5kb3ctaW5maW5pdGUtbG9hZGVyXCIpKTtcclxudmFyIG1lbW9pemVkUm93ID0gcmVhY3RfMS5kZWZhdWx0Lm1lbW8oZnVuY3Rpb24gUm93KHByb3BzKSB7XHJcbiAgICB2YXIgaW5kZXggPSBwcm9wcy5pbmRleCwgc3R5bGUgPSBwcm9wcy5zdHlsZSwgX2EgPSBwcm9wcy5kYXRhLCBpdGVtUmVuZGVyZXIgPSBfYS5pdGVtUmVuZGVyZXIsIGlzSXRlbUxvYWRlZCA9IF9hLmlzSXRlbUxvYWRlZDtcclxuICAgIHJldHVybiByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IHN0eWxlOiBzdHlsZSB9LCBpdGVtUmVuZGVyZXIoaW5kZXgsIGlzSXRlbUxvYWRlZChpbmRleCkpKTtcclxufSk7XHJcbmZ1bmN0aW9uIFZpcnR1YWxpemVkTGF6eUxvYWRpbmdMaXN0KHByb3BzKSB7XHJcbiAgICB2YXIgaXRlbUNvdW50ID0gcHJvcHMuaXRlbUNvdW50LCBpdGVtSGVpZ2h0ID0gcHJvcHMuaXRlbUhlaWdodCwgbWF4SGVpZ2h0ID0gcHJvcHMubWF4SGVpZ2h0LCBpdGVtUmVuZGVyZXIgPSBwcm9wcy5pdGVtUmVuZGVyZXIsIF9hID0gcHJvcHMud2lkdGgsIHdpZHRoID0gX2EgPT09IHZvaWQgMCA/IFwiMTAwJVwiIDogX2EsIGlzSXRlbUxvYWRlZCA9IHByb3BzLmlzSXRlbUxvYWRlZCwgbG9hZE1vcmVJdGVtcyA9IHByb3BzLmxvYWRNb3JlSXRlbXMsIGhpZ2hsaWdodGVkSW5kZXggPSBwcm9wcy5oaWdobGlnaHRlZEluZGV4LCBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWU7XHJcbiAgICB2YXIgaGVpZ2h0ID0gTWF0aC5taW4oaXRlbUNvdW50ICogaXRlbUhlaWdodCwgbWF4SGVpZ2h0KTtcclxuICAgIHZhciBpdGVtRGF0YSA9IHJlYWN0XzEuZGVmYXVsdC51c2VNZW1vKGZ1bmN0aW9uICgpIHsgcmV0dXJuICh7XHJcbiAgICAgICAgaXRlbVJlbmRlcmVyOiBpdGVtUmVuZGVyZXIsXHJcbiAgICAgICAgaXNJdGVtTG9hZGVkOiBpc0l0ZW1Mb2FkZWQsXHJcbiAgICB9KTsgfSwgW2l0ZW1SZW5kZXJlciwgaXNJdGVtTG9hZGVkXSk7XHJcbiAgICB2YXIgbG9hZGVyUmVmID0gcmVhY3RfMS5kZWZhdWx0LnVzZVJlZihudWxsKTtcclxuICAgIEhvb2tzXzEudXNlU2Nyb2xsTGlzdFRvSW5kZXgobG9hZGVyUmVmLCBoaWdobGlnaHRlZEluZGV4KTtcclxuICAgIHJldHVybiAocmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQocmVhY3Rfd2luZG93X2luZmluaXRlX2xvYWRlcl8xLmRlZmF1bHQsIHsgcmVmOiBsb2FkZXJSZWYsIGlzSXRlbUxvYWRlZDogaXNJdGVtTG9hZGVkLCBpdGVtQ291bnQ6IGl0ZW1Db3VudCwgbG9hZE1vcmVJdGVtczogbG9hZE1vcmVJdGVtcyB9LCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICB2YXIgb25JdGVtc1JlbmRlcmVkID0gX2Eub25JdGVtc1JlbmRlcmVkLCByZWYgPSBfYS5yZWY7XHJcbiAgICAgICAgcmV0dXJuIChyZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChyZWFjdF93aW5kb3dfMS5GaXhlZFNpemVMaXN0LCB7IGNsYXNzTmFtZTogY2xhc3NOYW1lLCByZWY6IHJlZiwgaGVpZ2h0OiBoZWlnaHQsIGl0ZW1Db3VudDogaXRlbUNvdW50LCBpdGVtU2l6ZTogaXRlbUhlaWdodCwgb25JdGVtc1JlbmRlcmVkOiBvbkl0ZW1zUmVuZGVyZWQsIHdpZHRoOiB3aWR0aCwgaXRlbURhdGE6IGl0ZW1EYXRhIH0sIG1lbW9pemVkUm93KSk7XHJcbiAgICB9KSk7XHJcbn1cclxuZXhwb3J0cy5WaXJ0dWFsaXplZExhenlMb2FkaW5nTGlzdCA9IFZpcnR1YWxpemVkTGF6eUxvYWRpbmdMaXN0O1xyXG4iLCJpbXBvcnQgeyBQdXJlQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuXG5mdW5jdGlvbiBpc0ludGVnZXIodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgaXNGaW5pdGUodmFsdWUpICYmIE1hdGguZmxvb3IodmFsdWUpID09PSB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gaXNSYW5nZVZpc2libGUoX3JlZikge1xuICB2YXIgbGFzdFJlbmRlcmVkU3RhcnRJbmRleCA9IF9yZWYubGFzdFJlbmRlcmVkU3RhcnRJbmRleCxcbiAgICAgIGxhc3RSZW5kZXJlZFN0b3BJbmRleCA9IF9yZWYubGFzdFJlbmRlcmVkU3RvcEluZGV4LFxuICAgICAgc3RhcnRJbmRleCA9IF9yZWYuc3RhcnRJbmRleCxcbiAgICAgIHN0b3BJbmRleCA9IF9yZWYuc3RvcEluZGV4O1xuXG4gIHJldHVybiAhKHN0YXJ0SW5kZXggPiBsYXN0UmVuZGVyZWRTdG9wSW5kZXggfHwgc3RvcEluZGV4IDwgbGFzdFJlbmRlcmVkU3RhcnRJbmRleCk7XG59XG5cbmZ1bmN0aW9uIHNjYW5Gb3JVbmxvYWRlZFJhbmdlcyhfcmVmKSB7XG4gIHZhciBpc0l0ZW1Mb2FkZWQgPSBfcmVmLmlzSXRlbUxvYWRlZCxcbiAgICAgIGl0ZW1Db3VudCA9IF9yZWYuaXRlbUNvdW50LFxuICAgICAgbWluaW11bUJhdGNoU2l6ZSA9IF9yZWYubWluaW11bUJhdGNoU2l6ZSxcbiAgICAgIHN0YXJ0SW5kZXggPSBfcmVmLnN0YXJ0SW5kZXgsXG4gICAgICBzdG9wSW5kZXggPSBfcmVmLnN0b3BJbmRleDtcblxuICB2YXIgdW5sb2FkZWRSYW5nZXMgPSBbXTtcblxuICB2YXIgcmFuZ2VTdGFydEluZGV4ID0gbnVsbDtcbiAgdmFyIHJhbmdlU3RvcEluZGV4ID0gbnVsbDtcblxuICBmb3IgKHZhciBfaW5kZXggPSBzdGFydEluZGV4OyBfaW5kZXggPD0gc3RvcEluZGV4OyBfaW5kZXgrKykge1xuICAgIHZhciBsb2FkZWQgPSBpc0l0ZW1Mb2FkZWQoX2luZGV4KTtcblxuICAgIGlmICghbG9hZGVkKSB7XG4gICAgICByYW5nZVN0b3BJbmRleCA9IF9pbmRleDtcbiAgICAgIGlmIChyYW5nZVN0YXJ0SW5kZXggPT09IG51bGwpIHtcbiAgICAgICAgcmFuZ2VTdGFydEluZGV4ID0gX2luZGV4O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocmFuZ2VTdG9wSW5kZXggIT09IG51bGwpIHtcbiAgICAgIHVubG9hZGVkUmFuZ2VzLnB1c2gocmFuZ2VTdGFydEluZGV4LCByYW5nZVN0b3BJbmRleCk7XG5cbiAgICAgIHJhbmdlU3RhcnRJbmRleCA9IHJhbmdlU3RvcEluZGV4ID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvLyBJZiA6cmFuZ2VTdG9wSW5kZXggaXMgbm90IG51bGwgaXQgbWVhbnMgd2UgaGF2ZW4ndCByYW4gb3V0IG9mIHVubG9hZGVkIHJvd3MuXG4gIC8vIFNjYW4gZm9yd2FyZCB0byB0cnkgZmlsbGluZyBvdXIgOm1pbmltdW1CYXRjaFNpemUuXG4gIGlmIChyYW5nZVN0b3BJbmRleCAhPT0gbnVsbCkge1xuICAgIHZhciBwb3RlbnRpYWxTdG9wSW5kZXggPSBNYXRoLm1pbihNYXRoLm1heChyYW5nZVN0b3BJbmRleCwgcmFuZ2VTdGFydEluZGV4ICsgbWluaW11bUJhdGNoU2l6ZSAtIDEpLCBpdGVtQ291bnQgLSAxKTtcblxuICAgIGZvciAodmFyIF9pbmRleDIgPSByYW5nZVN0b3BJbmRleCArIDE7IF9pbmRleDIgPD0gcG90ZW50aWFsU3RvcEluZGV4OyBfaW5kZXgyKyspIHtcbiAgICAgIGlmICghaXNJdGVtTG9hZGVkKF9pbmRleDIpKSB7XG4gICAgICAgIHJhbmdlU3RvcEluZGV4ID0gX2luZGV4MjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHVubG9hZGVkUmFuZ2VzLnB1c2gocmFuZ2VTdGFydEluZGV4LCByYW5nZVN0b3BJbmRleCk7XG4gIH1cblxuICAvLyBDaGVjayB0byBzZWUgaWYgb3VyIGZpcnN0IHJhbmdlIGVuZGVkIHByZW1hdHVyZWx5LlxuICAvLyBJbiB0aGlzIGNhc2Ugd2Ugc2hvdWxkIHNjYW4gYmFja3dhcmRzIHRvIHRyeSBmaWxsaW5nIG91ciA6bWluaW11bUJhdGNoU2l6ZS5cbiAgaWYgKHVubG9hZGVkUmFuZ2VzLmxlbmd0aCkge1xuICAgIHdoaWxlICh1bmxvYWRlZFJhbmdlc1sxXSAtIHVubG9hZGVkUmFuZ2VzWzBdICsgMSA8IG1pbmltdW1CYXRjaFNpemUgJiYgdW5sb2FkZWRSYW5nZXNbMF0gPiAwKSB7XG4gICAgICB2YXIgX2luZGV4MyA9IHVubG9hZGVkUmFuZ2VzWzBdIC0gMTtcblxuICAgICAgaWYgKCFpc0l0ZW1Mb2FkZWQoX2luZGV4MykpIHtcbiAgICAgICAgdW5sb2FkZWRSYW5nZXNbMF0gPSBfaW5kZXgzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHVubG9hZGVkUmFuZ2VzO1xufVxuXG52YXIgY2xhc3NDYWxsQ2hlY2sgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufTtcblxudmFyIGNyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9O1xufSgpO1xuXG52YXIgaW5oZXJpdHMgPSBmdW5jdGlvbiAoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICB9XG5cbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59O1xuXG52YXIgcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiA9IGZ1bmN0aW9uIChzZWxmLCBjYWxsKSB7XG4gIGlmICghc2VsZikge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xufTtcblxudmFyIEluZmluaXRlTG9hZGVyID0gZnVuY3Rpb24gKF9QdXJlQ29tcG9uZW50KSB7XG4gIGluaGVyaXRzKEluZmluaXRlTG9hZGVyLCBfUHVyZUNvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gSW5maW5pdGVMb2FkZXIoKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgSW5maW5pdGVMb2FkZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gSW5maW5pdGVMb2FkZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihJbmZpbml0ZUxvYWRlcikpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLl9sYXN0UmVuZGVyZWRTdGFydEluZGV4ID0gLTEsIF90aGlzLl9sYXN0UmVuZGVyZWRTdG9wSW5kZXggPSAtMSwgX3RoaXMuX21lbW9pemVkVW5sb2FkZWRSYW5nZXMgPSBbXSwgX3RoaXMuX29uSXRlbXNSZW5kZXJlZCA9IGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgdmFyIHZpc2libGVTdGFydEluZGV4ID0gX3JlZjIudmlzaWJsZVN0YXJ0SW5kZXgsXG4gICAgICAgICAgdmlzaWJsZVN0b3BJbmRleCA9IF9yZWYyLnZpc2libGVTdG9wSW5kZXg7XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmICghaXNJbnRlZ2VyKHZpc2libGVTdGFydEluZGV4KSB8fCAhaXNJbnRlZ2VyKHZpc2libGVTdG9wSW5kZXgpKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKCdJbnZhbGlkIG9uSXRlbXNSZW5kZXJlZCBzaWduYXR1cmU7IHBsZWFzZSByZWZlciB0byBJbmZpbml0ZUxvYWRlciBkb2N1bWVudGF0aW9uLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBfdGhpcy5wcm9wcy5sb2FkTW9yZVJvd3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ0luZmluaXRlTG9hZGVyIFwibG9hZE1vcmVSb3dzXCIgcHJvcCBoYXMgYmVlbiByZW5hbWVkIHRvIFwibG9hZE1vcmVJdGVtc1wiLicpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIF90aGlzLl9sYXN0UmVuZGVyZWRTdGFydEluZGV4ID0gdmlzaWJsZVN0YXJ0SW5kZXg7XG4gICAgICBfdGhpcy5fbGFzdFJlbmRlcmVkU3RvcEluZGV4ID0gdmlzaWJsZVN0b3BJbmRleDtcblxuICAgICAgX3RoaXMuX2Vuc3VyZVJvd3NMb2FkZWQodmlzaWJsZVN0YXJ0SW5kZXgsIHZpc2libGVTdG9wSW5kZXgpO1xuICAgIH0sIF90aGlzLl9zZXRSZWYgPSBmdW5jdGlvbiAobGlzdFJlZikge1xuICAgICAgX3RoaXMuX2xpc3RSZWYgPSBsaXN0UmVmO1xuICAgIH0sIF90ZW1wKSwgcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBjcmVhdGVDbGFzcyhJbmZpbml0ZUxvYWRlciwgW3tcbiAgICBrZXk6ICdyZXNldGxvYWRNb3JlSXRlbXNDYWNoZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2V0bG9hZE1vcmVJdGVtc0NhY2hlKCkge1xuICAgICAgdmFyIGF1dG9SZWxvYWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgICB0aGlzLl9tZW1vaXplZFVubG9hZGVkUmFuZ2VzID0gW107XG5cbiAgICAgIGlmIChhdXRvUmVsb2FkKSB7XG4gICAgICAgIHRoaXMuX2Vuc3VyZVJvd3NMb2FkZWQodGhpcy5fbGFzdFJlbmRlcmVkU3RhcnRJbmRleCwgdGhpcy5fbGFzdFJlbmRlcmVkU3RvcEluZGV4KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnREaWRNb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKHRoaXMuX2xpc3RSZWYgPT0gbnVsbCkge1xuICAgICAgICAgIGNvbnNvbGUud2FybignSW52YWxpZCBsaXN0IHJlZjsgcGxlYXNlIHJlZmVyIHRvIEluZmluaXRlTG9hZGVyIGRvY3VtZW50YXRpb24uJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByb3BzLmNoaWxkcmVuO1xuXG5cbiAgICAgIHJldHVybiBjaGlsZHJlbih7XG4gICAgICAgIG9uSXRlbXNSZW5kZXJlZDogdGhpcy5fb25JdGVtc1JlbmRlcmVkLFxuICAgICAgICByZWY6IHRoaXMuX3NldFJlZlxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX2Vuc3VyZVJvd3NMb2FkZWQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZW5zdXJlUm93c0xvYWRlZChzdGFydEluZGV4LCBzdG9wSW5kZXgpIHtcbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGlzSXRlbUxvYWRlZCA9IF9wcm9wcy5pc0l0ZW1Mb2FkZWQsXG4gICAgICAgICAgaXRlbUNvdW50ID0gX3Byb3BzLml0ZW1Db3VudCxcbiAgICAgICAgICBfcHJvcHMkbWluaW11bUJhdGNoU2kgPSBfcHJvcHMubWluaW11bUJhdGNoU2l6ZSxcbiAgICAgICAgICBtaW5pbXVtQmF0Y2hTaXplID0gX3Byb3BzJG1pbmltdW1CYXRjaFNpID09PSB1bmRlZmluZWQgPyAxMCA6IF9wcm9wcyRtaW5pbXVtQmF0Y2hTaSxcbiAgICAgICAgICBfcHJvcHMkdGhyZXNob2xkID0gX3Byb3BzLnRocmVzaG9sZCxcbiAgICAgICAgICB0aHJlc2hvbGQgPSBfcHJvcHMkdGhyZXNob2xkID09PSB1bmRlZmluZWQgPyAxNSA6IF9wcm9wcyR0aHJlc2hvbGQ7XG5cblxuICAgICAgdmFyIHVubG9hZGVkUmFuZ2VzID0gc2NhbkZvclVubG9hZGVkUmFuZ2VzKHtcbiAgICAgICAgaXNJdGVtTG9hZGVkOiBpc0l0ZW1Mb2FkZWQsXG4gICAgICAgIGl0ZW1Db3VudDogaXRlbUNvdW50LFxuICAgICAgICBtaW5pbXVtQmF0Y2hTaXplOiBtaW5pbXVtQmF0Y2hTaXplLFxuICAgICAgICBzdGFydEluZGV4OiBNYXRoLm1heCgwLCBzdGFydEluZGV4IC0gdGhyZXNob2xkKSxcbiAgICAgICAgc3RvcEluZGV4OiBNYXRoLm1pbihpdGVtQ291bnQgLSAxLCBzdG9wSW5kZXggKyB0aHJlc2hvbGQpXG4gICAgICB9KTtcblxuICAgICAgLy8gQXZvaWQgY2FsbGluZyBsb2FkLXJvd3MgdW5sZXNzIHJhbmdlIGhhcyBjaGFuZ2VkLlxuICAgICAgLy8gVGhpcyBzaG91bGRuJ3QgYmUgc3RyaWN0bHkgbmVjZXNzYXJ5LCBidXQgaXMgbWF5YmUgbmljZSB0byBkby5cbiAgICAgIGlmICh0aGlzLl9tZW1vaXplZFVubG9hZGVkUmFuZ2VzLmxlbmd0aCAhPT0gdW5sb2FkZWRSYW5nZXMubGVuZ3RoIHx8IHRoaXMuX21lbW9pemVkVW5sb2FkZWRSYW5nZXMuc29tZShmdW5jdGlvbiAoc3RhcnRPclN0b3AsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiB1bmxvYWRlZFJhbmdlc1tpbmRleF0gIT09IHN0YXJ0T3JTdG9wO1xuICAgICAgfSkpIHtcbiAgICAgICAgdGhpcy5fbWVtb2l6ZWRVbmxvYWRlZFJhbmdlcyA9IHVubG9hZGVkUmFuZ2VzO1xuICAgICAgICB0aGlzLl9sb2FkVW5sb2FkZWRSYW5nZXModW5sb2FkZWRSYW5nZXMpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19sb2FkVW5sb2FkZWRSYW5nZXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfbG9hZFVubG9hZGVkUmFuZ2VzKHVubG9hZGVkUmFuZ2VzKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgLy8gbG9hZE1vcmVSb3dzIHdhcyByZW5hbWVkIHRvIGxvYWRNb3JlSXRlbXMgaW4gdjEuMC4zOyB3aWxsIGJlIHJlbW92ZWQgaW4gdjIuMFxuICAgICAgdmFyIGxvYWRNb3JlSXRlbXMgPSB0aGlzLnByb3BzLmxvYWRNb3JlSXRlbXMgfHwgdGhpcy5wcm9wcy5sb2FkTW9yZVJvd3M7XG5cbiAgICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKGkpIHtcbiAgICAgICAgdmFyIHN0YXJ0SW5kZXggPSB1bmxvYWRlZFJhbmdlc1tpXTtcbiAgICAgICAgdmFyIHN0b3BJbmRleCA9IHVubG9hZGVkUmFuZ2VzW2kgKyAxXTtcbiAgICAgICAgdmFyIHByb21pc2UgPSBsb2FkTW9yZUl0ZW1zKHN0YXJ0SW5kZXgsIHN0b3BJbmRleCk7XG4gICAgICAgIGlmIChwcm9taXNlICE9IG51bGwpIHtcbiAgICAgICAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gUmVmcmVzaCB0aGUgdmlzaWJsZSByb3dzIGlmIGFueSBvZiB0aGVtIGhhdmUganVzdCBiZWVuIGxvYWRlZC5cbiAgICAgICAgICAgIC8vIE90aGVyd2lzZSB0aGV5IHdpbGwgcmVtYWluIGluIHRoZWlyIHVubG9hZGVkIHZpc3VhbCBzdGF0ZS5cbiAgICAgICAgICAgIGlmIChpc1JhbmdlVmlzaWJsZSh7XG4gICAgICAgICAgICAgIGxhc3RSZW5kZXJlZFN0YXJ0SW5kZXg6IF90aGlzMi5fbGFzdFJlbmRlcmVkU3RhcnRJbmRleCxcbiAgICAgICAgICAgICAgbGFzdFJlbmRlcmVkU3RvcEluZGV4OiBfdGhpczIuX2xhc3RSZW5kZXJlZFN0b3BJbmRleCxcbiAgICAgICAgICAgICAgc3RhcnRJbmRleDogc3RhcnRJbmRleCxcbiAgICAgICAgICAgICAgc3RvcEluZGV4OiBzdG9wSW5kZXhcbiAgICAgICAgICAgIH0pKSB7XG4gICAgICAgICAgICAgIC8vIEhhbmRsZSBhbiB1bm1vdW50IHdoaWxlIHByb21pc2VzIGFyZSBzdGlsbCBpbiBmbGlnaHQuXG4gICAgICAgICAgICAgIGlmIChfdGhpczIuX2xpc3RSZWYgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIC8vIFJlc2l6ZSBjYWNoZWQgcm93IHNpemVzIGZvciBWYXJpYWJsZVNpemVMaXN0LFxuICAgICAgICAgICAgICAvLyBvdGhlcndpc2UganVzdCByZS1yZW5kZXIgdGhlIGxpc3QuXG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgX3RoaXMyLl9saXN0UmVmLnJlc2V0QWZ0ZXJJbmRleCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIF90aGlzMi5fbGlzdFJlZi5yZXNldEFmdGVySW5kZXgoc3RhcnRJbmRleCwgdHJ1ZSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gSEFDSyByZXNldCB0ZW1wb3JhcmlseSBjYWNoZWQgaXRlbSBzdHlsZXMgdG8gZm9yY2UgUHVyZUNvbXBvbmVudCB0byByZS1yZW5kZXIuXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBwcmV0dHkgZ3Jvc3MsIGJ1dCBJJ20gb2theSB3aXRoIGl0IGZvciBub3cuXG4gICAgICAgICAgICAgICAgLy8gRG9uJ3QganVkZ2UgbWUuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBfdGhpczIuX2xpc3RSZWYuX2dldEl0ZW1TdHlsZUNhY2hlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICBfdGhpczIuX2xpc3RSZWYuX2dldEl0ZW1TdHlsZUNhY2hlKC0xKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX3RoaXMyLl9saXN0UmVmLmZvcmNlVXBkYXRlKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB1bmxvYWRlZFJhbmdlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICBfbG9vcChpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIEluZmluaXRlTG9hZGVyO1xufShQdXJlQ29tcG9uZW50KTtcblxuZXhwb3J0IGRlZmF1bHQgSW5maW5pdGVMb2FkZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcclxufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBvW2syXSA9IG1ba107XHJcbn0pKTtcclxudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9hY3Rpb25zXCIpLCBleHBvcnRzKTtcclxuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2Rpc3BhdGNoXCIpLCBleHBvcnRzKTtcclxuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2tleWJvYXJkTmF2aWdhdG9yXCIpLCBleHBvcnRzKTtcclxuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3JlZHVjZXJcIiksIGV4cG9ydHMpO1xyXG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vc3RhdGVcIiksIGV4cG9ydHMpO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG4iLCJpbXBvcnQgeyB0eXBlIH0gZnJvbSBcIm9zXCI7XHJcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xyXG5pbXBvcnQgeyBEaXNwYXRjaCB9IGZyb20gXCJyZWR1eFwiO1xyXG5pbXBvcnQgeyBjdXN0b21PcHRpb25JZCwgZXh0ZW5zaW9uVGV4dHVyZXMgfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XHJcbmltcG9ydCB7IFZpZXdlckFjdGlvbiB9IGZyb20gXCIuLi9zdG9yZS9hY3Rpb25zXCI7XHJcbmltcG9ydCB7IFZpZXdlclN0YXRlIH0gZnJvbSBcIi4uL3N0b3JlL3N0YXRlXCI7XHJcbmltcG9ydCB7IHRyYW5zbGF0aW9ucyB9IGZyb20gXCIuLi90cmFuc2xhdGlvbnNcIjtcclxuaW1wb3J0IHsgRHJvcGRvd24gfSBmcm9tIFwiLi9Ecm9wZG93blwiO1xyXG5pbXBvcnQgeyBTZWN0aW9uRmllbGQgfSBmcm9tIFwiLi9TZWN0aW9uRmllbGRcIjtcclxuaW1wb3J0IHsgU2VjdGlvblRpdGxlIH0gZnJvbSBcIi4vU2VjdGlvblRpdGxlXCI7XHJcblxyXG5jb25zdCBvcHRpb25zID0gW1xyXG4gIHsgaWQ6IGN1c3RvbU9wdGlvbklkLCBkaXNwbGF5OiB0cmFuc2xhdGlvbnMuY3VzdG9tIH0sXHJcbiAgLi4uZXh0ZW5zaW9uVGV4dHVyZXMubWFwKGV0ID0+ICh7IGlkOiBldCwgZGlzcGxheTogZXQgfSkpLFxyXG5dO1xyXG5cclxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlOiBWaWV3ZXJTdGF0ZSkgPT4ge1xyXG4gIHJldHVybiB7XHJcbiAgICB2YWx1ZXM6IHN0YXRlLnRleHR1cmVWYWx1ZXMsXHJcbiAgfTtcclxufTtcclxuXHJcbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IChkaXNwYXRjaDogRGlzcGF0Y2g8Vmlld2VyQWN0aW9uPikgPT4ge1xyXG4gIHJldHVybiB7XHJcbiAgICBzZXRWYWx1ZTogKG5hbWU6IHN0cmluZywgb3B0aW9uSWQ6IHN0cmluZywgb3B0aW9uVmFsdWU6IHN0cmluZykgPT5cclxuICAgICAgZGlzcGF0Y2goeyB0eXBlOiBcIlNFVF9URVhUVVJFXCIsIHBheWxvYWQ6IHsgbmFtZSwgb3B0aW9uSWQsIG9wdGlvblZhbHVlIH0gfSksXHJcbiAgfTtcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIFRleHR1cmVGaWVsZEluZm8gPSB7IG5hbWU6IHN0cmluZzsgdW5pdDogbnVtYmVyIH07XHJcblxyXG5leHBvcnQgY29uc3QgVGV4dHVyZVNlY3Rpb24gPSBSZWFjdC5tZW1vKFxyXG4gIGNvbm5lY3QoXHJcbiAgICBtYXBTdGF0ZVRvUHJvcHMsXHJcbiAgICBtYXBEaXNwYXRjaFRvUHJvcHNcclxuICApKFxyXG4gICAgKHByb3BzOiB7XHJcbiAgICAgIHRleHR1cmVGaWVsZHM6IFRleHR1cmVGaWVsZEluZm9bXTtcclxuICAgICAgdmFsdWVzOiB7IFtrZXk6IHN0cmluZ106IHsgb3B0aW9uSWQ6IHN0cmluZzsgb3B0aW9uVmFsdWU6IHN0cmluZyB9IH07XHJcbiAgICAgIHNldFZhbHVlOiAobmFtZTogc3RyaW5nLCBvcHRpb25JZDogc3RyaW5nLCBvcHRpb25WYWx1ZTogc3RyaW5nKSA9PiB2b2lkO1xyXG4gICAgfSkgPT4ge1xyXG4gICAgICBjb25zdCB7IHRleHR1cmVGaWVsZHMsIHZhbHVlcywgc2V0VmFsdWUgfSA9IHByb3BzO1xyXG5cclxuICAgICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInZpZXdlci1vcHRpb25zLXNlY3Rpb25cIj5cclxuICAgICAgICAgIDxTZWN0aW9uVGl0bGUgdGV4dD17dHJhbnNsYXRpb25zLnRleHR1cmVzfT48L1NlY3Rpb25UaXRsZT5cclxuICAgICAgICAgIHt0ZXh0dXJlRmllbGRzLm1hcCh0ZiA9PiAoXHJcbiAgICAgICAgICAgIDxTZWN0aW9uRmllbGQgdGV4dD17dGYubmFtZX0+XHJcbiAgICAgICAgICAgICAgPFRleHR1cmVJbnB1dFxyXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRPcHRpb25JZD17dmFsdWVzW3RmLm5hbWVdPy5vcHRpb25JZH1cclxuICAgICAgICAgICAgICAgIHNlbGVjdGVkT3B0aW9uVmFsdWU9e3ZhbHVlc1t0Zi5uYW1lXT8ub3B0aW9uVmFsdWV9XHJcbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17KG9wdGlvbklkLCBvcHRpb25WYWx1ZSkgPT4gc2V0VmFsdWUodGYubmFtZSwgb3B0aW9uSWQsIG9wdGlvblZhbHVlKX1cclxuICAgICAgICAgICAgICA+PC9UZXh0dXJlSW5wdXQ+XHJcbiAgICAgICAgICAgIDwvU2VjdGlvbkZpZWxkPlxyXG4gICAgICAgICAgKSl9XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgKVxyXG4pO1xyXG5cclxuY29uc3QgVGV4dHVyZUlucHV0ID0gKHByb3BzOiB7XHJcbiAgc2VsZWN0ZWRPcHRpb25JZDogc3RyaW5nO1xyXG4gIHNlbGVjdGVkT3B0aW9uVmFsdWU6IHN0cmluZztcclxuICBvbkNoYW5nZTogKG9wdGlvbklkOiBzdHJpbmcsIG9wdGlvblZhbHVlOiBzdHJpbmcpID0+IHZvaWQ7XHJcbn0pID0+IHtcclxuICBjb25zdCB7IHNlbGVjdGVkT3B0aW9uSWQsIHNlbGVjdGVkT3B0aW9uVmFsdWUsIG9uQ2hhbmdlIH0gPSBwcm9wcztcclxuICByZXR1cm4gKFxyXG4gICAgPGRpdj5cclxuICAgICAgPERyb3Bkb3duXHJcbiAgICAgICAgc2VsZWN0ZWRJdGVtSWQ9e3NlbGVjdGVkT3B0aW9uSWR9XHJcbiAgICAgICAgb25DaGFuZ2U9e2lkID0+XHJcbiAgICAgICAgICBvbkNoYW5nZShpZCwgc2VsZWN0ZWRPcHRpb25JZCA9PT0gY3VzdG9tT3B0aW9uSWQgPyBzZWxlY3RlZE9wdGlvblZhbHVlIDogXCJcIilcclxuICAgICAgICB9XHJcbiAgICAgICAgb3B0aW9ucz17b3B0aW9uc31cclxuICAgICAgPjwvRHJvcGRvd24+XHJcbiAgICAgIHtzZWxlY3RlZE9wdGlvbklkID09PSBjdXN0b21PcHRpb25JZCAmJiAoXHJcbiAgICAgICAgPGlucHV0XHJcbiAgICAgICAgICB2YWx1ZT17c2VsZWN0ZWRPcHRpb25WYWx1ZX1cclxuICAgICAgICAgIG9uQ2hhbmdlPXtlID0+IG9uQ2hhbmdlKHNlbGVjdGVkT3B0aW9uSWQsIGUudGFyZ2V0LnZhbHVlKX1cclxuICAgICAgICA+PC9pbnB1dD5cclxuICAgICAgKX1cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn07XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xyXG5pbXBvcnQgeyBEaXNwYXRjaCB9IGZyb20gXCJyZWR1eFwiO1xyXG5pbXBvcnQgeyBWaWV3ZXJBY3Rpb24gfSBmcm9tIFwiLi4vc3RvcmUvYWN0aW9uc1wiO1xyXG5pbXBvcnQgeyBWaWV3ZXJTdGF0ZSB9IGZyb20gXCIuLi9zdG9yZS9zdGF0ZVwiO1xyXG5pbXBvcnQgeyB0cmFuc2xhdGlvbnMgfSBmcm9tIFwiLi4vdHJhbnNsYXRpb25zXCI7XHJcbmltcG9ydCB7IFVuaWZvcm1UeXBlIH0gZnJvbSBcIi4uL3V0aWxzL3dlYmdsL3VuaWZvcm1cIjtcclxuaW1wb3J0IHtcclxuICBNYXRyaXg0eDROdW1iZXJJbnB1dCxcclxuICBWZWN0b3IyTnVtYmVySW5wdXQsXHJcbiAgVmVjdG9yM051bWJlcklucHV0LFxyXG4gIFZlY3RvcjROdW1iZXJJbnB1dCxcclxufSBmcm9tIFwiLi9jb21tb25cIjtcclxuaW1wb3J0IHsgU2VjdGlvbkZpZWxkIH0gZnJvbSBcIi4vU2VjdGlvbkZpZWxkXCI7XHJcbmltcG9ydCB7IFNlY3Rpb25UaXRsZSB9IGZyb20gXCIuL1NlY3Rpb25UaXRsZVwiO1xyXG5cclxuLy9jb25zdCBvcHRpb25zQnlUeXBlID1cclxuXHJcbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZTogVmlld2VyU3RhdGUpID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAgdmFsdWVzOiBzdGF0ZS51bmlmb3JtVmFsdWVzLFxyXG4gIH07XHJcbn07XHJcblxyXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSAoZGlzcGF0Y2g6IERpc3BhdGNoPFZpZXdlckFjdGlvbj4pID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAgc2V0VmFsdWU6IChuYW1lOiBzdHJpbmcsIHR5cGU6IG51bWJlciwgdmFsdWU6IHN0cmluZykgPT5cclxuICAgICAgZGlzcGF0Y2goeyB0eXBlOiBcIlNFVF9VTklGT1JNXCIsIHBheWxvYWQ6IHsgbmFtZSwgdHlwZSwgdmFsdWUgfSB9KSxcclxuICB9O1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgVW5pZm9ybUZpZWxkSW5mbyA9IHsgbmFtZTogc3RyaW5nOyB0eXBlOiBVbmlmb3JtVHlwZSB9O1xyXG5cclxuZXhwb3J0IGNvbnN0IFVuaWZvcm1TZWN0aW9uID0gUmVhY3QubWVtbyhcclxuICBjb25uZWN0KFxyXG4gICAgbWFwU3RhdGVUb1Byb3BzLFxyXG4gICAgbWFwRGlzcGF0Y2hUb1Byb3BzXHJcbiAgKShcclxuICAgIChwcm9wczoge1xyXG4gICAgICB1bmlmb3JtRmllbGRzOiBVbmlmb3JtRmllbGRJbmZvW107XHJcbiAgICAgIHZhbHVlczogeyBba2V5OiBzdHJpbmddOiB7IHR5cGU6IG51bWJlcjsgdmFsdWU6IGFueSB9IH07XHJcbiAgICAgIHNldFZhbHVlOiAobmFtZTogc3RyaW5nLCB0eXBlOiBudW1iZXIsIHZhbHVlOiBzdHJpbmcpID0+IHZvaWQ7XHJcbiAgICB9KSA9PiB7XHJcbiAgICAgIGNvbnN0IHsgdW5pZm9ybUZpZWxkczogVW5pZm9ybUZpZWxkcywgdmFsdWVzLCBzZXRWYWx1ZSB9ID0gcHJvcHM7XHJcblxyXG4gICAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidmlld2VyLW9wdGlvbnMtc2VjdGlvblwiPlxyXG4gICAgICAgICAgPFNlY3Rpb25UaXRsZSB0ZXh0PXt0cmFuc2xhdGlvbnMudW5pZm9ybXN9PjwvU2VjdGlvblRpdGxlPlxyXG4gICAgICAgICAge1VuaWZvcm1GaWVsZHMubWFwKGFiaSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgPFNlY3Rpb25GaWVsZCB0ZXh0PXthYmkubmFtZX0+XHJcbiAgICAgICAgICAgICAgICB7cmVuZGVyVW5pZm9ybUlucHV0KGFiaS50eXBlLCB2YWx1ZXNbYWJpLm5hbWVdPy52YWx1ZSwgdmFsdWUgPT5cclxuICAgICAgICAgICAgICAgICAgc2V0VmFsdWUoYWJpLm5hbWUsIGFiaS50eXBlLCB2YWx1ZSlcclxuICAgICAgICAgICAgICAgICl9XHJcbiAgICAgICAgICAgICAgPC9TZWN0aW9uRmllbGQ+XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICB9KX1cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgKTtcclxuICAgIH1cclxuICApXHJcbik7XHJcblxyXG5jb25zdCByZW5kZXJVbmlmb3JtSW5wdXQgPSAoXHJcbiAgdW5pZm9ybVR5cGU6IFVuaWZvcm1UeXBlLFxyXG4gIHZhbHVlOiBhbnksXHJcbiAgb25DaGFuZ2U6IChuZXdWYWx1ZTogYW55KSA9PiB2b2lkXHJcbikgPT4ge1xyXG4gIHN3aXRjaCAodW5pZm9ybVR5cGUpIHtcclxuICAgIGNhc2UgVW5pZm9ybVR5cGUuRkxPQVRfVkVDMjpcclxuICAgICAgcmV0dXJuIDxWZWN0b3IyTnVtYmVySW5wdXQgdmFsdWU9e3ZhbHVlfSBvbkNoYW5nZT17b25DaGFuZ2V9PjwvVmVjdG9yMk51bWJlcklucHV0PjtcclxuICAgIGNhc2UgVW5pZm9ybVR5cGUuRkxPQVRfVkVDMzpcclxuICAgICAgcmV0dXJuIDxWZWN0b3IzTnVtYmVySW5wdXQgdmFsdWU9e3ZhbHVlfSBvbkNoYW5nZT17b25DaGFuZ2V9PjwvVmVjdG9yM051bWJlcklucHV0PjtcclxuICAgIGNhc2UgVW5pZm9ybVR5cGUuRkxPQVRfVkVDNDpcclxuICAgICAgcmV0dXJuIDxWZWN0b3I0TnVtYmVySW5wdXQgdmFsdWU9e3ZhbHVlfSBvbkNoYW5nZT17b25DaGFuZ2V9PjwvVmVjdG9yNE51bWJlcklucHV0PjtcclxuICAgIGNhc2UgVW5pZm9ybVR5cGUuRkxPQVRfTUFUNDpcclxuICAgICAgcmV0dXJuIDxNYXRyaXg0eDROdW1iZXJJbnB1dCB2YWx1ZT17dmFsdWV9IG9uQ2hhbmdlPXtvbkNoYW5nZX0+PC9NYXRyaXg0eDROdW1iZXJJbnB1dD47XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICByZXR1cm4gPGRpdj5ub3Qgc3VwcG9ydGVyPC9kaXY+O1xyXG4gIH1cclxufTtcclxuIiwiaW1wb3J0IHtcclxuICBNYXRyaXg0QXJyYXksXHJcbiAgVmVjdG9yMkFycmF5LFxyXG4gIFZlY3RvcjNBcnJheSxcclxuICBWZWN0b3I0QXJyYXksXHJcbn0gZnJvbSBcIi4uLy4uL3R5cGVzXCI7XHJcbmltcG9ydCB7IGFzc2VydE5ldmVyIH0gZnJvbSBcIi4uL3R5cGVHdWFyZHNcIjtcclxuXHJcbmV4cG9ydCBlbnVtIFVuaWZvcm1UeXBlIHtcclxuICBGTE9BVF9WRUMyID0gMzU2NjQsXHJcbiAgRkxPQVRfVkVDMyA9IDM1NjY1LFxyXG4gIEZMT0FUX1ZFQzQgPSAzNTY2NixcclxuICBGTE9BVF9NQVQ0ID0gMzU2NzYsXHJcbn1cclxuXHJcbi8vNTEyMCAoQllURSksIDUxMjEgKFVOU0lHTkVEX0JZVEUpLCA1MTIyIChTSE9SVCksIDUxMjMgKFVOU0lHTkVEX1NIT1JUKSwgNTEyNCAoSU5UKSxcclxuLy8gNTEyNSAoVU5TSUdORURfSU5UKSwgNTEyNiAoRkxPQVQpLCAzNTY2NCAoRkxPQVRfVkVDMiksXHJcbi8vICwgMzU2NjcgKElOVF9WRUMyKSwgMzU2NjggKElOVF9WRUMzKSwgMzU2NjkgKElOVF9WRUM0KSwgMzU2NzAgKEJPT0wpLCAzNTY3MSAoQk9PTF9WRUMyKSwgMzU2NzIgKEJPT0xfVkVDMyksIDM1NjczIChCT09MX1ZFQzQpLCAzNTY3NCAoRkxPQVRfTUFUMiksIDM1Njc1IChGTE9BVF9NQVQzKSxcclxuXHJcbmV4cG9ydCBjbGFzcyBVbmlmb3JtSW5mbzxUID0gYW55PiB7XHJcbiAgcHJpdmF0ZSB2YWx1ZTogVCB8IG51bGw7XHJcbiAgcHJpdmF0ZSBzZXR0ZXI6ICh2YWx1ZTogVCkgPT4gdm9pZDtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGNvbnRleHQ6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCxcclxuICAgIHByb2dyYW06IFdlYkdMUHJvZ3JhbSxcclxuICAgIHByaXZhdGUgbmFtZTogc3RyaW5nLFxyXG4gICAgcHJpdmF0ZSB0eXBlOiBVbmlmb3JtVHlwZVxyXG4gICkge1xyXG4gICAgdGhpcy5hdHRhY2hUb1Byb2dyYW0ocHJvZ3JhbSk7XHJcbiAgfVxyXG5cclxuICBhdHRhY2hUb1Byb2dyYW0ocHJvZ3JhbTogV2ViR0xQcm9ncmFtKSB7XHJcbiAgICBjb25zdCBsb2NhdGlvbiA9IHRoaXMuY29udGV4dC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgdGhpcy5uYW1lKTtcclxuICAgIHRoaXMuc2V0dGVyID0gY3JlYXRlVW5pZm9ybVNldHRlcih0aGlzLnR5cGUsIHRoaXMuY29udGV4dCwgbG9jYXRpb24pO1xyXG4gIH1cclxuXHJcbiAgc2V0VmFsdWUobmV3VmFsdWU6IFQpIHtcclxuICAgIHRoaXMudmFsdWUgPSBuZXdWYWx1ZTtcclxuICB9XHJcblxyXG4gIHByZXBhcmVGb3JSZW5kZXIoKSB7XHJcbiAgICBpZiAodGhpcy52YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICB0aGlzLnNldHRlcih0aGlzLnZhbHVlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldFVuaWZvcm1UeXBlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMudHlwZTtcclxuICB9XHJcblxyXG4gIGdldFVuaWZvcm1OYW1lKCkge1xyXG4gICAgcmV0dXJuIHRoaXMubmFtZTtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7fVxyXG59XHJcblxyXG5jb25zdCBjcmVhdGVVbmlmb3JtU2V0dGVyID0gKFxyXG4gIHR5cGU6IFVuaWZvcm1UeXBlLFxyXG4gIGNvbnRleHQ6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCxcclxuICBsb2NhdGlvbjogV2ViR0xVbmlmb3JtTG9jYXRpb25cclxuKTogKCh2YWx1ZTogYW55KSA9PiB2b2lkKSA9PiB7XHJcbiAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICBjYXNlIFVuaWZvcm1UeXBlLkZMT0FUX1ZFQzI6XHJcbiAgICAgIHJldHVybiAodmFsdWU6IFZlY3RvcjJBcnJheSkgPT4gY29udGV4dC51bmlmb3JtMmYobG9jYXRpb24sIC4uLnZhbHVlKTtcclxuICAgIGNhc2UgVW5pZm9ybVR5cGUuRkxPQVRfVkVDMzpcclxuICAgICAgcmV0dXJuICh2YWx1ZTogVmVjdG9yM0FycmF5KSA9PiBjb250ZXh0LnVuaWZvcm0zZihsb2NhdGlvbiwgLi4udmFsdWUpO1xyXG4gICAgY2FzZSBVbmlmb3JtVHlwZS5GTE9BVF9WRUM0OlxyXG4gICAgICByZXR1cm4gKHZhbHVlOiBWZWN0b3I0QXJyYXkpID0+IGNvbnRleHQudW5pZm9ybTRmKGxvY2F0aW9uLCAuLi52YWx1ZSk7XHJcbiAgICBjYXNlIFVuaWZvcm1UeXBlLkZMT0FUX01BVDQ6XHJcbiAgICAgIHJldHVybiAodmFsdWU6IE1hdHJpeDRBcnJheSkgPT5cclxuICAgICAgICBjb250ZXh0LnVuaWZvcm1NYXRyaXg0ZnYobG9jYXRpb24sIGZhbHNlLCB2YWx1ZSk7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICBhc3NlcnROZXZlcih0eXBlKTtcclxuICB9XHJcbn07XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgcmVwZWF0IH0gZnJvbSBcIi4uLy4uLy4uLy4uL2NvbW1vbi9hcnJheVwiO1xyXG5pbXBvcnQgeyBNdWx0aU51bWJlcklucHV0IH0gZnJvbSBcIi4vTXVsdGlOdW1iZXJJbnB1dFwiO1xyXG5cclxuY29uc3QgZGVmYXVsdFZhbHVlID0gcmVwZWF0KDE2LCAwKTtcclxuXHJcbmV4cG9ydCBjb25zdCBNYXRyaXg0eDROdW1iZXJJbnB1dCA9IChwcm9wczoge1xyXG4gIHZhbHVlOiBudW1iZXJbXTtcclxuICBvbkNoYW5nZTogKG5ld1ZhbHVlOiBudW1iZXJbXSkgPT4gdm9pZDtcclxufSkgPT4gKFxyXG4gIDxNdWx0aU51bWJlcklucHV0XHJcbiAgICB7Li4ucHJvcHN9XHJcbiAgICByb3dzPXs0fVxyXG4gICAgY29sdW1ucz17NH1cclxuICAgIHZhbHVlPXtwcm9wcy52YWx1ZSA/PyBkZWZhdWx0VmFsdWV9XHJcbiAgPjwvTXVsdGlOdW1iZXJJbnB1dD5cclxuKTtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBNdWx0aU51bWJlcklucHV0IH0gZnJvbSBcIi4vTXVsdGlOdW1iZXJJbnB1dFwiO1xyXG5cclxuY29uc3QgZGVmYXVsdFZhbHVlID0gWzAsIDAsIDAsIDBdO1xyXG5cclxuZXhwb3J0IGNvbnN0IFZlY3RvcjROdW1iZXJJbnB1dCA9IChwcm9wczoge1xyXG4gIHZhbHVlOiBudW1iZXJbXTtcclxuICBvbkNoYW5nZTogKG5ld1ZhbHVlOiBudW1iZXJbXSkgPT4gdm9pZDtcclxufSkgPT4gKFxyXG4gIDxNdWx0aU51bWJlcklucHV0XHJcbiAgICB7Li4ucHJvcHN9XHJcbiAgICByb3dzPXsxfVxyXG4gICAgY29sdW1ucz17NH1cclxuICAgIHZhbHVlPXtwcm9wcy52YWx1ZSA/PyBkZWZhdWx0VmFsdWV9XHJcbiAgPjwvTXVsdGlOdW1iZXJJbnB1dD5cclxuKTtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBNdWx0aU51bWJlcklucHV0IH0gZnJvbSBcIi4vTXVsdGlOdW1iZXJJbnB1dFwiO1xyXG5cclxuY29uc3QgZGVmYXVsdFZhbHVlID0gWzAsIDBdO1xyXG5cclxuZXhwb3J0IGNvbnN0IFZlY3RvcjJOdW1iZXJJbnB1dCA9IChwcm9wczoge1xyXG4gIHZhbHVlOiBudW1iZXJbXTtcclxuICBvbkNoYW5nZTogKG5ld1ZhbHVlOiBudW1iZXJbXSkgPT4gdm9pZDtcclxufSkgPT4gKFxyXG4gIDxNdWx0aU51bWJlcklucHV0XHJcbiAgICB7Li4ucHJvcHN9XHJcbiAgICByb3dzPXsxfVxyXG4gICAgY29sdW1ucz17Mn1cclxuICAgIHZhbHVlPXtwcm9wcy52YWx1ZSA/PyBkZWZhdWx0VmFsdWV9XHJcbiAgPjwvTXVsdGlOdW1iZXJJbnB1dD5cclxuKTtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBNdWx0aU51bWJlcklucHV0IH0gZnJvbSBcIi4vTXVsdGlOdW1iZXJJbnB1dFwiO1xyXG5cclxuY29uc3QgZGVmYXVsdFZhbHVlID0gWzAsIDAsIDBdO1xyXG5cclxuZXhwb3J0IGNvbnN0IFZlY3RvcjNOdW1iZXJJbnB1dCA9IChwcm9wczoge1xyXG4gIHZhbHVlOiBudW1iZXJbXTtcclxuICBvbkNoYW5nZTogKG5ld1ZhbHVlOiBudW1iZXJbXSkgPT4gdm9pZDtcclxufSkgPT4gKFxyXG4gIDxNdWx0aU51bWJlcklucHV0XHJcbiAgICB7Li4ucHJvcHN9XHJcbiAgICByb3dzPXsxfVxyXG4gICAgY29sdW1ucz17M31cclxuICAgIHZhbHVlPXtwcm9wcy52YWx1ZSA/PyBkZWZhdWx0VmFsdWV9XHJcbiAgPjwvTXVsdGlOdW1iZXJJbnB1dD5cclxuKTtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IFNoYWRlcnNDb21waWxlUmVzdWx0QXJlYSA9IChwcm9wczogeyBlcnJvcnM6IHN0cmluZyB9KSA9PiB7XHJcbiAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwic2hhZGVyLWNvbXBpbGUtZXJyb3JzLWFyZWFcIj57cHJvcHMuZXJyb3JzfTwvZGl2PjtcclxufTtcclxuIiwiZXhwb3J0ICogZnJvbSBcIi4vTWF0cml4NHg0TnVtYmVySW5wdXRcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vVmVjdG9yMk51bWJlcklucHV0XCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL1ZlY3RvcjNOdW1iZXJJbnB1dFwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9WZWN0b3I0TnVtYmVySW5wdXRcIjtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==