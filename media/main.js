!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=8)}({8:function(t,e,n){"use strict";n.r(e);var r={};n.r(r),n.d(r,"create",(function(){return ut})),n.d(r,"clone",(function(){return it})),n.d(r,"copy",(function(){return ct})),n.d(r,"fromValues",(function(){return st})),n.d(r,"set",(function(){return ft})),n.d(r,"identity",(function(){return lt})),n.d(r,"transpose",(function(){return ht})),n.d(r,"invert",(function(){return pt})),n.d(r,"adjoint",(function(){return dt})),n.d(r,"determinant",(function(){return mt})),n.d(r,"multiply",(function(){return vt})),n.d(r,"translate",(function(){return yt})),n.d(r,"scale",(function(){return bt})),n.d(r,"rotate",(function(){return Mt})),n.d(r,"rotateX",(function(){return gt})),n.d(r,"rotateY",(function(){return xt})),n.d(r,"rotateZ",(function(){return Et})),n.d(r,"fromTranslation",(function(){return At})),n.d(r,"fromScaling",(function(){return Tt})),n.d(r,"fromRotation",(function(){return wt})),n.d(r,"fromXRotation",(function(){return St})),n.d(r,"fromYRotation",(function(){return Ct})),n.d(r,"fromZRotation",(function(){return Ot})),n.d(r,"fromRotationTranslation",(function(){return Vt})),n.d(r,"fromQuat2",(function(){return Lt})),n.d(r,"getTranslation",(function(){return _t})),n.d(r,"getScaling",(function(){return It})),n.d(r,"getRotation",(function(){return Ft})),n.d(r,"decompose",(function(){return Rt})),n.d(r,"fromRotationTranslationScale",(function(){return Pt})),n.d(r,"fromRotationTranslationScaleOrigin",(function(){return Bt})),n.d(r,"fromQuat",(function(){return Nt})),n.d(r,"frustum",(function(){return Dt})),n.d(r,"perspectiveNO",(function(){return Ut})),n.d(r,"perspective",(function(){return kt})),n.d(r,"perspectiveZO",(function(){return jt})),n.d(r,"perspectiveFromFieldOfView",(function(){return qt})),n.d(r,"orthoNO",(function(){return Ht})),n.d(r,"ortho",(function(){return Yt})),n.d(r,"orthoZO",(function(){return Gt})),n.d(r,"lookAt",(function(){return Kt})),n.d(r,"targetTo",(function(){return Jt})),n.d(r,"str",(function(){return Xt})),n.d(r,"frob",(function(){return Zt})),n.d(r,"add",(function(){return Qt})),n.d(r,"subtract",(function(){return Wt})),n.d(r,"multiplyScalar",(function(){return zt})),n.d(r,"multiplyScalarAndAdd",(function(){return $t})),n.d(r,"exactEquals",(function(){return te})),n.d(r,"equals",(function(){return ee})),n.d(r,"mul",(function(){return ne})),n.d(r,"sub",(function(){return re}));var o,a=function(){function t(t){this.context=t,this.buffer=t.createBuffer()}return t.prototype.setValue=function(t){this.context.bindBuffer(this.context.ELEMENT_ARRAY_BUFFER,this.buffer),this.context.bufferData(this.context.ELEMENT_ARRAY_BUFFER,new Uint16Array(t),this.context.STATIC_DRAW)},t.prototype.setIndexBuffer=function(){this.context.bindBuffer(this.context.ELEMENT_ARRAY_BUFFER,this.buffer)},t.prototype.deleteBuffer=function(){this.context.deleteBuffer(this.buffer),this.buffer=null},t}(),u="SHADERS",i=function(){return(i=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},c=function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),o=0;for(e=0;e<n;e++)for(var a=arguments[e],u=0,i=a.length;u<i;u++,o++)r[o]=a[u];return r},s={emptyItem:!0},f=function(t,e,n){var r=i(i({},s),n),o=document.createElement("select");o.className="dropdown-base "+e;var a=null,u=[],f=function(e){t(a=e)};o.onchange=function(){var t=u.find((function(t){return t.item.id===o.value}));t.item.id?f(t.item):f(null)};var l=function(t){f(null),u.forEach((function(e){e.item.id===t?(e.element.selected=!0,f(e.item)):e.element.selected=!1}))};return[o,{setItems:function(t){o.innerHTML="",u.length=0,t.find((function(t){return t.id===(null==a?void 0:a.id)}))||f(null),(r.emptyItem?c([{id:"",display:""}],t):c(t)).forEach((function(t){var e=document.createElement("option");e.value=t.id,e.textContent=t.display,e.selected=t.id===(null==a?void 0:a.id),o.appendChild(e),u.push({element:e,item:t})}))},getItems:function(){return u.map((function(t){return t.item}))},setSelectedItemById:l,setSelectedItemByIndex:function(t){return l(u[t].item.id)},getSelectedItem:function(){return a},clearSelection:function(){u.forEach((function(t){return t.element.selected=!1})),f(null)}}]},l=function(t,e){var n=f((function(n){n?(t.forEach((function(t){return t.element.classList.add("hidden")})),t.find((function(t){return t.id===n.id})).element.classList.remove("hidden"),null==e||e(n.id)):null==e||e(null)}),"",{emptyItem:!1}),r=n[0],o=n[1];return o.setItems(t.map((function(t){return{id:t.id,display:t.display}}))),o.setSelectedItemByIndex(0),r},h=function(t){return{id:"custom",display:"Custom",element:t}},p=function(t,e,n){var r=document.createElement("button");return r.onclick=n,r.className=e,r.textContent=t,{element:r}},d=function(t,e,n){var r=document.createElement("div");r.className=(null!=n?n:"")+" options-wrapper";var o=document.createElement("label");return o.className="options-label",o.textContent=e,t.className=t.className+" options-content",r.appendChild(o),r.appendChild(t),r},m=function(t,e){var n=document.createElement("div");return n.className=t,null==e||e.forEach((function(t){return n.appendChild(t)})),n},v=function(t,e,n,r,o){var a=document.createElement("div");a.className="edit-input-grid";for(var u=[],i=function(){return u.map((function(t){return t.value}))},c=0;c<n;c++){var s=document.createElement("div");s.className="edit-input-row";for(var f=function(n){var a=c*r+n,f=t[a],l=document.createElement("input"),h={element:l,value:f};Object.assign(l,o),l.className="edit-input",l.type="number",l.value=null==f?void 0:f.toString(),l.oninput=function(){u[a].value=Number(l.value),null==e||e(i())},u.push(h),s.appendChild(l)},l=0;l<r;l++)f(l);a.appendChild(s)}return[a,{setValues:function(t){return u.forEach((function(e,n){e.value=t[n],e.element.value=e.value.toString()}))},getValues:i,setReadonly:function(t){return u.forEach((function(e){return e.element.readOnly=t}))}}]},y=function(t){return v([0,0,0],t,1,3)},b=function(){return(b=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},M={min:"0",max:"1",step:"0.1"},g=function(t,e){return t.hasOwnProperty(e)},x=function(t){throw new Error("Unhandled union member: "+JSON.stringify(t))},E=function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),o=0;for(e=0;e<n;e++)for(var a=arguments[e],u=0,i=a.length;u<i;u++,o++)r[o]=a[u];return r};!function(t){t[t.FLOAT_VEC2=35664]="FLOAT_VEC2",t[t.FLOAT_VEC3=35665]="FLOAT_VEC3",t[t.FLOAT_VEC4=35666]="FLOAT_VEC4",t[t.FLOAT_MAT4=35676]="FLOAT_MAT4",t[t.SAMPLER_2D=35678]="SAMPLER_2D"}(o||(o={}));var A,T=function(){function t(t,e,n,r){this.context=t,this.name=n,this.type=r,this.attachToProgram(e)}return t.prototype.attachToProgram=function(t){var e=this.context.getUniformLocation(t,this.name);this.setter=w(this.type,this.context,e)},t.prototype.setValue=function(t){this.value=t},t.prototype.setUniform=function(){null!==this.value&&this.setter(this.value)},t.prototype.getUniformType=function(){return this.type},t.prototype.getUniformName=function(){return this.name},t.prototype.dispose=function(){},t}(),w=function(t,e,n){switch(t){case o.FLOAT_VEC2:return function(t){return e.uniform2f.apply(e,E([n],t))};case o.FLOAT_VEC3:return function(t){return e.uniform3f.apply(e,E([n],t))};case o.FLOAT_VEC4:return function(t){return e.uniform4f.apply(e,E([n],t))};case o.FLOAT_MAT4:return function(t){return e.uniformMatrix4fv(n,!1,t)};case o.SAMPLER_2D:return function(t){};default:x(t)}},S=function(){function t(t){this.keySelector=t,this.map=new Map}return t.prototype.get=function(t){return this.map.get(this.keySelector(t))},t.prototype.set=function(t,e){this.map.set(this.keySelector(t),e)},t.prototype.has=function(t){return this.map.has(this.keySelector(t))},t.prototype.entriesStrKey=function(){return Array.from(this.map.entries())},t.prototype.deleteStrKey=function(t){this.map.delete(t)},t.prototype.delete=function(t){this.map.delete(this.keySelector(t))},t.prototype.clear=function(){this.map.clear()},t}(),C=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(t){var e=16*Math.random()|0;return("x"==t?e:3&e|8).toString(16)}))},O=function(){return(O=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},V=new S((function(t){return t.name+";"+t.type})),L=function(t){switch(t.getUniformType()){case o.FLOAT_VEC2:return _((function(e){return t.setValue(e)}));case o.FLOAT_VEC3:return F((function(e){return t.setValue(e)}));case o.FLOAT_VEC4:var e=[1,0,0,1];return t.setValue(e),R(e,(function(e){return t.setValue(e)}));case o.SAMPLER_2D:return P((function(e){C();t.setValue({slot:e.slot,textureData:!0})}));case o.FLOAT_MAT4:default:return I()}},_=function(t){var e=v([0,0],t,1,2),n=e[0];return e[1].setValues([0,0]),n},I=function(){var t=document.createElement("div");return t.className="unsupported-error",t.innerText="Not supported uniform",t},F=function(t){var e=y(t),n=e[0];e[1].setValues([0,0,0]);var r=function(t){var e=[.5,.5,.5],n=document.createElement("div");n.className="edit-input-color";var r=function(t){n.style.background="rgb("+255*t[0]+","+255*t[1]+","+255*t[2]+",1)"};r(e);var o=m("row-with-gap"),a=v(e,(function(e){r(e),null==t||t(e)}),1,3,M),u=a[0],i=a[1];return o.appendChild(u),o.appendChild(n),[o,b(b({},i),{setValues:function(t){i.setValues(t),r(t)}})]}(t),o=r[0];r[1].setValues([1,0,0]);var a=l([{id:"custom",display:"Custom",element:n},{id:"color",display:"Color",element:o}]);return m("column-with-gap",[a,n,o])},R=function(t,e){var n=v([0,0,0,0],e,1,4),r=n[0];n[1].setValues(t);var o=function(t){var e=[.5,.5,.5,1],n=document.createElement("div");n.className="edit-input-color";var r=function(t){n.style.background="rgb("+255*t[0]+","+255*t[1]+","+255*t[2]+","+t[3]+")"};r(e);var o=m("row-with-gap"),a=v(e,(function(e){r(e),null==t||t(e)}),1,4,M),u=a[0],i=a[1];return o.appendChild(u),o.appendChild(n),[o,b(b({},i),{setValues:function(t){i.setValues(t),r(t)}})]}(e),a=o[0];o[1].setValues(t);var u=l([{id:"custom",display:"Custom",element:r},{id:"color",display:"Color",element:a}]);return m("column-with-gap",[u,r,a])},P=function(t){var e=y(),n=e[0];return e[1].setValues([0,0,0]),n},B=function(t,e){var n=t.indexOf(e);n>-1&&t.splice(n,1)},N=function(t,e){return t.substring(0,t.length-e)},D=function(t,e,n){var r=t.createShader(e);if(t.shaderSource(r,n),t.compileShader(r),t.getShaderParameter(r,t.COMPILE_STATUS))return r;var o=t.getShaderInfoLog(r);return t.deleteShader(r),{error:o}},U=function(t,e,n){var r=t.createProgram();if(t.attachShader(r,e),t.attachShader(r,n),t.linkProgram(r),t.getProgramParameter(r,t.LINK_STATUS))return r;throw t.deleteProgram(r),new Error("Creating program failed: "+t.getProgramInfoLog(r))};!function(t){t[t.FLOAT_VEC3=35665]="FLOAT_VEC3",t[t.FLOAT_VEC4=35666]="FLOAT_VEC4"}(A||(A={}));var k=function(){function t(t,e,n,r){this.context=t,this.name=n,this.type=r,this.numElements=0,this.attachToProgram(e),this.buffer=t.createBuffer()}return t.prototype.attachToProgram=function(t){this.location=this.context.getAttribLocation(t,this.name)},t.prototype.setValue=function(t){this.numElements=t.length,this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffer);var e=[].concat.apply([],t);console.log("setting value",e),this.context.bufferData(this.context.ARRAY_BUFFER,new Float32Array(e),this.context.STATIC_DRAW)},t.prototype.setAttributeBuffer=function(){if(null!==this.buffer){this.context.enableVertexAttribArray(this.location),this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffer);var t=j(this.type),e=this.context.FLOAT;this.context.vertexAttribPointer(this.location,t,e,!1,0,0)}},t.prototype.getAttributeBufferType=function(){return this.type},t.prototype.getNumElements=function(){return this.numElements},t.prototype.deleteBuffer=function(){this.context.deleteBuffer(this.buffer),this.buffer=null},t}(),j=function(t){switch(t){case A.FLOAT_VEC3:return 3;case A.FLOAT_VEC4:return 4;default:x(t)}},q=function(){function t(t){this.value=t,this.observers=[]}return t.prototype.attach=function(t){this.observers.push(t)},t.prototype.detach=function(t){B(this.observers,t)},t.prototype.detachAll=function(){this.observers.length=0},t.prototype.setValue=function(t){this.value=t,this.notify()},t.prototype.getValue=function(){return this.value},t.prototype.forceNotify=function(){this.notify()},t.prototype.notify=function(){if(null!==this.value){var t=this.value;this.observers.forEach((function(e){return e(t)}))}},t}(),H=function(){return(H=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},Y=function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),o=0;for(e=0;e<n;e++)for(var a=arguments[e],u=0,i=a.length;u<i;u++,o++)r[o]=a[u];return r},G=function(t){return t.name+";"+t.type},K=new S(G),J=function(t,e,n,r){var o,a,u=n.map((function(n){var o=H({},n),a=K.get(o);if(a)return a.attributeBufferInfo.attachToProgram(e),{key:o,value:a};var u=new k(t,e,n.name,n.type),i=r.filter((function(t){return t.type===u.getAttributeBufferType()})),c=i.length?W(u,i):Q(u),s=c.element,f=c.dispose;return{key:o,value:{component:d(s,n.name),attributeBufferInfo:u,dispose:function(){u.deleteBuffer(),null==f||f()}}}}));return a=(o=u).map((function(t){return G(t.key)})),K.entriesStrKey().filter((function(t){return!a.includes(t[0])})).forEach((function(t){t[1].dispose(),K.deleteStrKey(t[0])})),o.forEach((function(t){K.has(t.key)||K.set(t.key,t.value)})),u.map((function(t){return t.value}))},X=function(t,e,n){switch(t){case A.FLOAT_VEC4:return z(n,e);default:return Z()}},Z=function(){var t=document.createElement("div");return t.className="unsupported-error",t.innerText="Not supported attribute buffer",t},Q=function(t){var e=new q((t.getAttributeBufferType(),[[0,0,0,1],[0,.5,0,1],[.9,0,0,1],[0,.5,0,1],[.7,0,0,1],[.7,.5,0,1]]));return e.attach((function(e){t.setValue(e)})),{element:X(t.getAttributeBufferType(),!0,e),value:e,dispose:function(){return e.detachAll()}}},W=function(t,e){var n=e.map((function(e){var n=X(t.getAttributeBufferType(),!1,e.value);return{id:C(),element:n,display:e.name,value:e.value}})),r=Q(t),o=r.element,a=r.value,u=r.dispose,i=void 0;return{element:m("column-with-gap",Y([l(Y([h(o)],n),(function(e){null==i||i();var r=n.find((function(t){return t.id===e}));if(r){var o=function(e){return t.setValue(e)};r.value.attach(o),o(r.value.getValue()),i=function(){return r.value.detach(o)}}else a.forceNotify()})),o],n.map((function(t){return t.element})))),dispose:function(){null==i||i(),u()}}},z=function(t,e){var n=document.createElement("input");if(n.className="edit-input",n.disabled=!e,!e){t.attach((function(t){return n.value=JSON.stringify(t)}))}return n.value=JSON.stringify(t.getValue()),n.oninput=function(){try{var e=JSON.parse(n.value);if(Array.isArray(e))e.every((function(t){return!!Array.isArray(t)&&4===t.length}));else;t.setValue(e)}catch(t){console.log("this is not a json")}},n},$=function(t){var e=document.createElement("canvas");e.className=t;var n,r,o=e.getContext("webgl");if(n=e,r=function(t){e.width=t.width,e.height=t.height},new ResizeObserver((function(t){var e=t.find((function(t){return t.target===n}));if(e){var o=e.target.getBoundingClientRect();r({x:o.x,y:o.y,width:o.width,height:o.height})}})).observe(n),!o)throw new Error("Unable to create webgl context");return[e,{context:o}]},tt=acquireVsCodeApi(),et=function(){function t(){var t=this;this.eventListeners=[],window.addEventListener("message",(function(e){t.eventListeners.forEach((function(t){return t(e.data)}))}))}return t.prototype.getShaderDocuments=function(){var t=this,e=C();return tt.postMessage({type:"getShaderDocuments",id:e}),new Promise((function(n){var r=function(o){"getShaderDocuments"===o.type&&o.id===e&&(n(o.payload.files),t.removeListener(r))};t.eventListeners.push(r)}))},t.prototype.getDocumentText=function(t){var e=this,n=C();return tt.postMessage({type:"getDocumentText",id:n,payload:{fileName:t}}),new Promise((function(t){var r=function(o){"getDocumentText"===o.type&&o.id===n&&(t(o.payload.text),e.removeListener(r))};e.eventListeners.push(r)}))},t.prototype.subscribeToDocumentSave=function(t,e){var n=this;tt.postMessage({type:"subscribeToDocumentTextChange",payload:{fileName:t}});var r=function(n){"onDocumentTextChange"===n.type&&n.payload.filePath===t&&e(n.payload.text)};return this.eventListeners.push(r),function(){n.removeListener(r),tt.postMessage({type:"unsubscribeToDocumentTextChange",payload:{fileName:t}})}},t.prototype.removeListener=function(t){B(this.eventListeners,t)},t}(),nt=function(t){return[].concat(t,t,t,t)},rt=new Map([["cube",{display:"Cube",positions:[[-.5,-.5,.5,1],[.5,-.5,.5,1],[.5,.5,.5,1],[-.5,.5,.5,1],[-.5,-.5,-.5,1],[-.5,.5,-.5,1],[.5,.5,-.5,1],[.5,-.5,-.5,1],[-.5,.5,-.5,1],[-.5,.5,.5,1],[.5,.5,.5,1],[.5,.5,-.5,1],[-.5,-.5,-.5,1],[.5,-.5,-.5,1],[.5,-.5,.5,1],[-.5,-.5,.5,1],[.5,-.5,-.5,1],[.5,.5,-.5,1],[.5,.5,.5,1],[.5,-.5,.5,1],[-.5,-.5,-.5,1],[-.5,-.5,.5,1],[-.5,.5,.5,1],[-.5,.5,-.5,1]],colors:function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),o=0;for(e=0;e<n;e++)for(var a=arguments[e],u=0,i=a.length;u<i;u++,o++)r[o]=a[u];return r}(nt([1,1,1,1]),nt([1,0,0,1]),nt([0,1,0,1]),nt([0,0,1,1]),nt([1,1,0,1]),nt([1,0,1,1])),indices:[0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23]}]]);console.log(rt);const ot=1e-6;let at="undefined"!=typeof Float32Array?Float32Array:Array;Math.random;Math.PI;function ut(){let t=new at(16);return at!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0),t[0]=1,t[5]=1,t[10]=1,t[15]=1,t}function it(t){let e=new at(16);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}function ct(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function st(t,e,n,r,o,a,u,i,c,s,f,l,h,p,d,m){let v=new at(16);return v[0]=t,v[1]=e,v[2]=n,v[3]=r,v[4]=o,v[5]=a,v[6]=u,v[7]=i,v[8]=c,v[9]=s,v[10]=f,v[11]=l,v[12]=h,v[13]=p,v[14]=d,v[15]=m,v}function ft(t,e,n,r,o,a,u,i,c,s,f,l,h,p,d,m,v){return t[0]=e,t[1]=n,t[2]=r,t[3]=o,t[4]=a,t[5]=u,t[6]=i,t[7]=c,t[8]=s,t[9]=f,t[10]=l,t[11]=h,t[12]=p,t[13]=d,t[14]=m,t[15]=v,t}function lt(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function ht(t,e){if(t===e){let n=e[1],r=e[2],o=e[3],a=e[6],u=e[7],i=e[11];t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=n,t[6]=e[9],t[7]=e[13],t[8]=r,t[9]=a,t[11]=e[14],t[12]=o,t[13]=u,t[14]=i}else t[0]=e[0],t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=e[1],t[5]=e[5],t[6]=e[9],t[7]=e[13],t[8]=e[2],t[9]=e[6],t[10]=e[10],t[11]=e[14],t[12]=e[3],t[13]=e[7],t[14]=e[11],t[15]=e[15];return t}function pt(t,e){let n=e[0],r=e[1],o=e[2],a=e[3],u=e[4],i=e[5],c=e[6],s=e[7],f=e[8],l=e[9],h=e[10],p=e[11],d=e[12],m=e[13],v=e[14],y=e[15],b=n*i-r*u,M=n*c-o*u,g=n*s-a*u,x=r*c-o*i,E=r*s-a*i,A=o*s-a*c,T=f*m-l*d,w=f*v-h*d,S=f*y-p*d,C=l*v-h*m,O=l*y-p*m,V=h*y-p*v,L=b*V-M*O+g*C+x*S-E*w+A*T;return L?(L=1/L,t[0]=(i*V-c*O+s*C)*L,t[1]=(o*O-r*V-a*C)*L,t[2]=(m*A-v*E+y*x)*L,t[3]=(h*E-l*A-p*x)*L,t[4]=(c*S-u*V-s*w)*L,t[5]=(n*V-o*S+a*w)*L,t[6]=(v*g-d*A-y*M)*L,t[7]=(f*A-h*g+p*M)*L,t[8]=(u*O-i*S+s*T)*L,t[9]=(r*S-n*O-a*T)*L,t[10]=(d*E-m*g+y*b)*L,t[11]=(l*g-f*E-p*b)*L,t[12]=(i*w-u*C-c*T)*L,t[13]=(n*C-r*w+o*T)*L,t[14]=(m*M-d*x-v*b)*L,t[15]=(f*x-l*M+h*b)*L,t):null}function dt(t,e){let n=e[0],r=e[1],o=e[2],a=e[3],u=e[4],i=e[5],c=e[6],s=e[7],f=e[8],l=e[9],h=e[10],p=e[11],d=e[12],m=e[13],v=e[14],y=e[15],b=n*i-r*u,M=n*c-o*u,g=n*s-a*u,x=r*c-o*i,E=r*s-a*i,A=o*s-a*c,T=f*m-l*d,w=f*v-h*d,S=f*y-p*d,C=l*v-h*m,O=l*y-p*m,V=h*y-p*v;return t[0]=i*V-c*O+s*C,t[1]=o*O-r*V-a*C,t[2]=m*A-v*E+y*x,t[3]=h*E-l*A-p*x,t[4]=c*S-u*V-s*w,t[5]=n*V-o*S+a*w,t[6]=v*g-d*A-y*M,t[7]=f*A-h*g+p*M,t[8]=u*O-i*S+s*T,t[9]=r*S-n*O-a*T,t[10]=d*E-m*g+y*b,t[11]=l*g-f*E-p*b,t[12]=i*w-u*C-c*T,t[13]=n*C-r*w+o*T,t[14]=m*M-d*x-v*b,t[15]=f*x-l*M+h*b,t}function mt(t){let e=t[0],n=t[1],r=t[2],o=t[3],a=t[4],u=t[5],i=t[6],c=t[7],s=t[8],f=t[9],l=t[10],h=t[11],p=t[12],d=t[13],m=t[14],v=e*u-n*a,y=e*i-r*a,b=n*i-r*u,M=s*d-f*p,g=s*m-l*p,x=f*m-l*d;return c*(e*x-n*g+r*M)-o*(a*x-u*g+i*M)+t[15]*(s*b-f*y+l*v)-h*(p*b-d*y+m*v)}function vt(t,e,n){let r=e[0],o=e[1],a=e[2],u=e[3],i=e[4],c=e[5],s=e[6],f=e[7],l=e[8],h=e[9],p=e[10],d=e[11],m=e[12],v=e[13],y=e[14],b=e[15],M=n[0],g=n[1],x=n[2],E=n[3];return t[0]=M*r+g*i+x*l+E*m,t[1]=M*o+g*c+x*h+E*v,t[2]=M*a+g*s+x*p+E*y,t[3]=M*u+g*f+x*d+E*b,M=n[4],g=n[5],x=n[6],E=n[7],t[4]=M*r+g*i+x*l+E*m,t[5]=M*o+g*c+x*h+E*v,t[6]=M*a+g*s+x*p+E*y,t[7]=M*u+g*f+x*d+E*b,M=n[8],g=n[9],x=n[10],E=n[11],t[8]=M*r+g*i+x*l+E*m,t[9]=M*o+g*c+x*h+E*v,t[10]=M*a+g*s+x*p+E*y,t[11]=M*u+g*f+x*d+E*b,M=n[12],g=n[13],x=n[14],E=n[15],t[12]=M*r+g*i+x*l+E*m,t[13]=M*o+g*c+x*h+E*v,t[14]=M*a+g*s+x*p+E*y,t[15]=M*u+g*f+x*d+E*b,t}function yt(t,e,n){let r,o,a,u,i,c,s,f,l,h,p,d,m=n[0],v=n[1],y=n[2];return e===t?(t[12]=e[0]*m+e[4]*v+e[8]*y+e[12],t[13]=e[1]*m+e[5]*v+e[9]*y+e[13],t[14]=e[2]*m+e[6]*v+e[10]*y+e[14],t[15]=e[3]*m+e[7]*v+e[11]*y+e[15]):(r=e[0],o=e[1],a=e[2],u=e[3],i=e[4],c=e[5],s=e[6],f=e[7],l=e[8],h=e[9],p=e[10],d=e[11],t[0]=r,t[1]=o,t[2]=a,t[3]=u,t[4]=i,t[5]=c,t[6]=s,t[7]=f,t[8]=l,t[9]=h,t[10]=p,t[11]=d,t[12]=r*m+i*v+l*y+e[12],t[13]=o*m+c*v+h*y+e[13],t[14]=a*m+s*v+p*y+e[14],t[15]=u*m+f*v+d*y+e[15]),t}function bt(t,e,n){let r=n[0],o=n[1],a=n[2];return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t[4]=e[4]*o,t[5]=e[5]*o,t[6]=e[6]*o,t[7]=e[7]*o,t[8]=e[8]*a,t[9]=e[9]*a,t[10]=e[10]*a,t[11]=e[11]*a,t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function Mt(t,e,n,r){let o,a,u,i,c,s,f,l,h,p,d,m,v,y,b,M,g,x,E,A,T,w,S,C,O=r[0],V=r[1],L=r[2],_=Math.hypot(O,V,L);return _<ot?null:(_=1/_,O*=_,V*=_,L*=_,o=Math.sin(n),a=Math.cos(n),u=1-a,i=e[0],c=e[1],s=e[2],f=e[3],l=e[4],h=e[5],p=e[6],d=e[7],m=e[8],v=e[9],y=e[10],b=e[11],M=O*O*u+a,g=V*O*u+L*o,x=L*O*u-V*o,E=O*V*u-L*o,A=V*V*u+a,T=L*V*u+O*o,w=O*L*u+V*o,S=V*L*u-O*o,C=L*L*u+a,t[0]=i*M+l*g+m*x,t[1]=c*M+h*g+v*x,t[2]=s*M+p*g+y*x,t[3]=f*M+d*g+b*x,t[4]=i*E+l*A+m*T,t[5]=c*E+h*A+v*T,t[6]=s*E+p*A+y*T,t[7]=f*E+d*A+b*T,t[8]=i*w+l*S+m*C,t[9]=c*w+h*S+v*C,t[10]=s*w+p*S+y*C,t[11]=f*w+d*S+b*C,e!==t&&(t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t)}function gt(t,e,n){let r=Math.sin(n),o=Math.cos(n),a=e[4],u=e[5],i=e[6],c=e[7],s=e[8],f=e[9],l=e[10],h=e[11];return e!==t&&(t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[4]=a*o+s*r,t[5]=u*o+f*r,t[6]=i*o+l*r,t[7]=c*o+h*r,t[8]=s*o-a*r,t[9]=f*o-u*r,t[10]=l*o-i*r,t[11]=h*o-c*r,t}function xt(t,e,n){let r=Math.sin(n),o=Math.cos(n),a=e[0],u=e[1],i=e[2],c=e[3],s=e[8],f=e[9],l=e[10],h=e[11];return e!==t&&(t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[0]=a*o-s*r,t[1]=u*o-f*r,t[2]=i*o-l*r,t[3]=c*o-h*r,t[8]=a*r+s*o,t[9]=u*r+f*o,t[10]=i*r+l*o,t[11]=c*r+h*o,t}function Et(t,e,n){let r=Math.sin(n),o=Math.cos(n),a=e[0],u=e[1],i=e[2],c=e[3],s=e[4],f=e[5],l=e[6],h=e[7];return e!==t&&(t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[0]=a*o+s*r,t[1]=u*o+f*r,t[2]=i*o+l*r,t[3]=c*o+h*r,t[4]=s*o-a*r,t[5]=f*o-u*r,t[6]=l*o-i*r,t[7]=h*o-c*r,t}function At(t,e){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=e[0],t[13]=e[1],t[14]=e[2],t[15]=1,t}function Tt(t,e){return t[0]=e[0],t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e[1],t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=e[2],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function wt(t,e,n){let r,o,a,u=n[0],i=n[1],c=n[2],s=Math.hypot(u,i,c);return s<ot?null:(s=1/s,u*=s,i*=s,c*=s,r=Math.sin(e),o=Math.cos(e),a=1-o,t[0]=u*u*a+o,t[1]=i*u*a+c*r,t[2]=c*u*a-i*r,t[3]=0,t[4]=u*i*a-c*r,t[5]=i*i*a+o,t[6]=c*i*a+u*r,t[7]=0,t[8]=u*c*a+i*r,t[9]=i*c*a-u*r,t[10]=c*c*a+o,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t)}function St(t,e){let n=Math.sin(e),r=Math.cos(e);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=r,t[6]=n,t[7]=0,t[8]=0,t[9]=-n,t[10]=r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function Ct(t,e){let n=Math.sin(e),r=Math.cos(e);return t[0]=r,t[1]=0,t[2]=-n,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=n,t[9]=0,t[10]=r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function Ot(t,e){let n=Math.sin(e),r=Math.cos(e);return t[0]=r,t[1]=n,t[2]=0,t[3]=0,t[4]=-n,t[5]=r,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function Vt(t,e,n){let r=e[0],o=e[1],a=e[2],u=e[3],i=r+r,c=o+o,s=a+a,f=r*i,l=r*c,h=r*s,p=o*c,d=o*s,m=a*s,v=u*i,y=u*c,b=u*s;return t[0]=1-(p+m),t[1]=l+b,t[2]=h-y,t[3]=0,t[4]=l-b,t[5]=1-(f+m),t[6]=d+v,t[7]=0,t[8]=h+y,t[9]=d-v,t[10]=1-(f+p),t[11]=0,t[12]=n[0],t[13]=n[1],t[14]=n[2],t[15]=1,t}function Lt(t,e){let n=new at(3),r=-e[0],o=-e[1],a=-e[2],u=e[3],i=e[4],c=e[5],s=e[6],f=e[7],l=r*r+o*o+a*a+u*u;return l>0?(n[0]=2*(i*u+f*r+c*a-s*o)/l,n[1]=2*(c*u+f*o+s*r-i*a)/l,n[2]=2*(s*u+f*a+i*o-c*r)/l):(n[0]=2*(i*u+f*r+c*a-s*o),n[1]=2*(c*u+f*o+s*r-i*a),n[2]=2*(s*u+f*a+i*o-c*r)),Vt(t,e,n),t}function _t(t,e){return t[0]=e[12],t[1]=e[13],t[2]=e[14],t}function It(t,e){let n=e[0],r=e[1],o=e[2],a=e[4],u=e[5],i=e[6],c=e[8],s=e[9],f=e[10];return t[0]=Math.hypot(n,r,o),t[1]=Math.hypot(a,u,i),t[2]=Math.hypot(c,s,f),t}function Ft(t,e){let n=new at(3);It(n,e);let r=1/n[0],o=1/n[1],a=1/n[2],u=e[0]*r,i=e[1]*o,c=e[2]*a,s=e[4]*r,f=e[5]*o,l=e[6]*a,h=e[8]*r,p=e[9]*o,d=e[10]*a,m=u+f+d,v=0;return m>0?(v=2*Math.sqrt(m+1),t[3]=.25*v,t[0]=(l-p)/v,t[1]=(h-c)/v,t[2]=(i-s)/v):u>f&&u>d?(v=2*Math.sqrt(1+u-f-d),t[3]=(l-p)/v,t[0]=.25*v,t[1]=(i+s)/v,t[2]=(h+c)/v):f>d?(v=2*Math.sqrt(1+f-u-d),t[3]=(h-c)/v,t[0]=(i+s)/v,t[1]=.25*v,t[2]=(l+p)/v):(v=2*Math.sqrt(1+d-u-f),t[3]=(i-s)/v,t[0]=(h+c)/v,t[1]=(l+p)/v,t[2]=.25*v),t}function Rt(t,e,n,r){e[0]=r[12],e[1]=r[13],e[2]=r[14];let o=r[0],a=r[1],u=r[2],i=r[4],c=r[5],s=r[6],f=r[8],l=r[9],h=r[10];n[0]=Math.hypot(o,a,u),n[1]=Math.hypot(i,c,s),n[2]=Math.hypot(f,l,h);let p=1/n[0],d=1/n[1],m=1/n[2],v=o*p,y=a*d,b=u*m,M=i*p,g=c*d,x=s*m,E=f*p,A=l*d,T=h*m,w=v+g+T,S=0;return w>0?(S=2*Math.sqrt(w+1),t[3]=.25*S,t[0]=(x-A)/S,t[1]=(E-b)/S,t[2]=(y-M)/S):v>g&&v>T?(S=2*Math.sqrt(1+v-g-T),t[3]=(x-A)/S,t[0]=.25*S,t[1]=(y+M)/S,t[2]=(E+b)/S):g>T?(S=2*Math.sqrt(1+g-v-T),t[3]=(E-b)/S,t[0]=(y+M)/S,t[1]=.25*S,t[2]=(x+A)/S):(S=2*Math.sqrt(1+T-v-g),t[3]=(y-M)/S,t[0]=(E+b)/S,t[1]=(x+A)/S,t[2]=.25*S),t}function Pt(t,e,n,r){let o=e[0],a=e[1],u=e[2],i=e[3],c=o+o,s=a+a,f=u+u,l=o*c,h=o*s,p=o*f,d=a*s,m=a*f,v=u*f,y=i*c,b=i*s,M=i*f,g=r[0],x=r[1],E=r[2];return t[0]=(1-(d+v))*g,t[1]=(h+M)*g,t[2]=(p-b)*g,t[3]=0,t[4]=(h-M)*x,t[5]=(1-(l+v))*x,t[6]=(m+y)*x,t[7]=0,t[8]=(p+b)*E,t[9]=(m-y)*E,t[10]=(1-(l+d))*E,t[11]=0,t[12]=n[0],t[13]=n[1],t[14]=n[2],t[15]=1,t}function Bt(t,e,n,r,o){let a=e[0],u=e[1],i=e[2],c=e[3],s=a+a,f=u+u,l=i+i,h=a*s,p=a*f,d=a*l,m=u*f,v=u*l,y=i*l,b=c*s,M=c*f,g=c*l,x=r[0],E=r[1],A=r[2],T=o[0],w=o[1],S=o[2],C=(1-(m+y))*x,O=(p+g)*x,V=(d-M)*x,L=(p-g)*E,_=(1-(h+y))*E,I=(v+b)*E,F=(d+M)*A,R=(v-b)*A,P=(1-(h+m))*A;return t[0]=C,t[1]=O,t[2]=V,t[3]=0,t[4]=L,t[5]=_,t[6]=I,t[7]=0,t[8]=F,t[9]=R,t[10]=P,t[11]=0,t[12]=n[0]+T-(C*T+L*w+F*S),t[13]=n[1]+w-(O*T+_*w+R*S),t[14]=n[2]+S-(V*T+I*w+P*S),t[15]=1,t}function Nt(t,e){let n=e[0],r=e[1],o=e[2],a=e[3],u=n+n,i=r+r,c=o+o,s=n*u,f=r*u,l=r*i,h=o*u,p=o*i,d=o*c,m=a*u,v=a*i,y=a*c;return t[0]=1-l-d,t[1]=f+y,t[2]=h-v,t[3]=0,t[4]=f-y,t[5]=1-s-d,t[6]=p+m,t[7]=0,t[8]=h+v,t[9]=p-m,t[10]=1-s-l,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function Dt(t,e,n,r,o,a,u){let i=1/(n-e),c=1/(o-r),s=1/(a-u);return t[0]=2*a*i,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=2*a*c,t[6]=0,t[7]=0,t[8]=(n+e)*i,t[9]=(o+r)*c,t[10]=(u+a)*s,t[11]=-1,t[12]=0,t[13]=0,t[14]=u*a*2*s,t[15]=0,t}function Ut(t,e,n,r,o){const a=1/Math.tan(e/2);if(t[0]=a/n,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=a,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=-1,t[12]=0,t[13]=0,t[15]=0,null!=o&&o!==1/0){const e=1/(r-o);t[10]=(o+r)*e,t[14]=2*o*r*e}else t[10]=-1,t[14]=-2*r;return t}Math.hypot||(Math.hypot=function(){for(var t=0,e=arguments.length;e--;)t+=arguments[e]*arguments[e];return Math.sqrt(t)});const kt=Ut;function jt(t,e,n,r,o){const a=1/Math.tan(e/2);if(t[0]=a/n,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=a,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=-1,t[12]=0,t[13]=0,t[15]=0,null!=o&&o!==1/0){const e=1/(r-o);t[10]=o*e,t[14]=o*r*e}else t[10]=-1,t[14]=-r;return t}function qt(t,e,n,r){let o=Math.tan(e.upDegrees*Math.PI/180),a=Math.tan(e.downDegrees*Math.PI/180),u=Math.tan(e.leftDegrees*Math.PI/180),i=Math.tan(e.rightDegrees*Math.PI/180),c=2/(u+i),s=2/(o+a);return t[0]=c,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=s,t[6]=0,t[7]=0,t[8]=-(u-i)*c*.5,t[9]=(o-a)*s*.5,t[10]=r/(n-r),t[11]=-1,t[12]=0,t[13]=0,t[14]=r*n/(n-r),t[15]=0,t}function Ht(t,e,n,r,o,a,u){const i=1/(e-n),c=1/(r-o),s=1/(a-u);return t[0]=-2*i,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*c,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*s,t[11]=0,t[12]=(e+n)*i,t[13]=(o+r)*c,t[14]=(u+a)*s,t[15]=1,t}const Yt=Ht;function Gt(t,e,n,r,o,a,u){const i=1/(e-n),c=1/(r-o),s=1/(a-u);return t[0]=-2*i,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*c,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=s,t[11]=0,t[12]=(e+n)*i,t[13]=(o+r)*c,t[14]=a*s,t[15]=1,t}function Kt(t,e,n,r){let o,a,u,i,c,s,f,l,h,p,d=e[0],m=e[1],v=e[2],y=r[0],b=r[1],M=r[2],g=n[0],x=n[1],E=n[2];return Math.abs(d-g)<ot&&Math.abs(m-x)<ot&&Math.abs(v-E)<ot?lt(t):(f=d-g,l=m-x,h=v-E,p=1/Math.hypot(f,l,h),f*=p,l*=p,h*=p,o=b*h-M*l,a=M*f-y*h,u=y*l-b*f,p=Math.hypot(o,a,u),p?(p=1/p,o*=p,a*=p,u*=p):(o=0,a=0,u=0),i=l*u-h*a,c=h*o-f*u,s=f*a-l*o,p=Math.hypot(i,c,s),p?(p=1/p,i*=p,c*=p,s*=p):(i=0,c=0,s=0),t[0]=o,t[1]=i,t[2]=f,t[3]=0,t[4]=a,t[5]=c,t[6]=l,t[7]=0,t[8]=u,t[9]=s,t[10]=h,t[11]=0,t[12]=-(o*d+a*m+u*v),t[13]=-(i*d+c*m+s*v),t[14]=-(f*d+l*m+h*v),t[15]=1,t)}function Jt(t,e,n,r){let o=e[0],a=e[1],u=e[2],i=r[0],c=r[1],s=r[2],f=o-n[0],l=a-n[1],h=u-n[2],p=f*f+l*l+h*h;p>0&&(p=1/Math.sqrt(p),f*=p,l*=p,h*=p);let d=c*h-s*l,m=s*f-i*h,v=i*l-c*f;return p=d*d+m*m+v*v,p>0&&(p=1/Math.sqrt(p),d*=p,m*=p,v*=p),t[0]=d,t[1]=m,t[2]=v,t[3]=0,t[4]=l*v-h*m,t[5]=h*d-f*v,t[6]=f*m-l*d,t[7]=0,t[8]=f,t[9]=l,t[10]=h,t[11]=0,t[12]=o,t[13]=a,t[14]=u,t[15]=1,t}function Xt(t){return"mat4("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+", "+t[8]+", "+t[9]+", "+t[10]+", "+t[11]+", "+t[12]+", "+t[13]+", "+t[14]+", "+t[15]+")"}function Zt(t){return Math.hypot(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12],t[13],t[14],t[15])}function Qt(t,e,n){return t[0]=e[0]+n[0],t[1]=e[1]+n[1],t[2]=e[2]+n[2],t[3]=e[3]+n[3],t[4]=e[4]+n[4],t[5]=e[5]+n[5],t[6]=e[6]+n[6],t[7]=e[7]+n[7],t[8]=e[8]+n[8],t[9]=e[9]+n[9],t[10]=e[10]+n[10],t[11]=e[11]+n[11],t[12]=e[12]+n[12],t[13]=e[13]+n[13],t[14]=e[14]+n[14],t[15]=e[15]+n[15],t}function Wt(t,e,n){return t[0]=e[0]-n[0],t[1]=e[1]-n[1],t[2]=e[2]-n[2],t[3]=e[3]-n[3],t[4]=e[4]-n[4],t[5]=e[5]-n[5],t[6]=e[6]-n[6],t[7]=e[7]-n[7],t[8]=e[8]-n[8],t[9]=e[9]-n[9],t[10]=e[10]-n[10],t[11]=e[11]-n[11],t[12]=e[12]-n[12],t[13]=e[13]-n[13],t[14]=e[14]-n[14],t[15]=e[15]-n[15],t}function zt(t,e,n){return t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t[3]=e[3]*n,t[4]=e[4]*n,t[5]=e[5]*n,t[6]=e[6]*n,t[7]=e[7]*n,t[8]=e[8]*n,t[9]=e[9]*n,t[10]=e[10]*n,t[11]=e[11]*n,t[12]=e[12]*n,t[13]=e[13]*n,t[14]=e[14]*n,t[15]=e[15]*n,t}function $t(t,e,n,r){return t[0]=e[0]+n[0]*r,t[1]=e[1]+n[1]*r,t[2]=e[2]+n[2]*r,t[3]=e[3]+n[3]*r,t[4]=e[4]+n[4]*r,t[5]=e[5]+n[5]*r,t[6]=e[6]+n[6]*r,t[7]=e[7]+n[7]*r,t[8]=e[8]+n[8]*r,t[9]=e[9]+n[9]*r,t[10]=e[10]+n[10]*r,t[11]=e[11]+n[11]*r,t[12]=e[12]+n[12]*r,t[13]=e[13]+n[13]*r,t[14]=e[14]+n[14]*r,t[15]=e[15]+n[15]*r,t}function te(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]&&t[4]===e[4]&&t[5]===e[5]&&t[6]===e[6]&&t[7]===e[7]&&t[8]===e[8]&&t[9]===e[9]&&t[10]===e[10]&&t[11]===e[11]&&t[12]===e[12]&&t[13]===e[13]&&t[14]===e[14]&&t[15]===e[15]}function ee(t,e){let n=t[0],r=t[1],o=t[2],a=t[3],u=t[4],i=t[5],c=t[6],s=t[7],f=t[8],l=t[9],h=t[10],p=t[11],d=t[12],m=t[13],v=t[14],y=t[15],b=e[0],M=e[1],g=e[2],x=e[3],E=e[4],A=e[5],T=e[6],w=e[7],S=e[8],C=e[9],O=e[10],V=e[11],L=e[12],_=e[13],I=e[14],F=e[15];return Math.abs(n-b)<=ot*Math.max(1,Math.abs(n),Math.abs(b))&&Math.abs(r-M)<=ot*Math.max(1,Math.abs(r),Math.abs(M))&&Math.abs(o-g)<=ot*Math.max(1,Math.abs(o),Math.abs(g))&&Math.abs(a-x)<=ot*Math.max(1,Math.abs(a),Math.abs(x))&&Math.abs(u-E)<=ot*Math.max(1,Math.abs(u),Math.abs(E))&&Math.abs(i-A)<=ot*Math.max(1,Math.abs(i),Math.abs(A))&&Math.abs(c-T)<=ot*Math.max(1,Math.abs(c),Math.abs(T))&&Math.abs(s-w)<=ot*Math.max(1,Math.abs(s),Math.abs(w))&&Math.abs(f-S)<=ot*Math.max(1,Math.abs(f),Math.abs(S))&&Math.abs(l-C)<=ot*Math.max(1,Math.abs(l),Math.abs(C))&&Math.abs(h-O)<=ot*Math.max(1,Math.abs(h),Math.abs(O))&&Math.abs(p-V)<=ot*Math.max(1,Math.abs(p),Math.abs(V))&&Math.abs(d-L)<=ot*Math.max(1,Math.abs(d),Math.abs(L))&&Math.abs(m-_)<=ot*Math.max(1,Math.abs(m),Math.abs(_))&&Math.abs(v-I)<=ot*Math.max(1,Math.abs(v),Math.abs(I))&&Math.abs(y-F)<=ot*Math.max(1,Math.abs(y),Math.abs(F))}const ne=vt,re=Wt;var oe=function(t,e,n,r){return new(n||(n=Promise))((function(o,a){function u(t){try{c(r.next(t))}catch(t){a(t)}}function i(t){try{c(r.throw(t))}catch(t){a(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(u,i)}c((r=r.apply(t,e||[])).next())}))},ae=function(t,e){var n,r,o,a,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function i(a){return function(i){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return u.label++,{value:a[1],done:!1};case 5:u.label++,r=a[1],a=[0];continue;case 7:a=u.ops.pop(),u.trys.pop();continue;default:if(!(o=u.trys,(o=o.length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){u=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){u.label=a[1];break}if(6===a[0]&&u.label<o[1]){u.label=o[1],o=a;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(a);break}o[2]&&u.ops.pop(),u.trys.pop();continue}a=e.call(t,u)}catch(t){a=[6,t],r=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,i])}}};oe(void 0,void 0,void 0,(function(){var t,e,n,o,i,c,s,l,h,v,y,b,M,x,E,w,S,C,_,I,F,R,P,B,k,j,H,Y,G,K;return ae(this,(function(X){var Z,Q,W;return t=new et,e=document.getElementById("viewer"),n=m("viewer-options"),o=m("viewer-shader-options"),i=m("viewer-content shader-errors"),c=$("viewer-content"),s=c[0],l=c[1],h=new Map([["positions",{name:"Binding - Mesh positions",type:A.FLOAT_VEC4,value:new q([])}],["colors",{name:"Binding - Mesh colors",type:A.FLOAT_VEC4,value:new q([])}]]),v={drawMode:"arrays"},e.appendChild(s),e.appendChild(i),e.appendChild(n),y=function(t){s.style.visibility="canvas"===t?"visible":"collapse",i.style.visibility="errors"===t?"visible":"collapse"},b=function(){t.getShaderDocuments().then((function(t){var e=t.map((function(t){return{id:t.filePath,display:t.fileName}}));R.setItems(e),k.setItems(e)}))},S=null,C=function(t){var e=rt.get(t),n=e.positions,r=e.colors;h.get("positions").value.setValue(n),h.get("colors").value.setValue(r)},_=function(){o.innerHTML="";var t=l.context;if(w&&E){var e=function(t,e,n){var r=D(t,t.VERTEX_SHADER,e),o=D(t,t.FRAGMENT_SHADER,n),a=void 0;g(r,"error")&&(a=N(r.error,1));var u=void 0;return g(o,"error")&&(u=N(o.error,1)),a||u?[a,u]:U(t,r,o)}(t,E,w);if(Array.isArray(e))y("errors"),i.innerText=function(t){var e=t[0],n=t[1],r=[];return e&&r.push("VERTEX SHADER:",e),n&&r.push("FRAGMENT SHADER:",n),r.join("\r\n")}(e);else{y("canvas");var n=e,u=function(t,e){for(var n=t.getProgramParameter(e,t.ACTIVE_UNIFORMS),r=[],o=0;o<n;++o){var a=t.getActiveUniform(e,o);r.push({name:a.name,type:a.type})}return r}(t,n),c=function(t,e){for(var n=t.getProgramParameter(e,t.ACTIVE_ATTRIBUTES),r=[],o=0;o<n;++o){var a=t.getActiveAttrib(e,o);r.push({name:a.name,type:a.type})}return r}(t,n),s=function(t,e,n){var r=n.map((function(n){var r=O({},n),o=V.get(r);if(o)return o.uniformInfo.attachToProgram(e),{key:r,value:o};var a=new T(t,e,n.name,n.type);return{key:r,value:{component:d(L(a),n.name),uniformInfo:a}}}));return V.clear(),r.forEach((function(t){return V.set(t.key,t.value)})),r.map((function(t){return t.value}))}(t,n,u);s.forEach((function(t){return o.appendChild(t.component)}));var f=J(t,n,c,Array.from(h.values()));f.forEach((function(t){return o.appendChild(t.component)}));var p=s.map((function(t){return t.uniformInfo})),m=f.map((function(t){return t.attributeBufferInfo})),b=new a(t);b.setValue([0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23]),null!==S&&cancelAnimationFrame(S);var M=0,x=p.find((function(t){return"uModelViewMatrix"===t.getUniformName()})),A=p.find((function(t){return"uProjectionMatrix"===t.getUniformName()})),C=0,_=function(e){var o=(e*=.001)-C;C=e;var a=45*Math.PI/180,u=t.canvas,i=u.clientWidth/u.clientHeight,c=r.create();r.perspective(c,a,i,.1,100);var s=r.create();r.translate(s,s,[-0,0,-6]),r.rotate(s,s,M,[0,0,1]),r.rotate(s,s,.7*M,[0,1,0]),A.setValue(c),x.setValue(s),function(t,e,n,r){t.useProgram(e),t.viewport(0,0,t.canvas.width,t.canvas.height),t.clearColor(0,0,0,1),t.clearDepth(1),t.enable(t.DEPTH_TEST),t.depthFunc(t.LEQUAL),t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT),n.uniformInfos.forEach((function(t){return t.setUniform()})),n.attributeBufferInfos.forEach((function(t){return t.setAttributeBuffer()}));var o=Math.min.apply(Math,n.attributeBufferInfos.map((function(t){return t.getNumElements()}))),a=t.TRIANGLES;"arrays"===r.drawMode?t.drawArrays(a,0,o):(n.indexBufferInfo.setIndexBuffer(),t.drawElements(a,36,t.UNSIGNED_SHORT,0))}(t,n,{uniformInfos:p,attributeBufferInfos:m,indexBufferInfo:b},v),M+=o,S=requestAnimationFrame(_)};_(0)}}else y("none")},n.appendChild(m("viewer-shaders-title",[(Z=u,Q="",W=document.createElement("h3"),W.textContent=Z,W.className=Q+" section-title",{element:W}).element,p("Sync","viewer-refresh-button",b).element])),I=f((function(e){return oe(void 0,void 0,void 0,(function(){var n;return ae(this,(function(r){switch(r.label){case 0:return null==M||M(),e&&(M=t.subscribeToDocumentSave(e.id,(function(t){E=t,_()}))),e?[4,t.getDocumentText(e.id)]:[3,2];case 1:return n=r.sent(),[3,3];case 2:n="",r.label=3;case 3:return E=n,_(),[2]}}))}))})),F=I[0],R=I[1],n.appendChild(d(F,"Vertex Shader")),P=f((function(e){return oe(void 0,void 0,void 0,(function(){var n;return ae(this,(function(r){switch(r.label){case 0:return null==x||x(),e&&(x=t.subscribeToDocumentSave(e.id,(function(t){w=t,_()}))),e?[4,t.getDocumentText(e.id)]:[3,2];case 1:return n=r.sent(),[3,3];case 2:n="",r.label=3;case 3:return w=n,_(),[2]}}))}))})),B=P[0],k=P[1],n.appendChild(d(B,"Fragment Shader")),j=f((function(t){return t&&C(t.id)}),void 0,{emptyItem:!1}),H=j[0],(Y=j[1]).setItems(Array.from(rt.entries()).map((function(t){return{id:t[0],display:t[1].display}}))),Y.setSelectedItemByIndex(0),n.appendChild(d(H,"Mesh")),G=f((function(t){return t&&(v.drawMode=t.id)}),void 0,{emptyItem:!1}),K=G[0],G[1].setItems([{id:"arrays",display:"Arrays"},{id:"elements",display:"Elements"}]),n.appendChild(d(K,"Draw mode")),n.appendChild(o),b(),[2]}))}))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,