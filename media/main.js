!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);var r,o=function(e,t){return e.substring(0,e.length-t)},i=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){var t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}))},a=acquireVsCodeApi(),u=function(){function e(){var e=this;this.eventListeners=[],window.addEventListener("message",(function(t){e.eventListeners.forEach((function(e){return e(t.data)}))}))}return e.prototype.getShaderDocuments=function(){var e=this,t=i();return a.postMessage({type:"getShaderDocuments",id:t}),new Promise((function(n){var r=function(o){"getShaderDocuments"===o.type&&o.id===t&&(n(o.payload.files),e.removeListener(r))};e.eventListeners.push(r)}))},e.prototype.getDocumentText=function(e){var t=this,n=i();return a.postMessage({type:"getDocumentText",id:n,payload:{fileName:e}}),new Promise((function(e){var r=function(o){"getDocumentText"===o.type&&o.id===n&&(e(o.payload.text),t.removeListener(r))};t.eventListeners.push(r)}))},e.prototype.subscribeToDocumentSave=function(e,t){var n=this;a.postMessage({type:"subscribeToDocumentTextChange",payload:{fileName:e}});var r=function(n){"onDocumentTextChange"===n.type&&n.payload.filePath===e&&t(n.payload.text)};return this.eventListeners.push(r),function(){n.removeListener(r),a.postMessage({type:"unsubscribeToDocumentTextChange",payload:{fileName:e}})}},e.prototype.removeListener=function(e){var t,n,r;t=this.eventListeners,n=e,(r=t.indexOf(n))>-1&&t.splice(r,1)},e}(),c="SHADERS",s=function(){return(s=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},l=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],a=0,u=i.length;a<u;a++,o++)r[o]=i[a];return r},f={emptyItem:!0},p=function(e,t,n){var r=s(s({},f),n),o=document.createElement("select");o.className="dropdown-base "+t;var i=null,a=[],u=function(t){e(i=t)};o.onchange=function(){var e=a.find((function(e){return e.item.id===o.value}));e.item.id?u(e.item):u(null)};return[o,{setItems:function(e){o.innerHTML="",a.length=0,e.find((function(e){return e.id===(null==i?void 0:i.id)}))||u(null),(r.emptyItem?l([{id:"",display:""}],e):l(e)).forEach((function(e){var t=document.createElement("option");t.value=e.id,t.textContent=e.display,t.selected=e.id===(null==i?void 0:i.id),o.appendChild(t),a.push({element:t,item:e})}))},getItems:function(){return a.map((function(e){return e.item}))},setSelectedItemById:function(e){u(null),a.forEach((function(t){t.item.id===e?(t.element.selected=!0,u(t.item)):t.element.selected=!1}))},getSelectedItem:function(){return i},clearSelection:function(){a.forEach((function(e){return e.element.selected=!1})),u(null)}}]},d=function(e,t,n){var r=document.createElement("button");return r.onclick=n,r.className=t,r.textContent=e,{element:r}},h=function(e,t,n){var r=document.createElement("div");r.className=(null!=n?n:"")+" options-wrapper";var o=document.createElement("label");return o.className="options-label",o.textContent=t,e.className=e.className+" options-content",r.appendChild(o),r.appendChild(e),r},m=function(e,t){var n=document.createElement("div");return n.className=e,null==t||t.forEach((function(e){return n.appendChild(e)})),n},v=function(e,t,n,r,o){var i=document.createElement("div");i.className="edit-input-grid";for(var a=[],u=function(){return a.map((function(e){return e.value}))},c=0;c<n;c++){var s=document.createElement("div");s.className="edit-input-row";for(var l=function(n){var i=c*r+n,l=e[i],f=document.createElement("input"),p={element:f,value:l};Object.assign(f,o),f.className="edit-input",f.type="number",f.value=null==l?void 0:l.toString(),f.oninput=function(){a[i].value=Number(f.value),null==t||t(u())},a.push(p),s.appendChild(f)},f=0;f<r;f++)l(f);i.appendChild(s)}return[i,{setValues:function(e){return a.forEach((function(t,n){t.value=e[n],t.element.value=t.value.toString()}))},getValues:u,setReadonly:function(e){return a.forEach((function(t){return t.element.readOnly=e}))}}]},y=function(e){return v([0,0,0],e,1,3)},g=function(){return(g=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},b={min:"0",max:"1",step:"0.1"},x=function(e,t){return e.hasOwnProperty(t)},E=function(e){throw new Error("Unhandled union member: "+JSON.stringify(e))},A=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],a=0,u=i.length;a<u;a++,o++)r[o]=i[a];return r};!function(e){e[e.FLOAT_VEC2=35664]="FLOAT_VEC2",e[e.FLOAT_VEC3=35665]="FLOAT_VEC3",e[e.FLOAT_VEC4=35666]="FLOAT_VEC4",e[e.SAMPLER_2D=35678]="SAMPLER_2D"}(r||(r={}));var T,w=function(){function e(e,t,n,r){this.context=e,this.name=n,this.type=r,this.attachToProgram(t)}return e.prototype.attachToProgram=function(e){var t=this.context.getUniformLocation(e,this.name);this.setter=C(this.type,this.context,t)},e.prototype.setValue=function(e){this.value=e},e.prototype.setUniform=function(){null!==this.value&&this.setter(this.value)},e.prototype.getUniformType=function(){return this.type},e.prototype.dispose=function(){},e}(),C=function(e,t,n){switch(e){case r.FLOAT_VEC2:return function(e){return t.uniform2f.apply(t,A([n],e))};case r.FLOAT_VEC3:return function(e){return t.uniform3f.apply(t,A([n],e))};case r.FLOAT_VEC4:return function(e){return t.uniform4f.apply(t,A([n],e))};case r.SAMPLER_2D:return function(e){};default:E(e)}},S=function(){function e(e){this.keySelector=e,this.map=new Map}return e.prototype.get=function(e){return this.map.get(this.keySelector(e))},e.prototype.set=function(e,t){this.map.set(this.keySelector(e),t)},e.prototype.has=function(e){this.map.has(this.keySelector(e))},e.prototype.clear=function(){this.map.clear()},e}(),O=function(){return(O=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},V=new S((function(e){return e.name+";"+e.type})),L=function(e){switch(e.getUniformType()){case r.FLOAT_VEC2:return F((function(t){return e.setValue(t)}));case r.FLOAT_VEC3:return I((function(t){return e.setValue(t)}));case r.FLOAT_VEC4:var t=[1,0,0,1];return e.setValue(t),R(t,(function(t){return e.setValue(t)}));case r.SAMPLER_2D:return N((function(t){i();e.setValue({slot:t.slot,textureData:!0})}));default:return _()}},_=function(){var e=document.createElement("div");return e.className="unsupported-error",e.innerText="Not supported uniform",e},P=function(e){var t=p((function(t){t&&(Object.values(e).forEach((function(e){return e.element.classList.add("hidden")})),e[t.id].element.classList.remove("hidden"))}),"",{emptyItem:!1}),n=t[0],r=t[1];return r.setItems(Object.entries(e).map((function(e){return{id:e[0],display:e[1].display}}))),r.setSelectedItemById("custom"),n},F=function(e){var t=v([0,0],e,1,2),n=t[0];return t[1].setValues([0,0]),n},N=function(e){var t=y(),n=t[0];return t[1].setValues([0,0,0]),n},I=function(e){var t=y(e),n=t[0];t[1].setValues([0,0,0]);var r=function(e){var t=[.5,.5,.5],n=document.createElement("div");n.className="edit-input-color";var r=function(e){n.style.background="rgb("+255*e[0]+","+255*e[1]+","+255*e[2]+",1)"};r(t);var o=m("row-with-gap"),i=v(t,(function(t){r(t),null==e||e(t)}),1,3,b),a=i[0],u=i[1];return o.appendChild(a),o.appendChild(n),[o,g(g({},u),{setValues:function(e){u.setValues(e),r(e)}})]}(e),o=r[0];r[1].setValues([1,0,0]);var i=P({custom:{display:"Custom",element:n},color:{display:"Color",element:o}});return m("column-with-gap",[i,n,o])},R=function(e,t){var n=v([0,0,0,0],t,1,4),r=n[0];n[1].setValues(e);var o=function(e){var t=[.5,.5,.5,1],n=document.createElement("div");n.className="edit-input-color";var r=function(e){n.style.background="rgb("+255*e[0]+","+255*e[1]+","+255*e[2]+","+e[3]+")"};r(t);var o=m("row-with-gap"),i=v(t,(function(t){r(t),null==e||e(t)}),1,4,b),a=i[0],u=i[1];return o.appendChild(a),o.appendChild(n),[o,g(g({},u),{setValues:function(e){u.setValues(e),r(e)}})]}(t),i=o[0];o[1].setValues(e);var a=P({custom:{display:"Custom",element:r},color:{display:"Color",element:i}});return m("column-with-gap",[a,r,i])},D=function(e,t,n){var r=e.createShader(t);if(e.shaderSource(r,n),e.compileShader(r),e.getShaderParameter(r,e.COMPILE_STATUS))return r;var o=e.getShaderInfoLog(r);return e.deleteShader(r),{error:o}},B=function(e,t,n){var r=e.createProgram();if(e.attachShader(r,t),e.attachShader(r,n),e.linkProgram(r),e.getProgramParameter(r,e.LINK_STATUS))return r;throw e.deleteProgram(r),new Error("Creating program failed: "+e.getProgramInfoLog(r))};!function(e){e[e.FLOAT_VEC3=35665]="FLOAT_VEC3",e[e.FLOAT_VEC4=35666]="FLOAT_VEC4"}(T||(T={}));var j=function(){function e(e,t,n,r){this.context=e,this.name=n,this.type=r,this.attachToProgram(t),this.buffer=e.createBuffer()}return e.prototype.attachToProgram=function(e){this.location=this.context.getAttribLocation(e,this.name)},e.prototype.setValue=function(e){this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffer);var t=[].concat.apply([],e);this.context.bufferData(this.context.ARRAY_BUFFER,new Float32Array(t),this.context.STATIC_DRAW)},e.prototype.setAttributeBuffer=function(){if(null!==this.buffer){this.context.enableVertexAttribArray(this.location),this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffer);var e=M(this.type),t=this.context.FLOAT;this.context.vertexAttribPointer(this.location,e,t,!1,0,0)}},e.prototype.getAttributeBufferType=function(){return this.type},e.prototype.dispose=function(){this.context.deleteBuffer(this.buffer),this.buffer=null},e}(),M=function(e){switch(e){case T.FLOAT_VEC3:return 3;case T.FLOAT_VEC4:return 4;default:E(e)}},k=function(){return(k=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},U=new S((function(e){return e.name+";"+e.type})),H=function(e){switch(e.getAttributeBufferType()){case T.FLOAT_VEC3:return J((function(t){e.setValue(t)}));case T.FLOAT_VEC4:var t=[[0,0,0,1],[0,.5,0,1],[.7,0,0,1]];return e.setValue(t),Y(t,(function(t){e.setValue(t)}));default:return G()}},G=function(){var e=document.createElement("div");return e.className="unsupported-error",e.innerText="Not supported attribute buffer",e},J=function(e){var t=document.createElement("input");return t.className="edit-input",t.oninput=function(){try{var n=JSON.parse(t.value);if(console.log("result",n),Array.isArray(n))n.every((function(e){return!!Array.isArray(e)&&3===e.length}))||console.log("not every element id the arra is same size");else console.log("this is not an array type");e(n)}catch(e){console.log("this is not a json")}},t},Y=function(e,t){var n=document.createElement("input");return n.className="edit-input",n.value=JSON.stringify(e),n.oninput=function(){try{var e=JSON.parse(n.value);if(Array.isArray(e))e.every((function(e){return!!Array.isArray(e)&&4===e.length}));else;t(e)}catch(e){console.log("this is not a json")}},n},q=function(e){var t=document.createElement("canvas");t.className=e;var n,r,o=t.getContext("webgl");if(n=t,r=function(e){t.width=e.width,t.height=e.height},new ResizeObserver((function(e){var t=e.find((function(e){return e.target===n}));if(t){var o=t.target.getBoundingClientRect();r({x:o.x,y:o.y,width:o.width,height:o.height})}})).observe(n),!o)throw new Error("Unable to create webgl context");return[t,{context:o}]},z=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function u(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,u)}c((r=r.apply(e,t||[])).next())}))},X=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=a.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}};z(void 0,void 0,void 0,(function(){var e,t,n,r,i,a,s,l,f,v,y,g,b,E,A,T,C,S,_,P,F,N,I,R;return X(this,(function(M){var G,J,Y;return e=new u,t=document.getElementById("viewer"),n=m("viewer-options"),r=m("viewer-shader-options"),i=m("viewer-content shader-errors"),a=q("viewer-content"),s=a[0],l=a[1],t.appendChild(s),t.appendChild(i),t.appendChild(n),f=function(e){s.style.visibility="canvas"===e?"visible":"collapse",i.style.visibility="errors"===e?"visible":"collapse"},v=function(){e.getShaderDocuments().then((function(e){var t=e.map((function(e){return{id:e.filePath,display:e.fileName}}));_.setItems(t),N.setItems(t)}))},A=null,T=function(){r.innerHTML="";var e,t,n,a,u=l.context;if(E&&b){var c=function(e,t,n){var r=D(e,e.VERTEX_SHADER,t),i=D(e,e.FRAGMENT_SHADER,n),a=void 0;x(r,"error")&&(a=o(r.error,1));var u=void 0;return x(i,"error")&&(u=o(i.error,1)),a||u?[a,u]:B(e,r,i)}(u,b,E);if(Array.isArray(c))f("errors"),i.innerText=(t=(e=c)[0],n=e[1],a=[],t&&a.push("VERTEX SHADER:",t),n&&a.push("FRAGMENT SHADER:",n),a.join("\r\n"));else{f("canvas");var s=c,p=function(e,t){for(var n=e.getProgramParameter(t,e.ACTIVE_UNIFORMS),r=[],o=0;o<n;++o){var i=e.getActiveUniform(t,o);r.push({name:i.name,type:i.type})}return r}(u,s),d=function(e,t){for(var n=e.getProgramParameter(t,e.ACTIVE_ATTRIBUTES),r=[],o=0;o<n;++o){var i=e.getActiveAttrib(t,o);r.push({name:i.name,type:i.type})}return r}(u,s),m=function(e,t,n){var r=n.map((function(n){var r=O({},n),o=V.get(r);if(o)return o.uniformInfo.attachToProgram(t),{key:r,value:o};var i=new w(e,t,n.name,n.type);return{key:r,value:{component:h(L(i),n.name),uniformInfo:i}}}));return V.clear(),r.forEach((function(e){return V.set(e.key,e.value)})),r.map((function(e){return e.value}))}(u,s,p);m.forEach((function(e){return r.appendChild(e.component)}));var v=function(e,t,n){var r=n.map((function(n){var r=k({},n),o=U.get(r);if(o)return o.attributeBufferInfo.attachToProgram(t),{key:r,value:o};var i=new j(e,t,n.name,n.type);return{key:r,value:{component:h(H(i),n.name),attributeBufferInfo:i}}}));return U.clear(),r.forEach((function(e){return U.set(e.key,e.value)})),r.map((function(e){return e.value}))}(u,s,d);v.forEach((function(e){return r.appendChild(e.component)}));var y=m.map((function(e){return e.uniformInfo})),g=v.map((function(e){return e.attributeBufferInfo}));null!==A&&cancelAnimationFrame(A);var T=function(){!function(e,t,n){e.useProgram(t),e.viewport(0,0,e.canvas.width,e.canvas.height),e.clearColor(0,0,0,0),e.clear(e.COLOR_BUFFER_BIT),n.uniforms.forEach((function(e){return e.setUniform()})),n.attributeBuffers.forEach((function(e){return e.setAttributeBuffer()}));var r=e.TRIANGLES;e.drawArrays(r,0,3)}(l.context,c,{uniforms:y,attributeBuffers:g}),A=requestAnimationFrame(T)};T()}}else f("none")},n.appendChild(m("viewer-shaders-title",[(G=c,J="",Y=document.createElement("h3"),Y.textContent=G,Y.className=J+" section-title",{element:Y}).element,d("Sync","viewer-refresh-button",v).element])),C=p((function(t){return z(void 0,void 0,void 0,(function(){var n;return X(this,(function(r){switch(r.label){case 0:return null==y||y(),t&&(y=e.subscribeToDocumentSave(t.id,(function(e){b=e,T()}))),t?[4,e.getDocumentText(t.id)]:[3,2];case 1:return n=r.sent(),[3,3];case 2:n="",r.label=3;case 3:return b=n,T(),[2]}}))}))})),S=C[0],_=C[1],n.appendChild(h(S,"Vertex Shader")),P=p((function(t){return z(void 0,void 0,void 0,(function(){var n;return X(this,(function(r){switch(r.label){case 0:return null==g||g(),t&&(g=e.subscribeToDocumentSave(t.id,(function(e){E=e,T()}))),t?[4,e.getDocumentText(t.id)]:[3,2];case 1:return n=r.sent(),[3,3];case 2:n="",r.label=3;case 3:return E=n,T(),[2]}}))}))})),F=P[0],N=P[1],n.appendChild(h(F,"Fragment Shader")),I=p((function(){})),R=I[0],I[1].setItems([{id:"cube",display:"Cube"},{id:"circle",display:"Circle"}]),n.appendChild(h(R,"Mesh")),n.appendChild(r),v(),[2]}))}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,