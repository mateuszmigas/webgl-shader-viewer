!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);var r,o="SHADERS",i=function(){return(i=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},u=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],u=0,a=i.length;u<a;u++,o++)r[o]=i[u];return r},a={emptyItem:!0},c=function(e,t,n){var r=i(i({},a),n),o=document.createElement("select");o.className="dropdown-base "+t;var c=null,s=[],l=function(t){e(c=t)};o.onchange=function(){var e=s.find((function(e){return e.item.id===o.value}));e.item.id?l(e.item):l(null)};var f=function(e){l(null),s.forEach((function(t){t.item.id===e?(t.element.selected=!0,l(t.item)):t.element.selected=!1}))};return[o,{setItems:function(e){o.innerHTML="",s.length=0,e.find((function(e){return e.id===(null==c?void 0:c.id)}))||l(null),(r.emptyItem?u([{id:"",display:""}],e):u(e)).forEach((function(e){var t=document.createElement("option");t.value=e.id,t.textContent=e.display,t.selected=e.id===(null==c?void 0:c.id),o.appendChild(t),s.push({element:t,item:e})}))},getItems:function(){return s.map((function(e){return e.item}))},setSelectedItemById:f,setSelectedItemByIndex:function(e){return f(s[e].item.id)},getSelectedItem:function(){return c},clearSelection:function(){s.forEach((function(e){return e.element.selected=!1})),l(null)}}]},s=function(e){var t=c((function(t){t&&(e.forEach((function(e){return e.element.classList.add("hidden")})),e.find((function(e){return e.id===t.id})).element.classList.remove("hidden"))}),"",{emptyItem:!1}),n=t[0],r=t[1];return r.setItems(e.map((function(e){return{id:e.id,display:e.display}}))),r.setSelectedItemByIndex(0),n},l=function(e){return{id:"custom",display:"Custom",element:e}},f=function(e,t,n){var r=document.createElement("button");return r.onclick=n,r.className=t,r.textContent=e,{element:r}},p=function(e,t,n){var r=document.createElement("div");r.className=(null!=n?n:"")+" options-wrapper";var o=document.createElement("label");return o.className="options-label",o.textContent=t,e.className=e.className+" options-content",r.appendChild(o),r.appendChild(e),r},d=function(e,t){var n=document.createElement("div");return n.className=e,null==t||t.forEach((function(e){return n.appendChild(e)})),n},m=function(e,t,n,r,o){var i=document.createElement("div");i.className="edit-input-grid";for(var u=[],a=function(){return u.map((function(e){return e.value}))},c=0;c<n;c++){var s=document.createElement("div");s.className="edit-input-row";for(var l=function(n){var i=c*r+n,l=e[i],f=document.createElement("input"),p={element:f,value:l};Object.assign(f,o),f.className="edit-input",f.type="number",f.value=null==l?void 0:l.toString(),f.oninput=function(){u[i].value=Number(f.value),null==t||t(a())},u.push(p),s.appendChild(f)},f=0;f<r;f++)l(f);i.appendChild(s)}return[i,{setValues:function(e){return u.forEach((function(t,n){t.value=e[n],t.element.value=t.value.toString()}))},getValues:a,setReadonly:function(e){return u.forEach((function(t){return t.element.readOnly=e}))}}]},h=function(e){return m([0,0,0],e,1,3)},v=function(){return(v=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},y={min:"0",max:"1",step:"0.1"},g=function(e,t){return e.hasOwnProperty(t)},b=function(e){throw new Error("Unhandled union member: "+JSON.stringify(e))},x=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],u=0,a=i.length;u<a;u++,o++)r[o]=i[u];return r};!function(e){e[e.FLOAT_VEC2=35664]="FLOAT_VEC2",e[e.FLOAT_VEC3=35665]="FLOAT_VEC3",e[e.FLOAT_VEC4=35666]="FLOAT_VEC4",e[e.SAMPLER_2D=35678]="SAMPLER_2D"}(r||(r={}));var E,A=function(){function e(e,t,n,r){this.context=e,this.name=n,this.type=r,this.attachToProgram(t)}return e.prototype.attachToProgram=function(e){var t=this.context.getUniformLocation(e,this.name);this.setter=T(this.type,this.context,t)},e.prototype.setValue=function(e){this.value=e},e.prototype.setUniform=function(){null!==this.value&&this.setter(this.value)},e.prototype.getUniformType=function(){return this.type},e.prototype.dispose=function(){},e}(),T=function(e,t,n){switch(e){case r.FLOAT_VEC2:return function(e){return t.uniform2f.apply(t,x([n],e))};case r.FLOAT_VEC3:return function(e){return t.uniform3f.apply(t,x([n],e))};case r.FLOAT_VEC4:return function(e){return t.uniform4f.apply(t,x([n],e))};case r.SAMPLER_2D:return function(e){};default:b(e)}},C=function(){function e(e){this.keySelector=e,this.map=new Map}return e.prototype.get=function(e){return this.map.get(this.keySelector(e))},e.prototype.set=function(e,t){this.map.set(this.keySelector(e),t)},e.prototype.has=function(e){return this.map.has(this.keySelector(e))},e.prototype.entriesStrKey=function(){return Array.from(this.map.entries())},e.prototype.deleteStrKey=function(e){this.map.delete(e)},e.prototype.delete=function(e){this.map.delete(this.keySelector(e))},e.prototype.clear=function(){this.map.clear()},e}(),w=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){var t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}))},S=function(){return(S=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},O=new C((function(e){return e.name+";"+e.type})),V=function(e){switch(e.getUniformType()){case r.FLOAT_VEC2:return _((function(t){return e.setValue(t)}));case r.FLOAT_VEC3:return F((function(t){return e.setValue(t)}));case r.FLOAT_VEC4:var t=[1,0,0,1];return e.setValue(t),I(t,(function(t){return e.setValue(t)}));case r.SAMPLER_2D:return P((function(t){w();e.setValue({slot:t.slot,textureData:!0})}));default:return L()}},L=function(){var e=document.createElement("div");return e.className="unsupported-error",e.innerText="Not supported uniform",e},_=function(e){var t=m([0,0],e,1,2),n=t[0];return t[1].setValues([0,0]),n},P=function(e){var t=h(),n=t[0];return t[1].setValues([0,0,0]),n},F=function(e){var t=h(e),n=t[0];t[1].setValues([0,0,0]);var r=function(e){var t=[.5,.5,.5],n=document.createElement("div");n.className="edit-input-color";var r=function(e){n.style.background="rgb("+255*e[0]+","+255*e[1]+","+255*e[2]+",1)"};r(t);var o=d("row-with-gap"),i=m(t,(function(t){r(t),null==e||e(t)}),1,3,y),u=i[0],a=i[1];return o.appendChild(u),o.appendChild(n),[o,v(v({},a),{setValues:function(e){a.setValues(e),r(e)}})]}(e),o=r[0];r[1].setValues([1,0,0]);var i=s([{id:"custom",display:"Custom",element:n},{id:"color",display:"Color",element:o}]);return d("column-with-gap",[i,n,o])},I=function(e,t){var n=m([0,0,0,0],t,1,4),r=n[0];n[1].setValues(e);var o=function(e){var t=[.5,.5,.5,1],n=document.createElement("div");n.className="edit-input-color";var r=function(e){n.style.background="rgb("+255*e[0]+","+255*e[1]+","+255*e[2]+","+e[3]+")"};r(t);var o=d("row-with-gap"),i=m(t,(function(t){r(t),null==e||e(t)}),1,4,y),u=i[0],a=i[1];return o.appendChild(u),o.appendChild(n),[o,v(v({},a),{setValues:function(e){a.setValues(e),r(e)}})]}(t),i=o[0];o[1].setValues(e);var u=s([{id:"custom",display:"Custom",element:r},{id:"color",display:"Color",element:i}]);return d("column-with-gap",[u,r,i])},N=function(e,t){return e.substring(0,e.length-t)},B=function(e,t,n){var r=e.createShader(t);if(e.shaderSource(r,n),e.compileShader(r),e.getShaderParameter(r,e.COMPILE_STATUS))return r;var o=e.getShaderInfoLog(r);return e.deleteShader(r),{error:o}},R=function(e,t,n){var r=e.createProgram();if(e.attachShader(r,t),e.attachShader(r,n),e.linkProgram(r),e.getProgramParameter(r,e.LINK_STATUS))return r;throw e.deleteProgram(r),new Error("Creating program failed: "+e.getProgramInfoLog(r))};!function(e){e[e.FLOAT_VEC3=35665]="FLOAT_VEC3",e[e.FLOAT_VEC4=35666]="FLOAT_VEC4"}(E||(E={}));var D=function(){function e(e,t,n,r){this.context=e,this.name=n,this.type=r,this.attachToProgram(t),this.buffer=e.createBuffer()}return e.prototype.attachToProgram=function(e){this.location=this.context.getAttribLocation(e,this.name)},e.prototype.setValue=function(e){this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffer);var t=[].concat.apply([],e);this.context.bufferData(this.context.ARRAY_BUFFER,new Float32Array(t),this.context.STATIC_DRAW)},e.prototype.setAttributeBuffer=function(){if(null!==this.buffer){this.context.enableVertexAttribArray(this.location),this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffer);var e=M(this.type),t=this.context.FLOAT;this.context.vertexAttribPointer(this.location,e,t,!1,0,0)}},e.prototype.getAttributeBufferType=function(){return this.type},e.prototype.deleteBuffer=function(){this.context.deleteBuffer(this.buffer),this.buffer=null},e}(),M=function(e){switch(e){case E.FLOAT_VEC3:return 3;case E.FLOAT_VEC4:return 4;default:b(e)}},k=function(){return(k=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},j=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],u=0,a=i.length;u<a;u++,o++)r[o]=i[u];return r},U=function(e){return e.name+";"+e.type},H=new C(U),K=function(e,t,n,r){var o,i,u=n.map((function(n){var o=k({},n),i=H.get(o);if(i)return i.attributeBufferInfo.attachToProgram(t),{key:o,value:i};var u=new D(e,t,n.name,n.type),a=G(u,!0),c=Y(u,r.filter((function(e){return e.type===u.getAttributeBufferType()})),(function(){return G(u,!1)})),f=c.options,m=c.unsubscribe,h=f.length?d("column-with-gap",j([s(j([l(a)],f)),a],f.map((function(e){return e.element})))):a;return{key:o,value:{component:p(h,n.name),attributeBufferInfo:u,dispose:function(){u.deleteBuffer(),m()}}}}));return i=(o=u).map((function(e){return U(e.key)})),H.entriesStrKey().filter((function(e){return!i.includes(e[0])})).forEach((function(e){e[1].dispose(),H.deleteStrKey(e[0])})),o.forEach((function(e){H.has(e.key)||H.set(e.key,e.value)})),u.map((function(e){return e.value}))},G=function(e,t){switch(e.getAttributeBufferType()){case E.FLOAT_VEC3:return q((function(t){e.setValue(t)}),t);case E.FLOAT_VEC4:var n=[[0,0,0,1],[0,.5,0,1],[.7,0,0,1]];return e.setValue(n),z(n,(function(t){e.setValue(t)}),t);default:return J()}},J=function(){var e=document.createElement("div");return e.className="unsupported-error",e.innerText="Not supported attribute buffer",e},Y=function(e,t,n){var r=t.map((function(t){var r=n(),o=t.subscribeToChange((function(t){e.setValue(t)}));return{id:w(),unsubscribe:o,element:r,display:t.name}}));return{options:r,unsubscribe:function(){return r.forEach((function(e){return e.unsubscribe()}))}}},q=function(e,t){var n=document.createElement("input");return n.className="edit-input",n.disabled=!t,n.oninput=function(){try{var t=JSON.parse(n.value);if(console.log("result",t),Array.isArray(t))t.every((function(e){return!!Array.isArray(e)&&3===e.length}))||console.log("not every element id the arra is same size");else console.log("this is not an array type");e(t)}catch(e){console.log("this is not a json")}},n},z=function(e,t,n){var r=document.createElement("input");return r.className="edit-input",r.disabled=!n,r.value=JSON.stringify(e),r.oninput=function(){try{var e=JSON.parse(r.value);if(Array.isArray(e))e.every((function(e){return!!Array.isArray(e)&&4===e.length}));else;t(e)}catch(e){console.log("this is not a json")}},r},X=function(e){var t=document.createElement("canvas");t.className=e;var n,r,o=t.getContext("webgl");if(n=t,r=function(e){t.width=e.width,t.height=e.height},new ResizeObserver((function(e){var t=e.find((function(e){return e.target===n}));if(t){var o=t.target.getBoundingClientRect();r({x:o.x,y:o.y,width:o.width,height:o.height})}})).observe(n),!o)throw new Error("Unable to create webgl context");return[t,{context:o}]},W=acquireVsCodeApi(),Q=function(){function e(){var e=this;this.eventListeners=[],window.addEventListener("message",(function(t){e.eventListeners.forEach((function(e){return e(t.data)}))}))}return e.prototype.getShaderDocuments=function(){var e=this,t=w();return W.postMessage({type:"getShaderDocuments",id:t}),new Promise((function(n){var r=function(o){"getShaderDocuments"===o.type&&o.id===t&&(n(o.payload.files),e.removeListener(r))};e.eventListeners.push(r)}))},e.prototype.getDocumentText=function(e){var t=this,n=w();return W.postMessage({type:"getDocumentText",id:n,payload:{fileName:e}}),new Promise((function(e){var r=function(o){"getDocumentText"===o.type&&o.id===n&&(e(o.payload.text),t.removeListener(r))};t.eventListeners.push(r)}))},e.prototype.subscribeToDocumentSave=function(e,t){var n=this;W.postMessage({type:"subscribeToDocumentTextChange",payload:{fileName:e}});var r=function(n){"onDocumentTextChange"===n.type&&n.payload.filePath===e&&t(n.payload.text)};return this.eventListeners.push(r),function(){n.removeListener(r),W.postMessage({type:"unsubscribeToDocumentTextChange",payload:{fileName:e}})}},e.prototype.removeListener=function(e){var t,n,r;t=this.eventListeners,n=e,(r=t.indexOf(n))>-1&&t.splice(r,1)},e}(),Z=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function u(e){try{c(r.next(e))}catch(e){i(e)}}function a(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(u,a)}c((r=r.apply(e,t||[])).next())}))},$=function(e,t){var n,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!(o=u.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=t.call(e,u)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Z(void 0,void 0,void 0,(function(){var e,t,n,r,i,u,a,s,l,m,h,v,y,b,x,T,C,w,L,_,P,F,I,D,M,k;return $(this,(function(j){var U,H,G;return e=new Map([["cube",{display:"Cube",attributeBufferBindings:[{name:"Binding - Cube normals",type:E.FLOAT_VEC4,subscribeToChange:function(){return function(){}}},{name:"Binding - Cube tangents",type:E.FLOAT_VEC4,subscribeToChange:function(){return function(){}}}]}]]),t=new Q,n=document.getElementById("viewer"),r=d("viewer-options"),i=d("viewer-shader-options"),u=d("viewer-content shader-errors"),a=X("viewer-content"),s=a[0],l=a[1],n.appendChild(s),n.appendChild(u),n.appendChild(r),m=function(e){s.style.visibility="canvas"===e?"visible":"collapse",u.style.visibility="errors"===e?"visible":"collapse"},h=function(){t.getShaderDocuments().then((function(e){var t=e.map((function(e){return{id:e.filePath,display:e.fileName}}));_.setItems(t),I.setItems(t)}))},T=null,C=function(){i.innerHTML="";var t,n,r,o,a=l.context;if(x&&b){var c=function(e,t,n){var r=B(e,e.VERTEX_SHADER,t),o=B(e,e.FRAGMENT_SHADER,n),i=void 0;g(r,"error")&&(i=N(r.error,1));var u=void 0;return g(o,"error")&&(u=N(o.error,1)),i||u?[i,u]:R(e,r,o)}(a,b,x);if(Array.isArray(c))m("errors"),u.innerText=(n=(t=c)[0],r=t[1],o=[],n&&o.push("VERTEX SHADER:",n),r&&o.push("FRAGMENT SHADER:",r),o.join("\r\n"));else{m("canvas");var s=k.getSelectedItem(),f=c,d=function(e,t){for(var n=e.getProgramParameter(t,e.ACTIVE_UNIFORMS),r=[],o=0;o<n;++o){var i=e.getActiveUniform(t,o);r.push({name:i.name,type:i.type})}return r}(a,f),h=function(e,t){for(var n=e.getProgramParameter(t,e.ACTIVE_ATTRIBUTES),r=[],o=0;o<n;++o){var i=e.getActiveAttrib(t,o);r.push({name:i.name,type:i.type})}return r}(a,f),v=function(e,t,n){var r=n.map((function(n){var r=S({},n),o=O.get(r);if(o)return o.uniformInfo.attachToProgram(t),{key:r,value:o};var i=new A(e,t,n.name,n.type);return{key:r,value:{component:p(V(i),n.name),uniformInfo:i}}}));return O.clear(),r.forEach((function(e){return O.set(e.key,e.value)})),r.map((function(e){return e.value}))}(a,f,d);v.forEach((function(e){return i.appendChild(e.component)}));var y=K(a,f,h,s?e.get(s.id).attributeBufferBindings:[]);y.forEach((function(e){return i.appendChild(e.component)}));var E=v.map((function(e){return e.uniformInfo})),C=y.map((function(e){return e.attributeBufferInfo}));null!==T&&cancelAnimationFrame(T);var w=function(){!function(e,t,n){e.useProgram(t),e.viewport(0,0,e.canvas.width,e.canvas.height),e.clearColor(0,0,0,0),e.clear(e.COLOR_BUFFER_BIT),n.uniforms.forEach((function(e){return e.setUniform()})),n.attributeBuffers.forEach((function(e){return e.setAttributeBuffer()}));var r=e.TRIANGLES;e.drawArrays(r,0,3)}(l.context,c,{uniforms:E,attributeBuffers:C}),T=requestAnimationFrame(w)};w()}}else m("none")},r.appendChild(d("viewer-shaders-title",[(U=o,H="",G=document.createElement("h3"),G.textContent=U,G.className=H+" section-title",{element:G}).element,f("Sync","viewer-refresh-button",h).element])),w=c((function(e){return Z(void 0,void 0,void 0,(function(){var n;return $(this,(function(r){switch(r.label){case 0:return null==v||v(),e&&(v=t.subscribeToDocumentSave(e.id,(function(e){b=e,C()}))),e?[4,t.getDocumentText(e.id)]:[3,2];case 1:return n=r.sent(),[3,3];case 2:n="",r.label=3;case 3:return b=n,C(),[2]}}))}))})),L=w[0],_=w[1],r.appendChild(p(L,"Vertex Shader")),P=c((function(e){return Z(void 0,void 0,void 0,(function(){var n;return $(this,(function(r){switch(r.label){case 0:return null==y||y(),e&&(y=t.subscribeToDocumentSave(e.id,(function(e){x=e,C()}))),e?[4,t.getDocumentText(e.id)]:[3,2];case 1:return n=r.sent(),[3,3];case 2:n="",r.label=3;case 3:return x=n,C(),[2]}}))}))})),F=P[0],I=P[1],r.appendChild(p(F,"Fragment Shader")),D=c((function(){return C()})),M=D[0],(k=D[1]).setItems(Array.from(e.entries()).map((function(e){return{id:e[0],display:e[1].display}}))),r.appendChild(p(M,"Mesh")),r.appendChild(i),h(),[2]}))}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,