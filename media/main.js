!function(t){var n={};function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)e.d(r,o,function(n){return t[n]}.bind(null,o));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=6)}({6:function(t,n,e){"use strict";e.r(n);var r={};e.r(r),e.d(r,"create",(function(){return mt})),e.d(r,"clone",(function(){return vt})),e.d(r,"copy",(function(){return Mt})),e.d(r,"fromValues",(function(){return yt})),e.d(r,"set",(function(){return gt})),e.d(r,"identity",(function(){return bt})),e.d(r,"transpose",(function(){return xt})),e.d(r,"invert",(function(){return At})),e.d(r,"adjoint",(function(){return Et})),e.d(r,"determinant",(function(){return wt})),e.d(r,"multiply",(function(){return Tt})),e.d(r,"translate",(function(){return St})),e.d(r,"scale",(function(){return It})),e.d(r,"rotate",(function(){return Pt})),e.d(r,"rotateX",(function(){return Ct})),e.d(r,"rotateY",(function(){return Lt})),e.d(r,"rotateZ",(function(){return Ot})),e.d(r,"fromTranslation",(function(){return Ft})),e.d(r,"fromScaling",(function(){return Vt})),e.d(r,"fromRotation",(function(){return _t})),e.d(r,"fromXRotation",(function(){return Bt})),e.d(r,"fromYRotation",(function(){return Rt})),e.d(r,"fromZRotation",(function(){return Nt})),e.d(r,"fromRotationTranslation",(function(){return Dt})),e.d(r,"fromQuat2",(function(){return Ut})),e.d(r,"getTranslation",(function(){return qt})),e.d(r,"getScaling",(function(){return jt})),e.d(r,"getRotation",(function(){return kt})),e.d(r,"decompose",(function(){return Yt})),e.d(r,"fromRotationTranslationScale",(function(){return Ht})),e.d(r,"fromRotationTranslationScaleOrigin",(function(){return zt})),e.d(r,"fromQuat",(function(){return Xt})),e.d(r,"frustum",(function(){return Gt})),e.d(r,"perspectiveNO",(function(){return Kt})),e.d(r,"perspective",(function(){return Wt})),e.d(r,"perspectiveZO",(function(){return Zt})),e.d(r,"perspectiveFromFieldOfView",(function(){return Jt})),e.d(r,"orthoNO",(function(){return Qt})),e.d(r,"ortho",(function(){return $t})),e.d(r,"orthoZO",(function(){return tn})),e.d(r,"lookAt",(function(){return nn})),e.d(r,"targetTo",(function(){return en})),e.d(r,"str",(function(){return rn})),e.d(r,"frob",(function(){return on})),e.d(r,"add",(function(){return un})),e.d(r,"subtract",(function(){return an})),e.d(r,"multiplyScalar",(function(){return cn})),e.d(r,"multiplyScalarAndAdd",(function(){return sn})),e.d(r,"exactEquals",(function(){return fn})),e.d(r,"equals",(function(){return ln})),e.d(r,"mul",(function(){return hn})),e.d(r,"sub",(function(){return dn}));var o={};e.r(o),e.d(o,"create",(function(){return pn})),e.d(o,"clone",(function(){return mn})),e.d(o,"length",(function(){return vn})),e.d(o,"fromValues",(function(){return Mn})),e.d(o,"copy",(function(){return yn})),e.d(o,"set",(function(){return gn})),e.d(o,"add",(function(){return bn})),e.d(o,"subtract",(function(){return xn})),e.d(o,"multiply",(function(){return An})),e.d(o,"divide",(function(){return En})),e.d(o,"ceil",(function(){return wn})),e.d(o,"floor",(function(){return Tn})),e.d(o,"min",(function(){return Sn})),e.d(o,"max",(function(){return In})),e.d(o,"round",(function(){return Pn})),e.d(o,"scale",(function(){return Cn})),e.d(o,"scaleAndAdd",(function(){return Ln})),e.d(o,"distance",(function(){return On})),e.d(o,"squaredDistance",(function(){return Fn})),e.d(o,"squaredLength",(function(){return Vn})),e.d(o,"negate",(function(){return _n})),e.d(o,"inverse",(function(){return Bn})),e.d(o,"normalize",(function(){return Rn})),e.d(o,"dot",(function(){return Nn})),e.d(o,"cross",(function(){return Dn})),e.d(o,"lerp",(function(){return Un})),e.d(o,"slerp",(function(){return qn})),e.d(o,"hermite",(function(){return jn})),e.d(o,"bezier",(function(){return kn})),e.d(o,"random",(function(){return Yn})),e.d(o,"transformMat4",(function(){return Hn})),e.d(o,"transformMat3",(function(){return zn})),e.d(o,"transformQuat",(function(){return Xn})),e.d(o,"rotateX",(function(){return Gn})),e.d(o,"rotateY",(function(){return Kn})),e.d(o,"rotateZ",(function(){return Wn})),e.d(o,"angle",(function(){return Zn})),e.d(o,"zero",(function(){return Jn})),e.d(o,"str",(function(){return Qn})),e.d(o,"exactEquals",(function(){return $n})),e.d(o,"equals",(function(){return te})),e.d(o,"sub",(function(){return ne})),e.d(o,"mul",(function(){return ee})),e.d(o,"div",(function(){return re})),e.d(o,"dist",(function(){return oe})),e.d(o,"sqrDist",(function(){return ue})),e.d(o,"len",(function(){return ie})),e.d(o,"sqrLen",(function(){return ae})),e.d(o,"forEach",(function(){return ce}));var u,i=function(){return(i=Object.assign||function(t){for(var n,e=1,r=arguments.length;e<r;e++)for(var o in n=arguments[e])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t}).apply(this,arguments)},a=function(t){return Math.min(Math.max(t,1),10)},c=function(){function t(t,n,e){var r=this;this.element=t,this.positionProvider=n,this.onPositionChange=e,this.pointerPosition={x:0,y:0},this.eventListeners=new Map,this.isMoving=!1,this.dispatchAction=function(t){var n=function(t,n){switch(n.type){case"orbitRotate":return i(i({},t),{latitude:(r=t.latitude+n.deltaLatitude,o=Math.PI/2-.1,Math.min(Math.max(r,0),o)),longitude:(e=t.longitude+n.deltaLongitude,e>Math.PI?e-2*Math.PI:e<-Math.PI?e+2*Math.PI:e)});case"zoomInAt":return i(i({},t),{radius:a(t.radius-.1)});case"zoomOutAt":return i(i({},t),{radius:a(t.radius+.1)});default:return t}var e,r,o}(r.positionProvider(),t);r.onPositionChange(n)},this.onMouseDown=function(t){0===t.button&&(r.pointerPosition={x:t.offsetX,y:t.offsetY},r.isMoving=!0)},this.onMouseMove=function(t){if(r.isMoving){r.dispatchAction({type:"orbitRotate",deltaLongitude:.01*-(t.offsetX-r.pointerPosition.x),deltaLatitude:.01*(t.offsetY-r.pointerPosition.y)})}r.pointerPosition={x:t.offsetX,y:t.offsetY}},this.onMouseUp=function(){r.isMoving=!1},this.onMouseLeave=function(){r.isMoving=!1},this.onWheel=function(t){var n=t.deltaY<0?"zoomInAt":"zoomOutAt";r.dispatchAction({type:n})},this.registerEvent("mousedown",this.onMouseDown),this.registerEvent("mousemove",this.onMouseMove),this.registerEvent("mouseup",this.onMouseUp),this.registerEvent("mouseleave",this.onMouseLeave),this.registerEvent("wheel",this.onWheel)}return t.prototype.dispose=function(){var t=this;this.eventListeners.forEach((function(n,e){return t.element.removeEventListener(e,n)}))},t.prototype.registerEvent=function(t,n){this.element.addEventListener(t,n),this.eventListeners.set(t,n)},t}(),s=acquireVsCodeApi(),f={vertexFilePath:null,fragmentFilePath:null,drawMode:"elements"},l=function(){var t;return null!==(t=s.getState())&&void 0!==t?t:f},h=function(t){return s.setState(Object.assign(l(),t))},d=function(){function t(t){this.context=t,this.count=0,this.buffer=t.createBuffer()}return t.prototype.setValue=function(t){this.count=t.length,this.context.bindBuffer(this.context.ELEMENT_ARRAY_BUFFER,this.buffer),this.context.bufferData(this.context.ELEMENT_ARRAY_BUFFER,new Uint16Array(t),this.context.STATIC_DRAW)},t.prototype.setIndexBuffer=function(){this.context.bindBuffer(this.context.ELEMENT_ARRAY_BUFFER,this.buffer)},t.prototype.getCount=function(){return this.count},t.prototype.deleteBuffer=function(){this.context.deleteBuffer(this.buffer),this.buffer=null},t}(),p="SHADERS",m=function(){return(m=Object.assign||function(t){for(var n,e=1,r=arguments.length;e<r;e++)for(var o in n=arguments[e])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t}).apply(this,arguments)},v=function(){for(var t=0,n=0,e=arguments.length;n<e;n++)t+=arguments[n].length;var r=Array(t),o=0;for(n=0;n<e;n++)for(var u=arguments[n],i=0,a=u.length;i<a;i++,o++)r[o]=u[i];return r},M={emptyItem:!0},y=function(t,n,e){var r=m(m({},M),e),o=document.createElement("select");o.className="dropdown-base "+n;var u=null,i=[],a=function(n){t(u=n)};o.onchange=function(){var t=i.find((function(t){return t.item.id===o.value}));t.item.id?a(t.item):a(null)};var c=function(t){i.forEach((function(n){n.item.id===t?(n.element.selected=!0,a(n.item)):n.element.selected=!1}))};return[o,{setItems:function(t){o.innerHTML="",i.length=0,(r.emptyItem?v([{id:"",display:""}],t):v(t)).forEach((function(t){var n=document.createElement("option");n.value=t.id,n.textContent=t.display,n.selected=t.id===(null==u?void 0:u.id),o.appendChild(n),i.push({element:n,item:t})}))},getItems:function(){return i.map((function(t){return t.item}))},setSelectedItemById:c,setSelectedItemByIndex:function(t){return c(i[t].item.id)},getSelectedItem:function(){return u},clearSelection:function(){i.forEach((function(t){return t.element.selected=!1})),a(null)}}]},g=function(t,n){var e=y((function(e){e?(t.forEach((function(t){return t.element.classList.add("hidden")})),t.find((function(t){return t.id===e.id})).element.classList.remove("hidden"),null==n||n(e.id)):null==n||n(null)}),"",{emptyItem:!1}),r=e[0],o=e[1];return o.setItems(t.map((function(t){return{id:t.id,display:t.display}}))),o.setSelectedItemByIndex(0),r},b=function(t,n,e){var r=document.createElement("button");return r.onclick=e,r.className=n,r.textContent=t,{element:r}},x=function(t,n,e){var r=document.createElement("div");r.className=(null!=e?e:"")+" options-wrapper";var o=document.createElement("label");return o.className="options-label",o.textContent=n,t.className=t.className+" options-content",r.appendChild(o),r.appendChild(t),r},A=function(t,n){var e=document.createElement("div");return e.className=t,null==n||n.forEach((function(t){return e.appendChild(t)})),e},E=function(t,n,e,r,o){var u=document.createElement("div");u.className="edit-input-grid";for(var i=[],a=function(){return i.map((function(t){return t.value}))},c=0;c<e;c++){var s=document.createElement("div");s.className="edit-input-row";for(var f=function(e){var u=c*r+e,f=t[u],l=document.createElement("input"),h={element:l,value:f};Object.assign(l,o),l.className="edit-input",l.type="number",l.value=null==f?void 0:f.toString(),l.oninput=function(){i[u].value=Number(l.value),null==n||n(a())},i.push(h),s.appendChild(l)},l=0;l<r;l++)f(l);u.appendChild(s)}return[u,{setValues:function(t){return i.forEach((function(n,e){n.value=t[e],n.element.value=n.value.toString()}))},getValues:a,setReadonly:function(t){return i.forEach((function(n){return n.element.readOnly=t}))}}]},w=function(t){return E([0,0,0],t,1,3)},T=function(){return(T=Object.assign||function(t){for(var n,e=1,r=arguments.length;e<r;e++)for(var o in n=arguments[e])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t}).apply(this,arguments)},S={min:"0",max:"1",step:"0.1"},I=function(t,n){return t.hasOwnProperty(n)},P=function(t){throw new Error("Unhandled union member: "+JSON.stringify(t))},C=function(){for(var t=0,n=0,e=arguments.length;n<e;n++)t+=arguments[n].length;var r=Array(t),o=0;for(n=0;n<e;n++)for(var u=arguments[n],i=0,a=u.length;i<a;i++,o++)r[o]=u[i];return r};!function(t){t[t.FLOAT_VEC2=35664]="FLOAT_VEC2",t[t.FLOAT_VEC3=35665]="FLOAT_VEC3",t[t.FLOAT_VEC4=35666]="FLOAT_VEC4",t[t.FLOAT_MAT4=35676]="FLOAT_MAT4",t[t.SAMPLER_2D=35678]="SAMPLER_2D"}(u||(u={}));var L,O=function(){function t(t,n,e,r){this.context=t,this.name=e,this.type=r,this.attachToProgram(n)}return t.prototype.attachToProgram=function(t){var n=this.context.getUniformLocation(t,this.name);this.setter=F(this.type,this.context,n)},t.prototype.setValue=function(t){this.value=t},t.prototype.setUniform=function(){null!==this.value&&this.setter(this.value)},t.prototype.getUniformType=function(){return this.type},t.prototype.getUniformName=function(){return this.name},t.prototype.dispose=function(){},t}(),F=function(t,n,e){switch(t){case u.FLOAT_VEC2:return function(t){return n.uniform2f.apply(n,C([e],t))};case u.FLOAT_VEC3:return function(t){return n.uniform3f.apply(n,C([e],t))};case u.FLOAT_VEC4:return function(t){return n.uniform4f.apply(n,C([e],t))};case u.FLOAT_MAT4:return function(t){return n.uniformMatrix4fv(e,!1,t)};case u.SAMPLER_2D:return function(t){};default:P(t)}},V=function(){function t(t){this.keySelector=t,this.map=new Map}return t.prototype.get=function(t){return this.map.get(this.keySelector(t))},t.prototype.set=function(t,n){this.map.set(this.keySelector(t),n)},t.prototype.has=function(t){return this.map.has(this.keySelector(t))},t.prototype.entriesStrKey=function(){return Array.from(this.map.entries())},t.prototype.deleteStrKey=function(t){this.map.delete(t)},t.prototype.delete=function(t){this.map.delete(this.keySelector(t))},t.prototype.clear=function(){this.map.clear()},t}(),_=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(t){var n=16*Math.random()|0;return("x"==t?n:3&n|8).toString(16)}))},B=function(){return(B=Object.assign||function(t){for(var n,e=1,r=arguments.length;e<r;e++)for(var o in n=arguments[e])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t}).apply(this,arguments)},R=new V((function(t){return t.name+";"+t.type})),N=function(t){switch(t.getUniformType()){case u.FLOAT_VEC2:return D((function(n){return t.setValue(n)}));case u.FLOAT_VEC3:return q((function(n){return t.setValue(n)}));case u.FLOAT_VEC4:var n=[1,0,0,1];return t.setValue(n),j(n,(function(n){return t.setValue(n)}));case u.SAMPLER_2D:return k((function(n){_();t.setValue({slot:n.slot,textureData:!0})}));case u.FLOAT_MAT4:default:return U()}},D=function(t){var n=E([0,0],t,1,2),e=n[0];return n[1].setValues([0,0]),e},U=function(){var t=document.createElement("div");return t.className="unsupported-error",t.innerText="Not supported uniform",t},q=function(t){var n=w(t),e=n[0];n[1].setValues([0,0,0]);var r=function(t){var n=[.5,.5,.5],e=document.createElement("div");e.className="edit-input-color";var r=function(t){e.style.background="rgb("+255*t[0]+","+255*t[1]+","+255*t[2]+",1)"};r(n);var o=A("row-with-gap"),u=E(n,(function(n){r(n),null==t||t(n)}),1,3,S),i=u[0],a=u[1];return o.appendChild(i),o.appendChild(e),[o,T(T({},a),{setValues:function(t){a.setValues(t),r(t)}})]}(t),o=r[0];r[1].setValues([1,0,0]);var u=g([{id:"custom",display:"Custom",element:e},{id:"color",display:"Color",element:o}]);return A("column-with-gap",[u,e,o])},j=function(t,n){var e=E([0,0,0,0],n,1,4),r=e[0];e[1].setValues(t);var o=function(t){var n=[.5,.5,.5,1],e=document.createElement("div");e.className="edit-input-color";var r=function(t){e.style.background="rgb("+255*t[0]+","+255*t[1]+","+255*t[2]+","+t[3]+")"};r(n);var o=A("row-with-gap"),u=E(n,(function(n){r(n),null==t||t(n)}),1,4,S),i=u[0],a=u[1];return o.appendChild(i),o.appendChild(e),[o,T(T({},a),{setValues:function(t){a.setValues(t),r(t)}})]}(n),u=o[0];o[1].setValues(t);var i=g([{id:"custom",display:"Custom",element:r},{id:"color",display:"Color",element:u}]);return A("column-with-gap",[i,r,u])},k=function(t){var n=w(),e=n[0];return n[1].setValues([0,0,0]),e},Y=function(t,n){var e=t.indexOf(n);e>-1&&t.splice(e,1)},H=function(t,n){return t.substring(0,t.length-n)},z=function(t,n,e){var r=t.createShader(n);if(t.shaderSource(r,e),t.compileShader(r),t.getShaderParameter(r,t.COMPILE_STATUS))return r;var o=t.getShaderInfoLog(r);return t.deleteShader(r),{error:o}},X=function(t,n,e){var r=t.createProgram();if(t.attachShader(r,n),t.attachShader(r,e),t.linkProgram(r),t.getProgramParameter(r,t.LINK_STATUS))return r;throw t.deleteProgram(r),new Error("Creating program failed: "+t.getProgramInfoLog(r))},G=function(){function t(t){this.value=t,this.observers=[]}return t.prototype.attach=function(t){this.observers.push(t)},t.prototype.detach=function(t){Y(this.observers,t)},t.prototype.detachAll=function(){this.observers.length=0},t.prototype.setValue=function(t){this.value=t,this.notify()},t.prototype.getValue=function(){return this.value},t.prototype.forceNotify=function(){this.notify()},t.prototype.notify=function(){if(null!==this.value){var t=this.value;this.observers.forEach((function(n){return n(t)}))}},t}();!function(t){t[t.FLOAT_VEC3=35665]="FLOAT_VEC3",t[t.FLOAT_VEC4=35666]="FLOAT_VEC4"}(L||(L={}));var K=function(){function t(t,n,e,r){this.context=t,this.name=e,this.type=r,this.count=0,this.attachToProgram(n),this.buffer=t.createBuffer()}return t.prototype.attachToProgram=function(t){this.location=this.context.getAttribLocation(t,this.name)},t.prototype.setValue=function(t){this.count=t.length,this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffer);var n=[].concat.apply([],t);this.context.bufferData(this.context.ARRAY_BUFFER,new Float32Array(n),this.context.STATIC_DRAW)},t.prototype.setAttributeBuffer=function(){if(null!==this.buffer){this.context.enableVertexAttribArray(this.location),this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffer);var t=W(this.type),n=this.context.FLOAT;this.context.vertexAttribPointer(this.location,t,n,!1,0,0)}},t.prototype.getAttributeBufferType=function(){return this.type},t.prototype.getCount=function(){return this.count},t.prototype.deleteBuffer=function(){this.context.deleteBuffer(this.buffer),this.buffer=null},t}(),W=function(t){switch(t){case L.FLOAT_VEC3:return 3;case L.FLOAT_VEC4:return 4;default:P(t)}},Z=function(){return(Z=Object.assign||function(t){for(var n,e=1,r=arguments.length;e<r;e++)for(var o in n=arguments[e])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t}).apply(this,arguments)},J=function(){for(var t=0,n=0,e=arguments.length;n<e;n++)t+=arguments[n].length;var r=Array(t),o=0;for(n=0;n<e;n++)for(var u=arguments[n],i=0,a=u.length;i<a;i++,o++)r[o]=u[i];return r},Q=function(t){return t.name+";"+t.type},$=new V(Q),tt=function(t,n,e,r){var o,u,i=e.map((function(e){var o=Z({},e),u=$.get(o);if(u)return u.attributeBufferInfo.attachToProgram(n),{key:o,value:u};var i=new K(t,n,e.name,e.type),a=r.filter((function(t){return t.type===i.getAttributeBufferType()})),c=function(t){return i.setValue(t)},s=a.length?rt(J([nt(i)],et(a,i)),c):ot(i,c),f=s.element,l=s.dispose;return{key:o,value:{component:x(f,e.name),attributeBufferInfo:i,dispose:function(){i.deleteBuffer(),null==l||l()}}}}));return u=(o=i).map((function(t){return Q(t.key)})),$.entriesStrKey().filter((function(t){return!u.includes(t[0])})).forEach((function(t){t[1].dispose(),$.deleteStrKey(t[0])})),o.forEach((function(t){$.has(t.key)||$.set(t.key,t.value)})),i.map((function(t){return t.value}))},nt=function(t){return Z({id:"custom",display:"Custom"},ot(t))},et=function(t,n){return t.map((function(t){var e=ut(n.getAttributeBufferType(),!1,t.value);return{id:_(),element:e,display:t.name,value:t.value}}))},rt=function(t,n){var e=null;return{element:A("column-with-gap",J([g(t,(function(r){null==e||e();var o=t.find((function(t){return t.id===r})),u=function(t){return n(t)};o.value.attach(u),u(o.value.getValue()),e=function(){return o.value.detach(u)}}))],t.map((function(t){return t.element})))),dispose:function(){return null==e?void 0:e()}}},ot=function(t,n){var e=new G((t.getAttributeBufferType(),[[0,0,0,1],[0,.5,0,1],[.9,0,0,1],[0,.5,0,1],[.7,0,0,1],[.7,.5,0,1]]));return n&&e.attach((function(n){t.setValue(n)})),{element:ut(t.getAttributeBufferType(),!0,e),value:e,dispose:function(){return e.detachAll()}}},ut=function(t,n,e){switch(t){case L.FLOAT_VEC4:return at(e,n);default:return it()}},it=function(){var t=document.createElement("div");return t.className="unsupported-error",t.innerText="Not supported attribute buffer",t},at=function(t,n){var e=document.createElement("input");if(e.className="edit-input",e.disabled=!n,!n){t.attach((function(t){return e.value=JSON.stringify(t)}))}return e.value=JSON.stringify(t.getValue()),e.oninput=function(){try{var n=JSON.parse(e.value);if(Array.isArray(n))n.every((function(t){return!!Array.isArray(t)&&4===t.length}));else;t.setValue(n)}catch(t){console.log("this is not a json")}},e},ct=function(t){var n=document.createElement("canvas");n.className=t;var e,r,o=n.getContext("webgl");if(e=n,r=function(t){n.width=t.width,n.height=t.height},new ResizeObserver((function(t){var n=t.find((function(t){return t.target===e}));if(n){var o=n.target.getBoundingClientRect();r({x:o.x,y:o.y,width:o.width,height:o.height})}})).observe(e),!o)throw new Error("Unable to create webgl context");return[n,{context:o}]},st=function(){function t(){var t=this;this.eventListeners=[],window.addEventListener("message",(function(n){t.eventListeners.forEach((function(t){return t(n.data)}))}))}return t.prototype.getShaderDocuments=function(){var t=this,n=_();return s.postMessage({type:"getShaderDocuments",id:n}),new Promise((function(e){var r=function(o){"getShaderDocuments"===o.type&&o.id===n&&(e(o.payload.files),t.removeListener(r))};t.eventListeners.push(r)}))},t.prototype.getDocumentText=function(t){var n=this,e=_();return s.postMessage({type:"getDocumentText",id:e,payload:{fileName:t}}),new Promise((function(t){var r=function(o){"getDocumentText"===o.type&&o.id===e&&(t(o.payload.text),n.removeListener(r))};n.eventListeners.push(r)}))},t.prototype.subscribeToDocumentSave=function(t,n){var e=this;s.postMessage({type:"subscribeToDocumentTextChange",payload:{fileName:t}});var r=function(e){"onDocumentTextChange"===e.type&&e.payload.filePath===t&&n(e.payload.text)};return this.eventListeners.push(r),function(){e.removeListener(r),s.postMessage({type:"unsubscribeToDocumentTextChange",payload:{fileName:t}})}},t.prototype.removeListener=function(t){Y(this.eventListeners,t)},t}(),ft=function(t){return[].concat(t,t,t,t)},lt=new Map([["cube",{display:"Cube",positions:[[-.5,-.5,.5,1],[.5,-.5,.5,1],[.5,.5,.5,1],[-.5,.5,.5,1],[-.5,-.5,-.5,1],[-.5,.5,-.5,1],[.5,.5,-.5,1],[.5,-.5,-.5,1],[-.5,.5,-.5,1],[-.5,.5,.5,1],[.5,.5,.5,1],[.5,.5,-.5,1],[-.5,-.5,-.5,1],[.5,-.5,-.5,1],[.5,-.5,.5,1],[-.5,-.5,.5,1],[.5,-.5,-.5,1],[.5,.5,-.5,1],[.5,.5,.5,1],[.5,-.5,.5,1],[-.5,-.5,-.5,1],[-.5,-.5,.5,1],[-.5,.5,.5,1],[-.5,.5,-.5,1]],colors:function(){for(var t=0,n=0,e=arguments.length;n<e;n++)t+=arguments[n].length;var r=Array(t),o=0;for(n=0;n<e;n++)for(var u=arguments[n],i=0,a=u.length;i<a;i++,o++)r[o]=u[i];return r}(ft([1,1,1,1]),ft([1,0,0,1]),ft([0,1,0,1]),ft([0,0,1,1]),ft([1,1,0,1]),ft([1,0,1,1])),indices:[0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23]}]]);console.log(lt);const ht=1e-6;let dt="undefined"!=typeof Float32Array?Float32Array:Array,pt=Math.random;Math.PI;function mt(){let t=new dt(16);return dt!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0),t[0]=1,t[5]=1,t[10]=1,t[15]=1,t}function vt(t){let n=new dt(16);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n[4]=t[4],n[5]=t[5],n[6]=t[6],n[7]=t[7],n[8]=t[8],n[9]=t[9],n[10]=t[10],n[11]=t[11],n[12]=t[12],n[13]=t[13],n[14]=t[14],n[15]=t[15],n}function Mt(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],t}function yt(t,n,e,r,o,u,i,a,c,s,f,l,h,d,p,m){let v=new dt(16);return v[0]=t,v[1]=n,v[2]=e,v[3]=r,v[4]=o,v[5]=u,v[6]=i,v[7]=a,v[8]=c,v[9]=s,v[10]=f,v[11]=l,v[12]=h,v[13]=d,v[14]=p,v[15]=m,v}function gt(t,n,e,r,o,u,i,a,c,s,f,l,h,d,p,m,v){return t[0]=n,t[1]=e,t[2]=r,t[3]=o,t[4]=u,t[5]=i,t[6]=a,t[7]=c,t[8]=s,t[9]=f,t[10]=l,t[11]=h,t[12]=d,t[13]=p,t[14]=m,t[15]=v,t}function bt(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function xt(t,n){if(t===n){let e=n[1],r=n[2],o=n[3],u=n[6],i=n[7],a=n[11];t[1]=n[4],t[2]=n[8],t[3]=n[12],t[4]=e,t[6]=n[9],t[7]=n[13],t[8]=r,t[9]=u,t[11]=n[14],t[12]=o,t[13]=i,t[14]=a}else t[0]=n[0],t[1]=n[4],t[2]=n[8],t[3]=n[12],t[4]=n[1],t[5]=n[5],t[6]=n[9],t[7]=n[13],t[8]=n[2],t[9]=n[6],t[10]=n[10],t[11]=n[14],t[12]=n[3],t[13]=n[7],t[14]=n[11],t[15]=n[15];return t}function At(t,n){let e=n[0],r=n[1],o=n[2],u=n[3],i=n[4],a=n[5],c=n[6],s=n[7],f=n[8],l=n[9],h=n[10],d=n[11],p=n[12],m=n[13],v=n[14],M=n[15],y=e*a-r*i,g=e*c-o*i,b=e*s-u*i,x=r*c-o*a,A=r*s-u*a,E=o*s-u*c,w=f*m-l*p,T=f*v-h*p,S=f*M-d*p,I=l*v-h*m,P=l*M-d*m,C=h*M-d*v,L=y*C-g*P+b*I+x*S-A*T+E*w;return L?(L=1/L,t[0]=(a*C-c*P+s*I)*L,t[1]=(o*P-r*C-u*I)*L,t[2]=(m*E-v*A+M*x)*L,t[3]=(h*A-l*E-d*x)*L,t[4]=(c*S-i*C-s*T)*L,t[5]=(e*C-o*S+u*T)*L,t[6]=(v*b-p*E-M*g)*L,t[7]=(f*E-h*b+d*g)*L,t[8]=(i*P-a*S+s*w)*L,t[9]=(r*S-e*P-u*w)*L,t[10]=(p*A-m*b+M*y)*L,t[11]=(l*b-f*A-d*y)*L,t[12]=(a*T-i*I-c*w)*L,t[13]=(e*I-r*T+o*w)*L,t[14]=(m*g-p*x-v*y)*L,t[15]=(f*x-l*g+h*y)*L,t):null}function Et(t,n){let e=n[0],r=n[1],o=n[2],u=n[3],i=n[4],a=n[5],c=n[6],s=n[7],f=n[8],l=n[9],h=n[10],d=n[11],p=n[12],m=n[13],v=n[14],M=n[15],y=e*a-r*i,g=e*c-o*i,b=e*s-u*i,x=r*c-o*a,A=r*s-u*a,E=o*s-u*c,w=f*m-l*p,T=f*v-h*p,S=f*M-d*p,I=l*v-h*m,P=l*M-d*m,C=h*M-d*v;return t[0]=a*C-c*P+s*I,t[1]=o*P-r*C-u*I,t[2]=m*E-v*A+M*x,t[3]=h*A-l*E-d*x,t[4]=c*S-i*C-s*T,t[5]=e*C-o*S+u*T,t[6]=v*b-p*E-M*g,t[7]=f*E-h*b+d*g,t[8]=i*P-a*S+s*w,t[9]=r*S-e*P-u*w,t[10]=p*A-m*b+M*y,t[11]=l*b-f*A-d*y,t[12]=a*T-i*I-c*w,t[13]=e*I-r*T+o*w,t[14]=m*g-p*x-v*y,t[15]=f*x-l*g+h*y,t}function wt(t){let n=t[0],e=t[1],r=t[2],o=t[3],u=t[4],i=t[5],a=t[6],c=t[7],s=t[8],f=t[9],l=t[10],h=t[11],d=t[12],p=t[13],m=t[14],v=n*i-e*u,M=n*a-r*u,y=e*a-r*i,g=s*p-f*d,b=s*m-l*d,x=f*m-l*p;return c*(n*x-e*b+r*g)-o*(u*x-i*b+a*g)+t[15]*(s*y-f*M+l*v)-h*(d*y-p*M+m*v)}function Tt(t,n,e){let r=n[0],o=n[1],u=n[2],i=n[3],a=n[4],c=n[5],s=n[6],f=n[7],l=n[8],h=n[9],d=n[10],p=n[11],m=n[12],v=n[13],M=n[14],y=n[15],g=e[0],b=e[1],x=e[2],A=e[3];return t[0]=g*r+b*a+x*l+A*m,t[1]=g*o+b*c+x*h+A*v,t[2]=g*u+b*s+x*d+A*M,t[3]=g*i+b*f+x*p+A*y,g=e[4],b=e[5],x=e[6],A=e[7],t[4]=g*r+b*a+x*l+A*m,t[5]=g*o+b*c+x*h+A*v,t[6]=g*u+b*s+x*d+A*M,t[7]=g*i+b*f+x*p+A*y,g=e[8],b=e[9],x=e[10],A=e[11],t[8]=g*r+b*a+x*l+A*m,t[9]=g*o+b*c+x*h+A*v,t[10]=g*u+b*s+x*d+A*M,t[11]=g*i+b*f+x*p+A*y,g=e[12],b=e[13],x=e[14],A=e[15],t[12]=g*r+b*a+x*l+A*m,t[13]=g*o+b*c+x*h+A*v,t[14]=g*u+b*s+x*d+A*M,t[15]=g*i+b*f+x*p+A*y,t}function St(t,n,e){let r,o,u,i,a,c,s,f,l,h,d,p,m=e[0],v=e[1],M=e[2];return n===t?(t[12]=n[0]*m+n[4]*v+n[8]*M+n[12],t[13]=n[1]*m+n[5]*v+n[9]*M+n[13],t[14]=n[2]*m+n[6]*v+n[10]*M+n[14],t[15]=n[3]*m+n[7]*v+n[11]*M+n[15]):(r=n[0],o=n[1],u=n[2],i=n[3],a=n[4],c=n[5],s=n[6],f=n[7],l=n[8],h=n[9],d=n[10],p=n[11],t[0]=r,t[1]=o,t[2]=u,t[3]=i,t[4]=a,t[5]=c,t[6]=s,t[7]=f,t[8]=l,t[9]=h,t[10]=d,t[11]=p,t[12]=r*m+a*v+l*M+n[12],t[13]=o*m+c*v+h*M+n[13],t[14]=u*m+s*v+d*M+n[14],t[15]=i*m+f*v+p*M+n[15]),t}function It(t,n,e){let r=e[0],o=e[1],u=e[2];return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=n[3]*r,t[4]=n[4]*o,t[5]=n[5]*o,t[6]=n[6]*o,t[7]=n[7]*o,t[8]=n[8]*u,t[9]=n[9]*u,t[10]=n[10]*u,t[11]=n[11]*u,t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],t}function Pt(t,n,e,r){let o,u,i,a,c,s,f,l,h,d,p,m,v,M,y,g,b,x,A,E,w,T,S,I,P=r[0],C=r[1],L=r[2],O=Math.hypot(P,C,L);return O<ht?null:(O=1/O,P*=O,C*=O,L*=O,o=Math.sin(e),u=Math.cos(e),i=1-u,a=n[0],c=n[1],s=n[2],f=n[3],l=n[4],h=n[5],d=n[6],p=n[7],m=n[8],v=n[9],M=n[10],y=n[11],g=P*P*i+u,b=C*P*i+L*o,x=L*P*i-C*o,A=P*C*i-L*o,E=C*C*i+u,w=L*C*i+P*o,T=P*L*i+C*o,S=C*L*i-P*o,I=L*L*i+u,t[0]=a*g+l*b+m*x,t[1]=c*g+h*b+v*x,t[2]=s*g+d*b+M*x,t[3]=f*g+p*b+y*x,t[4]=a*A+l*E+m*w,t[5]=c*A+h*E+v*w,t[6]=s*A+d*E+M*w,t[7]=f*A+p*E+y*w,t[8]=a*T+l*S+m*I,t[9]=c*T+h*S+v*I,t[10]=s*T+d*S+M*I,t[11]=f*T+p*S+y*I,n!==t&&(t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t)}function Ct(t,n,e){let r=Math.sin(e),o=Math.cos(e),u=n[4],i=n[5],a=n[6],c=n[7],s=n[8],f=n[9],l=n[10],h=n[11];return n!==t&&(t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t[4]=u*o+s*r,t[5]=i*o+f*r,t[6]=a*o+l*r,t[7]=c*o+h*r,t[8]=s*o-u*r,t[9]=f*o-i*r,t[10]=l*o-a*r,t[11]=h*o-c*r,t}function Lt(t,n,e){let r=Math.sin(e),o=Math.cos(e),u=n[0],i=n[1],a=n[2],c=n[3],s=n[8],f=n[9],l=n[10],h=n[11];return n!==t&&(t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t[0]=u*o-s*r,t[1]=i*o-f*r,t[2]=a*o-l*r,t[3]=c*o-h*r,t[8]=u*r+s*o,t[9]=i*r+f*o,t[10]=a*r+l*o,t[11]=c*r+h*o,t}function Ot(t,n,e){let r=Math.sin(e),o=Math.cos(e),u=n[0],i=n[1],a=n[2],c=n[3],s=n[4],f=n[5],l=n[6],h=n[7];return n!==t&&(t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t[0]=u*o+s*r,t[1]=i*o+f*r,t[2]=a*o+l*r,t[3]=c*o+h*r,t[4]=s*o-u*r,t[5]=f*o-i*r,t[6]=l*o-a*r,t[7]=h*o-c*r,t}function Ft(t,n){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=n[0],t[13]=n[1],t[14]=n[2],t[15]=1,t}function Vt(t,n){return t[0]=n[0],t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=n[1],t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=n[2],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function _t(t,n,e){let r,o,u,i=e[0],a=e[1],c=e[2],s=Math.hypot(i,a,c);return s<ht?null:(s=1/s,i*=s,a*=s,c*=s,r=Math.sin(n),o=Math.cos(n),u=1-o,t[0]=i*i*u+o,t[1]=a*i*u+c*r,t[2]=c*i*u-a*r,t[3]=0,t[4]=i*a*u-c*r,t[5]=a*a*u+o,t[6]=c*a*u+i*r,t[7]=0,t[8]=i*c*u+a*r,t[9]=a*c*u-i*r,t[10]=c*c*u+o,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t)}function Bt(t,n){let e=Math.sin(n),r=Math.cos(n);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=r,t[6]=e,t[7]=0,t[8]=0,t[9]=-e,t[10]=r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function Rt(t,n){let e=Math.sin(n),r=Math.cos(n);return t[0]=r,t[1]=0,t[2]=-e,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=e,t[9]=0,t[10]=r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function Nt(t,n){let e=Math.sin(n),r=Math.cos(n);return t[0]=r,t[1]=e,t[2]=0,t[3]=0,t[4]=-e,t[5]=r,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function Dt(t,n,e){let r=n[0],o=n[1],u=n[2],i=n[3],a=r+r,c=o+o,s=u+u,f=r*a,l=r*c,h=r*s,d=o*c,p=o*s,m=u*s,v=i*a,M=i*c,y=i*s;return t[0]=1-(d+m),t[1]=l+y,t[2]=h-M,t[3]=0,t[4]=l-y,t[5]=1-(f+m),t[6]=p+v,t[7]=0,t[8]=h+M,t[9]=p-v,t[10]=1-(f+d),t[11]=0,t[12]=e[0],t[13]=e[1],t[14]=e[2],t[15]=1,t}function Ut(t,n){let e=new dt(3),r=-n[0],o=-n[1],u=-n[2],i=n[3],a=n[4],c=n[5],s=n[6],f=n[7],l=r*r+o*o+u*u+i*i;return l>0?(e[0]=2*(a*i+f*r+c*u-s*o)/l,e[1]=2*(c*i+f*o+s*r-a*u)/l,e[2]=2*(s*i+f*u+a*o-c*r)/l):(e[0]=2*(a*i+f*r+c*u-s*o),e[1]=2*(c*i+f*o+s*r-a*u),e[2]=2*(s*i+f*u+a*o-c*r)),Dt(t,n,e),t}function qt(t,n){return t[0]=n[12],t[1]=n[13],t[2]=n[14],t}function jt(t,n){let e=n[0],r=n[1],o=n[2],u=n[4],i=n[5],a=n[6],c=n[8],s=n[9],f=n[10];return t[0]=Math.hypot(e,r,o),t[1]=Math.hypot(u,i,a),t[2]=Math.hypot(c,s,f),t}function kt(t,n){let e=new dt(3);jt(e,n);let r=1/e[0],o=1/e[1],u=1/e[2],i=n[0]*r,a=n[1]*o,c=n[2]*u,s=n[4]*r,f=n[5]*o,l=n[6]*u,h=n[8]*r,d=n[9]*o,p=n[10]*u,m=i+f+p,v=0;return m>0?(v=2*Math.sqrt(m+1),t[3]=.25*v,t[0]=(l-d)/v,t[1]=(h-c)/v,t[2]=(a-s)/v):i>f&&i>p?(v=2*Math.sqrt(1+i-f-p),t[3]=(l-d)/v,t[0]=.25*v,t[1]=(a+s)/v,t[2]=(h+c)/v):f>p?(v=2*Math.sqrt(1+f-i-p),t[3]=(h-c)/v,t[0]=(a+s)/v,t[1]=.25*v,t[2]=(l+d)/v):(v=2*Math.sqrt(1+p-i-f),t[3]=(a-s)/v,t[0]=(h+c)/v,t[1]=(l+d)/v,t[2]=.25*v),t}function Yt(t,n,e,r){n[0]=r[12],n[1]=r[13],n[2]=r[14];let o=r[0],u=r[1],i=r[2],a=r[4],c=r[5],s=r[6],f=r[8],l=r[9],h=r[10];e[0]=Math.hypot(o,u,i),e[1]=Math.hypot(a,c,s),e[2]=Math.hypot(f,l,h);let d=1/e[0],p=1/e[1],m=1/e[2],v=o*d,M=u*p,y=i*m,g=a*d,b=c*p,x=s*m,A=f*d,E=l*p,w=h*m,T=v+b+w,S=0;return T>0?(S=2*Math.sqrt(T+1),t[3]=.25*S,t[0]=(x-E)/S,t[1]=(A-y)/S,t[2]=(M-g)/S):v>b&&v>w?(S=2*Math.sqrt(1+v-b-w),t[3]=(x-E)/S,t[0]=.25*S,t[1]=(M+g)/S,t[2]=(A+y)/S):b>w?(S=2*Math.sqrt(1+b-v-w),t[3]=(A-y)/S,t[0]=(M+g)/S,t[1]=.25*S,t[2]=(x+E)/S):(S=2*Math.sqrt(1+w-v-b),t[3]=(M-g)/S,t[0]=(A+y)/S,t[1]=(x+E)/S,t[2]=.25*S),t}function Ht(t,n,e,r){let o=n[0],u=n[1],i=n[2],a=n[3],c=o+o,s=u+u,f=i+i,l=o*c,h=o*s,d=o*f,p=u*s,m=u*f,v=i*f,M=a*c,y=a*s,g=a*f,b=r[0],x=r[1],A=r[2];return t[0]=(1-(p+v))*b,t[1]=(h+g)*b,t[2]=(d-y)*b,t[3]=0,t[4]=(h-g)*x,t[5]=(1-(l+v))*x,t[6]=(m+M)*x,t[7]=0,t[8]=(d+y)*A,t[9]=(m-M)*A,t[10]=(1-(l+p))*A,t[11]=0,t[12]=e[0],t[13]=e[1],t[14]=e[2],t[15]=1,t}function zt(t,n,e,r,o){let u=n[0],i=n[1],a=n[2],c=n[3],s=u+u,f=i+i,l=a+a,h=u*s,d=u*f,p=u*l,m=i*f,v=i*l,M=a*l,y=c*s,g=c*f,b=c*l,x=r[0],A=r[1],E=r[2],w=o[0],T=o[1],S=o[2],I=(1-(m+M))*x,P=(d+b)*x,C=(p-g)*x,L=(d-b)*A,O=(1-(h+M))*A,F=(v+y)*A,V=(p+g)*E,_=(v-y)*E,B=(1-(h+m))*E;return t[0]=I,t[1]=P,t[2]=C,t[3]=0,t[4]=L,t[5]=O,t[6]=F,t[7]=0,t[8]=V,t[9]=_,t[10]=B,t[11]=0,t[12]=e[0]+w-(I*w+L*T+V*S),t[13]=e[1]+T-(P*w+O*T+_*S),t[14]=e[2]+S-(C*w+F*T+B*S),t[15]=1,t}function Xt(t,n){let e=n[0],r=n[1],o=n[2],u=n[3],i=e+e,a=r+r,c=o+o,s=e*i,f=r*i,l=r*a,h=o*i,d=o*a,p=o*c,m=u*i,v=u*a,M=u*c;return t[0]=1-l-p,t[1]=f+M,t[2]=h-v,t[3]=0,t[4]=f-M,t[5]=1-s-p,t[6]=d+m,t[7]=0,t[8]=h+v,t[9]=d-m,t[10]=1-s-l,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function Gt(t,n,e,r,o,u,i){let a=1/(e-n),c=1/(o-r),s=1/(u-i);return t[0]=2*u*a,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=2*u*c,t[6]=0,t[7]=0,t[8]=(e+n)*a,t[9]=(o+r)*c,t[10]=(i+u)*s,t[11]=-1,t[12]=0,t[13]=0,t[14]=i*u*2*s,t[15]=0,t}function Kt(t,n,e,r,o){const u=1/Math.tan(n/2);if(t[0]=u/e,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=u,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=-1,t[12]=0,t[13]=0,t[15]=0,null!=o&&o!==1/0){const n=1/(r-o);t[10]=(o+r)*n,t[14]=2*o*r*n}else t[10]=-1,t[14]=-2*r;return t}Math.hypot||(Math.hypot=function(){for(var t=0,n=arguments.length;n--;)t+=arguments[n]*arguments[n];return Math.sqrt(t)});const Wt=Kt;function Zt(t,n,e,r,o){const u=1/Math.tan(n/2);if(t[0]=u/e,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=u,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=-1,t[12]=0,t[13]=0,t[15]=0,null!=o&&o!==1/0){const n=1/(r-o);t[10]=o*n,t[14]=o*r*n}else t[10]=-1,t[14]=-r;return t}function Jt(t,n,e,r){let o=Math.tan(n.upDegrees*Math.PI/180),u=Math.tan(n.downDegrees*Math.PI/180),i=Math.tan(n.leftDegrees*Math.PI/180),a=Math.tan(n.rightDegrees*Math.PI/180),c=2/(i+a),s=2/(o+u);return t[0]=c,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=s,t[6]=0,t[7]=0,t[8]=-(i-a)*c*.5,t[9]=(o-u)*s*.5,t[10]=r/(e-r),t[11]=-1,t[12]=0,t[13]=0,t[14]=r*e/(e-r),t[15]=0,t}function Qt(t,n,e,r,o,u,i){const a=1/(n-e),c=1/(r-o),s=1/(u-i);return t[0]=-2*a,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*c,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*s,t[11]=0,t[12]=(n+e)*a,t[13]=(o+r)*c,t[14]=(i+u)*s,t[15]=1,t}const $t=Qt;function tn(t,n,e,r,o,u,i){const a=1/(n-e),c=1/(r-o),s=1/(u-i);return t[0]=-2*a,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*c,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=s,t[11]=0,t[12]=(n+e)*a,t[13]=(o+r)*c,t[14]=u*s,t[15]=1,t}function nn(t,n,e,r){let o,u,i,a,c,s,f,l,h,d,p=n[0],m=n[1],v=n[2],M=r[0],y=r[1],g=r[2],b=e[0],x=e[1],A=e[2];return Math.abs(p-b)<ht&&Math.abs(m-x)<ht&&Math.abs(v-A)<ht?bt(t):(f=p-b,l=m-x,h=v-A,d=1/Math.hypot(f,l,h),f*=d,l*=d,h*=d,o=y*h-g*l,u=g*f-M*h,i=M*l-y*f,d=Math.hypot(o,u,i),d?(d=1/d,o*=d,u*=d,i*=d):(o=0,u=0,i=0),a=l*i-h*u,c=h*o-f*i,s=f*u-l*o,d=Math.hypot(a,c,s),d?(d=1/d,a*=d,c*=d,s*=d):(a=0,c=0,s=0),t[0]=o,t[1]=a,t[2]=f,t[3]=0,t[4]=u,t[5]=c,t[6]=l,t[7]=0,t[8]=i,t[9]=s,t[10]=h,t[11]=0,t[12]=-(o*p+u*m+i*v),t[13]=-(a*p+c*m+s*v),t[14]=-(f*p+l*m+h*v),t[15]=1,t)}function en(t,n,e,r){let o=n[0],u=n[1],i=n[2],a=r[0],c=r[1],s=r[2],f=o-e[0],l=u-e[1],h=i-e[2],d=f*f+l*l+h*h;d>0&&(d=1/Math.sqrt(d),f*=d,l*=d,h*=d);let p=c*h-s*l,m=s*f-a*h,v=a*l-c*f;return d=p*p+m*m+v*v,d>0&&(d=1/Math.sqrt(d),p*=d,m*=d,v*=d),t[0]=p,t[1]=m,t[2]=v,t[3]=0,t[4]=l*v-h*m,t[5]=h*p-f*v,t[6]=f*m-l*p,t[7]=0,t[8]=f,t[9]=l,t[10]=h,t[11]=0,t[12]=o,t[13]=u,t[14]=i,t[15]=1,t}function rn(t){return"mat4("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+", "+t[8]+", "+t[9]+", "+t[10]+", "+t[11]+", "+t[12]+", "+t[13]+", "+t[14]+", "+t[15]+")"}function on(t){return Math.hypot(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12],t[13],t[14],t[15])}function un(t,n,e){return t[0]=n[0]+e[0],t[1]=n[1]+e[1],t[2]=n[2]+e[2],t[3]=n[3]+e[3],t[4]=n[4]+e[4],t[5]=n[5]+e[5],t[6]=n[6]+e[6],t[7]=n[7]+e[7],t[8]=n[8]+e[8],t[9]=n[9]+e[9],t[10]=n[10]+e[10],t[11]=n[11]+e[11],t[12]=n[12]+e[12],t[13]=n[13]+e[13],t[14]=n[14]+e[14],t[15]=n[15]+e[15],t}function an(t,n,e){return t[0]=n[0]-e[0],t[1]=n[1]-e[1],t[2]=n[2]-e[2],t[3]=n[3]-e[3],t[4]=n[4]-e[4],t[5]=n[5]-e[5],t[6]=n[6]-e[6],t[7]=n[7]-e[7],t[8]=n[8]-e[8],t[9]=n[9]-e[9],t[10]=n[10]-e[10],t[11]=n[11]-e[11],t[12]=n[12]-e[12],t[13]=n[13]-e[13],t[14]=n[14]-e[14],t[15]=n[15]-e[15],t}function cn(t,n,e){return t[0]=n[0]*e,t[1]=n[1]*e,t[2]=n[2]*e,t[3]=n[3]*e,t[4]=n[4]*e,t[5]=n[5]*e,t[6]=n[6]*e,t[7]=n[7]*e,t[8]=n[8]*e,t[9]=n[9]*e,t[10]=n[10]*e,t[11]=n[11]*e,t[12]=n[12]*e,t[13]=n[13]*e,t[14]=n[14]*e,t[15]=n[15]*e,t}function sn(t,n,e,r){return t[0]=n[0]+e[0]*r,t[1]=n[1]+e[1]*r,t[2]=n[2]+e[2]*r,t[3]=n[3]+e[3]*r,t[4]=n[4]+e[4]*r,t[5]=n[5]+e[5]*r,t[6]=n[6]+e[6]*r,t[7]=n[7]+e[7]*r,t[8]=n[8]+e[8]*r,t[9]=n[9]+e[9]*r,t[10]=n[10]+e[10]*r,t[11]=n[11]+e[11]*r,t[12]=n[12]+e[12]*r,t[13]=n[13]+e[13]*r,t[14]=n[14]+e[14]*r,t[15]=n[15]+e[15]*r,t}function fn(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]&&t[4]===n[4]&&t[5]===n[5]&&t[6]===n[6]&&t[7]===n[7]&&t[8]===n[8]&&t[9]===n[9]&&t[10]===n[10]&&t[11]===n[11]&&t[12]===n[12]&&t[13]===n[13]&&t[14]===n[14]&&t[15]===n[15]}function ln(t,n){let e=t[0],r=t[1],o=t[2],u=t[3],i=t[4],a=t[5],c=t[6],s=t[7],f=t[8],l=t[9],h=t[10],d=t[11],p=t[12],m=t[13],v=t[14],M=t[15],y=n[0],g=n[1],b=n[2],x=n[3],A=n[4],E=n[5],w=n[6],T=n[7],S=n[8],I=n[9],P=n[10],C=n[11],L=n[12],O=n[13],F=n[14],V=n[15];return Math.abs(e-y)<=ht*Math.max(1,Math.abs(e),Math.abs(y))&&Math.abs(r-g)<=ht*Math.max(1,Math.abs(r),Math.abs(g))&&Math.abs(o-b)<=ht*Math.max(1,Math.abs(o),Math.abs(b))&&Math.abs(u-x)<=ht*Math.max(1,Math.abs(u),Math.abs(x))&&Math.abs(i-A)<=ht*Math.max(1,Math.abs(i),Math.abs(A))&&Math.abs(a-E)<=ht*Math.max(1,Math.abs(a),Math.abs(E))&&Math.abs(c-w)<=ht*Math.max(1,Math.abs(c),Math.abs(w))&&Math.abs(s-T)<=ht*Math.max(1,Math.abs(s),Math.abs(T))&&Math.abs(f-S)<=ht*Math.max(1,Math.abs(f),Math.abs(S))&&Math.abs(l-I)<=ht*Math.max(1,Math.abs(l),Math.abs(I))&&Math.abs(h-P)<=ht*Math.max(1,Math.abs(h),Math.abs(P))&&Math.abs(d-C)<=ht*Math.max(1,Math.abs(d),Math.abs(C))&&Math.abs(p-L)<=ht*Math.max(1,Math.abs(p),Math.abs(L))&&Math.abs(m-O)<=ht*Math.max(1,Math.abs(m),Math.abs(O))&&Math.abs(v-F)<=ht*Math.max(1,Math.abs(v),Math.abs(F))&&Math.abs(M-V)<=ht*Math.max(1,Math.abs(M),Math.abs(V))}const hn=Tt,dn=an;function pn(){let t=new dt(3);return dt!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t}function mn(t){var n=new dt(3);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n}function vn(t){let n=t[0],e=t[1],r=t[2];return Math.hypot(n,e,r)}function Mn(t,n,e){let r=new dt(3);return r[0]=t,r[1]=n,r[2]=e,r}function yn(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t}function gn(t,n,e,r){return t[0]=n,t[1]=e,t[2]=r,t}function bn(t,n,e){return t[0]=n[0]+e[0],t[1]=n[1]+e[1],t[2]=n[2]+e[2],t}function xn(t,n,e){return t[0]=n[0]-e[0],t[1]=n[1]-e[1],t[2]=n[2]-e[2],t}function An(t,n,e){return t[0]=n[0]*e[0],t[1]=n[1]*e[1],t[2]=n[2]*e[2],t}function En(t,n,e){return t[0]=n[0]/e[0],t[1]=n[1]/e[1],t[2]=n[2]/e[2],t}function wn(t,n){return t[0]=Math.ceil(n[0]),t[1]=Math.ceil(n[1]),t[2]=Math.ceil(n[2]),t}function Tn(t,n){return t[0]=Math.floor(n[0]),t[1]=Math.floor(n[1]),t[2]=Math.floor(n[2]),t}function Sn(t,n,e){return t[0]=Math.min(n[0],e[0]),t[1]=Math.min(n[1],e[1]),t[2]=Math.min(n[2],e[2]),t}function In(t,n,e){return t[0]=Math.max(n[0],e[0]),t[1]=Math.max(n[1],e[1]),t[2]=Math.max(n[2],e[2]),t}function Pn(t,n){return t[0]=Math.round(n[0]),t[1]=Math.round(n[1]),t[2]=Math.round(n[2]),t}function Cn(t,n,e){return t[0]=n[0]*e,t[1]=n[1]*e,t[2]=n[2]*e,t}function Ln(t,n,e,r){return t[0]=n[0]+e[0]*r,t[1]=n[1]+e[1]*r,t[2]=n[2]+e[2]*r,t}function On(t,n){let e=n[0]-t[0],r=n[1]-t[1],o=n[2]-t[2];return Math.hypot(e,r,o)}function Fn(t,n){let e=n[0]-t[0],r=n[1]-t[1],o=n[2]-t[2];return e*e+r*r+o*o}function Vn(t){let n=t[0],e=t[1],r=t[2];return n*n+e*e+r*r}function _n(t,n){return t[0]=-n[0],t[1]=-n[1],t[2]=-n[2],t}function Bn(t,n){return t[0]=1/n[0],t[1]=1/n[1],t[2]=1/n[2],t}function Rn(t,n){let e=n[0],r=n[1],o=n[2],u=e*e+r*r+o*o;return u>0&&(u=1/Math.sqrt(u)),t[0]=n[0]*u,t[1]=n[1]*u,t[2]=n[2]*u,t}function Nn(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function Dn(t,n,e){let r=n[0],o=n[1],u=n[2],i=e[0],a=e[1],c=e[2];return t[0]=o*c-u*a,t[1]=u*i-r*c,t[2]=r*a-o*i,t}function Un(t,n,e,r){let o=n[0],u=n[1],i=n[2];return t[0]=o+r*(e[0]-o),t[1]=u+r*(e[1]-u),t[2]=i+r*(e[2]-i),t}function qn(t,n,e,r){let o=Math.acos(Math.min(Math.max(Nn(n,e),-1),1)),u=Math.sin(o),i=Math.sin((1-r)*o)/u,a=Math.sin(r*o)/u;return t[0]=i*n[0]+a*e[0],t[1]=i*n[1]+a*e[1],t[2]=i*n[2]+a*e[2],t}function jn(t,n,e,r,o,u){let i=u*u,a=i*(2*u-3)+1,c=i*(u-2)+u,s=i*(u-1),f=i*(3-2*u);return t[0]=n[0]*a+e[0]*c+r[0]*s+o[0]*f,t[1]=n[1]*a+e[1]*c+r[1]*s+o[1]*f,t[2]=n[2]*a+e[2]*c+r[2]*s+o[2]*f,t}function kn(t,n,e,r,o,u){let i=1-u,a=i*i,c=u*u,s=a*i,f=3*u*a,l=3*c*i,h=c*u;return t[0]=n[0]*s+e[0]*f+r[0]*l+o[0]*h,t[1]=n[1]*s+e[1]*f+r[1]*l+o[1]*h,t[2]=n[2]*s+e[2]*f+r[2]*l+o[2]*h,t}function Yn(t,n){n=n||1;let e=2*pt()*Math.PI,r=2*pt()-1,o=Math.sqrt(1-r*r)*n;return t[0]=Math.cos(e)*o,t[1]=Math.sin(e)*o,t[2]=r*n,t}function Hn(t,n,e){let r=n[0],o=n[1],u=n[2],i=e[3]*r+e[7]*o+e[11]*u+e[15];return i=i||1,t[0]=(e[0]*r+e[4]*o+e[8]*u+e[12])/i,t[1]=(e[1]*r+e[5]*o+e[9]*u+e[13])/i,t[2]=(e[2]*r+e[6]*o+e[10]*u+e[14])/i,t}function zn(t,n,e){let r=n[0],o=n[1],u=n[2];return t[0]=r*e[0]+o*e[3]+u*e[6],t[1]=r*e[1]+o*e[4]+u*e[7],t[2]=r*e[2]+o*e[5]+u*e[8],t}function Xn(t,n,e){let r=e[0],o=e[1],u=e[2],i=e[3],a=n[0],c=n[1],s=n[2],f=o*s-u*c,l=u*a-r*s,h=r*c-o*a,d=o*h-u*l,p=u*f-r*h,m=r*l-o*f,v=2*i;return f*=v,l*=v,h*=v,d*=2,p*=2,m*=2,t[0]=a+f+d,t[1]=c+l+p,t[2]=s+h+m,t}function Gn(t,n,e,r){let o=[],u=[];return o[0]=n[0]-e[0],o[1]=n[1]-e[1],o[2]=n[2]-e[2],u[0]=o[0],u[1]=o[1]*Math.cos(r)-o[2]*Math.sin(r),u[2]=o[1]*Math.sin(r)+o[2]*Math.cos(r),t[0]=u[0]+e[0],t[1]=u[1]+e[1],t[2]=u[2]+e[2],t}function Kn(t,n,e,r){let o=[],u=[];return o[0]=n[0]-e[0],o[1]=n[1]-e[1],o[2]=n[2]-e[2],u[0]=o[2]*Math.sin(r)+o[0]*Math.cos(r),u[1]=o[1],u[2]=o[2]*Math.cos(r)-o[0]*Math.sin(r),t[0]=u[0]+e[0],t[1]=u[1]+e[1],t[2]=u[2]+e[2],t}function Wn(t,n,e,r){let o=[],u=[];return o[0]=n[0]-e[0],o[1]=n[1]-e[1],o[2]=n[2]-e[2],u[0]=o[0]*Math.cos(r)-o[1]*Math.sin(r),u[1]=o[0]*Math.sin(r)+o[1]*Math.cos(r),u[2]=o[2],t[0]=u[0]+e[0],t[1]=u[1]+e[1],t[2]=u[2]+e[2],t}function Zn(t,n){let e=t[0],r=t[1],o=t[2],u=n[0],i=n[1],a=n[2],c=Math.sqrt(e*e+r*r+o*o)*Math.sqrt(u*u+i*i+a*a),s=c&&Nn(t,n)/c;return Math.acos(Math.min(Math.max(s,-1),1))}function Jn(t){return t[0]=0,t[1]=0,t[2]=0,t}function Qn(t){return"vec3("+t[0]+", "+t[1]+", "+t[2]+")"}function $n(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]}function te(t,n){let e=t[0],r=t[1],o=t[2],u=n[0],i=n[1],a=n[2];return Math.abs(e-u)<=ht*Math.max(1,Math.abs(e),Math.abs(u))&&Math.abs(r-i)<=ht*Math.max(1,Math.abs(r),Math.abs(i))&&Math.abs(o-a)<=ht*Math.max(1,Math.abs(o),Math.abs(a))}const ne=xn,ee=An,re=En,oe=On,ue=Fn,ie=vn,ae=Vn,ce=function(){let t=pn();return function(n,e,r,o,u,i){let a,c;for(e||(e=3),r||(r=0),c=o?Math.min(o*e+r,n.length):n.length,a=r;a<c;a+=e)t[0]=n[a],t[1]=n[a+1],t[2]=n[a+2],u(t,t,i),n[a]=t[0],n[a+1]=t[1],n[a+2]=t[2];return n}}();var se=function(t,n,e,r){return new(e||(e=Promise))((function(o,u){function i(t){try{c(r.next(t))}catch(t){u(t)}}function a(t){try{c(r.throw(t))}catch(t){u(t)}}function c(t){var n;t.done?o(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(i,a)}c((r=r.apply(t,n||[])).next())}))},fe=function(t,n){var e,r,o,u,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return u={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(u[Symbol.iterator]=function(){return this}),u;function a(u){return function(a){return function(u){if(e)throw new TypeError("Generator is already executing.");for(;i;)try{if(e=1,r&&(o=2&u[0]?r.return:u[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,u[1])).done)return o;switch(r=0,o&&(u=[2&u[0],o.value]),u[0]){case 0:case 1:o=u;break;case 4:return i.label++,{value:u[1],done:!1};case 5:i.label++,r=u[1],u=[0];continue;case 7:u=i.ops.pop(),i.trys.pop();continue;default:if(!(o=i.trys,(o=o.length>0&&o[o.length-1])||6!==u[0]&&2!==u[0])){i=0;continue}if(3===u[0]&&(!o||u[1]>o[0]&&u[1]<o[3])){i.label=u[1];break}if(6===u[0]&&i.label<o[1]){i.label=o[1],o=u;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(u);break}o[2]&&i.ops.pop(),i.trys.pop();continue}u=n.call(t,i)}catch(t){u=[6,t],r=0}finally{e=o=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,a])}}};se(void 0,void 0,void 0,(function(){var t,n,e,u,i,a,s,f,m,v,M,g,E,w,T,S,P,C,F,V,_,D,U,q,j,k,Y,K,W,Z,J,Q,$;return fe(this,(function(nt){var et,rt,ot;return t=new st,n=l(),e=document.getElementById("viewer"),u=A("viewer-options"),i=A("viewer-shader-options"),a=A("viewer-content shader-errors"),s=ct("viewer-content"),f=s[0],m=s[1],v=new Map([["positions",{name:"Binding - Mesh positions",type:L.FLOAT_VEC4,value:new G([])}],["colors",{name:"Binding - Mesh colors",type:L.FLOAT_VEC4,value:new G([])}]]),M={drawMode:"arrays"},g={longitude:1,latitude:1,radius:2},new c(f,(function(){return g}),(function(t){g=t,console.log("viewport",g)})),e.appendChild(f),e.appendChild(a),e.appendChild(u),E=function(t){f.style.visibility="canvas"===t?"visible":"collapse",a.style.visibility="errors"===t?"visible":"collapse"},w=function(){t.getShaderDocuments().then((function(t){var e=t.map((function(t){return{id:t.filePath,display:t.fileName}}));q.setItems(e),n.vertexFilePath&&e.some((function(t){return t.id===n.vertexFilePath}))&&q.setSelectedItemById(n.vertexFilePath),Y.setItems(e),n.fragmentFilePath&&e.some((function(t){return t.id===n.fragmentFilePath}))&&Y.setSelectedItemById(n.fragmentFilePath)}))},F=null,V=function(t){var n=lt.get(t),e=n.positions,r=n.colors;v.get("positions").value.setValue(e),v.get("colors").value.setValue(r)},_=function(){i.innerHTML="";var t=m.context;if(C&&P){var n=function(t,n,e){var r=z(t,t.VERTEX_SHADER,n),o=z(t,t.FRAGMENT_SHADER,e),u=void 0;I(r,"error")&&(u=H(r.error,1));var i=void 0;return I(o,"error")&&(i=H(o.error,1)),u||i?[u,i]:X(t,r,o)}(t,P,C);if(Array.isArray(n))E("errors"),a.innerText=function(t){var n=t[0],e=t[1],r=[];return n&&r.push("VERTEX SHADER:",n),e&&r.push("FRAGMENT SHADER:",e),r.join("\r\n")}(n);else{E("canvas");var e=n,u=function(t,n){for(var e=t.getProgramParameter(n,t.ACTIVE_UNIFORMS),r=[],o=0;o<e;++o){var u=t.getActiveUniform(n,o);r.push({name:u.name,type:u.type})}return r}(t,e),c=function(t,n){for(var e=t.getProgramParameter(n,t.ACTIVE_ATTRIBUTES),r=[],o=0;o<e;++o){var u=t.getActiveAttrib(n,o);r.push({name:u.name,type:u.type})}return r}(t,e),s=function(t,n,e){var r=e.map((function(e){var r=B({},e),o=R.get(r);if(o)return o.uniformInfo.attachToProgram(n),{key:r,value:o};var u=new O(t,n,e.name,e.type);return{key:r,value:{component:x(N(u),e.name),uniformInfo:u}}}));return R.clear(),r.forEach((function(t){return R.set(t.key,t.value)})),r.map((function(t){return t.value}))}(t,e,u);s.forEach((function(t){return i.appendChild(t.component)}));var f=tt(t,e,c,Array.from(v.values()));f.forEach((function(t){return i.appendChild(t.component)}));var l=s.map((function(t){return t.uniformInfo})),h=f.map((function(t){return t.attributeBufferInfo})),p=new d(t);p.setValue([0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23]),null!==F&&cancelAnimationFrame(F);var y=l.find((function(t){return"uModelViewMatrix"===t.getUniformName()})),b=l.find((function(t){return"uProjectionMatrix"===t.getUniformName()})),A=function(n){n*=.001;n;var u=45*Math.PI/180,i=t.canvas,a=i.clientWidth/i.clientHeight,c=r.create();r.perspective(c,u,a,.1,100);var s=r.create(),f=function(t){var n=t.radius*Math.sin(t.latitude),e=t.radius*Math.cos(t.latitude),r=e*Math.cos(t.longitude);return{x:e*Math.sin(t.longitude),y:n,z:r}}(g);r.lookAt(s,o.fromValues(f.x,f.y,f.z),o.create(),o.fromValues(0,1,0)),b.setValue(c),y.setValue(s),function(t,n,e,r){t.useProgram(n),t.viewport(0,0,t.canvas.width,t.canvas.height),t.clearColor(0,0,0,1),t.clearDepth(1),t.enable(t.DEPTH_TEST),t.depthFunc(t.LEQUAL),t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT),e.uniformInfos.forEach((function(t){return t.setUniform()})),e.attributeBufferInfos.forEach((function(t){return t.setAttributeBuffer()}));var o=t.TRIANGLES;if("arrays"===r.drawMode){var u=Math.min.apply(Math,e.attributeBufferInfos.map((function(t){return t.getCount()})));t.drawArrays(o,0,u)}else e.indexBufferInfo.setIndexBuffer(),t.drawElements(o,e.indexBufferInfo.getCount(),t.UNSIGNED_SHORT,0)}(t,e,{uniformInfos:l,attributeBufferInfos:h,indexBufferInfo:p},M),F=requestAnimationFrame(A)};A(0)}}else E("none")},u.appendChild(A("viewer-shaders-title",[(et=p,rt="",ot=document.createElement("h3"),ot.textContent=et,ot.className=rt+" section-title",{element:ot}).element,b("Sync","viewer-refresh-button",w).element])),D=y((function(n){return se(void 0,void 0,void 0,(function(){var e;return fe(this,(function(r){switch(r.label){case 0:return null==T||T(),n&&(T=t.subscribeToDocumentSave(n.id,(function(t){P=t,_()}))),n?[4,t.getDocumentText(n.id)]:[3,2];case 1:return e=r.sent(),[3,3];case 2:e="",r.label=3;case 3:return P=e,h({vertexFilePath:n?n.id:null}),_(),[2]}}))}))})),U=D[0],(q=D[1]).setSelectedItemById(n.vertexFilePath),u.appendChild(x(U,"Vertex Shader")),j=y((function(n){return se(void 0,void 0,void 0,(function(){var e;return fe(this,(function(r){switch(r.label){case 0:return null==S||S(),n&&(S=t.subscribeToDocumentSave(n.id,(function(t){C=t,_()}))),n?[4,t.getDocumentText(n.id)]:[3,2];case 1:return e=r.sent(),[3,3];case 2:e="",r.label=3;case 3:return C=e,h({fragmentFilePath:n?n.id:null}),_(),[2]}}))}))})),k=j[0],(Y=j[1]).setSelectedItemById(n.fragmentFilePath),u.appendChild(x(k,"Fragment Shader")),K=y((function(t){return t&&V(t.id)}),void 0,{emptyItem:!1}),W=K[0],(Z=K[1]).setItems(Array.from(lt.entries()).map((function(t){return{id:t[0],display:t[1].display}}))),Z.setSelectedItemByIndex(0),u.appendChild(x(W,"Mesh")),J=y((function(t){t&&(M.drawMode=t.id,h({drawMode:t.id}))}),void 0,{emptyItem:!1}),Q=J[0],($=J[1]).setItems([{id:"arrays",display:"Arrays"},{id:"elements",display:"Elements"}]),$.setSelectedItemById(n.drawMode),u.appendChild(x(Q,"Draw mode")),u.appendChild(i),w(),[2]}))}))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,