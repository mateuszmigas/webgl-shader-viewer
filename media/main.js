!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=23)}([function(e,t,n){"use strict";e.exports=n(41)},function(e,t,n){"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";n.r(t),n.d(t,"Provider",(function(){return c})),n.d(t,"connectAdvanced",(function(){return E})),n.d(t,"ReactReduxContext",(function(){return i})),n.d(t,"connect",(function(){return B})),n.d(t,"batch",(function(){return G.unstable_batchedUpdates})),n.d(t,"useDispatch",(function(){return q})),n.d(t,"createDispatchHook",(function(){return $})),n.d(t,"useSelector",(function(){return X})),n.d(t,"createSelectorHook",(function(){return K})),n.d(t,"useStore",(function(){return H})),n.d(t,"createStoreHook",(function(){return W})),n.d(t,"shallowEqual",(function(){return k}));var r=n(0),o=n.n(r),i=(n(47),o.a.createContext(null));var a=function(e){e()},u={notify:function(){}};function l(){var e=a,t=null,n=null;return{clear:function(){t=null,n=null},notify:function(){e((function(){for(var e=t;e;)e.callback(),e=e.next}))},get:function(){for(var e=[],n=t;n;)e.push(n),n=n.next;return e},subscribe:function(e){var r=!0,o=n={callback:e,next:null,prev:n};return o.prev?o.prev.next=o:t=o,function(){r&&null!==t&&(r=!1,o.next?o.next.prev=o.prev:n=o.prev,o.prev?o.prev.next=o.next:t=o.next)}}}}var s=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=u,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=l())},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=u)},e}();var c=function(e){var t=e.store,n=e.context,a=e.children,u=Object(r.useMemo)((function(){var e=new s(t);return e.onStateChange=e.notifyNestedSubs,{store:t,subscription:e}}),[t]),l=Object(r.useMemo)((function(){return t.getState()}),[t]);Object(r.useEffect)((function(){var e=u.subscription;return e.trySubscribe(),l!==t.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[u,l]);var c=n||i;return o.a.createElement(c.Provider,{value:u},a)},f=n(1),d=n(3),p=n(22),h=n.n(p),m=n(20),v="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?r.useLayoutEffect:r.useEffect,g=[],y=[null,null];function b(e,t){var n=e[1];return[t.payload,n+1]}function w(e,t,n){v((function(){return e.apply(void 0,t)}),n)}function _(e,t,n,r,o,i,a){e.current=r,t.current=o,n.current=!1,i.current&&(i.current=null,a())}function S(e,t,n,r,o,i,a,u,l,s){if(e){var c=!1,f=null,d=function(){if(!c){var e,n,d=t.getState();try{e=r(d,o.current)}catch(e){n=e,f=e}n||(f=null),e===i.current?a.current||l():(i.current=e,u.current=e,a.current=!0,s({type:"STORE_UPDATED",payload:{error:n}}))}};n.onStateChange=d,n.trySubscribe(),d();return function(){if(c=!0,n.tryUnsubscribe(),n.onStateChange=null,f)throw f}}}var x=function(){return[null,0]};function E(e,t){void 0===t&&(t={});var n=t,a=n.getDisplayName,u=void 0===a?function(e){return"ConnectAdvanced("+e+")"}:a,l=n.methodName,c=void 0===l?"connectAdvanced":l,p=n.renderCountProp,v=void 0===p?void 0:p,E=n.shouldHandleStateChanges,O=void 0===E||E,k=n.storeKey,C=void 0===k?"store":k,P=(n.withRef,n.forwardRef),I=void 0!==P&&P,M=n.context,T=void 0===M?i:M,R=Object(d.a)(n,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"]),N=T;return function(t){var n=t.displayName||t.name||"Component",i=u(n),a=Object(f.a)({},R,{getDisplayName:u,methodName:c,renderCountProp:v,shouldHandleStateChanges:O,storeKey:C,displayName:i,wrappedComponentName:n,WrappedComponent:t}),l=R.pure;var p=l?r.useMemo:function(e){return e()};function E(n){var i=Object(r.useMemo)((function(){var e=n.reactReduxForwardedRef,t=Object(d.a)(n,["reactReduxForwardedRef"]);return[n.context,e,t]}),[n]),u=i[0],l=i[1],c=i[2],h=Object(r.useMemo)((function(){return u&&u.Consumer&&Object(m.isContextConsumer)(o.a.createElement(u.Consumer,null))?u:N}),[u,N]),v=Object(r.useContext)(h),E=Boolean(n.store)&&Boolean(n.store.getState)&&Boolean(n.store.dispatch);Boolean(v)&&Boolean(v.store);var k=E?n.store:v.store,C=Object(r.useMemo)((function(){return function(t){return e(t.dispatch,a)}(k)}),[k]),P=Object(r.useMemo)((function(){if(!O)return y;var e=new s(k,E?null:v.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]}),[k,E,v]),I=P[0],M=P[1],T=Object(r.useMemo)((function(){return E?v:Object(f.a)({},v,{subscription:I})}),[E,v,I]),R=Object(r.useReducer)(b,g,x),L=R[0][0],j=R[1];if(L&&L.error)throw L.error;var A=Object(r.useRef)(),F=Object(r.useRef)(c),z=Object(r.useRef)(),D=Object(r.useRef)(!1),U=p((function(){return z.current&&c===F.current?z.current:C(k.getState(),c)}),[k,L,c]);w(_,[F,A,D,c,U,z,M]),w(S,[O,k,I,C,F,A,D,z,M,j],[k,I,C]);var B=Object(r.useMemo)((function(){return o.a.createElement(t,Object(f.a)({},U,{ref:l}))}),[l,t,U]);return Object(r.useMemo)((function(){return O?o.a.createElement(h.Provider,{value:T},B):B}),[h,B,T])}var k=l?o.a.memo(E):E;if(k.WrappedComponent=t,k.displayName=i,I){var P=o.a.forwardRef((function(e,t){return o.a.createElement(k,Object(f.a)({},e,{reactReduxForwardedRef:t}))}));return P.displayName=i,P.WrappedComponent=t,h()(P,t)}return h()(k,t)}}function O(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function k(e,t){if(O(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!Object.prototype.hasOwnProperty.call(t,n[o])||!O(e[n[o]],t[n[o]]))return!1;return!0}var C=n(19);function P(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function I(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function M(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=I(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=I(o),o=r(t,n)),o},r}}var T=[function(e){return"function"==typeof e?M(e):void 0},function(e){return e?void 0:P((function(e){return{dispatch:e}}))},function(e){return e&&"object"==typeof e?P((function(t){return Object(C.bindActionCreators)(e,t)})):void 0}];var R=[function(e){return"function"==typeof e?M(e):void 0},function(e){return e?void 0:P((function(){return{}}))}];function N(e,t,n){return Object(f.a)({},n,e,t)}var L=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,o=n.pure,i=n.areMergedPropsEqual,a=!1;return function(t,n,u){var l=e(t,n,u);return a?o&&i(l,r)||(r=l):(a=!0,r=l),r}}}(e):void 0},function(e){return e?void 0:function(){return N}}];function j(e,t,n,r){return function(o,i){return n(e(o,i),t(r,i),i)}}function A(e,t,n,r,o){var i,a,u,l,s,c=o.areStatesEqual,f=o.areOwnPropsEqual,d=o.areStatePropsEqual,p=!1;function h(o,p){var h,m,v=!f(p,a),g=!c(o,i);return i=o,a=p,v&&g?(u=e(i,a),t.dependsOnOwnProps&&(l=t(r,a)),s=n(u,l,a)):v?(e.dependsOnOwnProps&&(u=e(i,a)),t.dependsOnOwnProps&&(l=t(r,a)),s=n(u,l,a)):g?(h=e(i,a),m=!d(h,u),u=h,m&&(s=n(u,l,a)),s):s}return function(o,c){return p?h(o,c):(u=e(i=o,a=c),l=t(r,a),s=n(u,l,a),p=!0,s)}}function F(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,i=Object(d.a)(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),a=n(e,i),u=r(e,i),l=o(e,i);return(i.pure?A:j)(a,u,l,e,i)}function z(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function D(e,t){return e===t}function U(e){var t=void 0===e?{}:e,n=t.connectHOC,r=void 0===n?E:n,o=t.mapStateToPropsFactories,i=void 0===o?R:o,a=t.mapDispatchToPropsFactories,u=void 0===a?T:a,l=t.mergePropsFactories,s=void 0===l?L:l,c=t.selectorFactory,p=void 0===c?F:c;return function(e,t,n,o){void 0===o&&(o={});var a=o,l=a.pure,c=void 0===l||l,h=a.areStatesEqual,m=void 0===h?D:h,v=a.areOwnPropsEqual,g=void 0===v?k:v,y=a.areStatePropsEqual,b=void 0===y?k:y,w=a.areMergedPropsEqual,_=void 0===w?k:w,S=Object(d.a)(a,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),x=z(e,i,"mapStateToProps"),E=z(t,u,"mapDispatchToProps"),O=z(n,s,"mergeProps");return r(p,Object(f.a)({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:x,initMapDispatchToProps:E,initMergeProps:O,pure:c,areStatesEqual:m,areOwnPropsEqual:g,areStatePropsEqual:b,areMergedPropsEqual:_},S))}}var B=U();function V(){return Object(r.useContext)(i)}function W(e){void 0===e&&(e=i);var t=e===i?V:function(){return Object(r.useContext)(e)};return function(){return t().store}}var H=W();function $(e){void 0===e&&(e=i);var t=e===i?H:W(e);return function(){return t().dispatch}}var q=$(),Q=function(e,t){return e===t};function K(e){void 0===e&&(e=i);var t=e===i?V:function(){return Object(r.useContext)(e)};return function(e,n){void 0===n&&(n=Q);var o=t(),i=function(e,t,n,o){var i,a=Object(r.useReducer)((function(e){return e+1}),0)[1],u=Object(r.useMemo)((function(){return new s(n,o)}),[n,o]),l=Object(r.useRef)(),c=Object(r.useRef)(),f=Object(r.useRef)(),d=Object(r.useRef)(),p=n.getState();try{i=e!==c.current||p!==f.current||l.current?e(p):d.current}catch(e){throw l.current&&(e.message+="\nThe error may be correlated with this previous error:\n"+l.current.stack+"\n\n"),e}return v((function(){c.current=e,f.current=p,d.current=i,l.current=void 0})),v((function(){function e(){try{var e=c.current(n.getState());if(t(e,d.current))return;d.current=e}catch(e){l.current=e}a()}return u.onStateChange=e,u.trySubscribe(),e(),function(){return u.tryUnsubscribe()}}),[n,u]),i}(e,n,o.store,o.subscription);return Object(r.useDebugValue)(i),i}}var Y,X=K(),G=n(14);Y=G.unstable_batchedUpdates,a=Y},function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.repeat=t.range=t.removeLast=t.remove=void 0;t.remove=function(e,t){var n=e.indexOf(t);n>-1&&e.splice(n,1)};t.removeLast=function(e,t){return e.substring(0,e.length-t)};t.range=function(e){return Array.isArray(e)?Array(e[1]-e[0]).fill({}).map((function(t,n){return e[0]+n})):Array(e).fill({}).map((function(e,t){return t}))};t.repeat=function(e,t){return Array(e).fill(t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.translations=void 0,t.translations={shaders:"Shaders",vertexShader:"Vertex Shader",fragmentShader:"Fragment Shader",drawOptions:"Draw options",textures:"Textures",uniforms:"Uniforms",attributeBuffers:"Attribute Buffers",custom:"Custom"}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Dropdown=void 0;var i=o(n(0)),a=n(58);t.Dropdown=i.default.memo((function(e){var t=e.selectedItemId,n=e.onChange,o=e.options,s=a.useDropdownState(o.length,{selectedIndexes:[]},{},(function(e){void 0!==e.selectedIndexes&&n(e.selectedIndexes.length>0?o[e.selectedIndexes[0]].id:null)})),c=s[0],f=s[1],d=o.findIndex((function(e){return e.id===t})),p=d>=0?d:null,h=i.default.useRef(null),m=i.default.useRef(null);a.useDropdownCloseWhenClickedOutside(h,f),a.useFocusOnStateChange(m,c.isOpen,!0);var v=a.useDropdownListKeyboardNavigator(f);return i.default.createElement("div",{ref:h,className:"dropdown-container"},i.default.createElement(u,r({},c,{dispatch:f,showClearButton:!1,itemRenderer:function(){return i.default.createElement("div",null,null!==p?o[p].display:"")}})),c.isOpen&&i.default.createElement("div",{className:"dropdown-list",onKeyDown:v,ref:m,tabIndex:0},i.default.createElement(a.VirtualizedList,{itemCount:o.length,itemHeight:25,highlightedIndex:c.highlightedIndex,maxHeight:200,itemRenderer:function(e){return i.default.createElement(l,{text:o[e].display,index:e,isSelected:p===e,isHighlighted:c.highlightedIndex===e,dispatch:f})}})))}));var u=function(e){var t=e.isOpen,n=e.itemRenderer,r=e.showClearButton,o=void 0===r||r,u=e.dispatch,l=i.default.useRef(null),s=i.default.useCallback((function(){return u([t?"CloseList":"OpenList"])}),[t,u]),c=i.default.useCallback((function(){return u(["ClearSelection"])}),[u]);return a.useFocusOnStateChange(l,t,!1),i.default.createElement("div",{className:"dropdown-main"},i.default.createElement("button",{ref:l,className:"dropdown-select",onClick:s},n(),i.default.createElement("i",{className:"fa "+(t?"fa-caret-up":"fa-caret-down")})),o&&i.default.createElement("button",{className:"dropdown-clear",onClick:c},i.default.createElement("i",{className:"fa fa-times"})))},l=function(e){var t=e.text,n=e.index,r=e.isSelected,o=e.isHighlighted,a=e.dispatch,u="dropdown-list-item "+(r?"selected":"")+"  "+(o?"highlighted":"");return i.default.createElement("div",{key:n,onClick:function(){return a([{type:"SelectIndex",index:n},"CloseList"])},className:u},i.default.createElement("div",{className:"dropdown-list-item-text"},t))}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.SectionField=void 0;var o=r(n(0));t.SectionField=o.default.memo((function(e){return o.default.createElement("div",{className:"viewer-options-section-field"},o.default.createElement("label",null,e.text),e.children)}))},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.SectionTitle=void 0;var o=r(n(0));t.SectionTitle=o.default.memo((function(e){var t;return o.default.createElement("div",{className:"viewer-options-section-title"},o.default.createElement("h3",null,e.text),null!==(t=e.children)&&void 0!==t?t:null)}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.customOption=void 0,t.customOption={id:"custom",display:"Custom"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.assertNever=t.hasProperty=void 0;t.hasProperty=function(e,t){return e.hasOwnProperty(t)};t.assertNever=function(e){throw new Error("Unhandled union member: "+JSON.stringify(e))}},function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||t.hasOwnProperty(n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),o(n(30),t),o(n(61),t),o(n(62),t),o(n(63),t),o(n(64),t),o(n(65),t),o(n(66),t),o(n(67),t),o(n(33),t),o(n(68),t),o(n(34),t)},function(e,t,n){"use strict";var r=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],a=0,u=i.length;a<u;a++,o++)r[o]=i[a];return r};Object.defineProperty(t,"__esModule",{value:!0}),t.UniformInfo=t.UniformType=void 0;var o,i=n(10);!function(e){e[e.FLOAT_VEC2=35664]="FLOAT_VEC2",e[e.FLOAT_VEC3=35665]="FLOAT_VEC3",e[e.FLOAT_VEC4=35666]="FLOAT_VEC4",e[e.FLOAT_MAT4=35676]="FLOAT_MAT4"}(o=t.UniformType||(t.UniformType={}));var a=function(){function e(e,t,n,r){this.context=e,this.name=n,this.type=r,this.value=null,this.attachToProgram(t)}return e.prototype.attachToProgram=function(e){var t=this.context.getUniformLocation(e,this.name);this.setter=u(this.type,this.context,t)},e.prototype.setValue=function(e){this.value=e},e.prototype.prepareForRender=function(){null!==this.value&&this.setter(this.value)},e.prototype.getUniformType=function(){return this.type},e.prototype.getUniformName=function(){return this.name},e.prototype.dispose=function(){},e}();t.UniformInfo=a;var u=function(e,t,n){switch(e){case o.FLOAT_VEC2:return function(e){return t.uniform2f.apply(t,r([n],e))};case o.FLOAT_VEC3:return function(e){return t.uniform3f.apply(t,r([n],e))};case o.FLOAT_VEC4:return function(e){return t.uniform4f.apply(t,r([n],e))};case o.FLOAT_MAT4:return function(e){return t.uniformMatrix4fv(n,!1,e)};default:i.assertNever(e)}}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.MultiNumberInput=void 0;var o=r(n(0)),i=n(4);t.MultiNumberInput=o.default.memo((function(e){var t=e.rows,n=e.columns,r=e.value,a=void 0===r?[]:r,u=e.onChange,l=e.readonly,s=void 0!==l&&l;return o.default.createElement("div",{className:"edit-input-grid"},i.range(t).map((function(e){return o.default.createElement("div",{className:"edit-input-row"},i.range(n).map((function(t){var r=e*n+t;return o.default.createElement("input",{className:"edit-input",type:"number",disabled:s,value:a[r],onChange:function(e){return u(a.map((function(t,n){return n===r?Number(e.target.value):t})))}})})))})))}))},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(42)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AttributeBufferInfo=t.AttributeBufferType=void 0;var r,o=n(10);!function(e){e[e.FLOAT_VEC2=35664]="FLOAT_VEC2",e[e.FLOAT_VEC3=35665]="FLOAT_VEC3",e[e.FLOAT_VEC4=35666]="FLOAT_VEC4"}(r=t.AttributeBufferType||(t.AttributeBufferType={}));var i=function(){function e(e,t,n,r){this.context=e,this.name=n,this.type=r,this.count=0,this.attachToProgram(t),this.buffer=e.createBuffer()}return e.prototype.attachToProgram=function(e){this.location=this.context.getAttribLocation(e,this.name)},e.prototype.setValue=function(e){this.count=e.length,this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffer);var t=[].concat.apply([],e);this.context.bufferData(this.context.ARRAY_BUFFER,new Float32Array(t),this.context.STATIC_DRAW)},e.prototype.setAttributeBuffer=function(){if(null!==this.buffer){this.context.enableVertexAttribArray(this.location),this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffer);var e=a(this.type),t=this.context.FLOAT;this.context.vertexAttribPointer(this.location,e,t,!1,0,0)}},e.prototype.getAttributeBufferType=function(){return this.type},e.prototype.getCount=function(){return this.count},e.prototype.deleteBuffer=function(){this.context.deleteBuffer(this.buffer),this.buffer=null},e}();t.AttributeBufferInfo=i;var a=function(e){switch(e){case r.FLOAT_VEC2:return 2;case r.FLOAT_VEC3:return 3;case r.FLOAT_VEC4:return 4;default:o.assertNever(e)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.viewerEndpoint=void 0;var r=n(4),o=n(53),i=n(26),a=function(){function e(){var e=this;this.eventListeners=[],window.addEventListener("message",(function(t){e.eventListeners.forEach((function(e){return e(t.data)}))}))}return e.prototype.getWorkspaceFilesOfTypes=function(e){var t=this,n=o.uuidv4();return i.vscodeApi.postMessage({type:"getWorkspaceFilesOfTypes",id:n,payload:{extensions:e}}),new Promise((function(e){var r=function(o){"getWorkspaceFilesOfTypes"===o.type&&o.id===n&&(e(o.payload.files),t.removeListener(r))};t.eventListeners.push(r)}))},e.prototype.getDocumentText=function(e){var t=this,n=o.uuidv4();return i.vscodeApi.postMessage({type:"getDocumentText",id:n,payload:{fileName:e}}),new Promise((function(e){var r=function(o){"getDocumentText"===o.type&&o.id===n&&(e(o.payload.text),t.removeListener(r))};t.eventListeners.push(r)}))},e.prototype.getExtensionFileUri=function(e){var t=this,n=o.uuidv4();return i.vscodeApi.postMessage({type:"getExtensionFileUri",id:n,payload:{fileName:e}}),new Promise((function(e){var r=function(o){"getExtensionFileUri"===o.type&&o.id===n&&(e(o.payload.uri),t.removeListener(r))};t.eventListeners.push(r)}))},e.prototype.subscribeToDocumentSave=function(e,t){var n=this;i.vscodeApi.postMessage({type:"subscribeToDocumentTextChange",payload:{fileName:e}});var r=function(n){"onDocumentTextChange"===n.type&&n.payload.filePath===e&&t(n.payload.text)};return this.eventListeners.push(r),function(){n.removeListener(r),i.vscodeApi.postMessage({type:"unsubscribeToDocumentTextChange",payload:{fileName:e}})}},e.prototype.showWebViewDevTools=function(){i.vscodeApi.postMessage({type:"showWebViewDevTools"})},e.prototype.removeListener=function(e){r.remove(this.eventListeners,e)},e}();t.viewerEndpoint=new a},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.createAttributeBufferInfos=t.getAttributeBufferInfo=void 0;var o=n(29),i=n(15),a=function(e){return e.name+";"+e.type},u=new o.CompositeKeyMap(a);t.getAttributeBufferInfo=function(e,t){return u.get({name:e,type:t})};t.createAttributeBufferInfos=function(e,t,n){var o,l,s=n.map((function(n){var o=r({},n),a=u.get(o);if(a)return a.attributeBufferInfo.attachToProgram(t),{key:o,value:a};var l=new i.AttributeBufferInfo(e,t,n.name,n.type);return{key:o,value:{attributeBufferInfo:l,dispose:function(){return l.deleteBuffer()}}}}));return l=(o=s).map((function(e){return a(e.key)})),u.entriesStrKey().filter((function(e){return!l.includes(e[0])})).forEach((function(e){e[1].dispose(),u.deleteStrKey(e[0])})),o.forEach((function(e){u.has(e.key)||u.set(e.key,e.value)})),s.map((function(e){return e.value.attributeBufferInfo}))}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],a=0,u=i.length;a<u;a++,o++)r[o]=i[a];return r};Object.defineProperty(t,"__esModule",{value:!0}),t.clamp=t.areShallowEqual=t.overriddenProps=t.omitKeys=t.overrideDefinedPropsOnly=void 0,t.overrideDefinedPropsOnly=function(e,t){for(var n=r({},e),o=0,i=Object.keys(t);o<i.length;o++){var a=i[o],u=t[a];void 0!==u&&(n[a]=u)}return n},t.omitKeys=function(e,t){return Object.keys(e).filter((function(e){return!t.includes(e)})).reduce((function(t,n){var r;return Object.assign(t,((r={})[n]=e[n],r)),t}),{})},t.overriddenProps=function(e,t){return o(Object.keys(e),Object.keys(t)).reduce((function(n,r){var o=r;return e[o]!==t[o]&&(n[o]=t[o]),n}),{})},t.areShallowEqual=function(e,t){var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0,i=n;o<i.length;o++){var a=i[o];if(e[a]!==t[a])return!1}return!0},t.clamp=function(e,t,n){return e<t?t:e>n?n:e}},function(e,t,n){"use strict";n.r(t),n.d(t,"__DO_NOT_USE__ActionTypes",(function(){return i})),n.d(t,"applyMiddleware",(function(){return v})),n.d(t,"bindActionCreators",(function(){return f})),n.d(t,"combineReducers",(function(){return s})),n.d(t,"compose",(function(){return m})),n.d(t,"createStore",(function(){return u}));var r=n(21),o=function(){return Math.random().toString(36).substring(7).split("").join(".")},i={INIT:"@@redux/INIT"+o(),REPLACE:"@@redux/REPLACE"+o(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+o()}};function a(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function u(e,t,n){var o;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(u)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var l=e,s=t,c=[],f=c,d=!1;function p(){f===c&&(f=c.slice())}function h(){if(d)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return s}function m(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(d)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var t=!0;return p(),f.push(e),function(){if(t){if(d)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");t=!1,p();var n=f.indexOf(e);f.splice(n,1),c=null}}}function v(e){if(!a(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(d)throw new Error("Reducers may not dispatch actions.");try{d=!0,s=l(s,e)}finally{d=!1}for(var t=c=f,n=0;n<t.length;n++){(0,t[n])()}return e}function g(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");l=e,v({type:i.REPLACE})}function y(){var e,t=m;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(h())}return n(),{unsubscribe:t(n)}}})[r.a]=function(){return this},e}return v({type:i.INIT}),(o={dispatch:v,subscribe:m,getState:h,replaceReducer:g})[r.a]=y,o}function l(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function s(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];0,"function"==typeof e[o]&&(n[o]=e[o])}var a,u=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:i.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:i.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+i.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(n)}catch(e){a=e}return function(e,t){if(void 0===e&&(e={}),a)throw a;for(var r=!1,o={},i=0;i<u.length;i++){var s=u[i],c=n[s],f=e[s],d=c(f,t);if(void 0===d){var p=l(s,t);throw new Error(p)}o[s]=d,r=r||d!==f}return(r=r||u.length!==Object.keys(e).length)?o:e}}function c(e,t){return function(){return t(e.apply(this,arguments))}}function f(e,t){if("function"==typeof e)return c(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var n={};for(var r in e){var o=e[r];"function"==typeof o&&(n[r]=c(o,t))}return n}function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){var n=Object.keys(e);return Object.getOwnPropertySymbols&&n.push.apply(n,Object.getOwnPropertySymbols(e)),t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n}function h(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(n,!0).forEach((function(t){d(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function v(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},i=t.map((function(e){return e(o)}));return h({},n,{dispatch:r=m.apply(void 0,i)(n.dispatch)})}}}},function(e,t,n){"use strict";e.exports=n(50)},function(e,t,n){"use strict";(function(e,r){var o,i=n(40);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var a=Object(i.a)(o);t.a=a}).call(this,n(45),n(46)(e))},function(e,t,n){"use strict";var r=n(20),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},u={};function l(e){return r.isMemo(e)?a:u[e.$$typeof]||o}u[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},u[r.Memo]=a;var s=Object.defineProperty,c=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var a=c(n);f&&(a=a.concat(f(n)));for(var u=l(t),m=l(n),v=0;v<a.length;++v){var g=a[v];if(!(i[g]||r&&r[g]||m&&m[g]||u&&u[g])){var y=d(n,g);try{s(t,g,y)}catch(e){}}}}return t}},function(e,t,n){"use strict";var r=this&&this.__rest||function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.store=void 0;var i=o(n(0)),a=o(n(14)),u=n(25),l=n(19),s=n(2),c=n(51),f=n(52),d=n(38),p=n(37);t.store=l.createStore((function(e,t){return c.reducer(e,t)}));var h=d.debounce((function(e){u.setExtensionState(e)}),500);t.store.subscribe((function(){var e=t.store.getState(),n=(e.counter,r(e,["counter"]));h(n),p.setAttributeBuffers(e.attributeBufferValues),p.setUniforms(e.uniformValues),p.setTextures(e.textureValues)})),a.default.render(i.default.createElement(s.Provider,{store:t.store},i.default.createElement(f.Viewer,null)),document.getElementById("viewer"))},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,u,l=a(e),s=1;s<arguments.length;s++){for(var c in n=Object(arguments[s]))o.call(n,c)&&(l[c]=n[c]);if(r){u=r(n);for(var f=0;f<u.length;f++)i.call(n,u[f])&&(l[u[f]]=n[u[f]])}}return l}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.setExtensionState=t.getExtensionState=void 0;var o=n(26),i={vertexFilePath:null,fragmentFilePath:null,uniformValues:{},attributeBufferValues:{},textureValues:{},cameraPosition:{longitude:1,latitude:1,radius:2},viewerSize:{width:0,height:0},drawMode:"elements",meshId:"cube"};t.getExtensionState=function(){return r(r({},i),o.vscodeApi.getState())};t.setExtensionState=function(e){return o.vscodeApi.setState(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.vscodeApi=void 0,t.vscodeApi=acquireVsCodeApi()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getBindingOptions=t.attributeBufferBindings=void 0;var r=n(28),o=n(15),i=function(e,t){return JSON.stringify(r.meshes.get(e)[t])};t.attributeBufferBindings=new Map([["positions",{type:o.AttributeBufferType.FLOAT_VEC4,display:"Binding - Mesh positions",getValue:function(e){return i(e,"positions")}}],["textureCoordinates",{type:o.AttributeBufferType.FLOAT_VEC2,display:"Binding - Mesh texture coords",getValue:function(e){return i(e,"textureCoordinates")}}],["colors",{type:o.AttributeBufferType.FLOAT_VEC4,display:"Binding - Mesh colors",getValue:function(e){return i(e,"colors")}}]]);t.getBindingOptions=function(e){return Array.from(t.attributeBufferBindings.entries()).filter((function(t){t[0];return t[1].type===e})).map((function(e){return{id:e[0],display:e[1].display}}))}},function(e,t,n){"use strict";var r=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],a=0,u=i.length;a<u;a++,o++)r[o]=i[a];return r};Object.defineProperty(t,"__esModule",{value:!0}),t.meshes=t.repeat4Times=void 0;t.repeat4Times=function(e){return[].concat(e,e,e,e)},t.meshes=new Map([["cube",{display:"Cube",positions:[[-.5,-.5,.5,1],[.5,-.5,.5,1],[.5,.5,.5,1],[-.5,.5,.5,1],[-.5,-.5,-.5,1],[-.5,.5,-.5,1],[.5,.5,-.5,1],[.5,-.5,-.5,1],[-.5,.5,-.5,1],[-.5,.5,.5,1],[.5,.5,.5,1],[.5,.5,-.5,1],[-.5,-.5,-.5,1],[.5,-.5,-.5,1],[.5,-.5,.5,1],[-.5,-.5,.5,1],[.5,-.5,-.5,1],[.5,.5,-.5,1],[.5,.5,.5,1],[.5,-.5,.5,1],[-.5,-.5,-.5,1],[-.5,-.5,.5,1],[-.5,.5,.5,1],[-.5,.5,-.5,1]],colors:r(t.repeat4Times([1,1,1,1]),t.repeat4Times([1,0,0,1]),t.repeat4Times([0,1,0,1]),t.repeat4Times([0,0,1,1]),t.repeat4Times([1,1,0,1]),t.repeat4Times([1,0,1,1])),textureCoordinates:[[0,0],[1,0],[1,1],[0,1],[0,0],[1,0],[1,1],[0,1],[0,0],[1,0],[1,1],[0,1],[0,0],[1,0],[1,1],[0,1],[0,0],[1,0],[1,1],[0,1],[0,0],[1,0],[1,1],[0,1]],indices:[0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23]}],["plane",{display:"Plane",positions:[[-.5,-.5,0,1],[.5,-.5,0,1],[.5,.5,0,1],[-.5,.5,0,1]],colors:t.repeat4Times([1,1,1,1]),textureCoordinates:[[0,0],[1,0],[1,1],[0,1]],indices:[0,1,2,0,2,3]}]])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CompositeKeyMap=void 0;var r=function(){function e(e){this.keySelector=e,this.map=new Map}return e.prototype.get=function(e){return this.map.get(this.keySelector(e))},e.prototype.set=function(e,t){this.map.set(this.keySelector(e),t)},e.prototype.has=function(e){return this.map.has(this.keySelector(e))},e.prototype.entriesStrKey=function(){return Array.from(this.map.entries())},e.prototype.deleteStrKey=function(e){this.map.delete(e)},e.prototype.delete=function(e){this.map.delete(this.keySelector(e))},e.prototype.clear=function(){this.map.clear()},e}();t.CompositeKeyMap=r},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],a=0,u=i.length;a<u;a++,o++)r[o]=i[a];return r},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useUnionState=void 0;var a=i(n(0)),u=n(18);t.useUnionState=function(e,t,n,i){var l=a.default.useState(u.omitKeys(e,Object.keys(t))),s=l[0],c=l[1],f=a.default.useRef(s);return[s,a.default.useCallback((function(e){var o=u.overrideDefinedPropsOnly(f.current,t),a=e.reduce((function(e,t){return n(e,t)}),r({},o)),l=u.overriddenProps(o,a),s=u.omitKeys(a,Object.keys(t));u.areShallowEqual(f.current,s)||(f.current=s,c(f.current)),null==i||i(l)}),o(Object.values(t),[n,i]))]}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.reducer=void 0;var o=n(18),i=n(32),a=function(e,t,n){return n>0?o.clamp(e+t,0,n-1):null};t.reducer=function(e,t,n){if("string"==typeof n)switch(n){case"CloseList":return r(r({},e),{isOpen:!1});case"OpenList":return r(r({},e),{isOpen:!0});case"HighlightFirstIndex":return r(r({},e),{highlightedIndex:t>0?0:null});case"HighlightPreviousIndex":return r(r({},e),{highlightedIndex:null!=e.highlightedIndex?a(e.highlightedIndex,-1,t):0});case"HighlightNextIndex":return r(r({},e),{highlightedIndex:null!=e.highlightedIndex?a(e.highlightedIndex,1,t):0});case"HighlightLastIndex":return r(r({},e),{highlightedIndex:t>0?t-1:null});case"SelectHighlightedIndex":return r(r({},e),{selectedIndexes:null!=e.highlightedIndex&&null!=e.highlightedIndex?[e.highlightedIndex]:[]});case"ClearSelection":return r(r({},e),{selectedIndexes:[],highlightedIndex:t>0?0:null});default:return i.assertNever(n)}else switch(n.type){case"SelectIndex":return r(r({},e),{selectedIndexes:[n.index],highlightedIndex:n.index});case"ToggleSelectedIndex":return r(r({},e),{selectedIndexes:e.selectedIndexes.filter((function(e){return e!==n.index})).concat(e.selectedIndexes.includes(n.index)?[]:[n.index]),highlightedIndex:n.index});case"HighlightIndex":return r(r({},e),{highlightedIndex:null===n.index?n.index:o.clamp(n.index,0,t-1)});default:return i.assertNever(n)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.hasProperty=t.assertNever=void 0,t.assertNever=function(e){throw new Error("Unexpected object: "+e)},t.hasProperty=function(e,t){return e.hasOwnProperty(t)}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useFocusOutHandler=void 0;var o=r(n(0));t.useFocusOutHandler=function(e,t){o.default.useEffect((function(){var n;function r(n){var r;(null===(r=e.current)||void 0===r?void 0:r.contains(n.relatedTarget))||t()}return null===(n=e.current)||void 0===n||n.addEventListener("focusout",r),function(){var t;null===(t=e.current)||void 0===t||t.removeEventListener("focusout",r)}}),[t])}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.usePreviousValue=void 0;var o=r(n(0));t.usePreviousValue=function(e){var t=o.default.useRef();return o.default.useEffect((function(){t.current=e})),t.current}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createListKeyboardNavigator=void 0,t.createListKeyboardNavigator=function(e){return function(t){switch(t.key){case" ":break;case"Enter":e(["SelectHighlightedIndex","CloseList"]);break;case"Esc":case"Escape":case"Tab":e(["CloseList"]);break;case"Down":case"ArrowDown":t.preventDefault(),e(["HighlightNextIndex"]);break;case"Up":case"ArrowUp":t.preventDefault(),e(["HighlightPreviousIndex"]);break;case"Home":e(["HighlightFirstIndex"]);break;case"End":e(["HighlightLastIndex"]);break;default:return}}}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.createUniformInfos=t.getUniformInfo=void 0;var o=n(12),i=n(29),a=function(e){return e.name+";"+e.type},u=new i.CompositeKeyMap(a);t.getUniformInfo=function(e,t){return u.get({name:e,type:t})};t.createUniformInfos=function(e,t,n){var i,l,s=n.map((function(n){var i=r({},n),a=u.get(i);return a?(a.uniformInfo.attachToProgram(t),{key:i,value:a}):{key:i,value:{uniformInfo:new o.UniformInfo(e,t,n.name,n.type)}}}));return l=(i=s).map((function(e){return a(e.key)})),u.entriesStrKey().filter((function(e){return!l.includes(e[0])})).forEach((function(e){return u.deleteStrKey(e[0])})),i.forEach((function(e){u.has(e.key)||u.set(e.key,e.value)})),s.map((function(e){return e.value.uniformInfo}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.setTextures=t.setUniforms=t.setAttributeBuffers=t.setWebGLFromState=void 0;var r=n(23),o=n(38),i=n(98),a=n(17),u=n(36);t.setWebGLFromState=function(){var e=r.store.getState();e.attributeBufferValues&&Object.entries(e.attributeBufferValues).forEach((function(e){var t,n,r=e[0],o=e[1];null===(t=a.getAttributeBufferInfo(r,o.type))||void 0===t||t.attributeBufferInfo.setValue(null!==(n=i.safeJSONParse(o.value))&&void 0!==n?n:[])})),e.uniformValues&&Object.entries(e.uniformValues).forEach((function(e){var t,n=e[0],r=e[1];null===(t=u.getUniformInfo(n,r.type))||void 0===t||t.uniformInfo.setValue(r.value)})),e.textureValues&&Object.entries(e.textureValues).forEach((function(e){e[0],e[1]}))};var l=void 0;t.setAttributeBuffers=o.debounce((function(e){l!==e&&l&&e&&Object.entries(e).forEach((function(e){var t,n,r=e[0],o=e[1];l[r]!==o&&(null===(t=a.getAttributeBufferInfo(r,o.type))||void 0===t||t.attributeBufferInfo.setValue(null!==(n=i.safeJSONParse(o.value))&&void 0!==n?n:[]))})),l=e}),100);var s=void 0;t.setUniforms=function(e){s!==e&&s&&e&&Object.entries(e).forEach((function(e){var t,n=e[0],r=e[1];s[n]!==r&&(null===(t=u.getUniformInfo(n,r.type))||void 0===t||t.uniformInfo.setValue(r.value))})),s=e};var c=void 0;t.setTextures=function(e){c!==e&&c&&e&&Object.entries(e).forEach((function(e){var t=e[0];e[1];c[t]})),c=e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.debounce=void 0,t.debounce=function(e,t){void 0===t&&(t=500);var n=0;return function(){for(var r=[],o=0;o<arguments.length;o++)r[o]=arguments[o];null!==n&&clearTimeout(n),n=setTimeout((function(){return e.apply(void 0,r)}),t)}}},function(e,t,n){"use strict";n.r(t),n.d(t,"VariableSizeGrid",(function(){return C})),n.d(t,"VariableSizeList",(function(){return j})),n.d(t,"FixedSizeGrid",(function(){return A})),n.d(t,"FixedSizeList",(function(){return F})),n.d(t,"areEqual",(function(){return D})),n.d(t,"shouldComponentUpdate",(function(){return U}));var r=n(1);function o(e,t){return(o=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function i(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,o(e,t)}function a(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function u(e,t){if(e.length!==t.length)return!1;for(var n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}var l=function(e,t){var n;void 0===t&&(t=u);var r,o=[],i=!1;return function(){for(var a=[],u=0;u<arguments.length;u++)a[u]=arguments[u];return i&&n===this&&t(a,o)||(r=e.apply(this,a),i=!0,n=this,o=a),r}},s=n(0),c=n(3),f="object"==typeof performance&&"function"==typeof performance.now?function(){return performance.now()}:function(){return Date.now()};function d(e){cancelAnimationFrame(e.id)}function p(e,t){var n=f();var r={id:requestAnimationFrame((function o(){f()-n>=t?e.call(null):r.id=requestAnimationFrame(o)}))};return r}var h=-1;var m=null;function v(e){if(void 0===e&&(e=!1),null===m||e){var t=document.createElement("div"),n=t.style;n.width="50px",n.height="50px",n.overflow="scroll",n.direction="rtl";var r=document.createElement("div"),o=r.style;return o.width="100px",o.height="100px",t.appendChild(r),document.body.appendChild(t),t.scrollLeft>0?m="positive-descending":(t.scrollLeft=1,m=0===t.scrollLeft?"negative":"positive-ascending"),document.body.removeChild(t),m}return m}var g=function(e){var t=e.columnIndex;e.data;return e.rowIndex+":"+t};function y(e){var t,n,o=e.getColumnOffset,u=e.getColumnStartIndexForOffset,c=e.getColumnStopIndexForStartIndex,f=e.getColumnWidth,m=e.getEstimatedTotalHeight,y=e.getEstimatedTotalWidth,w=e.getOffsetForColumnAndAlignment,_=e.getOffsetForRowAndAlignment,S=e.getRowHeight,x=e.getRowOffset,E=e.getRowStartIndexForOffset,O=e.getRowStopIndexForStartIndex,k=e.initInstanceProps,C=e.shouldResetStyleCacheOnItemSizeChange,P=e.validateProps;return n=t=function(e){function t(t){var n;return(n=e.call(this,t)||this)._instanceProps=k(n.props,a(a(n))),n._resetIsScrollingTimeoutId=null,n._outerRef=void 0,n.state={instance:a(a(n)),isScrolling:!1,horizontalScrollDirection:"forward",scrollLeft:"number"==typeof n.props.initialScrollLeft?n.props.initialScrollLeft:0,scrollTop:"number"==typeof n.props.initialScrollTop?n.props.initialScrollTop:0,scrollUpdateWasRequested:!1,verticalScrollDirection:"forward"},n._callOnItemsRendered=void 0,n._callOnItemsRendered=l((function(e,t,r,o,i,a,u,l){return n.props.onItemsRendered({overscanColumnStartIndex:e,overscanColumnStopIndex:t,overscanRowStartIndex:r,overscanRowStopIndex:o,visibleColumnStartIndex:i,visibleColumnStopIndex:a,visibleRowStartIndex:u,visibleRowStopIndex:l})})),n._callOnScroll=void 0,n._callOnScroll=l((function(e,t,r,o,i){return n.props.onScroll({horizontalScrollDirection:r,scrollLeft:e,scrollTop:t,verticalScrollDirection:o,scrollUpdateWasRequested:i})})),n._getItemStyle=void 0,n._getItemStyle=function(e,t){var r,i=n.props,a=i.columnWidth,u=i.direction,l=i.rowHeight,s=n._getItemStyleCache(C&&a,C&&u,C&&l),c=e+":"+t;if(s.hasOwnProperty(c))r=s[c];else{var d=o(n.props,t,n._instanceProps),p="rtl"===u;s[c]=r={position:"absolute",left:p?void 0:d,right:p?d:void 0,top:x(n.props,e,n._instanceProps),height:S(n.props,e,n._instanceProps),width:f(n.props,t,n._instanceProps)}}return r},n._getItemStyleCache=void 0,n._getItemStyleCache=l((function(e,t,n){return{}})),n._onScroll=function(e){var t=e.currentTarget,r=t.clientHeight,o=t.clientWidth,i=t.scrollLeft,a=t.scrollTop,u=t.scrollHeight,l=t.scrollWidth;n.setState((function(e){if(e.scrollLeft===i&&e.scrollTop===a)return null;var t=n.props.direction,s=i;if("rtl"===t)switch(v()){case"negative":s=-i;break;case"positive-descending":s=l-o-i}s=Math.max(0,Math.min(s,l-o));var c=Math.max(0,Math.min(a,u-r));return{isScrolling:!0,horizontalScrollDirection:e.scrollLeft<i?"forward":"backward",scrollLeft:s,scrollTop:c,verticalScrollDirection:e.scrollTop<a?"forward":"backward",scrollUpdateWasRequested:!1}}),n._resetIsScrollingDebounced)},n._outerRefSetter=function(e){var t=n.props.outerRef;n._outerRef=e,"function"==typeof t?t(e):null!=t&&"object"==typeof t&&t.hasOwnProperty("current")&&(t.current=e)},n._resetIsScrollingDebounced=function(){null!==n._resetIsScrollingTimeoutId&&d(n._resetIsScrollingTimeoutId),n._resetIsScrollingTimeoutId=p(n._resetIsScrolling,150)},n._resetIsScrolling=function(){n._resetIsScrollingTimeoutId=null,n.setState({isScrolling:!1},(function(){n._getItemStyleCache(-1)}))},n}i(t,e),t.getDerivedStateFromProps=function(e,t){return b(e,t),P(e),null};var n=t.prototype;return n.scrollTo=function(e){var t=e.scrollLeft,n=e.scrollTop;void 0!==t&&(t=Math.max(0,t)),void 0!==n&&(n=Math.max(0,n)),this.setState((function(e){return void 0===t&&(t=e.scrollLeft),void 0===n&&(n=e.scrollTop),e.scrollLeft===t&&e.scrollTop===n?null:{horizontalScrollDirection:e.scrollLeft<t?"forward":"backward",scrollLeft:t,scrollTop:n,scrollUpdateWasRequested:!0,verticalScrollDirection:e.scrollTop<n?"forward":"backward"}}),this._resetIsScrollingDebounced)},n.scrollToItem=function(e){var t=e.align,n=void 0===t?"auto":t,r=e.columnIndex,o=e.rowIndex,i=this.props,a=i.columnCount,u=i.height,l=i.rowCount,s=i.width,c=this.state,f=c.scrollLeft,d=c.scrollTop,p=function(e){if(void 0===e&&(e=!1),-1===h||e){var t=document.createElement("div"),n=t.style;n.width="50px",n.height="50px",n.overflow="scroll",document.body.appendChild(t),h=t.offsetWidth-t.clientWidth,document.body.removeChild(t)}return h}();void 0!==r&&(r=Math.max(0,Math.min(r,a-1))),void 0!==o&&(o=Math.max(0,Math.min(o,l-1)));var v=m(this.props,this._instanceProps),g=y(this.props,this._instanceProps)>s?p:0,b=v>u?p:0;this.scrollTo({scrollLeft:void 0!==r?w(this.props,r,n,f,this._instanceProps,b):f,scrollTop:void 0!==o?_(this.props,o,n,d,this._instanceProps,g):d})},n.componentDidMount=function(){var e=this.props,t=e.initialScrollLeft,n=e.initialScrollTop;if(null!=this._outerRef){var r=this._outerRef;"number"==typeof t&&(r.scrollLeft=t),"number"==typeof n&&(r.scrollTop=n)}this._callPropsCallbacks()},n.componentDidUpdate=function(){var e=this.props.direction,t=this.state,n=t.scrollLeft,r=t.scrollTop;if(t.scrollUpdateWasRequested&&null!=this._outerRef){var o=this._outerRef;if("rtl"===e)switch(v()){case"negative":o.scrollLeft=-n;break;case"positive-ascending":o.scrollLeft=n;break;default:var i=o.clientWidth,a=o.scrollWidth;o.scrollLeft=a-i-n}else o.scrollLeft=Math.max(0,n);o.scrollTop=Math.max(0,r)}this._callPropsCallbacks()},n.componentWillUnmount=function(){null!==this._resetIsScrollingTimeoutId&&d(this._resetIsScrollingTimeoutId)},n.render=function(){var e=this.props,t=e.children,n=e.className,o=e.columnCount,i=e.direction,a=e.height,u=e.innerRef,l=e.innerElementType,c=e.innerTagName,f=e.itemData,d=e.itemKey,p=void 0===d?g:d,h=e.outerElementType,v=e.outerTagName,b=e.rowCount,w=e.style,_=e.useIsScrolling,S=e.width,x=this.state.isScrolling,E=this._getHorizontalRangeToRender(),O=E[0],k=E[1],C=this._getVerticalRangeToRender(),P=C[0],I=C[1],M=[];if(o>0&&b)for(var T=P;T<=I;T++)for(var R=O;R<=k;R++)M.push(Object(s.createElement)(t,{columnIndex:R,data:f,isScrolling:_?x:void 0,key:p({columnIndex:R,data:f,rowIndex:T}),rowIndex:T,style:this._getItemStyle(T,R)}));var N=m(this.props,this._instanceProps),L=y(this.props,this._instanceProps);return Object(s.createElement)(h||v||"div",{className:n,onScroll:this._onScroll,ref:this._outerRefSetter,style:Object(r.a)({position:"relative",height:a,width:S,overflow:"auto",WebkitOverflowScrolling:"touch",willChange:"transform",direction:i},w)},Object(s.createElement)(l||c||"div",{children:M,ref:u,style:{height:N,pointerEvents:x?"none":void 0,width:L}}))},n._callPropsCallbacks=function(){var e=this.props,t=e.columnCount,n=e.onItemsRendered,r=e.onScroll,o=e.rowCount;if("function"==typeof n&&t>0&&o>0){var i=this._getHorizontalRangeToRender(),a=i[0],u=i[1],l=i[2],s=i[3],c=this._getVerticalRangeToRender(),f=c[0],d=c[1],p=c[2],h=c[3];this._callOnItemsRendered(a,u,f,d,l,s,p,h)}if("function"==typeof r){var m=this.state,v=m.horizontalScrollDirection,g=m.scrollLeft,y=m.scrollTop,b=m.scrollUpdateWasRequested,w=m.verticalScrollDirection;this._callOnScroll(g,y,v,w,b)}},n._getHorizontalRangeToRender=function(){var e=this.props,t=e.columnCount,n=e.overscanColumnCount,r=e.overscanColumnsCount,o=e.overscanCount,i=e.rowCount,a=this.state,l=a.horizontalScrollDirection,s=a.isScrolling,f=a.scrollLeft,d=n||r||o||1;if(0===t||0===i)return[0,0,0,0];var p=u(this.props,f,this._instanceProps),h=c(this.props,p,f,this._instanceProps),m=s&&"backward"!==l?1:Math.max(1,d),v=s&&"forward"!==l?1:Math.max(1,d);return[Math.max(0,p-m),Math.max(0,Math.min(t-1,h+v)),p,h]},n._getVerticalRangeToRender=function(){var e=this.props,t=e.columnCount,n=e.overscanCount,r=e.overscanRowCount,o=e.overscanRowsCount,i=e.rowCount,a=this.state,u=a.isScrolling,l=a.verticalScrollDirection,s=a.scrollTop,c=r||o||n||1;if(0===t||0===i)return[0,0,0,0];var f=E(this.props,s,this._instanceProps),d=O(this.props,f,s,this._instanceProps),p=u&&"backward"!==l?1:Math.max(1,c),h=u&&"forward"!==l?1:Math.max(1,c);return[Math.max(0,f-p),Math.max(0,Math.min(i-1,d+h)),f,d]},t}(s.PureComponent),t.defaultProps={direction:"ltr",itemData:void 0,useIsScrolling:!1},n}var b=function(e,t){e.children,e.direction,e.height,e.innerTagName,e.outerTagName,e.overscanColumnsCount,e.overscanCount,e.overscanRowsCount,e.width,t.instance},w=function(e,t){var n=e.rowCount,r=t.rowMetadataMap,o=t.estimatedRowHeight,i=t.lastMeasuredRowIndex,a=0;if(i>=n&&(i=n-1),i>=0){var u=r[i];a=u.offset+u.size}return a+(n-i-1)*o},_=function(e,t){var n=e.columnCount,r=t.columnMetadataMap,o=t.estimatedColumnWidth,i=t.lastMeasuredColumnIndex,a=0;if(i>=n&&(i=n-1),i>=0){var u=r[i];a=u.offset+u.size}return a+(n-i-1)*o},S=function(e,t,n,r){var o,i,a;if("column"===e?(o=r.columnMetadataMap,i=t.columnWidth,a=r.lastMeasuredColumnIndex):(o=r.rowMetadataMap,i=t.rowHeight,a=r.lastMeasuredRowIndex),n>a){var u=0;if(a>=0){var l=o[a];u=l.offset+l.size}for(var s=a+1;s<=n;s++){var c=i(s);o[s]={offset:u,size:c},u+=c}"column"===e?r.lastMeasuredColumnIndex=n:r.lastMeasuredRowIndex=n}return o[n]},x=function(e,t,n,r){var o,i;return"column"===e?(o=n.columnMetadataMap,i=n.lastMeasuredColumnIndex):(o=n.rowMetadataMap,i=n.lastMeasuredRowIndex),(i>0?o[i].offset:0)>=r?E(e,t,n,i,0,r):O(e,t,n,Math.max(0,i),r)},E=function(e,t,n,r,o,i){for(;o<=r;){var a=o+Math.floor((r-o)/2),u=S(e,t,a,n).offset;if(u===i)return a;u<i?o=a+1:u>i&&(r=a-1)}return o>0?o-1:0},O=function(e,t,n,r,o){for(var i="column"===e?t.columnCount:t.rowCount,a=1;r<i&&S(e,t,r,n).offset<o;)r+=a,a*=2;return E(e,t,n,Math.min(r,i-1),Math.floor(r/2),o)},k=function(e,t,n,r,o,i,a){var u="column"===e?t.width:t.height,l=S(e,t,n,i),s="column"===e?_(t,i):w(t,i),c=Math.max(0,Math.min(s-u,l.offset)),f=Math.max(0,l.offset-u+a+l.size);switch("smart"===r&&(r=o>=f-u&&o<=c+u?"auto":"center"),r){case"start":return c;case"end":return f;case"center":return Math.round(f+(c-f)/2);case"auto":default:return o>=f&&o<=c?o:f>c||o<f?f:c}},C=y({getColumnOffset:function(e,t,n){return S("column",e,t,n).offset},getColumnStartIndexForOffset:function(e,t,n){return x("column",e,n,t)},getColumnStopIndexForStartIndex:function(e,t,n,r){for(var o=e.columnCount,i=e.width,a=S("column",e,t,r),u=n+i,l=a.offset+a.size,s=t;s<o-1&&l<u;)s++,l+=S("column",e,s,r).size;return s},getColumnWidth:function(e,t,n){return n.columnMetadataMap[t].size},getEstimatedTotalHeight:w,getEstimatedTotalWidth:_,getOffsetForColumnAndAlignment:function(e,t,n,r,o,i){return k("column",e,t,n,r,o,i)},getOffsetForRowAndAlignment:function(e,t,n,r,o,i){return k("row",e,t,n,r,o,i)},getRowOffset:function(e,t,n){return S("row",e,t,n).offset},getRowHeight:function(e,t,n){return n.rowMetadataMap[t].size},getRowStartIndexForOffset:function(e,t,n){return x("row",e,n,t)},getRowStopIndexForStartIndex:function(e,t,n,r){for(var o=e.rowCount,i=e.height,a=S("row",e,t,r),u=n+i,l=a.offset+a.size,s=t;s<o-1&&l<u;)s++,l+=S("row",e,s,r).size;return s},initInstanceProps:function(e,t){var n=e,r={columnMetadataMap:{},estimatedColumnWidth:n.estimatedColumnWidth||50,estimatedRowHeight:n.estimatedRowHeight||50,lastMeasuredColumnIndex:-1,lastMeasuredRowIndex:-1,rowMetadataMap:{}};return t.resetAfterColumnIndex=function(e,n){void 0===n&&(n=!0),t.resetAfterIndices({columnIndex:e,shouldForceUpdate:n})},t.resetAfterRowIndex=function(e,n){void 0===n&&(n=!0),t.resetAfterIndices({rowIndex:e,shouldForceUpdate:n})},t.resetAfterIndices=function(e){var n=e.columnIndex,o=e.rowIndex,i=e.shouldForceUpdate,a=void 0===i||i;"number"==typeof n&&(r.lastMeasuredColumnIndex=Math.min(r.lastMeasuredColumnIndex,n-1)),"number"==typeof o&&(r.lastMeasuredRowIndex=Math.min(r.lastMeasuredRowIndex,o-1)),t._getItemStyleCache(-1),a&&t.forceUpdate()},r},shouldResetStyleCacheOnItemSizeChange:!1,validateProps:function(e){e.columnWidth,e.rowHeight}}),P=function(e,t){return e};function I(e){var t,n,o=e.getItemOffset,u=e.getEstimatedTotalSize,c=e.getItemSize,f=e.getOffsetForIndexAndAlignment,h=e.getStartIndexForOffset,m=e.getStopIndexForStartIndex,g=e.initInstanceProps,y=e.shouldResetStyleCacheOnItemSizeChange,b=e.validateProps;return n=t=function(e){function t(t){var n;return(n=e.call(this,t)||this)._instanceProps=g(n.props,a(a(n))),n._outerRef=void 0,n._resetIsScrollingTimeoutId=null,n.state={instance:a(a(n)),isScrolling:!1,scrollDirection:"forward",scrollOffset:"number"==typeof n.props.initialScrollOffset?n.props.initialScrollOffset:0,scrollUpdateWasRequested:!1},n._callOnItemsRendered=void 0,n._callOnItemsRendered=l((function(e,t,r,o){return n.props.onItemsRendered({overscanStartIndex:e,overscanStopIndex:t,visibleStartIndex:r,visibleStopIndex:o})})),n._callOnScroll=void 0,n._callOnScroll=l((function(e,t,r){return n.props.onScroll({scrollDirection:e,scrollOffset:t,scrollUpdateWasRequested:r})})),n._getItemStyle=void 0,n._getItemStyle=function(e){var t,r=n.props,i=r.direction,a=r.itemSize,u=r.layout,l=n._getItemStyleCache(y&&a,y&&u,y&&i);if(l.hasOwnProperty(e))t=l[e];else{var s=o(n.props,e,n._instanceProps),f=c(n.props,e,n._instanceProps),d="horizontal"===i||"horizontal"===u,p="rtl"===i,h=d?s:0;l[e]=t={position:"absolute",left:p?void 0:h,right:p?h:void 0,top:d?0:s,height:d?"100%":f,width:d?f:"100%"}}return t},n._getItemStyleCache=void 0,n._getItemStyleCache=l((function(e,t,n){return{}})),n._onScrollHorizontal=function(e){var t=e.currentTarget,r=t.clientWidth,o=t.scrollLeft,i=t.scrollWidth;n.setState((function(e){if(e.scrollOffset===o)return null;var t=n.props.direction,a=o;if("rtl"===t)switch(v()){case"negative":a=-o;break;case"positive-descending":a=i-r-o}return a=Math.max(0,Math.min(a,i-r)),{isScrolling:!0,scrollDirection:e.scrollOffset<o?"forward":"backward",scrollOffset:a,scrollUpdateWasRequested:!1}}),n._resetIsScrollingDebounced)},n._onScrollVertical=function(e){var t=e.currentTarget,r=t.clientHeight,o=t.scrollHeight,i=t.scrollTop;n.setState((function(e){if(e.scrollOffset===i)return null;var t=Math.max(0,Math.min(i,o-r));return{isScrolling:!0,scrollDirection:e.scrollOffset<t?"forward":"backward",scrollOffset:t,scrollUpdateWasRequested:!1}}),n._resetIsScrollingDebounced)},n._outerRefSetter=function(e){var t=n.props.outerRef;n._outerRef=e,"function"==typeof t?t(e):null!=t&&"object"==typeof t&&t.hasOwnProperty("current")&&(t.current=e)},n._resetIsScrollingDebounced=function(){null!==n._resetIsScrollingTimeoutId&&d(n._resetIsScrollingTimeoutId),n._resetIsScrollingTimeoutId=p(n._resetIsScrolling,150)},n._resetIsScrolling=function(){n._resetIsScrollingTimeoutId=null,n.setState({isScrolling:!1},(function(){n._getItemStyleCache(-1,null)}))},n}i(t,e),t.getDerivedStateFromProps=function(e,t){return M(e,t),b(e),null};var n=t.prototype;return n.scrollTo=function(e){e=Math.max(0,e),this.setState((function(t){return t.scrollOffset===e?null:{scrollDirection:t.scrollOffset<e?"forward":"backward",scrollOffset:e,scrollUpdateWasRequested:!0}}),this._resetIsScrollingDebounced)},n.scrollToItem=function(e,t){void 0===t&&(t="auto");var n=this.props.itemCount,r=this.state.scrollOffset;e=Math.max(0,Math.min(e,n-1)),this.scrollTo(f(this.props,e,t,r,this._instanceProps))},n.componentDidMount=function(){var e=this.props,t=e.direction,n=e.initialScrollOffset,r=e.layout;if("number"==typeof n&&null!=this._outerRef){var o=this._outerRef;"horizontal"===t||"horizontal"===r?o.scrollLeft=n:o.scrollTop=n}this._callPropsCallbacks()},n.componentDidUpdate=function(){var e=this.props,t=e.direction,n=e.layout,r=this.state,o=r.scrollOffset;if(r.scrollUpdateWasRequested&&null!=this._outerRef){var i=this._outerRef;if("horizontal"===t||"horizontal"===n)if("rtl"===t)switch(v()){case"negative":i.scrollLeft=-o;break;case"positive-ascending":i.scrollLeft=o;break;default:var a=i.clientWidth,u=i.scrollWidth;i.scrollLeft=u-a-o}else i.scrollLeft=o;else i.scrollTop=o}this._callPropsCallbacks()},n.componentWillUnmount=function(){null!==this._resetIsScrollingTimeoutId&&d(this._resetIsScrollingTimeoutId)},n.render=function(){var e=this.props,t=e.children,n=e.className,o=e.direction,i=e.height,a=e.innerRef,l=e.innerElementType,c=e.innerTagName,f=e.itemCount,d=e.itemData,p=e.itemKey,h=void 0===p?P:p,m=e.layout,v=e.outerElementType,g=e.outerTagName,y=e.style,b=e.useIsScrolling,w=e.width,_=this.state.isScrolling,S="horizontal"===o||"horizontal"===m,x=S?this._onScrollHorizontal:this._onScrollVertical,E=this._getRangeToRender(),O=E[0],k=E[1],C=[];if(f>0)for(var I=O;I<=k;I++)C.push(Object(s.createElement)(t,{data:d,key:h(I,d),index:I,isScrolling:b?_:void 0,style:this._getItemStyle(I)}));var M=u(this.props,this._instanceProps);return Object(s.createElement)(v||g||"div",{className:n,onScroll:x,ref:this._outerRefSetter,style:Object(r.a)({position:"relative",height:i,width:w,overflow:"auto",WebkitOverflowScrolling:"touch",willChange:"transform",direction:o},y)},Object(s.createElement)(l||c||"div",{children:C,ref:a,style:{height:S?"100%":M,pointerEvents:_?"none":void 0,width:S?M:"100%"}}))},n._callPropsCallbacks=function(){if("function"==typeof this.props.onItemsRendered&&this.props.itemCount>0){var e=this._getRangeToRender(),t=e[0],n=e[1],r=e[2],o=e[3];this._callOnItemsRendered(t,n,r,o)}if("function"==typeof this.props.onScroll){var i=this.state,a=i.scrollDirection,u=i.scrollOffset,l=i.scrollUpdateWasRequested;this._callOnScroll(a,u,l)}},n._getRangeToRender=function(){var e=this.props,t=e.itemCount,n=e.overscanCount,r=this.state,o=r.isScrolling,i=r.scrollDirection,a=r.scrollOffset;if(0===t)return[0,0,0,0];var u=h(this.props,a,this._instanceProps),l=m(this.props,u,a,this._instanceProps),s=o&&"backward"!==i?1:Math.max(1,n),c=o&&"forward"!==i?1:Math.max(1,n);return[Math.max(0,u-s),Math.max(0,Math.min(t-1,l+c)),u,l]},t}(s.PureComponent),t.defaultProps={direction:"ltr",itemData:void 0,layout:"vertical",overscanCount:2,useIsScrolling:!1},n}var M=function(e,t){e.children,e.direction,e.height,e.layout,e.innerTagName,e.outerTagName,e.width,t.instance},T=function(e,t,n){var r=e.itemSize,o=n.itemMetadataMap,i=n.lastMeasuredIndex;if(t>i){var a=0;if(i>=0){var u=o[i];a=u.offset+u.size}for(var l=i+1;l<=t;l++){var s=r(l);o[l]={offset:a,size:s},a+=s}n.lastMeasuredIndex=t}return o[t]},R=function(e,t,n,r,o){for(;r<=n;){var i=r+Math.floor((n-r)/2),a=T(e,i,t).offset;if(a===o)return i;a<o?r=i+1:a>o&&(n=i-1)}return r>0?r-1:0},N=function(e,t,n,r){for(var o=e.itemCount,i=1;n<o&&T(e,n,t).offset<r;)n+=i,i*=2;return R(e,t,Math.min(n,o-1),Math.floor(n/2),r)},L=function(e,t){var n=e.itemCount,r=t.itemMetadataMap,o=t.estimatedItemSize,i=t.lastMeasuredIndex,a=0;if(i>=n&&(i=n-1),i>=0){var u=r[i];a=u.offset+u.size}return a+(n-i-1)*o},j=I({getItemOffset:function(e,t,n){return T(e,t,n).offset},getItemSize:function(e,t,n){return n.itemMetadataMap[t].size},getEstimatedTotalSize:L,getOffsetForIndexAndAlignment:function(e,t,n,r,o){var i=e.direction,a=e.height,u=e.layout,l=e.width,s="horizontal"===i||"horizontal"===u?l:a,c=T(e,t,o),f=L(e,o),d=Math.max(0,Math.min(f-s,c.offset)),p=Math.max(0,c.offset-s+c.size);switch("smart"===n&&(n=r>=p-s&&r<=d+s?"auto":"center"),n){case"start":return d;case"end":return p;case"center":return Math.round(p+(d-p)/2);case"auto":default:return r>=p&&r<=d?r:r<p?p:d}},getStartIndexForOffset:function(e,t,n){return function(e,t,n){var r=t.itemMetadataMap,o=t.lastMeasuredIndex;return(o>0?r[o].offset:0)>=n?R(e,t,o,0,n):N(e,t,Math.max(0,o),n)}(e,n,t)},getStopIndexForStartIndex:function(e,t,n,r){for(var o=e.direction,i=e.height,a=e.itemCount,u=e.layout,l=e.width,s="horizontal"===o||"horizontal"===u?l:i,c=T(e,t,r),f=n+s,d=c.offset+c.size,p=t;p<a-1&&d<f;)p++,d+=T(e,p,r).size;return p},initInstanceProps:function(e,t){var n={itemMetadataMap:{},estimatedItemSize:e.estimatedItemSize||50,lastMeasuredIndex:-1};return t.resetAfterIndex=function(e,r){void 0===r&&(r=!0),n.lastMeasuredIndex=Math.min(n.lastMeasuredIndex,e-1),t._getItemStyleCache(-1),r&&t.forceUpdate()},n},shouldResetStyleCacheOnItemSizeChange:!1,validateProps:function(e){e.itemSize}}),A=y({getColumnOffset:function(e,t){return t*e.columnWidth},getColumnWidth:function(e,t){return e.columnWidth},getRowOffset:function(e,t){return t*e.rowHeight},getRowHeight:function(e,t){return e.rowHeight},getEstimatedTotalHeight:function(e){var t=e.rowCount;return e.rowHeight*t},getEstimatedTotalWidth:function(e){var t=e.columnCount;return e.columnWidth*t},getOffsetForColumnAndAlignment:function(e,t,n,r,o,i){var a=e.columnCount,u=e.columnWidth,l=e.width,s=Math.max(0,a*u-l),c=Math.min(s,t*u),f=Math.max(0,t*u-l+i+u);switch("smart"===n&&(n=r>=f-l&&r<=c+l?"auto":"center"),n){case"start":return c;case"end":return f;case"center":var d=Math.round(f+(c-f)/2);return d<Math.ceil(l/2)?0:d>s+Math.floor(l/2)?s:d;case"auto":default:return r>=f&&r<=c?r:f>c||r<f?f:c}},getOffsetForRowAndAlignment:function(e,t,n,r,o,i){var a=e.rowHeight,u=e.height,l=e.rowCount,s=Math.max(0,l*a-u),c=Math.min(s,t*a),f=Math.max(0,t*a-u+i+a);switch("smart"===n&&(n=r>=f-u&&r<=c+u?"auto":"center"),n){case"start":return c;case"end":return f;case"center":var d=Math.round(f+(c-f)/2);return d<Math.ceil(u/2)?0:d>s+Math.floor(u/2)?s:d;case"auto":default:return r>=f&&r<=c?r:f>c||r<f?f:c}},getColumnStartIndexForOffset:function(e,t){var n=e.columnWidth,r=e.columnCount;return Math.max(0,Math.min(r-1,Math.floor(t/n)))},getColumnStopIndexForStartIndex:function(e,t,n){var r=e.columnWidth,o=e.columnCount,i=e.width,a=t*r,u=Math.ceil((i+n-a)/r);return Math.max(0,Math.min(o-1,t+u-1))},getRowStartIndexForOffset:function(e,t){var n=e.rowHeight,r=e.rowCount;return Math.max(0,Math.min(r-1,Math.floor(t/n)))},getRowStopIndexForStartIndex:function(e,t,n){var r=e.rowHeight,o=e.rowCount,i=e.height,a=t*r,u=Math.ceil((i+n-a)/r);return Math.max(0,Math.min(o-1,t+u-1))},initInstanceProps:function(e){},shouldResetStyleCacheOnItemSizeChange:!0,validateProps:function(e){e.columnWidth,e.rowHeight}}),F=I({getItemOffset:function(e,t){return t*e.itemSize},getItemSize:function(e,t){return e.itemSize},getEstimatedTotalSize:function(e){var t=e.itemCount;return e.itemSize*t},getOffsetForIndexAndAlignment:function(e,t,n,r){var o=e.direction,i=e.height,a=e.itemCount,u=e.itemSize,l=e.layout,s=e.width,c="horizontal"===o||"horizontal"===l?s:i,f=Math.max(0,a*u-c),d=Math.min(f,t*u),p=Math.max(0,t*u-c+u);switch("smart"===n&&(n=r>=p-c&&r<=d+c?"auto":"center"),n){case"start":return d;case"end":return p;case"center":var h=Math.round(p+(d-p)/2);return h<Math.ceil(c/2)?0:h>f+Math.floor(c/2)?f:h;case"auto":default:return r>=p&&r<=d?r:r<p?p:d}},getStartIndexForOffset:function(e,t){var n=e.itemCount,r=e.itemSize;return Math.max(0,Math.min(n-1,Math.floor(t/r)))},getStopIndexForStartIndex:function(e,t,n){var r=e.direction,o=e.height,i=e.itemCount,a=e.itemSize,u=e.layout,l=e.width,s=t*a,c="horizontal"===r||"horizontal"===u?l:o,f=Math.ceil((c+n-s)/a);return Math.max(0,Math.min(i-1,t+f-1))},initInstanceProps:function(e){},shouldResetStyleCacheOnItemSizeChange:!0,validateProps:function(e){e.itemSize}});function z(e,t){for(var n in e)if(!(n in t))return!0;for(var r in t)if(e[r]!==t[r])return!0;return!1}function D(e,t){var n=e.style,r=Object(c.a)(e,["style"]),o=t.style,i=Object(c.a)(t,["style"]);return!z(n,o)&&!z(r,i)}function U(e,t){return!D(this.props,e)||z(this.state,t)}},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";
/** @license React v17.0.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(24),o=60103,i=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var a=60109,u=60110,l=60112;t.Suspense=60113;var s=60115,c=60116;if("function"==typeof Symbol&&Symbol.for){var f=Symbol.for;o=f("react.element"),i=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),a=f("react.provider"),u=f("react.context"),l=f("react.forward_ref"),t.Suspense=f("react.suspense"),s=f("react.memo"),c=f("react.lazy")}var d="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m={};function v(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}function g(){}function y(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=v.prototype;var b=y.prototype=new g;b.constructor=y,r(b,v.prototype),b.isPureReactComponent=!0;var w={current:null},_=Object.prototype.hasOwnProperty,S={key:!0,ref:!0,__self:!0,__source:!0};function x(e,t,n){var r,i={},a=null,u=null;if(null!=t)for(r in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(a=""+t.key),t)_.call(t,r)&&!S.hasOwnProperty(r)&&(i[r]=t[r]);var l=arguments.length-2;if(1===l)i.children=n;else if(1<l){for(var s=Array(l),c=0;c<l;c++)s[c]=arguments[c+2];i.children=s}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===i[r]&&(i[r]=l[r]);return{$$typeof:o,type:e,key:a,ref:u,props:i,_owner:w.current}}function E(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var O=/\/+/g;function k(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function C(e,t,n,r,a){var u=typeof e;"undefined"!==u&&"boolean"!==u||(e=null);var l=!1;if(null===e)l=!0;else switch(u){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case o:case i:l=!0}}if(l)return a=a(l=e),e=""===r?"."+k(l,0):r,Array.isArray(a)?(n="",null!=e&&(n=e.replace(O,"$&/")+"/"),C(a,t,n,"",(function(e){return e}))):null!=a&&(E(a)&&(a=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,n+(!a.key||l&&l.key===a.key?"":(""+a.key).replace(O,"$&/")+"/")+e)),t.push(a)),1;if(l=0,r=""===r?".":r+":",Array.isArray(e))for(var s=0;s<e.length;s++){var c=r+k(u=e[s],s);l+=C(u,t,n,c,a)}else if("function"==typeof(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e)))for(e=c.call(e),s=0;!(u=e.next()).done;)l+=C(u=u.value,t,n,c=r+k(u,s++),a);else if("object"===u)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return l}function P(e,t,n){if(null==e)return e;var r=[],o=0;return C(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function I(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var M={current:null};function T(){var e=M.current;if(null===e)throw Error(p(321));return e}var R={ReactCurrentDispatcher:M,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:P,forEach:function(e,t,n){P(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return P(e,(function(){t++})),t},toArray:function(e){return P(e,(function(e){return e}))||[]},only:function(e){if(!E(e))throw Error(p(143));return e}},t.Component=v,t.PureComponent=y,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=R,t.cloneElement=function(e,t,n){if(null==e)throw Error(p(267,e));var i=r({},e.props),a=e.key,u=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(u=t.ref,l=w.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(c in t)_.call(t,c)&&!S.hasOwnProperty(c)&&(i[c]=void 0===t[c]&&void 0!==s?s[c]:t[c])}var c=arguments.length-2;if(1===c)i.children=n;else if(1<c){s=Array(c);for(var f=0;f<c;f++)s[f]=arguments[f+2];i.children=s}return{$$typeof:o,type:e.type,key:a,ref:u,props:i,_owner:l}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:u,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:a,_context:e},e.Consumer=e},t.createElement=x,t.createFactory=function(e){var t=x.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:l,render:e}},t.isValidElement=E,t.lazy=function(e){return{$$typeof:c,_payload:{_status:-1,_result:e},_init:I}},t.memo=function(e,t){return{$$typeof:s,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return T().useCallback(e,t)},t.useContext=function(e,t){return T().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return T().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return T().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return T().useLayoutEffect(e,t)},t.useMemo=function(e,t){return T().useMemo(e,t)},t.useReducer=function(e,t,n){return T().useReducer(e,t,n)},t.useRef=function(e){return T().useRef(e)},t.useState=function(e){return T().useState(e)},t.version="17.0.1"},function(e,t,n){"use strict";
/** @license React v17.0.1
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),o=n(24),i=n(43);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));var u=new Set,l={};function s(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(l[e]=t,e=0;e<t.length;e++)u.add(t[e])}var f=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,h={},m={};function v(e,t,n,r,o,i,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=a}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new v(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new v(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new v(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new v(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new v(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new v(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new v(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new v(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new v(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function w(e,t,n,r){var o=g.hasOwnProperty(t)?g[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!p.call(m,e)||!p.call(h,e)&&(d.test(e)?m[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,b);g[t]=new v(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,b);g[t]=new v(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,b);g[t]=new v(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new v(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new v(e,1,!1,e.toLowerCase(),null,!0,!0)}));var _=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,S=60103,x=60106,E=60107,O=60108,k=60114,C=60109,P=60110,I=60112,M=60113,T=60120,R=60115,N=60116,L=60121,j=60128,A=60129,F=60130,z=60131;if("function"==typeof Symbol&&Symbol.for){var D=Symbol.for;S=D("react.element"),x=D("react.portal"),E=D("react.fragment"),O=D("react.strict_mode"),k=D("react.profiler"),C=D("react.provider"),P=D("react.context"),I=D("react.forward_ref"),M=D("react.suspense"),T=D("react.suspense_list"),R=D("react.memo"),N=D("react.lazy"),L=D("react.block"),D("react.scope"),j=D("react.opaque.id"),A=D("react.debug_trace_mode"),F=D("react.offscreen"),z=D("react.legacy_hidden")}var U,B="function"==typeof Symbol&&Symbol.iterator;function V(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=B&&e[B]||e["@@iterator"])?e:null}function W(e){if(void 0===U)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);U=t&&t[1]||""}return"\n"+U+e}var H=!1;function $(e,t){if(!e||H)return"";H=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var o=e.stack.split("\n"),i=r.stack.split("\n"),a=o.length-1,u=i.length-1;1<=a&&0<=u&&o[a]!==i[u];)u--;for(;1<=a&&0<=u;a--,u--)if(o[a]!==i[u]){if(1!==a||1!==u)do{if(a--,0>--u||o[a]!==i[u])return"\n"+o[a].replace(" at new "," at ")}while(1<=a&&0<=u);break}}}finally{H=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?W(e):""}function q(e){switch(e.tag){case 5:return W(e.type);case 16:return W("Lazy");case 13:return W("Suspense");case 19:return W("SuspenseList");case 0:case 2:case 15:return e=$(e.type,!1);case 11:return e=$(e.type.render,!1);case 22:return e=$(e.type._render,!1);case 1:return e=$(e.type,!0);default:return""}}function Q(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case E:return"Fragment";case x:return"Portal";case k:return"Profiler";case O:return"StrictMode";case M:return"Suspense";case T:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case P:return(e.displayName||"Context")+".Consumer";case C:return(e._context.displayName||"Context")+".Provider";case I:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case R:return Q(e.type);case L:return Q(e._render);case N:t=e._payload,e=e._init;try{return Q(e(t))}catch(e){}}return null}function K(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Y(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function X(e){e._valueTracker||(e._valueTracker=function(e){var t=Y(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function G(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Y(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function J(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Z(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=K(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&w(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=K(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?oe(e,t.type,n):t.hasOwnProperty("defaultValue")&&oe(e,t.type,K(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function oe(e,t,n){"number"===t&&J(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function ie(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ae(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+K(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function ue(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function le(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:K(n)}}function se(e,t){var n=K(t.value),r=K(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ce(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var fe="http://www.w3.org/1999/xhtml",de="http://www.w3.org/2000/svg";function pe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function he(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?pe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var me,ve=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==de||"innerHTML"in e)e.innerHTML=t;else{for((me=me||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=me.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function ge(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ye={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},be=["Webkit","ms","Moz","O"];function we(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ye.hasOwnProperty(e)&&ye[e]?(""+t).trim():t+"px"}function _e(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=we(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ye).forEach((function(e){be.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ye[t]=ye[e]}))}));var Se=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function xe(e,t){if(t){if(Se[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function Ee(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Oe(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var ke=null,Ce=null,Pe=null;function Ie(e){if(e=Jr(e)){if("function"!=typeof ke)throw Error(a(280));var t=e.stateNode;t&&(t=eo(t),ke(e.stateNode,e.type,t))}}function Me(e){Ce?Pe?Pe.push(e):Pe=[e]:Ce=e}function Te(){if(Ce){var e=Ce,t=Pe;if(Pe=Ce=null,Ie(e),t)for(e=0;e<t.length;e++)Ie(t[e])}}function Re(e,t){return e(t)}function Ne(e,t,n,r,o){return e(t,n,r,o)}function Le(){}var je=Re,Ae=!1,Fe=!1;function ze(){null===Ce&&null===Pe||(Le(),Te())}function De(e,t){var n=e.stateNode;if(null===n)return null;var r=eo(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var Ue=!1;if(f)try{var Be={};Object.defineProperty(Be,"passive",{get:function(){Ue=!0}}),window.addEventListener("test",Be,Be),window.removeEventListener("test",Be,Be)}catch(e){Ue=!1}function Ve(e,t,n,r,o,i,a,u,l){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var We=!1,He=null,$e=!1,qe=null,Qe={onError:function(e){We=!0,He=e}};function Ke(e,t,n,r,o,i,a,u,l){We=!1,He=null,Ve.apply(Qe,arguments)}function Ye(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Xe(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function Ge(e){if(Ye(e)!==e)throw Error(a(188))}function Je(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ye(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return Ge(o),e;if(i===r)return Ge(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var u=!1,l=o.child;l;){if(l===n){u=!0,n=o,r=i;break}if(l===r){u=!0,r=o,n=i;break}l=l.sibling}if(!u){for(l=i.child;l;){if(l===n){u=!0,n=i,r=o;break}if(l===r){u=!0,r=i,n=o;break}l=l.sibling}if(!u)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Ze(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var et,tt,nt,rt,ot=!1,it=[],at=null,ut=null,lt=null,st=new Map,ct=new Map,ft=[],dt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function pt(e,t,n,r,o){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:o,targetContainers:[r]}}function ht(e,t){switch(e){case"focusin":case"focusout":at=null;break;case"dragenter":case"dragleave":ut=null;break;case"mouseover":case"mouseout":lt=null;break;case"pointerover":case"pointerout":st.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ct.delete(t.pointerId)}}function mt(e,t,n,r,o,i){return null===e||e.nativeEvent!==i?(e=pt(t,n,r,o,i),null!==t&&(null!==(t=Jr(t))&&tt(t)),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function vt(e){var t=Gr(e.target);if(null!==t){var n=Ye(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Xe(n)))return e.blockedOn=t,void rt(e.lanePriority,(function(){i.unstable_runWithPriority(e.priority,(function(){nt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function gt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Jt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=Jr(n))&&tt(t),e.blockedOn=n,!1;t.shift()}return!0}function yt(e,t,n){gt(e)&&n.delete(t)}function bt(){for(ot=!1;0<it.length;){var e=it[0];if(null!==e.blockedOn){null!==(e=Jr(e.blockedOn))&&et(e);break}for(var t=e.targetContainers;0<t.length;){var n=Jt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&it.shift()}null!==at&&gt(at)&&(at=null),null!==ut&&gt(ut)&&(ut=null),null!==lt&&gt(lt)&&(lt=null),st.forEach(yt),ct.forEach(yt)}function wt(e,t){e.blockedOn===t&&(e.blockedOn=null,ot||(ot=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,bt)))}function _t(e){function t(t){return wt(t,e)}if(0<it.length){wt(it[0],e);for(var n=1;n<it.length;n++){var r=it[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==at&&wt(at,e),null!==ut&&wt(ut,e),null!==lt&&wt(lt,e),st.forEach(t),ct.forEach(t),n=0;n<ft.length;n++)(r=ft[n]).blockedOn===e&&(r.blockedOn=null);for(;0<ft.length&&null===(n=ft[0]).blockedOn;)vt(n),null===n.blockedOn&&ft.shift()}function St(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var xt={animationend:St("Animation","AnimationEnd"),animationiteration:St("Animation","AnimationIteration"),animationstart:St("Animation","AnimationStart"),transitionend:St("Transition","TransitionEnd")},Et={},Ot={};function kt(e){if(Et[e])return Et[e];if(!xt[e])return e;var t,n=xt[e];for(t in n)if(n.hasOwnProperty(t)&&t in Ot)return Et[e]=n[t];return e}f&&(Ot=document.createElement("div").style,"AnimationEvent"in window||(delete xt.animationend.animation,delete xt.animationiteration.animation,delete xt.animationstart.animation),"TransitionEvent"in window||delete xt.transitionend.transition);var Ct=kt("animationend"),Pt=kt("animationiteration"),It=kt("animationstart"),Mt=kt("transitionend"),Tt=new Map,Rt=new Map,Nt=["abort","abort",Ct,"animationEnd",Pt,"animationIteration",It,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Mt,"transitionEnd","waiting","waiting"];function Lt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1];o="on"+(o[0].toUpperCase()+o.slice(1)),Rt.set(r,t),Tt.set(r,o),s(o,[r])}}(0,i.unstable_now)();var jt=8;function At(e){if(0!=(1&e))return jt=15,1;if(0!=(2&e))return jt=14,2;if(0!=(4&e))return jt=13,4;var t=24&e;return 0!==t?(jt=12,t):0!=(32&e)?(jt=11,32):0!==(t=192&e)?(jt=10,t):0!=(256&e)?(jt=9,256):0!==(t=3584&e)?(jt=8,t):0!=(4096&e)?(jt=7,4096):0!==(t=4186112&e)?(jt=6,t):0!==(t=62914560&e)?(jt=5,t):67108864&e?(jt=4,67108864):0!=(134217728&e)?(jt=3,134217728):0!==(t=805306368&e)?(jt=2,t):0!=(1073741824&e)?(jt=1,1073741824):(jt=8,e)}function Ft(e,t){var n=e.pendingLanes;if(0===n)return jt=0;var r=0,o=0,i=e.expiredLanes,a=e.suspendedLanes,u=e.pingedLanes;if(0!==i)r=i,o=jt=15;else if(0!==(i=134217727&n)){var l=i&~a;0!==l?(r=At(l),o=jt):0!==(u&=i)&&(r=At(u),o=jt)}else 0!==(i=n&~a)?(r=At(i),o=jt):0!==u&&(r=At(u),o=jt);if(0===r)return 0;if(r=n&((0>(r=31-Wt(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&a)){if(At(t),o<=jt)return t;jt=o}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-Wt(t)),r|=e[n],t&=~o;return r}function zt(e){return 0!==(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Dt(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Ut(24&~t))?Dt(10,t):e;case 10:return 0===(e=Ut(192&~t))?Dt(8,t):e;case 8:return 0===(e=Ut(3584&~t))&&(0===(e=Ut(4186112&~t))&&(e=512)),e;case 2:return 0===(t=Ut(805306368&~t))&&(t=268435456),t}throw Error(a(358,e))}function Ut(e){return e&-e}function Bt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Vt(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-Wt(t)]=n}var Wt=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Ht(e)/$t|0)|0},Ht=Math.log,$t=Math.LN2;var qt=i.unstable_UserBlockingPriority,Qt=i.unstable_runWithPriority,Kt=!0;function Yt(e,t,n,r){Ae||Le();var o=Gt,i=Ae;Ae=!0;try{Ne(o,e,t,n,r)}finally{(Ae=i)||ze()}}function Xt(e,t,n,r){Qt(qt,Gt.bind(null,e,t,n,r))}function Gt(e,t,n,r){var o;if(Kt)if((o=0==(4&t))&&0<it.length&&-1<dt.indexOf(e))e=pt(null,e,t,n,r),it.push(e);else{var i=Jt(e,t,n,r);if(null===i)o&&ht(e,r);else{if(o){if(-1<dt.indexOf(e))return e=pt(i,e,t,n,r),void it.push(e);if(function(e,t,n,r,o){switch(t){case"focusin":return at=mt(at,e,t,n,r,o),!0;case"dragenter":return ut=mt(ut,e,t,n,r,o),!0;case"mouseover":return lt=mt(lt,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return st.set(i,mt(st.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,ct.set(i,mt(ct.get(i)||null,e,t,n,r,o)),!0}return!1}(i,e,t,n,r))return;ht(e,r)}Mr(e,t,r,null,n)}}}function Jt(e,t,n,r){var o=Oe(r);if(null!==(o=Gr(o))){var i=Ye(o);if(null===i)o=null;else{var a=i.tag;if(13===a){if(null!==(o=Xe(i)))return o;o=null}else if(3===a){if(i.stateNode.hydrate)return 3===i.tag?i.stateNode.containerInfo:null;o=null}else i!==o&&(o=null)}}return Mr(e,t,r,o,n),null}var Zt=null,en=null,tn=null;function nn(){if(tn)return tn;var e,t,n=en,r=n.length,o="value"in Zt?Zt.value:Zt.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return tn=o.slice(e,1<t?1-t:void 0)}function rn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function on(){return!0}function an(){return!1}function un(e){function t(t,n,r,o,i){for(var a in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=i,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(o):o[a]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?on:an,this.isPropagationStopped=an,this}return o(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=on)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=on)},persist:function(){},isPersistent:on}),t}var ln,sn,cn,fn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},dn=un(fn),pn=o({},fn,{view:0,detail:0}),hn=un(pn),mn=o({},pn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:kn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==cn&&(cn&&"mousemove"===e.type?(ln=e.screenX-cn.screenX,sn=e.screenY-cn.screenY):sn=ln=0,cn=e),ln)},movementY:function(e){return"movementY"in e?e.movementY:sn}}),vn=un(mn),gn=un(o({},mn,{dataTransfer:0})),yn=un(o({},pn,{relatedTarget:0})),bn=un(o({},fn,{animationName:0,elapsedTime:0,pseudoElement:0})),wn=un(o({},fn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),_n=un(o({},fn,{data:0})),Sn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},xn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},En={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function On(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=En[e])&&!!t[e]}function kn(){return On}var Cn=un(o({},pn,{key:function(e){if(e.key){var t=Sn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=rn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?xn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:kn,charCode:function(e){return"keypress"===e.type?rn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?rn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),Pn=un(o({},mn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),In=un(o({},pn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:kn})),Mn=un(o({},fn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Tn=un(o({},mn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),Rn=[9,13,27,32],Nn=f&&"CompositionEvent"in window,Ln=null;f&&"documentMode"in document&&(Ln=document.documentMode);var jn=f&&"TextEvent"in window&&!Ln,An=f&&(!Nn||Ln&&8<Ln&&11>=Ln),Fn=String.fromCharCode(32),zn=!1;function Dn(e,t){switch(e){case"keyup":return-1!==Rn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Un(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Bn=!1;var Vn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Wn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Vn[e.type]:"textarea"===t}function Hn(e,t,n,r){Me(r),0<(t=Rr(t,"onChange")).length&&(n=new dn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var $n=null,qn=null;function Qn(e){Er(e,0)}function Kn(e){if(G(Zr(e)))return e}function Yn(e,t){if("change"===e)return t}var Xn=!1;if(f){var Gn;if(f){var Jn="oninput"in document;if(!Jn){var Zn=document.createElement("div");Zn.setAttribute("oninput","return;"),Jn="function"==typeof Zn.oninput}Gn=Jn}else Gn=!1;Xn=Gn&&(!document.documentMode||9<document.documentMode)}function er(){$n&&($n.detachEvent("onpropertychange",tr),qn=$n=null)}function tr(e){if("value"===e.propertyName&&Kn(qn)){var t=[];if(Hn(t,qn,e,Oe(e)),e=Qn,Ae)e(t);else{Ae=!0;try{Re(e,t)}finally{Ae=!1,ze()}}}}function nr(e,t,n){"focusin"===e?(er(),qn=n,($n=t).attachEvent("onpropertychange",tr)):"focusout"===e&&er()}function rr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Kn(qn)}function or(e,t){if("click"===e)return Kn(t)}function ir(e,t){if("input"===e||"change"===e)return Kn(t)}var ar="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},ur=Object.prototype.hasOwnProperty;function lr(e,t){if(ar(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!ur.call(t,n[r])||!ar(e[n[r]],t[n[r]]))return!1;return!0}function sr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=sr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=sr(r)}}function fr(){for(var e=window,t=J();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=J((e=t.contentWindow).document)}return t}function dr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var pr=f&&"documentMode"in document&&11>=document.documentMode,hr=null,mr=null,vr=null,gr=!1;function yr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;gr||null==hr||hr!==J(r)||("selectionStart"in(r=hr)&&dr(r)?r={start:r.selectionStart,end:r.selectionEnd}:r={anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},vr&&lr(vr,r)||(vr=r,0<(r=Rr(mr,"onSelect")).length&&(t=new dn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=hr)))}Lt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Lt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Lt(Nt,2);for(var br="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),wr=0;wr<br.length;wr++)Rt.set(br[wr],0);c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),s("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),s("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),s("onBeforeInput",["compositionend","keypress","textInput","paste"]),s("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var _r="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Sr=new Set("cancel close invalid load scroll toggle".split(" ").concat(_r));function xr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,i,u,l,s){if(Ke.apply(this,arguments),We){if(!We)throw Error(a(198));var c=He;We=!1,He=null,$e||($e=!0,qe=c)}}(r,t,void 0,e),e.currentTarget=null}function Er(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var i=void 0;if(t)for(var a=r.length-1;0<=a;a--){var u=r[a],l=u.instance,s=u.currentTarget;if(u=u.listener,l!==i&&o.isPropagationStopped())break e;xr(o,u,s),i=l}else for(a=0;a<r.length;a++){if(l=(u=r[a]).instance,s=u.currentTarget,u=u.listener,l!==i&&o.isPropagationStopped())break e;xr(o,u,s),i=l}}}if($e)throw e=qe,$e=!1,qe=null,e}function Or(e,t){var n=to(t),r=e+"__bubble";n.has(r)||(Ir(t,e,2,!1),n.add(r))}var kr="_reactListening"+Math.random().toString(36).slice(2);function Cr(e){e[kr]||(e[kr]=!0,u.forEach((function(t){Sr.has(t)||Pr(t,!1,e,null),Pr(t,!0,e,null)})))}function Pr(e,t,n,r){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,i=n;if("selectionchange"===e&&9!==n.nodeType&&(i=n.ownerDocument),null!==r&&!t&&Sr.has(e)){if("scroll"!==e)return;o|=2,i=r}var a=to(i),u=e+"__"+(t?"capture":"bubble");a.has(u)||(t&&(o|=4),Ir(i,e,o,t),a.add(u))}function Ir(e,t,n,r){var o=Rt.get(t);switch(void 0===o?2:o){case 0:o=Yt;break;case 1:o=Xt;break;default:o=Gt}n=o.bind(null,t,n,e),o=void 0,!Ue||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Mr(e,t,n,r,o){var i=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var u=r.stateNode.containerInfo;if(u===o||8===u.nodeType&&u.parentNode===o)break;if(4===a)for(a=r.return;null!==a;){var l=a.tag;if((3===l||4===l)&&((l=a.stateNode.containerInfo)===o||8===l.nodeType&&l.parentNode===o))return;a=a.return}for(;null!==u;){if(null===(a=Gr(u)))return;if(5===(l=a.tag)||6===l){r=i=a;continue e}u=u.parentNode}}r=r.return}!function(e,t,n){if(Fe)return e(t,n);Fe=!0;try{je(e,t,n)}finally{Fe=!1,ze()}}((function(){var r=i,o=Oe(n),a=[];e:{var u=Tt.get(e);if(void 0!==u){var l=dn,s=e;switch(e){case"keypress":if(0===rn(n))break e;case"keydown":case"keyup":l=Cn;break;case"focusin":s="focus",l=yn;break;case"focusout":s="blur",l=yn;break;case"beforeblur":case"afterblur":l=yn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=vn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=gn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=In;break;case Ct:case Pt:case It:l=bn;break;case Mt:l=Mn;break;case"scroll":l=hn;break;case"wheel":l=Tn;break;case"copy":case"cut":case"paste":l=wn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=Pn}var c=0!=(4&t),f=!c&&"scroll"===e,d=c?null!==u?u+"Capture":null:u;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&(null!=(m=De(h,d))&&c.push(Tr(h,m,p)))),f)break;h=h.return}0<c.length&&(u=new l(u,s,null,n,o),a.push({event:u,listeners:c}))}}if(0==(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(u="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(s=n.relatedTarget||n.fromElement)||!Gr(s)&&!s[Yr])&&(l||u)&&(u=o.window===o?o:(u=o.ownerDocument)?u.defaultView||u.parentWindow:window,l?(l=r,null!==(s=(s=n.relatedTarget||n.toElement)?Gr(s):null)&&(s!==(f=Ye(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(l=null,s=r),l!==s)){if(c=vn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Pn,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==l?u:Zr(l),p=null==s?u:Zr(s),(u=new c(m,h+"leave",l,n,o)).target=f,u.relatedTarget=p,m=null,Gr(o)===r&&((c=new c(d,h+"enter",s,n,o)).target=p,c.relatedTarget=f,m=c),f=m,l&&s)e:{for(d=s,h=0,p=c=l;p;p=Nr(p))h++;for(p=0,m=d;m;m=Nr(m))p++;for(;0<h-p;)c=Nr(c),h--;for(;0<p-h;)d=Nr(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=Nr(c),d=Nr(d)}c=null}else c=null;null!==l&&Lr(a,u,l,c,!1),null!==s&&null!==f&&Lr(a,f,s,c,!0)}if("select"===(l=(u=r?Zr(r):window).nodeName&&u.nodeName.toLowerCase())||"input"===l&&"file"===u.type)var v=Yn;else if(Wn(u))if(Xn)v=ir;else{v=rr;var g=nr}else(l=u.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===u.type||"radio"===u.type)&&(v=or);switch(v&&(v=v(e,r))?Hn(a,v,n,o):(g&&g(e,u,r),"focusout"===e&&(g=u._wrapperState)&&g.controlled&&"number"===u.type&&oe(u,"number",u.value)),g=r?Zr(r):window,e){case"focusin":(Wn(g)||"true"===g.contentEditable)&&(hr=g,mr=r,vr=null);break;case"focusout":vr=mr=hr=null;break;case"mousedown":gr=!0;break;case"contextmenu":case"mouseup":case"dragend":gr=!1,yr(a,n,o);break;case"selectionchange":if(pr)break;case"keydown":case"keyup":yr(a,n,o)}var y;if(Nn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Bn?Dn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(An&&"ko"!==n.locale&&(Bn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Bn&&(y=nn()):(en="value"in(Zt=o)?Zt.value:Zt.textContent,Bn=!0)),0<(g=Rr(r,b)).length&&(b=new _n(b,e,null,n,o),a.push({event:b,listeners:g}),y?b.data=y:null!==(y=Un(n))&&(b.data=y))),(y=jn?function(e,t){switch(e){case"compositionend":return Un(t);case"keypress":return 32!==t.which?null:(zn=!0,Fn);case"textInput":return(e=t.data)===Fn&&zn?null:e;default:return null}}(e,n):function(e,t){if(Bn)return"compositionend"===e||!Nn&&Dn(e,t)?(e=nn(),tn=en=Zt=null,Bn=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return An&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))&&(0<(r=Rr(r,"onBeforeInput")).length&&(o=new _n("onBeforeInput","beforeinput",null,n,o),a.push({event:o,listeners:r}),o.data=y))}Er(a,t)}))}function Tr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Rr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,i=o.stateNode;5===o.tag&&null!==i&&(o=i,null!=(i=De(e,n))&&r.unshift(Tr(e,i,o)),null!=(i=De(e,t))&&r.push(Tr(e,i,o))),e=e.return}return r}function Nr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Lr(e,t,n,r,o){for(var i=t._reactName,a=[];null!==n&&n!==r;){var u=n,l=u.alternate,s=u.stateNode;if(null!==l&&l===r)break;5===u.tag&&null!==s&&(u=s,o?null!=(l=De(n,i))&&a.unshift(Tr(n,l,u)):o||null!=(l=De(n,i))&&a.push(Tr(n,l,u))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}function jr(){}var Ar=null,Fr=null;function zr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Dr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Ur="function"==typeof setTimeout?setTimeout:void 0,Br="function"==typeof clearTimeout?clearTimeout:void 0;function Vr(e){1===e.nodeType?e.textContent="":9===e.nodeType&&(null!=(e=e.body)&&(e.textContent=""))}function Wr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Hr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var $r=0;var qr=Math.random().toString(36).slice(2),Qr="__reactFiber$"+qr,Kr="__reactProps$"+qr,Yr="__reactContainer$"+qr,Xr="__reactEvents$"+qr;function Gr(e){var t=e[Qr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Yr]||n[Qr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Hr(e);null!==e;){if(n=e[Qr])return n;e=Hr(e)}return t}n=(e=n).parentNode}return null}function Jr(e){return!(e=e[Qr]||e[Yr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Zr(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function eo(e){return e[Kr]||null}function to(e){var t=e[Xr];return void 0===t&&(t=e[Xr]=new Set),t}var no=[],ro=-1;function oo(e){return{current:e}}function io(e){0>ro||(e.current=no[ro],no[ro]=null,ro--)}function ao(e,t){ro++,no[ro]=e.current,e.current=t}var uo={},lo=oo(uo),so=oo(!1),co=uo;function fo(e,t){var n=e.type.contextTypes;if(!n)return uo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function po(e){return null!=(e=e.childContextTypes)}function ho(){io(so),io(lo)}function mo(e,t,n){if(lo.current!==uo)throw Error(a(168));ao(lo,t),ao(so,n)}function vo(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in e))throw Error(a(108,Q(t)||"Unknown",i));return o({},n,r)}function go(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||uo,co=lo.current,ao(lo,e),ao(so,so.current),!0}function yo(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=vo(e,t,co),r.__reactInternalMemoizedMergedChildContext=e,io(so),io(lo),ao(lo,e)):io(so),ao(so,n)}var bo=null,wo=null,_o=i.unstable_runWithPriority,So=i.unstable_scheduleCallback,xo=i.unstable_cancelCallback,Eo=i.unstable_shouldYield,Oo=i.unstable_requestPaint,ko=i.unstable_now,Co=i.unstable_getCurrentPriorityLevel,Po=i.unstable_ImmediatePriority,Io=i.unstable_UserBlockingPriority,Mo=i.unstable_NormalPriority,To=i.unstable_LowPriority,Ro=i.unstable_IdlePriority,No={},Lo=void 0!==Oo?Oo:function(){},jo=null,Ao=null,Fo=!1,zo=ko(),Do=1e4>zo?ko:function(){return ko()-zo};function Uo(){switch(Co()){case Po:return 99;case Io:return 98;case Mo:return 97;case To:return 96;case Ro:return 95;default:throw Error(a(332))}}function Bo(e){switch(e){case 99:return Po;case 98:return Io;case 97:return Mo;case 96:return To;case 95:return Ro;default:throw Error(a(332))}}function Vo(e,t){return e=Bo(e),_o(e,t)}function Wo(e,t,n){return e=Bo(e),So(e,t,n)}function Ho(){if(null!==Ao){var e=Ao;Ao=null,xo(e)}$o()}function $o(){if(!Fo&&null!==jo){Fo=!0;var e=0;try{var t=jo;Vo(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),jo=null}catch(t){throw null!==jo&&(jo=jo.slice(e+1)),So(Po,Ho),t}finally{Fo=!1}}}var qo=_.ReactCurrentBatchConfig;function Qo(e,t){if(e&&e.defaultProps){for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Ko=oo(null),Yo=null,Xo=null,Go=null;function Jo(){Go=Xo=Yo=null}function Zo(e){var t=Ko.current;io(Ko),e.type._context._currentValue=t}function ei(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function ti(e,t){Yo=e,Go=Xo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Ra=!0),e.firstContext=null)}function ni(e,t){if(Go!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Go=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Xo){if(null===Yo)throw Error(a(308));Xo=t,Yo.dependencies={lanes:0,firstContext:t,responders:null}}else Xo=Xo.next=t;return e._currentValue}var ri=!1;function oi(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function ii(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ai(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function ui(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function li(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,i=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===i?o=i=a:i=i.next=a,n=n.next}while(null!==n);null===i?o=i=t:i=i.next=t}else o=i=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:i,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function si(e,t,n,r){var i=e.updateQueue;ri=!1;var a=i.firstBaseUpdate,u=i.lastBaseUpdate,l=i.shared.pending;if(null!==l){i.shared.pending=null;var s=l,c=s.next;s.next=null,null===u?a=c:u.next=c,u=s;var f=e.alternate;if(null!==f){var d=(f=f.updateQueue).lastBaseUpdate;d!==u&&(null===d?f.firstBaseUpdate=c:d.next=c,f.lastBaseUpdate=s)}}if(null!==a){for(d=i.baseState,u=0,f=c=s=null;;){l=a.lane;var p=a.eventTime;if((r&l)===l){null!==f&&(f=f.next={eventTime:p,lane:0,tag:a.tag,payload:a.payload,callback:a.callback,next:null});e:{var h=e,m=a;switch(l=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){d=h.call(p,d,l);break e}d=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null==(l="function"==typeof(h=m.payload)?h.call(p,d,l):h))break e;d=o({},d,l);break e;case 2:ri=!0}}null!==a.callback&&(e.flags|=32,null===(l=i.effects)?i.effects=[a]:l.push(a))}else p={eventTime:p,lane:l,tag:a.tag,payload:a.payload,callback:a.callback,next:null},null===f?(c=f=p,s=d):f=f.next=p,u|=l;if(null===(a=a.next)){if(null===(l=i.shared.pending))break;a=l.next,l.next=null,i.lastBaseUpdate=l,i.shared.pending=null}}null===f&&(s=d),i.baseState=s,i.firstBaseUpdate=c,i.lastBaseUpdate=f,Lu|=u,e.lanes=u,e.memoizedState=d}}function ci(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(a(191,o));o.call(r)}}}var fi=(new r.Component).refs;function di(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var pi={isMounted:function(e){return!!(e=e._reactInternals)&&Ye(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=il(),o=al(e),i=ai(r,o);i.payload=t,null!=n&&(i.callback=n),ui(e,i),ul(e,o,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=il(),o=al(e),i=ai(r,o);i.tag=1,i.payload=t,null!=n&&(i.callback=n),ui(e,i),ul(e,o,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=il(),r=al(e),o=ai(n,r);o.tag=2,null!=t&&(o.callback=t),ui(e,o),ul(e,r,n)}};function hi(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!t.prototype||!t.prototype.isPureReactComponent||(!lr(n,r)||!lr(o,i))}function mi(e,t,n){var r=!1,o=uo,i=t.contextType;return"object"==typeof i&&null!==i?i=ni(i):(o=po(t)?co:lo.current,i=(r=null!=(r=t.contextTypes))?fo(e,o):uo),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=pi,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function vi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&pi.enqueueReplaceState(t,t.state,null)}function gi(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=fi,oi(e);var i=t.contextType;"object"==typeof i&&null!==i?o.context=ni(i):(i=po(t)?co:lo.current,o.context=fo(e,i)),si(e,n,o,r),o.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(di(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&pi.enqueueReplaceState(o,o.state,null),si(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4)}var yi=Array.isArray;function bi(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===fi&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function wi(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function _i(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Dl(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function u(t){return e&&null===t.alternate&&(t.flags=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Wl(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function s(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=bi(e,t,n),r.return=e,r):((r=Ul(n.type,n.key,n.props,null,e.mode,r)).ref=bi(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Hl(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=Bl(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Wl(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case S:return(n=Ul(t.type,t.key,t.props,null,e.mode,n)).ref=bi(e,null,t),n.return=e,n;case x:return(t=Hl(t,e.mode,n)).return=e,t}if(yi(t)||V(t))return(t=Bl(t,e.mode,n,null)).return=e,t;wi(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case S:return n.key===o?n.type===E?f(e,t,n.props.children,r,o):s(e,t,n,r):null;case x:return n.key===o?c(e,t,n,r):null}if(yi(n)||V(n))return null!==o?null:f(e,t,n,r,null);wi(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case S:return e=e.get(null===r.key?n:r.key)||null,r.type===E?f(t,e,r.props.children,o,r.key):s(t,e,r,o);case x:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(yi(r)||V(r))return f(t,e=e.get(n)||null,r,o,null);wi(t,r)}return null}function m(o,a,u,l){for(var s=null,c=null,f=a,m=a=0,v=null;null!==f&&m<u.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var g=p(o,f,u[m],l);if(null===g){null===f&&(f=v);break}e&&f&&null===g.alternate&&t(o,f),a=i(g,a,m),null===c?s=g:c.sibling=g,c=g,f=v}if(m===u.length)return n(o,f),s;if(null===f){for(;m<u.length;m++)null!==(f=d(o,u[m],l))&&(a=i(f,a,m),null===c?s=f:c.sibling=f,c=f);return s}for(f=r(o,f);m<u.length;m++)null!==(v=h(f,o,m,u[m],l))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),a=i(v,a,m),null===c?s=v:c.sibling=v,c=v);return e&&f.forEach((function(e){return t(o,e)})),s}function v(o,u,l,s){var c=V(l);if("function"!=typeof c)throw Error(a(150));if(null==(l=c.call(l)))throw Error(a(151));for(var f=c=null,m=u,v=u=0,g=null,y=l.next();null!==m&&!y.done;v++,y=l.next()){m.index>v?(g=m,m=null):g=m.sibling;var b=p(o,m,y.value,s);if(null===b){null===m&&(m=g);break}e&&m&&null===b.alternate&&t(o,m),u=i(b,u,v),null===f?c=b:f.sibling=b,f=b,m=g}if(y.done)return n(o,m),c;if(null===m){for(;!y.done;v++,y=l.next())null!==(y=d(o,y.value,s))&&(u=i(y,u,v),null===f?c=y:f.sibling=y,f=y);return c}for(m=r(o,m);!y.done;v++,y=l.next())null!==(y=h(m,o,v,y.value,s))&&(e&&null!==y.alternate&&m.delete(null===y.key?v:y.key),u=i(y,u,v),null===f?c=y:f.sibling=y,f=y);return e&&m.forEach((function(e){return t(o,e)})),c}return function(e,r,i,l){var s="object"==typeof i&&null!==i&&i.type===E&&null===i.key;s&&(i=i.props.children);var c="object"==typeof i&&null!==i;if(c)switch(i.$$typeof){case S:e:{for(c=i.key,s=r;null!==s;){if(s.key===c){switch(s.tag){case 7:if(i.type===E){n(e,s.sibling),(r=o(s,i.props.children)).return=e,e=r;break e}break;default:if(s.elementType===i.type){n(e,s.sibling),(r=o(s,i.props)).ref=bi(e,s,i),r.return=e,e=r;break e}}n(e,s);break}t(e,s),s=s.sibling}i.type===E?((r=Bl(i.props.children,e.mode,l,i.key)).return=e,e=r):((l=Ul(i.type,i.key,i.props,null,e.mode,l)).ref=bi(e,r,i),l.return=e,e=l)}return u(e);case x:e:{for(s=i.key;null!==r;){if(r.key===s){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Hl(i,e.mode,l)).return=e,e=r}return u(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=Wl(i,e.mode,l)).return=e,e=r),u(e);if(yi(i))return m(e,r,i,l);if(V(i))return v(e,r,i,l);if(c&&wi(e,i),void 0===i&&!s)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(a(152,Q(e.type)||"Component"))}return n(e,r)}}var Si=_i(!0),xi=_i(!1),Ei={},Oi=oo(Ei),ki=oo(Ei),Ci=oo(Ei);function Pi(e){if(e===Ei)throw Error(a(174));return e}function Ii(e,t){switch(ao(Ci,t),ao(ki,e),ao(Oi,Ei),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:he(null,"");break;default:t=he(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}io(Oi),ao(Oi,t)}function Mi(){io(Oi),io(ki),io(Ci)}function Ti(e){Pi(Ci.current);var t=Pi(Oi.current),n=he(t,e.type);t!==n&&(ao(ki,e),ao(Oi,n))}function Ri(e){ki.current===e&&(io(Oi),io(ki))}var Ni=oo(0);function Li(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ji=null,Ai=null,Fi=!1;function zi(e,t){var n=Fl(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Di(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Ui(e){if(Fi){var t=Ai;if(t){var n=t;if(!Di(e,t)){if(!(t=Wr(n.nextSibling))||!Di(e,t))return e.flags=-1025&e.flags|2,Fi=!1,void(ji=e);zi(ji,n)}ji=e,Ai=Wr(t.firstChild)}else e.flags=-1025&e.flags|2,Fi=!1,ji=e}}function Bi(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ji=e}function Vi(e){if(e!==ji)return!1;if(!Fi)return Bi(e),Fi=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Dr(t,e.memoizedProps))for(t=Ai;t;)zi(e,t),t=Wr(t.nextSibling);if(Bi(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Ai=Wr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Ai=null}}else Ai=ji?Wr(e.stateNode.nextSibling):null;return!0}function Wi(){Ai=ji=null,Fi=!1}var Hi=[];function $i(){for(var e=0;e<Hi.length;e++)Hi[e]._workInProgressVersionPrimary=null;Hi.length=0}var qi=_.ReactCurrentDispatcher,Qi=_.ReactCurrentBatchConfig,Ki=0,Yi=null,Xi=null,Gi=null,Ji=!1,Zi=!1;function ea(){throw Error(a(321))}function ta(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ar(e[n],t[n]))return!1;return!0}function na(e,t,n,r,o,i){if(Ki=i,Yi=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,qi.current=null===e||null===e.memoizedState?Pa:Ia,e=n(r,o),Zi){i=0;do{if(Zi=!1,!(25>i))throw Error(a(301));i+=1,Gi=Xi=null,t.updateQueue=null,qi.current=Ma,e=n(r,o)}while(Zi)}if(qi.current=Ca,t=null!==Xi&&null!==Xi.next,Ki=0,Gi=Xi=Yi=null,Ji=!1,t)throw Error(a(300));return e}function ra(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Gi?Yi.memoizedState=Gi=e:Gi=Gi.next=e,Gi}function oa(){if(null===Xi){var e=Yi.alternate;e=null!==e?e.memoizedState:null}else e=Xi.next;var t=null===Gi?Yi.memoizedState:Gi.next;if(null!==t)Gi=t,Xi=e;else{if(null===e)throw Error(a(310));e={memoizedState:(Xi=e).memoizedState,baseState:Xi.baseState,baseQueue:Xi.baseQueue,queue:Xi.queue,next:null},null===Gi?Yi.memoizedState=Gi=e:Gi=Gi.next=e}return Gi}function ia(e,t){return"function"==typeof t?t(e):t}function aa(e){var t=oa(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=Xi,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var u=o.next;o.next=i.next,i.next=u}r.baseQueue=o=i,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var l=u=i=null,s=o;do{var c=s.lane;if((Ki&c)===c)null!==l&&(l=l.next={lane:0,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null}),r=s.eagerReducer===e?s.eagerState:e(r,s.action);else{var f={lane:c,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null};null===l?(u=l=f,i=r):l=l.next=f,Yi.lanes|=c,Lu|=c}s=s.next}while(null!==s&&s!==o);null===l?i=r:l.next=u,ar(r,t.memoizedState)||(Ra=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=l,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function ua(e){var t=oa(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var u=o=o.next;do{i=e(i,u.action),u=u.next}while(u!==o);ar(i,t.memoizedState)||(Ra=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function la(e,t,n){var r=t._getVersion;r=r(t._source);var o=t._workInProgressVersionPrimary;if(null!==o?e=o===r:(e=e.mutableReadLanes,(e=(Ki&e)===e)&&(t._workInProgressVersionPrimary=r,Hi.push(t))),e)return n(t._source);throw Hi.push(t),Error(a(350))}function sa(e,t,n,r){var o=ku;if(null===o)throw Error(a(349));var i=t._getVersion,u=i(t._source),l=qi.current,s=l.useState((function(){return la(o,t,n)})),c=s[1],f=s[0];s=Gi;var d=e.memoizedState,p=d.refs,h=p.getSnapshot,m=d.source;d=d.subscribe;var v=Yi;return e.memoizedState={refs:p,source:t,subscribe:r},l.useEffect((function(){p.getSnapshot=n,p.setSnapshot=c;var e=i(t._source);if(!ar(u,e)){e=n(t._source),ar(f,e)||(c(e),e=al(v),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var r=o.entanglements,a=e;0<a;){var l=31-Wt(a),s=1<<l;r[l]|=e,a&=~s}}}),[n,t,r]),l.useEffect((function(){return r(t._source,(function(){var e=p.getSnapshot,n=p.setSnapshot;try{n(e(t._source));var r=al(v);o.mutableReadLanes|=r&o.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),ar(h,n)&&ar(m,t)&&ar(d,r)||((e={pending:null,dispatch:null,lastRenderedReducer:ia,lastRenderedState:f}).dispatch=c=ka.bind(null,Yi,e),s.queue=e,s.baseQueue=null,f=la(o,t,n),s.memoizedState=s.baseState=f),f}function ca(e,t,n){return sa(oa(),e,t,n)}function fa(e){var t=ra();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:ia,lastRenderedState:e}).dispatch=ka.bind(null,Yi,e),[t.memoizedState,e]}function da(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Yi.updateQueue)?(t={lastEffect:null},Yi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function pa(e){return e={current:e},ra().memoizedState=e}function ha(){return oa().memoizedState}function ma(e,t,n,r){var o=ra();Yi.flags|=e,o.memoizedState=da(1|t,n,void 0,void 0===r?null:r)}function va(e,t,n,r){var o=oa();r=void 0===r?null:r;var i=void 0;if(null!==Xi){var a=Xi.memoizedState;if(i=a.destroy,null!==r&&ta(r,a.deps))return void da(t,n,i,r)}Yi.flags|=e,o.memoizedState=da(1|t,n,i,r)}function ga(e,t){return ma(516,4,e,t)}function ya(e,t){return va(516,4,e,t)}function ba(e,t){return va(4,2,e,t)}function wa(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function _a(e,t,n){return n=null!=n?n.concat([e]):null,va(4,2,wa.bind(null,t,e),n)}function Sa(){}function xa(e,t){var n=oa();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ta(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Ea(e,t){var n=oa();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ta(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Oa(e,t){var n=Uo();Vo(98>n?98:n,(function(){e(!0)})),Vo(97<n?97:n,(function(){var n=Qi.transition;Qi.transition=1;try{e(!1),t()}finally{Qi.transition=n}}))}function ka(e,t,n){var r=il(),o=al(e),i={lane:o,action:n,eagerReducer:null,eagerState:null,next:null},a=t.pending;if(null===a?i.next=i:(i.next=a.next,a.next=i),t.pending=i,a=e.alternate,e===Yi||null!==a&&a===Yi)Zi=Ji=!0;else{if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var u=t.lastRenderedState,l=a(u,n);if(i.eagerReducer=a,i.eagerState=l,ar(l,u))return}catch(e){}ul(e,o,r)}}var Ca={readContext:ni,useCallback:ea,useContext:ea,useEffect:ea,useImperativeHandle:ea,useLayoutEffect:ea,useMemo:ea,useReducer:ea,useRef:ea,useState:ea,useDebugValue:ea,useDeferredValue:ea,useTransition:ea,useMutableSource:ea,useOpaqueIdentifier:ea,unstable_isNewReconciler:!1},Pa={readContext:ni,useCallback:function(e,t){return ra().memoizedState=[e,void 0===t?null:t],e},useContext:ni,useEffect:ga,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ma(4,2,wa.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ma(4,2,e,t)},useMemo:function(e,t){var n=ra();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=ra();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=ka.bind(null,Yi,e),[r.memoizedState,e]},useRef:pa,useState:fa,useDebugValue:Sa,useDeferredValue:function(e){var t=fa(e),n=t[0],r=t[1];return ga((function(){var t=Qi.transition;Qi.transition=1;try{r(e)}finally{Qi.transition=t}}),[e]),n},useTransition:function(){var e=fa(!1),t=e[0];return pa(e=Oa.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=ra();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},sa(r,e,t,n)},useOpaqueIdentifier:function(){if(Fi){var e=!1,t=function(e){return{$$typeof:j,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+($r++).toString(36))),Error(a(355))})),n=fa(t)[1];return 0==(2&Yi.mode)&&(Yi.flags|=516,da(5,(function(){n("r:"+($r++).toString(36))}),void 0,null)),t}return fa(t="r:"+($r++).toString(36)),t},unstable_isNewReconciler:!1},Ia={readContext:ni,useCallback:xa,useContext:ni,useEffect:ya,useImperativeHandle:_a,useLayoutEffect:ba,useMemo:Ea,useReducer:aa,useRef:ha,useState:function(){return aa(ia)},useDebugValue:Sa,useDeferredValue:function(e){var t=aa(ia),n=t[0],r=t[1];return ya((function(){var t=Qi.transition;Qi.transition=1;try{r(e)}finally{Qi.transition=t}}),[e]),n},useTransition:function(){var e=aa(ia)[0];return[ha().current,e]},useMutableSource:ca,useOpaqueIdentifier:function(){return aa(ia)[0]},unstable_isNewReconciler:!1},Ma={readContext:ni,useCallback:xa,useContext:ni,useEffect:ya,useImperativeHandle:_a,useLayoutEffect:ba,useMemo:Ea,useReducer:ua,useRef:ha,useState:function(){return ua(ia)},useDebugValue:Sa,useDeferredValue:function(e){var t=ua(ia),n=t[0],r=t[1];return ya((function(){var t=Qi.transition;Qi.transition=1;try{r(e)}finally{Qi.transition=t}}),[e]),n},useTransition:function(){var e=ua(ia)[0];return[ha().current,e]},useMutableSource:ca,useOpaqueIdentifier:function(){return ua(ia)[0]},unstable_isNewReconciler:!1},Ta=_.ReactCurrentOwner,Ra=!1;function Na(e,t,n,r){t.child=null===e?xi(t,null,n,r):Si(t,e.child,n,r)}function La(e,t,n,r,o){n=n.render;var i=t.ref;return ti(t,o),r=na(e,t,n,r,i,o),null===e||Ra?(t.flags|=1,Na(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,eu(e,t,o))}function ja(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||zl(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ul(n.type,null,r,t,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Aa(e,t,a,r,o,i))}return a=e.child,0==(o&i)&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:lr)(o,r)&&e.ref===t.ref)?eu(e,t,i):(t.flags|=1,(e=Dl(a,r)).ref=t.ref,e.return=t,t.child=e)}function Aa(e,t,n,r,o,i){if(null!==e&&lr(e.memoizedProps,r)&&e.ref===t.ref){if(Ra=!1,0==(i&o))return t.lanes=e.lanes,eu(e,t,i);0!=(16384&e.flags)&&(Ra=!0)}return Da(e,t,n,r,i)}function Fa(e,t,n){var r=t.pendingProps,o=r.children,i=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},ml(t,n);else{if(0==(1073741824&n))return e=null!==i?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},ml(t,e),null;t.memoizedState={baseLanes:0},ml(t,null!==i?i.baseLanes:n)}else null!==i?(r=i.baseLanes|n,t.memoizedState=null):r=n,ml(t,r);return Na(e,t,o,n),t.child}function za(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function Da(e,t,n,r,o){var i=po(n)?co:lo.current;return i=fo(t,i),ti(t,o),n=na(e,t,n,r,i,o),null===e||Ra?(t.flags|=1,Na(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,eu(e,t,o))}function Ua(e,t,n,r,o){if(po(n)){var i=!0;go(t)}else i=!1;if(ti(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),mi(t,n,r),gi(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,u=t.memoizedProps;a.props=u;var l=a.context,s=n.contextType;"object"==typeof s&&null!==s?s=ni(s):s=fo(t,s=po(n)?co:lo.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||l!==s)&&vi(t,a,r,s),ri=!1;var d=t.memoizedState;a.state=d,si(t,r,a,o),l=t.memoizedState,u!==r||d!==l||so.current||ri?("function"==typeof c&&(di(t,n,c,r),l=t.memoizedState),(u=ri||hi(t,n,u,r,d,l,s))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4)):("function"==typeof a.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=s,r=u):("function"==typeof a.componentDidMount&&(t.flags|=4),r=!1)}else{a=t.stateNode,ii(e,t),u=t.memoizedProps,s=t.type===t.elementType?u:Qo(t.type,u),a.props=s,f=t.pendingProps,d=a.context,"object"==typeof(l=n.contextType)&&null!==l?l=ni(l):l=fo(t,l=po(n)?co:lo.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==f||d!==l)&&vi(t,a,r,l),ri=!1,d=t.memoizedState,a.state=d,si(t,r,a,o);var h=t.memoizedState;u!==f||d!==h||so.current||ri?("function"==typeof p&&(di(t,n,p,r),h=t.memoizedState),(s=ri||hi(t,n,s,r,d,h,l))?(c||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,h,l),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,h,l)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=h),a.props=r,a.state=h,a.context=l,r=s):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),r=!1)}return Ba(e,t,n,r,i,o)}function Ba(e,t,n,r,o,i){za(e,t);var a=0!=(64&t.flags);if(!r&&!a)return o&&yo(t,n,!1),eu(e,t,i);r=t.stateNode,Ta.current=t;var u=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&a?(t.child=Si(t,e.child,null,i),t.child=Si(t,null,u,i)):Na(e,t,u,i),t.memoizedState=r.state,o&&yo(t,n,!0),t.child}function Va(e){var t=e.stateNode;t.pendingContext?mo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&mo(0,t.context,!1),Ii(e,t.containerInfo)}var Wa,Ha,$a,qa={dehydrated:null,retryLane:0};function Qa(e,t,n){var r,o=t.pendingProps,i=Ni.current,a=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(a=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(i|=1),ao(Ni,1&i),null===e?(void 0!==o.fallback&&Ui(t),e=o.children,i=o.fallback,a?(e=Ka(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=qa,e):"number"==typeof o.unstable_expectedLoadTime?(e=Ka(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=qa,t.lanes=33554432,e):((n=Vl({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,a?(o=Xa(e,t,o.children,o.fallback,n),a=t.child,i=e.child.memoizedState,a.memoizedState=null===i?{baseLanes:n}:{baseLanes:i.baseLanes|n},a.childLanes=e.childLanes&~n,t.memoizedState=qa,o):(n=Ya(e,t,o.children,n),t.memoizedState=null,n))}function Ka(e,t,n,r){var o=e.mode,i=e.child;return t={mode:"hidden",children:t},0==(2&o)&&null!==i?(i.childLanes=0,i.pendingProps=t):i=Vl(t,o,0,null),n=Bl(n,o,r,null),i.return=e,n.return=e,i.sibling=n,e.child=i,n}function Ya(e,t,n,r){var o=e.child;return e=o.sibling,n=Dl(o,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}function Xa(e,t,n,r,o){var i=t.mode,a=e.child;e=a.sibling;var u={mode:"hidden",children:n};return 0==(2&i)&&t.child!==a?((n=t.child).childLanes=0,n.pendingProps=u,null!==(a=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=a,a.nextEffect=null):t.firstEffect=t.lastEffect=null):n=Dl(a,u),null!==e?r=Dl(e,r):(r=Bl(r,i,o,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}function Ga(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),ei(e.return,t)}function Ja(e,t,n,r,o,i){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o,lastEffect:i}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=o,a.lastEffect=i)}function Za(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(Na(e,t,r.children,n),0!=(2&(r=Ni.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ga(e,n);else if(19===e.tag)Ga(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(ao(Ni,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===Li(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Ja(t,!1,o,n,i,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Li(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Ja(t,!0,n,null,i,t.lastEffect);break;case"together":Ja(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function eu(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Lu|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Dl(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Dl(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function tu(e,t){if(!Fi)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function nu(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return po(t.type)&&ho(),null;case 3:return Mi(),io(so),io(lo),$i(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Vi(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:Ri(t);var i=Pi(Ci.current);if(n=t.type,null!==e&&null!=t.stateNode)Ha(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(a(166));return null}if(e=Pi(Oi.current),Vi(t)){r=t.stateNode,n=t.type;var u=t.memoizedProps;switch(r[Qr]=t,r[Kr]=u,n){case"dialog":Or("cancel",r),Or("close",r);break;case"iframe":case"object":case"embed":Or("load",r);break;case"video":case"audio":for(e=0;e<_r.length;e++)Or(_r[e],r);break;case"source":Or("error",r);break;case"img":case"image":case"link":Or("error",r),Or("load",r);break;case"details":Or("toggle",r);break;case"input":ee(r,u),Or("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!u.multiple},Or("invalid",r);break;case"textarea":le(r,u),Or("invalid",r)}for(var s in xe(n,u),e=null,u)u.hasOwnProperty(s)&&(i=u[s],"children"===s?"string"==typeof i?r.textContent!==i&&(e=["children",i]):"number"==typeof i&&r.textContent!==""+i&&(e=["children",""+i]):l.hasOwnProperty(s)&&null!=i&&"onScroll"===s&&Or("scroll",r));switch(n){case"input":X(r),re(r,u,!0);break;case"textarea":X(r),ce(r);break;case"select":case"option":break;default:"function"==typeof u.onClick&&(r.onclick=jr)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(s=9===i.nodeType?i:i.ownerDocument,e===fe&&(e=pe(n)),e===fe?"script"===n?((e=s.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=s.createElement(n,{is:r.is}):(e=s.createElement(n),"select"===n&&(s=e,r.multiple?s.multiple=!0:r.size&&(s.size=r.size))):e=s.createElementNS(e,n),e[Qr]=t,e[Kr]=r,Wa(e,t),t.stateNode=e,s=Ee(n,r),n){case"dialog":Or("cancel",e),Or("close",e),i=r;break;case"iframe":case"object":case"embed":Or("load",e),i=r;break;case"video":case"audio":for(i=0;i<_r.length;i++)Or(_r[i],e);i=r;break;case"source":Or("error",e),i=r;break;case"img":case"image":case"link":Or("error",e),Or("load",e),i=r;break;case"details":Or("toggle",e),i=r;break;case"input":ee(e,r),i=Z(e,r),Or("invalid",e);break;case"option":i=ie(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},i=o({},r,{value:void 0}),Or("invalid",e);break;case"textarea":le(e,r),i=ue(e,r),Or("invalid",e);break;default:i=r}xe(n,i);var c=i;for(u in c)if(c.hasOwnProperty(u)){var f=c[u];"style"===u?_e(e,f):"dangerouslySetInnerHTML"===u?null!=(f=f?f.__html:void 0)&&ve(e,f):"children"===u?"string"==typeof f?("textarea"!==n||""!==f)&&ge(e,f):"number"==typeof f&&ge(e,""+f):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(l.hasOwnProperty(u)?null!=f&&"onScroll"===u&&Or("scroll",e):null!=f&&w(e,u,f,s))}switch(n){case"input":X(e),re(e,r,!1);break;case"textarea":X(e),ce(e);break;case"option":null!=r.value&&e.setAttribute("value",""+K(r.value));break;case"select":e.multiple=!!r.multiple,null!=(u=r.value)?ae(e,!!r.multiple,u,!1):null!=r.defaultValue&&ae(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=jr)}zr(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)$a(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));n=Pi(Ci.current),Pi(Oi.current),Vi(t)?(r=t.stateNode,n=t.memoizedProps,r[Qr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Qr]=t,t.stateNode=r)}return null;case 13:return io(Ni),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Vi(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Ni.current)?0===Tu&&(Tu=3):(0!==Tu&&3!==Tu||(Tu=4),null===ku||0==(134217727&Lu)&&0==(134217727&ju)||fl(ku,Pu))),(r||n)&&(t.flags|=4),null);case 4:return Mi(),null===e&&Cr(t.stateNode.containerInfo),null;case 10:return Zo(t),null;case 17:return po(t.type)&&ho(),null;case 19:if(io(Ni),null===(r=t.memoizedState))return null;if(u=0!=(64&t.flags),null===(s=r.rendering))if(u)tu(r,!1);else{if(0!==Tu||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(s=Li(e))){for(t.flags|=64,tu(r,!1),null!==(u=s.updateQueue)&&(t.updateQueue=u,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(u=n).flags&=2,u.nextEffect=null,u.firstEffect=null,u.lastEffect=null,null===(s=u.alternate)?(u.childLanes=0,u.lanes=e,u.child=null,u.memoizedProps=null,u.memoizedState=null,u.updateQueue=null,u.dependencies=null,u.stateNode=null):(u.childLanes=s.childLanes,u.lanes=s.lanes,u.child=s.child,u.memoizedProps=s.memoizedProps,u.memoizedState=s.memoizedState,u.updateQueue=s.updateQueue,u.type=s.type,e=s.dependencies,u.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return ao(Ni,1&Ni.current|2),t.child}e=e.sibling}null!==r.tail&&Do()>Du&&(t.flags|=64,u=!0,tu(r,!1),t.lanes=33554432)}else{if(!u)if(null!==(e=Li(s))){if(t.flags|=64,u=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),tu(r,!0),null===r.tail&&"hidden"===r.tailMode&&!s.alternate&&!Fi)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Do()-r.renderingStartTime>Du&&1073741824!==n&&(t.flags|=64,u=!0,tu(r,!1),t.lanes=33554432);r.isBackwards?(s.sibling=t.child,t.child=s):(null!==(n=r.last)?n.sibling=s:t.child=s,r.last=s)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Do(),n.sibling=null,t=Ni.current,ao(Ni,u?1&t|2:1&t),n):null;case 23:case 24:return vl(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(a(156,t.tag))}function ru(e){switch(e.tag){case 1:po(e.type)&&ho();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Mi(),io(so),io(lo),$i(),0!=(64&(t=e.flags)))throw Error(a(285));return e.flags=-4097&t|64,e;case 5:return Ri(e),null;case 13:return io(Ni),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return io(Ni),null;case 4:return Mi(),null;case 10:return Zo(e),null;case 23:case 24:return vl(),null;default:return null}}function ou(e,t){try{var n="",r=t;do{n+=q(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o}}function iu(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Wa=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ha=function(e,t,n,r){var i=e.memoizedProps;if(i!==r){e=t.stateNode,Pi(Oi.current);var a,u=null;switch(n){case"input":i=Z(e,i),r=Z(e,r),u=[];break;case"option":i=ie(e,i),r=ie(e,r),u=[];break;case"select":i=o({},i,{value:void 0}),r=o({},r,{value:void 0}),u=[];break;case"textarea":i=ue(e,i),r=ue(e,r),u=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(e.onclick=jr)}for(f in xe(n,r),n=null,i)if(!r.hasOwnProperty(f)&&i.hasOwnProperty(f)&&null!=i[f])if("style"===f){var s=i[f];for(a in s)s.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==f&&"children"!==f&&"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(l.hasOwnProperty(f)?u||(u=[]):(u=u||[]).push(f,null));for(f in r){var c=r[f];if(s=null!=i?i[f]:void 0,r.hasOwnProperty(f)&&c!==s&&(null!=c||null!=s))if("style"===f)if(s){for(a in s)!s.hasOwnProperty(a)||c&&c.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in c)c.hasOwnProperty(a)&&s[a]!==c[a]&&(n||(n={}),n[a]=c[a])}else n||(u||(u=[]),u.push(f,n)),n=c;else"dangerouslySetInnerHTML"===f?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(u=u||[]).push(f,c)):"children"===f?"string"!=typeof c&&"number"!=typeof c||(u=u||[]).push(f,""+c):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&(l.hasOwnProperty(f)?(null!=c&&"onScroll"===f&&Or("scroll",e),u||s===c||(u=[])):"object"==typeof c&&null!==c&&c.$$typeof===j?c.toString():(u=u||[]).push(f,c))}n&&(u=u||[]).push("style",n);var f=u;(t.updateQueue=f)&&(t.flags|=4)}},$a=function(e,t,n,r){n!==r&&(t.flags|=4)};var au="function"==typeof WeakMap?WeakMap:Map;function uu(e,t,n){(n=ai(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Wu||(Wu=!0,Hu=r),iu(0,t)},n}function lu(e,t,n){(n=ai(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return iu(0,t),r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===$u?$u=new Set([this]):$u.add(this),iu(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var su="function"==typeof WeakSet?WeakSet:Set;function cu(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Nl(e,t)}else t.current=null}function fu(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Qo(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Vr(t.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(a(163))}function du(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var o=e;r=o.next,0!=(4&(o=o.tag))&&0!=(1&o)&&(Ml(n,e),Il(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Qo(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&ci(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}ci(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&zr(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&_t(n)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(a(163))}function pu(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=we("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function hu(e,t){if(wo&&"function"==typeof wo.onCommitFiberUnmount)try{wo.onCommitFiberUnmount(bo,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,o=r.destroy;if(r=r.tag,void 0!==o)if(0!=(4&r))Ml(t,n);else{r=t;try{o()}catch(e){Nl(r,e)}}n=n.next}while(n!==e)}break;case 1:if(cu(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Nl(t,e)}break;case 5:cu(t);break;case 4:yu(e,t)}}function mu(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function vu(e){return 5===e.tag||3===e.tag||4===e.tag}function gu(e){e:{for(var t=e.return;null!==t;){if(vu(t))break e;t=t.return}throw Error(a(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.flags&&(ge(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||vu(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?function e(t,n,r){var o=t.tag,i=5===o||6===o;if(i)t=i?t.stateNode:t.stateNode.instance,n?8===r.nodeType?r.parentNode.insertBefore(t,n):r.insertBefore(t,n):(8===r.nodeType?(n=r.parentNode).insertBefore(t,r):(n=r).appendChild(t),null!==(r=r._reactRootContainer)&&void 0!==r||null!==n.onclick||(n.onclick=jr));else if(4!==o&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t):function e(t,n,r){var o=t.tag,i=5===o||6===o;if(i)t=i?t.stateNode:t.stateNode.instance,n?r.insertBefore(t,n):r.appendChild(t);else if(4!==o&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t)}function yu(e,t){for(var n,r,o=t,i=!1;;){if(!i){i=o.return;e:for(;;){if(null===i)throw Error(a(160));switch(n=i.stateNode,i.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}i=i.return}i=!0}if(5===o.tag||6===o.tag){e:for(var u=e,l=o,s=l;;)if(hu(u,s),null!==s.child&&4!==s.tag)s.child.return=s,s=s.child;else{if(s===l)break e;for(;null===s.sibling;){if(null===s.return||s.return===l)break e;s=s.return}s.sibling.return=s.return,s=s.sibling}r?(u=n,l=o.stateNode,8===u.nodeType?u.parentNode.removeChild(l):u.removeChild(l)):n.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){n=o.stateNode.containerInfo,r=!0,o.child.return=o,o=o.child;continue}}else if(hu(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(i=!1)}o.sibling.return=o.return,o=o.sibling}}function bu(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var o=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[Kr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),Ee(e,o),t=Ee(e,r),o=0;o<i.length;o+=2){var u=i[o],l=i[o+1];"style"===u?_e(n,l):"dangerouslySetInnerHTML"===u?ve(n,l):"children"===u?ge(n,l):w(n,u,l,t)}switch(e){case"input":ne(n,r);break;case"textarea":se(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(i=r.value)?ae(n,!!r.multiple,i,!1):e!==!!r.multiple&&(null!=r.defaultValue?ae(n,!!r.multiple,r.defaultValue,!0):ae(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(a(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,_t(n.containerInfo)));case 12:return;case 13:return null!==t.memoizedState&&(zu=Do(),pu(t.child,!0)),void wu(t);case 19:return void wu(t);case 17:return;case 23:case 24:return void pu(t,null!==t.memoizedState)}throw Error(a(163))}function wu(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new su),t.forEach((function(t){var r=jl.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function _u(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&(null!==(t=t.memoizedState)&&null===t.dehydrated)}var Su=Math.ceil,xu=_.ReactCurrentDispatcher,Eu=_.ReactCurrentOwner,Ou=0,ku=null,Cu=null,Pu=0,Iu=0,Mu=oo(0),Tu=0,Ru=null,Nu=0,Lu=0,ju=0,Au=0,Fu=null,zu=0,Du=1/0;function Uu(){Du=Do()+500}var Bu,Vu=null,Wu=!1,Hu=null,$u=null,qu=!1,Qu=null,Ku=90,Yu=[],Xu=[],Gu=null,Ju=0,Zu=null,el=-1,tl=0,nl=0,rl=null,ol=!1;function il(){return 0!=(48&Ou)?Do():-1!==el?el:el=Do()}function al(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Uo()?1:2;if(0===tl&&(tl=Nu),0!==qo.transition){0!==nl&&(nl=null!==Fu?Fu.pendingLanes:0),e=tl;var t=4186112&~nl;return 0===(t&=-t)&&(0===(t=(e=4186112&~e)&-e)&&(t=8192)),t}return e=Uo(),0!=(4&Ou)&&98===e?e=Dt(12,tl):e=Dt(e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),tl),e}function ul(e,t,n){if(50<Ju)throw Ju=0,Zu=null,Error(a(185));if(null===(e=ll(e,t)))return null;Vt(e,t,n),e===ku&&(ju|=t,4===Tu&&fl(e,Pu));var r=Uo();1===t?0!=(8&Ou)&&0==(48&Ou)?dl(e):(sl(e,n),0===Ou&&(Uu(),Ho())):(0==(4&Ou)||98!==r&&99!==r||(null===Gu?Gu=new Set([e]):Gu.add(e)),sl(e,n)),Fu=e}function ll(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function sl(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,o=e.pingedLanes,i=e.expirationTimes,u=e.pendingLanes;0<u;){var l=31-Wt(u),s=1<<l,c=i[l];if(-1===c){if(0==(s&r)||0!=(s&o)){c=t,At(s);var f=jt;i[l]=10<=f?c+250:6<=f?c+5e3:-1}}else c<=t&&(e.expiredLanes|=s);u&=~s}if(r=Ft(e,e===ku?Pu:0),t=jt,0===r)null!==n&&(n!==No&&xo(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==No&&xo(n)}15===t?(n=dl.bind(null,e),null===jo?(jo=[n],Ao=So(Po,$o)):jo.push(n),n=No):14===t?n=Wo(99,dl.bind(null,e)):n=Wo(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(a(358,e))}}(t),cl.bind(null,e)),e.callbackPriority=t,e.callbackNode=n}}function cl(e){if(el=-1,nl=tl=0,0!=(48&Ou))throw Error(a(327));var t=e.callbackNode;if(Pl()&&e.callbackNode!==t)return null;var n=Ft(e,e===ku?Pu:0);if(0===n)return null;var r=n,o=Ou;Ou|=16;var i=bl();for(ku===e&&Pu===r||(Uu(),gl(e,r));;)try{Sl();break}catch(t){yl(e,t)}if(Jo(),xu.current=i,Ou=o,null!==Cu?r=0:(ku=null,Pu=0,r=Tu),0!=(Nu&ju))gl(e,0);else if(0!==r){if(2===r&&(Ou|=64,e.hydrate&&(e.hydrate=!1,Vr(e.containerInfo)),0!==(n=zt(e))&&(r=wl(e,n))),1===r)throw t=Ru,gl(e,0),fl(e,n),sl(e,Do()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(a(345));case 2:Ol(e);break;case 3:if(fl(e,n),(62914560&n)===n&&10<(r=zu+500-Do())){if(0!==Ft(e,0))break;if(((o=e.suspendedLanes)&n)!==n){il(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=Ur(Ol.bind(null,e),r);break}Ol(e);break;case 4:if(fl(e,n),(4186112&n)===n)break;for(r=e.eventTimes,o=-1;0<n;){var u=31-Wt(n);i=1<<u,(u=r[u])>o&&(o=u),n&=~i}if(n=o,10<(n=(120>(n=Do()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Su(n/1960))-n)){e.timeoutHandle=Ur(Ol.bind(null,e),n);break}Ol(e);break;case 5:Ol(e);break;default:throw Error(a(329))}}return sl(e,Do()),e.callbackNode===t?cl.bind(null,e):null}function fl(e,t){for(t&=~Au,t&=~ju,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Wt(t),r=1<<n;e[n]=-1,t&=~r}}function dl(e){if(0!=(48&Ou))throw Error(a(327));if(Pl(),e===ku&&0!=(e.expiredLanes&Pu)){var t=Pu,n=wl(e,t);0!=(Nu&ju)&&(n=wl(e,t=Ft(e,t)))}else n=wl(e,t=Ft(e,0));if(0!==e.tag&&2===n&&(Ou|=64,e.hydrate&&(e.hydrate=!1,Vr(e.containerInfo)),0!==(t=zt(e))&&(n=wl(e,t))),1===n)throw n=Ru,gl(e,0),fl(e,t),sl(e,Do()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Ol(e),sl(e,Do()),null}function pl(e,t){var n=Ou;Ou|=1;try{return e(t)}finally{0===(Ou=n)&&(Uu(),Ho())}}function hl(e,t){var n=Ou;Ou&=-2,Ou|=8;try{return e(t)}finally{0===(Ou=n)&&(Uu(),Ho())}}function ml(e,t){ao(Mu,Iu),Iu|=t,Nu|=t}function vl(){Iu=Mu.current,io(Mu)}function gl(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Br(n)),null!==Cu)for(n=Cu.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&ho();break;case 3:Mi(),io(so),io(lo),$i();break;case 5:Ri(r);break;case 4:Mi();break;case 13:case 19:io(Ni);break;case 10:Zo(r);break;case 23:case 24:vl()}n=n.return}ku=e,Cu=Dl(e.current,null),Pu=Iu=Nu=t,Tu=0,Ru=null,Au=ju=Lu=0}function yl(e,t){for(;;){var n=Cu;try{if(Jo(),qi.current=Ca,Ji){for(var r=Yi.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}Ji=!1}if(Ki=0,Gi=Xi=Yi=null,Zi=!1,Eu.current=null,null===n||null===n.return){Tu=1,Ru=t,Cu=null;break}e:{var i=e,a=n.return,u=n,l=t;if(t=Pu,u.flags|=2048,u.firstEffect=u.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var s=l;if(0==(2&u.mode)){var c=u.alternate;c?(u.updateQueue=c.updateQueue,u.memoizedState=c.memoizedState,u.lanes=c.lanes):(u.updateQueue=null,u.memoizedState=null)}var f=0!=(1&Ni.current),d=a;do{var p;if(p=13===d.tag){var h=d.memoizedState;if(null!==h)p=null!==h.dehydrated;else{var m=d.memoizedProps;p=void 0!==m.fallback&&(!0!==m.unstable_avoidThisFallback||!f)}}if(p){var v=d.updateQueue;if(null===v){var g=new Set;g.add(s),d.updateQueue=g}else v.add(s);if(0==(2&d.mode)){if(d.flags|=64,u.flags|=16384,u.flags&=-2981,1===u.tag)if(null===u.alternate)u.tag=17;else{var y=ai(-1,1);y.tag=2,ui(u,y)}u.lanes|=1;break e}l=void 0,u=t;var b=i.pingCache;if(null===b?(b=i.pingCache=new au,l=new Set,b.set(s,l)):void 0===(l=b.get(s))&&(l=new Set,b.set(s,l)),!l.has(u)){l.add(u);var w=Ll.bind(null,i,s,u);s.then(w,w)}d.flags|=4096,d.lanes=t;break e}d=d.return}while(null!==d);l=Error((Q(u.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Tu&&(Tu=2),l=ou(l,u),d=a;do{switch(d.tag){case 3:i=l,d.flags|=4096,t&=-t,d.lanes|=t,li(d,uu(0,i,t));break e;case 1:i=l;var _=d.type,S=d.stateNode;if(0==(64&d.flags)&&("function"==typeof _.getDerivedStateFromError||null!==S&&"function"==typeof S.componentDidCatch&&(null===$u||!$u.has(S)))){d.flags|=4096,t&=-t,d.lanes|=t,li(d,lu(d,i,t));break e}}d=d.return}while(null!==d)}El(n)}catch(e){t=e,Cu===n&&null!==n&&(Cu=n=n.return);continue}break}}function bl(){var e=xu.current;return xu.current=Ca,null===e?Ca:e}function wl(e,t){var n=Ou;Ou|=16;var r=bl();for(ku===e&&Pu===t||gl(e,t);;)try{_l();break}catch(t){yl(e,t)}if(Jo(),Ou=n,xu.current=r,null!==Cu)throw Error(a(261));return ku=null,Pu=0,Tu}function _l(){for(;null!==Cu;)xl(Cu)}function Sl(){for(;null!==Cu&&!Eo();)xl(Cu)}function xl(e){var t=Bu(e.alternate,e,Iu);e.memoizedProps=e.pendingProps,null===t?El(e):Cu=t,Eu.current=null}function El(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=nu(n,t,Iu)))return void(Cu=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Iu)||0==(4&n.mode)){for(var r=0,o=n.child;null!==o;)r|=o.lanes|o.childLanes,o=o.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=ru(t)))return n.flags&=2047,void(Cu=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Cu=t);Cu=t=e}while(null!==t);0===Tu&&(Tu=5)}function Ol(e){var t=Uo();return Vo(99,kl.bind(null,e,t)),null}function kl(e,t){do{Pl()}while(null!==Qu);if(0!=(48&Ou))throw Error(a(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null;var r=n.lanes|n.childLanes,o=r,i=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var u=e.eventTimes,l=e.expirationTimes;0<i;){var s=31-Wt(i),c=1<<s;o[s]=0,u[s]=-1,l[s]=-1,i&=~c}if(null!==Gu&&0==(24&r)&&Gu.has(e)&&Gu.delete(e),e===ku&&(Cu=ku=null,Pu=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(o=Ou,Ou|=32,Eu.current=null,Ar=Kt,dr(u=fr())){if("selectionStart"in u)l={start:u.selectionStart,end:u.selectionEnd};else e:if(l=(l=u.ownerDocument)&&l.defaultView||window,(c=l.getSelection&&l.getSelection())&&0!==c.rangeCount){l=c.anchorNode,i=c.anchorOffset,s=c.focusNode,c=c.focusOffset;try{l.nodeType,s.nodeType}catch(e){l=null;break e}var f=0,d=-1,p=-1,h=0,m=0,v=u,g=null;t:for(;;){for(var y;v!==l||0!==i&&3!==v.nodeType||(d=f+i),v!==s||0!==c&&3!==v.nodeType||(p=f+c),3===v.nodeType&&(f+=v.nodeValue.length),null!==(y=v.firstChild);)g=v,v=y;for(;;){if(v===u)break t;if(g===l&&++h===i&&(d=f),g===s&&++m===c&&(p=f),null!==(y=v.nextSibling))break;g=(v=g).parentNode}v=y}l=-1===d||-1===p?null:{start:d,end:p}}else l=null;l=l||{start:0,end:0}}else l=null;Fr={focusedElem:u,selectionRange:l},Kt=!1,rl=null,ol=!1,Vu=r;do{try{Cl()}catch(e){if(null===Vu)throw Error(a(330));Nl(Vu,e),Vu=Vu.nextEffect}}while(null!==Vu);rl=null,Vu=r;do{try{for(u=e;null!==Vu;){var b=Vu.flags;if(16&b&&ge(Vu.stateNode,""),128&b){var w=Vu.alternate;if(null!==w){var _=w.ref;null!==_&&("function"==typeof _?_(null):_.current=null)}}switch(1038&b){case 2:gu(Vu),Vu.flags&=-3;break;case 6:gu(Vu),Vu.flags&=-3,bu(Vu.alternate,Vu);break;case 1024:Vu.flags&=-1025;break;case 1028:Vu.flags&=-1025,bu(Vu.alternate,Vu);break;case 4:bu(Vu.alternate,Vu);break;case 8:yu(u,l=Vu);var S=l.alternate;mu(l),null!==S&&mu(S)}Vu=Vu.nextEffect}}catch(e){if(null===Vu)throw Error(a(330));Nl(Vu,e),Vu=Vu.nextEffect}}while(null!==Vu);if(_=Fr,w=fr(),b=_.focusedElem,u=_.selectionRange,w!==b&&b&&b.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(b.ownerDocument.documentElement,b)){null!==u&&dr(b)&&(w=u.start,void 0===(_=u.end)&&(_=w),"selectionStart"in b?(b.selectionStart=w,b.selectionEnd=Math.min(_,b.value.length)):(_=(w=b.ownerDocument||document)&&w.defaultView||window).getSelection&&(_=_.getSelection(),l=b.textContent.length,S=Math.min(u.start,l),u=void 0===u.end?S:Math.min(u.end,l),!_.extend&&S>u&&(l=u,u=S,S=l),l=cr(b,S),i=cr(b,u),l&&i&&(1!==_.rangeCount||_.anchorNode!==l.node||_.anchorOffset!==l.offset||_.focusNode!==i.node||_.focusOffset!==i.offset)&&((w=w.createRange()).setStart(l.node,l.offset),_.removeAllRanges(),S>u?(_.addRange(w),_.extend(i.node,i.offset)):(w.setEnd(i.node,i.offset),_.addRange(w))))),w=[];for(_=b;_=_.parentNode;)1===_.nodeType&&w.push({element:_,left:_.scrollLeft,top:_.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<w.length;b++)(_=w[b]).element.scrollLeft=_.left,_.element.scrollTop=_.top}Kt=!!Ar,Fr=Ar=null,e.current=n,Vu=r;do{try{for(b=e;null!==Vu;){var x=Vu.flags;if(36&x&&du(b,Vu.alternate,Vu),128&x){w=void 0;var E=Vu.ref;if(null!==E){var O=Vu.stateNode;switch(Vu.tag){case 5:w=O;break;default:w=O}"function"==typeof E?E(w):E.current=w}}Vu=Vu.nextEffect}}catch(e){if(null===Vu)throw Error(a(330));Nl(Vu,e),Vu=Vu.nextEffect}}while(null!==Vu);Vu=null,Lo(),Ou=o}else e.current=n;if(qu)qu=!1,Qu=e,Ku=t;else for(Vu=r;null!==Vu;)t=Vu.nextEffect,Vu.nextEffect=null,8&Vu.flags&&((x=Vu).sibling=null,x.stateNode=null),Vu=t;if(0===(r=e.pendingLanes)&&($u=null),1===r?e===Zu?Ju++:(Ju=0,Zu=e):Ju=0,n=n.stateNode,wo&&"function"==typeof wo.onCommitFiberRoot)try{wo.onCommitFiberRoot(bo,n,void 0,64==(64&n.current.flags))}catch(e){}if(sl(e,Do()),Wu)throw Wu=!1,e=Hu,Hu=null,e;return 0!=(8&Ou)||Ho(),null}function Cl(){for(;null!==Vu;){var e=Vu.alternate;ol||null===rl||(0!=(8&Vu.flags)?Ze(Vu,rl)&&(ol=!0):13===Vu.tag&&_u(e,Vu)&&Ze(Vu,rl)&&(ol=!0));var t=Vu.flags;0!=(256&t)&&fu(e,Vu),0==(512&t)||qu||(qu=!0,Wo(97,(function(){return Pl(),null}))),Vu=Vu.nextEffect}}function Pl(){if(90!==Ku){var e=97<Ku?97:Ku;return Ku=90,Vo(e,Tl)}return!1}function Il(e,t){Yu.push(t,e),qu||(qu=!0,Wo(97,(function(){return Pl(),null})))}function Ml(e,t){Xu.push(t,e),qu||(qu=!0,Wo(97,(function(){return Pl(),null})))}function Tl(){if(null===Qu)return!1;var e=Qu;if(Qu=null,0!=(48&Ou))throw Error(a(331));var t=Ou;Ou|=32;var n=Xu;Xu=[];for(var r=0;r<n.length;r+=2){var o=n[r],i=n[r+1],u=o.destroy;if(o.destroy=void 0,"function"==typeof u)try{u()}catch(e){if(null===i)throw Error(a(330));Nl(i,e)}}for(n=Yu,Yu=[],r=0;r<n.length;r+=2){o=n[r],i=n[r+1];try{var l=o.create;o.destroy=l()}catch(e){if(null===i)throw Error(a(330));Nl(i,e)}}for(l=e.current.firstEffect;null!==l;)e=l.nextEffect,l.nextEffect=null,8&l.flags&&(l.sibling=null,l.stateNode=null),l=e;return Ou=t,Ho(),!0}function Rl(e,t,n){ui(e,t=uu(0,t=ou(n,t),1)),t=il(),null!==(e=ll(e,1))&&(Vt(e,1,t),sl(e,t))}function Nl(e,t){if(3===e.tag)Rl(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Rl(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===$u||!$u.has(r))){var o=lu(n,e=ou(t,e),1);if(ui(n,o),o=il(),null!==(n=ll(n,1)))Vt(n,1,o),sl(n,o);else if("function"==typeof r.componentDidCatch&&(null===$u||!$u.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function Ll(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=il(),e.pingedLanes|=e.suspendedLanes&n,ku===e&&(Pu&n)===n&&(4===Tu||3===Tu&&(62914560&Pu)===Pu&&500>Do()-zu?gl(e,0):Au|=n),sl(e,t)}function jl(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Uo()?1:2:(0===tl&&(tl=Nu),0===(t=Ut(62914560&~tl))&&(t=4194304))),n=il(),null!==(e=ll(e,t))&&(Vt(e,t,n),sl(e,n))}function Al(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Fl(e,t,n,r){return new Al(e,t,n,r)}function zl(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Dl(e,t){var n=e.alternate;return null===n?((n=Fl(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ul(e,t,n,r,o,i){var u=2;if(r=e,"function"==typeof e)zl(e)&&(u=1);else if("string"==typeof e)u=5;else e:switch(e){case E:return Bl(n.children,o,i,t);case A:u=8,o|=16;break;case O:u=8,o|=1;break;case k:return(e=Fl(12,n,t,8|o)).elementType=k,e.type=k,e.lanes=i,e;case M:return(e=Fl(13,n,t,o)).type=M,e.elementType=M,e.lanes=i,e;case T:return(e=Fl(19,n,t,o)).elementType=T,e.lanes=i,e;case F:return Vl(n,o,i,t);case z:return(e=Fl(24,n,t,o)).elementType=z,e.lanes=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case C:u=10;break e;case P:u=9;break e;case I:u=11;break e;case R:u=14;break e;case N:u=16,r=null;break e;case L:u=22;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Fl(u,n,t,o)).elementType=e,t.type=r,t.lanes=i,t}function Bl(e,t,n,r){return(e=Fl(7,e,r,t)).lanes=n,e}function Vl(e,t,n,r){return(e=Fl(23,e,r,t)).elementType=F,e.lanes=n,e}function Wl(e,t,n){return(e=Fl(6,e,null,t)).lanes=n,e}function Hl(e,t,n){return(t=Fl(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function $l(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Bt(0),this.expirationTimes=Bt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Bt(0),this.mutableSourceEagerHydrationData=null}function ql(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:x,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Ql(e,t,n,r){var o=t.current,i=il(),u=al(o);e:if(n){t:{if(Ye(n=n._reactInternals)!==n||1!==n.tag)throw Error(a(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(po(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);throw Error(a(171))}if(1===n.tag){var s=n.type;if(po(s)){n=vo(n,s,l);break e}}n=l}else n=uo;return null===t.context?t.context=n:t.pendingContext=n,(t=ai(i,u)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),ui(o,t),ul(o,u,i),u}function Kl(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Yl(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Xl(e,t){Yl(e,t),(e=e.alternate)&&Yl(e,t)}function Gl(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new $l(e,t,null!=n&&!0===n.hydrate),t=Fl(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,oi(t),e[Yr]=n.current,Cr(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var o=(t=r[e])._getVersion;o=o(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,o]:n.mutableSourceEagerHydrationData.push(t,o)}this._internalRoot=n}function Jl(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Zl(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i._internalRoot;if("function"==typeof o){var u=o;o=function(){var e=Kl(a);u.call(e)}}Ql(t,a,e,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Gl(e,0,t?{hydrate:!0}:void 0)}(n,r),a=i._internalRoot,"function"==typeof o){var l=o;o=function(){var e=Kl(a);l.call(e)}}hl((function(){Ql(t,a,e,o)}))}return Kl(a)}function es(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Jl(t))throw Error(a(200));return ql(e,t,null,n)}Bu=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||so.current)Ra=!0;else{if(0==(n&r)){switch(Ra=!1,t.tag){case 3:Va(t),Wi();break;case 5:Ti(t);break;case 1:po(t.type)&&go(t);break;case 4:Ii(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var o=t.type._context;ao(Ko,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Qa(e,t,n):(ao(Ni,1&Ni.current),null!==(t=eu(e,t,n))?t.sibling:null);ao(Ni,1&Ni.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return Za(e,t,n);t.flags|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),ao(Ni,Ni.current),r)break;return null;case 23:case 24:return t.lanes=0,Fa(e,t,n)}return eu(e,t,n)}Ra=0!=(16384&e.flags)}else Ra=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=fo(t,lo.current),ti(t,n),o=na(null,t,r,e,o,n),t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,po(r)){var i=!0;go(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,oi(t);var u=r.getDerivedStateFromProps;"function"==typeof u&&di(t,r,u,e),o.updater=pi,t.stateNode=o,o._reactInternals=t,gi(t,r,e,n),t=Ba(null,t,r,!0,i,n)}else t.tag=0,Na(null,t,o,n),t=t.child;return t;case 16:o=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=(i=o._init)(o._payload),t.type=o,i=t.tag=function(e){if("function"==typeof e)return zl(e)?1:0;if(null!=e){if((e=e.$$typeof)===I)return 11;if(e===R)return 14}return 2}(o),e=Qo(o,e),i){case 0:t=Da(null,t,o,e,n);break e;case 1:t=Ua(null,t,o,e,n);break e;case 11:t=La(null,t,o,e,n);break e;case 14:t=ja(null,t,o,Qo(o.type,e),r,n);break e}throw Error(a(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,Da(e,t,r,o=t.elementType===r?o:Qo(r,o),n);case 1:return r=t.type,o=t.pendingProps,Ua(e,t,r,o=t.elementType===r?o:Qo(r,o),n);case 3:if(Va(t),r=t.updateQueue,null===e||null===r)throw Error(a(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,ii(e,t),si(t,r,null,n),(r=t.memoizedState.element)===o)Wi(),t=eu(e,t,n);else{if((i=(o=t.stateNode).hydrate)&&(Ai=Wr(t.stateNode.containerInfo.firstChild),ji=t,i=Fi=!0),i){if(null!=(e=o.mutableSourceEagerHydrationData))for(o=0;o<e.length;o+=2)(i=e[o])._workInProgressVersionPrimary=e[o+1],Hi.push(i);for(n=xi(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Na(e,t,r,n),Wi();t=t.child}return t;case 5:return Ti(t),null===e&&Ui(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,u=o.children,Dr(r,o)?u=null:null!==i&&Dr(r,i)&&(t.flags|=16),za(e,t),Na(e,t,u,n),t.child;case 6:return null===e&&Ui(t),null;case 13:return Qa(e,t,n);case 4:return Ii(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Si(t,null,r,n):Na(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,La(e,t,r,o=t.elementType===r?o:Qo(r,o),n);case 7:return Na(e,t,t.pendingProps,n),t.child;case 8:case 12:return Na(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,u=t.memoizedProps,i=o.value;var l=t.type._context;if(ao(Ko,l._currentValue),l._currentValue=i,null!==u)if(l=u.value,0===(i=ar(l,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,i):1073741823))){if(u.children===o.children&&!so.current){t=eu(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var s=l.dependencies;if(null!==s){u=l.child;for(var c=s.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&i)){1===l.tag&&((c=ai(-1,n&-n)).tag=2,ui(l,c)),l.lanes|=n,null!==(c=l.alternate)&&(c.lanes|=n),ei(l.return,n),s.lanes|=n;break}c=c.next}}else u=10===l.tag&&l.type===t.type?null:l.child;if(null!==u)u.return=l;else for(u=l;null!==u;){if(u===t){u=null;break}if(null!==(l=u.sibling)){l.return=u.return,u=l;break}u=u.return}l=u}Na(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,ti(t,n),r=r(o=ni(o,i.unstable_observedBits)),t.flags|=1,Na(e,t,r,n),t.child;case 14:return i=Qo(o=t.type,t.pendingProps),ja(e,t,o,i=Qo(o.type,i),r,n);case 15:return Aa(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Qo(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,po(r)?(e=!0,go(t)):e=!1,ti(t,n),mi(t,r,o),gi(t,r,o,n),Ba(null,t,r,!0,e,n);case 19:return Za(e,t,n);case 23:case 24:return Fa(e,t,n)}throw Error(a(156,t.tag))},Gl.prototype.render=function(e){Ql(e,this._internalRoot,null,null)},Gl.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Ql(null,e,null,(function(){t[Yr]=null}))},et=function(e){13===e.tag&&(ul(e,4,il()),Xl(e,4))},tt=function(e){13===e.tag&&(ul(e,67108864,il()),Xl(e,67108864))},nt=function(e){if(13===e.tag){var t=il(),n=al(e);ul(e,n,t),Xl(e,n)}},rt=function(e,t){return t()},ke=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=eo(r);if(!o)throw Error(a(90));G(r),ne(r,o)}}}break;case"textarea":se(e,n);break;case"select":null!=(t=n.value)&&ae(e,!!n.multiple,t,!1)}},Re=pl,Ne=function(e,t,n,r,o){var i=Ou;Ou|=4;try{return Vo(98,e.bind(null,t,n,r,o))}finally{0===(Ou=i)&&(Uu(),Ho())}},Le=function(){0==(49&Ou)&&(function(){if(null!==Gu){var e=Gu;Gu=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,sl(e,Do())}))}Ho()}(),Pl())},je=function(e,t){var n=Ou;Ou|=2;try{return e(t)}finally{0===(Ou=n)&&(Uu(),Ho())}};var ts={Events:[Jr,Zr,eo,Me,Te,Pl,{current:!1}]},ns={findFiberByHostInstance:Gr,bundleType:0,version:"17.0.1",rendererPackageName:"react-dom"},rs={bundleType:ns.bundleType,version:ns.version,rendererPackageName:ns.rendererPackageName,rendererConfig:ns.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:_.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Je(e))?null:e.stateNode},findFiberByHostInstance:ns.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var os=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!os.isDisabled&&os.supportsFiber)try{bo=os.inject(rs),wo=os}catch(e){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ts,t.createPortal=es,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return e=null===(e=Je(t))?null:e.stateNode},t.flushSync=function(e,t){var n=Ou;if(0!=(48&n))return e(t);Ou|=1;try{if(e)return Vo(99,e.bind(null,t))}finally{Ou=n,Ho()}},t.hydrate=function(e,t,n){if(!Jl(t))throw Error(a(200));return Zl(null,e,t,!0,n)},t.render=function(e,t,n){if(!Jl(t))throw Error(a(200));return Zl(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Jl(e))throw Error(a(40));return!!e._reactRootContainer&&(hl((function(){Zl(null,null,e,!1,(function(){e._reactRootContainer=null,e[Yr]=null}))})),!0)},t.unstable_batchedUpdates=pl,t.unstable_createPortal=function(e,t){return es(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Jl(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return Zl(e,t,n,!1,r)},t.version="17.0.1"},function(e,t,n){"use strict";e.exports=n(44)},function(e,t,n){"use strict";
/** @license React v0.20.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,o,i,a;if("object"==typeof performance&&"function"==typeof performance.now){var u=performance;t.unstable_now=function(){return u.now()}}else{var l=Date,s=l.now();t.unstable_now=function(){return l.now()-s}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var c=null,f=null,d=function(){if(null!==c)try{var e=t.unstable_now();c(!0,e),c=null}catch(e){throw setTimeout(d,0),e}};r=function(e){null!==c?setTimeout(r,0,e):(c=e,setTimeout(d,0))},o=function(e,t){f=setTimeout(e,t)},i=function(){clearTimeout(f)},t.unstable_shouldYield=function(){return!1},a=t.unstable_forceFrameRate=function(){}}else{var p=window.setTimeout,h=window.clearTimeout;if("undefined"!=typeof console){var m=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof m&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var v=!1,g=null,y=-1,b=5,w=0;t.unstable_shouldYield=function(){return t.unstable_now()>=w},a=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):b=0<e?Math.floor(1e3/e):5};var _=new MessageChannel,S=_.port2;_.port1.onmessage=function(){if(null!==g){var e=t.unstable_now();w=e+b;try{g(!0,e)?S.postMessage(null):(v=!1,g=null)}catch(e){throw S.postMessage(null),e}}else v=!1},r=function(e){g=e,v||(v=!0,S.postMessage(null))},o=function(e,n){y=p((function(){e(t.unstable_now())}),n)},i=function(){h(y),y=-1}}function x(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<k(o,t)))break e;e[r]=t,e[n]=o,n=r}}function E(e){return void 0===(e=e[0])?null:e}function O(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var i=2*(r+1)-1,a=e[i],u=i+1,l=e[u];if(void 0!==a&&0>k(a,n))void 0!==l&&0>k(l,a)?(e[r]=l,e[u]=n,r=u):(e[r]=a,e[i]=n,r=i);else{if(!(void 0!==l&&0>k(l,n)))break e;e[r]=l,e[u]=n,r=u}}}return t}return null}function k(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var C=[],P=[],I=1,M=null,T=3,R=!1,N=!1,L=!1;function j(e){for(var t=E(P);null!==t;){if(null===t.callback)O(P);else{if(!(t.startTime<=e))break;O(P),t.sortIndex=t.expirationTime,x(C,t)}t=E(P)}}function A(e){if(L=!1,j(e),!N)if(null!==E(C))N=!0,r(F);else{var t=E(P);null!==t&&o(A,t.startTime-e)}}function F(e,n){N=!1,L&&(L=!1,i()),R=!0;var r=T;try{for(j(n),M=E(C);null!==M&&(!(M.expirationTime>n)||e&&!t.unstable_shouldYield());){var a=M.callback;if("function"==typeof a){M.callback=null,T=M.priorityLevel;var u=a(M.expirationTime<=n);n=t.unstable_now(),"function"==typeof u?M.callback=u:M===E(C)&&O(C),j(n)}else O(C);M=E(C)}if(null!==M)var l=!0;else{var s=E(P);null!==s&&o(A,s.startTime-n),l=!1}return l}finally{M=null,T=r,R=!1}}var z=a;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){N||R||(N=!0,r(F))},t.unstable_getCurrentPriorityLevel=function(){return T},t.unstable_getFirstCallbackNode=function(){return E(C)},t.unstable_next=function(e){switch(T){case 1:case 2:case 3:var t=3;break;default:t=T}var n=T;T=t;try{return e()}finally{T=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=z,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=T;T=e;try{return t()}finally{T=n}},t.unstable_scheduleCallback=function(e,n,a){var u=t.unstable_now();switch("object"==typeof a&&null!==a?a="number"==typeof(a=a.delay)&&0<a?u+a:u:a=u,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:I++,callback:n,priorityLevel:e,startTime:a,expirationTime:l=a+l,sortIndex:-1},a>u?(e.sortIndex=a,x(P,e),null===E(C)&&e===E(P)&&(L?i():L=!0,o(A,a-u))):(e.sortIndex=l,x(C,e),N||R||(N=!0,r(F))),e},t.unstable_wrapCallback=function(e){var t=T;return function(){var n=T;T=t;try{return e.apply(this,arguments)}finally{T=n}}}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){e.exports=n(48)()},function(e,t,n){"use strict";var r=n(49);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,u=r?Symbol.for("react.strict_mode"):60108,l=r?Symbol.for("react.profiler"):60114,s=r?Symbol.for("react.provider"):60109,c=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,d=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,m=r?Symbol.for("react.suspense_list"):60120,v=r?Symbol.for("react.memo"):60115,g=r?Symbol.for("react.lazy"):60116,y=r?Symbol.for("react.block"):60121,b=r?Symbol.for("react.fundamental"):60117,w=r?Symbol.for("react.responder"):60118,_=r?Symbol.for("react.scope"):60119;function S(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case f:case d:case a:case l:case u:case h:return e;default:switch(e=e&&e.$$typeof){case c:case p:case g:case v:case s:return e;default:return t}}case i:return t}}}function x(e){return S(e)===d}t.AsyncMode=f,t.ConcurrentMode=d,t.ContextConsumer=c,t.ContextProvider=s,t.Element=o,t.ForwardRef=p,t.Fragment=a,t.Lazy=g,t.Memo=v,t.Portal=i,t.Profiler=l,t.StrictMode=u,t.Suspense=h,t.isAsyncMode=function(e){return x(e)||S(e)===f},t.isConcurrentMode=x,t.isContextConsumer=function(e){return S(e)===c},t.isContextProvider=function(e){return S(e)===s},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return S(e)===p},t.isFragment=function(e){return S(e)===a},t.isLazy=function(e){return S(e)===g},t.isMemo=function(e){return S(e)===v},t.isPortal=function(e){return S(e)===i},t.isProfiler=function(e){return S(e)===l},t.isStrictMode=function(e){return S(e)===u},t.isSuspense=function(e){return S(e)===h},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===d||e===l||e===u||e===h||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===v||e.$$typeof===s||e.$$typeof===c||e.$$typeof===p||e.$$typeof===b||e.$$typeof===w||e.$$typeof===_||e.$$typeof===y)},t.typeOf=S},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__rest||function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n};Object.defineProperty(t,"__esModule",{value:!0}),t.reducer=void 0;var i=n(87),a=n(25),u=n(27),l=n(99),s=r(r({},a.getExtensionState()),{counter:0});t.reducer=function(e,t){var n,a,c,f,d,p,h;switch(void 0===e&&(e=s),t.type){case"SET_VERTEX_FILE_PATH":return r(r({},e),{vertexFilePath:t.payload.path});case"SET_FRAGMENT_FILE_PATH":return r(r({},e),{fragmentFilePath:t.payload.path});case"SET_UNIFORM":var m=t.payload,v=m.name,g=o(m,["name"]);return r(r({},e),{uniformValues:r(r({},e.uniformValues),(n={},n[v]=r(r(r({},e.uniformValues[v]),g),{value:null!==(d=null===(f=i.uniformBindings.get(g.optionId))||void 0===f?void 0:f.getValue(e.cameraPosition,e.viewerSize))&&void 0!==d?d:g.value}),n))});case"SET_ATTRIBUTE_BUFFER":var y=t.payload,b=y.name;g=o(y,["name"]);return r(r({},e),{attributeBufferValues:r(r({},e.attributeBufferValues),(a={},a[b]=r(r(r({},e.attributeBufferValues[b]),g),{value:null!==(h=null===(p=u.attributeBufferBindings.get(g.optionId))||void 0===p?void 0:p.getValue(e.meshId))&&void 0!==h?h:g.value}),a))});case"SET_TEXTURE":var w=t.payload,_=w.name;g=o(w,["name"]);return r(r({},e),{textureValues:r(r({},e.textureValues),(c={},c[_]=r(r({},e.textureValues[_]),g),c))});case"SET_VIWER_SIZE":return r(r({},e),{viewerSize:t.payload.size});case"SET_CAMERA_POSITION":return r(r({},e),{uniformValues:l.objectMap(e.uniformValues,(function(n){var o,a;return r(r({},n),{value:null!==(a=null===(o=i.uniformBindings.get(n.optionId))||void 0===o?void 0:o.getValue(t.payload.position,e.viewerSize))&&void 0!==a?a:n.value})})),cameraPosition:t.payload.position});case"SET_MESH":return r(r({},e),{attributeBufferValues:l.objectMap(e.attributeBufferValues,(function(e){var n,o;return r(r({},e),{value:null!==(o=null===(n=u.attributeBufferBindings.get(e.optionId))||void 0===n?void 0:n.getValue(t.payload.id))&&void 0!==o?o:e.value})})),meshId:t.payload.id});case"SET_DRAW_MODE":return r(r({},e),{drawMode:t.payload.mode});default:return e}}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Viewer=void 0;var i=o(n(0)),a=n(2),u=n(16),l=n(54),s=n(55),c=n(17),f=n(56),d=n(57),p=n(75),h=n(77),m=n(80),v=n(89),g=n(90),y=n(93),b=n(94),w=n(36),_=n(37),S=n(23);t.Viewer=a.connect((function(e){return{selectedVertexFileId:e.vertexFilePath,selectedFragmentFileId:e.fragmentFilePath,cameraPosition:e.cameraPosition}}),(function(e){return{setCameraPosition:function(t){return e({type:"SET_CAMERA_POSITION",payload:{position:t}})},setViewerSize:function(t){return e({type:"SET_VIWER_SIZE",payload:{size:t}})}}}))((function(e){var t=e.selectedVertexFileId,n=e.selectedFragmentFileId,o=e.cameraPosition,a=e.setCameraPosition,x=e.setViewerSize,E=i.default.useState(""),O=E[0],k=E[1],C=i.default.useState(""),P=C[0],I=C[1],M=i.default.useState(""),T=M[0],R=M[1],N=i.default.useState([]),L=N[0],j=N[1],A=i.default.useState([]),F=A[0],z=A[1],D=i.default.useState([]),U=D[0],B=D[1],V=i.default.useRef(null),W=i.default.useRef(null),H=i.default.useRef(null),$=i.default.useRef(null),q=i.default.useRef(null);return i.default.useEffect((function(){if(H.current=W.current.getContext("webgl"),!H.current)throw new Error("Unable to create webgl context");$.current=new f.IndexBufferInfo(H.current),l.observeElementBoundingRect(V.current,(function(e){W.current.width=e.width,W.current.height=e.height,x(r({},e))})),u.viewerEndpoint.showWebViewDevTools()}),[]),i.default.useEffect((function(){if(P&&T){var e=s.compileShadersFromSource(H.current,P,T);if(!Array.isArray(e)){k("");var t=e,n=s.getProgramUniforms(H.current,t),r=s.getProgramAttributeBuffers(H.current,t);z(n.dataUniforms),B(n.textureUniforms),j(r);var o=c.createAttributeBufferInfos(H.current,t,r),i=w.createUniformInfos(H.current,t,n.dataUniforms);_.setWebGLFromState();var a=function(){var e=S.store.getState().drawMode;s.renderProgram(H.current,t,{uniformInfos:i,textureInfos:[],attributeBufferInfos:o,indexBufferInfo:$.current},{drawMode:e}),q.current=requestAnimationFrame(a)};return a(),function(){console.log("deleting prog"),cancelAnimationFrame(q.current),H.current.deleteProgram(e)}}k(s.formatShaderCompileErrors(e))}}),[P,T]),g.usePerspectiveCamera(V.current,o,a),y.useDocumentWatcher(t,I),y.useDocumentWatcher(n,R),i.default.createElement("div",{className:"viewer-grid"},i.default.createElement("div",{className:"viewer-options"},i.default.createElement(p.ShadersSelectorSection,null),i.default.createElement(d.DrawOptionsSection,null),F.length>0&&i.default.createElement(m.UniformSection,{uniformFields:F}),L.length>0&&i.default.createElement(b.AttributeBuffersSection,{attributeBufferFields:L}),U.length>0&&i.default.createElement(h.TextureSection,{textureFields:U})),i.default.createElement("div",{ref:V,className:"viewer-content"},O&&i.default.createElement(v.ShadersCompileResultArea,{errors:O}),i.default.createElement("canvas",{className:"viewer-canvas",ref:W})))}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.uuidv4=void 0;t.uuidv4=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){var t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.observeElementBoundingRect=void 0;t.observeElementBoundingRect=function(e,t){var n=new ResizeObserver((function(n){var r=n.find((function(t){return t.target===e}));if(r){var o=r.target.getBoundingClientRect();t({x:o.x,y:o.y,width:o.width,height:o.height})}}));return n.observe(e),function(){return n.disconnect()}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.formatShaderCompileErrors=t.renderProgram=t.getProgramAttributeBuffers=t.getProgramUniforms=t.createProgram=t.compileShadersFromSource=t.compileShader=void 0;var r=n(4),o=n(10);t.compileShader=function(e,t,n){var r=e.createShader(t);if(e.shaderSource(r,n),e.compileShader(r),e.getShaderParameter(r,e.COMPILE_STATUS))return r;var o=e.getShaderInfoLog(r);return e.deleteShader(r),{error:o}};t.compileShadersFromSource=function(e,n,i){var a=t.compileShader(e,e.VERTEX_SHADER,n),u=t.compileShader(e,e.FRAGMENT_SHADER,i),l=void 0;o.hasProperty(a,"error")&&(l=r.removeLast(a.error,1));var s=void 0;return o.hasProperty(u,"error")&&(s=r.removeLast(u.error,1)),l||s?[l,s]:t.createProgram(e,a,u)};t.createProgram=function(e,t,n){var r=e.createProgram();if(e.attachShader(r,t),e.attachShader(r,n),e.linkProgram(r),e.getProgramParameter(r,e.LINK_STATUS))return r;var o=e.getProgramInfoLog(r);throw e.deleteProgram(r),new Error("Creating program failed: "+o)};t.getProgramUniforms=function(e,t){for(var n=e.getProgramParameter(t,e.ACTIVE_UNIFORMS),r=[],o=[],i=0;i<n;++i){var a=e.getActiveUniform(t,i);35678===a.type?o.push({name:a.name,unit:o.length}):r.push({name:a.name,type:a.type})}return{dataUniforms:r,textureUniforms:o}};t.getProgramAttributeBuffers=function(e,t){for(var n=e.getProgramParameter(t,e.ACTIVE_ATTRIBUTES),r=[],o=0;o<n;++o){var i=e.getActiveAttrib(t,o);r.push({name:i.name,type:i.type})}return r};t.renderProgram=function(e,t,n,r){e.useProgram(t),e.viewport(0,0,e.canvas.width,e.canvas.height),e.clearColor(0,0,0,1),e.clearDepth(1),e.enable(e.DEPTH_TEST),e.depthFunc(e.LEQUAL),e.clear(e.COLOR_BUFFER_BIT|e.DEPTH_BUFFER_BIT),n.uniformInfos.forEach((function(e){return e.prepareForRender()})),n.textureInfos.forEach((function(e){return e.prepareForRender()})),n.attributeBufferInfos.forEach((function(e){return e.setAttributeBuffer()}));var o=e.TRIANGLES;if("arrays"===r.drawMode){var i=Math.min.apply(Math,n.attributeBufferInfos.map((function(e){return e.getCount()})));e.drawArrays(o,0,i)}else n.indexBufferInfo.setIndexBuffer(),e.drawElements(o,n.indexBufferInfo.getCount(),e.UNSIGNED_SHORT,0)};t.formatShaderCompileErrors=function(e){var t=e[0],n=e[1],r=[];return t&&r.push("VERTEX SHADER:",t),n&&r.push("FRAGMENT SHADER:",n),r.join("\r\n")}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.IndexBufferInfo=void 0;var r=function(){function e(e){this.context=e,this.count=0,this.buffer=e.createBuffer()}return e.prototype.setValue=function(e){this.count=e.length,this.context.bindBuffer(this.context.ELEMENT_ARRAY_BUFFER,this.buffer),this.context.bufferData(this.context.ELEMENT_ARRAY_BUFFER,new Uint16Array(e),this.context.STATIC_DRAW)},e.prototype.setIndexBuffer=function(){this.context.bindBuffer(this.context.ELEMENT_ARRAY_BUFFER,this.buffer)},e.prototype.getCount=function(){return this.count},e.prototype.deleteBuffer=function(){this.context.deleteBuffer(this.buffer),this.buffer=null},e}();t.IndexBufferInfo=r},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.DrawOptionsSection=void 0;var o=r(n(0)),i=n(2),a=n(28),u=n(5),l=n(6),s=n(7),c=n(8),f=[{id:"arrays",display:"Arrays"},{id:"elements",display:"Elements"}],d=Array.from(a.meshes.entries()).map((function(e){return{id:e[0],display:e[1].display}}));t.DrawOptionsSection=o.default.memo(i.connect((function(e){return{drawMode:e.drawMode,meshId:e.meshId}}),(function(e){return{setDrawMode:function(t){return e({type:"SET_DRAW_MODE",payload:{mode:t}})},setMeshId:function(t){return e({type:"SET_MESH",payload:{id:t}})}}}))((function(e){var t=e.drawMode,n=e.meshId,r=e.setDrawMode,i=e.setMeshId;return o.default.createElement("div",{className:"viewer-options-section"},o.default.createElement(c.SectionTitle,{text:u.translations.drawOptions}),o.default.createElement(s.SectionField,{text:"Draw mode"},o.default.createElement(l.Dropdown,{selectedItemId:t,onChange:r,options:f})),o.default.createElement(s.SectionField,{text:"Mesh"},o.default.createElement(l.Dropdown,{selectedItemId:n,onChange:i,options:d})))})))},function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||t.hasOwnProperty(n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),o(n(59),t),o(n(11),t),o(n(71),t)},function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||t.hasOwnProperty(n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),o(n(60),t),o(n(69),t)},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.VirtualizedList=void 0;var o=r(n(0)),i=n(39),a=n(11),u=o.default.memo((function(e){var t=e.index,n=e.style,r=e.data.itemRenderer;return o.default.createElement("div",{style:n},r(t))}));t.VirtualizedList=function(e){var t=e.itemCount,n=e.itemHeight,r=e.maxHeight,l=e.itemRenderer,s=e.width,c=void 0===s?"100%":s,f=e.className,d=Math.min(t*n,r),p=o.default.useMemo((function(){return{itemRenderer:l}}),[l]),h=o.default.useRef(null);return a.useScrollListToIndex(h,e.highlightedIndex),o.default.createElement(i.FixedSizeList,{className:f,ref:h,height:d,itemCount:t,itemSize:n,width:c,itemData:p},u)}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useDropdownState=void 0;var o=r(n(0)),i=n(31),a=n(18),u=n(30),l={selectedIndexes:[],highlightedIndex:null,isOpen:!1},s=function(e,t,n){return i.reducer(e,t,n)};t.useDropdownState=function(e,t,n,r,i){void 0===i&&(i=s);var c=o.default.useCallback((function(t,n){return i(t,e,n)}),[e,i]),f=n?a.overrideDefinedPropsOnly(l,n):l;return u.useUnionState(f,t,c,r)}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useScrollListToIndex=void 0;var o=r(n(0)),i=n(32);t.useScrollListToIndex=function(e,t){o.default.useEffect((function(){if(null!==t&&e.current){var n=e.current;(i.hasProperty(n,"_listRef")?n._listRef:n).scrollToItem(t,"smart")}}),[t])}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useDropdownCloseWhenClickedOutside=void 0;var o=r(n(0)),i=n(11);t.useDropdownCloseWhenClickedOutside=function(e,t){var n=o.default.useCallback((function(){return t(["CloseList"])}),[t]);i.useClickedOutsideHandler(e,n)}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useDropdownCloseWhenFocusOut=void 0;var o=r(n(0)),i=n(33);t.useDropdownCloseWhenFocusOut=function(e,t){var n=o.default.useCallback((function(){return t(["CloseList"])}),[t]);i.useFocusOutHandler(e,n)}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useFocusOnStateChange=void 0;var o=r(n(0)),i=n(34);t.useFocusOnStateChange=function(e,t,n){var r=o.default.useRef(!0),a=i.usePreviousValue(t);o.default.useEffect((function(){t===a||t!==n||r.current||null!==e.current&&e.current.focus(),r.current=!1}),[t])}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useClickedOutsideHandler=void 0;var o=r(n(0));t.useClickedOutsideHandler=function(e,t){o.default.useEffect((function(){function n(n){var r;(null===(r=e.current)||void 0===r?void 0:r.contains(n.target))||t()}return document.addEventListener("mousedown",n),function(){document.removeEventListener("mousedown",n)}}),[t])}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useChunkLoader=void 0;var o=r(n(0));t.useChunkLoader=function(e,t){var n=o.default.useMemo((function(){return Array(e).fill({value:null,isLoaded:!1})}),[e]),r=o.default.useCallback((function(e){return n[e].isLoaded}),[n]),i=o.default.useCallback((function(e,r){return t(e,r).then((function(t){for(var o=e,i=0;o<=r;o++,i++)n[o]={value:t[i],isLoaded:!0}}))}),[n]);return{items:n,isItemLoaded:r,loadMoreItems:i}}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useDropdownListKeyboardNavigator=void 0;var o=r(n(0)),i=n(35);t.useDropdownListKeyboardNavigator=function(e){return o.default.useMemo((function(){return i.createListKeyboardNavigator(e)}),[e])}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.VirtualizedLazyLoadingList=void 0;var o=r(n(0)),i=n(39),a=n(11),u=r(n(70)),l=o.default.memo((function(e){var t=e.index,n=e.style,r=e.data,i=r.itemRenderer,a=r.isItemLoaded;return o.default.createElement("div",{style:n},i(t,a(t)))}));t.VirtualizedLazyLoadingList=function(e){var t=e.itemCount,n=e.itemHeight,r=e.maxHeight,s=e.itemRenderer,c=e.width,f=void 0===c?"100%":c,d=e.isItemLoaded,p=e.loadMoreItems,h=e.highlightedIndex,m=e.className,v=Math.min(t*n,r),g=o.default.useMemo((function(){return{itemRenderer:s,isItemLoaded:d}}),[s,d]),y=o.default.useRef(null);return a.useScrollListToIndex(y,h),o.default.createElement(u.default,{ref:y,isItemLoaded:d,itemCount:t,loadMoreItems:p},(function(e){var r=e.onItemsRendered,a=e.ref;return o.default.createElement(i.FixedSizeList,{className:m,ref:a,height:v,itemCount:t,itemSize:n,onItemsRendered:r,width:f,itemData:g},l)}))}},function(e,t,n){"use strict";n.r(t);var r=n(0);var o=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t},u=function(e){function t(){var e,n,r;o(this,t);for(var i=arguments.length,u=Array(i),l=0;l<i;l++)u[l]=arguments[l];return n=r=a(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(u))),r._lastRenderedStartIndex=-1,r._lastRenderedStopIndex=-1,r._memoizedUnloadedRanges=[],r._onItemsRendered=function(e){var t=e.visibleStartIndex,n=e.visibleStopIndex;r._lastRenderedStartIndex=t,r._lastRenderedStopIndex=n,r._ensureRowsLoaded(t,n)},r._setRef=function(e){r._listRef=e},a(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),i(t,[{key:"resetloadMoreItemsCache",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];this._memoizedUnloadedRanges=[],e&&this._ensureRowsLoaded(this._lastRenderedStartIndex,this._lastRenderedStopIndex)}},{key:"componentDidMount",value:function(){0}},{key:"render",value:function(){return(0,this.props.children)({onItemsRendered:this._onItemsRendered,ref:this._setRef})}},{key:"_ensureRowsLoaded",value:function(e,t){var n=this.props,r=n.isItemLoaded,o=n.itemCount,i=n.minimumBatchSize,a=void 0===i?10:i,u=n.threshold,l=void 0===u?15:u,s=function(e){for(var t=e.isItemLoaded,n=e.itemCount,r=e.minimumBatchSize,o=e.startIndex,i=e.stopIndex,a=[],u=null,l=null,s=o;s<=i;s++){t(s)?null!==l&&(a.push(u,l),u=l=null):(l=s,null===u&&(u=s))}if(null!==l){for(var c=Math.min(Math.max(l,u+r-1),n-1),f=l+1;f<=c&&!t(f);f++)l=f;a.push(u,l)}if(a.length)for(;a[1]-a[0]+1<r&&a[0]>0;){var d=a[0]-1;if(t(d))break;a[0]=d}return a}({isItemLoaded:r,itemCount:o,minimumBatchSize:a,startIndex:Math.max(0,e-l),stopIndex:Math.min(o-1,t+l)});(this._memoizedUnloadedRanges.length!==s.length||this._memoizedUnloadedRanges.some((function(e,t){return s[t]!==e})))&&(this._memoizedUnloadedRanges=s,this._loadUnloadedRanges(s))}},{key:"_loadUnloadedRanges",value:function(e){for(var t=this,n=this.props.loadMoreItems||this.props.loadMoreRows,r=function(r){var o=e[r],i=e[r+1],a=n(o,i);null!=a&&a.then((function(){if(function(e){var t=e.lastRenderedStartIndex,n=e.lastRenderedStopIndex,r=e.startIndex,o=e.stopIndex;return!(r>n||o<t)}({lastRenderedStartIndex:t._lastRenderedStartIndex,lastRenderedStopIndex:t._lastRenderedStopIndex,startIndex:o,stopIndex:i})){if(null==t._listRef)return;"function"==typeof t._listRef.resetAfterIndex?t._listRef.resetAfterIndex(o,!0):("function"==typeof t._listRef._getItemStyleCache&&t._listRef._getItemStyleCache(-1),t._listRef.forceUpdate())}}))},o=0;o<e.length;o+=2)r(o)}}]),t}(r.PureComponent);t.default=u},function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||t.hasOwnProperty(n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),o(n(72),t),o(n(73),t),o(n(35),t),o(n(31),t),o(n(74),t)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ShadersSelectorSection=void 0;var o=r(n(0)),i=n(2),a=n(16),u=n(76),l=n(5),s=n(6),c=n(7),f=n(8);t.ShadersSelectorSection=o.default.memo(i.connect((function(e){return{selectedVertexFileId:e.vertexFilePath,selectedFragmentFileId:e.fragmentFilePath}}),(function(e){return{setSelectedVertexFileId:function(t){return e({type:"SET_VERTEX_FILE_PATH",payload:{path:t}})},setSelectedFragmentFileId:function(t){return e({type:"SET_FRAGMENT_FILE_PATH",payload:{path:t}})}}}))((function(e){var t=e.selectedVertexFileId,n=e.selectedFragmentFileId,r=e.setSelectedVertexFileId,i=e.setSelectedFragmentFileId,d=o.default.useState([]),p=d[0],h=d[1],m=o.default.useCallback((function(){a.viewerEndpoint.getWorkspaceFilesOfTypes(u.shaderExtensions).then((function(e){h(e.map((function(e){return{id:e.filePath,display:e.fileName}})))}))}),[]);return o.default.useEffect((function(){return m()}),[]),o.default.createElement("div",{className:"viewer-options-section"},o.default.createElement(f.SectionTitle,{text:l.translations.shaders},o.default.createElement("button",{onClick:m},"Sync")),o.default.createElement(c.SectionField,{text:l.translations.vertexShader},o.default.createElement(s.Dropdown,{selectedItemId:t,onChange:r,options:p})),o.default.createElement(c.SectionField,{text:l.translations.fragmentShader},o.default.createElement(s.Dropdown,{selectedItemId:n,onChange:i,options:p})))})))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.defaultTextureUrl=t.customOptionId=t.extensionTextures=t.imageExtensions=t.shaderExtensions=void 0,t.shaderExtensions=["glsl"],t.imageExtensions=["jpg","bmp"],t.extensionTextures=["texture1.jpg","texture2.jpg"],t.customOptionId="custom",t.defaultTextureUrl="https://raw.githubusercontent.com/mateuszmigas/webgl-shader-viewer/main/docs/images/screenshot1.jpg"},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.TextureSection=void 0;var i=o(n(0)),a=n(2),u=n(5),l=n(7),s=n(8),c=n(78);t.TextureSection=i.default.memo(a.connect((function(e){return{values:e.textureValues}}))((function(e){var t=e.textureFields;return i.default.createElement("div",{className:"viewer-options-section"},i.default.createElement(s.SectionTitle,{text:u.translations.textures}),t.map((function(e){return i.default.createElement(l.SectionField,{text:e.name},i.default.createElement(c.TextureField,r({},e)))})))})))},function(e,t,n){"use strict";var r=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],a=0,u=i.length;a<u;a++,o++)r[o]=i[a];return r},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.TextureField=void 0;var i=o(n(0)),a=n(2),u=n(9),l=n(6),s=n(79);t.TextureField=i.default.memo(a.connect((function(e,t){return e.textureValues[t.name]}),(function(e,t){return{setOptionAndValue:function(e,t){}}}))((function(e){var t=e.optionId,n=e.value,o=e.setOptionAndValue,a=i.default.useMemo((function(){return r([u.customOption],s.getBindingOptions())}),[]);u.customOption.id;return i.default.createElement("div",null,a.length>1&&i.default.createElement(l.Dropdown,{selectedItemId:t,onChange:function(e){return o(e,n)},options:a}),i.default.createElement("div",null,"dupa"))})))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getBindingOptions=t.getBindingValue=t.bindingNames=t.textureBindings=void 0,t.textureBindings={texture1:{display:"tes 1",value:"fsefsfs"},texture2:{display:"tex 22",value:"aefaef"}},t.bindingNames=new Set(Object.keys(t.textureBindings));t.getBindingValue=function(e){return t.textureBindings[e].value};t.getBindingOptions=function(){return Object.entries(t.textureBindings).map((function(e){return{id:e[0],display:e[1].display}}))}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.UniformSection=void 0;var i=o(n(0)),a=n(2),u=n(5),l=n(7),s=n(8),c=n(81);t.UniformSection=i.default.memo(a.connect((function(e){return{values:e.uniformValues}}))((function(e){var t=e.uniformFields;return i.default.createElement("div",{className:"viewer-options-section"},i.default.createElement(s.SectionTitle,{text:u.translations.uniforms}),t.map((function(e){return i.default.createElement(l.SectionField,{text:e.name},i.default.createElement(c.UniformField,r({},e)))})))})))},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],a=0,u=i.length;a<u;a++,o++)r[o]=i[a];return r},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.UniformField=void 0;var a=i(n(0)),u=n(2),l=n(12),s=n(82),c=n(9),f=n(6),d=n(87),p=n(88);t.UniformField=a.default.memo(u.connect((function(e,t){var n=e.uniformValues[t.name];return(null==n?void 0:n.type)===t.type?n:p.getDefaultProps(t.type)}),(function(e,t){return{setOptionAndValue:function(n,o){e({type:"SET_UNIFORM",payload:r(r({},t),{optionId:n,value:o})})}}}))((function(e){var t=e.type,n=e.optionId,i=e.value,u=e.setOptionAndValue,p=a.default.useMemo((function(){return o([c.customOption],d.getBindingOptions(t))}),[t]),h=n===c.customOption.id;return a.default.createElement("div",null,p.length>1&&a.default.createElement(f.Dropdown,{selectedItemId:n,onChange:function(e){return u(e,i)},options:p}),function(e,t){switch(e){case l.UniformType.FLOAT_VEC2:return a.default.createElement(s.Vector2NumberInput,r({},t));case l.UniformType.FLOAT_VEC3:return a.default.createElement(s.Vector3NumberInput,r({},t));case l.UniformType.FLOAT_VEC4:return a.default.createElement(s.Vector4NumberInput,r({},t));case l.UniformType.FLOAT_MAT4:return a.default.createElement(s.Matrix4x4NumberInput,r({},t));default:return a.default.createElement("div",null,"Uniform not supported")}}(t,{value:i,onChange:h?function(e){return u(n,e)}:void 0,readonly:!h}))})))},function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),o(n(83),t),o(n(84),t),o(n(85),t),o(n(86),t)},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Matrix4x4NumberInput=void 0;var i=o(n(0)),a=n(4),u=n(13),l=a.repeat(16,0);t.Matrix4x4NumberInput=function(e){var t;return i.default.createElement(u.MultiNumberInput,r({},e,{rows:4,columns:4,value:null!==(t=e.value)&&void 0!==t?t:l}))}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Vector2NumberInput=void 0;var i=o(n(0)),a=n(13),u=[0,0];t.Vector2NumberInput=function(e){var t;return i.default.createElement(a.MultiNumberInput,r({},e,{rows:1,columns:2,value:null!==(t=e.value)&&void 0!==t?t:u}))}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Vector3NumberInput=void 0;var i=o(n(0)),a=n(13),u=[0,0,0];t.Vector3NumberInput=function(e){var t;return i.default.createElement(a.MultiNumberInput,r({},e,{rows:1,columns:3,value:null!==(t=e.value)&&void 0!==t?t:u}))}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Vector4NumberInput=void 0;var i=o(n(0)),a=n(13),u=[0,0,0,0];t.Vector4NumberInput=function(e){var t;return i.default.createElement(a.MultiNumberInput,r({},e,{rows:1,columns:4,value:null!==(t=e.value)&&void 0!==t?t:u}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getBindingOptions=t.uniformBindings=void 0;var r=n(91),o=n(12),i=n(92);t.uniformBindings=new Map([["perspectiveCamera",{type:o.UniformType.FLOAT_MAT4,display:"Binding - Perspective Camera",getValue:function(e,t){return function(e,t){var n=45*Math.PI/180,o=t.width/t.height,a=i.mat4.create();i.mat4.perspective(a,n,o,.1,100);var u=i.mat4.create(),l=r.cameraPositionToVector3(e);i.mat4.lookAt(u,[l.x,l.y,l.z],[0,0,0],[0,1,0]);var s=i.mat4.create();return i.mat4.multiply(s,a,u),Array.from(s)}(e,t)}}]]);t.getBindingOptions=function(e){return Array.from(t.uniformBindings.entries()).filter((function(t){t[0];return t[1].type===e})).map((function(e){return{id:e[0],display:e[1].display}}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getDefaultProps=void 0;var r=n(4),o=n(10),i=n(12),a=n(9),u=function(e){switch(e){case i.UniformType.FLOAT_VEC2:return r.repeat(2,1);case i.UniformType.FLOAT_VEC3:return r.repeat(3,1);case i.UniformType.FLOAT_VEC4:return r.repeat(4,1);case i.UniformType.FLOAT_MAT4:return[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];default:o.assertNever(e)}};t.getDefaultProps=function(e){return{optionId:a.customOption.id,value:u(e)}}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ShadersCompileResultArea=void 0;var o=r(n(0));t.ShadersCompileResultArea=function(e){return o.default.createElement("div",{className:"shader-compile-errors-area"},e.errors)}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.usePerspectiveCamera=void 0;var i=o(n(0)),a=n(91);t.usePerspectiveCamera=function(e,t,n){i.default.useEffect((function(){if(e){var o=r({},t),i=new a.CameraPositionManipulator(e,(function(){return o}),(function(e){o=e,n(e)}));return function(){return i.dispose()}}}),[e])}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.CameraPositionManipulator=t.cameraPositionToVector3=void 0;t.cameraPositionToVector3=function(e){var t=e.radius*Math.sin(e.latitude),n=e.radius*Math.cos(e.latitude),r=n*Math.cos(e.longitude);return{x:n*Math.sin(e.longitude),y:t,z:r}};var o=function(e){return Math.min(Math.max(e,1),10)},i=function(){function e(e,t,n){var i=this;this.element=e,this.positionProvider=t,this.onPositionChange=n,this.pointerPosition={x:0,y:0},this.eventListeners=new Map,this.isMoving=!1,this.dispatchAction=function(e){var t=function(e,t){switch(t.type){case"orbitRotate":return r(r({},e),{latitude:(i=e.latitude+t.deltaLatitude,Math.min(Math.max(i,-Math.PI/2+.1),Math.PI/2-.1)),longitude:(n=e.longitude+t.deltaLongitude,n>Math.PI?n-2*Math.PI:n<-Math.PI?n+2*Math.PI:n)});case"zoomInAt":return r(r({},e),{radius:o(e.radius-.1)});case"zoomOutAt":return r(r({},e),{radius:o(e.radius+.1)});default:return e}var n,i}(i.positionProvider(),e);i.onPositionChange(t)},this.onMouseDown=function(e){0===e.button&&(i.pointerPosition={x:e.offsetX,y:e.offsetY},i.isMoving=!0)},this.onMouseMove=function(e){if(i.isMoving){i.dispatchAction({type:"orbitRotate",deltaLongitude:.01*-(e.offsetX-i.pointerPosition.x),deltaLatitude:.01*(e.offsetY-i.pointerPosition.y)})}i.pointerPosition={x:e.offsetX,y:e.offsetY}},this.onMouseUp=function(){i.isMoving=!1},this.onMouseLeave=function(){i.isMoving=!1},this.onWheel=function(e){var t=e.deltaY<0?"zoomInAt":"zoomOutAt";i.dispatchAction({type:t})},this.registerEvent("mousedown",this.onMouseDown),this.registerEvent("mousemove",this.onMouseMove),this.registerEvent("mouseup",this.onMouseUp),this.registerEvent("mouseleave",this.onMouseLeave),this.registerEvent("wheel",this.onWheel)}return e.prototype.dispose=function(){var e=this;this.eventListeners.forEach((function(t,n){return e.element.removeEventListener(n,t)}))},e.prototype.registerEvent=function(e,t){this.element.addEventListener(e,t),this.eventListeners.set(e,t)},e}();t.CameraPositionManipulator=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.mat4=t.isPowerOf2=void 0;t.isPowerOf2=function(e){return 0==(e&e-1)},function(e){e.create=function(){var e=new Float32Array(16);return e[0]=1,e[5]=1,e[10]=1,e[15]=1,e},e.perspective=function(e,t,n,r,o){var i,a=1/Math.tan(t/2);return e[0]=a/n,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=a,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,null!=o&&o!==1/0?(i=1/(r-o),e[10]=(o+r)*i,e[14]=2*o*r*i):(e[10]=-1,e[14]=-2*r),e},e.lookAt=function(e,t,n,r){var o,i,a,u,l,s,c,f,d,p,h=t[0],m=t[1],v=t[2],g=r[0],y=r[1],b=r[2],w=n[0],_=n[1],S=n[2];return Math.abs(h-w)<1e-6&&Math.abs(m-_)<1e-6&&Math.abs(v-S)<1e-6?function(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}(e):(c=h-w,f=m-_,d=v-S,o=y*(d*=p=1/Math.hypot(c,f,d))-b*(f*=p),i=b*(c*=p)-g*d,a=g*f-y*c,(p=Math.hypot(o,i,a))?(o*=p=1/p,i*=p,a*=p):(o=0,i=0,a=0),u=f*a-d*i,l=d*o-c*a,s=c*i-f*o,(p=Math.hypot(u,l,s))?(u*=p=1/p,l*=p,s*=p):(u=0,l=0,s=0),e[0]=o,e[1]=u,e[2]=c,e[3]=0,e[4]=i,e[5]=l,e[6]=f,e[7]=0,e[8]=a,e[9]=s,e[10]=d,e[11]=0,e[12]=-(o*h+i*m+a*v),e[13]=-(u*h+l*m+s*v),e[14]=-(c*h+f*m+d*v),e[15]=1,e)},e.multiply=function(e,t,n){var r=t[0],o=t[1],i=t[2],a=t[3],u=t[4],l=t[5],s=t[6],c=t[7],f=t[8],d=t[9],p=t[10],h=t[11],m=t[12],v=t[13],g=t[14],y=t[15],b=n[0],w=n[1],_=n[2],S=n[3];return e[0]=b*r+w*u+_*f+S*m,e[1]=b*o+w*l+_*d+S*v,e[2]=b*i+w*s+_*p+S*g,e[3]=b*a+w*c+_*h+S*y,b=n[4],w=n[5],_=n[6],S=n[7],e[4]=b*r+w*u+_*f+S*m,e[5]=b*o+w*l+_*d+S*v,e[6]=b*i+w*s+_*p+S*g,e[7]=b*a+w*c+_*h+S*y,b=n[8],w=n[9],_=n[10],S=n[11],e[8]=b*r+w*u+_*f+S*m,e[9]=b*o+w*l+_*d+S*v,e[10]=b*i+w*s+_*p+S*g,e[11]=b*a+w*c+_*h+S*y,b=n[12],w=n[13],_=n[14],S=n[15],e[12]=b*r+w*u+_*f+S*m,e[13]=b*o+w*l+_*d+S*v,e[14]=b*i+w*s+_*p+S*g,e[15]=b*a+w*c+_*h+S*y,e}}(t.mat4||(t.mat4={}))},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useDocumentWatcher=void 0;var o=r(n(0)),i=n(16);t.useDocumentWatcher=function(e,t){o.default.useEffect((function(){var n=i.viewerEndpoint.subscribeToDocumentSave(e,t);return i.viewerEndpoint.getDocumentText(e).then(t),function(){return n()}}),[e])}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.AttributeBuffersSection=void 0;var i=o(n(0)),a=n(2),u=n(5),l=n(7),s=n(8),c=n(95);t.AttributeBuffersSection=i.default.memo(a.connect((function(e){return{values:e.attributeBufferValues}}))((function(e){var t=e.attributeBufferFields;return i.default.createElement("div",{className:"viewer-options-section"},i.default.createElement(s.SectionTitle,{text:u.translations.attributeBuffers}),t.map((function(e){return i.default.createElement(l.SectionField,{key:e.name,text:e.name},i.default.createElement(c.AttributeBufferField,r({},e)))})))})))},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],a=0,u=i.length;a<u;a++,o++)r[o]=i[a];return r},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.AttributeBufferField=void 0;var a=i(n(0)),u=n(2),l=n(15),s=n(17),c=n(96),f=n(9),d=n(6),p=n(27),h=n(97);t.AttributeBufferField=a.default.memo(u.connect((function(e,t){var n=e.attributeBufferValues[t.name];return{state:(null==n?void 0:n.type)===t.type?n:h.getDefaultProps(t.type)}}),(function(e,t){return{setState:function(n){e({type:"SET_ATTRIBUTE_BUFFER",payload:r(r({},t),n)})}}}))((function(e){var t=e.name,n=e.type,i=e.state,u=e.setState,h=i.value,m=i.optionId,v=a.default.useMemo((function(){return o([f.customOption],p.getBindingOptions(n))}),[n]),g=m===f.customOption.id;return a.default.createElement("div",null,v.length>1&&a.default.createElement(d.Dropdown,{selectedItemId:m,onChange:function(e){return u(r(r({},i),{optionId:e}))},options:v}),function(e,t){switch(e){case l.AttributeBufferType.FLOAT_VEC2:return a.default.createElement(c.ArrayNumberInput,r({},t,{elementSize:2}));case l.AttributeBufferType.FLOAT_VEC3:return a.default.createElement(c.ArrayNumberInput,r({},t,{elementSize:3}));case l.AttributeBufferType.FLOAT_VEC4:return a.default.createElement(c.ArrayNumberInput,r({},t,{elementSize:4}));default:return a.default.createElement("div",null,"Uniform not supported")}}(n,{value:h,onChange:g?function(e,t){return u(r(r({},i),{value:e,isValid:t}))}:void 0,onBlur:function(e){return s.getAttributeBufferInfo(t,n).attributeBufferInfo.setValue(e)},readonly:!g}))})))},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ArrayNumberInput=void 0;var o=r(n(0));t.ArrayNumberInput=o.default.memo((function(e){var t=e.value,n=e.elementSize,r=e.readonly,i=o.default.useRef(""),a=o.default.useCallback((function(t){var r="";try{var o=JSON.parse(t.target.value);if(Array.isArray(o))o.every((function(e){return!!Array.isArray(e)&&e.length===n}))||(r="not every element id the arra is same size");else r="this is not an array type"}catch(e){r="this is not a valid format"}i.current=r,e.onChange(t.target.value,!r)}),[n]),u=o.default.useCallback((function(){!i.current&&e.onBlur(JSON.parse(t))}),[t]);return o.default.createElement("div",null,o.default.createElement("input",{className:"edit-input",disabled:r,value:t,onChange:a,onBlur:u}),i.current&&o.default.createElement("div",null,i.current))}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getDefaultProps=void 0;var r=n(9);t.getDefaultProps=function(e){return{optionId:r.customOption.id,value:"[]",isValid:!0}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.safeJSONParse=void 0;t.safeJSONParse=function(e){try{return JSON.parse(e)}catch(e){return null}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.objectMap=void 0;t.objectMap=function(e,t){return Object.keys(e).reduce((function(n,r){return n[r]=t(e[r],r),n}),{})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL0NvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvYmF0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvU3Vic2NyaXB0aW9uLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9zaGFsbG93RXF1YWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC93cmFwTWFwVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L21hcERpc3BhdGNoVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L21hcFN0YXRlVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L21lcmdlUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9zZWxlY3RvckZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9jb25uZWN0LmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2hvb2tzL3VzZVJlZHV4Q29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9ob29rcy91c2VTdG9yZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9ob29rcy91c2VEaXNwYXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9ob29rcy91c2VTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21tb24vYXJyYXkudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvdHJhbnNsYXRpb25zLnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvc3JjL2NvbXBvbmVudHMvRHJvcGRvd24udHN4Iiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvc3JjL2NvbXBvbmVudHMvU2VjdGlvbkZpZWxkLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL3NyYy9jb21wb25lbnRzL1NlY3Rpb25UaXRsZS50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvY29tcG9uZW50cy9jb21tb24vY29uc3RhbnRzLnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvc3JjL3V0aWxzL3R5cGVHdWFyZHMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9ub2RlX21vZHVsZXMvQG1hdGV1c3ptaWdhcy9yZWFjdC1kcm9wZG93bi9saWIvSG9va3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvdXRpbHMvd2ViZ2wvdW5pZm9ybS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL3NyYy9jb21wb25lbnRzL2NvbW1vbi9NdWx0aU51bWJlcklucHV0LnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvdXRpbHMvd2ViZ2wvYXR0cmlidXRlQnVmZmVyLnRzIiwid2VicGFjazovLy8uL3NyYy9jb21tb24vY29tbXVuaWNhdGlvbi92aWV3ZXJFbmRwb2ludC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL3NyYy91dGlscy93ZWJnbC9hdHRyaWJ1dGVCdWZmZXJTdG9yZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9AbWF0ZXVzem1pZ2FzL3JlYWN0LWRyb3Bkb3duL2xpYi9Db21tb24vaGVscGVycy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9yZWR1eC9lcy9yZWR1eC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9zeW1ib2wtb2JzZXJ2YWJsZS9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9kaXN0L2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzLmNqcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL3NyYy9pbmRleC50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2V4dGVuc2lvblN0YXRlLnRzIiwid2VicGFjazovLy8uL3NyYy9jb21tb24vY29tbXVuaWNhdGlvbi92c2NvZGVBcGkudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvY29tcG9uZW50cy9hdHRyaWJ1dGVCdWZmZXJzL2F0dHJpYnV0ZUJ1ZmZlckJpbmRpbmdzLnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvc3JjL21lc2hlcy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL3NyYy91dGlscy9jb21wb3NpdGVLZXlNYXAudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9ub2RlX21vZHVsZXMvQG1hdGV1c3ptaWdhcy9yZWFjdC1kcm9wZG93bi9saWIvSG9va3MvdXNlVW5pb25TdGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9AbWF0ZXVzem1pZ2FzL3JlYWN0LWRyb3Bkb3duL2xpYi9Db21tb24vcmVkdWNlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9AbWF0ZXVzem1pZ2FzL3JlYWN0LWRyb3Bkb3duL2xpYi9Db21tb24vdHlwZU5hcnJvd2luZy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9AbWF0ZXVzem1pZ2FzL3JlYWN0LWRyb3Bkb3duL2xpYi9Ib29rcy91c2VGb2N1c091dEhhbmRsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9ub2RlX21vZHVsZXMvQG1hdGV1c3ptaWdhcy9yZWFjdC1kcm9wZG93bi9saWIvSG9va3MvdXNlUHJldmlvdXNWYWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9AbWF0ZXVzem1pZ2FzL3JlYWN0LWRyb3Bkb3duL2xpYi9Db21tb24va2V5Ym9hcmROYXZpZ2F0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvdXRpbHMvd2ViZ2wvdW5pZm9ybVN0b3JlLnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvc3JjL3V0aWxzL3dlYmdsL3N0b3JlV2F0Y2hlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL3NyYy91dGlscy9mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9tZW1vaXplLW9uZS9kaXN0L21lbW9pemUtb25lLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9yZWFjdC13aW5kb3cvZGlzdC9pbmRleC5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvcG9ueWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9oYXJtb255LW1vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL3NyYy9zdG9yZS9yZWR1Y2VyLnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvc3JjL2NvbXBvbmVudHMvVmlld2VyLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL3V1aWQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvdXRpbHMvaHRtbC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL3NyYy91dGlscy93ZWJnbC9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL3NyYy91dGlscy93ZWJnbC9pbmRleEJ1ZmZlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL3NyYy9jb21wb25lbnRzL0RyYXdPcHRpb25zU2VjdGlvbi50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9ub2RlX21vZHVsZXMvQG1hdGV1c3ptaWdhcy9yZWFjdC1kcm9wZG93bi9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9ub2RlX21vZHVsZXMvQG1hdGV1c3ptaWdhcy9yZWFjdC1kcm9wZG93bi9saWIvQ29tcG9uZW50cy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9AbWF0ZXVzem1pZ2FzL3JlYWN0LWRyb3Bkb3duL2xpYi9Db21wb25lbnRzL1ZpcnR1YWxpemVkTGlzdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9AbWF0ZXVzem1pZ2FzL3JlYWN0LWRyb3Bkb3duL2xpYi9Ib29rcy91c2VEcm9wZG93blN0YXRlLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvbm9kZV9tb2R1bGVzL0BtYXRldXN6bWlnYXMvcmVhY3QtZHJvcGRvd24vbGliL0hvb2tzL3VzZVNjcm9sbExpc3RUb0luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvbm9kZV9tb2R1bGVzL0BtYXRldXN6bWlnYXMvcmVhY3QtZHJvcGRvd24vbGliL0hvb2tzL3VzZURyb3Bkb3duQ2xvc2VXaGVuQ2xpY2tlZE91dHNpZGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9ub2RlX21vZHVsZXMvQG1hdGV1c3ptaWdhcy9yZWFjdC1kcm9wZG93bi9saWIvSG9va3MvdXNlRHJvcGRvd25DbG9zZVdoZW5Gb2N1c091dC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9AbWF0ZXVzem1pZ2FzL3JlYWN0LWRyb3Bkb3duL2xpYi9Ib29rcy91c2VGb2N1c09uU3RhdGVDaGFuZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9ub2RlX21vZHVsZXMvQG1hdGV1c3ptaWdhcy9yZWFjdC1kcm9wZG93bi9saWIvSG9va3MvdXNlQ2xpY2tlZE91dHNpZGVIYW5kbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvbm9kZV9tb2R1bGVzL0BtYXRldXN6bWlnYXMvcmVhY3QtZHJvcGRvd24vbGliL0hvb2tzL3VzZUNodW5rTG9hZGVyLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvbm9kZV9tb2R1bGVzL0BtYXRldXN6bWlnYXMvcmVhY3QtZHJvcGRvd24vbGliL0hvb2tzL3VzZURyb3Bkb3duTGlzdEtleWJvYXJkTmF2aWdhdG9yLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvbm9kZV9tb2R1bGVzL0BtYXRldXN6bWlnYXMvcmVhY3QtZHJvcGRvd24vbGliL0NvbXBvbmVudHMvVmlydHVhbGl6ZWRMYXp5TG9hZGluZ0xpc3QuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9ub2RlX21vZHVsZXMvcmVhY3Qtd2luZG93LWluZmluaXRlLWxvYWRlci9kaXN0L2luZGV4LmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL25vZGVfbW9kdWxlcy9AbWF0ZXVzem1pZ2FzL3JlYWN0LWRyb3Bkb3duL2xpYi9Db21tb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9ub2RlX21vZHVsZXMvQG1hdGV1c3ptaWdhcy9yZWFjdC1kcm9wZG93bi9saWIvQ29tbW9uL2FjdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9ub2RlX21vZHVsZXMvQG1hdGV1c3ptaWdhcy9yZWFjdC1kcm9wZG93bi9saWIvQ29tbW9uL2Rpc3BhdGNoLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvbm9kZV9tb2R1bGVzL0BtYXRldXN6bWlnYXMvcmVhY3QtZHJvcGRvd24vbGliL0NvbW1vbi9zdGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL3NyYy9jb21wb25lbnRzL1NoYWRlcnNTZWxlY3RvclNlY3Rpb24udHN4Iiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvc3JjL2NvbnN0YW50cy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL3NyYy9jb21wb25lbnRzL3RleHR1cmVzL1RleHR1cmVzU2VjdGlvbi50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvY29tcG9uZW50cy90ZXh0dXJlcy9UZXh0dXJlRmllbGQudHN4Iiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvc3JjL2NvbXBvbmVudHMvdGV4dHVyZXMvdGV4dHVyZUJpbmRpbmdzLnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvc3JjL2NvbXBvbmVudHMvdW5pZm9ybXMvVW5pZm9ybXNTZWN0aW9uLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL3NyYy9jb21wb25lbnRzL3VuaWZvcm1zL1VuaWZvcm1GaWVsZC50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvY29tcG9uZW50cy9jb21tb24vaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvY29tcG9uZW50cy9jb21tb24vTWF0cml4NHg0TnVtYmVySW5wdXQudHN4Iiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvc3JjL2NvbXBvbmVudHMvY29tbW9uL1ZlY3RvcjJOdW1iZXJJbnB1dC50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvY29tcG9uZW50cy9jb21tb24vVmVjdG9yM051bWJlcklucHV0LnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL3NyYy9jb21wb25lbnRzL2NvbW1vbi9WZWN0b3I0TnVtYmVySW5wdXQudHN4Iiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvc3JjL2NvbXBvbmVudHMvdW5pZm9ybXMvdW5pZm9ybUJpbmRpbmdzLnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvc3JjL2NvbXBvbmVudHMvdW5pZm9ybXMvdW5pZm9ybVV0aWxzLnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvc3JjL2NvbXBvbmVudHMvU2hhZGVyc0NvbXBpbGVSZXN1bHRBcmVhLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL3NyYy9ob29rcy91c2VQZXJzcGVjdGl2ZUNhbWVyYS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL3NyYy91dGlscy9jYW1lcmFNYW5pcHVsYXRvci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL3NyYy91dGlscy9tYXRoLnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvc3JjL2hvb2tzL3VzZURvY3VtZW50V2F0Y2hlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld2VyL3NyYy9jb21wb25lbnRzL2F0dHJpYnV0ZUJ1ZmZlcnMvQXR0cmlidXRlQnVmZmVyc1NlY3Rpb24udHN4Iiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvc3JjL2NvbXBvbmVudHMvYXR0cmlidXRlQnVmZmVycy9BdHRyaWJ1dGVCdWZmZXJGaWVsZC50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvY29tcG9uZW50cy9jb21tb24vQXJyYXlOdW1iZXJJbnB1dC50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvY29tcG9uZW50cy9hdHRyaWJ1dGVCdWZmZXJzL2F0dHJpYnV0ZUJ1ZmZlclV0aWxzLnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3ZXIvc3JjL3V0aWxzL3BhcnNpbmcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdlci9zcmMvdXRpbHMvb2JqZWN0LnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJ0YXJnZXQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJhcHBseSIsInRoaXMiLCJSZWFjdFJlZHV4Q29udGV4dCIsImNyZWF0ZUNvbnRleHQiLCJjYWxsYmFjayIsIm51bGxMaXN0ZW5lcnMiLCJub3RpZnkiLCJjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24iLCJiYXRjaCIsImZpcnN0IiwibGFzdCIsImNsZWFyIiwibGlzdGVuZXIiLCJuZXh0IiwibGlzdGVuZXJzIiwicHVzaCIsInN1YnNjcmliZSIsImlzU3Vic2NyaWJlZCIsInByZXYiLCJTdWJzY3JpcHRpb24iLCJzdG9yZSIsInBhcmVudFN1YiIsInVuc3Vic2NyaWJlIiwiaGFuZGxlQ2hhbmdlV3JhcHBlciIsIl9wcm90byIsImFkZE5lc3RlZFN1YiIsInRyeVN1YnNjcmliZSIsIm5vdGlmeU5lc3RlZFN1YnMiLCJvblN0YXRlQ2hhbmdlIiwiQm9vbGVhbiIsInRyeVVuc3Vic2NyaWJlIiwiX3JlZiIsImNvbnRleHQiLCJjaGlsZHJlbiIsImNvbnRleHRWYWx1ZSIsInN1YnNjcmlwdGlvbiIsInByZXZpb3VzU3RhdGUiLCJnZXRTdGF0ZSIsIkNvbnRleHQiLCJjcmVhdGVFbGVtZW50IiwiUHJvdmlkZXIiLCJ1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0Iiwid2luZG93IiwiZG9jdW1lbnQiLCJFTVBUWV9BUlJBWSIsIk5PX1NVQlNDUklQVElPTl9BUlJBWSIsInN0b3JlU3RhdGVVcGRhdGVzUmVkdWNlciIsInN0YXRlIiwiYWN0aW9uIiwidXBkYXRlQ291bnQiLCJwYXlsb2FkIiwidXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdFdpdGhBcmdzIiwiZWZmZWN0RnVuYyIsImVmZmVjdEFyZ3MiLCJkZXBlbmRlbmNpZXMiLCJjYXB0dXJlV3JhcHBlclByb3BzIiwibGFzdFdyYXBwZXJQcm9wcyIsImxhc3RDaGlsZFByb3BzIiwicmVuZGVySXNTY2hlZHVsZWQiLCJ3cmFwcGVyUHJvcHMiLCJhY3R1YWxDaGlsZFByb3BzIiwiY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSIsImN1cnJlbnQiLCJzdWJzY3JpYmVVcGRhdGVzIiwic2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzIiwiY2hpbGRQcm9wc1NlbGVjdG9yIiwiZm9yY2VDb21wb25lbnRVcGRhdGVEaXNwYXRjaCIsImRpZFVuc3Vic2NyaWJlIiwibGFzdFRocm93bkVycm9yIiwiY2hlY2tGb3JVcGRhdGVzIiwibmV3Q2hpbGRQcm9wcyIsImVycm9yIiwibGF0ZXN0U3RvcmVTdGF0ZSIsImUiLCJ0eXBlIiwiaW5pdFN0YXRlVXBkYXRlcyIsImNvbm5lY3RBZHZhbmNlZCIsInNlbGVjdG9yRmFjdG9yeSIsIl9yZWYyIiwiX3JlZjIkZ2V0RGlzcGxheU5hbWUiLCJnZXREaXNwbGF5TmFtZSIsIl9yZWYyJG1ldGhvZE5hbWUiLCJtZXRob2ROYW1lIiwiX3JlZjIkcmVuZGVyQ291bnRQcm9wIiwicmVuZGVyQ291bnRQcm9wIiwidW5kZWZpbmVkIiwiX3JlZjIkc2hvdWxkSGFuZGxlU3RhIiwiX3JlZjIkc3RvcmVLZXkiLCJzdG9yZUtleSIsIl9yZWYyJGZvcndhcmRSZWYiLCJ3aXRoUmVmIiwiZm9yd2FyZFJlZiIsIl9yZWYyJGNvbnRleHQiLCJjb25uZWN0T3B0aW9ucyIsIldyYXBwZWRDb21wb25lbnQiLCJ3cmFwcGVkQ29tcG9uZW50TmFtZSIsImRpc3BsYXlOYW1lIiwic2VsZWN0b3JGYWN0b3J5T3B0aW9ucyIsInB1cmUiLCJ1c2VQdXJlT25seU1lbW8iLCJDb25uZWN0RnVuY3Rpb24iLCJwcm9wcyIsIl91c2VNZW1vIiwicmVhY3RSZWR1eEZvcndhcmRlZFJlZiIsInByb3BzQ29udGV4dCIsIkNvbnRleHRUb1VzZSIsIkNvbnN1bWVyIiwiZGlkU3RvcmVDb21lRnJvbVByb3BzIiwiZGlzcGF0Y2giLCJjcmVhdGVDaGlsZFNlbGVjdG9yIiwiX3VzZU1lbW8yIiwib3ZlcnJpZGRlbkNvbnRleHRWYWx1ZSIsIl91c2VSZWR1Y2VyIiwicHJldmlvdXNTdGF0ZVVwZGF0ZVJlc3VsdCIsInJlbmRlcmVkV3JhcHBlZENvbXBvbmVudCIsInJlZiIsIkNvbm5lY3QiLCJtZW1vIiwiZm9yd2FyZGVkIiwiaXMiLCJ4IiwieSIsInNoYWxsb3dFcXVhbCIsIm9iakEiLCJvYmpCIiwia2V5c0EiLCJrZXlzIiwia2V5c0IiLCJ3cmFwTWFwVG9Qcm9wc0NvbnN0YW50IiwiZ2V0Q29uc3RhbnQiLCJvcHRpb25zIiwiY29uc3RhbnQiLCJjb25zdGFudFNlbGVjdG9yIiwiZGVwZW5kc09uT3duUHJvcHMiLCJnZXREZXBlbmRzT25Pd25Qcm9wcyIsIm1hcFRvUHJvcHMiLCJ3cmFwTWFwVG9Qcm9wc0Z1bmMiLCJwcm94eSIsInN0YXRlT3JEaXNwYXRjaCIsIm93blByb3BzIiwibWFwRGlzcGF0Y2hUb1Byb3BzIiwibWFwU3RhdGVUb1Byb3BzIiwiZGVmYXVsdE1lcmdlUHJvcHMiLCJzdGF0ZVByb3BzIiwiZGlzcGF0Y2hQcm9wcyIsIm1lcmdlUHJvcHMiLCJtZXJnZWRQcm9wcyIsImFyZU1lcmdlZFByb3BzRXF1YWwiLCJoYXNSdW5PbmNlIiwibmV4dE1lcmdlZFByb3BzIiwid3JhcE1lcmdlUHJvcHNGdW5jIiwiaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsInB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IiwiYXJlU3RhdGVzRXF1YWwiLCJhcmVPd25Qcm9wc0VxdWFsIiwiYXJlU3RhdGVQcm9wc0VxdWFsIiwiaGFzUnVuQXRMZWFzdE9uY2UiLCJoYW5kbGVTdWJzZXF1ZW50Q2FsbHMiLCJuZXh0U3RhdGUiLCJuZXh0T3duUHJvcHMiLCJuZXh0U3RhdGVQcm9wcyIsInN0YXRlUHJvcHNDaGFuZ2VkIiwicHJvcHNDaGFuZ2VkIiwic3RhdGVDaGFuZ2VkIiwiZmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsImluaXRNYXBTdGF0ZVRvUHJvcHMiLCJpbml0TWFwRGlzcGF0Y2hUb1Byb3BzIiwiaW5pdE1lcmdlUHJvcHMiLCJtYXRjaCIsImFyZyIsImZhY3RvcmllcyIsInJlc3VsdCIsIkVycm9yIiwic3RyaWN0RXF1YWwiLCJhIiwiYiIsImNyZWF0ZUNvbm5lY3QiLCJfdGVtcCIsIl9yZWYkY29ubmVjdEhPQyIsImNvbm5lY3RIT0MiLCJfcmVmJG1hcFN0YXRlVG9Qcm9wc0YiLCJtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMiLCJfcmVmJG1hcERpc3BhdGNoVG9Qcm8iLCJtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMiLCJfcmVmJG1lcmdlUHJvcHNGYWN0b3IiLCJtZXJnZVByb3BzRmFjdG9yaWVzIiwiX3JlZiRzZWxlY3RvckZhY3RvcnkiLCJfcmVmMyIsIl9yZWYzJHB1cmUiLCJfcmVmMyRhcmVTdGF0ZXNFcXVhbCIsIl9yZWYzJGFyZU93blByb3BzRXF1YSIsIl9yZWYzJGFyZVN0YXRlUHJvcHNFcSIsIl9yZWYzJGFyZU1lcmdlZFByb3BzRSIsImV4dHJhT3B0aW9ucyIsImNyZWF0ZVN0b3JlSG9vayIsInVzZVJlZHV4Q29udGV4dCIsImNyZWF0ZURpc3BhdGNoSG9vayIsInVzZVN0b3JlIiwidXNlRGlzcGF0Y2giLCJyZWZFcXVhbGl0eSIsImNyZWF0ZVNlbGVjdG9ySG9vayIsInNlbGVjdG9yIiwiZXF1YWxpdHlGbiIsIl91c2VSZWR1eENvbnRleHQiLCJzZWxlY3RlZFN0YXRlIiwiY29udGV4dFN1YiIsImZvcmNlUmVuZGVyIiwibGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvciIsImxhdGVzdFNlbGVjdG9yIiwibGF0ZXN0U2VsZWN0ZWRTdGF0ZSIsInN0b3JlU3RhdGUiLCJlcnIiLCJtZXNzYWdlIiwic3RhY2siLCJuZXdTZWxlY3RlZFN0YXRlIiwidXNlU2VsZWN0b3JXaXRoU3RvcmVBbmRTdWJzY3JpcHRpb24iLCJuZXdCYXRjaCIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiZXhjbHVkZWQiLCJzb3VyY2VLZXlzIiwiaW5kZXhPZiIsInJlbW92ZSIsImFycmF5IiwiaXRlbSIsImluZGV4Iiwic3BsaWNlIiwicmVtb3ZlTGFzdCIsInRleHQiLCJjb3VudCIsInN1YnN0cmluZyIsInJhbmdlIiwiQXJyYXkiLCJpc0FycmF5IiwiZmlsbCIsIm1hcCIsIl8iLCJyZXBlYXQiLCJ0cmFuc2xhdGlvbnMiLCJzaGFkZXJzIiwidmVydGV4U2hhZGVyIiwiZnJhZ21lbnRTaGFkZXIiLCJkcmF3T3B0aW9ucyIsInRleHR1cmVzIiwidW5pZm9ybXMiLCJhdHRyaWJ1dGVCdWZmZXJzIiwiY3VzdG9tIiwiRHJvcGRvd24iLCJzZWxlY3RlZEl0ZW1JZCIsIm9uQ2hhbmdlIiwidXNlRHJvcGRvd25TdGF0ZSIsInNlbGVjdGVkSW5kZXhlcyIsImNoYW5nZXMiLCJpZCIsImZvdW5kSW5kZXgiLCJmaW5kSW5kZXgiLCJzZWxlY3RlZEluZGV4IiwiY29udGFpbmVyUmVmIiwidXNlUmVmIiwibGlzdFJlZiIsInVzZURyb3Bkb3duQ2xvc2VXaGVuQ2xpY2tlZE91dHNpZGUiLCJ1c2VGb2N1c09uU3RhdGVDaGFuZ2UiLCJpc09wZW4iLCJsaXN0S2V5Ym9hcmRIYW5kbGVyIiwidXNlRHJvcGRvd25MaXN0S2V5Ym9hcmROYXZpZ2F0b3IiLCJjbGFzc05hbWUiLCJEcm9wZG93bk1haW4iLCJzaG93Q2xlYXJCdXR0b24iLCJpdGVtUmVuZGVyZXIiLCJkaXNwbGF5Iiwib25LZXlEb3duIiwidGFiSW5kZXgiLCJWaXJ0dWFsaXplZExpc3QiLCJpdGVtQ291bnQiLCJpdGVtSGVpZ2h0IiwiaGlnaGxpZ2h0ZWRJbmRleCIsIm1heEhlaWdodCIsIkRyb3Bkb3duSXRlbSIsImlzU2VsZWN0ZWQiLCJpc0hpZ2hsaWdodGVkIiwiZHJvcGRvd25TZWxlY3RSZWYiLCJoYW5kbGVTZWxlY3QiLCJ1c2VDYWxsYmFjayIsImhhbmRsZUNsZWFyIiwib25DbGljayIsInN0eWxlIiwiU2VjdGlvbkZpZWxkIiwiU2VjdGlvblRpdGxlIiwiY3VzdG9tT3B0aW9uIiwiaGFzUHJvcGVydHkiLCJvYmoiLCJwcm9wIiwiYXNzZXJ0TmV2ZXIiLCJKU09OIiwic3RyaW5naWZ5IiwiX19jcmVhdGVCaW5kaW5nIiwiayIsImsyIiwiX19leHBvcnRTdGFyIiwiVW5pZm9ybVR5cGUiLCJwcm9ncmFtIiwiYXR0YWNoVG9Qcm9ncmFtIiwibG9jYXRpb24iLCJnZXRVbmlmb3JtTG9jYXRpb24iLCJzZXR0ZXIiLCJjcmVhdGVVbmlmb3JtU2V0dGVyIiwic2V0VmFsdWUiLCJuZXdWYWx1ZSIsInByZXBhcmVGb3JSZW5kZXIiLCJnZXRVbmlmb3JtVHlwZSIsImdldFVuaWZvcm1OYW1lIiwiZGlzcG9zZSIsIlVuaWZvcm1JbmZvIiwiRkxPQVRfVkVDMiIsInVuaWZvcm0yZiIsIkZMT0FUX1ZFQzMiLCJ1bmlmb3JtM2YiLCJGTE9BVF9WRUM0IiwidW5pZm9ybTRmIiwiRkxPQVRfTUFUNCIsInVuaWZvcm1NYXRyaXg0ZnYiLCJNdWx0aU51bWJlcklucHV0Iiwicm93cyIsImNvbHVtbnMiLCJyZWFkb25seSIsInJvdyIsImNvbHVtbiIsImRpc2FibGVkIiwidiIsIk51bWJlciIsImNoZWNrRENFIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiY29uc29sZSIsIkF0dHJpYnV0ZUJ1ZmZlclR5cGUiLCJidWZmZXIiLCJjcmVhdGVCdWZmZXIiLCJnZXRBdHRyaWJMb2NhdGlvbiIsImJpbmRCdWZmZXIiLCJBUlJBWV9CVUZGRVIiLCJmbGF0dGVuIiwiY29uY2F0IiwiYnVmZmVyRGF0YSIsIkZsb2F0MzJBcnJheSIsIlNUQVRJQ19EUkFXIiwic2V0QXR0cmlidXRlQnVmZmVyIiwiZW5hYmxlVmVydGV4QXR0cmliQXJyYXkiLCJzaXplIiwiZ2V0TnVtQ29tcG9uZW50cyIsIkZMT0FUIiwidmVydGV4QXR0cmliUG9pbnRlciIsImdldEF0dHJpYnV0ZUJ1ZmZlclR5cGUiLCJnZXRDb3VudCIsImRlbGV0ZUJ1ZmZlciIsIkF0dHJpYnV0ZUJ1ZmZlckluZm8iLCJidWZmZXJUeXBlIiwiZXZlbnRMaXN0ZW5lcnMiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJmb3JFYWNoIiwiZGF0YSIsImdldFdvcmtzcGFjZUZpbGVzT2ZUeXBlcyIsImV4dGVuc2lvbnMiLCJtZXNzYWdlSWQiLCJ1dWlkdjQiLCJ2c2NvZGVBcGkiLCJwb3N0TWVzc2FnZSIsIlByb21pc2UiLCJyZXNvbHZlIiwiZmlsZXMiLCJyZW1vdmVMaXN0ZW5lciIsImdldERvY3VtZW50VGV4dCIsImZpbGVOYW1lIiwiZ2V0RXh0ZW5zaW9uRmlsZVVyaSIsInVyaSIsInN1YnNjcmliZVRvRG9jdW1lbnRTYXZlIiwiZmlsZVBhdGgiLCJzaG93V2ViVmlld0RldlRvb2xzIiwidmlld2VyRW5kcG9pbnQiLCJWaWV3ZXJFbmRwb2ludCIsImtleVNlbGVjdG9yIiwiY2FjaGUiLCJDb21wb3NpdGVLZXlNYXAiLCJnZXRBdHRyaWJ1dGVCdWZmZXJJbmZvIiwiY3JlYXRlQXR0cmlidXRlQnVmZmVySW5mb3MiLCJuZXdFbGVtZW50cyIsIm5ld1ZhbHVlc1N0cktleXMiLCJlbGVtZW50cyIsImF0dHJpYnV0ZUJ1ZmZlciIsInZhbHVlRnJvbUNhY2hlIiwiYXR0cmlidXRlQnVmZmVySW5mbyIsImVudHJpZXNTdHJLZXkiLCJmaWx0ZXIiLCJpbmNsdWRlcyIsImRlbGV0ZVN0cktleSIsImhhcyIsInNldCIsIl9fYXNzaWduIiwiX19zcHJlYWRBcnJheXMiLCJpbCIsImoiLCJqbCIsImNsYW1wIiwiYXJlU2hhbGxvd0VxdWFsIiwib3ZlcnJpZGRlblByb3BzIiwib21pdEtleXMiLCJvdmVycmlkZURlZmluZWRQcm9wc09ubHkiLCJsZWZ0IiwicmlnaHQiLCJfaSIsIl9hIiwidmFsIiwicmVkdWNlIiwib2JqZWN0S2V5Iiwia2V5c0xlZnQiLCJrZXlzUmlnaHQiLCJrZXlzTGVmdF8xIiwibWluIiwibWF4IiwicmFuZG9tU3RyaW5nIiwiTWF0aCIsInJhbmRvbSIsInRvU3RyaW5nIiwic3BsaXQiLCJqb2luIiwiQWN0aW9uVHlwZXMiLCJJTklUIiwiUkVQTEFDRSIsIlBST0JFX1VOS05PV05fQUNUSU9OIiwiaXNQbGFpbk9iamVjdCIsInByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJjcmVhdGVTdG9yZSIsInJlZHVjZXIiLCJwcmVsb2FkZWRTdGF0ZSIsImVuaGFuY2VyIiwiY3VycmVudFJlZHVjZXIiLCJjdXJyZW50U3RhdGUiLCJjdXJyZW50TGlzdGVuZXJzIiwibmV4dExpc3RlbmVycyIsImlzRGlzcGF0Y2hpbmciLCJlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzIiwic2xpY2UiLCJyZXBsYWNlUmVkdWNlciIsIm5leHRSZWR1Y2VyIiwib2JzZXJ2YWJsZSIsIm91dGVyU3Vic2NyaWJlIiwib2JzZXJ2ZXIiLCJUeXBlRXJyb3IiLCJvYnNlcnZlU3RhdGUiLCJnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZSIsImFjdGlvblR5cGUiLCJTdHJpbmciLCJjb21iaW5lUmVkdWNlcnMiLCJyZWR1Y2VycyIsInJlZHVjZXJLZXlzIiwiZmluYWxSZWR1Y2VycyIsInNoYXBlQXNzZXJ0aW9uRXJyb3IiLCJmaW5hbFJlZHVjZXJLZXlzIiwiYXNzZXJ0UmVkdWNlclNoYXBlIiwiaGFzQ2hhbmdlZCIsIl9rZXkiLCJwcmV2aW91c1N0YXRlRm9yS2V5IiwibmV4dFN0YXRlRm9yS2V5IiwiZXJyb3JNZXNzYWdlIiwiYmluZEFjdGlvbkNyZWF0b3IiLCJhY3Rpb25DcmVhdG9yIiwiYmluZEFjdGlvbkNyZWF0b3JzIiwiYWN0aW9uQ3JlYXRvcnMiLCJib3VuZEFjdGlvbkNyZWF0b3JzIiwiX2RlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJvd25LZXlzIiwiZW51bWVyYWJsZU9ubHkiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzeW0iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfb2JqZWN0U3ByZWFkMiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiY29tcG9zZSIsIl9sZW4iLCJmdW5jcyIsImFwcGx5TWlkZGxld2FyZSIsIm1pZGRsZXdhcmVzIiwiX2Rpc3BhdGNoIiwibWlkZGxld2FyZUFQSSIsImNoYWluIiwibWlkZGxld2FyZSIsInJvb3QiLCJzZWxmIiwiZ2xvYmFsIiwicmVhY3RJcyIsIlJFQUNUX1NUQVRJQ1MiLCJjaGlsZENvbnRleHRUeXBlcyIsImNvbnRleHRUeXBlIiwiY29udGV4dFR5cGVzIiwiZGVmYXVsdFByb3BzIiwiZ2V0RGVmYXVsdFByb3BzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwibWl4aW5zIiwicHJvcFR5cGVzIiwiS05PV05fU1RBVElDUyIsImNhbGxlciIsImNhbGxlZSIsImFyaXR5IiwiTUVNT19TVEFUSUNTIiwiY29tcGFyZSIsIlRZUEVfU1RBVElDUyIsImdldFN0YXRpY3MiLCJjb21wb25lbnQiLCJpc01lbW8iLCJGb3J3YXJkUmVmIiwicmVuZGVyIiwiTWVtbyIsImdldE93blByb3BlcnR5TmFtZXMiLCJvYmplY3RQcm90b3R5cGUiLCJob2lzdE5vblJlYWN0U3RhdGljcyIsInRhcmdldENvbXBvbmVudCIsInNvdXJjZUNvbXBvbmVudCIsImJsYWNrbGlzdCIsImluaGVyaXRlZENvbXBvbmVudCIsInRhcmdldFN0YXRpY3MiLCJzb3VyY2VTdGF0aWNzIiwiZGVzY3JpcHRvciIsInN0b3JlRXh0ZW5zaW9uU3RhdGUiLCJkZWJvdW5jZSIsImV4dGVuc2lvblN0YXRlIiwic2V0RXh0ZW5zaW9uU3RhdGUiLCJzZXRBdHRyaWJ1dGVCdWZmZXJzIiwiYXR0cmlidXRlQnVmZmVyVmFsdWVzIiwic2V0VW5pZm9ybXMiLCJ1bmlmb3JtVmFsdWVzIiwic2V0VGV4dHVyZXMiLCJ0ZXh0dXJlVmFsdWVzIiwiVmlld2VyIiwiZ2V0RWxlbWVudEJ5SWQiLCJwcm9wSXNFbnVtZXJhYmxlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJ0b09iamVjdCIsInRlc3QxIiwidGVzdDIiLCJmcm9tQ2hhckNvZGUiLCJ0ZXN0MyIsImxldHRlciIsInNob3VsZFVzZU5hdGl2ZSIsImZyb20iLCJzeW1ib2xzIiwidG8iLCJkZWZhdWx0U3RhdGUiLCJ2ZXJ0ZXhGaWxlUGF0aCIsImZyYWdtZW50RmlsZVBhdGgiLCJjYW1lcmFQb3NpdGlvbiIsImxvbmdpdHVkZSIsImxhdGl0dWRlIiwicmFkaXVzIiwidmlld2VyU2l6ZSIsIndpZHRoIiwiaGVpZ2h0IiwiZHJhd01vZGUiLCJtZXNoSWQiLCJnZXRFeHRlbnNpb25TdGF0ZSIsIm5ld1N0YXRlIiwic2V0U3RhdGUiLCJhY3F1aXJlVnNDb2RlQXBpIiwiZ2V0TWVzaEJpbmRpbmciLCJtZXNoZXMiLCJhdHRyaWJ1dGVCdWZmZXJCaW5kaW5ncyIsIk1hcCIsImdldFZhbHVlIiwiZ2V0QmluZGluZ09wdGlvbnMiLCJlbnRyaWVzIiwicmVwZWF0NFRpbWVzIiwicG9zaXRpb25zIiwiY29sb3JzIiwidGV4dHVyZUNvb3JkaW5hdGVzIiwiaW5kaWNlcyIsImRlbGV0ZSIsIl9faW1wb3J0RGVmYXVsdCIsIm1vZCIsInVzZVVuaW9uU3RhdGUiLCJyZWFjdF8xIiwiaGVscGVyc18xIiwiaW5pdGlhbEludGVybmFsU3RhdGUiLCJleHRlcm5hbFN0YXRlIiwiZGVmYXVsdCIsInVzZVN0YXRlIiwiaW50ZXJuYWxTdGF0ZSIsInNldEludGVybmFsU3RhdGUiLCJpbnRlcm5hbFN0YXRlUmVmIiwiYWN0aW9ucyIsIm9sZFN0YXRlIiwibmV3SW50ZXJuYWxTdGF0ZSIsInZhbHVlcyIsInR5cGVOYXJyb3dpbmdfMSIsIm1vdmVJbmRleCIsIm9mZnNldCIsInVzZUZvY3VzT3V0SGFuZGxlciIsImVsZW1lbnRSZWYiLCJoYW5kbGVyIiwidXNlRWZmZWN0IiwiZm9jdXNPdXRIYW5kbGVyIiwiY29udGFpbnMiLCJyZWxhdGVkVGFyZ2V0IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInVzZVByZXZpb3VzVmFsdWUiLCJ2YWx1ZVJlZiIsImNyZWF0ZUxpc3RLZXlib2FyZE5hdmlnYXRvciIsInByZXZlbnREZWZhdWx0IiwiZ2V0VW5pZm9ybUluZm8iLCJjcmVhdGVVbmlmb3JtSW5mb3MiLCJ1bmlmb3JtIiwidW5pZm9ybUluZm8iLCJ1YyIsInNldFdlYkdMRnJvbVN0YXRlIiwic2FmZUpTT05QYXJzZSIsImxhc3RDb21taXRlZEF0dHJpYnV0ZUJ1ZmZlcnNTdGF0ZSIsImxhc3RDb21taXRlZFVuaWZvcm1zU3RhdGUiLCJsYXN0Q29tbWl0ZWRUZXh0dXJlc1N0YXRlIiwiZnVuYyIsIndhaXQiLCJ0aW1lb3V0SWQiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiYXJncyIsIl9zZXRQcm90b3R5cGVPZiIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiX2luaGVyaXRzTG9vc2UiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjb25zdHJ1Y3RvciIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJSZWZlcmVuY2VFcnJvciIsImFyZUlucHV0c0VxdWFsIiwibmV3SW5wdXRzIiwibGFzdElucHV0cyIsInJlc3VsdEZuIiwiaXNFcXVhbCIsImxhc3RUaGlzIiwibGFzdFJlc3VsdCIsImxhc3RBcmdzIiwiY2FsbGVkT25jZSIsIm5ld0FyZ3MiLCJub3ciLCJwZXJmb3JtYW5jZSIsIkRhdGUiLCJjYW5jZWxUaW1lb3V0IiwidGltZW91dElEIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJyZXF1ZXN0VGltZW91dCIsImRlbGF5Iiwic3RhcnQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ0aWNrIiwiY2FjaGVkUlRMUmVzdWx0IiwiZ2V0UlRMT2Zmc2V0VHlwZSIsInJlY2FsY3VsYXRlIiwib3V0ZXJEaXYiLCJvdXRlclN0eWxlIiwib3ZlcmZsb3ciLCJkaXJlY3Rpb24iLCJpbm5lckRpdiIsImlubmVyU3R5bGUiLCJhcHBlbmRDaGlsZCIsImJvZHkiLCJzY3JvbGxMZWZ0IiwicmVtb3ZlQ2hpbGQiLCJkZWZhdWx0SXRlbUtleSIsImNvbHVtbkluZGV4Iiwicm93SW5kZXgiLCJjcmVhdGVHcmlkQ29tcG9uZW50IiwiX2NsYXNzIiwiZ2V0Q29sdW1uT2Zmc2V0IiwiZ2V0Q29sdW1uU3RhcnRJbmRleEZvck9mZnNldCIsImdldENvbHVtblN0b3BJbmRleEZvclN0YXJ0SW5kZXgiLCJnZXRDb2x1bW5XaWR0aCIsImdldEVzdGltYXRlZFRvdGFsSGVpZ2h0IiwiZ2V0RXN0aW1hdGVkVG90YWxXaWR0aCIsImdldE9mZnNldEZvckNvbHVtbkFuZEFsaWdubWVudCIsImdldE9mZnNldEZvclJvd0FuZEFsaWdubWVudCIsImdldFJvd0hlaWdodCIsImdldFJvd09mZnNldCIsImdldFJvd1N0YXJ0SW5kZXhGb3JPZmZzZXQiLCJnZXRSb3dTdG9wSW5kZXhGb3JTdGFydEluZGV4IiwiaW5pdEluc3RhbmNlUHJvcHMiLCJzaG91bGRSZXNldFN0eWxlQ2FjaGVPbkl0ZW1TaXplQ2hhbmdlIiwidmFsaWRhdGVQcm9wcyIsIl9QdXJlQ29tcG9uZW50IiwiR3JpZCIsIl90aGlzIiwiX2luc3RhbmNlUHJvcHMiLCJfcmVzZXRJc1Njcm9sbGluZ1RpbWVvdXRJZCIsIl9vdXRlclJlZiIsImluc3RhbmNlIiwiaXNTY3JvbGxpbmciLCJob3Jpem9udGFsU2Nyb2xsRGlyZWN0aW9uIiwiaW5pdGlhbFNjcm9sbExlZnQiLCJzY3JvbGxUb3AiLCJpbml0aWFsU2Nyb2xsVG9wIiwic2Nyb2xsVXBkYXRlV2FzUmVxdWVzdGVkIiwidmVydGljYWxTY3JvbGxEaXJlY3Rpb24iLCJfY2FsbE9uSXRlbXNSZW5kZXJlZCIsIm92ZXJzY2FuQ29sdW1uU3RhcnRJbmRleCIsIm92ZXJzY2FuQ29sdW1uU3RvcEluZGV4Iiwib3ZlcnNjYW5Sb3dTdGFydEluZGV4Iiwib3ZlcnNjYW5Sb3dTdG9wSW5kZXgiLCJ2aXNpYmxlQ29sdW1uU3RhcnRJbmRleCIsInZpc2libGVDb2x1bW5TdG9wSW5kZXgiLCJ2aXNpYmxlUm93U3RhcnRJbmRleCIsInZpc2libGVSb3dTdG9wSW5kZXgiLCJvbkl0ZW1zUmVuZGVyZWQiLCJfY2FsbE9uU2Nyb2xsIiwib25TY3JvbGwiLCJfZ2V0SXRlbVN0eWxlIiwiX3RoaXMkcHJvcHMiLCJjb2x1bW5XaWR0aCIsInJvd0hlaWdodCIsIml0ZW1TdHlsZUNhY2hlIiwiX2dldEl0ZW1TdHlsZUNhY2hlIiwiX29mZnNldCIsImlzUnRsIiwicG9zaXRpb24iLCJ0b3AiLCJfXyIsIl9fXyIsIl9vblNjcm9sbCIsIl9ldmVudCRjdXJyZW50VGFyZ2V0IiwiY3VycmVudFRhcmdldCIsImNsaWVudEhlaWdodCIsImNsaWVudFdpZHRoIiwic2Nyb2xsSGVpZ2h0Iiwic2Nyb2xsV2lkdGgiLCJwcmV2U3RhdGUiLCJjYWxjdWxhdGVkU2Nyb2xsTGVmdCIsImNhbGN1bGF0ZWRTY3JvbGxUb3AiLCJfcmVzZXRJc1Njcm9sbGluZ0RlYm91bmNlZCIsIl9vdXRlclJlZlNldHRlciIsIm91dGVyUmVmIiwiX3Jlc2V0SXNTY3JvbGxpbmciLCJuZXh0UHJvcHMiLCJ2YWxpZGF0ZVNoYXJlZFByb3BzIiwic2Nyb2xsVG8iLCJzY3JvbGxUb0l0ZW0iLCJfcmVmNCIsIl9yZWY0JGFsaWduIiwiYWxpZ24iLCJfdGhpcyRwcm9wczIiLCJjb2x1bW5Db3VudCIsInJvd0NvdW50IiwiX3RoaXMkc3RhdGUiLCJzY3JvbGxiYXJTaXplIiwiZGl2Iiwib2Zmc2V0V2lkdGgiLCJnZXRTY3JvbGxiYXJTaXplIiwiZXN0aW1hdGVkVG90YWxIZWlnaHQiLCJob3Jpem9udGFsU2Nyb2xsYmFyU2l6ZSIsInZlcnRpY2FsU2Nyb2xsYmFyU2l6ZSIsImNvbXBvbmVudERpZE1vdW50IiwiX3RoaXMkcHJvcHMzIiwiX2NhbGxQcm9wc0NhbGxiYWNrcyIsImNvbXBvbmVudERpZFVwZGF0ZSIsIl90aGlzJHN0YXRlMiIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiX3RoaXMkcHJvcHM0IiwiaW5uZXJSZWYiLCJpbm5lckVsZW1lbnRUeXBlIiwiaW5uZXJUYWdOYW1lIiwiaXRlbURhdGEiLCJfdGhpcyRwcm9wczQkaXRlbUtleSIsIml0ZW1LZXkiLCJvdXRlckVsZW1lbnRUeXBlIiwib3V0ZXJUYWdOYW1lIiwidXNlSXNTY3JvbGxpbmciLCJfdGhpcyRfZ2V0SG9yaXpvbnRhbFIiLCJfZ2V0SG9yaXpvbnRhbFJhbmdlVG9SZW5kZXIiLCJjb2x1bW5TdGFydEluZGV4IiwiY29sdW1uU3RvcEluZGV4IiwiX3RoaXMkX2dldFZlcnRpY2FsUmFuIiwiX2dldFZlcnRpY2FsUmFuZ2VUb1JlbmRlciIsInJvd1N0YXJ0SW5kZXgiLCJyb3dTdG9wSW5kZXgiLCJpdGVtcyIsIl9yb3dJbmRleCIsIl9jb2x1bW5JbmRleCIsImVzdGltYXRlZFRvdGFsV2lkdGgiLCJXZWJraXRPdmVyZmxvd1Njcm9sbGluZyIsIndpbGxDaGFuZ2UiLCJwb2ludGVyRXZlbnRzIiwiX3RoaXMkcHJvcHM1IiwiX3RoaXMkX2dldEhvcml6b250YWxSMiIsIl9vdmVyc2NhbkNvbHVtblN0YXJ0SW5kZXgiLCJfb3ZlcnNjYW5Db2x1bW5TdG9wSW5kZXgiLCJfdmlzaWJsZUNvbHVtblN0YXJ0SW5kZXgiLCJfdmlzaWJsZUNvbHVtblN0b3BJbmRleCIsIl90aGlzJF9nZXRWZXJ0aWNhbFJhbjIiLCJfb3ZlcnNjYW5Sb3dTdGFydEluZGV4IiwiX292ZXJzY2FuUm93U3RvcEluZGV4IiwiX3Zpc2libGVSb3dTdGFydEluZGV4IiwiX3Zpc2libGVSb3dTdG9wSW5kZXgiLCJfdGhpcyRzdGF0ZTMiLCJfaG9yaXpvbnRhbFNjcm9sbERpcmVjdGlvbiIsIl9zY3JvbGxMZWZ0IiwiX3Njcm9sbFRvcCIsIl9zY3JvbGxVcGRhdGVXYXNSZXF1ZXN0ZWQiLCJfdmVydGljYWxTY3JvbGxEaXJlY3Rpb24iLCJfdGhpcyRwcm9wczYiLCJvdmVyc2NhbkNvbHVtbkNvdW50Iiwib3ZlcnNjYW5Db2x1bW5zQ291bnQiLCJvdmVyc2NhbkNvdW50IiwiX3RoaXMkc3RhdGU0Iiwib3ZlcnNjYW5Db3VudFJlc29sdmVkIiwic3RhcnRJbmRleCIsInN0b3BJbmRleCIsIm92ZXJzY2FuQmFja3dhcmQiLCJvdmVyc2NhbkZvcndhcmQiLCJfdGhpcyRwcm9wczciLCJvdmVyc2NhblJvd0NvdW50Iiwib3ZlcnNjYW5Sb3dzQ291bnQiLCJfdGhpcyRzdGF0ZTUiLCJfcmVmNSIsIl9yZWY2Iiwicm93TWV0YWRhdGFNYXAiLCJlc3RpbWF0ZWRSb3dIZWlnaHQiLCJsYXN0TWVhc3VyZWRSb3dJbmRleCIsInRvdGFsU2l6ZU9mTWVhc3VyZWRSb3dzIiwiaXRlbU1ldGFkYXRhIiwiY29sdW1uTWV0YWRhdGFNYXAiLCJlc3RpbWF0ZWRDb2x1bW5XaWR0aCIsImxhc3RNZWFzdXJlZENvbHVtbkluZGV4IiwiZ2V0SXRlbU1ldGFkYXRhIiwiaXRlbVR5cGUiLCJpbnN0YW5jZVByb3BzIiwiaXRlbU1ldGFkYXRhTWFwIiwiaXRlbVNpemUiLCJsYXN0TWVhc3VyZWRJbmRleCIsImZpbmROZWFyZXN0SXRlbSIsImZpbmROZWFyZXN0SXRlbUJpbmFyeVNlYXJjaCIsImZpbmROZWFyZXN0SXRlbUV4cG9uZW50aWFsU2VhcmNoIiwiaGlnaCIsImxvdyIsIm1pZGRsZSIsImZsb29yIiwiY3VycmVudE9mZnNldCIsImludGVydmFsIiwic2Nyb2xsT2Zmc2V0IiwiZXN0aW1hdGVkVG90YWxTaXplIiwibWF4T2Zmc2V0IiwibWluT2Zmc2V0Iiwicm91bmQiLCJWYXJpYWJsZVNpemVHcmlkIiwicmVzZXRBZnRlckNvbHVtbkluZGV4Iiwic2hvdWxkRm9yY2VVcGRhdGUiLCJyZXNldEFmdGVySW5kaWNlcyIsInJlc2V0QWZ0ZXJSb3dJbmRleCIsIl9yZWY2JHNob3VsZEZvcmNlVXBkYSIsImZvcmNlVXBkYXRlIiwiX3JlZjciLCJkZWZhdWx0SXRlbUtleSQxIiwiY3JlYXRlTGlzdENvbXBvbmVudCIsImdldEl0ZW1PZmZzZXQiLCJnZXRFc3RpbWF0ZWRUb3RhbFNpemUiLCJnZXRJdGVtU2l6ZSIsImdldE9mZnNldEZvckluZGV4QW5kQWxpZ25tZW50IiwiZ2V0U3RhcnRJbmRleEZvck9mZnNldCIsImdldFN0b3BJbmRleEZvclN0YXJ0SW5kZXgiLCJMaXN0Iiwic2Nyb2xsRGlyZWN0aW9uIiwiaW5pdGlhbFNjcm9sbE9mZnNldCIsIm92ZXJzY2FuU3RhcnRJbmRleCIsIm92ZXJzY2FuU3RvcEluZGV4IiwidmlzaWJsZVN0YXJ0SW5kZXgiLCJ2aXNpYmxlU3RvcEluZGV4IiwibGF5b3V0IiwiaXNIb3Jpem9udGFsIiwib2Zmc2V0SG9yaXpvbnRhbCIsIl9vblNjcm9sbEhvcml6b250YWwiLCJfb25TY3JvbGxWZXJ0aWNhbCIsIl9ldmVudCRjdXJyZW50VGFyZ2V0MiIsInZhbGlkYXRlU2hhcmVkUHJvcHMkMSIsIl90aGlzJF9nZXRSYW5nZVRvUmVuZCIsIl9nZXRSYW5nZVRvUmVuZGVyIiwiX2luZGV4IiwiX3RoaXMkX2dldFJhbmdlVG9SZW5kMiIsIl9vdmVyc2NhblN0YXJ0SW5kZXgiLCJfb3ZlcnNjYW5TdG9wSW5kZXgiLCJfdmlzaWJsZVN0YXJ0SW5kZXgiLCJfdmlzaWJsZVN0b3BJbmRleCIsIl9zY3JvbGxEaXJlY3Rpb24iLCJfc2Nyb2xsT2Zmc2V0IiwiZ2V0SXRlbU1ldGFkYXRhJDEiLCJmaW5kTmVhcmVzdEl0ZW1CaW5hcnlTZWFyY2gkMSIsImZpbmROZWFyZXN0SXRlbUV4cG9uZW50aWFsU2VhcmNoJDEiLCJlc3RpbWF0ZWRJdGVtU2l6ZSIsInRvdGFsU2l6ZU9mTWVhc3VyZWRJdGVtcyIsIlZhcmlhYmxlU2l6ZUxpc3QiLCJmaW5kTmVhcmVzdEl0ZW0kMSIsInJlc2V0QWZ0ZXJJbmRleCIsIkZpeGVkU2l6ZUdyaWQiLCJsYXN0Q29sdW1uT2Zmc2V0IiwibWlkZGxlT2Zmc2V0IiwiY2VpbCIsIl9yZWY4IiwibGFzdFJvd09mZnNldCIsIl9yZWY5IiwiX3JlZjEwIiwibnVtVmlzaWJsZUNvbHVtbnMiLCJfcmVmMTEiLCJfcmVmMTIiLCJudW1WaXNpYmxlUm93cyIsIl9yZWYxMyIsIkZpeGVkU2l6ZUxpc3QiLCJsYXN0SXRlbU9mZnNldCIsIm51bVZpc2libGVJdGVtcyIsInNoYWxsb3dEaWZmZXJzIiwiYXR0cmlidXRlIiwiX2F0dHJpYnV0ZSIsImFyZUVxdWFsIiwicHJldlByb3BzIiwicHJldlN0eWxlIiwicHJldlJlc3QiLCJuZXh0U3R5bGUiLCJuZXh0UmVzdCIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsInN5bWJvbE9ic2VydmFibGVQb255ZmlsbCIsIkZyYWdtZW50IiwiU3RyaWN0TW9kZSIsIlByb2ZpbGVyIiwicSIsIlN1c3BlbnNlIiwidSIsImZvciIsInciLCJpdGVyYXRvciIsInoiLCJlbmNvZGVVUklDb21wb25lbnQiLCJBIiwiaXNNb3VudGVkIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVTZXRTdGF0ZSIsIkIiLCJDIiwicmVmcyIsInVwZGF0ZXIiLCJEIiwiRSIsImlzUmVhY3RDb21wb25lbnQiLCJGIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJHIiwiSCIsIkkiLCJfX3NlbGYiLCJfX3NvdXJjZSIsIkoiLCJoIiwiZyIsImYiLCIkJHR5cGVvZiIsIl9vd25lciIsIkwiLCJNIiwiTiIsInJlcGxhY2UiLCJlc2NhcGUiLCJPIiwiSyIsImRvbmUiLCJQIiwiUSIsIl9zdGF0dXMiLCJfcmVzdWx0IiwidGhlbiIsIlIiLCJTIiwiVCIsIlJlYWN0Q3VycmVudERpc3BhdGNoZXIiLCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyIsInRyYW5zaXRpb24iLCJSZWFjdEN1cnJlbnRPd25lciIsIklzU29tZVJlbmRlcmVyQWN0aW5nIiwiQ2hpbGRyZW4iLCJ0b0FycmF5Iiwib25seSIsIkNvbXBvbmVudCIsIlB1cmVDb21wb25lbnQiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsImNsb25lRWxlbWVudCIsIl9jYWxjdWxhdGVDaGFuZ2VkQml0cyIsIl9jdXJyZW50VmFsdWUiLCJfY3VycmVudFZhbHVlMiIsIl90aHJlYWRDb3VudCIsIl9jb250ZXh0IiwiY3JlYXRlRmFjdG9yeSIsImNyZWF0ZVJlZiIsImlzVmFsaWRFbGVtZW50IiwibGF6eSIsIl9wYXlsb2FkIiwiX2luaXQiLCJ1c2VDb250ZXh0IiwidXNlRGVidWdWYWx1ZSIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VMYXlvdXRFZmZlY3QiLCJ1c2VNZW1vIiwidXNlUmVkdWNlciIsInZlcnNpb24iLCJhYSIsImJhIiwiU2V0IiwiY2EiLCJkYSIsImVhIiwiYWRkIiwiZmEiLCJoYSIsImlhIiwiamEiLCJrYSIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJzYW5pdGl6ZVVSTCIsInJlbW92ZUVtcHR5U3RyaW5nIiwidG9Mb3dlckNhc2UiLCJvYSIsInBhIiwidG9VcHBlckNhc2UiLCJxYSIsIm1hIiwiaXNOYU4iLCJuYSIsInRlc3QiLCJsYSIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZU5TIiwieGxpbmtIcmVmIiwicmEiLCJzYSIsInRhIiwidWEiLCJ3YSIsInhhIiwieWEiLCJ6YSIsIkFhIiwiQmEiLCJDYSIsIkRhIiwiRWEiLCJGYSIsIkdhIiwiSGEiLCJJYSIsIkphIiwiTWEiLCJLYSIsIkxhIiwiTmEiLCJ0cmltIiwiT2EiLCJQYSIsInByZXBhcmVTdGFja1RyYWNlIiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsIlFhIiwidGFnIiwiX3JlbmRlciIsIlJhIiwiU2EiLCJUYSIsIm5vZGVOYW1lIiwiVmEiLCJfdmFsdWVUcmFja2VyIiwic3RvcFRyYWNraW5nIiwiVWEiLCJXYSIsImNoZWNrZWQiLCJYYSIsImFjdGl2ZUVsZW1lbnQiLCJZYSIsImRlZmF1bHRDaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwiWmEiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwiJGEiLCJhYiIsImJiIiwiY2IiLCJvd25lckRvY3VtZW50IiwiZWIiLCJkYiIsImZiIiwic2VsZWN0ZWQiLCJkZWZhdWx0U2VsZWN0ZWQiLCJnYiIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiaGIiLCJpYiIsImpiIiwidGV4dENvbnRlbnQiLCJrYiIsImxiIiwibWIiLCJuYiIsIm9iIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsInZhbHVlT2YiLCJmaXJzdENoaWxkIiwicGIiLCJsYXN0Q2hpbGQiLCJub2RlVHlwZSIsIm5vZGVWYWx1ZSIsInFiIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkQXJlYSIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJyYiIsInNiIiwidGIiLCJzZXRQcm9wZXJ0eSIsImNoYXJBdCIsInViIiwibWVudWl0ZW0iLCJhcmVhIiwiYmFzZSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImlucHV0Iiwia2V5Z2VuIiwibGluayIsIm1ldGEiLCJwYXJhbSIsInRyYWNrIiwid2JyIiwidmIiLCJ3YiIsInhiIiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50IiwicGFyZW50Tm9kZSIsInliIiwiemIiLCJBYiIsIkJiIiwiQ2IiLCJzdGF0ZU5vZGUiLCJEYiIsIkViIiwiRmIiLCJHYiIsIkhiIiwiSWIiLCJKYiIsIktiIiwiTGIiLCJNYiIsIk9iIiwiUGIiLCJRYiIsIlJiIiwib25FcnJvciIsIlNiIiwiVGIiLCJVYiIsIlZiIiwiV2IiLCJYYiIsIlpiIiwiYWx0ZXJuYXRlIiwicmV0dXJuIiwiZmxhZ3MiLCIkYiIsIm1lbW9pemVkU3RhdGUiLCJkZWh5ZHJhdGVkIiwiYWMiLCJjYyIsImNoaWxkIiwic2libGluZyIsImJjIiwiZGMiLCJlYyIsImZjIiwiZ2MiLCJoYyIsImljIiwiamMiLCJrYyIsImxjIiwibWMiLCJuYyIsIm9jIiwicGMiLCJxYyIsInJjIiwiYmxvY2tlZE9uIiwiZG9tRXZlbnROYW1lIiwiZXZlbnRTeXN0ZW1GbGFncyIsIm5hdGl2ZUV2ZW50IiwidGFyZ2V0Q29udGFpbmVycyIsInNjIiwicG9pbnRlcklkIiwidGMiLCJ2YyIsIndjIiwibGFuZVByaW9yaXR5IiwidW5zdGFibGVfcnVuV2l0aFByaW9yaXR5IiwicHJpb3JpdHkiLCJoeWRyYXRlIiwiY29udGFpbmVySW5mbyIsInhjIiwieWMiLCJzaGlmdCIsInpjIiwiQWMiLCJCYyIsInVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2siLCJ1bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSIsIkNjIiwiRGMiLCJFYyIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsIkZjIiwiR2MiLCJIYyIsImFuaW1hdGlvbiIsIkljIiwiSmMiLCJLYyIsIkxjIiwiTWMiLCJOYyIsIk9jIiwiUGMiLCJRYyIsInVuc3RhYmxlX25vdyIsIlJjIiwiVWMiLCJwZW5kaW5nTGFuZXMiLCJleHBpcmVkTGFuZXMiLCJzdXNwZW5kZWRMYW5lcyIsInBpbmdlZExhbmVzIiwiVmMiLCJlbnRhbmdsZWRMYW5lcyIsImVudGFuZ2xlbWVudHMiLCJXYyIsIlhjIiwiWWMiLCJaYyIsIiRjIiwiZXZlbnRUaW1lcyIsImNsejMyIiwiYmQiLCJjZCIsImxvZyIsIkxOMiIsImRkIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJlZCIsImZkIiwiZ2QiLCJoZCIsImpkIiwia2QiLCJsZCIsIm1kIiwibmQiLCJvZCIsImtleUNvZGUiLCJjaGFyQ29kZSIsInBkIiwicWQiLCJyZCIsIl9yZWFjdE5hbWUiLCJfdGFyZ2V0SW5zdCIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwic3RvcFByb3BhZ2F0aW9uIiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsImlzUGVyc2lzdGVudCIsIndkIiwieGQiLCJ5ZCIsInNkIiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiaXNUcnVzdGVkIiwidGQiLCJ1ZCIsInZpZXciLCJkZXRhaWwiLCJ2ZCIsIkFkIiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZ2VYIiwicGFnZVkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwiZ2V0TW9kaWZpZXJTdGF0ZSIsInpkIiwiYnV0dG9uIiwiYnV0dG9ucyIsImZyb21FbGVtZW50IiwidG9FbGVtZW50IiwibW92ZW1lbnRYIiwibW92ZW1lbnRZIiwiQmQiLCJEZCIsImRhdGFUcmFuc2ZlciIsIkZkIiwiSGQiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50IiwiSmQiLCJjbGlwYm9hcmREYXRhIiwiTGQiLCJNZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJOZCIsIjgiLCI5IiwiMTIiLCIxMyIsIjE2IiwiMTciLCIxOCIsIjE5IiwiMjAiLCIyNyIsIjMyIiwiMzMiLCIzNCIsIjM1IiwiMzYiLCIzNyIsIjM4IiwiMzkiLCI0MCIsIjQ1IiwiNDYiLCIxMTIiLCIxMTMiLCIxMTQiLCIxMTUiLCIxMTYiLCIxMTciLCIxMTgiLCIxMTkiLCIxMjAiLCIxMjEiLCIxMjIiLCIxMjMiLCIxNDQiLCIxNDUiLCIyMjQiLCJPZCIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJQZCIsIlJkIiwiY29kZSIsImxvY2FsZSIsIndoaWNoIiwiVGQiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwiVmQiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwiWGQiLCJaZCIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwiJGQiLCJhZSIsImJlIiwiZG9jdW1lbnRNb2RlIiwiY2UiLCJkZSIsImVlIiwiZmUiLCJnZSIsImhlIiwiaWUiLCJsZSIsImNvbG9yIiwiZGF0ZSIsImRhdGV0aW1lIiwiZW1haWwiLCJtb250aCIsIm51bWJlciIsInBhc3N3b3JkIiwic2VhcmNoIiwidGVsIiwidGltZSIsInVybCIsIndlZWsiLCJtZSIsIm5lIiwib2UiLCJwZSIsInFlIiwicmUiLCJzZSIsInRlIiwidWUiLCJ2ZSIsIndlIiwieGUiLCJ5ZSIsInplIiwib25pbnB1dCIsIkFlIiwiZGV0YWNoRXZlbnQiLCJCZSIsIkNlIiwiYXR0YWNoRXZlbnQiLCJEZSIsIkVlIiwiRmUiLCJIZSIsIkllIiwiSmUiLCJLZSIsIkxlIiwibm9kZSIsIm5leHRTaWJsaW5nIiwiTmUiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnRXaW5kb3ciLCJocmVmIiwiT2UiLCJjb250ZW50RWRpdGFibGUiLCJQZSIsIlFlIiwiUmUiLCJTZSIsIlRlIiwiVWUiLCJzZWxlY3Rpb25TdGFydCIsImVuZCIsInNlbGVjdGlvbkVuZCIsImFuY2hvck5vZGUiLCJkZWZhdWx0VmlldyIsImdldFNlbGVjdGlvbiIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwiVmUiLCJXZSIsIlhlIiwiWWUiLCJaZSIsIlliIiwiJGUiLCJhZiIsImJmIiwiY2YiLCJkZiIsImNhcHR1cmUiLCJwYXNzaXZlIiwiTmIiLCJlZiIsImZmIiwicGFyZW50V2luZG93IiwiZ2YiLCJoZiIsImplIiwiY2hhciIsImtlIiwidW5zaGlmdCIsImpmIiwia2YiLCJsZiIsIm1mIiwiYXV0b0ZvY3VzIiwibmYiLCJfX2h0bWwiLCJvZiIsInBmIiwicWYiLCJyZiIsInNmIiwicHJldmlvdXNTaWJsaW5nIiwidGYiLCJ2ZiIsIndmIiwieGYiLCJ5ZiIsInpmIiwiQWYiLCJCZiIsIkNmIiwiRGYiLCJFZiIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dCIsIkZmIiwiR2YiLCJIZiIsIklmIiwiZ2V0Q2hpbGRDb250ZXh0IiwiSmYiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsIktmIiwiTGYiLCJNZiIsIk5mIiwiT2YiLCJQZiIsInVuc3RhYmxlX2NhbmNlbENhbGxiYWNrIiwiUWYiLCJ1bnN0YWJsZV9zaG91bGRZaWVsZCIsIlJmIiwidW5zdGFibGVfcmVxdWVzdFBhaW50IiwiU2YiLCJUZiIsInVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsIiwiVWYiLCJ1bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSIsIlZmIiwiV2YiLCJYZiIsInVuc3RhYmxlX0xvd1ByaW9yaXR5IiwiWWYiLCJ1bnN0YWJsZV9JZGxlUHJpb3JpdHkiLCJaZiIsIiRmIiwiYWciLCJiZyIsImNnIiwiZGciLCJlZyIsImZnIiwiZ2ciLCJoZyIsImlnIiwiamciLCJrZyIsImxnIiwibWciLCJuZyIsIm9nIiwicGciLCJxZyIsInJnIiwic2ciLCJjaGlsZExhbmVzIiwidGciLCJmaXJzdENvbnRleHQiLCJsYW5lcyIsInVnIiwidmciLCJvYnNlcnZlZEJpdHMiLCJyZXNwb25kZXJzIiwid2ciLCJ4ZyIsInVwZGF0ZVF1ZXVlIiwiYmFzZVN0YXRlIiwiZmlyc3RCYXNlVXBkYXRlIiwibGFzdEJhc2VVcGRhdGUiLCJzaGFyZWQiLCJwZW5kaW5nIiwiZWZmZWN0cyIsInlnIiwiemciLCJldmVudFRpbWUiLCJsYW5lIiwiQWciLCJCZyIsIkNnIiwiRGciLCJFZyIsIkZnIiwiR2ciLCJLZyIsIl9yZWFjdEludGVybmFscyIsIkhnIiwiSWciLCJKZyIsIkxnIiwiTWciLCJOZyIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIk9nIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiUGciLCJRZyIsIl9zdHJpbmdSZWYiLCJSZyIsIlNnIiwibGFzdEVmZmVjdCIsIm5leHRFZmZlY3QiLCJmaXJzdEVmZmVjdCIsIlRnIiwiVWciLCJlbGVtZW50VHlwZSIsIlZnIiwiaW1wbGVtZW50YXRpb24iLCJXZyIsIlhnIiwiWWciLCJaZyIsIiRnIiwiYWgiLCJiaCIsImNoIiwiZGgiLCJlaCIsImRvY3VtZW50RWxlbWVudCIsInRhZ05hbWUiLCJmaCIsImdoIiwiaGgiLCJpaCIsIm1lbW9pemVkUHJvcHMiLCJyZXZlYWxPcmRlciIsImpoIiwia2giLCJsaCIsIm1oIiwibmgiLCJvaCIsInBlbmRpbmdQcm9wcyIsInBoIiwicWgiLCJyaCIsInNoIiwidGgiLCJ1aCIsIl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5IiwidmgiLCJ3aCIsInhoIiwieWgiLCJ6aCIsIkFoIiwiQmgiLCJDaCIsIkRoIiwiRWgiLCJGaCIsIkdoIiwiSGgiLCJiYXNlUXVldWUiLCJxdWV1ZSIsIkloIiwiSmgiLCJLaCIsImxhc3RSZW5kZXJlZFJlZHVjZXIiLCJlYWdlclJlZHVjZXIiLCJlYWdlclN0YXRlIiwibGFzdFJlbmRlcmVkU3RhdGUiLCJMaCIsIk1oIiwiX2dldFZlcnNpb24iLCJfc291cmNlIiwibXV0YWJsZVJlYWRMYW5lcyIsIk5oIiwiVSIsImdldFNuYXBzaG90Iiwic2V0U25hcHNob3QiLCJPaCIsIlBoIiwiUWgiLCJSaCIsImRlc3Ryb3kiLCJkZXBzIiwiU2giLCJUaCIsIlVoIiwiVmgiLCJXaCIsIlhoIiwiWWgiLCJaaCIsIiRoIiwiYWkiLCJiaSIsImNpIiwiZGkiLCJyZWFkQ29udGV4dCIsInVzZURlZmVycmVkVmFsdWUiLCJ1c2VUcmFuc2l0aW9uIiwidXNlTXV0YWJsZVNvdXJjZSIsInVzZU9wYXF1ZUlkZW50aWZpZXIiLCJ1bnN0YWJsZV9pc05ld1JlY29uY2lsZXIiLCJ1ZiIsImVpIiwiZmkiLCJnaSIsImhpIiwiaWkiLCJqaSIsImtpIiwibGkiLCJtaSIsImJhc2VMYW5lcyIsIm5pIiwib2kiLCJwaSIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsInFpIiwicmkiLCJwZW5kaW5nQ29udGV4dCIsIkJpIiwiRGkiLCJFaSIsInNpIiwicmV0cnlMYW5lIiwidGkiLCJmYWxsYmFjayIsInVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrIiwidWkiLCJ1bnN0YWJsZV9leHBlY3RlZExvYWRUaW1lIiwidmkiLCJ3aSIsInhpIiwieWkiLCJ6aSIsImlzQmFja3dhcmRzIiwicmVuZGVyaW5nIiwicmVuZGVyaW5nU3RhcnRUaW1lIiwidGFpbCIsInRhaWxNb2RlIiwiQWkiLCJGaSIsIkdpIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsIm9uY2xpY2siLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdGVUZXh0Tm9kZSIsIlYiLCJIaSIsIklpIiwiVyIsIkppIiwiS2kiLCJMaSIsIk1pIiwiTmkiLCJPaSIsIldlYWtNYXAiLCJQaSIsImVsZW1lbnQiLCJRaSIsIlJpIiwiU2kiLCJjb21wb25lbnREaWRDYXRjaCIsIlRpIiwiY29tcG9uZW50U3RhY2siLCJVaSIsIldlYWtTZXQiLCJWaSIsIldpIiwiWGkiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIllpIiwiWmkiLCIkaSIsImZvY3VzIiwiYWoiLCJiaiIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiY2oiLCJkaiIsImVqIiwiZmoiLCJnaiIsImluc2VydEJlZm9yZSIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJoaiIsImlqIiwiamoiLCJraiIsImxqIiwibWoiLCJuaiIsIm9qIiwicGoiLCJYIiwiWSIsInFqIiwicmoiLCJzaiIsInRqIiwidWoiLCJ2aiIsIkluZmluaXR5Iiwid2oiLCJjayIsIloiLCJ4aiIsInlqIiwiemoiLCJBaiIsIkJqIiwiQ2oiLCJEaiIsIkVqIiwiRmoiLCJHaiIsIkhqIiwiSWoiLCJKaiIsIlNjIiwiS2oiLCJMaiIsIk1qIiwiY2FsbGJhY2tOb2RlIiwiZXhwaXJhdGlvblRpbWVzIiwiY2FsbGJhY2tQcmlvcml0eSIsIlRjIiwiTmoiLCJPaiIsIlBqIiwiUWoiLCJSaiIsIlNqIiwiVGoiLCJmaW5pc2hlZFdvcmsiLCJmaW5pc2hlZExhbmVzIiwiVWoiLCJ0aW1lb3V0SGFuZGxlIiwiV2oiLCJYaiIsInBpbmdDYWNoZSIsIllqIiwiWmoiLCJ2YSIsImFrIiwiYmsiLCJkayIsInJhbmdlQ291bnQiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwiZWsiLCJNZSIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiZXh0ZW5kIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwib25Db21taXRGaWJlclJvb3QiLCJmayIsImdrIiwiaWsiLCJwZW5kaW5nQ2hpbGRyZW4iLCJqayIsIm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEiLCJrayIsImxrIiwibWsiLCJuayIsIm9rIiwicWsiLCJoeWRyYXRpb25PcHRpb25zIiwibXV0YWJsZVNvdXJjZXMiLCJfaW50ZXJuYWxSb290IiwicmsiLCJ0ayIsImhhc0F0dHJpYnV0ZSIsInNrIiwidWsiLCJoayIsInVuc3RhYmxlX29ic2VydmVkQml0cyIsInVubW91bnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9ybSIsIlZqIiwidmsiLCJFdmVudHMiLCJ3ayIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiYnVuZGxlVHlwZSIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJ4ayIsInJlbmRlcmVyQ29uZmlnIiwib3ZlcnJpZGVIb29rU3RhdGUiLCJvdmVycmlkZUhvb2tTdGF0ZURlbGV0ZVBhdGgiLCJvdmVycmlkZUhvb2tTdGF0ZVJlbmFtZVBhdGgiLCJvdmVycmlkZVByb3BzIiwib3ZlcnJpZGVQcm9wc0RlbGV0ZVBhdGgiLCJvdmVycmlkZVByb3BzUmVuYW1lUGF0aCIsInNldFN1c3BlbnNlSGFuZGxlciIsInNjaGVkdWxlVXBkYXRlIiwiY3VycmVudERpc3BhdGNoZXJSZWYiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsImZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaCIsInNjaGVkdWxlUmVmcmVzaCIsInNjaGVkdWxlUm9vdCIsInNldFJlZnJlc2hIYW5kbGVyIiwiZ2V0Q3VycmVudEZpYmVyIiwieWsiLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsImNyZWF0ZVBvcnRhbCIsImZpbmRET01Ob2RlIiwiZmx1c2hTeW5jIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJNZXNzYWdlQ2hhbm5lbCIsInVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvcCIsInNvcnRJbmRleCIsInN0YXJ0VGltZSIsImV4cGlyYXRpb25UaW1lIiwicHJpb3JpdHlMZXZlbCIsInVuc3RhYmxlX1Byb2ZpbGluZyIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGUiLCJ1bnN0YWJsZV9uZXh0IiwidW5zdGFibGVfcGF1c2VFeGVjdXRpb24iLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJGdW5jdGlvbiIsIm9yaWdpbmFsTW9kdWxlIiwid2VicGFja1BvbHlmaWxsIiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJlbXB0eUZ1bmN0aW9uIiwiZW1wdHlGdW5jdGlvbldpdGhSZXNldCIsInJlc2V0V2FybmluZ0NhY2hlIiwic2hpbSIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsInByb3BGdWxsTmFtZSIsInNlY3JldCIsImdldFNoaW0iLCJpc1JlcXVpcmVkIiwiUmVhY3RQcm9wVHlwZXMiLCJib29sIiwic3RyaW5nIiwic3ltYm9sIiwiYW55IiwiYXJyYXlPZiIsImluc3RhbmNlT2YiLCJvYmplY3RPZiIsIm9uZU9mIiwib25lT2ZUeXBlIiwic2hhcGUiLCJleGFjdCIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiQXN5bmNNb2RlIiwiQ29uY3VycmVudE1vZGUiLCJDb250ZXh0Q29uc3VtZXIiLCJDb250ZXh0UHJvdmlkZXIiLCJFbGVtZW50IiwiTGF6eSIsIlBvcnRhbCIsImlzQXN5bmNNb2RlIiwiaXNDb25jdXJyZW50TW9kZSIsImlzQ29udGV4dENvbnN1bWVyIiwiaXNDb250ZXh0UHJvdmlkZXIiLCJpc0VsZW1lbnQiLCJpc0ZvcndhcmRSZWYiLCJpc0ZyYWdtZW50IiwiaXNMYXp5IiwiaXNQb3J0YWwiLCJpc1Byb2ZpbGVyIiwiaXNTdHJpY3RNb2RlIiwiaXNTdXNwZW5zZSIsImlzVmFsaWRFbGVtZW50VHlwZSIsInR5cGVPZiIsImluaXRpYWxTdGF0ZSIsImNvdW50ZXIiLCJwYXRoIiwicmVzdCIsInVuaWZvcm1CaW5kaW5ncyIsIm9wdGlvbklkIiwib2JqZWN0TWFwIiwicHJvcFZhbHVlIiwiY29ubmVjdCIsInNlbGVjdGVkVmVydGV4RmlsZUlkIiwic2VsZWN0ZWRGcmFnbWVudEZpbGVJZCIsInNldENhbWVyYVBvc2l0aW9uIiwibmV3Q2FtZXJhUG9zaXRpb24iLCJzZXRWaWV3ZXJTaXplIiwic2hhZGVyQ29tcGlsZUVycm9ycyIsInNldFNoYWRlckNvbXBpbGVFcnJvcnMiLCJzZWxlY3RlZFZlcnRleEZpbGVUZXh0Iiwic2V0U2VsZWN0ZWRWZXJ0ZXhGaWxlVGV4dCIsInNlbGVjdGVkRnJhZ21lbnRGaWxlVGV4dCIsInNldFNlbGVjdGVkRnJhZ21lbnRGaWxlVGV4dCIsImF0dHJpYnV0ZUJ1ZmZlckZpZWxkc0luZm8iLCJzZXRBdHRyaWJ1dGVCdWZmZXJGaWVsZHNJbmZvIiwidW5pZm9ybUZpZWxkc0luZm8iLCJzZXRVbmlmb3JtRmllbGRzSW5mbyIsInRleHR1cmVGaWVsZHNJbmZvIiwic2V0VGV4dHVyZUZpZWxkc0luZm8iLCJjb250ZW50UmVmIiwiY2FudmFzUmVmIiwiY29udGV4dFJlZiIsImluZGV4QnVmZmVySW5mb1JlZiIsImFuaW1hdGlvbkZyYW1lSGFuZGxlUmVmIiwiZ2V0Q29udGV4dCIsIkluZGV4QnVmZmVySW5mbyIsIm9ic2VydmVFbGVtZW50Qm91bmRpbmdSZWN0IiwicmVjdCIsImNvbXBpbGVTaGFkZXJzRnJvbVNvdXJjZSIsInByb2dyYW1Vbmlmb3JtcyIsImdldFByb2dyYW1Vbmlmb3JtcyIsInByb2dyYW1BdHRyaWJ1dGVCdWZmZXJzIiwiZ2V0UHJvZ3JhbUF0dHJpYnV0ZUJ1ZmZlcnMiLCJkYXRhVW5pZm9ybXMiLCJ0ZXh0dXJlVW5pZm9ybXMiLCJyZW5kZXJQcm9ncmFtIiwidW5pZm9ybUluZm9zIiwidGV4dHVyZUluZm9zIiwiYXR0cmlidXRlQnVmZmVySW5mb3MiLCJpbmRleEJ1ZmZlckluZm8iLCJkZWxldGVQcm9ncmFtIiwiZm9ybWF0U2hhZGVyQ29tcGlsZUVycm9ycyIsInVzZVBlcnNwZWN0aXZlQ2FtZXJhIiwidXNlRG9jdW1lbnRXYXRjaGVyIiwiU2hhZGVyc1NlbGVjdG9yU2VjdGlvbiIsIkRyYXdPcHRpb25zU2VjdGlvbiIsIlVuaWZvcm1TZWN0aW9uIiwidW5pZm9ybUZpZWxkcyIsIkF0dHJpYnV0ZUJ1ZmZlcnNTZWN0aW9uIiwiYXR0cmlidXRlQnVmZmVyRmllbGRzIiwiVGV4dHVyZVNlY3Rpb24iLCJ0ZXh0dXJlRmllbGRzIiwiU2hhZGVyc0NvbXBpbGVSZXN1bHRBcmVhIiwiZXJyb3JzIiwicmVzaXplT2JzZXJ2ZXIiLCJSZXNpemVPYnNlcnZlciIsIm9ic2VydmVyRW50cnkiLCJmaW5kIiwiZG9tUmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIm9ic2VydmUiLCJkaXNjb25uZWN0IiwiY29tcGlsZVNoYWRlciIsInJlbmRlcmluZ0NvbnRleHQiLCJzaGFkZXIiLCJjcmVhdGVTaGFkZXIiLCJzaGFkZXJTb3VyY2UiLCJnZXRTaGFkZXJQYXJhbWV0ZXIiLCJDT01QSUxFX1NUQVRVUyIsImdldFNoYWRlckluZm9Mb2ciLCJkZWxldGVTaGFkZXIiLCJ2ZXJ0ZXhTaGFkZXJDb250ZW50IiwiZnJhZ21lbnRTaGFkZXJDb250ZW50IiwiVkVSVEVYX1NIQURFUiIsIkZSQUdNRU5UX1NIQURFUiIsInZlcnRleEVycm9yIiwiZnJhZ21lbnRFcnJvciIsImNyZWF0ZVByb2dyYW0iLCJhdHRhY2hTaGFkZXIiLCJsaW5rUHJvZ3JhbSIsImdldFByb2dyYW1QYXJhbWV0ZXIiLCJMSU5LX1NUQVRVUyIsImluZm9Mb2ciLCJnZXRQcm9ncmFtSW5mb0xvZyIsIm51bVVuaWZvcm1zIiwiQUNUSVZFX1VOSUZPUk1TIiwiZ2V0QWN0aXZlVW5pZm9ybSIsInVuaXQiLCJudW1BdHRyaWJ1dGVCdWZmZXJzIiwiQUNUSVZFX0FUVFJJQlVURVMiLCJnZXRBY3RpdmVBdHRyaWIiLCJyZW5kZXJJbmZvIiwidXNlUHJvZ3JhbSIsInZpZXdwb3J0IiwiY2FudmFzIiwiY2xlYXJDb2xvciIsImNsZWFyRGVwdGgiLCJlbmFibGUiLCJERVBUSF9URVNUIiwiZGVwdGhGdW5jIiwiTEVRVUFMIiwiQ09MT1JfQlVGRkVSX0JJVCIsIkRFUFRIX0JVRkZFUl9CSVQiLCJwcmltaXRpdmVUeXBlIiwiVFJJQU5HTEVTIiwibnVtRWxlbWVudHMiLCJkcmF3QXJyYXlzIiwic2V0SW5kZXhCdWZmZXIiLCJkcmF3RWxlbWVudHMiLCJVTlNJR05FRF9TSE9SVCIsInZlcnRleFNoYWRlckVycm9ycyIsImZyYWdtZW50U2hhZGVyRXJyb3JzIiwiRUxFTUVOVF9BUlJBWV9CVUZGRVIiLCJVaW50MTZBcnJheSIsImRyYXdNb2RlT3B0aW9ucyIsIm1lc2hPcHRpb25zIiwic2V0RHJhd01vZGUiLCJuZXdEcmF3TW9kZSIsInNldE1lc2hJZCIsIm5ld01lc2hJZCIsInJlYWN0X3dpbmRvd18xIiwiSG9va3NfMSIsIm1lbW9pemVkUm93IiwidXNlU2Nyb2xsTGlzdFRvSW5kZXgiLCJyZWR1Y2VyXzEiLCJ1c2VVbmlvblN0YXRlXzEiLCJkZWZhdWx0SW5pdGlhbFN0YXRlIiwiZGVmYXVsdERyb3Bkb3duUmVkdWNlciIsImRlZmF1bHRJbnRlcm5hbFN0YXRlIiwic3RhdGVSZWR1Y2VyIiwiX2xpc3RSZWYiLCJfMSIsImNsaWNrSGFuZGxlciIsInVzZUNsaWNrZWRPdXRzaWRlSGFuZGxlciIsInVzZURyb3Bkb3duQ2xvc2VXaGVuRm9jdXNPdXQiLCJ1c2VGb2N1c091dEhhbmRsZXJfMSIsInVzZVByZXZpb3VzVmFsdWVfMSIsInZhbHVlVG9UcmlnZ2VyIiwiaW5pdGlhbFJlbmRlciIsIm1vdXNlSGFuZGxlciIsInVzZUNodW5rTG9hZGVyIiwibG9hZCIsImlzTG9hZGVkIiwiaXNJdGVtTG9hZGVkIiwibG9hZE1vcmVJdGVtcyIsImVuZEluZGV4IiwibmV3SXRlbXMiLCJpdGVtc0luZGV4Iiwia2V5Ym9hcmROYXZpZ2F0b3JfMSIsIlZpcnR1YWxpemVkTGF6eUxvYWRpbmdMaXN0IiwicmVhY3Rfd2luZG93X2luZmluaXRlX2xvYWRlcl8xIiwibG9hZGVyUmVmIiwiY2xhc3NDYWxsQ2hlY2siLCJDb25zdHJ1Y3RvciIsImNyZWF0ZUNsYXNzIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwicG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIkluZmluaXRlTG9hZGVyIiwiX2xhc3RSZW5kZXJlZFN0YXJ0SW5kZXgiLCJfbGFzdFJlbmRlcmVkU3RvcEluZGV4IiwiX21lbW9pemVkVW5sb2FkZWRSYW5nZXMiLCJfb25JdGVtc1JlbmRlcmVkIiwiX2Vuc3VyZVJvd3NMb2FkZWQiLCJfc2V0UmVmIiwiaW5oZXJpdHMiLCJhdXRvUmVsb2FkIiwiX3Byb3BzIiwiX3Byb3BzJG1pbmltdW1CYXRjaFNpIiwibWluaW11bUJhdGNoU2l6ZSIsIl9wcm9wcyR0aHJlc2hvbGQiLCJ0aHJlc2hvbGQiLCJ1bmxvYWRlZFJhbmdlcyIsInJhbmdlU3RhcnRJbmRleCIsInJhbmdlU3RvcEluZGV4IiwicG90ZW50aWFsU3RvcEluZGV4IiwiX2luZGV4MiIsIl9pbmRleDMiLCJzY2FuRm9yVW5sb2FkZWRSYW5nZXMiLCJzb21lIiwic3RhcnRPclN0b3AiLCJfbG9hZFVubG9hZGVkUmFuZ2VzIiwiX3RoaXMyIiwibG9hZE1vcmVSb3dzIiwiX2xvb3AiLCJwcm9taXNlIiwibGFzdFJlbmRlcmVkU3RhcnRJbmRleCIsImxhc3RSZW5kZXJlZFN0b3BJbmRleCIsImlzUmFuZ2VWaXNpYmxlIiwic2V0U2VsZWN0ZWRWZXJ0ZXhGaWxlSWQiLCJzZXRTZWxlY3RlZEZyYWdtZW50RmlsZUlkIiwic2hhZGVyRmlsZU9wdGlvbnMiLCJzZXRTaGFkZXJGaWxlT3B0aW9ucyIsInN5bmNTaGFkZXJEb2N1bWVudHMiLCJzaGFkZXJFeHRlbnNpb25zIiwiZmlsZSIsImltYWdlRXh0ZW5zaW9ucyIsImV4dGVuc2lvblRleHR1cmVzIiwiY3VzdG9tT3B0aW9uSWQiLCJkZWZhdWx0VGV4dHVyZVVybCIsInR4IiwiVGV4dHVyZUZpZWxkIiwic2V0T3B0aW9uQW5kVmFsdWUiLCJ0ZXh0dXJlQmluZGluZ3MiLCJ0ZXh0dXJlMSIsInRleHR1cmUyIiwiYmluZGluZ05hbWVzIiwiZ2V0QmluZGluZ1ZhbHVlIiwiVW5pZm9ybUZpZWxkIiwidW5pZm9ybVZhbHVlIiwiaXNDdXN0b20iLCJWZWN0b3IyTnVtYmVySW5wdXQiLCJWZWN0b3IzTnVtYmVySW5wdXQiLCJWZWN0b3I0TnVtYmVySW5wdXQiLCJNYXRyaXg0eDROdW1iZXJJbnB1dCIsInJlbmRlclVuaWZvcm1JbnB1dCIsImZpZWxkT2ZWaWV3IiwiUEkiLCJhc3BlY3QiLCJwcm9qZWN0aW9uTWF0cml4IiwibWF0NCIsInBlcnNwZWN0aXZlIiwibW9kZWxWaWV3TWF0cml4IiwidmVjIiwiY2FtZXJhUG9zaXRpb25Ub1ZlY3RvcjMiLCJsb29rQXQiLCJyZXMiLCJtdWx0aXBseSIsImdldENhbWVyYU1hdHJpeCIsImdldERlZmF1bHRWYWx1ZSIsImluaXRpYWxDYW1lcmFQb3NpdGlvbiIsImNhbWVyYU1hbmlwdWxhdG9yIiwiQ2FtZXJhUG9zaXRpb25NYW5pcHVsYXRvciIsIm5ld1Bvc2l0aW9uIiwic2luIiwiY29zIiwiY2xhbXBSYWRpdXMiLCJwb3NpdGlvblByb3ZpZGVyIiwib25Qb3NpdGlvbkNoYW5nZSIsInBvaW50ZXJQb3NpdGlvbiIsImlzTW92aW5nIiwiZGlzcGF0Y2hBY3Rpb24iLCJuZXdWaWV3cG9ydCIsImRlbHRhTGF0aXR1ZGUiLCJkZWx0YUxvbmdpdHVkZSIsIm9uTW91c2VEb3duIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJvbk1vdXNlTW92ZSIsIm9uTW91c2VVcCIsIm9uTW91c2VMZWF2ZSIsIm9uV2hlZWwiLCJyZWdpc3RlckV2ZW50IiwiaXNQb3dlck9mMiIsIm91dCIsImZvdnkiLCJuZWFyIiwiZmFyIiwidGFuIiwiZXllIiwiY2VudGVyIiwidXAiLCJ4MCIsIngxIiwieDIiLCJ5MCIsInkxIiwieTIiLCJ6MCIsInoxIiwiejIiLCJsZW4iLCJleWV4IiwiZXlleSIsImV5ZXoiLCJ1cHgiLCJ1cHkiLCJ1cHoiLCJjZW50ZXJ4IiwiY2VudGVyeSIsImNlbnRlcnoiLCJhYnMiLCJpZGVudGl0eTMiLCJoeXBvdCIsImEwMCIsImEwMSIsImEwMiIsImEwMyIsImExMCIsImExMSIsImExMiIsImExMyIsImEyMCIsImEyMSIsImEyMiIsImEyMyIsImEzMCIsImEzMSIsImEzMiIsImEzMyIsImIwIiwiYjEiLCJiMiIsImIzIiwiYWJmIiwiQXR0cmlidXRlQnVmZmVyRmllbGQiLCJhdHRpYnV0ZUJ1ZmZlclZhbHVlIiwiQXJyYXlOdW1iZXJJbnB1dCIsImVsZW1lbnRTaXplIiwicmVuZGVyQXR0cmlidXRlQnVmZmVySW5wdXQiLCJpc1ZhbGlkIiwib25CbHVyIiwiZXJyb3JSZWYiLCJuZXdFcnJvciIsInBhcnNlZFJlc3VsdCIsInBhcnNlIiwiZXZlcnkiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1D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ekMsT0FEQTBMLEVBQU8xTCxHQUFPeVAsRUFBSXRQLEVBQU9ILEdBQU1BLEdBQ3hCMEwsSUFDTiIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDIzKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuZXhwb3J0IHZhciBSZWFjdFJlZHV4Q29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBSZWFjdFJlZHV4Q29udGV4dC5kaXNwbGF5TmFtZSA9ICdSZWFjdFJlZHV4Jztcbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVhY3RSZWR1eENvbnRleHQ7IiwiLy8gRGVmYXVsdCB0byBhIGR1bW15IFwiYmF0Y2hcIiBpbXBsZW1lbnRhdGlvbiB0aGF0IGp1c3QgcnVucyB0aGUgY2FsbGJhY2tcbmZ1bmN0aW9uIGRlZmF1bHROb29wQmF0Y2goY2FsbGJhY2spIHtcbiAgY2FsbGJhY2soKTtcbn1cblxudmFyIGJhdGNoID0gZGVmYXVsdE5vb3BCYXRjaDsgLy8gQWxsb3cgaW5qZWN0aW5nIGFub3RoZXIgYmF0Y2hpbmcgZnVuY3Rpb24gbGF0ZXJcblxuZXhwb3J0IHZhciBzZXRCYXRjaCA9IGZ1bmN0aW9uIHNldEJhdGNoKG5ld0JhdGNoKSB7XG4gIHJldHVybiBiYXRjaCA9IG5ld0JhdGNoO1xufTsgLy8gU3VwcGx5IGEgZ2V0dGVyIGp1c3QgdG8gc2tpcCBkZWFsaW5nIHdpdGggRVNNIGJpbmRpbmdzXG5cbmV4cG9ydCB2YXIgZ2V0QmF0Y2ggPSBmdW5jdGlvbiBnZXRCYXRjaCgpIHtcbiAgcmV0dXJuIGJhdGNoO1xufTsiLCJpbXBvcnQgeyBnZXRCYXRjaCB9IGZyb20gJy4vYmF0Y2gnOyAvLyBlbmNhcHN1bGF0ZXMgdGhlIHN1YnNjcmlwdGlvbiBsb2dpYyBmb3IgY29ubmVjdGluZyBhIGNvbXBvbmVudCB0byB0aGUgcmVkdXggc3RvcmUsIGFzXG4vLyB3ZWxsIGFzIG5lc3Rpbmcgc3Vic2NyaXB0aW9ucyBvZiBkZXNjZW5kYW50IGNvbXBvbmVudHMsIHNvIHRoYXQgd2UgY2FuIGVuc3VyZSB0aGVcbi8vIGFuY2VzdG9yIGNvbXBvbmVudHMgcmUtcmVuZGVyIGJlZm9yZSBkZXNjZW5kYW50c1xuXG52YXIgbnVsbExpc3RlbmVycyA9IHtcbiAgbm90aWZ5OiBmdW5jdGlvbiBub3RpZnkoKSB7fVxufTtcblxuZnVuY3Rpb24gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCkge1xuICB2YXIgYmF0Y2ggPSBnZXRCYXRjaCgpO1xuICB2YXIgZmlyc3QgPSBudWxsO1xuICB2YXIgbGFzdCA9IG51bGw7XG4gIHJldHVybiB7XG4gICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgZmlyc3QgPSBudWxsO1xuICAgICAgbGFzdCA9IG51bGw7XG4gICAgfSxcbiAgICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHtcbiAgICAgIGJhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGxpc3RlbmVyID0gZmlyc3Q7XG5cbiAgICAgICAgd2hpbGUgKGxpc3RlbmVyKSB7XG4gICAgICAgICAgbGlzdGVuZXIuY2FsbGJhY2soKTtcbiAgICAgICAgICBsaXN0ZW5lciA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzID0gW107XG4gICAgICB2YXIgbGlzdGVuZXIgPSBmaXJzdDtcblxuICAgICAgd2hpbGUgKGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICAgICAgbGlzdGVuZXIgPSBsaXN0ZW5lci5uZXh0O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbGlzdGVuZXJzO1xuICAgIH0sXG4gICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUoY2FsbGJhY2spIHtcbiAgICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgICAgdmFyIGxpc3RlbmVyID0gbGFzdCA9IHtcbiAgICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrLFxuICAgICAgICBuZXh0OiBudWxsLFxuICAgICAgICBwcmV2OiBsYXN0XG4gICAgICB9O1xuXG4gICAgICBpZiAobGlzdGVuZXIucHJldikge1xuICAgICAgICBsaXN0ZW5lci5wcmV2Lm5leHQgPSBsaXN0ZW5lcjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZpcnN0ID0gbGlzdGVuZXI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgICAgaWYgKCFpc1N1YnNjcmliZWQgfHwgZmlyc3QgPT09IG51bGwpIHJldHVybjtcbiAgICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKGxpc3RlbmVyLm5leHQpIHtcbiAgICAgICAgICBsaXN0ZW5lci5uZXh0LnByZXYgPSBsaXN0ZW5lci5wcmV2O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxhc3QgPSBsaXN0ZW5lci5wcmV2O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxpc3RlbmVyLnByZXYpIHtcbiAgICAgICAgICBsaXN0ZW5lci5wcmV2Lm5leHQgPSBsaXN0ZW5lci5uZXh0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZpcnN0ID0gbGlzdGVuZXIubmV4dDtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH07XG59XG5cbnZhciBTdWJzY3JpcHRpb24gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdWJzY3JpcHRpb24oc3RvcmUsIHBhcmVudFN1Yikge1xuICAgIHRoaXMuc3RvcmUgPSBzdG9yZTtcbiAgICB0aGlzLnBhcmVudFN1YiA9IHBhcmVudFN1YjtcbiAgICB0aGlzLnVuc3Vic2NyaWJlID0gbnVsbDtcbiAgICB0aGlzLmxpc3RlbmVycyA9IG51bGxMaXN0ZW5lcnM7XG4gICAgdGhpcy5oYW5kbGVDaGFuZ2VXcmFwcGVyID0gdGhpcy5oYW5kbGVDaGFuZ2VXcmFwcGVyLmJpbmQodGhpcyk7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU3Vic2NyaXB0aW9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8uYWRkTmVzdGVkU3ViID0gZnVuY3Rpb24gYWRkTmVzdGVkU3ViKGxpc3RlbmVyKSB7XG4gICAgdGhpcy50cnlTdWJzY3JpYmUoKTtcbiAgICByZXR1cm4gdGhpcy5saXN0ZW5lcnMuc3Vic2NyaWJlKGxpc3RlbmVyKTtcbiAgfTtcblxuICBfcHJvdG8ubm90aWZ5TmVzdGVkU3VicyA9IGZ1bmN0aW9uIG5vdGlmeU5lc3RlZFN1YnMoKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMubm90aWZ5KCk7XG4gIH07XG5cbiAgX3Byb3RvLmhhbmRsZUNoYW5nZVdyYXBwZXIgPSBmdW5jdGlvbiBoYW5kbGVDaGFuZ2VXcmFwcGVyKCkge1xuICAgIGlmICh0aGlzLm9uU3RhdGVDaGFuZ2UpIHtcbiAgICAgIHRoaXMub25TdGF0ZUNoYW5nZSgpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uaXNTdWJzY3JpYmVkID0gZnVuY3Rpb24gaXNTdWJzY3JpYmVkKCkge1xuICAgIHJldHVybiBCb29sZWFuKHRoaXMudW5zdWJzY3JpYmUpO1xuICB9O1xuXG4gIF9wcm90by50cnlTdWJzY3JpYmUgPSBmdW5jdGlvbiB0cnlTdWJzY3JpYmUoKSB7XG4gICAgaWYgKCF0aGlzLnVuc3Vic2NyaWJlKSB7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlID0gdGhpcy5wYXJlbnRTdWIgPyB0aGlzLnBhcmVudFN1Yi5hZGROZXN0ZWRTdWIodGhpcy5oYW5kbGVDaGFuZ2VXcmFwcGVyKSA6IHRoaXMuc3RvcmUuc3Vic2NyaWJlKHRoaXMuaGFuZGxlQ2hhbmdlV3JhcHBlcik7XG4gICAgICB0aGlzLmxpc3RlbmVycyA9IGNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbigpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8udHJ5VW5zdWJzY3JpYmUgPSBmdW5jdGlvbiB0cnlVbnN1YnNjcmliZSgpIHtcbiAgICBpZiAodGhpcy51bnN1YnNjcmliZSkge1xuICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgdGhpcy51bnN1YnNjcmliZSA9IG51bGw7XG4gICAgICB0aGlzLmxpc3RlbmVycy5jbGVhcigpO1xuICAgICAgdGhpcy5saXN0ZW5lcnMgPSBudWxsTGlzdGVuZXJzO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gU3Vic2NyaXB0aW9uO1xufSgpO1xuXG5leHBvcnQgeyBTdWJzY3JpcHRpb24gYXMgZGVmYXVsdCB9OyIsImltcG9ydCBSZWFjdCwgeyB1c2VNZW1vLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuL0NvbnRleHQnO1xuaW1wb3J0IFN1YnNjcmlwdGlvbiBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuXG5mdW5jdGlvbiBQcm92aWRlcihfcmVmKSB7XG4gIHZhciBzdG9yZSA9IF9yZWYuc3RvcmUsXG4gICAgICBjb250ZXh0ID0gX3JlZi5jb250ZXh0LFxuICAgICAgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuO1xuICB2YXIgY29udGV4dFZhbHVlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24oc3RvcmUpO1xuICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnM7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0b3JlOiBzdG9yZSxcbiAgICAgIHN1YnNjcmlwdGlvbjogc3Vic2NyaXB0aW9uXG4gICAgfTtcbiAgfSwgW3N0b3JlXSk7XG4gIHZhciBwcmV2aW91c1N0YXRlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHN0b3JlLmdldFN0YXRlKCk7XG4gIH0sIFtzdG9yZV0pO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSBjb250ZXh0VmFsdWUuc3Vic2NyaXB0aW9uO1xuICAgIHN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTtcblxuICAgIGlmIChwcmV2aW91c1N0YXRlICE9PSBzdG9yZS5nZXRTdGF0ZSgpKSB7XG4gICAgICBzdWJzY3JpcHRpb24ubm90aWZ5TmVzdGVkU3VicygpO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBzdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gbnVsbDtcbiAgICB9O1xuICB9LCBbY29udGV4dFZhbHVlLCBwcmV2aW91c1N0YXRlXSk7XG4gIHZhciBDb250ZXh0ID0gY29udGV4dCB8fCBSZWFjdFJlZHV4Q29udGV4dDtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY29udGV4dFZhbHVlXG4gIH0sIGNoaWxkcmVuKTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgUHJvdmlkZXIucHJvcFR5cGVzID0ge1xuICAgIHN0b3JlOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgc3Vic2NyaWJlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgZGlzcGF0Y2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICBnZXRTdGF0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICAgIH0pLFxuICAgIGNvbnRleHQ6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5hbnlcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgUHJvdmlkZXI7IiwiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VMYXlvdXRFZmZlY3QgfSBmcm9tICdyZWFjdCc7IC8vIFJlYWN0IGN1cnJlbnRseSB0aHJvd3MgYSB3YXJuaW5nIHdoZW4gdXNpbmcgdXNlTGF5b3V0RWZmZWN0IG9uIHRoZSBzZXJ2ZXIuXG4vLyBUbyBnZXQgYXJvdW5kIGl0LCB3ZSBjYW4gY29uZGl0aW9uYWxseSB1c2VFZmZlY3Qgb24gdGhlIHNlcnZlciAobm8tb3ApIGFuZFxuLy8gdXNlTGF5b3V0RWZmZWN0IGluIHRoZSBicm93c2VyLiBXZSBuZWVkIHVzZUxheW91dEVmZmVjdCB0byBlbnN1cmUgdGhlIHN0b3JlXG4vLyBzdWJzY3JpcHRpb24gY2FsbGJhY2sgYWx3YXlzIGhhcyB0aGUgc2VsZWN0b3IgZnJvbSB0aGUgbGF0ZXN0IHJlbmRlciBjb21taXRcbi8vIGF2YWlsYWJsZSwgb3RoZXJ3aXNlIGEgc3RvcmUgdXBkYXRlIG1heSBoYXBwZW4gYmV0d2VlbiByZW5kZXIgYW5kIHRoZSBlZmZlY3QsXG4vLyB3aGljaCBtYXkgY2F1c2UgbWlzc2VkIHVwZGF0ZXM7IHdlIGFsc28gbXVzdCBlbnN1cmUgdGhlIHN0b3JlIHN1YnNjcmlwdGlvblxuLy8gaXMgY3JlYXRlZCBzeW5jaHJvbm91c2x5LCBvdGhlcndpc2UgYSBzdG9yZSB1cGRhdGUgbWF5IG9jY3VyIGJlZm9yZSB0aGVcbi8vIHN1YnNjcmlwdGlvbiBpcyBjcmVhdGVkIGFuZCBhbiBpbmNvbnNpc3RlbnQgc3RhdGUgbWF5IGJlIG9ic2VydmVkXG5cbmV4cG9ydCB2YXIgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgPyB1c2VMYXlvdXRFZmZlY3QgOiB1c2VFZmZlY3Q7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBob2lzdFN0YXRpY3MgZnJvbSAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuaW1wb3J0IFJlYWN0LCB7IHVzZUNvbnRleHQsIHVzZU1lbW8sIHVzZVJlZiwgdXNlUmVkdWNlciB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGlzVmFsaWRFbGVtZW50VHlwZSwgaXNDb250ZXh0Q29uc3VtZXIgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgU3Vic2NyaXB0aW9uIGZyb20gJy4uL3V0aWxzL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IH0gZnJvbSAnLi4vdXRpbHMvdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vQ29udGV4dCc7IC8vIERlZmluZSBzb21lIGNvbnN0YW50IGFycmF5cyBqdXN0IHRvIGF2b2lkIHJlLWNyZWF0aW5nIHRoZXNlXG5cbnZhciBFTVBUWV9BUlJBWSA9IFtdO1xudmFyIE5PX1NVQlNDUklQVElPTl9BUlJBWSA9IFtudWxsLCBudWxsXTtcblxudmFyIHN0cmluZ2lmeUNvbXBvbmVudCA9IGZ1bmN0aW9uIHN0cmluZ2lmeUNvbXBvbmVudChDb21wKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KENvbXApO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gU3RyaW5nKENvbXApO1xuICB9XG59O1xuXG5mdW5jdGlvbiBzdG9yZVN0YXRlVXBkYXRlc1JlZHVjZXIoc3RhdGUsIGFjdGlvbikge1xuICB2YXIgdXBkYXRlQ291bnQgPSBzdGF0ZVsxXTtcbiAgcmV0dXJuIFthY3Rpb24ucGF5bG9hZCwgdXBkYXRlQ291bnQgKyAxXTtcbn1cblxuZnVuY3Rpb24gdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdFdpdGhBcmdzKGVmZmVjdEZ1bmMsIGVmZmVjdEFyZ3MsIGRlcGVuZGVuY2llcykge1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZWZmZWN0RnVuYy5hcHBseSh2b2lkIDAsIGVmZmVjdEFyZ3MpO1xuICB9LCBkZXBlbmRlbmNpZXMpO1xufVxuXG5mdW5jdGlvbiBjYXB0dXJlV3JhcHBlclByb3BzKGxhc3RXcmFwcGVyUHJvcHMsIGxhc3RDaGlsZFByb3BzLCByZW5kZXJJc1NjaGVkdWxlZCwgd3JhcHBlclByb3BzLCBhY3R1YWxDaGlsZFByb3BzLCBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLCBub3RpZnlOZXN0ZWRTdWJzKSB7XG4gIC8vIFdlIHdhbnQgdG8gY2FwdHVyZSB0aGUgd3JhcHBlciBwcm9wcyBhbmQgY2hpbGQgcHJvcHMgd2UgdXNlZCBmb3IgbGF0ZXIgY29tcGFyaXNvbnNcbiAgbGFzdFdyYXBwZXJQcm9wcy5jdXJyZW50ID0gd3JhcHBlclByb3BzO1xuICBsYXN0Q2hpbGRQcm9wcy5jdXJyZW50ID0gYWN0dWFsQ2hpbGRQcm9wcztcbiAgcmVuZGVySXNTY2hlZHVsZWQuY3VycmVudCA9IGZhbHNlOyAvLyBJZiB0aGUgcmVuZGVyIHdhcyBmcm9tIGEgc3RvcmUgdXBkYXRlLCBjbGVhciBvdXQgdGhhdCByZWZlcmVuY2UgYW5kIGNhc2NhZGUgdGhlIHN1YnNjcmliZXIgdXBkYXRlXG5cbiAgaWYgKGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudCkge1xuICAgIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudCA9IG51bGw7XG4gICAgbm90aWZ5TmVzdGVkU3VicygpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHN1YnNjcmliZVVwZGF0ZXMoc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzLCBzdG9yZSwgc3Vic2NyaXB0aW9uLCBjaGlsZFByb3BzU2VsZWN0b3IsIGxhc3RXcmFwcGVyUHJvcHMsIGxhc3RDaGlsZFByb3BzLCByZW5kZXJJc1NjaGVkdWxlZCwgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSwgbm90aWZ5TmVzdGVkU3VicywgZm9yY2VDb21wb25lbnRVcGRhdGVEaXNwYXRjaCkge1xuICAvLyBJZiB3ZSdyZSBub3Qgc3Vic2NyaWJlZCB0byB0aGUgc3RvcmUsIG5vdGhpbmcgdG8gZG8gaGVyZVxuICBpZiAoIXNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykgcmV0dXJuOyAvLyBDYXB0dXJlIHZhbHVlcyBmb3IgY2hlY2tpbmcgaWYgYW5kIHdoZW4gdGhpcyBjb21wb25lbnQgdW5tb3VudHNcblxuICB2YXIgZGlkVW5zdWJzY3JpYmUgPSBmYWxzZTtcbiAgdmFyIGxhc3RUaHJvd25FcnJvciA9IG51bGw7IC8vIFdlJ2xsIHJ1biB0aGlzIGNhbGxiYWNrIGV2ZXJ5IHRpbWUgYSBzdG9yZSBzdWJzY3JpcHRpb24gdXBkYXRlIHByb3BhZ2F0ZXMgdG8gdGhpcyBjb21wb25lbnRcblxuICB2YXIgY2hlY2tGb3JVcGRhdGVzID0gZnVuY3Rpb24gY2hlY2tGb3JVcGRhdGVzKCkge1xuICAgIGlmIChkaWRVbnN1YnNjcmliZSkge1xuICAgICAgLy8gRG9uJ3QgcnVuIHN0YWxlIGxpc3RlbmVycy5cbiAgICAgIC8vIFJlZHV4IGRvZXNuJ3QgZ3VhcmFudGVlIHVuc3Vic2NyaXB0aW9ucyBoYXBwZW4gdW50aWwgbmV4dCBkaXNwYXRjaC5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbGF0ZXN0U3RvcmVTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gICAgdmFyIG5ld0NoaWxkUHJvcHMsIGVycm9yO1xuXG4gICAgdHJ5IHtcbiAgICAgIC8vIEFjdHVhbGx5IHJ1biB0aGUgc2VsZWN0b3Igd2l0aCB0aGUgbW9zdCByZWNlbnQgc3RvcmUgc3RhdGUgYW5kIHdyYXBwZXIgcHJvcHNcbiAgICAgIC8vIHRvIGRldGVybWluZSB3aGF0IHRoZSBjaGlsZCBwcm9wcyBzaG91bGQgYmVcbiAgICAgIG5ld0NoaWxkUHJvcHMgPSBjaGlsZFByb3BzU2VsZWN0b3IobGF0ZXN0U3RvcmVTdGF0ZSwgbGFzdFdyYXBwZXJQcm9wcy5jdXJyZW50KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBlcnJvciA9IGU7XG4gICAgICBsYXN0VGhyb3duRXJyb3IgPSBlO1xuICAgIH1cblxuICAgIGlmICghZXJyb3IpIHtcbiAgICAgIGxhc3RUaHJvd25FcnJvciA9IG51bGw7XG4gICAgfSAvLyBJZiB0aGUgY2hpbGQgcHJvcHMgaGF2ZW4ndCBjaGFuZ2VkLCBub3RoaW5nIHRvIGRvIGhlcmUgLSBjYXNjYWRlIHRoZSBzdWJzY3JpcHRpb24gdXBkYXRlXG5cblxuICAgIGlmIChuZXdDaGlsZFByb3BzID09PSBsYXN0Q2hpbGRQcm9wcy5jdXJyZW50KSB7XG4gICAgICBpZiAoIXJlbmRlcklzU2NoZWR1bGVkLmN1cnJlbnQpIHtcbiAgICAgICAgbm90aWZ5TmVzdGVkU3VicygpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTYXZlIHJlZmVyZW5jZXMgdG8gdGhlIG5ldyBjaGlsZCBwcm9wcy4gIE5vdGUgdGhhdCB3ZSB0cmFjayB0aGUgXCJjaGlsZCBwcm9wcyBmcm9tIHN0b3JlIHVwZGF0ZVwiXG4gICAgICAvLyBhcyBhIHJlZiBpbnN0ZWFkIG9mIGEgdXNlU3RhdGUvdXNlUmVkdWNlciBiZWNhdXNlIHdlIG5lZWQgYSB3YXkgdG8gZGV0ZXJtaW5lIGlmIHRoYXQgdmFsdWUgaGFzXG4gICAgICAvLyBiZWVuIHByb2Nlc3NlZC4gIElmIHRoaXMgd2VudCBpbnRvIHVzZVN0YXRlL3VzZVJlZHVjZXIsIHdlIGNvdWxkbid0IGNsZWFyIG91dCB0aGUgdmFsdWUgd2l0aG91dFxuICAgICAgLy8gZm9yY2luZyBhbm90aGVyIHJlLXJlbmRlciwgd2hpY2ggd2UgZG9uJ3Qgd2FudC5cbiAgICAgIGxhc3RDaGlsZFByb3BzLmN1cnJlbnQgPSBuZXdDaGlsZFByb3BzO1xuICAgICAgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50ID0gbmV3Q2hpbGRQcm9wcztcbiAgICAgIHJlbmRlcklzU2NoZWR1bGVkLmN1cnJlbnQgPSB0cnVlOyAvLyBJZiB0aGUgY2hpbGQgcHJvcHMgX2RpZF8gY2hhbmdlIChvciB3ZSBjYXVnaHQgYW4gZXJyb3IpLCB0aGlzIHdyYXBwZXIgY29tcG9uZW50IG5lZWRzIHRvIHJlLXJlbmRlclxuXG4gICAgICBmb3JjZUNvbXBvbmVudFVwZGF0ZURpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogJ1NUT1JFX1VQREFURUQnLFxuICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgZXJyb3I6IGVycm9yXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTsgLy8gQWN0dWFsbHkgc3Vic2NyaWJlIHRvIHRoZSBuZWFyZXN0IGNvbm5lY3RlZCBhbmNlc3RvciAob3Igc3RvcmUpXG5cblxuICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IGNoZWNrRm9yVXBkYXRlcztcbiAgc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpOyAvLyBQdWxsIGRhdGEgZnJvbSB0aGUgc3RvcmUgYWZ0ZXIgZmlyc3QgcmVuZGVyIGluIGNhc2UgdGhlIHN0b3JlIGhhc1xuICAvLyBjaGFuZ2VkIHNpbmNlIHdlIGJlZ2FuLlxuXG4gIGNoZWNrRm9yVXBkYXRlcygpO1xuXG4gIHZhciB1bnN1YnNjcmliZVdyYXBwZXIgPSBmdW5jdGlvbiB1bnN1YnNjcmliZVdyYXBwZXIoKSB7XG4gICAgZGlkVW5zdWJzY3JpYmUgPSB0cnVlO1xuICAgIHN1YnNjcmlwdGlvbi50cnlVbnN1YnNjcmliZSgpO1xuICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gbnVsbDtcblxuICAgIGlmIChsYXN0VGhyb3duRXJyb3IpIHtcbiAgICAgIC8vIEl0J3MgcG9zc2libGUgdGhhdCB3ZSBjYXVnaHQgYW4gZXJyb3IgZHVlIHRvIGEgYmFkIG1hcFN0YXRlIGZ1bmN0aW9uLCBidXQgdGhlXG4gICAgICAvLyBwYXJlbnQgcmUtcmVuZGVyZWQgd2l0aG91dCB0aGlzIGNvbXBvbmVudCBhbmQgd2UncmUgYWJvdXQgdG8gdW5tb3VudC5cbiAgICAgIC8vIFRoaXMgc2hvdWxkbid0IGhhcHBlbiBhcyBsb25nIGFzIHdlIGRvIHRvcC1kb3duIHN1YnNjcmlwdGlvbnMgY29ycmVjdGx5LCBidXRcbiAgICAgIC8vIGlmIHdlIGV2ZXIgZG8gdGhvc2Ugd3JvbmcsIHRoaXMgdGhyb3cgd2lsbCBzdXJmYWNlIHRoZSBlcnJvciBpbiBvdXIgdGVzdHMuXG4gICAgICAvLyBJbiB0aGF0IGNhc2UsIHRocm93IHRoZSBlcnJvciBmcm9tIGhlcmUgc28gaXQgZG9lc24ndCBnZXQgbG9zdC5cbiAgICAgIHRocm93IGxhc3RUaHJvd25FcnJvcjtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHVuc3Vic2NyaWJlV3JhcHBlcjtcbn1cblxudmFyIGluaXRTdGF0ZVVwZGF0ZXMgPSBmdW5jdGlvbiBpbml0U3RhdGVVcGRhdGVzKCkge1xuICByZXR1cm4gW251bGwsIDBdO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29ubmVjdEFkdmFuY2VkKFxuLypcbiAgc2VsZWN0b3JGYWN0b3J5IGlzIGEgZnVuYyB0aGF0IGlzIHJlc3BvbnNpYmxlIGZvciByZXR1cm5pbmcgdGhlIHNlbGVjdG9yIGZ1bmN0aW9uIHVzZWQgdG9cbiAgY29tcHV0ZSBuZXcgcHJvcHMgZnJvbSBzdGF0ZSwgcHJvcHMsIGFuZCBkaXNwYXRjaC4gRm9yIGV4YW1wbGU6XG4gICAgIGV4cG9ydCBkZWZhdWx0IGNvbm5lY3RBZHZhbmNlZCgoZGlzcGF0Y2gsIG9wdGlvbnMpID0+IChzdGF0ZSwgcHJvcHMpID0+ICh7XG4gICAgICB0aGluZzogc3RhdGUudGhpbmdzW3Byb3BzLnRoaW5nSWRdLFxuICAgICAgc2F2ZVRoaW5nOiBmaWVsZHMgPT4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvcnMuc2F2ZVRoaW5nKHByb3BzLnRoaW5nSWQsIGZpZWxkcykpLFxuICAgIH0pKShZb3VyQ29tcG9uZW50KVxuICAgQWNjZXNzIHRvIGRpc3BhdGNoIGlzIHByb3ZpZGVkIHRvIHRoZSBmYWN0b3J5IHNvIHNlbGVjdG9yRmFjdG9yaWVzIGNhbiBiaW5kIGFjdGlvbkNyZWF0b3JzXG4gIG91dHNpZGUgb2YgdGhlaXIgc2VsZWN0b3IgYXMgYW4gb3B0aW1pemF0aW9uLiBPcHRpb25zIHBhc3NlZCB0byBjb25uZWN0QWR2YW5jZWQgYXJlIHBhc3NlZCB0b1xuICB0aGUgc2VsZWN0b3JGYWN0b3J5LCBhbG9uZyB3aXRoIGRpc3BsYXlOYW1lIGFuZCBXcmFwcGVkQ29tcG9uZW50LCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50LlxuICAgTm90ZSB0aGF0IHNlbGVjdG9yRmFjdG9yeSBpcyByZXNwb25zaWJsZSBmb3IgYWxsIGNhY2hpbmcvbWVtb2l6YXRpb24gb2YgaW5ib3VuZCBhbmQgb3V0Ym91bmRcbiAgcHJvcHMuIERvIG5vdCB1c2UgY29ubmVjdEFkdmFuY2VkIGRpcmVjdGx5IHdpdGhvdXQgbWVtb2l6aW5nIHJlc3VsdHMgYmV0d2VlbiBjYWxscyB0byB5b3VyXG4gIHNlbGVjdG9yLCBvdGhlcndpc2UgdGhlIENvbm5lY3QgY29tcG9uZW50IHdpbGwgcmUtcmVuZGVyIG9uIGV2ZXJ5IHN0YXRlIG9yIHByb3BzIGNoYW5nZS5cbiovXG5zZWxlY3RvckZhY3RvcnksIC8vIG9wdGlvbnMgb2JqZWN0OlxuX3JlZikge1xuICBpZiAoX3JlZiA9PT0gdm9pZCAwKSB7XG4gICAgX3JlZiA9IHt9O1xuICB9XG5cbiAgdmFyIF9yZWYyID0gX3JlZixcbiAgICAgIF9yZWYyJGdldERpc3BsYXlOYW1lID0gX3JlZjIuZ2V0RGlzcGxheU5hbWUsXG4gICAgICBnZXREaXNwbGF5TmFtZSA9IF9yZWYyJGdldERpc3BsYXlOYW1lID09PSB2b2lkIDAgPyBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiBcIkNvbm5lY3RBZHZhbmNlZChcIiArIG5hbWUgKyBcIilcIjtcbiAgfSA6IF9yZWYyJGdldERpc3BsYXlOYW1lLFxuICAgICAgX3JlZjIkbWV0aG9kTmFtZSA9IF9yZWYyLm1ldGhvZE5hbWUsXG4gICAgICBtZXRob2ROYW1lID0gX3JlZjIkbWV0aG9kTmFtZSA9PT0gdm9pZCAwID8gJ2Nvbm5lY3RBZHZhbmNlZCcgOiBfcmVmMiRtZXRob2ROYW1lLFxuICAgICAgX3JlZjIkcmVuZGVyQ291bnRQcm9wID0gX3JlZjIucmVuZGVyQ291bnRQcm9wLFxuICAgICAgcmVuZGVyQ291bnRQcm9wID0gX3JlZjIkcmVuZGVyQ291bnRQcm9wID09PSB2b2lkIDAgPyB1bmRlZmluZWQgOiBfcmVmMiRyZW5kZXJDb3VudFByb3AsXG4gICAgICBfcmVmMiRzaG91bGRIYW5kbGVTdGEgPSBfcmVmMi5zaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMgPSBfcmVmMiRzaG91bGRIYW5kbGVTdGEgPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmMiRzaG91bGRIYW5kbGVTdGEsXG4gICAgICBfcmVmMiRzdG9yZUtleSA9IF9yZWYyLnN0b3JlS2V5LFxuICAgICAgc3RvcmVLZXkgPSBfcmVmMiRzdG9yZUtleSA9PT0gdm9pZCAwID8gJ3N0b3JlJyA6IF9yZWYyJHN0b3JlS2V5LFxuICAgICAgX3JlZjIkd2l0aFJlZiA9IF9yZWYyLndpdGhSZWYsXG4gICAgICB3aXRoUmVmID0gX3JlZjIkd2l0aFJlZiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMiR3aXRoUmVmLFxuICAgICAgX3JlZjIkZm9yd2FyZFJlZiA9IF9yZWYyLmZvcndhcmRSZWYsXG4gICAgICBmb3J3YXJkUmVmID0gX3JlZjIkZm9yd2FyZFJlZiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMiRmb3J3YXJkUmVmLFxuICAgICAgX3JlZjIkY29udGV4dCA9IF9yZWYyLmNvbnRleHQsXG4gICAgICBjb250ZXh0ID0gX3JlZjIkY29udGV4dCA9PT0gdm9pZCAwID8gUmVhY3RSZWR1eENvbnRleHQgOiBfcmVmMiRjb250ZXh0LFxuICAgICAgY29ubmVjdE9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMiwgW1wiZ2V0RGlzcGxheU5hbWVcIiwgXCJtZXRob2ROYW1lXCIsIFwicmVuZGVyQ291bnRQcm9wXCIsIFwic2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzXCIsIFwic3RvcmVLZXlcIiwgXCJ3aXRoUmVmXCIsIFwiZm9yd2FyZFJlZlwiLCBcImNvbnRleHRcIl0pO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKHJlbmRlckNvdW50UHJvcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJyZW5kZXJDb3VudFByb3AgaXMgcmVtb3ZlZC4gcmVuZGVyIGNvdW50aW5nIGlzIGJ1aWx0IGludG8gdGhlIGxhdGVzdCBSZWFjdCBEZXYgVG9vbHMgcHJvZmlsaW5nIGV4dGVuc2lvblwiKTtcbiAgICB9XG5cbiAgICBpZiAod2l0aFJlZikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd3aXRoUmVmIGlzIHJlbW92ZWQuIFRvIGFjY2VzcyB0aGUgd3JhcHBlZCBpbnN0YW5jZSwgdXNlIGEgcmVmIG9uIHRoZSBjb25uZWN0ZWQgY29tcG9uZW50Jyk7XG4gICAgfVxuXG4gICAgdmFyIGN1c3RvbVN0b3JlV2FybmluZ01lc3NhZ2UgPSAnVG8gdXNlIGEgY3VzdG9tIFJlZHV4IHN0b3JlIGZvciBzcGVjaWZpYyBjb21wb25lbnRzLCBjcmVhdGUgYSBjdXN0b20gUmVhY3QgY29udGV4dCB3aXRoICcgKyBcIlJlYWN0LmNyZWF0ZUNvbnRleHQoKSwgYW5kIHBhc3MgdGhlIGNvbnRleHQgb2JqZWN0IHRvIFJlYWN0IFJlZHV4J3MgUHJvdmlkZXIgYW5kIHNwZWNpZmljIGNvbXBvbmVudHNcIiArICcgbGlrZTogPFByb3ZpZGVyIGNvbnRleHQ9e015Q29udGV4dH0+PENvbm5lY3RlZENvbXBvbmVudCBjb250ZXh0PXtNeUNvbnRleHR9IC8+PC9Qcm92aWRlcj4uICcgKyAnWW91IG1heSBhbHNvIHBhc3MgYSB7Y29udGV4dCA6IE15Q29udGV4dH0gb3B0aW9uIHRvIGNvbm5lY3QnO1xuXG4gICAgaWYgKHN0b3JlS2V5ICE9PSAnc3RvcmUnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3N0b3JlS2V5IGhhcyBiZWVuIHJlbW92ZWQgYW5kIGRvZXMgbm90IGRvIGFueXRoaW5nLiAnICsgY3VzdG9tU3RvcmVXYXJuaW5nTWVzc2FnZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIENvbnRleHQgPSBjb250ZXh0O1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcFdpdGhDb25uZWN0KFdyYXBwZWRDb21wb25lbnQpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhaXNWYWxpZEVsZW1lbnRUeXBlKFdyYXBwZWRDb21wb25lbnQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgbXVzdCBwYXNzIGEgY29tcG9uZW50IHRvIHRoZSBmdW5jdGlvbiByZXR1cm5lZCBieSBcIiArIChtZXRob2ROYW1lICsgXCIuIEluc3RlYWQgcmVjZWl2ZWQgXCIgKyBzdHJpbmdpZnlDb21wb25lbnQoV3JhcHBlZENvbXBvbmVudCkpKTtcbiAgICB9XG5cbiAgICB2YXIgd3JhcHBlZENvbXBvbmVudE5hbWUgPSBXcmFwcGVkQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IFdyYXBwZWRDb21wb25lbnQubmFtZSB8fCAnQ29tcG9uZW50JztcbiAgICB2YXIgZGlzcGxheU5hbWUgPSBnZXREaXNwbGF5TmFtZSh3cmFwcGVkQ29tcG9uZW50TmFtZSk7XG5cbiAgICB2YXIgc2VsZWN0b3JGYWN0b3J5T3B0aW9ucyA9IF9leHRlbmRzKHt9LCBjb25uZWN0T3B0aW9ucywge1xuICAgICAgZ2V0RGlzcGxheU5hbWU6IGdldERpc3BsYXlOYW1lLFxuICAgICAgbWV0aG9kTmFtZTogbWV0aG9kTmFtZSxcbiAgICAgIHJlbmRlckNvdW50UHJvcDogcmVuZGVyQ291bnRQcm9wLFxuICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzOiBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsXG4gICAgICBzdG9yZUtleTogc3RvcmVLZXksXG4gICAgICBkaXNwbGF5TmFtZTogZGlzcGxheU5hbWUsXG4gICAgICB3cmFwcGVkQ29tcG9uZW50TmFtZTogd3JhcHBlZENvbXBvbmVudE5hbWUsXG4gICAgICBXcmFwcGVkQ29tcG9uZW50OiBXcmFwcGVkQ29tcG9uZW50XG4gICAgfSk7XG5cbiAgICB2YXIgcHVyZSA9IGNvbm5lY3RPcHRpb25zLnB1cmU7XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVDaGlsZFNlbGVjdG9yKHN0b3JlKSB7XG4gICAgICByZXR1cm4gc2VsZWN0b3JGYWN0b3J5KHN0b3JlLmRpc3BhdGNoLCBzZWxlY3RvckZhY3RvcnlPcHRpb25zKTtcbiAgICB9IC8vIElmIHdlIGFyZW4ndCBydW5uaW5nIGluIFwicHVyZVwiIG1vZGUsIHdlIGRvbid0IHdhbnQgdG8gbWVtb2l6ZSB2YWx1ZXMuXG4gICAgLy8gVG8gYXZvaWQgY29uZGl0aW9uYWxseSBjYWxsaW5nIGhvb2tzLCB3ZSBmYWxsIGJhY2sgdG8gYSB0aW55IHdyYXBwZXJcbiAgICAvLyB0aGF0IGp1c3QgZXhlY3V0ZXMgdGhlIGdpdmVuIGNhbGxiYWNrIGltbWVkaWF0ZWx5LlxuXG5cbiAgICB2YXIgdXNlUHVyZU9ubHlNZW1vID0gcHVyZSA/IHVzZU1lbW8gOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBDb25uZWN0RnVuY3Rpb24ocHJvcHMpIHtcbiAgICAgIHZhciBfdXNlTWVtbyA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBEaXN0aW5ndWlzaCBiZXR3ZWVuIGFjdHVhbCBcImRhdGFcIiBwcm9wcyB0aGF0IHdlcmUgcGFzc2VkIHRvIHRoZSB3cmFwcGVyIGNvbXBvbmVudCxcbiAgICAgICAgLy8gYW5kIHZhbHVlcyBuZWVkZWQgdG8gY29udHJvbCBiZWhhdmlvciAoZm9yd2FyZGVkIHJlZnMsIGFsdGVybmF0ZSBjb250ZXh0IGluc3RhbmNlcykuXG4gICAgICAgIC8vIFRvIG1haW50YWluIHRoZSB3cmFwcGVyUHJvcHMgb2JqZWN0IHJlZmVyZW5jZSwgbWVtb2l6ZSB0aGlzIGRlc3RydWN0dXJpbmcuXG4gICAgICAgIHZhciByZWFjdFJlZHV4Rm9yd2FyZGVkUmVmID0gcHJvcHMucmVhY3RSZWR1eEZvcndhcmRlZFJlZixcbiAgICAgICAgICAgIHdyYXBwZXJQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBbXCJyZWFjdFJlZHV4Rm9yd2FyZGVkUmVmXCJdKTtcblxuICAgICAgICByZXR1cm4gW3Byb3BzLmNvbnRleHQsIHJlYWN0UmVkdXhGb3J3YXJkZWRSZWYsIHdyYXBwZXJQcm9wc107XG4gICAgICB9LCBbcHJvcHNdKSxcbiAgICAgICAgICBwcm9wc0NvbnRleHQgPSBfdXNlTWVtb1swXSxcbiAgICAgICAgICByZWFjdFJlZHV4Rm9yd2FyZGVkUmVmID0gX3VzZU1lbW9bMV0sXG4gICAgICAgICAgd3JhcHBlclByb3BzID0gX3VzZU1lbW9bMl07XG5cbiAgICAgIHZhciBDb250ZXh0VG9Vc2UgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gVXNlcnMgbWF5IG9wdGlvbmFsbHkgcGFzcyBpbiBhIGN1c3RvbSBjb250ZXh0IGluc3RhbmNlIHRvIHVzZSBpbnN0ZWFkIG9mIG91ciBSZWFjdFJlZHV4Q29udGV4dC5cbiAgICAgICAgLy8gTWVtb2l6ZSB0aGUgY2hlY2sgdGhhdCBkZXRlcm1pbmVzIHdoaWNoIGNvbnRleHQgaW5zdGFuY2Ugd2Ugc2hvdWxkIHVzZS5cbiAgICAgICAgcmV0dXJuIHByb3BzQ29udGV4dCAmJiBwcm9wc0NvbnRleHQuQ29uc3VtZXIgJiYgaXNDb250ZXh0Q29uc3VtZXIoIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KHByb3BzQ29udGV4dC5Db25zdW1lciwgbnVsbCkpID8gcHJvcHNDb250ZXh0IDogQ29udGV4dDtcbiAgICAgIH0sIFtwcm9wc0NvbnRleHQsIENvbnRleHRdKTsgLy8gUmV0cmlldmUgdGhlIHN0b3JlIGFuZCBhbmNlc3RvciBzdWJzY3JpcHRpb24gdmlhIGNvbnRleHQsIGlmIGF2YWlsYWJsZVxuXG4gICAgICB2YXIgY29udGV4dFZhbHVlID0gdXNlQ29udGV4dChDb250ZXh0VG9Vc2UpOyAvLyBUaGUgc3RvcmUgX211c3RfIGV4aXN0IGFzIGVpdGhlciBhIHByb3Agb3IgaW4gY29udGV4dC5cbiAgICAgIC8vIFdlJ2xsIGNoZWNrIHRvIHNlZSBpZiBpdCBfbG9va3NfIGxpa2UgYSBSZWR1eCBzdG9yZSBmaXJzdC5cbiAgICAgIC8vIFRoaXMgYWxsb3dzIHVzIHRvIHBhc3MgdGhyb3VnaCBhIGBzdG9yZWAgcHJvcCB0aGF0IGlzIGp1c3QgYSBwbGFpbiB2YWx1ZS5cblxuICAgICAgdmFyIGRpZFN0b3JlQ29tZUZyb21Qcm9wcyA9IEJvb2xlYW4ocHJvcHMuc3RvcmUpICYmIEJvb2xlYW4ocHJvcHMuc3RvcmUuZ2V0U3RhdGUpICYmIEJvb2xlYW4ocHJvcHMuc3RvcmUuZGlzcGF0Y2gpO1xuICAgICAgdmFyIGRpZFN0b3JlQ29tZUZyb21Db250ZXh0ID0gQm9vbGVhbihjb250ZXh0VmFsdWUpICYmIEJvb2xlYW4oY29udGV4dFZhbHVlLnN0b3JlKTtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWRpZFN0b3JlQ29tZUZyb21Qcm9wcyAmJiAhZGlkU3RvcmVDb21lRnJvbUNvbnRleHQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGZpbmQgXFxcInN0b3JlXFxcIiBpbiB0aGUgY29udGV4dCBvZiBcIiArIChcIlxcXCJcIiArIGRpc3BsYXlOYW1lICsgXCJcXFwiLiBFaXRoZXIgd3JhcCB0aGUgcm9vdCBjb21wb25lbnQgaW4gYSA8UHJvdmlkZXI+LCBcIikgKyBcIm9yIHBhc3MgYSBjdXN0b20gUmVhY3QgY29udGV4dCBwcm92aWRlciB0byA8UHJvdmlkZXI+IGFuZCB0aGUgY29ycmVzcG9uZGluZyBcIiArIChcIlJlYWN0IGNvbnRleHQgY29uc3VtZXIgdG8gXCIgKyBkaXNwbGF5TmFtZSArIFwiIGluIGNvbm5lY3Qgb3B0aW9ucy5cIikpO1xuICAgICAgfSAvLyBCYXNlZCBvbiB0aGUgcHJldmlvdXMgY2hlY2ssIG9uZSBvZiB0aGVzZSBtdXN0IGJlIHRydWVcblxuXG4gICAgICB2YXIgc3RvcmUgPSBkaWRTdG9yZUNvbWVGcm9tUHJvcHMgPyBwcm9wcy5zdG9yZSA6IGNvbnRleHRWYWx1ZS5zdG9yZTtcbiAgICAgIHZhciBjaGlsZFByb3BzU2VsZWN0b3IgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gVGhlIGNoaWxkIHByb3BzIHNlbGVjdG9yIG5lZWRzIHRoZSBzdG9yZSByZWZlcmVuY2UgYXMgYW4gaW5wdXQuXG4gICAgICAgIC8vIFJlLWNyZWF0ZSB0aGlzIHNlbGVjdG9yIHdoZW5ldmVyIHRoZSBzdG9yZSBjaGFuZ2VzLlxuICAgICAgICByZXR1cm4gY3JlYXRlQ2hpbGRTZWxlY3RvcihzdG9yZSk7XG4gICAgICB9LCBbc3RvcmVdKTtcblxuICAgICAgdmFyIF91c2VNZW1vMiA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykgcmV0dXJuIE5PX1NVQlNDUklQVElPTl9BUlJBWTsgLy8gVGhpcyBTdWJzY3JpcHRpb24ncyBzb3VyY2Ugc2hvdWxkIG1hdGNoIHdoZXJlIHN0b3JlIGNhbWUgZnJvbTogcHJvcHMgdnMuIGNvbnRleHQuIEEgY29tcG9uZW50XG4gICAgICAgIC8vIGNvbm5lY3RlZCB0byB0aGUgc3RvcmUgdmlhIHByb3BzIHNob3VsZG4ndCB1c2Ugc3Vic2NyaXB0aW9uIGZyb20gY29udGV4dCwgb3IgdmljZSB2ZXJzYS5cblxuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbihzdG9yZSwgZGlkU3RvcmVDb21lRnJvbVByb3BzID8gbnVsbCA6IGNvbnRleHRWYWx1ZS5zdWJzY3JpcHRpb24pOyAvLyBgbm90aWZ5TmVzdGVkU3Vic2AgaXMgZHVwbGljYXRlZCB0byBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgdGhlIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQgaW5cbiAgICAgICAgLy8gdGhlIG1pZGRsZSBvZiB0aGUgbm90aWZpY2F0aW9uIGxvb3AsIHdoZXJlIGBzdWJzY3JpcHRpb25gIHdpbGwgdGhlbiBiZSBudWxsLiBUaGlzIGNhblxuICAgICAgICAvLyBwcm9iYWJseSBiZSBhdm9pZGVkIGlmIFN1YnNjcmlwdGlvbidzIGxpc3RlbmVycyBsb2dpYyBpcyBjaGFuZ2VkIHRvIG5vdCBjYWxsIGxpc3RlbmVyc1xuICAgICAgICAvLyB0aGF0IGhhdmUgYmVlbiB1bnN1YnNjcmliZWQgaW4gdGhlICBtaWRkbGUgb2YgdGhlIG5vdGlmaWNhdGlvbiBsb29wLlxuXG4gICAgICAgIHZhciBub3RpZnlOZXN0ZWRTdWJzID0gc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnMuYmluZChzdWJzY3JpcHRpb24pO1xuICAgICAgICByZXR1cm4gW3N1YnNjcmlwdGlvbiwgbm90aWZ5TmVzdGVkU3Vic107XG4gICAgICB9LCBbc3RvcmUsIGRpZFN0b3JlQ29tZUZyb21Qcm9wcywgY29udGV4dFZhbHVlXSksXG4gICAgICAgICAgc3Vic2NyaXB0aW9uID0gX3VzZU1lbW8yWzBdLFxuICAgICAgICAgIG5vdGlmeU5lc3RlZFN1YnMgPSBfdXNlTWVtbzJbMV07IC8vIERldGVybWluZSB3aGF0IHtzdG9yZSwgc3Vic2NyaXB0aW9ufSB2YWx1ZSBzaG91bGQgYmUgcHV0IGludG8gbmVzdGVkIGNvbnRleHQsIGlmIG5lY2Vzc2FyeSxcbiAgICAgIC8vIGFuZCBtZW1vaXplIHRoYXQgdmFsdWUgdG8gYXZvaWQgdW5uZWNlc3NhcnkgY29udGV4dCB1cGRhdGVzLlxuXG5cbiAgICAgIHZhciBvdmVycmlkZGVuQ29udGV4dFZhbHVlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChkaWRTdG9yZUNvbWVGcm9tUHJvcHMpIHtcbiAgICAgICAgICAvLyBUaGlzIGNvbXBvbmVudCBpcyBkaXJlY3RseSBzdWJzY3JpYmVkIHRvIGEgc3RvcmUgZnJvbSBwcm9wcy5cbiAgICAgICAgICAvLyBXZSBkb24ndCB3YW50IGRlc2NlbmRhbnRzIHJlYWRpbmcgZnJvbSB0aGlzIHN0b3JlIC0gcGFzcyBkb3duIHdoYXRldmVyXG4gICAgICAgICAgLy8gdGhlIGV4aXN0aW5nIGNvbnRleHQgdmFsdWUgaXMgZnJvbSB0aGUgbmVhcmVzdCBjb25uZWN0ZWQgYW5jZXN0b3IuXG4gICAgICAgICAgcmV0dXJuIGNvbnRleHRWYWx1ZTtcbiAgICAgICAgfSAvLyBPdGhlcndpc2UsIHB1dCB0aGlzIGNvbXBvbmVudCdzIHN1YnNjcmlwdGlvbiBpbnN0YW5jZSBpbnRvIGNvbnRleHQsIHNvIHRoYXRcbiAgICAgICAgLy8gY29ubmVjdGVkIGRlc2NlbmRhbnRzIHdvbid0IHVwZGF0ZSB1bnRpbCBhZnRlciB0aGlzIGNvbXBvbmVudCBpcyBkb25lXG5cblxuICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIGNvbnRleHRWYWx1ZSwge1xuICAgICAgICAgIHN1YnNjcmlwdGlvbjogc3Vic2NyaXB0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfSwgW2RpZFN0b3JlQ29tZUZyb21Qcm9wcywgY29udGV4dFZhbHVlLCBzdWJzY3JpcHRpb25dKTsgLy8gV2UgbmVlZCB0byBmb3JjZSB0aGlzIHdyYXBwZXIgY29tcG9uZW50IHRvIHJlLXJlbmRlciB3aGVuZXZlciBhIFJlZHV4IHN0b3JlIHVwZGF0ZVxuICAgICAgLy8gY2F1c2VzIGEgY2hhbmdlIHRvIHRoZSBjYWxjdWxhdGVkIGNoaWxkIGNvbXBvbmVudCBwcm9wcyAob3Igd2UgY2F1Z2h0IGFuIGVycm9yIGluIG1hcFN0YXRlKVxuXG4gICAgICB2YXIgX3VzZVJlZHVjZXIgPSB1c2VSZWR1Y2VyKHN0b3JlU3RhdGVVcGRhdGVzUmVkdWNlciwgRU1QVFlfQVJSQVksIGluaXRTdGF0ZVVwZGF0ZXMpLFxuICAgICAgICAgIF91c2VSZWR1Y2VyJCA9IF91c2VSZWR1Y2VyWzBdLFxuICAgICAgICAgIHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQgPSBfdXNlUmVkdWNlciRbMF0sXG4gICAgICAgICAgZm9yY2VDb21wb25lbnRVcGRhdGVEaXNwYXRjaCA9IF91c2VSZWR1Y2VyWzFdOyAvLyBQcm9wYWdhdGUgYW55IG1hcFN0YXRlL21hcERpc3BhdGNoIGVycm9ycyB1cHdhcmRzXG5cblxuICAgICAgaWYgKHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQgJiYgcHJldmlvdXNTdGF0ZVVwZGF0ZVJlc3VsdC5lcnJvcikge1xuICAgICAgICB0aHJvdyBwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0LmVycm9yO1xuICAgICAgfSAvLyBTZXQgdXAgcmVmcyB0byBjb29yZGluYXRlIHZhbHVlcyBiZXR3ZWVuIHRoZSBzdWJzY3JpcHRpb24gZWZmZWN0IGFuZCB0aGUgcmVuZGVyIGxvZ2ljXG5cblxuICAgICAgdmFyIGxhc3RDaGlsZFByb3BzID0gdXNlUmVmKCk7XG4gICAgICB2YXIgbGFzdFdyYXBwZXJQcm9wcyA9IHVzZVJlZih3cmFwcGVyUHJvcHMpO1xuICAgICAgdmFyIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUgPSB1c2VSZWYoKTtcbiAgICAgIHZhciByZW5kZXJJc1NjaGVkdWxlZCA9IHVzZVJlZihmYWxzZSk7XG4gICAgICB2YXIgYWN0dWFsQ2hpbGRQcm9wcyA9IHVzZVB1cmVPbmx5TWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFRyaWNreSBsb2dpYyBoZXJlOlxuICAgICAgICAvLyAtIFRoaXMgcmVuZGVyIG1heSBoYXZlIGJlZW4gdHJpZ2dlcmVkIGJ5IGEgUmVkdXggc3RvcmUgdXBkYXRlIHRoYXQgcHJvZHVjZWQgbmV3IGNoaWxkIHByb3BzXG4gICAgICAgIC8vIC0gSG93ZXZlciwgd2UgbWF5IGhhdmUgZ290dGVuIG5ldyB3cmFwcGVyIHByb3BzIGFmdGVyIHRoYXRcbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBuZXcgY2hpbGQgcHJvcHMsIGFuZCB0aGUgc2FtZSB3cmFwcGVyIHByb3BzLCB3ZSBrbm93IHdlIHNob3VsZCB1c2UgdGhlIG5ldyBjaGlsZCBwcm9wcyBhcy1pcy5cbiAgICAgICAgLy8gQnV0LCBpZiB3ZSBoYXZlIG5ldyB3cmFwcGVyIHByb3BzLCB0aG9zZSBtaWdodCBjaGFuZ2UgdGhlIGNoaWxkIHByb3BzLCBzbyB3ZSBoYXZlIHRvIHJlY2FsY3VsYXRlIHRoaW5ncy5cbiAgICAgICAgLy8gU28sIHdlJ2xsIHVzZSB0aGUgY2hpbGQgcHJvcHMgZnJvbSBzdG9yZSB1cGRhdGUgb25seSBpZiB0aGUgd3JhcHBlciBwcm9wcyBhcmUgdGhlIHNhbWUgYXMgbGFzdCB0aW1lLlxuICAgICAgICBpZiAoY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50ICYmIHdyYXBwZXJQcm9wcyA9PT0gbGFzdFdyYXBwZXJQcm9wcy5jdXJyZW50KSB7XG4gICAgICAgICAgcmV0dXJuIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudDtcbiAgICAgICAgfSAvLyBUT0RPIFdlJ3JlIHJlYWRpbmcgdGhlIHN0b3JlIGRpcmVjdGx5IGluIHJlbmRlcigpIGhlcmUuIEJhZCBpZGVhP1xuICAgICAgICAvLyBUaGlzIHdpbGwgbGlrZWx5IGNhdXNlIEJhZCBUaGluZ3MgKFRNKSB0byBoYXBwZW4gaW4gQ29uY3VycmVudCBNb2RlLlxuICAgICAgICAvLyBOb3RlIHRoYXQgd2UgZG8gdGhpcyBiZWNhdXNlIG9uIHJlbmRlcnMgX25vdF8gY2F1c2VkIGJ5IHN0b3JlIHVwZGF0ZXMsIHdlIG5lZWQgdGhlIGxhdGVzdCBzdG9yZSBzdGF0ZVxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgd2hhdCB0aGUgY2hpbGQgcHJvcHMgc2hvdWxkIGJlLlxuXG5cbiAgICAgICAgcmV0dXJuIGNoaWxkUHJvcHNTZWxlY3RvcihzdG9yZS5nZXRTdGF0ZSgpLCB3cmFwcGVyUHJvcHMpO1xuICAgICAgfSwgW3N0b3JlLCBwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0LCB3cmFwcGVyUHJvcHNdKTsgLy8gV2UgbmVlZCB0aGlzIHRvIGV4ZWN1dGUgc3luY2hyb25vdXNseSBldmVyeSB0aW1lIHdlIHJlLXJlbmRlci4gSG93ZXZlciwgUmVhY3Qgd2FybnNcbiAgICAgIC8vIGFib3V0IHVzZUxheW91dEVmZmVjdCBpbiBTU1IsIHNvIHdlIHRyeSB0byBkZXRlY3QgZW52aXJvbm1lbnQgYW5kIGZhbGwgYmFjayB0b1xuICAgICAgLy8ganVzdCB1c2VFZmZlY3QgaW5zdGVhZCB0byBhdm9pZCB0aGUgd2FybmluZywgc2luY2UgbmVpdGhlciB3aWxsIHJ1biBhbnl3YXkuXG5cbiAgICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3RXaXRoQXJncyhjYXB0dXJlV3JhcHBlclByb3BzLCBbbGFzdFdyYXBwZXJQcm9wcywgbGFzdENoaWxkUHJvcHMsIHJlbmRlcklzU2NoZWR1bGVkLCB3cmFwcGVyUHJvcHMsIGFjdHVhbENoaWxkUHJvcHMsIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUsIG5vdGlmeU5lc3RlZFN1YnNdKTsgLy8gT3VyIHJlLXN1YnNjcmliZSBsb2dpYyBvbmx5IHJ1bnMgd2hlbiB0aGUgc3RvcmUvc3Vic2NyaXB0aW9uIHNldHVwIGNoYW5nZXNcblxuICAgICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdFdpdGhBcmdzKHN1YnNjcmliZVVwZGF0ZXMsIFtzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsIHN0b3JlLCBzdWJzY3JpcHRpb24sIGNoaWxkUHJvcHNTZWxlY3RvciwgbGFzdFdyYXBwZXJQcm9wcywgbGFzdENoaWxkUHJvcHMsIHJlbmRlcklzU2NoZWR1bGVkLCBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLCBub3RpZnlOZXN0ZWRTdWJzLCBmb3JjZUNvbXBvbmVudFVwZGF0ZURpc3BhdGNoXSwgW3N0b3JlLCBzdWJzY3JpcHRpb24sIGNoaWxkUHJvcHNTZWxlY3Rvcl0pOyAvLyBOb3cgdGhhdCBhbGwgdGhhdCdzIGRvbmUsIHdlIGNhbiBmaW5hbGx5IHRyeSB0byBhY3R1YWxseSByZW5kZXIgdGhlIGNoaWxkIGNvbXBvbmVudC5cbiAgICAgIC8vIFdlIG1lbW9pemUgdGhlIGVsZW1lbnRzIGZvciB0aGUgcmVuZGVyZWQgY2hpbGQgY29tcG9uZW50IGFzIGFuIG9wdGltaXphdGlvbi5cblxuICAgICAgdmFyIHJlbmRlcmVkV3JhcHBlZENvbXBvbmVudCA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoV3JhcHBlZENvbXBvbmVudCwgX2V4dGVuZHMoe30sIGFjdHVhbENoaWxkUHJvcHMsIHtcbiAgICAgICAgICByZWY6IHJlYWN0UmVkdXhGb3J3YXJkZWRSZWZcbiAgICAgICAgfSkpO1xuICAgICAgfSwgW3JlYWN0UmVkdXhGb3J3YXJkZWRSZWYsIFdyYXBwZWRDb21wb25lbnQsIGFjdHVhbENoaWxkUHJvcHNdKTsgLy8gSWYgUmVhY3Qgc2VlcyB0aGUgZXhhY3Qgc2FtZSBlbGVtZW50IHJlZmVyZW5jZSBhcyBsYXN0IHRpbWUsIGl0IGJhaWxzIG91dCBvZiByZS1yZW5kZXJpbmdcbiAgICAgIC8vIHRoYXQgY2hpbGQsIHNhbWUgYXMgaWYgaXQgd2FzIHdyYXBwZWQgaW4gUmVhY3QubWVtbygpIG9yIHJldHVybmVkIGZhbHNlIGZyb20gc2hvdWxkQ29tcG9uZW50VXBkYXRlLlxuXG4gICAgICB2YXIgcmVuZGVyZWRDaGlsZCA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSB7XG4gICAgICAgICAgLy8gSWYgdGhpcyBjb21wb25lbnQgaXMgc3Vic2NyaWJlZCB0byBzdG9yZSB1cGRhdGVzLCB3ZSBuZWVkIHRvIHBhc3MgaXRzIG93blxuICAgICAgICAgIC8vIHN1YnNjcmlwdGlvbiBpbnN0YW5jZSBkb3duIHRvIG91ciBkZXNjZW5kYW50cy4gVGhhdCBtZWFucyByZW5kZXJpbmcgdGhlIHNhbWVcbiAgICAgICAgICAvLyBDb250ZXh0IGluc3RhbmNlLCBhbmQgcHV0dGluZyBhIGRpZmZlcmVudCB2YWx1ZSBpbnRvIHRoZSBjb250ZXh0LlxuICAgICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb250ZXh0VG9Vc2UuUHJvdmlkZXIsIHtcbiAgICAgICAgICAgIHZhbHVlOiBvdmVycmlkZGVuQ29udGV4dFZhbHVlXG4gICAgICAgICAgfSwgcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQ7XG4gICAgICB9LCBbQ29udGV4dFRvVXNlLCByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQsIG92ZXJyaWRkZW5Db250ZXh0VmFsdWVdKTtcbiAgICAgIHJldHVybiByZW5kZXJlZENoaWxkO1xuICAgIH0gLy8gSWYgd2UncmUgaW4gXCJwdXJlXCIgbW9kZSwgZW5zdXJlIG91ciB3cmFwcGVyIGNvbXBvbmVudCBvbmx5IHJlLXJlbmRlcnMgd2hlbiBpbmNvbWluZyBwcm9wcyBoYXZlIGNoYW5nZWQuXG5cblxuICAgIHZhciBDb25uZWN0ID0gcHVyZSA/IFJlYWN0Lm1lbW8oQ29ubmVjdEZ1bmN0aW9uKSA6IENvbm5lY3RGdW5jdGlvbjtcbiAgICBDb25uZWN0LldyYXBwZWRDb21wb25lbnQgPSBXcmFwcGVkQ29tcG9uZW50O1xuICAgIENvbm5lY3QuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcblxuICAgIGlmIChmb3J3YXJkUmVmKSB7XG4gICAgICB2YXIgZm9yd2FyZGVkID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBmb3J3YXJkQ29ubmVjdFJlZihwcm9wcywgcmVmKSB7XG4gICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb25uZWN0LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAgICByZWFjdFJlZHV4Rm9yd2FyZGVkUmVmOiByZWZcbiAgICAgICAgfSkpO1xuICAgICAgfSk7XG4gICAgICBmb3J3YXJkZWQuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgICAgIGZvcndhcmRlZC5XcmFwcGVkQ29tcG9uZW50ID0gV3JhcHBlZENvbXBvbmVudDtcbiAgICAgIHJldHVybiBob2lzdFN0YXRpY3MoZm9yd2FyZGVkLCBXcmFwcGVkQ29tcG9uZW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gaG9pc3RTdGF0aWNzKENvbm5lY3QsIFdyYXBwZWRDb21wb25lbnQpO1xuICB9O1xufSIsImZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCB5ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChpcyhvYmpBLCBvYmpCKSkgcmV0dXJuIHRydWU7XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fCBvYmpBID09PSBudWxsIHx8IHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXNBLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqQiwga2V5c0FbaV0pIHx8ICFpcyhvYmpBW2tleXNBW2ldXSwgb2JqQltrZXlzQVtpXV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59IiwiaW1wb3J0IHZlcmlmeVBsYWluT2JqZWN0IGZyb20gJy4uL3V0aWxzL3ZlcmlmeVBsYWluT2JqZWN0JztcbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGdldENvbnN0YW50KSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0Q29uc3RhbnRTZWxlY3RvcihkaXNwYXRjaCwgb3B0aW9ucykge1xuICAgIHZhciBjb25zdGFudCA9IGdldENvbnN0YW50KGRpc3BhdGNoLCBvcHRpb25zKTtcblxuICAgIGZ1bmN0aW9uIGNvbnN0YW50U2VsZWN0b3IoKSB7XG4gICAgICByZXR1cm4gY29uc3RhbnQ7XG4gICAgfVxuXG4gICAgY29uc3RhbnRTZWxlY3Rvci5kZXBlbmRzT25Pd25Qcm9wcyA9IGZhbHNlO1xuICAgIHJldHVybiBjb25zdGFudFNlbGVjdG9yO1xuICB9O1xufSAvLyBkZXBlbmRzT25Pd25Qcm9wcyBpcyB1c2VkIGJ5IGNyZWF0ZU1hcFRvUHJvcHNQcm94eSB0byBkZXRlcm1pbmUgd2hldGhlciB0byBwYXNzIHByb3BzIGFzIGFyZ3Ncbi8vIHRvIHRoZSBtYXBUb1Byb3BzIGZ1bmN0aW9uIGJlaW5nIHdyYXBwZWQuIEl0IGlzIGFsc28gdXNlZCBieSBtYWtlUHVyZVByb3BzU2VsZWN0b3IgdG8gZGV0ZXJtaW5lXG4vLyB3aGV0aGVyIG1hcFRvUHJvcHMgbmVlZHMgdG8gYmUgaW52b2tlZCB3aGVuIHByb3BzIGhhdmUgY2hhbmdlZC5cbi8vXG4vLyBBIGxlbmd0aCBvZiBvbmUgc2lnbmFscyB0aGF0IG1hcFRvUHJvcHMgZG9lcyBub3QgZGVwZW5kIG9uIHByb3BzIGZyb20gdGhlIHBhcmVudCBjb21wb25lbnQuXG4vLyBBIGxlbmd0aCBvZiB6ZXJvIGlzIGFzc3VtZWQgdG8gbWVhbiBtYXBUb1Byb3BzIGlzIGdldHRpbmcgYXJncyB2aWEgYXJndW1lbnRzIG9yIC4uLmFyZ3MgYW5kXG4vLyB0aGVyZWZvcmUgbm90IHJlcG9ydGluZyBpdHMgbGVuZ3RoIGFjY3VyYXRlbHkuLlxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVwZW5kc09uT3duUHJvcHMobWFwVG9Qcm9wcykge1xuICByZXR1cm4gbWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcyAhPT0gbnVsbCAmJiBtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzICE9PSB1bmRlZmluZWQgPyBCb29sZWFuKG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIDogbWFwVG9Qcm9wcy5sZW5ndGggIT09IDE7XG59IC8vIFVzZWQgYnkgd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24gYW5kIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uLFxuLy8gdGhpcyBmdW5jdGlvbiB3cmFwcyBtYXBUb1Byb3BzIGluIGEgcHJveHkgZnVuY3Rpb24gd2hpY2ggZG9lcyBzZXZlcmFsIHRoaW5nczpcbi8vXG4vLyAgKiBEZXRlY3RzIHdoZXRoZXIgdGhlIG1hcFRvUHJvcHMgZnVuY3Rpb24gYmVpbmcgY2FsbGVkIGRlcGVuZHMgb24gcHJvcHMsIHdoaWNoXG4vLyAgICBpcyB1c2VkIGJ5IHNlbGVjdG9yRmFjdG9yeSB0byBkZWNpZGUgaWYgaXQgc2hvdWxkIHJlaW52b2tlIG9uIHByb3BzIGNoYW5nZXMuXG4vL1xuLy8gICogT24gZmlyc3QgY2FsbCwgaGFuZGxlcyBtYXBUb1Byb3BzIGlmIHJldHVybnMgYW5vdGhlciBmdW5jdGlvbiwgYW5kIHRyZWF0cyB0aGF0XG4vLyAgICBuZXcgZnVuY3Rpb24gYXMgdGhlIHRydWUgbWFwVG9Qcm9wcyBmb3Igc3Vic2VxdWVudCBjYWxscy5cbi8vXG4vLyAgKiBPbiBmaXJzdCBjYWxsLCB2ZXJpZmllcyB0aGUgZmlyc3QgcmVzdWx0IGlzIGEgcGxhaW4gb2JqZWN0LCBpbiBvcmRlciB0byB3YXJuXG4vLyAgICB0aGUgZGV2ZWxvcGVyIHRoYXQgdGhlaXIgbWFwVG9Qcm9wcyBmdW5jdGlvbiBpcyBub3QgcmV0dXJuaW5nIGEgdmFsaWQgcmVzdWx0LlxuLy9cblxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBUb1Byb3BzLCBtZXRob2ROYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0UHJveHlTZWxlY3RvcihkaXNwYXRjaCwgX3JlZikge1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IF9yZWYuZGlzcGxheU5hbWU7XG5cbiAgICB2YXIgcHJveHkgPSBmdW5jdGlvbiBtYXBUb1Byb3BzUHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykge1xuICAgICAgcmV0dXJuIHByb3h5LmRlcGVuZHNPbk93blByb3BzID8gcHJveHkubWFwVG9Qcm9wcyhzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSA6IHByb3h5Lm1hcFRvUHJvcHMoc3RhdGVPckRpc3BhdGNoKTtcbiAgICB9OyAvLyBhbGxvdyBkZXRlY3RGYWN0b3J5QW5kVmVyaWZ5IHRvIGdldCBvd25Qcm9wc1xuXG5cbiAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IHRydWU7XG5cbiAgICBwcm94eS5tYXBUb1Byb3BzID0gZnVuY3Rpb24gZGV0ZWN0RmFjdG9yeUFuZFZlcmlmeShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSB7XG4gICAgICBwcm94eS5tYXBUb1Byb3BzID0gbWFwVG9Qcm9wcztcbiAgICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gZ2V0RGVwZW5kc09uT3duUHJvcHMobWFwVG9Qcm9wcyk7XG4gICAgICB2YXIgcHJvcHMgPSBwcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKTtcblxuICAgICAgaWYgKHR5cGVvZiBwcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwcm94eS5tYXBUb1Byb3BzID0gcHJvcHM7XG4gICAgICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gZ2V0RGVwZW5kc09uT3duUHJvcHMocHJvcHMpO1xuICAgICAgICBwcm9wcyA9IHByb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgdmVyaWZ5UGxhaW5PYmplY3QocHJvcHMsIGRpc3BsYXlOYW1lLCBtZXRob2ROYW1lKTtcbiAgICAgIHJldHVybiBwcm9wcztcbiAgICB9O1xuXG4gICAgcmV0dXJuIHByb3h5O1xuICB9O1xufSIsImltcG9ydCB7IGJpbmRBY3Rpb25DcmVhdG9ycyB9IGZyb20gJ3JlZHV4JztcbmltcG9ydCB7IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQsIHdyYXBNYXBUb1Byb3BzRnVuYyB9IGZyb20gJy4vd3JhcE1hcFRvUHJvcHMnO1xuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uKG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1hcERpc3BhdGNoVG9Qcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBEaXNwYXRjaFRvUHJvcHMsICdtYXBEaXNwYXRjaFRvUHJvcHMnKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNNaXNzaW5nKG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gIW1hcERpc3BhdGNoVG9Qcm9wcyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKGRpc3BhdGNoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRpc3BhdGNoOiBkaXNwYXRjaFxuICAgIH07XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc09iamVjdChtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuIG1hcERpc3BhdGNoVG9Qcm9wcyAmJiB0eXBlb2YgbWFwRGlzcGF0Y2hUb1Byb3BzID09PSAnb2JqZWN0JyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKGRpc3BhdGNoKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9ycyhtYXBEaXNwYXRjaFRvUHJvcHMsIGRpc3BhdGNoKTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZGVmYXVsdCBbd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzRnVuY3Rpb24sIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc01pc3NpbmcsIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc09iamVjdF07IiwiaW1wb3J0IHsgd3JhcE1hcFRvUHJvcHNDb25zdGFudCwgd3JhcE1hcFRvUHJvcHNGdW5jIH0gZnJvbSAnLi93cmFwTWFwVG9Qcm9wcyc7XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24obWFwU3RhdGVUb1Byb3BzKSB7XG4gIHJldHVybiB0eXBlb2YgbWFwU3RhdGVUb1Byb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcFN0YXRlVG9Qcm9wcywgJ21hcFN0YXRlVG9Qcm9wcycpIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc01pc3NpbmcobWFwU3RhdGVUb1Byb3BzKSB7XG4gIHJldHVybiAhbWFwU3RhdGVUb1Byb3BzID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9KSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWFwU3RhdGVUb1Byb3BzSXNGdW5jdGlvbiwgd2hlbk1hcFN0YXRlVG9Qcm9wc0lzTWlzc2luZ107IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgdmVyaWZ5UGxhaW5PYmplY3QgZnJvbSAnLi4vdXRpbHMvdmVyaWZ5UGxhaW5PYmplY3QnO1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRNZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb3duUHJvcHMsIHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNZXJnZVByb3BzRnVuYyhtZXJnZVByb3BzKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0TWVyZ2VQcm9wc1Byb3h5KGRpc3BhdGNoLCBfcmVmKSB7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gX3JlZi5kaXNwbGF5TmFtZSxcbiAgICAgICAgcHVyZSA9IF9yZWYucHVyZSxcbiAgICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbCA9IF9yZWYuYXJlTWVyZ2VkUHJvcHNFcXVhbDtcbiAgICB2YXIgaGFzUnVuT25jZSA9IGZhbHNlO1xuICAgIHZhciBtZXJnZWRQcm9wcztcbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VQcm9wc1Byb3h5KHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gICAgICB2YXIgbmV4dE1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG5cbiAgICAgIGlmIChoYXNSdW5PbmNlKSB7XG4gICAgICAgIGlmICghcHVyZSB8fCAhYXJlTWVyZ2VkUHJvcHNFcXVhbChuZXh0TWVyZ2VkUHJvcHMsIG1lcmdlZFByb3BzKSkgbWVyZ2VkUHJvcHMgPSBuZXh0TWVyZ2VkUHJvcHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBoYXNSdW5PbmNlID0gdHJ1ZTtcbiAgICAgICAgbWVyZ2VkUHJvcHMgPSBuZXh0TWVyZ2VkUHJvcHM7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB2ZXJpZnlQbGFpbk9iamVjdChtZXJnZWRQcm9wcywgZGlzcGxheU5hbWUsICdtZXJnZVByb3BzJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgICB9O1xuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NZXJnZVByb3BzSXNGdW5jdGlvbihtZXJnZVByb3BzKSB7XG4gIHJldHVybiB0eXBlb2YgbWVyZ2VQcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNZXJnZVByb3BzRnVuYyhtZXJnZVByb3BzKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWVyZ2VQcm9wc0lzT21pdHRlZChtZXJnZVByb3BzKSB7XG4gIHJldHVybiAhbWVyZ2VQcm9wcyA/IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGVmYXVsdE1lcmdlUHJvcHM7XG4gIH0gOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZGVmYXVsdCBbd2hlbk1lcmdlUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWVyZ2VQcm9wc0lzT21pdHRlZF07IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgdmVyaWZ5U3Vic2VsZWN0b3JzIGZyb20gJy4vdmVyaWZ5U3Vic2VsZWN0b3JzJztcbmV4cG9ydCBmdW5jdGlvbiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24gaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yKHN0YXRlLCBvd25Qcm9wcykge1xuICAgIHJldHVybiBtZXJnZVByb3BzKG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpLCBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKSwgb3duUHJvcHMpO1xuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCwgX3JlZikge1xuICB2YXIgYXJlU3RhdGVzRXF1YWwgPSBfcmVmLmFyZVN0YXRlc0VxdWFsLFxuICAgICAgYXJlT3duUHJvcHNFcXVhbCA9IF9yZWYuYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbCA9IF9yZWYuYXJlU3RhdGVQcm9wc0VxdWFsO1xuICB2YXIgaGFzUnVuQXRMZWFzdE9uY2UgPSBmYWxzZTtcbiAgdmFyIHN0YXRlO1xuICB2YXIgb3duUHJvcHM7XG4gIHZhciBzdGF0ZVByb3BzO1xuICB2YXIgZGlzcGF0Y2hQcm9wcztcbiAgdmFyIG1lcmdlZFByb3BzO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZUZpcnN0Q2FsbChmaXJzdFN0YXRlLCBmaXJzdE93blByb3BzKSB7XG4gICAgc3RhdGUgPSBmaXJzdFN0YXRlO1xuICAgIG93blByb3BzID0gZmlyc3RPd25Qcm9wcztcbiAgICBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgaGFzUnVuQXRMZWFzdE9uY2UgPSB0cnVlO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1Byb3BzQW5kTmV3U3RhdGUoKSB7XG4gICAgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIGlmIChtYXBEaXNwYXRjaFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1Byb3BzKCkge1xuICAgIGlmIChtYXBTdGF0ZVRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICBpZiAobWFwRGlzcGF0Y2hUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVOZXdTdGF0ZSgpIHtcbiAgICB2YXIgbmV4dFN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICB2YXIgc3RhdGVQcm9wc0NoYW5nZWQgPSAhYXJlU3RhdGVQcm9wc0VxdWFsKG5leHRTdGF0ZVByb3BzLCBzdGF0ZVByb3BzKTtcbiAgICBzdGF0ZVByb3BzID0gbmV4dFN0YXRlUHJvcHM7XG4gICAgaWYgKHN0YXRlUHJvcHNDaGFuZ2VkKSBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVN1YnNlcXVlbnRDYWxscyhuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykge1xuICAgIHZhciBwcm9wc0NoYW5nZWQgPSAhYXJlT3duUHJvcHNFcXVhbChuZXh0T3duUHJvcHMsIG93blByb3BzKTtcbiAgICB2YXIgc3RhdGVDaGFuZ2VkID0gIWFyZVN0YXRlc0VxdWFsKG5leHRTdGF0ZSwgc3RhdGUpO1xuICAgIHN0YXRlID0gbmV4dFN0YXRlO1xuICAgIG93blByb3BzID0gbmV4dE93blByb3BzO1xuICAgIGlmIChwcm9wc0NoYW5nZWQgJiYgc3RhdGVDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3UHJvcHNBbmROZXdTdGF0ZSgpO1xuICAgIGlmIChwcm9wc0NoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdQcm9wcygpO1xuICAgIGlmIChzdGF0ZUNoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdTdGF0ZSgpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBwdXJlRmluYWxQcm9wc1NlbGVjdG9yKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSB7XG4gICAgcmV0dXJuIGhhc1J1bkF0TGVhc3RPbmNlID8gaGFuZGxlU3Vic2VxdWVudENhbGxzKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSA6IGhhbmRsZUZpcnN0Q2FsbChuZXh0U3RhdGUsIG5leHRPd25Qcm9wcyk7XG4gIH07XG59IC8vIFRPRE86IEFkZCBtb3JlIGNvbW1lbnRzXG4vLyBJZiBwdXJlIGlzIHRydWUsIHRoZSBzZWxlY3RvciByZXR1cm5lZCBieSBzZWxlY3RvckZhY3Rvcnkgd2lsbCBtZW1vaXplIGl0cyByZXN1bHRzLFxuLy8gYWxsb3dpbmcgY29ubmVjdEFkdmFuY2VkJ3Mgc2hvdWxkQ29tcG9uZW50VXBkYXRlIHRvIHJldHVybiBmYWxzZSBpZiBmaW5hbFxuLy8gcHJvcHMgaGF2ZSBub3QgY2hhbmdlZC4gSWYgZmFsc2UsIHRoZSBzZWxlY3RvciB3aWxsIGFsd2F5cyByZXR1cm4gYSBuZXdcbi8vIG9iamVjdCBhbmQgc2hvdWxkQ29tcG9uZW50VXBkYXRlIHdpbGwgYWx3YXlzIHJldHVybiB0cnVlLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KGRpc3BhdGNoLCBfcmVmMikge1xuICB2YXIgaW5pdE1hcFN0YXRlVG9Qcm9wcyA9IF9yZWYyLmluaXRNYXBTdGF0ZVRvUHJvcHMsXG4gICAgICBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzID0gX3JlZjIuaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgICAgIGluaXRNZXJnZVByb3BzID0gX3JlZjIuaW5pdE1lcmdlUHJvcHMsXG4gICAgICBvcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjIsIFtcImluaXRNYXBTdGF0ZVRvUHJvcHNcIiwgXCJpbml0TWFwRGlzcGF0Y2hUb1Byb3BzXCIsIFwiaW5pdE1lcmdlUHJvcHNcIl0pO1xuXG4gIHZhciBtYXBTdGF0ZVRvUHJvcHMgPSBpbml0TWFwU3RhdGVUb1Byb3BzKGRpc3BhdGNoLCBvcHRpb25zKTtcbiAgdmFyIG1hcERpc3BhdGNoVG9Qcm9wcyA9IGluaXRNYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuICB2YXIgbWVyZ2VQcm9wcyA9IGluaXRNZXJnZVByb3BzKGRpc3BhdGNoLCBvcHRpb25zKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZlcmlmeVN1YnNlbGVjdG9ycyhtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgb3B0aW9ucy5kaXNwbGF5TmFtZSk7XG4gIH1cblxuICB2YXIgc2VsZWN0b3JGYWN0b3J5ID0gb3B0aW9ucy5wdXJlID8gcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkgOiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5O1xuICByZXR1cm4gc2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCwgb3B0aW9ucyk7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBjb25uZWN0QWR2YW5jZWQgZnJvbSAnLi4vY29tcG9uZW50cy9jb25uZWN0QWR2YW5jZWQnO1xuaW1wb3J0IHNoYWxsb3dFcXVhbCBmcm9tICcuLi91dGlscy9zaGFsbG93RXF1YWwnO1xuaW1wb3J0IGRlZmF1bHRNYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tYXBEaXNwYXRjaFRvUHJvcHMnO1xuaW1wb3J0IGRlZmF1bHRNYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tYXBTdGF0ZVRvUHJvcHMnO1xuaW1wb3J0IGRlZmF1bHRNZXJnZVByb3BzRmFjdG9yaWVzIGZyb20gJy4vbWVyZ2VQcm9wcyc7XG5pbXBvcnQgZGVmYXVsdFNlbGVjdG9yRmFjdG9yeSBmcm9tICcuL3NlbGVjdG9yRmFjdG9yeSc7XG4vKlxuICBjb25uZWN0IGlzIGEgZmFjYWRlIG92ZXIgY29ubmVjdEFkdmFuY2VkLiBJdCB0dXJucyBpdHMgYXJncyBpbnRvIGEgY29tcGF0aWJsZVxuICBzZWxlY3RvckZhY3RvcnksIHdoaWNoIGhhcyB0aGUgc2lnbmF0dXJlOlxuXG4gICAgKGRpc3BhdGNoLCBvcHRpb25zKSA9PiAobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpID0+IG5leHRGaW5hbFByb3BzXG4gIFxuICBjb25uZWN0IHBhc3NlcyBpdHMgYXJncyB0byBjb25uZWN0QWR2YW5jZWQgYXMgb3B0aW9ucywgd2hpY2ggd2lsbCBpbiB0dXJuIHBhc3MgdGhlbSB0b1xuICBzZWxlY3RvckZhY3RvcnkgZWFjaCB0aW1lIGEgQ29ubmVjdCBjb21wb25lbnQgaW5zdGFuY2UgaXMgaW5zdGFudGlhdGVkIG9yIGhvdCByZWxvYWRlZC5cblxuICBzZWxlY3RvckZhY3RvcnkgcmV0dXJucyBhIGZpbmFsIHByb3BzIHNlbGVjdG9yIGZyb20gaXRzIG1hcFN0YXRlVG9Qcm9wcyxcbiAgbWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcywgbWVyZ2VQcm9wcyxcbiAgbWVyZ2VQcm9wc0ZhY3RvcmllcywgYW5kIHB1cmUgYXJncy5cblxuICBUaGUgcmVzdWx0aW5nIGZpbmFsIHByb3BzIHNlbGVjdG9yIGlzIGNhbGxlZCBieSB0aGUgQ29ubmVjdCBjb21wb25lbnQgaW5zdGFuY2Ugd2hlbmV2ZXJcbiAgaXQgcmVjZWl2ZXMgbmV3IHByb3BzIG9yIHN0b3JlIHN0YXRlLlxuICovXG5cbmZ1bmN0aW9uIG1hdGNoKGFyZywgZmFjdG9yaWVzLCBuYW1lKSB7XG4gIGZvciAodmFyIGkgPSBmYWN0b3JpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgcmVzdWx0ID0gZmFjdG9yaWVzW2ldKGFyZyk7XG4gICAgaWYgKHJlc3VsdCkgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoZGlzcGF0Y2gsIG9wdGlvbnMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHZhbHVlIG9mIHR5cGUgXCIgKyB0eXBlb2YgYXJnICsgXCIgZm9yIFwiICsgbmFtZSArIFwiIGFyZ3VtZW50IHdoZW4gY29ubmVjdGluZyBjb21wb25lbnQgXCIgKyBvcHRpb25zLndyYXBwZWRDb21wb25lbnROYW1lICsgXCIuXCIpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHJpY3RFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhID09PSBiO1xufSAvLyBjcmVhdGVDb25uZWN0IHdpdGggZGVmYXVsdCBhcmdzIGJ1aWxkcyB0aGUgJ29mZmljaWFsJyBjb25uZWN0IGJlaGF2aW9yLiBDYWxsaW5nIGl0IHdpdGhcbi8vIGRpZmZlcmVudCBvcHRpb25zIG9wZW5zIHVwIHNvbWUgdGVzdGluZyBhbmQgZXh0ZW5zaWJpbGl0eSBzY2VuYXJpb3NcblxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29ubmVjdChfdGVtcCkge1xuICB2YXIgX3JlZiA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wLFxuICAgICAgX3JlZiRjb25uZWN0SE9DID0gX3JlZi5jb25uZWN0SE9DLFxuICAgICAgY29ubmVjdEhPQyA9IF9yZWYkY29ubmVjdEhPQyA9PT0gdm9pZCAwID8gY29ubmVjdEFkdmFuY2VkIDogX3JlZiRjb25uZWN0SE9DLFxuICAgICAgX3JlZiRtYXBTdGF0ZVRvUHJvcHNGID0gX3JlZi5tYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMsXG4gICAgICBtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgPSBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YgPT09IHZvaWQgMCA/IGRlZmF1bHRNYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YsXG4gICAgICBfcmVmJG1hcERpc3BhdGNoVG9Qcm8gPSBfcmVmLm1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWFwRGlzcGF0Y2hUb1BybyA9PT0gdm9pZCAwID8gZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWFwRGlzcGF0Y2hUb1BybyxcbiAgICAgIF9yZWYkbWVyZ2VQcm9wc0ZhY3RvciA9IF9yZWYubWVyZ2VQcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1lcmdlUHJvcHNGYWN0b3JpZXMgPSBfcmVmJG1lcmdlUHJvcHNGYWN0b3IgPT09IHZvaWQgMCA/IGRlZmF1bHRNZXJnZVByb3BzRmFjdG9yaWVzIDogX3JlZiRtZXJnZVByb3BzRmFjdG9yLFxuICAgICAgX3JlZiRzZWxlY3RvckZhY3RvcnkgPSBfcmVmLnNlbGVjdG9yRmFjdG9yeSxcbiAgICAgIHNlbGVjdG9yRmFjdG9yeSA9IF9yZWYkc2VsZWN0b3JGYWN0b3J5ID09PSB2b2lkIDAgPyBkZWZhdWx0U2VsZWN0b3JGYWN0b3J5IDogX3JlZiRzZWxlY3RvckZhY3Rvcnk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIF9yZWYyKSB7XG4gICAgaWYgKF9yZWYyID09PSB2b2lkIDApIHtcbiAgICAgIF9yZWYyID0ge307XG4gICAgfVxuXG4gICAgdmFyIF9yZWYzID0gX3JlZjIsXG4gICAgICAgIF9yZWYzJHB1cmUgPSBfcmVmMy5wdXJlLFxuICAgICAgICBwdXJlID0gX3JlZjMkcHVyZSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYzJHB1cmUsXG4gICAgICAgIF9yZWYzJGFyZVN0YXRlc0VxdWFsID0gX3JlZjMuYXJlU3RhdGVzRXF1YWwsXG4gICAgICAgIGFyZVN0YXRlc0VxdWFsID0gX3JlZjMkYXJlU3RhdGVzRXF1YWwgPT09IHZvaWQgMCA/IHN0cmljdEVxdWFsIDogX3JlZjMkYXJlU3RhdGVzRXF1YWwsXG4gICAgICAgIF9yZWYzJGFyZU93blByb3BzRXF1YSA9IF9yZWYzLmFyZU93blByb3BzRXF1YWwsXG4gICAgICAgIGFyZU93blByb3BzRXF1YWwgPSBfcmVmMyRhcmVPd25Qcm9wc0VxdWEgPT09IHZvaWQgMCA/IHNoYWxsb3dFcXVhbCA6IF9yZWYzJGFyZU93blByb3BzRXF1YSxcbiAgICAgICAgX3JlZjMkYXJlU3RhdGVQcm9wc0VxID0gX3JlZjMuYXJlU3RhdGVQcm9wc0VxdWFsLFxuICAgICAgICBhcmVTdGF0ZVByb3BzRXF1YWwgPSBfcmVmMyRhcmVTdGF0ZVByb3BzRXEgPT09IHZvaWQgMCA/IHNoYWxsb3dFcXVhbCA6IF9yZWYzJGFyZVN0YXRlUHJvcHNFcSxcbiAgICAgICAgX3JlZjMkYXJlTWVyZ2VkUHJvcHNFID0gX3JlZjMuYXJlTWVyZ2VkUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbCA9IF9yZWYzJGFyZU1lcmdlZFByb3BzRSA9PT0gdm9pZCAwID8gc2hhbGxvd0VxdWFsIDogX3JlZjMkYXJlTWVyZ2VkUHJvcHNFLFxuICAgICAgICBleHRyYU9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMywgW1wicHVyZVwiLCBcImFyZVN0YXRlc0VxdWFsXCIsIFwiYXJlT3duUHJvcHNFcXVhbFwiLCBcImFyZVN0YXRlUHJvcHNFcXVhbFwiLCBcImFyZU1lcmdlZFByb3BzRXF1YWxcIl0pO1xuXG4gICAgdmFyIGluaXRNYXBTdGF0ZVRvUHJvcHMgPSBtYXRjaChtYXBTdGF0ZVRvUHJvcHMsIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcywgJ21hcFN0YXRlVG9Qcm9wcycpO1xuICAgIHZhciBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzID0gbWF0Y2gobWFwRGlzcGF0Y2hUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsICdtYXBEaXNwYXRjaFRvUHJvcHMnKTtcbiAgICB2YXIgaW5pdE1lcmdlUHJvcHMgPSBtYXRjaChtZXJnZVByb3BzLCBtZXJnZVByb3BzRmFjdG9yaWVzLCAnbWVyZ2VQcm9wcycpO1xuICAgIHJldHVybiBjb25uZWN0SE9DKHNlbGVjdG9yRmFjdG9yeSwgX2V4dGVuZHMoe1xuICAgICAgLy8gdXNlZCBpbiBlcnJvciBtZXNzYWdlc1xuICAgICAgbWV0aG9kTmFtZTogJ2Nvbm5lY3QnLFxuICAgICAgLy8gdXNlZCB0byBjb21wdXRlIENvbm5lY3QncyBkaXNwbGF5TmFtZSBmcm9tIHRoZSB3cmFwcGVkIGNvbXBvbmVudCdzIGRpc3BsYXlOYW1lLlxuICAgICAgZ2V0RGlzcGxheU5hbWU6IGZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIFwiQ29ubmVjdChcIiArIG5hbWUgKyBcIilcIjtcbiAgICAgIH0sXG4gICAgICAvLyBpZiBtYXBTdGF0ZVRvUHJvcHMgaXMgZmFsc3ksIHRoZSBDb25uZWN0IGNvbXBvbmVudCBkb2Vzbid0IHN1YnNjcmliZSB0byBzdG9yZSBzdGF0ZSBjaGFuZ2VzXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXM6IEJvb2xlYW4obWFwU3RhdGVUb1Byb3BzKSxcbiAgICAgIC8vIHBhc3NlZCB0aHJvdWdoIHRvIHNlbGVjdG9yRmFjdG9yeVxuICAgICAgaW5pdE1hcFN0YXRlVG9Qcm9wczogaW5pdE1hcFN0YXRlVG9Qcm9wcyxcbiAgICAgIGluaXRNYXBEaXNwYXRjaFRvUHJvcHM6IGluaXRNYXBEaXNwYXRjaFRvUHJvcHMsXG4gICAgICBpbml0TWVyZ2VQcm9wczogaW5pdE1lcmdlUHJvcHMsXG4gICAgICBwdXJlOiBwdXJlLFxuICAgICAgYXJlU3RhdGVzRXF1YWw6IGFyZVN0YXRlc0VxdWFsLFxuICAgICAgYXJlT3duUHJvcHNFcXVhbDogYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbDogYXJlU3RhdGVQcm9wc0VxdWFsLFxuICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbDogYXJlTWVyZ2VkUHJvcHNFcXVhbFxuICAgIH0sIGV4dHJhT3B0aW9ucykpO1xuICB9O1xufVxuZXhwb3J0IGRlZmF1bHQgLyojX19QVVJFX18qL2NyZWF0ZUNvbm5lY3QoKTsiLCJpbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuLi9jb21wb25lbnRzL0NvbnRleHQnO1xuLyoqXG4gKiBBIGhvb2sgdG8gYWNjZXNzIHRoZSB2YWx1ZSBvZiB0aGUgYFJlYWN0UmVkdXhDb250ZXh0YC4gVGhpcyBpcyBhIGxvdy1sZXZlbFxuICogaG9vayB0aGF0IHlvdSBzaG91bGQgdXN1YWxseSBub3QgbmVlZCB0byBjYWxsIGRpcmVjdGx5LlxuICpcbiAqIEByZXR1cm5zIHthbnl9IHRoZSB2YWx1ZSBvZiB0aGUgYFJlYWN0UmVkdXhDb250ZXh0YFxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuICogaW1wb3J0IHsgdXNlUmVkdXhDb250ZXh0IH0gZnJvbSAncmVhY3QtcmVkdXgnXG4gKlxuICogZXhwb3J0IGNvbnN0IENvdW50ZXJDb21wb25lbnQgPSAoeyB2YWx1ZSB9KSA9PiB7XG4gKiAgIGNvbnN0IHsgc3RvcmUgfSA9IHVzZVJlZHV4Q29udGV4dCgpXG4gKiAgIHJldHVybiA8ZGl2PntzdG9yZS5nZXRTdGF0ZSgpfTwvZGl2PlxuICogfVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VSZWR1eENvbnRleHQoKSB7XG4gIHZhciBjb250ZXh0VmFsdWUgPSB1c2VDb250ZXh0KFJlYWN0UmVkdXhDb250ZXh0KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhY29udGV4dFZhbHVlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgZmluZCByZWFjdC1yZWR1eCBjb250ZXh0IHZhbHVlOyBwbGVhc2UgZW5zdXJlIHRoZSBjb21wb25lbnQgaXMgd3JhcHBlZCBpbiBhIDxQcm92aWRlcj4nKTtcbiAgfVxuXG4gIHJldHVybiBjb250ZXh0VmFsdWU7XG59IiwiaW1wb3J0IHsgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi4vY29tcG9uZW50cy9Db250ZXh0JztcbmltcG9ydCB7IHVzZVJlZHV4Q29udGV4dCBhcyB1c2VEZWZhdWx0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi91c2VSZWR1eENvbnRleHQnO1xuLyoqXG4gKiBIb29rIGZhY3RvcnksIHdoaWNoIGNyZWF0ZXMgYSBgdXNlU3RvcmVgIGhvb2sgYm91bmQgdG8gYSBnaXZlbiBjb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhY3QuQ29udGV4dH0gW2NvbnRleHQ9UmVhY3RSZWR1eENvbnRleHRdIENvbnRleHQgcGFzc2VkIHRvIHlvdXIgYDxQcm92aWRlcj5gLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGB1c2VTdG9yZWAgaG9vayBib3VuZCB0byB0aGUgc3BlY2lmaWVkIGNvbnRleHQuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN0b3JlSG9vayhjb250ZXh0KSB7XG4gIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHtcbiAgICBjb250ZXh0ID0gUmVhY3RSZWR1eENvbnRleHQ7XG4gIH1cblxuICB2YXIgdXNlUmVkdXhDb250ZXh0ID0gY29udGV4dCA9PT0gUmVhY3RSZWR1eENvbnRleHQgPyB1c2VEZWZhdWx0UmVkdXhDb250ZXh0IDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB1c2VDb250ZXh0KGNvbnRleHQpO1xuICB9O1xuICByZXR1cm4gZnVuY3Rpb24gdXNlU3RvcmUoKSB7XG4gICAgdmFyIF91c2VSZWR1eENvbnRleHQgPSB1c2VSZWR1eENvbnRleHQoKSxcbiAgICAgICAgc3RvcmUgPSBfdXNlUmVkdXhDb250ZXh0LnN0b3JlO1xuXG4gICAgcmV0dXJuIHN0b3JlO1xuICB9O1xufVxuLyoqXG4gKiBBIGhvb2sgdG8gYWNjZXNzIHRoZSByZWR1eCBzdG9yZS5cbiAqXG4gKiBAcmV0dXJucyB7YW55fSB0aGUgcmVkdXggc3RvcmVcbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbiAqIGltcG9ydCB7IHVzZVN0b3JlIH0gZnJvbSAncmVhY3QtcmVkdXgnXG4gKlxuICogZXhwb3J0IGNvbnN0IEV4YW1wbGVDb21wb25lbnQgPSAoKSA9PiB7XG4gKiAgIGNvbnN0IHN0b3JlID0gdXNlU3RvcmUoKVxuICogICByZXR1cm4gPGRpdj57c3RvcmUuZ2V0U3RhdGUoKX08L2Rpdj5cbiAqIH1cbiAqL1xuXG5leHBvcnQgdmFyIHVzZVN0b3JlID0gLyojX19QVVJFX18qL2NyZWF0ZVN0b3JlSG9vaygpOyIsImltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi4vY29tcG9uZW50cy9Db250ZXh0JztcbmltcG9ydCB7IHVzZVN0b3JlIGFzIHVzZURlZmF1bHRTdG9yZSwgY3JlYXRlU3RvcmVIb29rIH0gZnJvbSAnLi91c2VTdG9yZSc7XG4vKipcbiAqIEhvb2sgZmFjdG9yeSwgd2hpY2ggY3JlYXRlcyBhIGB1c2VEaXNwYXRjaGAgaG9vayBib3VuZCB0byBhIGdpdmVuIGNvbnRleHQuXG4gKlxuICogQHBhcmFtIHtSZWFjdC5Db250ZXh0fSBbY29udGV4dD1SZWFjdFJlZHV4Q29udGV4dF0gQ29udGV4dCBwYXNzZWQgdG8geW91ciBgPFByb3ZpZGVyPmAuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgYHVzZURpc3BhdGNoYCBob29rIGJvdW5kIHRvIHRoZSBzcGVjaWZpZWQgY29udGV4dC5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRGlzcGF0Y2hIb29rKGNvbnRleHQpIHtcbiAgaWYgKGNvbnRleHQgPT09IHZvaWQgMCkge1xuICAgIGNvbnRleHQgPSBSZWFjdFJlZHV4Q29udGV4dDtcbiAgfVxuXG4gIHZhciB1c2VTdG9yZSA9IGNvbnRleHQgPT09IFJlYWN0UmVkdXhDb250ZXh0ID8gdXNlRGVmYXVsdFN0b3JlIDogY3JlYXRlU3RvcmVIb29rKGNvbnRleHQpO1xuICByZXR1cm4gZnVuY3Rpb24gdXNlRGlzcGF0Y2goKSB7XG4gICAgdmFyIHN0b3JlID0gdXNlU3RvcmUoKTtcbiAgICByZXR1cm4gc3RvcmUuZGlzcGF0Y2g7XG4gIH07XG59XG4vKipcbiAqIEEgaG9vayB0byBhY2Nlc3MgdGhlIHJlZHV4IGBkaXNwYXRjaGAgZnVuY3Rpb24uXG4gKlxuICogQHJldHVybnMge2FueXxmdW5jdGlvbn0gcmVkdXggc3RvcmUncyBgZGlzcGF0Y2hgIGZ1bmN0aW9uXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBpbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCdcbiAqIGltcG9ydCB7IHVzZURpc3BhdGNoIH0gZnJvbSAncmVhY3QtcmVkdXgnXG4gKlxuICogZXhwb3J0IGNvbnN0IENvdW50ZXJDb21wb25lbnQgPSAoeyB2YWx1ZSB9KSA9PiB7XG4gKiAgIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKVxuICogICBjb25zdCBpbmNyZWFzZUNvdW50ZXIgPSB1c2VDYWxsYmFjaygoKSA9PiBkaXNwYXRjaCh7IHR5cGU6ICdpbmNyZWFzZS1jb3VudGVyJyB9KSwgW10pXG4gKiAgIHJldHVybiAoXG4gKiAgICAgPGRpdj5cbiAqICAgICAgIDxzcGFuPnt2YWx1ZX08L3NwYW4+XG4gKiAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e2luY3JlYXNlQ291bnRlcn0+SW5jcmVhc2UgY291bnRlcjwvYnV0dG9uPlxuICogICAgIDwvZGl2PlxuICogICApXG4gKiB9XG4gKi9cblxuZXhwb3J0IHZhciB1c2VEaXNwYXRjaCA9IC8qI19fUFVSRV9fKi9jcmVhdGVEaXNwYXRjaEhvb2soKTsiLCJpbXBvcnQgeyB1c2VSZWR1Y2VyLCB1c2VSZWYsIHVzZU1lbW8sIHVzZUNvbnRleHQsIHVzZURlYnVnVmFsdWUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VSZWR1eENvbnRleHQgYXMgdXNlRGVmYXVsdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vdXNlUmVkdXhDb250ZXh0JztcbmltcG9ydCBTdWJzY3JpcHRpb24gZnJvbSAnLi4vdXRpbHMvU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgfSBmcm9tICcuLi91dGlscy91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0JztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi4vY29tcG9uZW50cy9Db250ZXh0JztcblxudmFyIHJlZkVxdWFsaXR5ID0gZnVuY3Rpb24gcmVmRXF1YWxpdHkoYSwgYikge1xuICByZXR1cm4gYSA9PT0gYjtcbn07XG5cbmZ1bmN0aW9uIHVzZVNlbGVjdG9yV2l0aFN0b3JlQW5kU3Vic2NyaXB0aW9uKHNlbGVjdG9yLCBlcXVhbGl0eUZuLCBzdG9yZSwgY29udGV4dFN1Yikge1xuICB2YXIgX3VzZVJlZHVjZXIgPSB1c2VSZWR1Y2VyKGZ1bmN0aW9uIChzKSB7XG4gICAgcmV0dXJuIHMgKyAxO1xuICB9LCAwKSxcbiAgICAgIGZvcmNlUmVuZGVyID0gX3VzZVJlZHVjZXJbMV07XG5cbiAgdmFyIHN1YnNjcmlwdGlvbiA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBuZXcgU3Vic2NyaXB0aW9uKHN0b3JlLCBjb250ZXh0U3ViKTtcbiAgfSwgW3N0b3JlLCBjb250ZXh0U3ViXSk7XG4gIHZhciBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yID0gdXNlUmVmKCk7XG4gIHZhciBsYXRlc3RTZWxlY3RvciA9IHVzZVJlZigpO1xuICB2YXIgbGF0ZXN0U3RvcmVTdGF0ZSA9IHVzZVJlZigpO1xuICB2YXIgbGF0ZXN0U2VsZWN0ZWRTdGF0ZSA9IHVzZVJlZigpO1xuICB2YXIgc3RvcmVTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gIHZhciBzZWxlY3RlZFN0YXRlO1xuXG4gIHRyeSB7XG4gICAgaWYgKHNlbGVjdG9yICE9PSBsYXRlc3RTZWxlY3Rvci5jdXJyZW50IHx8IHN0b3JlU3RhdGUgIT09IGxhdGVzdFN0b3JlU3RhdGUuY3VycmVudCB8fCBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQpIHtcbiAgICAgIHNlbGVjdGVkU3RhdGUgPSBzZWxlY3RvcihzdG9yZVN0YXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZWN0ZWRTdGF0ZSA9IGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudDtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmIChsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQpIHtcbiAgICAgIGVyci5tZXNzYWdlICs9IFwiXFxuVGhlIGVycm9yIG1heSBiZSBjb3JyZWxhdGVkIHdpdGggdGhpcyBwcmV2aW91cyBlcnJvcjpcXG5cIiArIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudC5zdGFjayArIFwiXFxuXFxuXCI7XG4gICAgfVxuXG4gICAgdGhyb3cgZXJyO1xuICB9XG5cbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgbGF0ZXN0U2VsZWN0b3IuY3VycmVudCA9IHNlbGVjdG9yO1xuICAgIGxhdGVzdFN0b3JlU3RhdGUuY3VycmVudCA9IHN0b3JlU3RhdGU7XG4gICAgbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50ID0gc2VsZWN0ZWRTdGF0ZTtcbiAgICBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQgPSB1bmRlZmluZWQ7XG4gIH0pO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBjaGVja0ZvclVwZGF0ZXMoKSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgbmV3U2VsZWN0ZWRTdGF0ZSA9IGxhdGVzdFNlbGVjdG9yLmN1cnJlbnQoc3RvcmUuZ2V0U3RhdGUoKSk7XG5cbiAgICAgICAgaWYgKGVxdWFsaXR5Rm4obmV3U2VsZWN0ZWRTdGF0ZSwgbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50KSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudCA9IG5ld1NlbGVjdGVkU3RhdGU7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgLy8gd2UgaWdub3JlIGFsbCBlcnJvcnMgaGVyZSwgc2luY2Ugd2hlbiB0aGUgY29tcG9uZW50XG4gICAgICAgIC8vIGlzIHJlLXJlbmRlcmVkLCB0aGUgc2VsZWN0b3JzIGFyZSBjYWxsZWQgYWdhaW4sIGFuZFxuICAgICAgICAvLyB3aWxsIHRocm93IGFnYWluLCBpZiBuZWl0aGVyIHByb3BzIG5vciBzdG9yZSBzdGF0ZVxuICAgICAgICAvLyBjaGFuZ2VkXG4gICAgICAgIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCA9IGVycjtcbiAgICAgIH1cblxuICAgICAgZm9yY2VSZW5kZXIoKTtcbiAgICB9XG5cbiAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IGNoZWNrRm9yVXBkYXRlcztcbiAgICBzdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7XG4gICAgY2hlY2tGb3JVcGRhdGVzKCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBzdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICB9LCBbc3RvcmUsIHN1YnNjcmlwdGlvbl0pO1xuICByZXR1cm4gc2VsZWN0ZWRTdGF0ZTtcbn1cbi8qKlxuICogSG9vayBmYWN0b3J5LCB3aGljaCBjcmVhdGVzIGEgYHVzZVNlbGVjdG9yYCBob29rIGJvdW5kIHRvIGEgZ2l2ZW4gY29udGV4dC5cbiAqXG4gKiBAcGFyYW0ge1JlYWN0LkNvbnRleHR9IFtjb250ZXh0PVJlYWN0UmVkdXhDb250ZXh0XSBDb250ZXh0IHBhc3NlZCB0byB5b3VyIGA8UHJvdmlkZXI+YC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBgdXNlU2VsZWN0b3JgIGhvb2sgYm91bmQgdG8gdGhlIHNwZWNpZmllZCBjb250ZXh0LlxuICovXG5cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9ySG9vayhjb250ZXh0KSB7XG4gIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHtcbiAgICBjb250ZXh0ID0gUmVhY3RSZWR1eENvbnRleHQ7XG4gIH1cblxuICB2YXIgdXNlUmVkdXhDb250ZXh0ID0gY29udGV4dCA9PT0gUmVhY3RSZWR1eENvbnRleHQgPyB1c2VEZWZhdWx0UmVkdXhDb250ZXh0IDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB1c2VDb250ZXh0KGNvbnRleHQpO1xuICB9O1xuICByZXR1cm4gZnVuY3Rpb24gdXNlU2VsZWN0b3Ioc2VsZWN0b3IsIGVxdWFsaXR5Rm4pIHtcbiAgICBpZiAoZXF1YWxpdHlGbiA9PT0gdm9pZCAwKSB7XG4gICAgICBlcXVhbGl0eUZuID0gcmVmRXF1YWxpdHk7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIXNlbGVjdG9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgbXVzdCBwYXNzIGEgc2VsZWN0b3IgdG8gdXNlU2VsZWN0b3JcIik7XG4gICAgfVxuXG4gICAgdmFyIF91c2VSZWR1eENvbnRleHQgPSB1c2VSZWR1eENvbnRleHQoKSxcbiAgICAgICAgc3RvcmUgPSBfdXNlUmVkdXhDb250ZXh0LnN0b3JlLFxuICAgICAgICBjb250ZXh0U3ViID0gX3VzZVJlZHV4Q29udGV4dC5zdWJzY3JpcHRpb247XG5cbiAgICB2YXIgc2VsZWN0ZWRTdGF0ZSA9IHVzZVNlbGVjdG9yV2l0aFN0b3JlQW5kU3Vic2NyaXB0aW9uKHNlbGVjdG9yLCBlcXVhbGl0eUZuLCBzdG9yZSwgY29udGV4dFN1Yik7XG4gICAgdXNlRGVidWdWYWx1ZShzZWxlY3RlZFN0YXRlKTtcbiAgICByZXR1cm4gc2VsZWN0ZWRTdGF0ZTtcbiAgfTtcbn1cbi8qKlxuICogQSBob29rIHRvIGFjY2VzcyB0aGUgcmVkdXggc3RvcmUncyBzdGF0ZS4gVGhpcyBob29rIHRha2VzIGEgc2VsZWN0b3IgZnVuY3Rpb25cbiAqIGFzIGFuIGFyZ3VtZW50LiBUaGUgc2VsZWN0b3IgaXMgY2FsbGVkIHdpdGggdGhlIHN0b3JlIHN0YXRlLlxuICpcbiAqIFRoaXMgaG9vayB0YWtlcyBhbiBvcHRpb25hbCBlcXVhbGl0eSBjb21wYXJpc29uIGZ1bmN0aW9uIGFzIHRoZSBzZWNvbmQgcGFyYW1ldGVyXG4gKiB0aGF0IGFsbG93cyB5b3UgdG8gY3VzdG9taXplIHRoZSB3YXkgdGhlIHNlbGVjdGVkIHN0YXRlIGlzIGNvbXBhcmVkIHRvIGRldGVybWluZVxuICogd2hldGhlciB0aGUgY29tcG9uZW50IG5lZWRzIHRvIGJlIHJlLXJlbmRlcmVkLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHNlbGVjdG9yIHRoZSBzZWxlY3RvciBmdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbj19IGVxdWFsaXR5Rm4gdGhlIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSB1c2VkIHRvIGRldGVybWluZSBlcXVhbGl0eVxuICpcbiAqIEByZXR1cm5zIHthbnl9IHRoZSBzZWxlY3RlZCBzdGF0ZVxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuICogaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCdcbiAqXG4gKiBleHBvcnQgY29uc3QgQ291bnRlckNvbXBvbmVudCA9ICgpID0+IHtcbiAqICAgY29uc3QgY291bnRlciA9IHVzZVNlbGVjdG9yKHN0YXRlID0+IHN0YXRlLmNvdW50ZXIpXG4gKiAgIHJldHVybiA8ZGl2Pntjb3VudGVyfTwvZGl2PlxuICogfVxuICovXG5cbmV4cG9ydCB2YXIgdXNlU2VsZWN0b3IgPSAvKiNfX1BVUkVfXyovY3JlYXRlU2VsZWN0b3JIb29rKCk7IiwiaW1wb3J0IFByb3ZpZGVyIGZyb20gJy4vY29tcG9uZW50cy9Qcm92aWRlcic7XG5pbXBvcnQgY29ubmVjdEFkdmFuY2VkIGZyb20gJy4vY29tcG9uZW50cy9jb25uZWN0QWR2YW5jZWQnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuL2NvbXBvbmVudHMvQ29udGV4dCc7XG5pbXBvcnQgY29ubmVjdCBmcm9tICcuL2Nvbm5lY3QvY29ubmVjdCc7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgY3JlYXRlRGlzcGF0Y2hIb29rIH0gZnJvbSAnLi9ob29rcy91c2VEaXNwYXRjaCc7XG5pbXBvcnQgeyB1c2VTZWxlY3RvciwgY3JlYXRlU2VsZWN0b3JIb29rIH0gZnJvbSAnLi9ob29rcy91c2VTZWxlY3Rvcic7XG5pbXBvcnQgeyB1c2VTdG9yZSwgY3JlYXRlU3RvcmVIb29rIH0gZnJvbSAnLi9ob29rcy91c2VTdG9yZSc7XG5pbXBvcnQgeyBzZXRCYXRjaCB9IGZyb20gJy4vdXRpbHMvYmF0Y2gnO1xuaW1wb3J0IHsgdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMgYXMgYmF0Y2ggfSBmcm9tICcuL3V0aWxzL3JlYWN0QmF0Y2hlZFVwZGF0ZXMnO1xuaW1wb3J0IHNoYWxsb3dFcXVhbCBmcm9tICcuL3V0aWxzL3NoYWxsb3dFcXVhbCc7XG5zZXRCYXRjaChiYXRjaCk7XG5leHBvcnQgeyBQcm92aWRlciwgY29ubmVjdEFkdmFuY2VkLCBSZWFjdFJlZHV4Q29udGV4dCwgY29ubmVjdCwgYmF0Y2gsIHVzZURpc3BhdGNoLCBjcmVhdGVEaXNwYXRjaEhvb2ssIHVzZVNlbGVjdG9yLCBjcmVhdGVTZWxlY3Rvckhvb2ssIHVzZVN0b3JlLCBjcmVhdGVTdG9yZUhvb2ssIHNoYWxsb3dFcXVhbCB9OyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufSIsImV4cG9ydCBjb25zdCByZW1vdmUgPSA8VD4oYXJyYXk6IFRbXSwgaXRlbTogVCkgPT4ge1xyXG4gIGNvbnN0IGluZGV4ID0gYXJyYXkuaW5kZXhPZihpdGVtKTtcclxuXHJcbiAgaWYgKGluZGV4ID4gLTEpIHtcclxuICAgIGFycmF5LnNwbGljZShpbmRleCwgMSk7XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHJlbW92ZUxhc3QgPSAodGV4dDogc3RyaW5nLCBjb3VudDogbnVtYmVyKSA9PiB7XHJcbiAgcmV0dXJuIHRleHQuc3Vic3RyaW5nKDAsIHRleHQubGVuZ3RoIC0gY291bnQpO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHJhbmdlID0gKHJhbmdlOiBudW1iZXIgfCBbbnVtYmVyLCBudW1iZXJdKSA9PiB7XHJcbiAgaWYgKEFycmF5LmlzQXJyYXkocmFuZ2UpKVxyXG4gICAgcmV0dXJuIEFycmF5KHJhbmdlWzFdIC0gcmFuZ2VbMF0pXHJcbiAgICAgIC5maWxsKHt9KVxyXG4gICAgICAubWFwKChfLCBpKSA9PiByYW5nZVswXSArIGkpO1xyXG4gIGVsc2Uge1xyXG4gICAgcmV0dXJuIEFycmF5KHJhbmdlKVxyXG4gICAgICAuZmlsbCh7fSlcclxuICAgICAgLm1hcCgoXywgaSkgPT4gaSk7XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHJlcGVhdCA9IDxUPihjb3VudDogbnVtYmVyLCB2YWx1ZTogVCk6IFRbXSA9PiBBcnJheShjb3VudCkuZmlsbCh2YWx1ZSk7XHJcbiIsImV4cG9ydCBjb25zdCB0cmFuc2xhdGlvbnMgPSB7XHJcbiAgc2hhZGVyczogXCJTaGFkZXJzXCIsXHJcbiAgdmVydGV4U2hhZGVyOiBcIlZlcnRleCBTaGFkZXJcIixcclxuICBmcmFnbWVudFNoYWRlcjogXCJGcmFnbWVudCBTaGFkZXJcIixcclxuICBkcmF3T3B0aW9uczogXCJEcmF3IG9wdGlvbnNcIixcclxuICB0ZXh0dXJlczogXCJUZXh0dXJlc1wiLFxyXG4gIHVuaWZvcm1zOiBcIlVuaWZvcm1zXCIsXHJcbiAgYXR0cmlidXRlQnVmZmVyczogXCJBdHRyaWJ1dGUgQnVmZmVyc1wiLFxyXG4gIGN1c3RvbTogXCJDdXN0b21cIixcclxufTtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQge1xyXG4gIHVzZUZvY3VzT25TdGF0ZUNoYW5nZSxcclxuICB1c2VEcm9wZG93bkNsb3NlV2hlbkNsaWNrZWRPdXRzaWRlLFxyXG4gIHVzZURyb3Bkb3duTGlzdEtleWJvYXJkTmF2aWdhdG9yLFxyXG4gIHVzZURyb3Bkb3duU3RhdGUsXHJcbiAgVmlydHVhbGl6ZWRMaXN0LFxyXG4gIERyb3Bkb3duRGlzcGF0Y2gsXHJcbiAgRHJvcGRvd25BY3Rpb25zLFxyXG59IGZyb20gXCJAbWF0ZXVzem1pZ2FzL3JlYWN0LWRyb3Bkb3duXCI7XHJcblxyXG5leHBvcnQgdHlwZSBEcm9wZG93bk9wdGlvbiA9IHtcclxuICBpZDogc3RyaW5nO1xyXG4gIGRpc3BsYXk6IHN0cmluZztcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBEcm9wZG93biA9IFJlYWN0Lm1lbW8oXHJcbiAgKHByb3BzOiB7XHJcbiAgICBzZWxlY3RlZEl0ZW1JZDogc3RyaW5nIHwgbnVsbDtcclxuICAgIG9uQ2hhbmdlOiAobmV3U2VsZWN0ZWRJdGVtSWQ6IHN0cmluZykgPT4gdm9pZDtcclxuICAgIG9wdGlvbnM6IERyb3Bkb3duT3B0aW9uW107XHJcbiAgfSkgPT4ge1xyXG4gICAgY29uc3QgeyBzZWxlY3RlZEl0ZW1JZCwgb25DaGFuZ2UsIG9wdGlvbnMgfSA9IHByb3BzO1xyXG5cclxuICAgIGNvbnN0IFtzdGF0ZSwgZGlzcGF0Y2hdID0gdXNlRHJvcGRvd25TdGF0ZShcclxuICAgICAgb3B0aW9ucy5sZW5ndGgsXHJcbiAgICAgIHsgc2VsZWN0ZWRJbmRleGVzOiBbXSB9LFxyXG4gICAgICB7fSxcclxuICAgICAgY2hhbmdlcyA9PiB7XHJcbiAgICAgICAgaWYgKGNoYW5nZXMuc2VsZWN0ZWRJbmRleGVzICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgIG9uQ2hhbmdlKFxyXG4gICAgICAgICAgICBjaGFuZ2VzLnNlbGVjdGVkSW5kZXhlcy5sZW5ndGggPiAwID8gb3B0aW9uc1tjaGFuZ2VzLnNlbGVjdGVkSW5kZXhlc1swXV0uaWQgOiBudWxsXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgKTtcclxuXHJcbiAgICBjb25zdCBmb3VuZEluZGV4ID0gb3B0aW9ucy5maW5kSW5kZXgoaSA9PiBpLmlkID09PSBzZWxlY3RlZEl0ZW1JZCk7XHJcbiAgICBjb25zdCBzZWxlY3RlZEluZGV4ID0gZm91bmRJbmRleCA+PSAwID8gZm91bmRJbmRleCA6IG51bGw7XHJcbiAgICBjb25zdCBjb250YWluZXJSZWYgPSBSZWFjdC51c2VSZWY8SFRNTERpdkVsZW1lbnQ+KG51bGwpO1xyXG4gICAgY29uc3QgbGlzdFJlZiA9IFJlYWN0LnVzZVJlZjxIVE1MRGl2RWxlbWVudD4obnVsbCk7XHJcblxyXG4gICAgdXNlRHJvcGRvd25DbG9zZVdoZW5DbGlja2VkT3V0c2lkZShjb250YWluZXJSZWYsIGRpc3BhdGNoKTtcclxuICAgIHVzZUZvY3VzT25TdGF0ZUNoYW5nZShsaXN0UmVmLCBzdGF0ZS5pc09wZW4sIHRydWUpO1xyXG5cclxuICAgIGNvbnN0IGxpc3RLZXlib2FyZEhhbmRsZXIgPSB1c2VEcm9wZG93bkxpc3RLZXlib2FyZE5hdmlnYXRvcihkaXNwYXRjaCk7XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgPGRpdiByZWY9e2NvbnRhaW5lclJlZn0gY2xhc3NOYW1lPVwiZHJvcGRvd24tY29udGFpbmVyXCI+XHJcbiAgICAgICAgPERyb3Bkb3duTWFpblxyXG4gICAgICAgICAgey4uLnN0YXRlfVxyXG4gICAgICAgICAgZGlzcGF0Y2g9e2Rpc3BhdGNofVxyXG4gICAgICAgICAgc2hvd0NsZWFyQnV0dG9uPXtmYWxzZX1cclxuICAgICAgICAgIGl0ZW1SZW5kZXJlcj17KCkgPT4gKFxyXG4gICAgICAgICAgICA8ZGl2PntzZWxlY3RlZEluZGV4ICE9PSBudWxsID8gb3B0aW9uc1tzZWxlY3RlZEluZGV4XS5kaXNwbGF5IDogXCJcIn08L2Rpdj5cclxuICAgICAgICAgICl9XHJcbiAgICAgICAgPjwvRHJvcGRvd25NYWluPlxyXG4gICAgICAgIHtzdGF0ZS5pc09wZW4gJiYgKFxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkcm9wZG93bi1saXN0XCIgb25LZXlEb3duPXtsaXN0S2V5Ym9hcmRIYW5kbGVyfSByZWY9e2xpc3RSZWZ9IHRhYkluZGV4PXswfT5cclxuICAgICAgICAgICAgPFZpcnR1YWxpemVkTGlzdFxyXG4gICAgICAgICAgICAgIGl0ZW1Db3VudD17b3B0aW9ucy5sZW5ndGh9XHJcbiAgICAgICAgICAgICAgaXRlbUhlaWdodD17MjV9XHJcbiAgICAgICAgICAgICAgaGlnaGxpZ2h0ZWRJbmRleD17c3RhdGUuaGlnaGxpZ2h0ZWRJbmRleH1cclxuICAgICAgICAgICAgICBtYXhIZWlnaHQ9ezIwMH1cclxuICAgICAgICAgICAgICBpdGVtUmVuZGVyZXI9e2luZGV4ID0+IChcclxuICAgICAgICAgICAgICAgIDxEcm9wZG93bkl0ZW1cclxuICAgICAgICAgICAgICAgICAgdGV4dD17b3B0aW9uc1tpbmRleF0uZGlzcGxheX1cclxuICAgICAgICAgICAgICAgICAgaW5kZXg9e2luZGV4fVxyXG4gICAgICAgICAgICAgICAgICBpc1NlbGVjdGVkPXtzZWxlY3RlZEluZGV4ID09PSBpbmRleH1cclxuICAgICAgICAgICAgICAgICAgaXNIaWdobGlnaHRlZD17c3RhdGUuaGlnaGxpZ2h0ZWRJbmRleCA9PT0gaW5kZXh9XHJcbiAgICAgICAgICAgICAgICAgIGRpc3BhdGNoPXtkaXNwYXRjaH1cclxuICAgICAgICAgICAgICAgID48L0Ryb3Bkb3duSXRlbT5cclxuICAgICAgICAgICAgICApfVxyXG4gICAgICAgICAgICA+PC9WaXJ0dWFsaXplZExpc3Q+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApfVxyXG4gICAgICA8L2Rpdj5cclxuICAgICk7XHJcbiAgfVxyXG4pO1xyXG5cclxuY29uc3QgRHJvcGRvd25NYWluID0gKHByb3BzOiB7XHJcbiAgaXNPcGVuOiBib29sZWFuO1xyXG4gIGl0ZW1SZW5kZXJlcjogKCkgPT4gSlNYLkVsZW1lbnQ7XHJcbiAgZGlzcGF0Y2g6IERyb3Bkb3duRGlzcGF0Y2g8RHJvcGRvd25BY3Rpb25zPjtcclxuICBzaG93Q2xlYXJCdXR0b24/OiBib29sZWFuO1xyXG59KSA9PiB7XHJcbiAgY29uc3QgeyBpc09wZW4sIGl0ZW1SZW5kZXJlciwgc2hvd0NsZWFyQnV0dG9uID0gdHJ1ZSwgZGlzcGF0Y2ggfSA9IHByb3BzO1xyXG4gIGNvbnN0IGRyb3Bkb3duU2VsZWN0UmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xyXG4gIGNvbnN0IGhhbmRsZVNlbGVjdCA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IGRpc3BhdGNoKFtpc09wZW4gPyBcIkNsb3NlTGlzdFwiIDogXCJPcGVuTGlzdFwiXSksIFtcclxuICAgIGlzT3BlbixcclxuICAgIGRpc3BhdGNoLFxyXG4gIF0pO1xyXG4gIGNvbnN0IGhhbmRsZUNsZWFyID0gUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4gZGlzcGF0Y2goW1wiQ2xlYXJTZWxlY3Rpb25cIl0pLCBbZGlzcGF0Y2hdKTtcclxuXHJcbiAgdXNlRm9jdXNPblN0YXRlQ2hhbmdlKGRyb3Bkb3duU2VsZWN0UmVmLCBpc09wZW4sIGZhbHNlKTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXYgY2xhc3NOYW1lPVwiZHJvcGRvd24tbWFpblwiPlxyXG4gICAgICA8YnV0dG9uIHJlZj17ZHJvcGRvd25TZWxlY3RSZWZ9IGNsYXNzTmFtZT1cImRyb3Bkb3duLXNlbGVjdFwiIG9uQ2xpY2s9e2hhbmRsZVNlbGVjdH0+XHJcbiAgICAgICAge2l0ZW1SZW5kZXJlcigpfVxyXG4gICAgICAgIDxpIGNsYXNzTmFtZT17YGZhICR7aXNPcGVuID8gXCJmYS1jYXJldC11cFwiIDogXCJmYS1jYXJldC1kb3duXCJ9YH0+PC9pPlxyXG4gICAgICA8L2J1dHRvbj5cclxuICAgICAge3Nob3dDbGVhckJ1dHRvbiAmJiAoXHJcbiAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJkcm9wZG93bi1jbGVhclwiIG9uQ2xpY2s9e2hhbmRsZUNsZWFyfT5cclxuICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLXRpbWVzXCI+PC9pPlxyXG4gICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICApfVxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxufTtcclxuXHJcbmNvbnN0IERyb3Bkb3duSXRlbSA9IChwcm9wczoge1xyXG4gIHRleHQ6IHN0cmluZyB8IG51bGw7XHJcbiAgaW5kZXg6IG51bWJlcjtcclxuICBpc1NlbGVjdGVkOiBib29sZWFuO1xyXG4gIGlzSGlnaGxpZ2h0ZWQ6IGJvb2xlYW47XHJcbiAgZGlzcGF0Y2g6IERyb3Bkb3duRGlzcGF0Y2g8RHJvcGRvd25BY3Rpb25zPjtcclxufSkgPT4ge1xyXG4gIGNvbnN0IHsgdGV4dCwgaW5kZXgsIGlzU2VsZWN0ZWQsIGlzSGlnaGxpZ2h0ZWQsIGRpc3BhdGNoIH0gPSBwcm9wcztcclxuICBjb25zdCBzdHlsZSA9IGBkcm9wZG93bi1saXN0LWl0ZW0gJHtpc1NlbGVjdGVkID8gXCJzZWxlY3RlZFwiIDogXCJcIn0gICR7XHJcbiAgICBpc0hpZ2hsaWdodGVkID8gXCJoaWdobGlnaHRlZFwiIDogXCJcIlxyXG4gIH1gO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPGRpdlxyXG4gICAgICBrZXk9e2luZGV4fVxyXG4gICAgICBvbkNsaWNrPXsoKSA9PiBkaXNwYXRjaChbeyB0eXBlOiBcIlNlbGVjdEluZGV4XCIsIGluZGV4IH0sIFwiQ2xvc2VMaXN0XCJdKX1cclxuICAgICAgY2xhc3NOYW1lPXtzdHlsZX1cclxuICAgID5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJkcm9wZG93bi1saXN0LWl0ZW0tdGV4dFwiPnt0ZXh0fTwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxufTtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IFNlY3Rpb25GaWVsZCA9IFJlYWN0Lm1lbW8oKHByb3BzOiB7IHRleHQ6IHN0cmluZzsgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZSB9KSA9PiB7XHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXYgY2xhc3NOYW1lPVwidmlld2VyLW9wdGlvbnMtc2VjdGlvbi1maWVsZFwiPlxyXG4gICAgICA8bGFiZWw+e3Byb3BzLnRleHR9PC9sYWJlbD5cclxuICAgICAge3Byb3BzLmNoaWxkcmVufVxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxufSk7XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBTZWN0aW9uVGl0bGUgPSBSZWFjdC5tZW1vKChwcm9wczogeyB0ZXh0OiBzdHJpbmc7IGNoaWxkcmVuPzogUmVhY3QuUmVhY3ROb2RlIH0pID0+IHtcclxuICByZXR1cm4gKFxyXG4gICAgPGRpdiBjbGFzc05hbWU9XCJ2aWV3ZXItb3B0aW9ucy1zZWN0aW9uLXRpdGxlXCI+XHJcbiAgICAgIDxoMz57cHJvcHMudGV4dH08L2gzPlxyXG4gICAgICB7cHJvcHMuY2hpbGRyZW4gPz8gbnVsbH1cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn0pO1xyXG4iLCJleHBvcnQgY29uc3QgY3VzdG9tT3B0aW9uID0geyBpZDogXCJjdXN0b21cIiwgZGlzcGxheTogXCJDdXN0b21cIiB9IGFzIGNvbnN0O1xyXG4iLCJleHBvcnQgY29uc3QgaGFzUHJvcGVydHkgPSA8VCBleHRlbmRzIHt9LCBQIGV4dGVuZHMgUHJvcGVydHlLZXk+KFxyXG4gIG9iajogVCxcclxuICBwcm9wOiBQXHJcbik6IG9iaiBpcyBUICYgUmVjb3JkPFAsIHVua25vd24+ID0+IHtcclxuICByZXR1cm4gb2JqLmhhc093blByb3BlcnR5KHByb3ApO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGFzc2VydE5ldmVyID0gKHZhbHVlOiBuZXZlcik6IG5ldmVyID0+IHtcclxuICB0aHJvdyBuZXcgRXJyb3IoYFVuaGFuZGxlZCB1bmlvbiBtZW1iZXI6ICR7SlNPTi5zdHJpbmdpZnkodmFsdWUpfWApO1xyXG59O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcclxufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBvW2syXSA9IG1ba107XHJcbn0pKTtcclxudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi91c2VVbmlvblN0YXRlXCIpLCBleHBvcnRzKTtcclxuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3VzZURyb3Bkb3duU3RhdGVcIiksIGV4cG9ydHMpO1xyXG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdXNlU2Nyb2xsTGlzdFRvSW5kZXhcIiksIGV4cG9ydHMpO1xyXG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdXNlRHJvcGRvd25DbG9zZVdoZW5DbGlja2VkT3V0c2lkZVwiKSwgZXhwb3J0cyk7XHJcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi91c2VEcm9wZG93bkNsb3NlV2hlbkZvY3VzT3V0XCIpLCBleHBvcnRzKTtcclxuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3VzZUZvY3VzT25TdGF0ZUNoYW5nZVwiKSwgZXhwb3J0cyk7XHJcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi91c2VDbGlja2VkT3V0c2lkZUhhbmRsZXJcIiksIGV4cG9ydHMpO1xyXG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdXNlQ2h1bmtMb2FkZXJcIiksIGV4cG9ydHMpO1xyXG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdXNlRm9jdXNPdXRIYW5kbGVyXCIpLCBleHBvcnRzKTtcclxuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3VzZURyb3Bkb3duTGlzdEtleWJvYXJkTmF2aWdhdG9yXCIpLCBleHBvcnRzKTtcclxuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3VzZVByZXZpb3VzVmFsdWVcIiksIGV4cG9ydHMpO1xyXG4iLCJpbXBvcnQgeyBNYXRyaXg0QXJyYXksIFZlY3RvcjJBcnJheSwgVmVjdG9yM0FycmF5LCBWZWN0b3I0QXJyYXkgfSBmcm9tIFwiLi4vLi4vdHlwZXNcIjtcclxuaW1wb3J0IHsgYXNzZXJ0TmV2ZXIgfSBmcm9tIFwiLi4vdHlwZUd1YXJkc1wiO1xyXG5cclxuZXhwb3J0IGVudW0gVW5pZm9ybVR5cGUge1xyXG4gIEZMT0FUX1ZFQzIgPSAzNTY2NCxcclxuICBGTE9BVF9WRUMzID0gMzU2NjUsXHJcbiAgRkxPQVRfVkVDNCA9IDM1NjY2LFxyXG4gIEZMT0FUX01BVDQgPSAzNTY3NixcclxufVxyXG5cclxuLy81MTIwIChCWVRFKSwgNTEyMSAoVU5TSUdORURfQllURSksIDUxMjIgKFNIT1JUKSwgNTEyMyAoVU5TSUdORURfU0hPUlQpLCA1MTI0IChJTlQpLFxyXG4vLyA1MTI1IChVTlNJR05FRF9JTlQpLCA1MTI2IChGTE9BVCksIDM1NjY0IChGTE9BVF9WRUMyKSxcclxuLy8gLCAzNTY2NyAoSU5UX1ZFQzIpLCAzNTY2OCAoSU5UX1ZFQzMpLCAzNTY2OSAoSU5UX1ZFQzQpLCAzNTY3MCAoQk9PTCksIDM1NjcxIChCT09MX1ZFQzIpLCAzNTY3MiAoQk9PTF9WRUMzKSwgMzU2NzMgKEJPT0xfVkVDNCksIDM1Njc0IChGTE9BVF9NQVQyKSwgMzU2NzUgKEZMT0FUX01BVDMpLFxyXG5cclxuZXhwb3J0IGNsYXNzIFVuaWZvcm1JbmZvPFQgPSBhbnk+IHtcclxuICBwcml2YXRlIHZhbHVlOiBUIHwgbnVsbCA9IG51bGw7XHJcbiAgcHJpdmF0ZSBzZXR0ZXI6ICh2YWx1ZTogVCkgPT4gdm9pZDtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGNvbnRleHQ6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCxcclxuICAgIHByb2dyYW06IFdlYkdMUHJvZ3JhbSxcclxuICAgIHByaXZhdGUgbmFtZTogc3RyaW5nLFxyXG4gICAgcHJpdmF0ZSB0eXBlOiBVbmlmb3JtVHlwZVxyXG4gICkge1xyXG4gICAgdGhpcy5hdHRhY2hUb1Byb2dyYW0ocHJvZ3JhbSk7XHJcbiAgfVxyXG5cclxuICBhdHRhY2hUb1Byb2dyYW0ocHJvZ3JhbTogV2ViR0xQcm9ncmFtKSB7XHJcbiAgICBjb25zdCBsb2NhdGlvbiA9IHRoaXMuY29udGV4dC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgdGhpcy5uYW1lKTtcclxuICAgIHRoaXMuc2V0dGVyID0gY3JlYXRlVW5pZm9ybVNldHRlcih0aGlzLnR5cGUsIHRoaXMuY29udGV4dCwgbG9jYXRpb24pO1xyXG4gIH1cclxuXHJcbiAgc2V0VmFsdWUobmV3VmFsdWU6IFQpIHtcclxuICAgIHRoaXMudmFsdWUgPSBuZXdWYWx1ZTtcclxuICB9XHJcblxyXG4gIHByZXBhcmVGb3JSZW5kZXIoKSB7XHJcbiAgICBpZiAodGhpcy52YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICB0aGlzLnNldHRlcih0aGlzLnZhbHVlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldFVuaWZvcm1UeXBlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMudHlwZTtcclxuICB9XHJcblxyXG4gIGdldFVuaWZvcm1OYW1lKCkge1xyXG4gICAgcmV0dXJuIHRoaXMubmFtZTtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7fVxyXG59XHJcblxyXG5jb25zdCBjcmVhdGVVbmlmb3JtU2V0dGVyID0gKFxyXG4gIHR5cGU6IFVuaWZvcm1UeXBlLFxyXG4gIGNvbnRleHQ6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCxcclxuICBsb2NhdGlvbjogV2ViR0xVbmlmb3JtTG9jYXRpb25cclxuKTogKCh2YWx1ZTogYW55KSA9PiB2b2lkKSA9PiB7XHJcbiAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICBjYXNlIFVuaWZvcm1UeXBlLkZMT0FUX1ZFQzI6XHJcbiAgICAgIHJldHVybiAodmFsdWU6IFZlY3RvcjJBcnJheSkgPT4gY29udGV4dC51bmlmb3JtMmYobG9jYXRpb24sIC4uLnZhbHVlKTtcclxuICAgIGNhc2UgVW5pZm9ybVR5cGUuRkxPQVRfVkVDMzpcclxuICAgICAgcmV0dXJuICh2YWx1ZTogVmVjdG9yM0FycmF5KSA9PiBjb250ZXh0LnVuaWZvcm0zZihsb2NhdGlvbiwgLi4udmFsdWUpO1xyXG4gICAgY2FzZSBVbmlmb3JtVHlwZS5GTE9BVF9WRUM0OlxyXG4gICAgICByZXR1cm4gKHZhbHVlOiBWZWN0b3I0QXJyYXkpID0+IGNvbnRleHQudW5pZm9ybTRmKGxvY2F0aW9uLCAuLi52YWx1ZSk7XHJcbiAgICBjYXNlIFVuaWZvcm1UeXBlLkZMT0FUX01BVDQ6XHJcbiAgICAgIHJldHVybiAodmFsdWU6IE1hdHJpeDRBcnJheSkgPT4gY29udGV4dC51bmlmb3JtTWF0cml4NGZ2KGxvY2F0aW9uLCBmYWxzZSwgdmFsdWUpO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgYXNzZXJ0TmV2ZXIodHlwZSk7XHJcbiAgfVxyXG59O1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IHJhbmdlIH0gZnJvbSBcIi4uLy4uLy4uLy4uL2NvbW1vbi9hcnJheVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IE11bHRpTnVtYmVySW5wdXQgPSBSZWFjdC5tZW1vKFxyXG4gIChwcm9wczoge1xyXG4gICAgcm93czogbnVtYmVyO1xyXG4gICAgY29sdW1uczogbnVtYmVyO1xyXG4gICAgdmFsdWU6IG51bWJlcltdO1xyXG4gICAgb25DaGFuZ2U6IChuZXdWYWx1ZTogbnVtYmVyW10pID0+IHZvaWQ7XHJcbiAgICByZWFkb25seT86IGJvb2xlYW47XHJcbiAgfSkgPT4ge1xyXG4gICAgY29uc3QgeyByb3dzLCBjb2x1bW5zLCB2YWx1ZSA9IFtdLCBvbkNoYW5nZSwgcmVhZG9ubHkgPSBmYWxzZSB9ID0gcHJvcHM7XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJlZGl0LWlucHV0LWdyaWRcIj5cclxuICAgICAgICB7cmFuZ2Uocm93cykubWFwKHJvdyA9PiAoXHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImVkaXQtaW5wdXQtcm93XCI+XHJcbiAgICAgICAgICAgIHtyYW5nZShjb2x1bW5zKS5tYXAoY29sdW1uID0+IHtcclxuICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IHJvdyAqIGNvbHVtbnMgKyBjb2x1bW47XHJcbiAgICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJlZGl0LWlucHV0XCJcclxuICAgICAgICAgICAgICAgICAgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXtyZWFkb25seX1cclxuICAgICAgICAgICAgICAgICAgdmFsdWU9e3ZhbHVlW2luZGV4XX1cclxuICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2UgPT5cclxuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZSh2YWx1ZS5tYXAoKHYsIGkpID0+IChpID09PSBpbmRleCA/IE51bWJlcihlLnRhcmdldC52YWx1ZSkgOiB2KSkpXHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgID48L2lucHV0PlxyXG4gICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH0pfVxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKSl9XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxuICB9XHJcbik7XHJcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsImltcG9ydCB7IGFzc2VydE5ldmVyIH0gZnJvbSBcIi4uL3R5cGVHdWFyZHNcIjtcclxuXHJcbmV4cG9ydCBlbnVtIEF0dHJpYnV0ZUJ1ZmZlclR5cGUge1xyXG4gIEZMT0FUX1ZFQzIgPSAzNTY2NCxcclxuICBGTE9BVF9WRUMzID0gMzU2NjUsXHJcbiAgRkxPQVRfVkVDNCA9IDM1NjY2LFxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQXR0cmlidXRlQnVmZmVySW5mbyB7XHJcbiAgcHJpdmF0ZSBidWZmZXI6IFdlYkdMQnVmZmVyIHwgbnVsbDtcclxuICBwcml2YXRlIGxvY2F0aW9uOiBudW1iZXI7XHJcbiAgcHJpdmF0ZSBjb3VudDogbnVtYmVyID0gMDtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGNvbnRleHQ6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCxcclxuICAgIHByb2dyYW06IFdlYkdMUHJvZ3JhbSxcclxuICAgIHByaXZhdGUgbmFtZTogc3RyaW5nLFxyXG4gICAgcHJpdmF0ZSB0eXBlOiBBdHRyaWJ1dGVCdWZmZXJUeXBlXHJcbiAgKSB7XHJcbiAgICB0aGlzLmF0dGFjaFRvUHJvZ3JhbShwcm9ncmFtKTtcclxuICAgIHRoaXMuYnVmZmVyID0gY29udGV4dC5jcmVhdGVCdWZmZXIoKTtcclxuICB9XHJcblxyXG4gIGF0dGFjaFRvUHJvZ3JhbShwcm9ncmFtOiBXZWJHTFByb2dyYW0pIHtcclxuICAgIHRoaXMubG9jYXRpb24gPSB0aGlzLmNvbnRleHQuZ2V0QXR0cmliTG9jYXRpb24ocHJvZ3JhbSwgdGhpcy5uYW1lKTtcclxuICB9XHJcblxyXG4gIHNldFZhbHVlKG5ld1ZhbHVlOiBudW1iZXJbXVtdKSB7XHJcbiAgICB0aGlzLmNvdW50ID0gbmV3VmFsdWUubGVuZ3RoO1xyXG4gICAgdGhpcy5jb250ZXh0LmJpbmRCdWZmZXIodGhpcy5jb250ZXh0LkFSUkFZX0JVRkZFUiwgdGhpcy5idWZmZXIpO1xyXG4gICAgY29uc3QgZmxhdHRlbiA9IFtdLmNvbmNhdCguLi5uZXdWYWx1ZSk7XHJcbiAgICB0aGlzLmNvbnRleHQuYnVmZmVyRGF0YShcclxuICAgICAgdGhpcy5jb250ZXh0LkFSUkFZX0JVRkZFUixcclxuICAgICAgbmV3IEZsb2F0MzJBcnJheShmbGF0dGVuKSwgLy8wLCAwLCAwLCAxLCAwLCAwLjUsIDAsIDEsIDAuNywgMCwgMCwgMV0pLFxyXG4gICAgICB0aGlzLmNvbnRleHQuU1RBVElDX0RSQVdcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBzZXRBdHRyaWJ1dGVCdWZmZXIoKSB7XHJcbiAgICBpZiAodGhpcy5idWZmZXIgIT09IG51bGwpIHtcclxuICAgICAgdGhpcy5jb250ZXh0LmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHRoaXMubG9jYXRpb24pO1xyXG4gICAgICB0aGlzLmNvbnRleHQuYmluZEJ1ZmZlcih0aGlzLmNvbnRleHQuQVJSQVlfQlVGRkVSLCB0aGlzLmJ1ZmZlcik7XHJcbiAgICAgIGNvbnN0IHNpemUgPSBnZXROdW1Db21wb25lbnRzKHRoaXMudHlwZSk7IC8vIDIgY29tcG9uZW50cyBwZXIgaXRlcmF0aW9uXHJcbiAgICAgIGNvbnN0IHR5cGUgPSB0aGlzLmNvbnRleHQuRkxPQVQ7IC8vIHRoZSBkYXRhIGlzIDMyYml0IGZsb2F0c1xyXG4gICAgICBjb25zdCBub3JtYWxpemUgPSBmYWxzZTsgLy8gZG9uJ3Qgbm9ybWFsaXplIHRoZSBkYXRhXHJcbiAgICAgIGNvbnN0IHN0cmlkZSA9IDA7IC8vIDAgPSBtb3ZlIGZvcndhcmQgc2l6ZSAqIHNpemVvZih0eXBlKSBlYWNoIGl0ZXJhdGlvbiB0byBnZXQgdGhlIG5leHQgcG9zaXRpb25cclxuICAgICAgY29uc3Qgb2Zmc2V0ID0gMDsgLy8gc3RhcnQgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgYnVmZmVyXHJcbiAgICAgIHRoaXMuY29udGV4dC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHRoaXMubG9jYXRpb24sIHNpemUsIHR5cGUsIG5vcm1hbGl6ZSwgc3RyaWRlLCBvZmZzZXQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0QXR0cmlidXRlQnVmZmVyVHlwZSgpIHtcclxuICAgIHJldHVybiB0aGlzLnR5cGU7XHJcbiAgfVxyXG5cclxuICBnZXRDb3VudCgpIHtcclxuICAgIHJldHVybiB0aGlzLmNvdW50O1xyXG4gIH1cclxuXHJcbiAgZGVsZXRlQnVmZmVyKCkge1xyXG4gICAgdGhpcy5jb250ZXh0LmRlbGV0ZUJ1ZmZlcih0aGlzLmJ1ZmZlcik7XHJcbiAgICB0aGlzLmJ1ZmZlciA9IG51bGw7XHJcbiAgfVxyXG59XHJcblxyXG5jb25zdCBnZXROdW1Db21wb25lbnRzID0gKGJ1ZmZlclR5cGU6IEF0dHJpYnV0ZUJ1ZmZlclR5cGUpID0+IHtcclxuICBzd2l0Y2ggKGJ1ZmZlclR5cGUpIHtcclxuICAgIGNhc2UgQXR0cmlidXRlQnVmZmVyVHlwZS5GTE9BVF9WRUMyOlxyXG4gICAgICByZXR1cm4gMjtcclxuICAgIGNhc2UgQXR0cmlidXRlQnVmZmVyVHlwZS5GTE9BVF9WRUMzOlxyXG4gICAgICByZXR1cm4gMztcclxuICAgIGNhc2UgQXR0cmlidXRlQnVmZmVyVHlwZS5GTE9BVF9WRUM0OlxyXG4gICAgICByZXR1cm4gNDtcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIGFzc2VydE5ldmVyKGJ1ZmZlclR5cGUpO1xyXG4gIH1cclxufTtcclxuIiwiaW1wb3J0ICogYXMgdnNjb2RlIGZyb20gXCJ2c2NvZGVcIjtcclxuaW1wb3J0IHsgcmVtb3ZlIH0gZnJvbSBcIi4uL2FycmF5XCI7XHJcbmltcG9ydCB7IHV1aWR2NCB9IGZyb20gXCIuLi91dWlkXCI7XHJcbmltcG9ydCB7IE1lc3NhZ2VSZXNwb25zZSB9IGZyb20gXCIuL21lc3NhZ2VzXCI7XHJcbmltcG9ydCB7IHZzY29kZUFwaSB9IGZyb20gXCIuL3ZzY29kZUFwaVwiO1xyXG5cclxudHlwZSBSZXNwb25zZUxpc3RlbmVyID0gKG1lc3NhZ2U6IE1lc3NhZ2VSZXNwb25zZSkgPT4gdm9pZDtcclxuXHJcbmNsYXNzIFZpZXdlckVuZHBvaW50IHtcclxuICBldmVudExpc3RlbmVyczogUmVzcG9uc2VMaXN0ZW5lcltdID0gW107XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIGV2ZW50ID0+IHtcclxuICAgICAgdGhpcy5ldmVudExpc3RlbmVycy5mb3JFYWNoKGxpc3RlbmVyID0+IGxpc3RlbmVyKGV2ZW50LmRhdGEpKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZ2V0V29ya3NwYWNlRmlsZXNPZlR5cGVzKGV4dGVuc2lvbnM6IHN0cmluZ1tdKSB7XHJcbiAgICBjb25zdCBtZXNzYWdlSWQgPSB1dWlkdjQoKTtcclxuXHJcbiAgICB2c2NvZGVBcGkucG9zdE1lc3NhZ2Uoe1xyXG4gICAgICB0eXBlOiBcImdldFdvcmtzcGFjZUZpbGVzT2ZUeXBlc1wiLFxyXG4gICAgICBpZDogbWVzc2FnZUlkLFxyXG4gICAgICBwYXlsb2FkOiB7IGV4dGVuc2lvbnMgfSxcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZTx7IGZpbGVOYW1lOiBzdHJpbmc7IGZpbGVQYXRoOiBzdHJpbmc7IHVyaTogc3RyaW5nIH1bXT4oXHJcbiAgICAgIHJlc29sdmUgPT4ge1xyXG4gICAgICAgIGNvbnN0IGxpc3RlbmVyID0gKG1lc3NhZ2U6IE1lc3NhZ2VSZXNwb25zZSkgPT4ge1xyXG4gICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICBtZXNzYWdlLnR5cGUgPT09IFwiZ2V0V29ya3NwYWNlRmlsZXNPZlR5cGVzXCIgJiZcclxuICAgICAgICAgICAgbWVzc2FnZS5pZCA9PT0gbWVzc2FnZUlkXHJcbiAgICAgICAgICApIHtcclxuICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlLnBheWxvYWQuZmlsZXMpO1xyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKGxpc3RlbmVyKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLmV2ZW50TGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xyXG4gICAgICB9XHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgZ2V0RG9jdW1lbnRUZXh0KGZpbGVOYW1lOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IG1lc3NhZ2VJZCA9IHV1aWR2NCgpO1xyXG5cclxuICAgIHZzY29kZUFwaS5wb3N0TWVzc2FnZSh7XHJcbiAgICAgIHR5cGU6IFwiZ2V0RG9jdW1lbnRUZXh0XCIsXHJcbiAgICAgIGlkOiBtZXNzYWdlSWQsXHJcbiAgICAgIHBheWxvYWQ6IHsgZmlsZU5hbWUgfSxcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZTxzdHJpbmc+KHJlc29sdmUgPT4ge1xyXG4gICAgICBjb25zdCBsaXN0ZW5lciA9IChtZXNzYWdlOiBNZXNzYWdlUmVzcG9uc2UpID0+IHtcclxuICAgICAgICBpZiAobWVzc2FnZS50eXBlID09PSBcImdldERvY3VtZW50VGV4dFwiICYmIG1lc3NhZ2UuaWQgPT09IG1lc3NhZ2VJZCkge1xyXG4gICAgICAgICAgcmVzb2x2ZShtZXNzYWdlLnBheWxvYWQudGV4dCk7XHJcbiAgICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKGxpc3RlbmVyKTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcblxyXG4gICAgICB0aGlzLmV2ZW50TGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBnZXRFeHRlbnNpb25GaWxlVXJpKGZpbGVOYW1lOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IG1lc3NhZ2VJZCA9IHV1aWR2NCgpO1xyXG5cclxuICAgIHZzY29kZUFwaS5wb3N0TWVzc2FnZSh7XHJcbiAgICAgIHR5cGU6IFwiZ2V0RXh0ZW5zaW9uRmlsZVVyaVwiLFxyXG4gICAgICBpZDogbWVzc2FnZUlkLFxyXG4gICAgICBwYXlsb2FkOiB7IGZpbGVOYW1lIH0sXHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2U8c3RyaW5nPihyZXNvbHZlID0+IHtcclxuICAgICAgY29uc3QgbGlzdGVuZXIgPSAobWVzc2FnZTogTWVzc2FnZVJlc3BvbnNlKSA9PiB7XHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgbWVzc2FnZS50eXBlID09PSBcImdldEV4dGVuc2lvbkZpbGVVcmlcIiAmJlxyXG4gICAgICAgICAgbWVzc2FnZS5pZCA9PT0gbWVzc2FnZUlkXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UucGF5bG9hZC51cmkpO1xyXG4gICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcihsaXN0ZW5lcik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgdGhpcy5ldmVudExpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgc3Vic2NyaWJlVG9Eb2N1bWVudFNhdmUoXHJcbiAgICBmaWxlUGF0aDogc3RyaW5nLFxyXG4gICAgY2FsbGJhY2s6IChuZXdDb250ZW50OiBzdHJpbmcpID0+IHZvaWRcclxuICApOiAoKSA9PiB2b2lkIHtcclxuICAgIHZzY29kZUFwaS5wb3N0TWVzc2FnZSh7XHJcbiAgICAgIHR5cGU6IFwic3Vic2NyaWJlVG9Eb2N1bWVudFRleHRDaGFuZ2VcIixcclxuICAgICAgcGF5bG9hZDogeyBmaWxlTmFtZTogZmlsZVBhdGggfSxcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IGxpc3RlbmVyID0gKG1lc3NhZ2U6IE1lc3NhZ2VSZXNwb25zZSkgPT4ge1xyXG4gICAgICBpZiAoXHJcbiAgICAgICAgbWVzc2FnZS50eXBlID09PSBcIm9uRG9jdW1lbnRUZXh0Q2hhbmdlXCIgJiZcclxuICAgICAgICBtZXNzYWdlLnBheWxvYWQuZmlsZVBhdGggPT09IGZpbGVQYXRoXHJcbiAgICAgICkge1xyXG4gICAgICAgIGNhbGxiYWNrKG1lc3NhZ2UucGF5bG9hZC50ZXh0KTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmV2ZW50TGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xyXG4gICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcihsaXN0ZW5lcik7XHJcbiAgICAgIHZzY29kZUFwaS5wb3N0TWVzc2FnZSh7XHJcbiAgICAgICAgdHlwZTogXCJ1bnN1YnNjcmliZVRvRG9jdW1lbnRUZXh0Q2hhbmdlXCIsXHJcbiAgICAgICAgcGF5bG9hZDogeyBmaWxlTmFtZTogZmlsZVBhdGggfSxcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgc2hvd1dlYlZpZXdEZXZUb29scygpIHtcclxuICAgIHZzY29kZUFwaS5wb3N0TWVzc2FnZSh7XHJcbiAgICAgIHR5cGU6IFwic2hvd1dlYlZpZXdEZXZUb29sc1wiLFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHJlbW92ZUxpc3RlbmVyKGxpc3RlbmVyOiBSZXNwb25zZUxpc3RlbmVyKSB7XHJcbiAgICByZW1vdmUodGhpcy5ldmVudExpc3RlbmVycywgbGlzdGVuZXIpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHZpZXdlckVuZHBvaW50ID0gbmV3IFZpZXdlckVuZHBvaW50KCk7XHJcbiIsImltcG9ydCB7IENvbXBvc2l0ZUtleU1hcCB9IGZyb20gXCIuLi9jb21wb3NpdGVLZXlNYXBcIjtcclxuaW1wb3J0IHsgQXR0cmlidXRlQnVmZmVySW5mbywgQXR0cmlidXRlQnVmZmVyVHlwZSB9IGZyb20gXCIuL2F0dHJpYnV0ZUJ1ZmZlclwiO1xyXG5cclxudHlwZSBDYWNoZUtleSA9IHtcclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgdHlwZTogQXR0cmlidXRlQnVmZmVyVHlwZTtcclxufTtcclxuXHJcbnR5cGUgQ2FjaGVWYWx1ZSA9IHtcclxuICBhdHRyaWJ1dGVCdWZmZXJJbmZvOiBBdHRyaWJ1dGVCdWZmZXJJbmZvO1xyXG4gIGRpc3Bvc2U6ICgpID0+IHZvaWQ7XHJcbn07XHJcblxyXG5jb25zdCBrZXlTZWxlY3RvciA9IChrZXk6IENhY2hlS2V5KTogc3RyaW5nID0+IGAke2tleS5uYW1lfTske2tleS50eXBlfWA7XHJcbmNvbnN0IGNhY2hlID0gbmV3IENvbXBvc2l0ZUtleU1hcDxDYWNoZUtleSwgQ2FjaGVWYWx1ZT4oa2V5U2VsZWN0b3IpO1xyXG5cclxuY29uc3QgcmVidWlsZENhY2hlID0gKG5ld0VsZW1lbnRzOiB7IGtleTogQ2FjaGVLZXk7IHZhbHVlOiBDYWNoZVZhbHVlIH1bXSkgPT4ge1xyXG4gIGNvbnN0IG5ld1ZhbHVlc1N0cktleXMgPSBuZXdFbGVtZW50cy5tYXAodiA9PiBrZXlTZWxlY3Rvcih2LmtleSkpO1xyXG4gIGNvbnN0IGVsZW1lbnRzVG9SZW1vdmUgPSBjYWNoZS5lbnRyaWVzU3RyS2V5KCkuZmlsdGVyKGUgPT4gIW5ld1ZhbHVlc1N0cktleXMuaW5jbHVkZXMoZVswXSkpO1xyXG5cclxuICBlbGVtZW50c1RvUmVtb3ZlLmZvckVhY2goYyA9PiB7XHJcbiAgICBjWzFdLmRpc3Bvc2UoKTtcclxuICAgIGNhY2hlLmRlbGV0ZVN0cktleShjWzBdKTtcclxuICB9KTtcclxuXHJcbiAgbmV3RWxlbWVudHMuZm9yRWFjaChlID0+IHtcclxuICAgIGlmICghY2FjaGUuaGFzKGUua2V5KSkgY2FjaGUuc2V0KGUua2V5LCBlLnZhbHVlKTtcclxuICB9KTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRBdHRyaWJ1dGVCdWZmZXJJbmZvID0gKG5hbWU6IHN0cmluZywgdHlwZTogQXR0cmlidXRlQnVmZmVyVHlwZSkgPT5cclxuICBjYWNoZS5nZXQoeyBuYW1lLCB0eXBlIH0pO1xyXG5cclxuZXhwb3J0IGNvbnN0IGNyZWF0ZUF0dHJpYnV0ZUJ1ZmZlckluZm9zID0gKFxyXG4gIGNvbnRleHQ6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCxcclxuICBwcm9ncmFtOiBXZWJHTFByb2dyYW0sXHJcbiAgYXR0cmlidXRlQnVmZmVyczogeyBuYW1lOiBzdHJpbmc7IHR5cGU6IEF0dHJpYnV0ZUJ1ZmZlclR5cGUgfVtdXHJcbik6IEF0dHJpYnV0ZUJ1ZmZlckluZm9bXSA9PiB7XHJcbiAgY29uc3QgZWxlbWVudHMgPSBhdHRyaWJ1dGVCdWZmZXJzLm1hcChhdHRyaWJ1dGVCdWZmZXIgPT4ge1xyXG4gICAgY29uc3Qga2V5ID0ge1xyXG4gICAgICAuLi5hdHRyaWJ1dGVCdWZmZXIsXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IHZhbHVlRnJvbUNhY2hlID0gY2FjaGUuZ2V0KGtleSk7XHJcblxyXG4gICAgaWYgKHZhbHVlRnJvbUNhY2hlKSB7XHJcbiAgICAgIHZhbHVlRnJvbUNhY2hlLmF0dHJpYnV0ZUJ1ZmZlckluZm8uYXR0YWNoVG9Qcm9ncmFtKHByb2dyYW0pO1xyXG4gICAgICByZXR1cm4geyBrZXksIHZhbHVlOiB2YWx1ZUZyb21DYWNoZSB9O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc3QgYXR0cmlidXRlQnVmZmVySW5mbyA9IG5ldyBBdHRyaWJ1dGVCdWZmZXJJbmZvKFxyXG4gICAgICAgIGNvbnRleHQsXHJcbiAgICAgICAgcHJvZ3JhbSxcclxuICAgICAgICBhdHRyaWJ1dGVCdWZmZXIubmFtZSxcclxuICAgICAgICBhdHRyaWJ1dGVCdWZmZXIudHlwZVxyXG4gICAgICApO1xyXG5cclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBrZXksXHJcbiAgICAgICAgdmFsdWU6IHtcclxuICAgICAgICAgIGF0dHJpYnV0ZUJ1ZmZlckluZm8sXHJcbiAgICAgICAgICBkaXNwb3NlOiAoKSA9PiBhdHRyaWJ1dGVCdWZmZXJJbmZvLmRlbGV0ZUJ1ZmZlcigpLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIHJlYnVpbGRDYWNoZShlbGVtZW50cyk7XHJcbiAgcmV0dXJuIGVsZW1lbnRzLm1hcChjID0+IGMudmFsdWUuYXR0cmlidXRlQnVmZmVySW5mbyk7XHJcbn07XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG4vL1RPRE9cclxuLy8gLSBtb3ZlIHRvIGNvbW1vbiBsaWJyYXJ5XHJcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcclxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxufTtcclxudmFyIF9fc3ByZWFkQXJyYXlzID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5cykgfHwgZnVuY3Rpb24gKCkge1xyXG4gICAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XHJcbiAgICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXHJcbiAgICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXHJcbiAgICAgICAgICAgIHJba10gPSBhW2pdO1xyXG4gICAgcmV0dXJuIHI7XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5jbGFtcCA9IGV4cG9ydHMuYXJlU2hhbGxvd0VxdWFsID0gZXhwb3J0cy5vdmVycmlkZGVuUHJvcHMgPSBleHBvcnRzLm9taXRLZXlzID0gZXhwb3J0cy5vdmVycmlkZURlZmluZWRQcm9wc09ubHkgPSB2b2lkIDA7XHJcbmV4cG9ydHMub3ZlcnJpZGVEZWZpbmVkUHJvcHNPbmx5ID0gZnVuY3Rpb24gKGxlZnQsIHJpZ2h0KSB7XHJcbiAgICB2YXIgcmVzdWx0ID0gX19hc3NpZ24oe30sIGxlZnQpO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IE9iamVjdC5rZXlzKHJpZ2h0KTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICB2YXIga2V5ID0gX2FbX2ldO1xyXG4gICAgICAgIHZhciB2YWwgPSByaWdodFtrZXldO1xyXG4gICAgICAgIGlmICh2YWwgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXN1bHRba2V5XSA9IHZhbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59O1xyXG5leHBvcnRzLm9taXRLZXlzID0gZnVuY3Rpb24gKG9iaiwga2V5cykge1xyXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iailcclxuICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuICFrZXlzLmluY2x1ZGVzKGtleSk7IH0pXHJcbiAgICAgICAgLnJlZHVjZShmdW5jdGlvbiAocmVzdWx0LCBrZXkpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgT2JqZWN0LmFzc2lnbihyZXN1bHQsIChfYSA9IHt9LCBfYVtrZXldID0gb2JqW2tleV0sIF9hKSk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH0sIHt9KTtcclxufTtcclxuZXhwb3J0cy5vdmVycmlkZGVuUHJvcHMgPSBmdW5jdGlvbiAobGVmdCwgcmlnaHQpIHtcclxuICAgIHJldHVybiBfX3NwcmVhZEFycmF5cyhPYmplY3Qua2V5cyhsZWZ0KSwgT2JqZWN0LmtleXMocmlnaHQpKS5yZWR1Y2UoZnVuY3Rpb24gKHJlc3VsdCwgb2JqZWN0S2V5KSB7XHJcbiAgICAgICAgdmFyIGtleSA9IG9iamVjdEtleTtcclxuICAgICAgICBpZiAobGVmdFtrZXldICE9PSByaWdodFtrZXldKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdFtrZXldID0gcmlnaHRba2V5XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH0sIHt9KTtcclxufTtcclxuZXhwb3J0cy5hcmVTaGFsbG93RXF1YWwgPSBmdW5jdGlvbiAobGVmdCwgcmlnaHQpIHtcclxuICAgIHZhciBrZXlzTGVmdCA9IE9iamVjdC5rZXlzKGxlZnQpO1xyXG4gICAgdmFyIGtleXNSaWdodCA9IE9iamVjdC5rZXlzKHJpZ2h0KTtcclxuICAgIGlmIChrZXlzTGVmdC5sZW5ndGggIT09IGtleXNSaWdodC5sZW5ndGgpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBmb3IgKHZhciBfaSA9IDAsIGtleXNMZWZ0XzEgPSBrZXlzTGVmdDsgX2kgPCBrZXlzTGVmdF8xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIHZhciBrZXkgPSBrZXlzTGVmdF8xW19pXTtcclxuICAgICAgICBpZiAobGVmdFtrZXldICE9PSByaWdodFtrZXldKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufTtcclxuZXhwb3J0cy5jbGFtcCA9IGZ1bmN0aW9uICh2YWx1ZSwgbWluLCBtYXgpIHtcclxuICAgIGlmICh2YWx1ZSA8IG1pbilcclxuICAgICAgICByZXR1cm4gbWluO1xyXG4gICAgZWxzZSBpZiAodmFsdWUgPiBtYXgpXHJcbiAgICAgICAgcmV0dXJuIG1heDtcclxuICAgIGVsc2VcclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbn07XHJcbiIsImltcG9ydCAkJG9ic2VydmFibGUgZnJvbSAnc3ltYm9sLW9ic2VydmFibGUnO1xuXG4vKipcbiAqIFRoZXNlIGFyZSBwcml2YXRlIGFjdGlvbiB0eXBlcyByZXNlcnZlZCBieSBSZWR1eC5cbiAqIEZvciBhbnkgdW5rbm93biBhY3Rpb25zLCB5b3UgbXVzdCByZXR1cm4gdGhlIGN1cnJlbnQgc3RhdGUuXG4gKiBJZiB0aGUgY3VycmVudCBzdGF0ZSBpcyB1bmRlZmluZWQsIHlvdSBtdXN0IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS5cbiAqIERvIG5vdCByZWZlcmVuY2UgdGhlc2UgYWN0aW9uIHR5cGVzIGRpcmVjdGx5IGluIHlvdXIgY29kZS5cbiAqL1xudmFyIHJhbmRvbVN0cmluZyA9IGZ1bmN0aW9uIHJhbmRvbVN0cmluZygpIHtcbiAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZyg3KS5zcGxpdCgnJykuam9pbignLicpO1xufTtcblxudmFyIEFjdGlvblR5cGVzID0ge1xuICBJTklUOiBcIkBAcmVkdXgvSU5JVFwiICsgcmFuZG9tU3RyaW5nKCksXG4gIFJFUExBQ0U6IFwiQEByZWR1eC9SRVBMQUNFXCIgKyByYW5kb21TdHJpbmcoKSxcbiAgUFJPQkVfVU5LTk9XTl9BQ1RJT046IGZ1bmN0aW9uIFBST0JFX1VOS05PV05fQUNUSU9OKCkge1xuICAgIHJldHVybiBcIkBAcmVkdXgvUFJPQkVfVU5LTk9XTl9BQ1RJT05cIiArIHJhbmRvbVN0cmluZygpO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7YW55fSBvYmogVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIGFyZ3VtZW50IGFwcGVhcnMgdG8gYmUgYSBwbGFpbiBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgdmFyIHByb3RvID0gb2JqO1xuXG4gIHdoaWxlIChPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pICE9PSBudWxsKSB7XG4gICAgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopID09PSBwcm90bztcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgUmVkdXggc3RvcmUgdGhhdCBob2xkcyB0aGUgc3RhdGUgdHJlZS5cbiAqIFRoZSBvbmx5IHdheSB0byBjaGFuZ2UgdGhlIGRhdGEgaW4gdGhlIHN0b3JlIGlzIHRvIGNhbGwgYGRpc3BhdGNoKClgIG9uIGl0LlxuICpcbiAqIFRoZXJlIHNob3VsZCBvbmx5IGJlIGEgc2luZ2xlIHN0b3JlIGluIHlvdXIgYXBwLiBUbyBzcGVjaWZ5IGhvdyBkaWZmZXJlbnRcbiAqIHBhcnRzIG9mIHRoZSBzdGF0ZSB0cmVlIHJlc3BvbmQgdG8gYWN0aW9ucywgeW91IG1heSBjb21iaW5lIHNldmVyYWwgcmVkdWNlcnNcbiAqIGludG8gYSBzaW5nbGUgcmVkdWNlciBmdW5jdGlvbiBieSB1c2luZyBgY29tYmluZVJlZHVjZXJzYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWR1Y2VyIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBuZXh0IHN0YXRlIHRyZWUsIGdpdmVuXG4gKiB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgYWN0aW9uIHRvIGhhbmRsZS5cbiAqXG4gKiBAcGFyYW0ge2FueX0gW3ByZWxvYWRlZFN0YXRlXSBUaGUgaW5pdGlhbCBzdGF0ZS4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGh5ZHJhdGUgdGhlIHN0YXRlIGZyb20gdGhlIHNlcnZlciBpbiB1bml2ZXJzYWwgYXBwcywgb3IgdG8gcmVzdG9yZSBhXG4gKiBwcmV2aW91c2x5IHNlcmlhbGl6ZWQgdXNlciBzZXNzaW9uLlxuICogSWYgeW91IHVzZSBgY29tYmluZVJlZHVjZXJzYCB0byBwcm9kdWNlIHRoZSByb290IHJlZHVjZXIgZnVuY3Rpb24sIHRoaXMgbXVzdCBiZVxuICogYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUgYXMgYGNvbWJpbmVSZWR1Y2Vyc2Aga2V5cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZW5oYW5jZXJdIFRoZSBzdG9yZSBlbmhhbmNlci4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGVuaGFuY2UgdGhlIHN0b3JlIHdpdGggdGhpcmQtcGFydHkgY2FwYWJpbGl0aWVzIHN1Y2ggYXMgbWlkZGxld2FyZSxcbiAqIHRpbWUgdHJhdmVsLCBwZXJzaXN0ZW5jZSwgZXRjLiBUaGUgb25seSBzdG9yZSBlbmhhbmNlciB0aGF0IHNoaXBzIHdpdGggUmVkdXhcbiAqIGlzIGBhcHBseU1pZGRsZXdhcmUoKWAuXG4gKlxuICogQHJldHVybnMge1N0b3JlfSBBIFJlZHV4IHN0b3JlIHRoYXQgbGV0cyB5b3UgcmVhZCB0aGUgc3RhdGUsIGRpc3BhdGNoIGFjdGlvbnNcbiAqIGFuZCBzdWJzY3JpYmUgdG8gY2hhbmdlcy5cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVTdG9yZShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSwgZW5oYW5jZXIpIHtcbiAgdmFyIF9yZWYyO1xuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBlbmhhbmNlciA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgYXJndW1lbnRzWzNdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJdCBsb29rcyBsaWtlIHlvdSBhcmUgcGFzc2luZyBzZXZlcmFsIHN0b3JlIGVuaGFuY2VycyB0byAnICsgJ2NyZWF0ZVN0b3JlKCkuIFRoaXMgaXMgbm90IHN1cHBvcnRlZC4gSW5zdGVhZCwgY29tcG9zZSB0aGVtICcgKyAndG9nZXRoZXIgdG8gYSBzaW5nbGUgZnVuY3Rpb24uJyk7XG4gIH1cblxuICBpZiAodHlwZW9mIHByZWxvYWRlZFN0YXRlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBlbmhhbmNlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBlbmhhbmNlciA9IHByZWxvYWRlZFN0YXRlO1xuICAgIHByZWxvYWRlZFN0YXRlID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBlbmhhbmNlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBlbmhhbmNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIHJldHVybiBlbmhhbmNlcihjcmVhdGVTdG9yZSkocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiByZWR1Y2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgcmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIGN1cnJlbnRSZWR1Y2VyID0gcmVkdWNlcjtcbiAgdmFyIGN1cnJlbnRTdGF0ZSA9IHByZWxvYWRlZFN0YXRlO1xuICB2YXIgY3VycmVudExpc3RlbmVycyA9IFtdO1xuICB2YXIgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnM7XG4gIHZhciBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gIC8qKlxuICAgKiBUaGlzIG1ha2VzIGEgc2hhbGxvdyBjb3B5IG9mIGN1cnJlbnRMaXN0ZW5lcnMgc28gd2UgY2FuIHVzZVxuICAgKiBuZXh0TGlzdGVuZXJzIGFzIGEgdGVtcG9yYXJ5IGxpc3Qgd2hpbGUgZGlzcGF0Y2hpbmcuXG4gICAqXG4gICAqIFRoaXMgcHJldmVudHMgYW55IGJ1Z3MgYXJvdW5kIGNvbnN1bWVycyBjYWxsaW5nXG4gICAqIHN1YnNjcmliZS91bnN1YnNjcmliZSBpbiB0aGUgbWlkZGxlIG9mIGEgZGlzcGF0Y2guXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKSB7XG4gICAgaWYgKG5leHRMaXN0ZW5lcnMgPT09IGN1cnJlbnRMaXN0ZW5lcnMpIHtcbiAgICAgIG5leHRMaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzLnNsaWNlKCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZWFkcyB0aGUgc3RhdGUgdHJlZSBtYW5hZ2VkIGJ5IHRoZSBzdG9yZS5cbiAgICpcbiAgICogQHJldHVybnMge2FueX0gVGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBvZiB5b3VyIGFwcGxpY2F0aW9uLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGdldFN0YXRlKCkge1xuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuZ2V0U3RhdGUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnVGhlIHJlZHVjZXIgaGFzIGFscmVhZHkgcmVjZWl2ZWQgdGhlIHN0YXRlIGFzIGFuIGFyZ3VtZW50LiAnICsgJ1Bhc3MgaXQgZG93biBmcm9tIHRoZSB0b3AgcmVkdWNlciBpbnN0ZWFkIG9mIHJlYWRpbmcgaXQgZnJvbSB0aGUgc3RvcmUuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGN1cnJlbnRTdGF0ZTtcbiAgfVxuICAvKipcbiAgICogQWRkcyBhIGNoYW5nZSBsaXN0ZW5lci4gSXQgd2lsbCBiZSBjYWxsZWQgYW55IHRpbWUgYW4gYWN0aW9uIGlzIGRpc3BhdGNoZWQsXG4gICAqIGFuZCBzb21lIHBhcnQgb2YgdGhlIHN0YXRlIHRyZWUgbWF5IHBvdGVudGlhbGx5IGhhdmUgY2hhbmdlZC4gWW91IG1heSB0aGVuXG4gICAqIGNhbGwgYGdldFN0YXRlKClgIHRvIHJlYWQgdGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBpbnNpZGUgdGhlIGNhbGxiYWNrLlxuICAgKlxuICAgKiBZb3UgbWF5IGNhbGwgYGRpc3BhdGNoKClgIGZyb20gYSBjaGFuZ2UgbGlzdGVuZXIsIHdpdGggdGhlIGZvbGxvd2luZ1xuICAgKiBjYXZlYXRzOlxuICAgKlxuICAgKiAxLiBUaGUgc3Vic2NyaXB0aW9ucyBhcmUgc25hcHNob3R0ZWQganVzdCBiZWZvcmUgZXZlcnkgYGRpc3BhdGNoKClgIGNhbGwuXG4gICAqIElmIHlvdSBzdWJzY3JpYmUgb3IgdW5zdWJzY3JpYmUgd2hpbGUgdGhlIGxpc3RlbmVycyBhcmUgYmVpbmcgaW52b2tlZCwgdGhpc1xuICAgKiB3aWxsIG5vdCBoYXZlIGFueSBlZmZlY3Qgb24gdGhlIGBkaXNwYXRjaCgpYCB0aGF0IGlzIGN1cnJlbnRseSBpbiBwcm9ncmVzcy5cbiAgICogSG93ZXZlciwgdGhlIG5leHQgYGRpc3BhdGNoKClgIGNhbGwsIHdoZXRoZXIgbmVzdGVkIG9yIG5vdCwgd2lsbCB1c2UgYSBtb3JlXG4gICAqIHJlY2VudCBzbmFwc2hvdCBvZiB0aGUgc3Vic2NyaXB0aW9uIGxpc3QuXG4gICAqXG4gICAqIDIuIFRoZSBsaXN0ZW5lciBzaG91bGQgbm90IGV4cGVjdCB0byBzZWUgYWxsIHN0YXRlIGNoYW5nZXMsIGFzIHRoZSBzdGF0ZVxuICAgKiBtaWdodCBoYXZlIGJlZW4gdXBkYXRlZCBtdWx0aXBsZSB0aW1lcyBkdXJpbmcgYSBuZXN0ZWQgYGRpc3BhdGNoKClgIGJlZm9yZVxuICAgKiB0aGUgbGlzdGVuZXIgaXMgY2FsbGVkLiBJdCBpcywgaG93ZXZlciwgZ3VhcmFudGVlZCB0aGF0IGFsbCBzdWJzY3JpYmVyc1xuICAgKiByZWdpc3RlcmVkIGJlZm9yZSB0aGUgYGRpc3BhdGNoKClgIHN0YXJ0ZWQgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgbGF0ZXN0XG4gICAqIHN0YXRlIGJ5IHRoZSB0aW1lIGl0IGV4aXRzLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBBIGNhbGxiYWNrIHRvIGJlIGludm9rZWQgb24gZXZlcnkgZGlzcGF0Y2guXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiB0byByZW1vdmUgdGhpcyBjaGFuZ2UgbGlzdGVuZXIuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgbGlzdGVuZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCBjYWxsIHN0b3JlLnN1YnNjcmliZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdJZiB5b3Ugd291bGQgbGlrZSB0byBiZSBub3RpZmllZCBhZnRlciB0aGUgc3RvcmUgaGFzIGJlZW4gdXBkYXRlZCwgc3Vic2NyaWJlIGZyb20gYSAnICsgJ2NvbXBvbmVudCBhbmQgaW52b2tlIHN0b3JlLmdldFN0YXRlKCkgaW4gdGhlIGNhbGxiYWNrIHRvIGFjY2VzcyB0aGUgbGF0ZXN0IHN0YXRlLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGktcmVmZXJlbmNlL3N0b3JlI3N1YnNjcmliZWxpc3RlbmVyIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgfVxuXG4gICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgIG5leHRMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgaWYgKCFpc1N1YnNjcmliZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IHVuc3Vic2NyaWJlIGZyb20gYSBzdG9yZSBsaXN0ZW5lciB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2FwaS1yZWZlcmVuY2Uvc3RvcmUjc3Vic2NyaWJlbGlzdGVuZXIgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICAgIH1cblxuICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgICB2YXIgaW5kZXggPSBuZXh0TGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgICAgbmV4dExpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgY3VycmVudExpc3RlbmVycyA9IG51bGw7XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogRGlzcGF0Y2hlcyBhbiBhY3Rpb24uIEl0IGlzIHRoZSBvbmx5IHdheSB0byB0cmlnZ2VyIGEgc3RhdGUgY2hhbmdlLlxuICAgKlxuICAgKiBUaGUgYHJlZHVjZXJgIGZ1bmN0aW9uLCB1c2VkIHRvIGNyZWF0ZSB0aGUgc3RvcmUsIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlXG4gICAqIGN1cnJlbnQgc3RhdGUgdHJlZSBhbmQgdGhlIGdpdmVuIGBhY3Rpb25gLiBJdHMgcmV0dXJuIHZhbHVlIHdpbGxcbiAgICogYmUgY29uc2lkZXJlZCB0aGUgKipuZXh0Kiogc3RhdGUgb2YgdGhlIHRyZWUsIGFuZCB0aGUgY2hhbmdlIGxpc3RlbmVyc1xuICAgKiB3aWxsIGJlIG5vdGlmaWVkLlxuICAgKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvbmx5IHN1cHBvcnRzIHBsYWluIG9iamVjdCBhY3Rpb25zLiBJZiB5b3Ugd2FudCB0b1xuICAgKiBkaXNwYXRjaCBhIFByb21pc2UsIGFuIE9ic2VydmFibGUsIGEgdGh1bmssIG9yIHNvbWV0aGluZyBlbHNlLCB5b3UgbmVlZCB0b1xuICAgKiB3cmFwIHlvdXIgc3RvcmUgY3JlYXRpbmcgZnVuY3Rpb24gaW50byB0aGUgY29ycmVzcG9uZGluZyBtaWRkbGV3YXJlLiBGb3JcbiAgICogZXhhbXBsZSwgc2VlIHRoZSBkb2N1bWVudGF0aW9uIGZvciB0aGUgYHJlZHV4LXRodW5rYCBwYWNrYWdlLiBFdmVuIHRoZVxuICAgKiBtaWRkbGV3YXJlIHdpbGwgZXZlbnR1YWxseSBkaXNwYXRjaCBwbGFpbiBvYmplY3QgYWN0aW9ucyB1c2luZyB0aGlzIG1ldGhvZC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGFjdGlvbiBBIHBsYWluIG9iamVjdCByZXByZXNlbnRpbmcg4oCcd2hhdCBjaGFuZ2Vk4oCdLiBJdCBpc1xuICAgKiBhIGdvb2QgaWRlYSB0byBrZWVwIGFjdGlvbnMgc2VyaWFsaXphYmxlIHNvIHlvdSBjYW4gcmVjb3JkIGFuZCByZXBsYXkgdXNlclxuICAgKiBzZXNzaW9ucywgb3IgdXNlIHRoZSB0aW1lIHRyYXZlbGxpbmcgYHJlZHV4LWRldnRvb2xzYC4gQW4gYWN0aW9uIG11c3QgaGF2ZVxuICAgKiBhIGB0eXBlYCBwcm9wZXJ0eSB3aGljaCBtYXkgbm90IGJlIGB1bmRlZmluZWRgLiBJdCBpcyBhIGdvb2QgaWRlYSB0byB1c2VcbiAgICogc3RyaW5nIGNvbnN0YW50cyBmb3IgYWN0aW9uIHR5cGVzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBGb3IgY29udmVuaWVuY2UsIHRoZSBzYW1lIGFjdGlvbiBvYmplY3QgeW91IGRpc3BhdGNoZWQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCwgaWYgeW91IHVzZSBhIGN1c3RvbSBtaWRkbGV3YXJlLCBpdCBtYXkgd3JhcCBgZGlzcGF0Y2goKWAgdG9cbiAgICogcmV0dXJuIHNvbWV0aGluZyBlbHNlIChmb3IgZXhhbXBsZSwgYSBQcm9taXNlIHlvdSBjYW4gYXdhaXQpLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGRpc3BhdGNoKGFjdGlvbikge1xuICAgIGlmICghaXNQbGFpbk9iamVjdChhY3Rpb24pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjdGlvbnMgbXVzdCBiZSBwbGFpbiBvYmplY3RzLiAnICsgJ1VzZSBjdXN0b20gbWlkZGxld2FyZSBmb3IgYXN5bmMgYWN0aW9ucy4nKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGFjdGlvbi50eXBlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY3Rpb25zIG1heSBub3QgaGF2ZSBhbiB1bmRlZmluZWQgXCJ0eXBlXCIgcHJvcGVydHkuICcgKyAnSGF2ZSB5b3UgbWlzc3BlbGxlZCBhIGNvbnN0YW50PycpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlZHVjZXJzIG1heSBub3QgZGlzcGF0Y2ggYWN0aW9ucy4nKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgaXNEaXNwYXRjaGluZyA9IHRydWU7XG4gICAgICBjdXJyZW50U3RhdGUgPSBjdXJyZW50UmVkdWNlcihjdXJyZW50U3RhdGUsIGFjdGlvbik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgbGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycyA9IG5leHRMaXN0ZW5lcnM7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGxpc3RlbmVyID0gbGlzdGVuZXJzW2ldO1xuICAgICAgbGlzdGVuZXIoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWN0aW9uO1xuICB9XG4gIC8qKlxuICAgKiBSZXBsYWNlcyB0aGUgcmVkdWNlciBjdXJyZW50bHkgdXNlZCBieSB0aGUgc3RvcmUgdG8gY2FsY3VsYXRlIHRoZSBzdGF0ZS5cbiAgICpcbiAgICogWW91IG1pZ2h0IG5lZWQgdGhpcyBpZiB5b3VyIGFwcCBpbXBsZW1lbnRzIGNvZGUgc3BsaXR0aW5nIGFuZCB5b3Ugd2FudCB0b1xuICAgKiBsb2FkIHNvbWUgb2YgdGhlIHJlZHVjZXJzIGR5bmFtaWNhbGx5LiBZb3UgbWlnaHQgYWxzbyBuZWVkIHRoaXMgaWYgeW91XG4gICAqIGltcGxlbWVudCBhIGhvdCByZWxvYWRpbmcgbWVjaGFuaXNtIGZvciBSZWR1eC5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbmV4dFJlZHVjZXIgVGhlIHJlZHVjZXIgZm9yIHRoZSBzdG9yZSB0byB1c2UgaW5zdGVhZC5cbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gcmVwbGFjZVJlZHVjZXIobmV4dFJlZHVjZXIpIHtcbiAgICBpZiAodHlwZW9mIG5leHRSZWR1Y2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBuZXh0UmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGN1cnJlbnRSZWR1Y2VyID0gbmV4dFJlZHVjZXI7IC8vIFRoaXMgYWN0aW9uIGhhcyBhIHNpbWlsaWFyIGVmZmVjdCB0byBBY3Rpb25UeXBlcy5JTklULlxuICAgIC8vIEFueSByZWR1Y2VycyB0aGF0IGV4aXN0ZWQgaW4gYm90aCB0aGUgbmV3IGFuZCBvbGQgcm9vdFJlZHVjZXJcbiAgICAvLyB3aWxsIHJlY2VpdmUgdGhlIHByZXZpb3VzIHN0YXRlLiBUaGlzIGVmZmVjdGl2ZWx5IHBvcHVsYXRlc1xuICAgIC8vIHRoZSBuZXcgc3RhdGUgdHJlZSB3aXRoIGFueSByZWxldmFudCBkYXRhIGZyb20gdGhlIG9sZCBvbmUuXG5cbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5SRVBMQUNFXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEludGVyb3BlcmFiaWxpdHkgcG9pbnQgZm9yIG9ic2VydmFibGUvcmVhY3RpdmUgbGlicmFyaWVzLlxuICAgKiBAcmV0dXJucyB7b2JzZXJ2YWJsZX0gQSBtaW5pbWFsIG9ic2VydmFibGUgb2Ygc3RhdGUgY2hhbmdlcy5cbiAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgb2JzZXJ2YWJsZSBwcm9wb3NhbDpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JzZXJ2YWJsZVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIG9ic2VydmFibGUoKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgb3V0ZXJTdWJzY3JpYmUgPSBzdWJzY3JpYmU7XG4gICAgcmV0dXJuIF9yZWYgPSB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBtaW5pbWFsIG9ic2VydmFibGUgc3Vic2NyaXB0aW9uIG1ldGhvZC5cbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYnNlcnZlciBBbnkgb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgYXMgYW4gb2JzZXJ2ZXIuXG4gICAgICAgKiBUaGUgb2JzZXJ2ZXIgb2JqZWN0IHNob3VsZCBoYXZlIGEgYG5leHRgIG1ldGhvZC5cbiAgICAgICAqIEByZXR1cm5zIHtzdWJzY3JpcHRpb259IEFuIG9iamVjdCB3aXRoIGFuIGB1bnN1YnNjcmliZWAgbWV0aG9kIHRoYXQgY2FuXG4gICAgICAgKiBiZSB1c2VkIHRvIHVuc3Vic2NyaWJlIHRoZSBvYnNlcnZhYmxlIGZyb20gdGhlIHN0b3JlLCBhbmQgcHJldmVudCBmdXJ0aGVyXG4gICAgICAgKiBlbWlzc2lvbiBvZiB2YWx1ZXMgZnJvbSB0aGUgb2JzZXJ2YWJsZS5cbiAgICAgICAqL1xuICAgICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUob2JzZXJ2ZXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvYnNlcnZlciAhPT0gJ29iamVjdCcgfHwgb2JzZXJ2ZXIgPT09IG51bGwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCB0aGUgb2JzZXJ2ZXIgdG8gYmUgYW4gb2JqZWN0LicpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gb2JzZXJ2ZVN0YXRlKCkge1xuICAgICAgICAgIGlmIChvYnNlcnZlci5uZXh0KSB7XG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KGdldFN0YXRlKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG9ic2VydmVTdGF0ZSgpO1xuICAgICAgICB2YXIgdW5zdWJzY3JpYmUgPSBvdXRlclN1YnNjcmliZShvYnNlcnZlU3RhdGUpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHVuc3Vic2NyaWJlOiB1bnN1YnNjcmliZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sIF9yZWZbJCRvYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sIF9yZWY7XG4gIH0gLy8gV2hlbiBhIHN0b3JlIGlzIGNyZWF0ZWQsIGFuIFwiSU5JVFwiIGFjdGlvbiBpcyBkaXNwYXRjaGVkIHNvIHRoYXQgZXZlcnlcbiAgLy8gcmVkdWNlciByZXR1cm5zIHRoZWlyIGluaXRpYWwgc3RhdGUuIFRoaXMgZWZmZWN0aXZlbHkgcG9wdWxhdGVzXG4gIC8vIHRoZSBpbml0aWFsIHN0YXRlIHRyZWUuXG5cblxuICBkaXNwYXRjaCh7XG4gICAgdHlwZTogQWN0aW9uVHlwZXMuSU5JVFxuICB9KTtcbiAgcmV0dXJuIF9yZWYyID0ge1xuICAgIGRpc3BhdGNoOiBkaXNwYXRjaCxcbiAgICBzdWJzY3JpYmU6IHN1YnNjcmliZSxcbiAgICBnZXRTdGF0ZTogZ2V0U3RhdGUsXG4gICAgcmVwbGFjZVJlZHVjZXI6IHJlcGxhY2VSZWR1Y2VyXG4gIH0sIF9yZWYyWyQkb2JzZXJ2YWJsZV0gPSBvYnNlcnZhYmxlLCBfcmVmMjtcbn1cblxuLyoqXG4gKiBQcmludHMgYSB3YXJuaW5nIGluIHRoZSBjb25zb2xlIGlmIGl0IGV4aXN0cy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBUaGUgd2FybmluZyBtZXNzYWdlLlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIHdhcm5pbmcobWVzc2FnZSkge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG4gIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGNvbnNvbGUuZXJyb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICB9XG4gIC8qIGVzbGludC1lbmFibGUgbm8tY29uc29sZSAqL1xuXG5cbiAgdHJ5IHtcbiAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IGlmIHlvdSBlbmFibGVcbiAgICAvLyBcImJyZWFrIG9uIGFsbCBleGNlcHRpb25zXCIgaW4geW91ciBjb25zb2xlLFxuICAgIC8vIGl0IHdvdWxkIHBhdXNlIHRoZSBleGVjdXRpb24gYXQgdGhpcyBsaW5lLlxuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfSBjYXRjaCAoZSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxuXG59XG5cbmZ1bmN0aW9uIGdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlKGtleSwgYWN0aW9uKSB7XG4gIHZhciBhY3Rpb25UeXBlID0gYWN0aW9uICYmIGFjdGlvbi50eXBlO1xuICB2YXIgYWN0aW9uRGVzY3JpcHRpb24gPSBhY3Rpb25UeXBlICYmIFwiYWN0aW9uIFxcXCJcIiArIFN0cmluZyhhY3Rpb25UeXBlKSArIFwiXFxcIlwiIHx8ICdhbiBhY3Rpb24nO1xuICByZXR1cm4gXCJHaXZlbiBcIiArIGFjdGlvbkRlc2NyaXB0aW9uICsgXCIsIHJlZHVjZXIgXFxcIlwiICsga2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZC4gXCIgKyBcIlRvIGlnbm9yZSBhbiBhY3Rpb24sIHlvdSBtdXN0IGV4cGxpY2l0bHkgcmV0dXJuIHRoZSBwcmV2aW91cyBzdGF0ZS4gXCIgKyBcIklmIHlvdSB3YW50IHRoaXMgcmVkdWNlciB0byBob2xkIG5vIHZhbHVlLCB5b3UgY2FuIHJldHVybiBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLlwiO1xufVxuXG5mdW5jdGlvbiBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKGlucHV0U3RhdGUsIHJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSkge1xuICB2YXIgcmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XG4gIHZhciBhcmd1bWVudE5hbWUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLklOSVQgPyAncHJlbG9hZGVkU3RhdGUgYXJndW1lbnQgcGFzc2VkIHRvIGNyZWF0ZVN0b3JlJyA6ICdwcmV2aW91cyBzdGF0ZSByZWNlaXZlZCBieSB0aGUgcmVkdWNlcic7XG5cbiAgaWYgKHJlZHVjZXJLZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAnU3RvcmUgZG9lcyBub3QgaGF2ZSBhIHZhbGlkIHJlZHVjZXIuIE1ha2Ugc3VyZSB0aGUgYXJndW1lbnQgcGFzc2VkICcgKyAndG8gY29tYmluZVJlZHVjZXJzIGlzIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIHJlZHVjZXJzLic7XG4gIH1cblxuICBpZiAoIWlzUGxhaW5PYmplY3QoaW5wdXRTdGF0ZSkpIHtcbiAgICByZXR1cm4gXCJUaGUgXCIgKyBhcmd1bWVudE5hbWUgKyBcIiBoYXMgdW5leHBlY3RlZCB0eXBlIG9mIFxcXCJcIiArIHt9LnRvU3RyaW5nLmNhbGwoaW5wdXRTdGF0ZSkubWF0Y2goL1xccyhbYS16fEEtWl0rKS8pWzFdICsgXCJcXFwiLiBFeHBlY3RlZCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIFwiICsgKFwia2V5czogXFxcIlwiICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCJcIik7XG4gIH1cblxuICB2YXIgdW5leHBlY3RlZEtleXMgPSBPYmplY3Qua2V5cyhpbnB1dFN0YXRlKS5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiAhcmVkdWNlcnMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiAhdW5leHBlY3RlZEtleUNhY2hlW2tleV07XG4gIH0pO1xuICB1bmV4cGVjdGVkS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB1bmV4cGVjdGVkS2V5Q2FjaGVba2V5XSA9IHRydWU7XG4gIH0pO1xuICBpZiAoYWN0aW9uICYmIGFjdGlvbi50eXBlID09PSBBY3Rpb25UeXBlcy5SRVBMQUNFKSByZXR1cm47XG5cbiAgaWYgKHVuZXhwZWN0ZWRLZXlzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gXCJVbmV4cGVjdGVkIFwiICsgKHVuZXhwZWN0ZWRLZXlzLmxlbmd0aCA+IDEgPyAna2V5cycgOiAna2V5JykgKyBcIiBcIiArIChcIlxcXCJcIiArIHVuZXhwZWN0ZWRLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiIGZvdW5kIGluIFwiICsgYXJndW1lbnROYW1lICsgXCIuIFwiKSArIFwiRXhwZWN0ZWQgdG8gZmluZCBvbmUgb2YgdGhlIGtub3duIHJlZHVjZXIga2V5cyBpbnN0ZWFkOiBcIiArIChcIlxcXCJcIiArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiLiBVbmV4cGVjdGVkIGtleXMgd2lsbCBiZSBpZ25vcmVkLlwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRSZWR1Y2VyU2hhcGUocmVkdWNlcnMpIHtcbiAgT2JqZWN0LmtleXMocmVkdWNlcnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciByZWR1Y2VyID0gcmVkdWNlcnNba2V5XTtcbiAgICB2YXIgaW5pdGlhbFN0YXRlID0gcmVkdWNlcih1bmRlZmluZWQsIHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLklOSVRcbiAgICB9KTtcblxuICAgIGlmICh0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVkdWNlciBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIGR1cmluZyBpbml0aWFsaXphdGlvbi4gXCIgKyBcIklmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlIHJlZHVjZXIgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCBcIiArIFwiZXhwbGljaXRseSByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBcIiArIFwibm90IGJlIHVuZGVmaW5lZC4gSWYgeW91IGRvbid0IHdhbnQgdG8gc2V0IGEgdmFsdWUgZm9yIHRoaXMgcmVkdWNlciwgXCIgKyBcInlvdSBjYW4gdXNlIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuXCIpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVkdWNlcih1bmRlZmluZWQsIHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlBST0JFX1VOS05PV05fQUNUSU9OKClcbiAgICB9KSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlZHVjZXIgXFxcIlwiICsga2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZCB3aGVuIHByb2JlZCB3aXRoIGEgcmFuZG9tIHR5cGUuIFwiICsgKFwiRG9uJ3QgdHJ5IHRvIGhhbmRsZSBcIiArIEFjdGlvblR5cGVzLklOSVQgKyBcIiBvciBvdGhlciBhY3Rpb25zIGluIFxcXCJyZWR1eC8qXFxcIiBcIikgKyBcIm5hbWVzcGFjZS4gVGhleSBhcmUgY29uc2lkZXJlZCBwcml2YXRlLiBJbnN0ZWFkLCB5b3UgbXVzdCByZXR1cm4gdGhlIFwiICsgXCJjdXJyZW50IHN0YXRlIGZvciBhbnkgdW5rbm93biBhY3Rpb25zLCB1bmxlc3MgaXQgaXMgdW5kZWZpbmVkLCBcIiArIFwiaW4gd2hpY2ggY2FzZSB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUsIHJlZ2FyZGxlc3Mgb2YgdGhlIFwiICsgXCJhY3Rpb24gdHlwZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5IG5vdCBiZSB1bmRlZmluZWQsIGJ1dCBjYW4gYmUgbnVsbC5cIik7XG4gICAgfVxuICB9KTtcbn1cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgZGlmZmVyZW50IHJlZHVjZXIgZnVuY3Rpb25zLCBpbnRvIGEgc2luZ2xlXG4gKiByZWR1Y2VyIGZ1bmN0aW9uLiBJdCB3aWxsIGNhbGwgZXZlcnkgY2hpbGQgcmVkdWNlciwgYW5kIGdhdGhlciB0aGVpciByZXN1bHRzXG4gKiBpbnRvIGEgc2luZ2xlIHN0YXRlIG9iamVjdCwgd2hvc2Uga2V5cyBjb3JyZXNwb25kIHRvIHRoZSBrZXlzIG9mIHRoZSBwYXNzZWRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWR1Y2VycyBBbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGNvcnJlc3BvbmQgdG8gZGlmZmVyZW50XG4gKiByZWR1Y2VyIGZ1bmN0aW9ucyB0aGF0IG5lZWQgdG8gYmUgY29tYmluZWQgaW50byBvbmUuIE9uZSBoYW5keSB3YXkgdG8gb2J0YWluXG4gKiBpdCBpcyB0byB1c2UgRVM2IGBpbXBvcnQgKiBhcyByZWR1Y2Vyc2Agc3ludGF4LiBUaGUgcmVkdWNlcnMgbWF5IG5ldmVyIHJldHVyblxuICogdW5kZWZpbmVkIGZvciBhbnkgYWN0aW9uLiBJbnN0ZWFkLCB0aGV5IHNob3VsZCByZXR1cm4gdGhlaXIgaW5pdGlhbCBzdGF0ZVxuICogaWYgdGhlIHN0YXRlIHBhc3NlZCB0byB0aGVtIHdhcyB1bmRlZmluZWQsIGFuZCB0aGUgY3VycmVudCBzdGF0ZSBmb3IgYW55XG4gKiB1bnJlY29nbml6ZWQgYWN0aW9uLlxuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSByZWR1Y2VyIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBldmVyeSByZWR1Y2VyIGluc2lkZSB0aGVcbiAqIHBhc3NlZCBvYmplY3QsIGFuZCBidWlsZHMgYSBzdGF0ZSBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNvbWJpbmVSZWR1Y2VycyhyZWR1Y2Vycykge1xuICB2YXIgcmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XG4gIHZhciBmaW5hbFJlZHVjZXJzID0ge307XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWR1Y2VyS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSByZWR1Y2VyS2V5c1tpXTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHdhcm5pbmcoXCJObyByZWR1Y2VyIHByb3ZpZGVkIGZvciBrZXkgXFxcIlwiICsga2V5ICsgXCJcXFwiXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgZmluYWxSZWR1Y2Vyc1trZXldID0gcmVkdWNlcnNba2V5XTtcbiAgICB9XG4gIH1cblxuICB2YXIgZmluYWxSZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKGZpbmFsUmVkdWNlcnMpOyAvLyBUaGlzIGlzIHVzZWQgdG8gbWFrZSBzdXJlIHdlIGRvbid0IHdhcm4gYWJvdXQgdGhlIHNhbWVcbiAgLy8ga2V5cyBtdWx0aXBsZSB0aW1lcy5cblxuICB2YXIgdW5leHBlY3RlZEtleUNhY2hlO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlID0ge307XG4gIH1cblxuICB2YXIgc2hhcGVBc3NlcnRpb25FcnJvcjtcblxuICB0cnkge1xuICAgIGFzc2VydFJlZHVjZXJTaGFwZShmaW5hbFJlZHVjZXJzKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHNoYXBlQXNzZXJ0aW9uRXJyb3IgPSBlO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbWJpbmF0aW9uKHN0YXRlLCBhY3Rpb24pIHtcbiAgICBpZiAoc3RhdGUgPT09IHZvaWQgMCkge1xuICAgICAgc3RhdGUgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAoc2hhcGVBc3NlcnRpb25FcnJvcikge1xuICAgICAgdGhyb3cgc2hhcGVBc3NlcnRpb25FcnJvcjtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIHdhcm5pbmdNZXNzYWdlID0gZ2V0VW5leHBlY3RlZFN0YXRlU2hhcGVXYXJuaW5nTWVzc2FnZShzdGF0ZSwgZmluYWxSZWR1Y2VycywgYWN0aW9uLCB1bmV4cGVjdGVkS2V5Q2FjaGUpO1xuXG4gICAgICBpZiAod2FybmluZ01lc3NhZ2UpIHtcbiAgICAgICAgd2FybmluZyh3YXJuaW5nTWVzc2FnZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGhhc0NoYW5nZWQgPSBmYWxzZTtcbiAgICB2YXIgbmV4dFN0YXRlID0ge307XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgZmluYWxSZWR1Y2VyS2V5cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfa2V5ID0gZmluYWxSZWR1Y2VyS2V5c1tfaV07XG4gICAgICB2YXIgcmVkdWNlciA9IGZpbmFsUmVkdWNlcnNbX2tleV07XG4gICAgICB2YXIgcHJldmlvdXNTdGF0ZUZvcktleSA9IHN0YXRlW19rZXldO1xuICAgICAgdmFyIG5leHRTdGF0ZUZvcktleSA9IHJlZHVjZXIocHJldmlvdXNTdGF0ZUZvcktleSwgYWN0aW9uKTtcblxuICAgICAgaWYgKHR5cGVvZiBuZXh0U3RhdGVGb3JLZXkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHZhciBlcnJvck1lc3NhZ2UgPSBnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZShfa2V5LCBhY3Rpb24pO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JNZXNzYWdlKTtcbiAgICAgIH1cblxuICAgICAgbmV4dFN0YXRlW19rZXldID0gbmV4dFN0YXRlRm9yS2V5O1xuICAgICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgbmV4dFN0YXRlRm9yS2V5ICE9PSBwcmV2aW91c1N0YXRlRm9yS2V5O1xuICAgIH1cblxuICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhzdGF0ZSkubGVuZ3RoO1xuICAgIHJldHVybiBoYXNDaGFuZ2VkID8gbmV4dFN0YXRlIDogc3RhdGU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoKGFjdGlvbkNyZWF0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH07XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvbiBjcmVhdG9ycywgaW50byBhbiBvYmplY3Qgd2l0aCB0aGVcbiAqIHNhbWUga2V5cywgYnV0IHdpdGggZXZlcnkgZnVuY3Rpb24gd3JhcHBlZCBpbnRvIGEgYGRpc3BhdGNoYCBjYWxsIHNvIHRoZXlcbiAqIG1heSBiZSBpbnZva2VkIGRpcmVjdGx5LiBUaGlzIGlzIGp1c3QgYSBjb252ZW5pZW5jZSBtZXRob2QsIGFzIHlvdSBjYW4gY2FsbFxuICogYHN0b3JlLmRpc3BhdGNoKE15QWN0aW9uQ3JlYXRvcnMuZG9Tb21ldGhpbmcoKSlgIHlvdXJzZWxmIGp1c3QgZmluZS5cbiAqXG4gKiBGb3IgY29udmVuaWVuY2UsIHlvdSBjYW4gYWxzbyBwYXNzIGFuIGFjdGlvbiBjcmVhdG9yIGFzIHRoZSBmaXJzdCBhcmd1bWVudCxcbiAqIGFuZCBnZXQgYSBkaXNwYXRjaCB3cmFwcGVkIGZ1bmN0aW9uIGluIHJldHVybi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gYWN0aW9uQ3JlYXRvcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uXG4gKiBjcmVhdG9yIGZ1bmN0aW9ucy4gT25lIGhhbmR5IHdheSB0byBvYnRhaW4gaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXNgXG4gKiBzeW50YXguIFlvdSBtYXkgYWxzbyBwYXNzIGEgc2luZ2xlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGRpc3BhdGNoIFRoZSBgZGlzcGF0Y2hgIGZ1bmN0aW9uIGF2YWlsYWJsZSBvbiB5b3VyIFJlZHV4XG4gKiBzdG9yZS5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb258T2JqZWN0fSBUaGUgb2JqZWN0IG1pbWlja2luZyB0aGUgb3JpZ2luYWwgb2JqZWN0LCBidXQgd2l0aFxuICogZXZlcnkgYWN0aW9uIGNyZWF0b3Igd3JhcHBlZCBpbnRvIHRoZSBgZGlzcGF0Y2hgIGNhbGwuIElmIHlvdSBwYXNzZWQgYVxuICogZnVuY3Rpb24gYXMgYGFjdGlvbkNyZWF0b3JzYCwgdGhlIHJldHVybiB2YWx1ZSB3aWxsIGFsc28gYmUgYSBzaW5nbGVcbiAqIGZ1bmN0aW9uLlxuICovXG5cblxuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3JzKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCkge1xuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCk7XG4gIH1cblxuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzICE9PSAnb2JqZWN0JyB8fCBhY3Rpb25DcmVhdG9ycyA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcImJpbmRBY3Rpb25DcmVhdG9ycyBleHBlY3RlZCBhbiBvYmplY3Qgb3IgYSBmdW5jdGlvbiwgaW5zdGVhZCByZWNlaXZlZCBcIiArIChhY3Rpb25DcmVhdG9ycyA9PT0gbnVsbCA/ICdudWxsJyA6IHR5cGVvZiBhY3Rpb25DcmVhdG9ycykgKyBcIi4gXCIgKyBcIkRpZCB5b3Ugd3JpdGUgXFxcImltcG9ydCBBY3Rpb25DcmVhdG9ycyBmcm9tXFxcIiBpbnN0ZWFkIG9mIFxcXCJpbXBvcnQgKiBhcyBBY3Rpb25DcmVhdG9ycyBmcm9tXFxcIj9cIik7XG4gIH1cblxuICB2YXIgYm91bmRBY3Rpb25DcmVhdG9ycyA9IHt9O1xuXG4gIGZvciAodmFyIGtleSBpbiBhY3Rpb25DcmVhdG9ycykge1xuICAgIHZhciBhY3Rpb25DcmVhdG9yID0gYWN0aW9uQ3JlYXRvcnNba2V5XTtcblxuICAgIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYm91bmRBY3Rpb25DcmVhdG9yc1trZXldID0gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBib3VuZEFjdGlvbkNyZWF0b3JzO1xufVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIGtleXMucHVzaC5hcHBseShrZXlzLCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCkpO1xuICB9XG5cbiAgaWYgKGVudW1lcmFibGVPbmx5KSBrZXlzID0ga2V5cy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlO1xuICB9KTtcbiAgcmV0dXJuIGtleXM7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQyKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuXG4gICAgaWYgKGkgJSAyKSB7XG4gICAgICBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbi8qKlxuICogQ29tcG9zZXMgc2luZ2xlLWFyZ3VtZW50IGZ1bmN0aW9ucyBmcm9tIHJpZ2h0IHRvIGxlZnQuIFRoZSByaWdodG1vc3RcbiAqIGZ1bmN0aW9uIGNhbiB0YWtlIG11bHRpcGxlIGFyZ3VtZW50cyBhcyBpdCBwcm92aWRlcyB0aGUgc2lnbmF0dXJlIGZvclxuICogdGhlIHJlc3VsdGluZyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gZnVuY3MgVGhlIGZ1bmN0aW9ucyB0byBjb21wb3NlLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIG9idGFpbmVkIGJ5IGNvbXBvc2luZyB0aGUgYXJndW1lbnQgZnVuY3Rpb25zXG4gKiBmcm9tIHJpZ2h0IHRvIGxlZnQuIEZvciBleGFtcGxlLCBjb21wb3NlKGYsIGcsIGgpIGlzIGlkZW50aWNhbCB0byBkb2luZ1xuICogKC4uLmFyZ3MpID0+IGYoZyhoKC4uLmFyZ3MpKSkuXG4gKi9cbmZ1bmN0aW9uIGNvbXBvc2UoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBmdW5jcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmdW5jc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgICAgcmV0dXJuIGFyZztcbiAgICB9O1xuICB9XG5cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBmdW5jc1swXTtcbiAgfVxuXG4gIHJldHVybiBmdW5jcy5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGEoYi5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cykpO1xuICAgIH07XG4gIH0pO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBzdG9yZSBlbmhhbmNlciB0aGF0IGFwcGxpZXMgbWlkZGxld2FyZSB0byB0aGUgZGlzcGF0Y2ggbWV0aG9kXG4gKiBvZiB0aGUgUmVkdXggc3RvcmUuIFRoaXMgaXMgaGFuZHkgZm9yIGEgdmFyaWV0eSBvZiB0YXNrcywgc3VjaCBhcyBleHByZXNzaW5nXG4gKiBhc3luY2hyb25vdXMgYWN0aW9ucyBpbiBhIGNvbmNpc2UgbWFubmVyLCBvciBsb2dnaW5nIGV2ZXJ5IGFjdGlvbiBwYXlsb2FkLlxuICpcbiAqIFNlZSBgcmVkdXgtdGh1bmtgIHBhY2thZ2UgYXMgYW4gZXhhbXBsZSBvZiB0aGUgUmVkdXggbWlkZGxld2FyZS5cbiAqXG4gKiBCZWNhdXNlIG1pZGRsZXdhcmUgaXMgcG90ZW50aWFsbHkgYXN5bmNocm9ub3VzLCB0aGlzIHNob3VsZCBiZSB0aGUgZmlyc3RcbiAqIHN0b3JlIGVuaGFuY2VyIGluIHRoZSBjb21wb3NpdGlvbiBjaGFpbi5cbiAqXG4gKiBOb3RlIHRoYXQgZWFjaCBtaWRkbGV3YXJlIHdpbGwgYmUgZ2l2ZW4gdGhlIGBkaXNwYXRjaGAgYW5kIGBnZXRTdGF0ZWAgZnVuY3Rpb25zXG4gKiBhcyBuYW1lZCBhcmd1bWVudHMuXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gbWlkZGxld2FyZXMgVGhlIG1pZGRsZXdhcmUgY2hhaW4gdG8gYmUgYXBwbGllZC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBzdG9yZSBlbmhhbmNlciBhcHBseWluZyB0aGUgbWlkZGxld2FyZS5cbiAqL1xuXG5mdW5jdGlvbiBhcHBseU1pZGRsZXdhcmUoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBtaWRkbGV3YXJlcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBtaWRkbGV3YXJlc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoY3JlYXRlU3RvcmUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHN0b3JlID0gY3JlYXRlU3RvcmUuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuXG4gICAgICB2YXIgX2Rpc3BhdGNoID0gZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRGlzcGF0Y2hpbmcgd2hpbGUgY29uc3RydWN0aW5nIHlvdXIgbWlkZGxld2FyZSBpcyBub3QgYWxsb3dlZC4gJyArICdPdGhlciBtaWRkbGV3YXJlIHdvdWxkIG5vdCBiZSBhcHBsaWVkIHRvIHRoaXMgZGlzcGF0Y2guJyk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgbWlkZGxld2FyZUFQSSA9IHtcbiAgICAgICAgZ2V0U3RhdGU6IHN0b3JlLmdldFN0YXRlLFxuICAgICAgICBkaXNwYXRjaDogZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gICAgICAgICAgcmV0dXJuIF9kaXNwYXRjaC5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB2YXIgY2hhaW4gPSBtaWRkbGV3YXJlcy5tYXAoZnVuY3Rpb24gKG1pZGRsZXdhcmUpIHtcbiAgICAgICAgcmV0dXJuIG1pZGRsZXdhcmUobWlkZGxld2FyZUFQSSk7XG4gICAgICB9KTtcbiAgICAgIF9kaXNwYXRjaCA9IGNvbXBvc2UuYXBwbHkodm9pZCAwLCBjaGFpbikoc3RvcmUuZGlzcGF0Y2gpO1xuICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQyKHt9LCBzdG9yZSwge1xuICAgICAgICBkaXNwYXRjaDogX2Rpc3BhdGNoXG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xufVxuXG4vKlxuICogVGhpcyBpcyBhIGR1bW15IGZ1bmN0aW9uIHRvIGNoZWNrIGlmIHRoZSBmdW5jdGlvbiBuYW1lIGhhcyBiZWVuIGFsdGVyZWQgYnkgbWluaWZpY2F0aW9uLlxuICogSWYgdGhlIGZ1bmN0aW9uIGhhcyBiZWVuIG1pbmlmaWVkIGFuZCBOT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLCB3YXJuIHRoZSB1c2VyLlxuICovXG5cbmZ1bmN0aW9uIGlzQ3J1c2hlZCgpIHt9XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiBpc0NydXNoZWQubmFtZSA9PT0gJ3N0cmluZycgJiYgaXNDcnVzaGVkLm5hbWUgIT09ICdpc0NydXNoZWQnKSB7XG4gIHdhcm5pbmcoJ1lvdSBhcmUgY3VycmVudGx5IHVzaW5nIG1pbmlmaWVkIGNvZGUgb3V0c2lkZSBvZiBOT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIuICcgKyAnVGhpcyBtZWFucyB0aGF0IHlvdSBhcmUgcnVubmluZyBhIHNsb3dlciBkZXZlbG9wbWVudCBidWlsZCBvZiBSZWR1eC4gJyArICdZb3UgY2FuIHVzZSBsb29zZS1lbnZpZnkgKGh0dHBzOi8vZ2l0aHViLmNvbS96ZXJ0b3NoL2xvb3NlLWVudmlmeSkgZm9yIGJyb3dzZXJpZnkgJyArICdvciBzZXR0aW5nIG1vZGUgdG8gcHJvZHVjdGlvbiBpbiB3ZWJwYWNrIChodHRwczovL3dlYnBhY2suanMub3JnL2NvbmNlcHRzL21vZGUvKSAnICsgJ3RvIGVuc3VyZSB5b3UgaGF2ZSB0aGUgY29ycmVjdCBjb2RlIGZvciB5b3VyIHByb2R1Y3Rpb24gYnVpbGQuJyk7XG59XG5cbmV4cG9ydCB7IEFjdGlvblR5cGVzIGFzIF9fRE9fTk9UX1VTRV9fQWN0aW9uVHlwZXMsIGFwcGx5TWlkZGxld2FyZSwgYmluZEFjdGlvbkNyZWF0b3JzLCBjb21iaW5lUmVkdWNlcnMsIGNvbXBvc2UsIGNyZWF0ZVN0b3JlIH07XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qIGdsb2JhbCB3aW5kb3cgKi9cbmltcG9ydCBwb255ZmlsbCBmcm9tICcuL3BvbnlmaWxsLmpzJztcblxudmFyIHJvb3Q7XG5cbmlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHNlbGY7XG59IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSB3aW5kb3c7XG59IGVsc2UgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBnbG9iYWw7XG59IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBtb2R1bGU7XG59IGVsc2Uge1xuICByb290ID0gRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbn1cblxudmFyIHJlc3VsdCA9IHBvbnlmaWxsKHJvb3QpO1xuZXhwb3J0IGRlZmF1bHQgcmVzdWx0O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgY29udGV4dFR5cGU6IHRydWUsXG4gIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgbWl4aW5zOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgS05PV05fU1RBVElDUyA9IHtcbiAgbmFtZTogdHJ1ZSxcbiAgbGVuZ3RoOiB0cnVlLFxuICBwcm90b3R5cGU6IHRydWUsXG4gIGNhbGxlcjogdHJ1ZSxcbiAgY2FsbGVlOiB0cnVlLFxuICBhcmd1bWVudHM6IHRydWUsXG4gIGFyaXR5OiB0cnVlXG59O1xudmFyIEZPUldBUkRfUkVGX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIHJlbmRlcjogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlXG59O1xudmFyIE1FTU9fU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgY29tcGFyZTogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIFRZUEVfU1RBVElDUyA9IHt9O1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuRm9yd2FyZFJlZl0gPSBGT1JXQVJEX1JFRl9TVEFUSUNTO1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuTWVtb10gPSBNRU1PX1NUQVRJQ1M7XG5cbmZ1bmN0aW9uIGdldFN0YXRpY3MoY29tcG9uZW50KSB7XG4gIC8vIFJlYWN0IHYxNi4xMSBhbmQgYmVsb3dcbiAgaWYgKHJlYWN0SXMuaXNNZW1vKGNvbXBvbmVudCkpIHtcbiAgICByZXR1cm4gTUVNT19TVEFUSUNTO1xuICB9IC8vIFJlYWN0IHYxNi4xMiBhbmQgYWJvdmVcblxuXG4gIHJldHVybiBUWVBFX1NUQVRJQ1NbY29tcG9uZW50WyckJHR5cGVvZiddXSB8fCBSRUFDVF9TVEFUSUNTO1xufVxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0U3RhdGljcyA9IGdldFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50KTtcbiAgICB2YXIgc291cmNlU3RhdGljcyA9IGdldFN0YXRpY3Moc291cmNlQ29tcG9uZW50KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG5cbiAgICAgIGlmICghS05PV05fU1RBVElDU1trZXldICYmICEoYmxhY2tsaXN0ICYmIGJsYWNrbGlzdFtrZXldKSAmJiAhKHNvdXJjZVN0YXRpY3MgJiYgc291cmNlU3RhdGljc1trZXldKSAmJiAhKHRhcmdldFN0YXRpY3MgJiYgdGFyZ2V0U3RhdGljc1trZXldKSkge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaG9pc3ROb25SZWFjdFN0YXRpY3M7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBSZWFjdERPTSBmcm9tIFwicmVhY3QtZG9tXCI7XHJcbmltcG9ydCB7IEV4dGVuc2lvblN0YXRlLCBzZXRFeHRlbnNpb25TdGF0ZSB9IGZyb20gXCIuLi8uLi9jb21tb24vZXh0ZW5zaW9uU3RhdGVcIjtcclxuaW1wb3J0IHsgY3JlYXRlU3RvcmUsIFN0b3JlIH0gZnJvbSBcInJlZHV4XCI7XHJcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XHJcbmltcG9ydCB7IHJlZHVjZXIgfSBmcm9tIFwiLi9zdG9yZS9yZWR1Y2VyXCI7XHJcbmltcG9ydCB7IFZpZXdlckFjdGlvbiB9IGZyb20gXCIuL3N0b3JlL2FjdGlvbnNcIjtcclxuaW1wb3J0IHsgVmlld2VyU3RhdGUgfSBmcm9tIFwiLi9zdG9yZS9zdGF0ZVwiO1xyXG5pbXBvcnQgeyBWaWV3ZXIgfSBmcm9tIFwiLi9jb21wb25lbnRzL1ZpZXdlclwiO1xyXG5pbXBvcnQgeyBkZWJvdW5jZSB9IGZyb20gXCIuL3V0aWxzL2Z1bmN0aW9uXCI7XHJcbmltcG9ydCB7IHNldEF0dHJpYnV0ZUJ1ZmZlcnMsIHNldFRleHR1cmVzLCBzZXRVbmlmb3JtcyB9IGZyb20gXCIuL3V0aWxzL3dlYmdsL3N0b3JlV2F0Y2hlclwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IHN0b3JlOiBTdG9yZTxWaWV3ZXJTdGF0ZSwgVmlld2VyQWN0aW9uPiA9IGNyZWF0ZVN0b3JlKFxyXG4gIChzdGF0ZTogVmlld2VyU3RhdGUsIGFjdGlvbjogVmlld2VyQWN0aW9uKSA9PiB7XHJcbiAgICAvL2NvbnNvbGUubG9nKFwic3RhdGUgYmVmb3JlXCIsIHN0YXRlKTtcclxuICAgIC8vY29uc29sZS5sb2coXCJhY3Rpb25cIiwgYWN0aW9uKTtcclxuICAgIGNvbnN0IG5ld0xvY2FsID0gcmVkdWNlcihzdGF0ZSwgYWN0aW9uKTtcclxuICAgIC8vY29uc29sZS5sb2coXCJzdGF0ZSBhZnRlclwiLCBuZXdMb2NhbCk7XHJcbiAgICByZXR1cm4gbmV3TG9jYWw7XHJcbiAgfVxyXG4pO1xyXG5cclxuY29uc3Qgc3RvcmVFeHRlbnNpb25TdGF0ZSA9IGRlYm91bmNlKChleHRlbnNpb25TdGF0ZTogRXh0ZW5zaW9uU3RhdGUpID0+IHtcclxuICBzZXRFeHRlbnNpb25TdGF0ZShleHRlbnNpb25TdGF0ZSk7XHJcbn0sIDUwMCk7XHJcblxyXG5zdG9yZS5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gIGNvbnN0IGN1cnJlbnRTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XHJcbiAgY29uc3QgeyBjb3VudGVyLCAuLi5leHRlbnNpb25TdGF0ZSB9ID0gY3VycmVudFN0YXRlO1xyXG4gIHN0b3JlRXh0ZW5zaW9uU3RhdGUoZXh0ZW5zaW9uU3RhdGUpO1xyXG4gIHNldEF0dHJpYnV0ZUJ1ZmZlcnMoY3VycmVudFN0YXRlLmF0dHJpYnV0ZUJ1ZmZlclZhbHVlcyk7XHJcbiAgc2V0VW5pZm9ybXMoY3VycmVudFN0YXRlLnVuaWZvcm1WYWx1ZXMpO1xyXG4gIHNldFRleHR1cmVzKGN1cnJlbnRTdGF0ZS50ZXh0dXJlVmFsdWVzKTtcclxufSk7XHJcblxyXG5SZWFjdERPTS5yZW5kZXIoXHJcbiAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XHJcbiAgICA8Vmlld2VyIC8+XHJcbiAgPC9Qcm92aWRlcj4sXHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ2aWV3ZXJcIilcclxuKTtcclxuXHJcbi8vIGNvbnN0IGNyZWF0ZVZpZXdlciA9IGFzeW5jICgpID0+IHtcclxuLy8gICBjb25zdCBpbmRleEJ1ZmZlckluZm8gPSBuZXcgSW5kZXhCdWZmZXJJbmZvKHdlYkdMQ29udHJvbGxlci5jb250ZXh0KTtcclxuLy8gICBjb25zdCBpbmRleEJ1ZmZlckJpbmRpbmdWYWx1ZSA9IG5ldyBPYnNlcnZhYmxlPG51bWJlcltdPihbXSk7XHJcblxyXG4vLyAgIGNvbnN0IG9uTWVzaENoYW5nZWQgPSAoaWQ6IHN0cmluZykgPT4ge1xyXG5cclxuLy8gICAgIGluZGV4QnVmZmVyQmluZGluZ1ZhbHVlLnNldFZhbHVlKGluZGljZXMpO1xyXG4vLyAgIH07XHJcblxyXG4vLyAgIGNvbnN0IHtcclxuLy8gICAgIGVsZW1lbnQ6IGluZGV4QnVmZmVyRWxlbWVudCxcclxuLy8gICB9ID0gY3JlYXRlSW5kZXhCdWZmZXJDb21wb25lbnQoaW5kZXhCdWZmZXJCaW5kaW5nVmFsdWUsIG5ld1ZhbHVlID0+XHJcbi8vICAgICBpbmRleEJ1ZmZlckluZm8uc2V0VmFsdWUobmV3VmFsdWUpXHJcbi8vICAgKTtcclxuLy8gICBjb25zdCBpbmRleEJ1ZmZlckNvbXBvbmVudCA9IHdpdGhMYWJlbChpbmRleEJ1ZmZlckVsZW1lbnQsIFwiSW5kaWNlc1wiKTtcclxuIiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsImltcG9ydCB7IENhbWVyYVBvc2l0aW9uIH0gZnJvbSBcIi4vLi4vdmlld2VyL3NyYy91dGlscy9jYW1lcmFNYW5pcHVsYXRvclwiO1xyXG5pbXBvcnQgeyBEcmF3TW9kZSB9IGZyb20gXCIuLy4uL3ZpZXdlci9zcmMvdXRpbHMvd2ViZ2wvaW5kZXhcIjtcclxuaW1wb3J0IHsgdnNjb2RlQXBpIH0gZnJvbSBcIi4vY29tbXVuaWNhdGlvbi92c2NvZGVBcGlcIjtcclxuXHJcbmV4cG9ydCB0eXBlIEV4dGVuc2lvblN0YXRlID0ge1xyXG4gIHZlcnRleEZpbGVQYXRoOiBzdHJpbmcgfCBudWxsO1xyXG4gIGZyYWdtZW50RmlsZVBhdGg6IHN0cmluZyB8IG51bGw7XHJcbiAgdW5pZm9ybVZhbHVlczoge1xyXG4gICAgW2tleTogc3RyaW5nXToge1xyXG4gICAgICB0eXBlOiBudW1iZXI7XHJcbiAgICAgIG9wdGlvbklkOiBzdHJpbmc7XHJcbiAgICAgIHZhbHVlOiBhbnk7XHJcbiAgICB9O1xyXG4gIH07XHJcbiAgYXR0cmlidXRlQnVmZmVyVmFsdWVzOiB7XHJcbiAgICBba2V5OiBzdHJpbmddOiB7IHR5cGU6IG51bWJlcjsgb3B0aW9uSWQ6IHN0cmluZzsgdmFsdWU6IHN0cmluZzsgaXNWYWxpZDogYm9vbGVhbiB9O1xyXG4gIH07XHJcbiAgdGV4dHVyZVZhbHVlczogeyBba2V5OiBzdHJpbmddOiB7IG9wdGlvbklkOiBzdHJpbmc7IHZhbHVlOiBhbnkgfSB9O1xyXG4gIGNhbWVyYVBvc2l0aW9uOiBDYW1lcmFQb3NpdGlvbjtcclxuICB2aWV3ZXJTaXplOiB7IHdpZHRoOiBudW1iZXI7IGhlaWdodDogbnVtYmVyIH07XHJcbiAgZHJhd01vZGU6IERyYXdNb2RlO1xyXG4gIG1lc2hJZDogc3RyaW5nO1xyXG59O1xyXG5cclxuY29uc3QgZGVmYXVsdFN0YXRlOiBFeHRlbnNpb25TdGF0ZSA9IHtcclxuICB2ZXJ0ZXhGaWxlUGF0aDogbnVsbCxcclxuICBmcmFnbWVudEZpbGVQYXRoOiBudWxsLFxyXG4gIHVuaWZvcm1WYWx1ZXM6IHt9LFxyXG4gIGF0dHJpYnV0ZUJ1ZmZlclZhbHVlczoge30sXHJcbiAgdGV4dHVyZVZhbHVlczoge30sXHJcbiAgY2FtZXJhUG9zaXRpb246IHsgbG9uZ2l0dWRlOiAxLCBsYXRpdHVkZTogMSwgcmFkaXVzOiAyIH0sXHJcbiAgdmlld2VyU2l6ZTogeyB3aWR0aDogMCwgaGVpZ2h0OiAwIH0sXHJcbiAgZHJhd01vZGU6IFwiZWxlbWVudHNcIixcclxuICBtZXNoSWQ6IFwiY3ViZVwiLFxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldEV4dGVuc2lvblN0YXRlID0gKCk6IEV4dGVuc2lvblN0YXRlID0+ICh7XHJcbiAgLi4uZGVmYXVsdFN0YXRlLFxyXG4gIC4uLnZzY29kZUFwaS5nZXRTdGF0ZSgpLFxyXG59KTtcclxuZXhwb3J0IGNvbnN0IHNldEV4dGVuc2lvblN0YXRlID0gKG5ld1N0YXRlOiBQYXJ0aWFsPEV4dGVuc2lvblN0YXRlPikgPT5cclxuICB2c2NvZGVBcGkuc2V0U3RhdGUobmV3U3RhdGUpO1xyXG4iLCJpbXBvcnQgeyBNZXNzYWdlUmVxdWVzdCB9IGZyb20gXCIuL21lc3NhZ2VzXCI7XHJcblxyXG5kZWNsYXJlIGNvbnN0IGFjcXVpcmVWc0NvZGVBcGk6ICgpID0+IHtcclxuICBnZXRTdGF0ZTogKCkgPT4gYW55O1xyXG4gIHNldFN0YXRlOiAoc3RhdGU6IGFueSkgPT4gdm9pZDtcclxuICBwb3N0TWVzc2FnZTogKG1lc3NhZ2U6IE1lc3NhZ2VSZXF1ZXN0KSA9PiB2b2lkO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHZzY29kZUFwaSA9IGFjcXVpcmVWc0NvZGVBcGkoKTtcclxuIiwiaW1wb3J0IHsgbWVzaGVzLCBNZXNoSW5mbyB9IGZyb20gXCIuLy4uLy4uL21lc2hlc1wiO1xyXG5pbXBvcnQgeyBBdHRyaWJ1dGVCdWZmZXJUeXBlIH0gZnJvbSBcIi4vLi4vLi4vdXRpbHMvd2ViZ2wvYXR0cmlidXRlQnVmZmVyXCI7XHJcblxyXG5jb25zdCBnZXRNZXNoQmluZGluZyA9IChtZXNoSWQ6IHN0cmluZywgbmFtZToga2V5b2YgTWVzaEluZm8pID0+XHJcbiAgSlNPTi5zdHJpbmdpZnkoKG1lc2hlcy5nZXQobWVzaElkKSBhcyBhbnkpW25hbWVdKTtcclxuXHJcbmV4cG9ydCBjb25zdCBhdHRyaWJ1dGVCdWZmZXJCaW5kaW5ncyA9IG5ldyBNYXA8XHJcbiAgc3RyaW5nLFxyXG4gIHsgZGlzcGxheTogc3RyaW5nOyB0eXBlOiBBdHRyaWJ1dGVCdWZmZXJUeXBlOyBnZXRWYWx1ZTogKGlkOiBzdHJpbmcpID0+IGFueSB9XHJcbj4oW1xyXG4gIFtcclxuICAgIFwicG9zaXRpb25zXCIsXHJcbiAgICB7XHJcbiAgICAgIHR5cGU6IEF0dHJpYnV0ZUJ1ZmZlclR5cGUuRkxPQVRfVkVDNCxcclxuICAgICAgZGlzcGxheTogXCJCaW5kaW5nIC0gTWVzaCBwb3NpdGlvbnNcIixcclxuICAgICAgZ2V0VmFsdWU6IGlkID0+IGdldE1lc2hCaW5kaW5nKGlkLCBcInBvc2l0aW9uc1wiKSxcclxuICAgIH0sXHJcbiAgXSxcclxuICBbXHJcbiAgICBcInRleHR1cmVDb29yZGluYXRlc1wiLFxyXG4gICAge1xyXG4gICAgICB0eXBlOiBBdHRyaWJ1dGVCdWZmZXJUeXBlLkZMT0FUX1ZFQzIsXHJcbiAgICAgIGRpc3BsYXk6IFwiQmluZGluZyAtIE1lc2ggdGV4dHVyZSBjb29yZHNcIixcclxuICAgICAgZ2V0VmFsdWU6IGlkID0+IGdldE1lc2hCaW5kaW5nKGlkLCBcInRleHR1cmVDb29yZGluYXRlc1wiKSxcclxuICAgIH0sXHJcbiAgXSxcclxuICBbXHJcbiAgICBcImNvbG9yc1wiLFxyXG4gICAge1xyXG4gICAgICB0eXBlOiBBdHRyaWJ1dGVCdWZmZXJUeXBlLkZMT0FUX1ZFQzQsXHJcbiAgICAgIGRpc3BsYXk6IFwiQmluZGluZyAtIE1lc2ggY29sb3JzXCIsXHJcbiAgICAgIGdldFZhbHVlOiBpZCA9PiBnZXRNZXNoQmluZGluZyhpZCwgXCJjb2xvcnNcIiksXHJcbiAgICB9LFxyXG4gIF0sXHJcbl0pO1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldEJpbmRpbmdPcHRpb25zID0gKHR5cGU6IEF0dHJpYnV0ZUJ1ZmZlclR5cGUpID0+XHJcbiAgQXJyYXkuZnJvbShhdHRyaWJ1dGVCdWZmZXJCaW5kaW5ncy5lbnRyaWVzKCkpXHJcbiAgICAuZmlsdGVyKChbXywgdmFsdWVdKSA9PiB2YWx1ZS50eXBlID09PSB0eXBlKVxyXG4gICAgLm1hcCgoW2tleSwgdmFsdWVdKSA9PiAoe1xyXG4gICAgICBpZDoga2V5LFxyXG4gICAgICBkaXNwbGF5OiB2YWx1ZS5kaXNwbGF5LFxyXG4gICAgfSkpO1xyXG4iLCJpbXBvcnQgeyBWZWN0b3IyQXJyYXksIFZlY3RvcjRBcnJheSB9IGZyb20gXCIuL3R5cGVzXCI7XHJcblxyXG5leHBvcnQgdHlwZSBNZXNoSW5mbyA9IHtcclxuICBkaXNwbGF5OiBzdHJpbmc7XHJcbiAgcG9zaXRpb25zOiBWZWN0b3I0QXJyYXlbXTtcclxuICBjb2xvcnM6IFZlY3RvcjRBcnJheVtdO1xyXG4gIHRleHR1cmVDb29yZGluYXRlczogVmVjdG9yMkFycmF5W107XHJcbiAgaW5kaWNlczogbnVtYmVyW107XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgcmVwZWF0NFRpbWVzID0gPFQ+KGFycmF5OiBUW10pID0+IHtcclxuICByZXR1cm4gW10uY29uY2F0KGFycmF5LCBhcnJheSwgYXJyYXksIGFycmF5KTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBtZXNoZXMgPSBuZXcgTWFwPHN0cmluZywgTWVzaEluZm8+KFtcclxuICBbXHJcbiAgICBcImN1YmVcIixcclxuICAgIHtcclxuICAgICAgZGlzcGxheTogXCJDdWJlXCIsXHJcbiAgICAgIHBvc2l0aW9uczogW1xyXG4gICAgICAgIC8vIEZyb250IGZhY2VcclxuICAgICAgICBbLTAuNSwgLTAuNSwgMC41LCAxXSxcclxuICAgICAgICBbMC41LCAtMC41LCAwLjUsIDFdLFxyXG4gICAgICAgIFswLjUsIDAuNSwgMC41LCAxXSxcclxuICAgICAgICBbLTAuNSwgMC41LCAwLjUsIDFdLFxyXG5cclxuICAgICAgICAvLyBCYWNrIGZhY2VcclxuICAgICAgICBbLTAuNSwgLTAuNSwgLTAuNSwgMV0sXHJcbiAgICAgICAgWy0wLjUsIDAuNSwgLTAuNSwgMV0sXHJcbiAgICAgICAgWzAuNSwgMC41LCAtMC41LCAxXSxcclxuICAgICAgICBbMC41LCAtMC41LCAtMC41LCAxXSxcclxuXHJcbiAgICAgICAgLy8gVG9wIGZhY2VcclxuICAgICAgICBbLTAuNSwgMC41LCAtMC41LCAxXSxcclxuICAgICAgICBbLTAuNSwgMC41LCAwLjUsIDFdLFxyXG4gICAgICAgIFswLjUsIDAuNSwgMC41LCAxXSxcclxuICAgICAgICBbMC41LCAwLjUsIC0wLjUsIDFdLFxyXG5cclxuICAgICAgICAvLyBCb3R0b20gZmFjZVxyXG4gICAgICAgIFstMC41LCAtMC41LCAtMC41LCAxXSxcclxuICAgICAgICBbMC41LCAtMC41LCAtMC41LCAxXSxcclxuICAgICAgICBbMC41LCAtMC41LCAwLjUsIDFdLFxyXG4gICAgICAgIFstMC41LCAtMC41LCAwLjUsIDFdLFxyXG5cclxuICAgICAgICAvLyBSaWdodCBmYWNlXHJcbiAgICAgICAgWzAuNSwgLTAuNSwgLTAuNSwgMV0sXHJcbiAgICAgICAgWzAuNSwgMC41LCAtMC41LCAxXSxcclxuICAgICAgICBbMC41LCAwLjUsIDAuNSwgMV0sXHJcbiAgICAgICAgWzAuNSwgLTAuNSwgMC41LCAxXSxcclxuXHJcbiAgICAgICAgLy8gTGVmdCBmYWNlXHJcbiAgICAgICAgWy0wLjUsIC0wLjUsIC0wLjUsIDFdLFxyXG4gICAgICAgIFstMC41LCAtMC41LCAwLjUsIDFdLFxyXG4gICAgICAgIFstMC41LCAwLjUsIDAuNSwgMV0sXHJcbiAgICAgICAgWy0wLjUsIDAuNSwgLTAuNSwgMV0sXHJcbiAgICAgIF0sXHJcbiAgICAgIGNvbG9yczogW1xyXG4gICAgICAgIC4uLnJlcGVhdDRUaW1lcyhbMS4wLCAxLjAsIDEuMCwgMS4wXSksIC8vIEZyb250IGZhY2U6IHdoaXRlXHJcbiAgICAgICAgLi4ucmVwZWF0NFRpbWVzKFsxLjAsIDAuMCwgMC4wLCAxLjBdKSwgLy8gQmFjayBmYWNlOiByZWRcclxuICAgICAgICAuLi5yZXBlYXQ0VGltZXMoWzAuMCwgMS4wLCAwLjAsIDEuMF0pLCAvLyBUb3AgZmFjZTogZ3JlZW5cclxuICAgICAgICAuLi5yZXBlYXQ0VGltZXMoWzAuMCwgMC4wLCAxLjAsIDEuMF0pLCAvLyBCb3R0b20gZmFjZTogYmx1ZVxyXG4gICAgICAgIC4uLnJlcGVhdDRUaW1lcyhbMS4wLCAxLjAsIDAuMCwgMS4wXSksIC8vIFJpZ2h0IGZhY2U6IHllbGxvd1xyXG4gICAgICAgIC4uLnJlcGVhdDRUaW1lcyhbMS4wLCAwLjAsIDEuMCwgMS4wXSksIC8vIExlZnQgZmFjZTogcHVycGxlXHJcbiAgICAgIF0sXHJcbiAgICAgIHRleHR1cmVDb29yZGluYXRlczogW1xyXG4gICAgICAgIC8vIEZyb250XHJcbiAgICAgICAgWzAuMCwgMC4wXSxcclxuICAgICAgICBbMS4wLCAwLjBdLFxyXG4gICAgICAgIFsxLjAsIDEuMF0sXHJcbiAgICAgICAgWzAuMCwgMS4wXSxcclxuICAgICAgICAvLyBCYWNrXHJcbiAgICAgICAgWzAuMCwgMC4wXSxcclxuICAgICAgICBbMS4wLCAwLjBdLFxyXG4gICAgICAgIFsxLjAsIDEuMF0sXHJcbiAgICAgICAgWzAuMCwgMS4wXSxcclxuICAgICAgICAvLyBUb3BcclxuICAgICAgICBbMC4wLCAwLjBdLFxyXG4gICAgICAgIFsxLjAsIDAuMF0sXHJcbiAgICAgICAgWzEuMCwgMS4wXSxcclxuICAgICAgICBbMC4wLCAxLjBdLFxyXG4gICAgICAgIC8vIEJvdHRvbVxyXG4gICAgICAgIFswLjAsIDAuMF0sXHJcbiAgICAgICAgWzEuMCwgMC4wXSxcclxuICAgICAgICBbMS4wLCAxLjBdLFxyXG4gICAgICAgIFswLjAsIDEuMF0sXHJcbiAgICAgICAgLy8gUmlnaHRcclxuICAgICAgICBbMC4wLCAwLjBdLFxyXG4gICAgICAgIFsxLjAsIDAuMF0sXHJcbiAgICAgICAgWzEuMCwgMS4wXSxcclxuICAgICAgICBbMC4wLCAxLjBdLFxyXG4gICAgICAgIC8vIExlZl10XHJcbiAgICAgICAgWzAuMCwgMC4wXSxcclxuICAgICAgICBbMS4wLCAwLjBdLFxyXG4gICAgICAgIFsxLjAsIDEuMF0sXHJcbiAgICAgICAgWzAuMCwgMS4wXSxcclxuICAgICAgXSxcclxuICAgICAgaW5kaWNlczogW1xyXG4gICAgICAgIDAsXHJcbiAgICAgICAgMSxcclxuICAgICAgICAyLFxyXG4gICAgICAgIDAsXHJcbiAgICAgICAgMixcclxuICAgICAgICAzLCAvLyBmcm9udFxyXG4gICAgICAgIDQsXHJcbiAgICAgICAgNSxcclxuICAgICAgICA2LFxyXG4gICAgICAgIDQsXHJcbiAgICAgICAgNixcclxuICAgICAgICA3LCAvLyBiYWNrXHJcbiAgICAgICAgOCxcclxuICAgICAgICA5LFxyXG4gICAgICAgIDEwLFxyXG4gICAgICAgIDgsXHJcbiAgICAgICAgMTAsXHJcbiAgICAgICAgMTEsIC8vIHRvcFxyXG4gICAgICAgIDEyLFxyXG4gICAgICAgIDEzLFxyXG4gICAgICAgIDE0LFxyXG4gICAgICAgIDEyLFxyXG4gICAgICAgIDE0LFxyXG4gICAgICAgIDE1LCAvLyBib3R0b21cclxuICAgICAgICAxNixcclxuICAgICAgICAxNyxcclxuICAgICAgICAxOCxcclxuICAgICAgICAxNixcclxuICAgICAgICAxOCxcclxuICAgICAgICAxOSwgLy8gcmlnaHRcclxuICAgICAgICAyMCxcclxuICAgICAgICAyMSxcclxuICAgICAgICAyMixcclxuICAgICAgICAyMCxcclxuICAgICAgICAyMixcclxuICAgICAgICAyMywgLy8gbGVmdFxyXG4gICAgICBdLFxyXG4gICAgfSxcclxuICBdLFxyXG4gIFtcclxuICAgIFwicGxhbmVcIixcclxuICAgIHtcclxuICAgICAgZGlzcGxheTogXCJQbGFuZVwiLFxyXG4gICAgICBwb3NpdGlvbnM6IFtcclxuICAgICAgICBbLTAuNSwgLTAuNSwgMCwgMV0sXHJcbiAgICAgICAgWzAuNSwgLTAuNSwgMCwgMV0sXHJcbiAgICAgICAgWzAuNSwgMC41LCAwLCAxXSxcclxuICAgICAgICBbLTAuNSwgMC41LCAwLCAxXSxcclxuICAgICAgXSxcclxuICAgICAgY29sb3JzOiByZXBlYXQ0VGltZXMoWzEuMCwgMS4wLCAxLjAsIDEuMF0pLFxyXG4gICAgICB0ZXh0dXJlQ29vcmRpbmF0ZXM6IFtcclxuICAgICAgICBbMC4wLCAwLjBdLFxyXG4gICAgICAgIFsxLjAsIDAuMF0sXHJcbiAgICAgICAgWzEuMCwgMS4wXSxcclxuICAgICAgICBbMC4wLCAxLjBdLFxyXG4gICAgICBdLFxyXG4gICAgICBpbmRpY2VzOiBbMCwgMSwgMiwgMCwgMiwgM10sXHJcbiAgICB9LFxyXG4gIF0sXHJcbl0pO1xyXG4iLCJleHBvcnQgY2xhc3MgQ29tcG9zaXRlS2V5TWFwPFRLZXksIFRWYWx1ZT4ge1xyXG4gIHByaXZhdGUgbWFwID0gbmV3IE1hcDxzdHJpbmcsIFRWYWx1ZT4oKTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBrZXlTZWxlY3RvcjogKGNvbXBvc2l0ZUtleTogVEtleSkgPT4gc3RyaW5nKSB7fVxyXG5cclxuICBnZXQoa2V5OiBUS2V5KSB7XHJcbiAgICByZXR1cm4gdGhpcy5tYXAuZ2V0KHRoaXMua2V5U2VsZWN0b3Ioa2V5KSk7XHJcbiAgfVxyXG5cclxuICBzZXQoa2V5OiBUS2V5LCB2YWx1ZTogVFZhbHVlKSB7XHJcbiAgICB0aGlzLm1hcC5zZXQodGhpcy5rZXlTZWxlY3RvcihrZXkpLCB2YWx1ZSk7XHJcbiAgfVxyXG5cclxuICBoYXMoa2V5OiBUS2V5KSB7XHJcbiAgICByZXR1cm4gdGhpcy5tYXAuaGFzKHRoaXMua2V5U2VsZWN0b3Ioa2V5KSk7XHJcbiAgfVxyXG5cclxuICBlbnRyaWVzU3RyS2V5KCkge1xyXG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5tYXAuZW50cmllcygpKTtcclxuICB9XHJcblxyXG4gIGRlbGV0ZVN0cktleShrZXk6IHN0cmluZykge1xyXG4gICAgdGhpcy5tYXAuZGVsZXRlKGtleSk7XHJcbiAgfVxyXG5cclxuICBkZWxldGUoa2V5OiBUS2V5KSB7XHJcbiAgICB0aGlzLm1hcC5kZWxldGUodGhpcy5rZXlTZWxlY3RvcihrZXkpKTtcclxuICB9XHJcblxyXG4gIGNsZWFyKCkge1xyXG4gICAgdGhpcy5tYXAuY2xlYXIoKTtcclxuICB9XHJcbn1cclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcclxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxufTtcclxudmFyIF9fc3ByZWFkQXJyYXlzID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5cykgfHwgZnVuY3Rpb24gKCkge1xyXG4gICAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XHJcbiAgICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXHJcbiAgICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXHJcbiAgICAgICAgICAgIHJba10gPSBhW2pdO1xyXG4gICAgcmV0dXJuIHI7XHJcbn07XHJcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy51c2VVbmlvblN0YXRlID0gdm9pZCAwO1xyXG52YXIgcmVhY3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xyXG52YXIgaGVscGVyc18xID0gcmVxdWlyZShcIi4uL0NvbW1vbi9oZWxwZXJzXCIpO1xyXG5leHBvcnRzLnVzZVVuaW9uU3RhdGUgPSBmdW5jdGlvbiAoaW5pdGlhbEludGVybmFsU3RhdGUsIGV4dGVybmFsU3RhdGUsIHJlZHVjZXIsIG9uQ2hhbmdlKSB7XHJcbiAgICB2YXIgX2EgPSByZWFjdF8xLmRlZmF1bHQudXNlU3RhdGUoaGVscGVyc18xLm9taXRLZXlzKGluaXRpYWxJbnRlcm5hbFN0YXRlLCBPYmplY3Qua2V5cyhleHRlcm5hbFN0YXRlKSkpLCBpbnRlcm5hbFN0YXRlID0gX2FbMF0sIHNldEludGVybmFsU3RhdGUgPSBfYVsxXTtcclxuICAgIC8vY2Fubm90IHVzZSB1cGRhdGVyIGZ1bmN0aW9uIGluIHNldFN0YXRlIHNvIHdlIGhhdmUgdG8gcHJlc2VydmUgY3VycmVudCBzdGF0ZVxyXG4gICAgdmFyIGludGVybmFsU3RhdGVSZWYgPSByZWFjdF8xLmRlZmF1bHQudXNlUmVmKGludGVybmFsU3RhdGUpO1xyXG4gICAgdmFyIGRpc3BhdGNoID0gcmVhY3RfMS5kZWZhdWx0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChhY3Rpb25zKSB7XHJcbiAgICAgICAgdmFyIG9sZFN0YXRlID0gaGVscGVyc18xLm92ZXJyaWRlRGVmaW5lZFByb3BzT25seShpbnRlcm5hbFN0YXRlUmVmLmN1cnJlbnQsIGV4dGVybmFsU3RhdGUpO1xyXG4gICAgICAgIHZhciBuZXdTdGF0ZSA9IGFjdGlvbnMucmVkdWNlKGZ1bmN0aW9uIChzdGF0ZSwgYWN0aW9uKSB7IHJldHVybiByZWR1Y2VyKHN0YXRlLCBhY3Rpb24pOyB9LCBfX2Fzc2lnbih7fSwgb2xkU3RhdGUpKTtcclxuICAgICAgICB2YXIgY2hhbmdlcyA9IGhlbHBlcnNfMS5vdmVycmlkZGVuUHJvcHMob2xkU3RhdGUsIG5ld1N0YXRlKTtcclxuICAgICAgICB2YXIgbmV3SW50ZXJuYWxTdGF0ZSA9IGhlbHBlcnNfMS5vbWl0S2V5cyhuZXdTdGF0ZSwgT2JqZWN0LmtleXMoZXh0ZXJuYWxTdGF0ZSkpO1xyXG4gICAgICAgIGlmICghaGVscGVyc18xLmFyZVNoYWxsb3dFcXVhbChpbnRlcm5hbFN0YXRlUmVmLmN1cnJlbnQsIG5ld0ludGVybmFsU3RhdGUpKSB7XHJcbiAgICAgICAgICAgIGludGVybmFsU3RhdGVSZWYuY3VycmVudCA9IG5ld0ludGVybmFsU3RhdGU7XHJcbiAgICAgICAgICAgIHNldEludGVybmFsU3RhdGUoaW50ZXJuYWxTdGF0ZVJlZi5jdXJyZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgb25DaGFuZ2UgPT09IG51bGwgfHwgb25DaGFuZ2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uQ2hhbmdlKGNoYW5nZXMpO1xyXG4gICAgfSwgX19zcHJlYWRBcnJheXMoT2JqZWN0LnZhbHVlcyhleHRlcm5hbFN0YXRlKSwgW3JlZHVjZXIsIG9uQ2hhbmdlXSkpO1xyXG4gICAgcmV0dXJuIFtpbnRlcm5hbFN0YXRlLCBkaXNwYXRjaF07XHJcbn07XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXHJcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5yZWR1Y2VyID0gdm9pZCAwO1xyXG52YXIgaGVscGVyc18xID0gcmVxdWlyZShcIi4vaGVscGVyc1wiKTtcclxudmFyIHR5cGVOYXJyb3dpbmdfMSA9IHJlcXVpcmUoXCIuL3R5cGVOYXJyb3dpbmdcIik7XHJcbnZhciBtb3ZlSW5kZXggPSBmdW5jdGlvbiAoY3VycmVudCwgb2Zmc2V0LCBtYXgpIHtcclxuICAgIHJldHVybiBtYXggPiAwID8gaGVscGVyc18xLmNsYW1wKGN1cnJlbnQgKyBvZmZzZXQsIDAsIG1heCAtIDEpIDogbnVsbDtcclxufTtcclxuZXhwb3J0cy5yZWR1Y2VyID0gZnVuY3Rpb24gKHN0YXRlLCBpdGVtQ291bnQsIGFjdGlvbikge1xyXG4gICAgaWYgKHR5cGVvZiBhY3Rpb24gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICBzd2l0Y2ggKGFjdGlvbikge1xyXG4gICAgICAgICAgICBjYXNlIFwiQ2xvc2VMaXN0XCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIHN0YXRlKSwgeyBpc09wZW46IGZhbHNlIH0pO1xyXG4gICAgICAgICAgICBjYXNlIFwiT3Blbkxpc3RcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgc3RhdGUpLCB7IGlzT3BlbjogdHJ1ZSB9KTtcclxuICAgICAgICAgICAgY2FzZSBcIkhpZ2hsaWdodEZpcnN0SW5kZXhcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgc3RhdGUpLCB7IGhpZ2hsaWdodGVkSW5kZXg6IGl0ZW1Db3VudCA+IDAgPyAwIDogbnVsbCB9KTtcclxuICAgICAgICAgICAgY2FzZSBcIkhpZ2hsaWdodFByZXZpb3VzSW5kZXhcIjoge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCBzdGF0ZSksIHsgaGlnaGxpZ2h0ZWRJbmRleDogc3RhdGUuaGlnaGxpZ2h0ZWRJbmRleCAhPSBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gbW92ZUluZGV4KHN0YXRlLmhpZ2hsaWdodGVkSW5kZXgsIC0xLCBpdGVtQ291bnQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogMCB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIFwiSGlnaGxpZ2h0TmV4dEluZGV4XCI6IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgc3RhdGUpLCB7IGhpZ2hsaWdodGVkSW5kZXg6IHN0YXRlLmhpZ2hsaWdodGVkSW5kZXggIT0gbnVsbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IG1vdmVJbmRleChzdGF0ZS5oaWdobGlnaHRlZEluZGV4LCAxLCBpdGVtQ291bnQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogMCB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIFwiSGlnaGxpZ2h0TGFzdEluZGV4XCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIHN0YXRlKSwgeyBoaWdobGlnaHRlZEluZGV4OiBpdGVtQ291bnQgPiAwID8gaXRlbUNvdW50IC0gMSA6IG51bGwgfSk7XHJcbiAgICAgICAgICAgIGNhc2UgXCJTZWxlY3RIaWdobGlnaHRlZEluZGV4XCI6IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgc3RhdGUpLCB7IHNlbGVjdGVkSW5kZXhlczogc3RhdGUuaGlnaGxpZ2h0ZWRJbmRleCAhPSBudWxsICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLmhpZ2hsaWdodGVkSW5kZXggIT0gdW5kZWZpbmVkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gW3N0YXRlLmhpZ2hsaWdodGVkSW5kZXhdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogW10gfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBcIkNsZWFyU2VsZWN0aW9uXCI6IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgc3RhdGUpLCB7IHNlbGVjdGVkSW5kZXhlczogW10sIGhpZ2hsaWdodGVkSW5kZXg6IGl0ZW1Db3VudCA+IDAgPyAwIDogbnVsbCB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVOYXJyb3dpbmdfMS5hc3NlcnROZXZlcihhY3Rpb24pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBcIlNlbGVjdEluZGV4XCI6IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgc3RhdGUpLCB7IHNlbGVjdGVkSW5kZXhlczogW2FjdGlvbi5pbmRleF0sIGhpZ2hsaWdodGVkSW5kZXg6IGFjdGlvbi5pbmRleCB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIFwiVG9nZ2xlU2VsZWN0ZWRJbmRleFwiOiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIHN0YXRlKSwgeyBzZWxlY3RlZEluZGV4ZXM6IHN0YXRlLnNlbGVjdGVkSW5kZXhlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChpKSB7IHJldHVybiBpICE9PSBhY3Rpb24uaW5kZXg7IH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jb25jYXQoc3RhdGUuc2VsZWN0ZWRJbmRleGVzLmluY2x1ZGVzKGFjdGlvbi5pbmRleCkgPyBbXSA6IFthY3Rpb24uaW5kZXhdKSwgaGlnaGxpZ2h0ZWRJbmRleDogYWN0aW9uLmluZGV4IH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgXCJIaWdobGlnaHRJbmRleFwiOiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIHN0YXRlKSwgeyBoaWdobGlnaHRlZEluZGV4OiBhY3Rpb24uaW5kZXggPT09IG51bGxcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyBhY3Rpb24uaW5kZXhcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiBoZWxwZXJzXzEuY2xhbXAoYWN0aW9uLmluZGV4LCAwLCBpdGVtQ291bnQgLSAxKSB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVOYXJyb3dpbmdfMS5hc3NlcnROZXZlcihhY3Rpb24pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5oYXNQcm9wZXJ0eSA9IGV4cG9ydHMuYXNzZXJ0TmV2ZXIgPSB2b2lkIDA7XHJcbmV4cG9ydHMuYXNzZXJ0TmV2ZXIgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihcIlVuZXhwZWN0ZWQgb2JqZWN0OiBcIiArIHZhbHVlKTtcclxufTtcclxuZXhwb3J0cy5oYXNQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmosIHByb3ApIHtcclxuICAgIHJldHVybiBvYmouaGFzT3duUHJvcGVydHkocHJvcCk7XHJcbn07XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMudXNlRm9jdXNPdXRIYW5kbGVyID0gdm9pZCAwO1xyXG52YXIgcmVhY3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xyXG5leHBvcnRzLnVzZUZvY3VzT3V0SGFuZGxlciA9IGZ1bmN0aW9uIChlbGVtZW50UmVmLCBoYW5kbGVyKSB7XHJcbiAgICByZWFjdF8xLmRlZmF1bHQudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgZnVuY3Rpb24gZm9jdXNPdXRIYW5kbGVyKGUpIHtcclxuICAgICAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgICAgICBpZiAoISgoX2EgPSBlbGVtZW50UmVmLmN1cnJlbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jb250YWlucyhlLnJlbGF0ZWRUYXJnZXQpKSkge1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlcigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIChfYSA9IGVsZW1lbnRSZWYuY3VycmVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c291dFwiLCBmb2N1c091dEhhbmRsZXIpO1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBfYTtcclxuICAgICAgICAgICAgKF9hID0gZWxlbWVudFJlZi5jdXJyZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImZvY3Vzb3V0XCIsIGZvY3VzT3V0SGFuZGxlcik7XHJcbiAgICAgICAgfTtcclxuICAgIH0sIFtoYW5kbGVyXSk7XHJcbn07XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMudXNlUHJldmlvdXNWYWx1ZSA9IHZvaWQgMDtcclxudmFyIHJlYWN0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcclxuZXhwb3J0cy51c2VQcmV2aW91c1ZhbHVlID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICB2YXIgdmFsdWVSZWYgPSByZWFjdF8xLmRlZmF1bHQudXNlUmVmKCk7XHJcbiAgICByZWFjdF8xLmRlZmF1bHQudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YWx1ZVJlZi5jdXJyZW50ID0gdmFsdWU7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiB2YWx1ZVJlZi5jdXJyZW50O1xyXG59O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmNyZWF0ZUxpc3RLZXlib2FyZE5hdmlnYXRvciA9IHZvaWQgMDtcclxuZXhwb3J0cy5jcmVhdGVMaXN0S2V5Ym9hcmROYXZpZ2F0b3IgPSBmdW5jdGlvbiAoZGlzcGF0Y2gpIHsgcmV0dXJuIGZ1bmN0aW9uIChlKSB7XHJcbiAgICBzd2l0Y2ggKGUua2V5KSB7XHJcbiAgICAgICAgY2FzZSBcIiBcIjpcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBcIkVudGVyXCI6XHJcbiAgICAgICAgICAgIGRpc3BhdGNoKFtcIlNlbGVjdEhpZ2hsaWdodGVkSW5kZXhcIiwgXCJDbG9zZUxpc3RcIl0pO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIFwiRXNjXCI6XHJcbiAgICAgICAgY2FzZSBcIkVzY2FwZVwiOlxyXG4gICAgICAgIGNhc2UgXCJUYWJcIjpcclxuICAgICAgICAgICAgZGlzcGF0Y2goW1wiQ2xvc2VMaXN0XCJdKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBcIkRvd25cIjpcclxuICAgICAgICBjYXNlIFwiQXJyb3dEb3duXCI6XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgZGlzcGF0Y2goW1wiSGlnaGxpZ2h0TmV4dEluZGV4XCJdKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBcIlVwXCI6XHJcbiAgICAgICAgY2FzZSBcIkFycm93VXBcIjpcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBkaXNwYXRjaChbXCJIaWdobGlnaHRQcmV2aW91c0luZGV4XCJdKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBcIkhvbWVcIjoge1xyXG4gICAgICAgICAgICBkaXNwYXRjaChbXCJIaWdobGlnaHRGaXJzdEluZGV4XCJdKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhc2UgXCJFbmRcIjoge1xyXG4gICAgICAgICAgICBkaXNwYXRjaChbXCJIaWdobGlnaHRMYXN0SW5kZXhcIl0pO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG59OyB9O1xyXG4iLCJpbXBvcnQgeyBVbmlmb3JtSW5mbywgVW5pZm9ybVR5cGUgfSBmcm9tIFwiLi91bmlmb3JtXCI7XHJcbmltcG9ydCB7IENvbXBvc2l0ZUtleU1hcCB9IGZyb20gXCIuLi9jb21wb3NpdGVLZXlNYXBcIjtcclxuXHJcbnR5cGUgQ2FjaGVLZXkgPSB7XHJcbiAgbmFtZTogc3RyaW5nO1xyXG4gIHR5cGU6IFVuaWZvcm1UeXBlO1xyXG59O1xyXG5cclxudHlwZSBDYWNoZVZhbHVlID0ge1xyXG4gIHVuaWZvcm1JbmZvOiBVbmlmb3JtSW5mbztcclxufTtcclxuXHJcbmNvbnN0IGtleVNlbGVjdG9yID0gKGtleTogQ2FjaGVLZXkpOiBzdHJpbmcgPT4gYCR7a2V5Lm5hbWV9OyR7a2V5LnR5cGV9YDtcclxuY29uc3QgY2FjaGUgPSBuZXcgQ29tcG9zaXRlS2V5TWFwPENhY2hlS2V5LCBDYWNoZVZhbHVlPihrZXlTZWxlY3Rvcik7XHJcblxyXG5jb25zdCByZWJ1aWxkQ2FjaGUgPSAobmV3RWxlbWVudHM6IHsga2V5OiBDYWNoZUtleTsgdmFsdWU6IENhY2hlVmFsdWUgfVtdKSA9PiB7XHJcbiAgY29uc3QgbmV3VmFsdWVzU3RyS2V5cyA9IG5ld0VsZW1lbnRzLm1hcCh2ID0+IGtleVNlbGVjdG9yKHYua2V5KSk7XHJcbiAgY29uc3QgZWxlbWVudHNUb1JlbW92ZSA9IGNhY2hlLmVudHJpZXNTdHJLZXkoKS5maWx0ZXIoZSA9PiAhbmV3VmFsdWVzU3RyS2V5cy5pbmNsdWRlcyhlWzBdKSk7XHJcblxyXG4gIGVsZW1lbnRzVG9SZW1vdmUuZm9yRWFjaChjID0+IGNhY2hlLmRlbGV0ZVN0cktleShjWzBdKSk7XHJcblxyXG4gIG5ld0VsZW1lbnRzLmZvckVhY2goZSA9PiB7XHJcbiAgICBpZiAoIWNhY2hlLmhhcyhlLmtleSkpIGNhY2hlLnNldChlLmtleSwgZS52YWx1ZSk7XHJcbiAgfSk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0VW5pZm9ybUluZm8gPSAobmFtZTogc3RyaW5nLCB0eXBlOiBVbmlmb3JtVHlwZSkgPT4gY2FjaGUuZ2V0KHsgbmFtZSwgdHlwZSB9KTtcclxuXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVVbmlmb3JtSW5mb3MgPSAoXHJcbiAgY29udGV4dDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LFxyXG4gIHByb2dyYW06IFdlYkdMUHJvZ3JhbSxcclxuICB1bmlmb3JtczogeyBuYW1lOiBzdHJpbmc7IHR5cGU6IFVuaWZvcm1UeXBlIH1bXVxyXG4pID0+IHtcclxuICBjb25zdCBlbGVtZW50cyA9IHVuaWZvcm1zLm1hcCh1bmlmb3JtID0+IHtcclxuICAgIGNvbnN0IGtleSA9IHtcclxuICAgICAgLi4udW5pZm9ybSxcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgdmFsdWVGcm9tQ2FjaGUgPSBjYWNoZS5nZXQoa2V5KTtcclxuXHJcbiAgICBpZiAodmFsdWVGcm9tQ2FjaGUpIHtcclxuICAgICAgdmFsdWVGcm9tQ2FjaGUudW5pZm9ybUluZm8uYXR0YWNoVG9Qcm9ncmFtKHByb2dyYW0pO1xyXG4gICAgICByZXR1cm4geyBrZXksIHZhbHVlOiB2YWx1ZUZyb21DYWNoZSB9O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc3QgdW5pZm9ybUluZm8gPSBuZXcgVW5pZm9ybUluZm8oY29udGV4dCwgcHJvZ3JhbSwgdW5pZm9ybS5uYW1lLCB1bmlmb3JtLnR5cGUpO1xyXG5cclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBrZXksXHJcbiAgICAgICAgdmFsdWU6IHtcclxuICAgICAgICAgIHVuaWZvcm1JbmZvLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIHJlYnVpbGRDYWNoZShlbGVtZW50cyk7XHJcbiAgcmV0dXJuIGVsZW1lbnRzLm1hcCh1YyA9PiB1Yy52YWx1ZS51bmlmb3JtSW5mbyk7XHJcbn07XHJcbiIsImltcG9ydCB7IHN0b3JlIH0gZnJvbSBcIi4uLy4uXCI7XHJcbmltcG9ydCB7IFZpZXdlclN0YXRlIH0gZnJvbSBcIi4uLy4uL3N0b3JlL3N0YXRlXCI7XHJcbmltcG9ydCB7IGRlYm91bmNlIH0gZnJvbSBcIi4uL2Z1bmN0aW9uXCI7XHJcbmltcG9ydCB7IHNhZmVKU09OUGFyc2UgfSBmcm9tIFwiLi4vcGFyc2luZ1wiO1xyXG5pbXBvcnQgeyBnZXRBdHRyaWJ1dGVCdWZmZXJJbmZvIH0gZnJvbSBcIi4vYXR0cmlidXRlQnVmZmVyU3RvcmVcIjtcclxuaW1wb3J0IHsgZ2V0VW5pZm9ybUluZm8gfSBmcm9tIFwiLi91bmlmb3JtU3RvcmVcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBzZXRXZWJHTEZyb21TdGF0ZSA9ICgpID0+IHtcclxuICBjb25zdCBzdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XHJcblxyXG4gIHN0YXRlLmF0dHJpYnV0ZUJ1ZmZlclZhbHVlcyAmJlxyXG4gICAgT2JqZWN0LmVudHJpZXMoc3RhdGUuYXR0cmlidXRlQnVmZmVyVmFsdWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcclxuICAgICAgZ2V0QXR0cmlidXRlQnVmZmVySW5mbyhrZXksIHZhbHVlLnR5cGUpPy5hdHRyaWJ1dGVCdWZmZXJJbmZvLnNldFZhbHVlKFxyXG4gICAgICAgIHNhZmVKU09OUGFyc2UodmFsdWUudmFsdWUpID8/IFtdXHJcbiAgICAgICk7XHJcbiAgICB9KTtcclxuXHJcbiAgc3RhdGUudW5pZm9ybVZhbHVlcyAmJlxyXG4gICAgT2JqZWN0LmVudHJpZXMoc3RhdGUudW5pZm9ybVZhbHVlcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XHJcbiAgICAgIGdldFVuaWZvcm1JbmZvKGtleSwgdmFsdWUudHlwZSk/LnVuaWZvcm1JbmZvLnNldFZhbHVlKHZhbHVlLnZhbHVlKTtcclxuICAgIH0pO1xyXG5cclxuICBzdGF0ZS50ZXh0dXJlVmFsdWVzICYmXHJcbiAgICBPYmplY3QuZW50cmllcyhzdGF0ZS50ZXh0dXJlVmFsdWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcclxuICAgICAgLy9nZXRUZXh0dXJlSW5mbyhrZXkpPy50ZXh0dXJlSW5mby5zZXRWYWx1ZSh2YWx1ZS52YWx1ZSk7XHJcbiAgICB9KTtcclxufTtcclxuXHJcbmxldCBsYXN0Q29tbWl0ZWRBdHRyaWJ1dGVCdWZmZXJzU3RhdGU6IFZpZXdlclN0YXRlW1wiYXR0cmlidXRlQnVmZmVyVmFsdWVzXCJdID0gdW5kZWZpbmVkO1xyXG5leHBvcnQgY29uc3Qgc2V0QXR0cmlidXRlQnVmZmVycyA9IGRlYm91bmNlKFxyXG4gIChhdHRyaWJ1dGVCdWZmZXJWYWx1ZXM6IFZpZXdlclN0YXRlW1wiYXR0cmlidXRlQnVmZmVyVmFsdWVzXCJdKSA9PiB7XHJcbiAgICBpZiAoXHJcbiAgICAgIGxhc3RDb21taXRlZEF0dHJpYnV0ZUJ1ZmZlcnNTdGF0ZSAhPT0gYXR0cmlidXRlQnVmZmVyVmFsdWVzICYmXHJcbiAgICAgIGxhc3RDb21taXRlZEF0dHJpYnV0ZUJ1ZmZlcnNTdGF0ZSAmJlxyXG4gICAgICBhdHRyaWJ1dGVCdWZmZXJWYWx1ZXNcclxuICAgICkge1xyXG4gICAgICBPYmplY3QuZW50cmllcyhhdHRyaWJ1dGVCdWZmZXJWYWx1ZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xyXG4gICAgICAgIGlmIChsYXN0Q29tbWl0ZWRBdHRyaWJ1dGVCdWZmZXJzU3RhdGVba2V5XSAhPT0gdmFsdWUpIHtcclxuICAgICAgICAgIGdldEF0dHJpYnV0ZUJ1ZmZlckluZm8oa2V5LCB2YWx1ZS50eXBlKT8uYXR0cmlidXRlQnVmZmVySW5mby5zZXRWYWx1ZShcclxuICAgICAgICAgICAgc2FmZUpTT05QYXJzZSh2YWx1ZS52YWx1ZSkgPz8gW11cclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBsYXN0Q29tbWl0ZWRBdHRyaWJ1dGVCdWZmZXJzU3RhdGUgPSBhdHRyaWJ1dGVCdWZmZXJWYWx1ZXM7XHJcbiAgfSxcclxuICAxMDBcclxuKTtcclxuXHJcbmxldCBsYXN0Q29tbWl0ZWRVbmlmb3Jtc1N0YXRlOiBWaWV3ZXJTdGF0ZVtcInVuaWZvcm1WYWx1ZXNcIl0gPSB1bmRlZmluZWQ7XHJcbmV4cG9ydCBjb25zdCBzZXRVbmlmb3JtcyA9ICh1bmlmb3JtVmFsdWVzOiBWaWV3ZXJTdGF0ZVtcInVuaWZvcm1WYWx1ZXNcIl0pID0+IHtcclxuICBpZiAobGFzdENvbW1pdGVkVW5pZm9ybXNTdGF0ZSAhPT0gdW5pZm9ybVZhbHVlcyAmJiBsYXN0Q29tbWl0ZWRVbmlmb3Jtc1N0YXRlICYmIHVuaWZvcm1WYWx1ZXMpIHtcclxuICAgIE9iamVjdC5lbnRyaWVzKHVuaWZvcm1WYWx1ZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xyXG4gICAgICBpZiAobGFzdENvbW1pdGVkVW5pZm9ybXNTdGF0ZVtrZXldICE9PSB2YWx1ZSkge1xyXG4gICAgICAgIGdldFVuaWZvcm1JbmZvKGtleSwgdmFsdWUudHlwZSk/LnVuaWZvcm1JbmZvLnNldFZhbHVlKHZhbHVlLnZhbHVlKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG4gIGxhc3RDb21taXRlZFVuaWZvcm1zU3RhdGUgPSB1bmlmb3JtVmFsdWVzO1xyXG59O1xyXG5cclxubGV0IGxhc3RDb21taXRlZFRleHR1cmVzU3RhdGU6IFZpZXdlclN0YXRlW1widGV4dHVyZVZhbHVlc1wiXSA9IHVuZGVmaW5lZDtcclxuZXhwb3J0IGNvbnN0IHNldFRleHR1cmVzID0gKHRleHR1cmVWYWx1ZXM6IFZpZXdlclN0YXRlW1widGV4dHVyZVZhbHVlc1wiXSkgPT4ge1xyXG4gIGlmIChsYXN0Q29tbWl0ZWRUZXh0dXJlc1N0YXRlICE9PSB0ZXh0dXJlVmFsdWVzICYmIGxhc3RDb21taXRlZFRleHR1cmVzU3RhdGUgJiYgdGV4dHVyZVZhbHVlcykge1xyXG4gICAgT2JqZWN0LmVudHJpZXModGV4dHVyZVZhbHVlcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XHJcbiAgICAgIGlmIChsYXN0Q29tbWl0ZWRUZXh0dXJlc1N0YXRlW2tleV0gIT09IHZhbHVlKSB7XHJcbiAgICAgICAgLy9nZXRVbmlmb3JtSW5mbyhrZXksIHZhbHVlLnR5cGUpPy51bmlmb3JtSW5mby5zZXRWYWx1ZSh2YWx1ZS52YWx1ZSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgbGFzdENvbW1pdGVkVGV4dHVyZXNTdGF0ZSA9IHRleHR1cmVWYWx1ZXM7XHJcbn07XHJcbiIsImV4cG9ydCBmdW5jdGlvbiBkZWJvdW5jZTxUIGV4dGVuZHMgRnVuY3Rpb24+KGZ1bmM6IFQsIHdhaXQgPSA1MDApIHtcclxuICBsZXQgdGltZW91dElkID0gMDtcclxuICBsZXQgY2FsbGFibGUgPSAoLi4uYXJnczogYW55KSA9PiB7XHJcbiAgICBpZiAodGltZW91dElkICE9PSBudWxsKSBjbGVhclRpbWVvdXQodGltZW91dElkKTtcclxuXHJcbiAgICB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KCgpID0+IGZ1bmMoLi4uYXJncyksIHdhaXQpIGFzIGFueTtcclxuICB9O1xyXG4gIHJldHVybiA8VD4oPGFueT5jYWxsYWJsZSk7XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuXG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59IiwiaW1wb3J0IHNldFByb3RvdHlwZU9mIGZyb20gXCIuL3NldFByb3RvdHlwZU9mLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHtcbiAgaWYgKHNlbGYgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBzZWxmO1xufSIsImZ1bmN0aW9uIGFyZUlucHV0c0VxdWFsKG5ld0lucHV0cywgbGFzdElucHV0cykge1xuICAgIGlmIChuZXdJbnB1dHMubGVuZ3RoICE9PSBsYXN0SW5wdXRzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmV3SW5wdXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChuZXdJbnB1dHNbaV0gIT09IGxhc3RJbnB1dHNbaV0pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gbWVtb2l6ZU9uZShyZXN1bHRGbiwgaXNFcXVhbCkge1xuICAgIGlmIChpc0VxdWFsID09PSB2b2lkIDApIHsgaXNFcXVhbCA9IGFyZUlucHV0c0VxdWFsOyB9XG4gICAgdmFyIGxhc3RUaGlzO1xuICAgIHZhciBsYXN0QXJncyA9IFtdO1xuICAgIHZhciBsYXN0UmVzdWx0O1xuICAgIHZhciBjYWxsZWRPbmNlID0gZmFsc2U7XG4gICAgZnVuY3Rpb24gbWVtb2l6ZWQoKSB7XG4gICAgICAgIHZhciBuZXdBcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBuZXdBcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNhbGxlZE9uY2UgJiYgbGFzdFRoaXMgPT09IHRoaXMgJiYgaXNFcXVhbChuZXdBcmdzLCBsYXN0QXJncykpIHtcbiAgICAgICAgICAgIHJldHVybiBsYXN0UmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGxhc3RSZXN1bHQgPSByZXN1bHRGbi5hcHBseSh0aGlzLCBuZXdBcmdzKTtcbiAgICAgICAgY2FsbGVkT25jZSA9IHRydWU7XG4gICAgICAgIGxhc3RUaGlzID0gdGhpcztcbiAgICAgICAgbGFzdEFyZ3MgPSBuZXdBcmdzO1xuICAgICAgICByZXR1cm4gbGFzdFJlc3VsdDtcbiAgICB9XG4gICAgcmV0dXJuIG1lbW9pemVkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtZW1vaXplT25lO1xuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkJztcbmltcG9ydCBtZW1vaXplT25lIGZyb20gJ21lbW9pemUtb25lJztcbmltcG9ydCB7IGNyZWF0ZUVsZW1lbnQsIFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSc7XG5cbi8vIEFuaW1hdGlvbiBmcmFtZSBiYXNlZCBpbXBsZW1lbnRhdGlvbiBvZiBzZXRUaW1lb3V0LlxuLy8gSW5zcGlyZWQgYnkgSm9lIExhbWJlcnQsIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL2pvZWxhbWJlcnQvMTAwMjExNiNmaWxlLXJlcXVlc3R0aW1lb3V0LWpzXG52YXIgaGFzTmF0aXZlUGVyZm9ybWFuY2VOb3cgPSB0eXBlb2YgcGVyZm9ybWFuY2UgPT09ICdvYmplY3QnICYmIHR5cGVvZiBwZXJmb3JtYW5jZS5ub3cgPT09ICdmdW5jdGlvbic7XG52YXIgbm93ID0gaGFzTmF0aXZlUGVyZm9ybWFuY2VOb3cgPyBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBwZXJmb3JtYW5jZS5ub3coKTtcbn0gOiBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBEYXRlLm5vdygpO1xufTtcbmZ1bmN0aW9uIGNhbmNlbFRpbWVvdXQodGltZW91dElEKSB7XG4gIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRpbWVvdXRJRC5pZCk7XG59XG5mdW5jdGlvbiByZXF1ZXN0VGltZW91dChjYWxsYmFjaywgZGVsYXkpIHtcbiAgdmFyIHN0YXJ0ID0gbm93KCk7XG5cbiAgZnVuY3Rpb24gdGljaygpIHtcbiAgICBpZiAobm93KCkgLSBzdGFydCA+PSBkZWxheSkge1xuICAgICAgY2FsbGJhY2suY2FsbChudWxsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGltZW91dElELmlkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRpY2spO1xuICAgIH1cbiAgfVxuXG4gIHZhciB0aW1lb3V0SUQgPSB7XG4gICAgaWQ6IHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aWNrKVxuICB9O1xuICByZXR1cm4gdGltZW91dElEO1xufVxuXG52YXIgc2l6ZSA9IC0xOyAvLyBUaGlzIHV0aWxpdHkgY29waWVkIGZyb20gXCJkb20taGVscGVyc1wiIHBhY2thZ2UuXG5cbmZ1bmN0aW9uIGdldFNjcm9sbGJhclNpemUocmVjYWxjdWxhdGUpIHtcbiAgaWYgKHJlY2FsY3VsYXRlID09PSB2b2lkIDApIHtcbiAgICByZWNhbGN1bGF0ZSA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKHNpemUgPT09IC0xIHx8IHJlY2FsY3VsYXRlKSB7XG4gICAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBzdHlsZSA9IGRpdi5zdHlsZTtcbiAgICBzdHlsZS53aWR0aCA9ICc1MHB4JztcbiAgICBzdHlsZS5oZWlnaHQgPSAnNTBweCc7XG4gICAgc3R5bGUub3ZlcmZsb3cgPSAnc2Nyb2xsJztcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGRpdik7XG4gICAgc2l6ZSA9IGRpdi5vZmZzZXRXaWR0aCAtIGRpdi5jbGllbnRXaWR0aDtcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGRpdik7XG4gIH1cblxuICByZXR1cm4gc2l6ZTtcbn1cbnZhciBjYWNoZWRSVExSZXN1bHQgPSBudWxsOyAvLyBUUklDS1kgQWNjb3JkaW5nIHRvIHRoZSBzcGVjLCBzY3JvbGxMZWZ0IHNob3VsZCBiZSBuZWdhdGl2ZSBmb3IgUlRMIGFsaWduZWQgZWxlbWVudHMuXG4vLyBDaHJvbWUgZG9lcyBub3Qgc2VlbSB0byBhZGhlcmU7IGl0cyBzY3JvbGxMZWZ0IHZhbHVlcyBhcmUgcG9zaXRpdmUgKG1lYXN1cmVkIHJlbGF0aXZlIHRvIHRoZSBsZWZ0KS5cbi8vIFNhZmFyaSdzIGVsYXN0aWMgYm91bmNlIG1ha2VzIGRldGVjdGluZyB0aGlzIGV2ZW4gbW9yZSBjb21wbGljYXRlZCB3cnQgcG90ZW50aWFsIGZhbHNlIHBvc2l0aXZlcy5cbi8vIFRoZSBzYWZlc3Qgd2F5IHRvIGNoZWNrIHRoaXMgaXMgdG8gaW50ZW50aW9uYWxseSBzZXQgYSBuZWdhdGl2ZSBvZmZzZXQsXG4vLyBhbmQgdGhlbiB2ZXJpZnkgdGhhdCB0aGUgc3Vic2VxdWVudCBcInNjcm9sbFwiIGV2ZW50IG1hdGNoZXMgdGhlIG5lZ2F0aXZlIG9mZnNldC5cbi8vIElmIGl0IGRvZXMgbm90IG1hdGNoLCB0aGVuIHdlIGNhbiBhc3N1bWUgYSBub24tc3RhbmRhcmQgUlRMIHNjcm9sbCBpbXBsZW1lbnRhdGlvbi5cblxuZnVuY3Rpb24gZ2V0UlRMT2Zmc2V0VHlwZShyZWNhbGN1bGF0ZSkge1xuICBpZiAocmVjYWxjdWxhdGUgPT09IHZvaWQgMCkge1xuICAgIHJlY2FsY3VsYXRlID0gZmFsc2U7XG4gIH1cblxuICBpZiAoY2FjaGVkUlRMUmVzdWx0ID09PSBudWxsIHx8IHJlY2FsY3VsYXRlKSB7XG4gICAgdmFyIG91dGVyRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIG91dGVyU3R5bGUgPSBvdXRlckRpdi5zdHlsZTtcbiAgICBvdXRlclN0eWxlLndpZHRoID0gJzUwcHgnO1xuICAgIG91dGVyU3R5bGUuaGVpZ2h0ID0gJzUwcHgnO1xuICAgIG91dGVyU3R5bGUub3ZlcmZsb3cgPSAnc2Nyb2xsJztcbiAgICBvdXRlclN0eWxlLmRpcmVjdGlvbiA9ICdydGwnO1xuICAgIHZhciBpbm5lckRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBpbm5lclN0eWxlID0gaW5uZXJEaXYuc3R5bGU7XG4gICAgaW5uZXJTdHlsZS53aWR0aCA9ICcxMDBweCc7XG4gICAgaW5uZXJTdHlsZS5oZWlnaHQgPSAnMTAwcHgnO1xuICAgIG91dGVyRGl2LmFwcGVuZENoaWxkKGlubmVyRGl2KTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG91dGVyRGl2KTtcblxuICAgIGlmIChvdXRlckRpdi5zY3JvbGxMZWZ0ID4gMCkge1xuICAgICAgY2FjaGVkUlRMUmVzdWx0ID0gJ3Bvc2l0aXZlLWRlc2NlbmRpbmcnO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXRlckRpdi5zY3JvbGxMZWZ0ID0gMTtcblxuICAgICAgaWYgKG91dGVyRGl2LnNjcm9sbExlZnQgPT09IDApIHtcbiAgICAgICAgY2FjaGVkUlRMUmVzdWx0ID0gJ25lZ2F0aXZlJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhY2hlZFJUTFJlc3VsdCA9ICdwb3NpdGl2ZS1hc2NlbmRpbmcnO1xuICAgICAgfVxuICAgIH1cblxuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQob3V0ZXJEaXYpO1xuICAgIHJldHVybiBjYWNoZWRSVExSZXN1bHQ7XG4gIH1cblxuICByZXR1cm4gY2FjaGVkUlRMUmVzdWx0O1xufVxuXG52YXIgSVNfU0NST0xMSU5HX0RFQk9VTkNFX0lOVEVSVkFMID0gMTUwO1xuXG52YXIgZGVmYXVsdEl0ZW1LZXkgPSBmdW5jdGlvbiBkZWZhdWx0SXRlbUtleShfcmVmKSB7XG4gIHZhciBjb2x1bW5JbmRleCA9IF9yZWYuY29sdW1uSW5kZXgsXG4gICAgICBkYXRhID0gX3JlZi5kYXRhLFxuICAgICAgcm93SW5kZXggPSBfcmVmLnJvd0luZGV4O1xuICByZXR1cm4gcm93SW5kZXggKyBcIjpcIiArIGNvbHVtbkluZGV4O1xufTsgLy8gSW4gREVWIG1vZGUsIHRoaXMgU2V0IGhlbHBzIHVzIG9ubHkgbG9nIGEgd2FybmluZyBvbmNlIHBlciBjb21wb25lbnQgaW5zdGFuY2UuXG4vLyBUaGlzIGF2b2lkcyBzcGFtbWluZyB0aGUgY29uc29sZSBldmVyeSB0aW1lIGEgcmVuZGVyIGhhcHBlbnMuXG5cblxudmFyIGRldldhcm5pbmdzT3ZlcnNjYW5Db3VudCA9IG51bGw7XG52YXIgZGV2V2FybmluZ3NPdmVyc2NhblJvd3NDb2x1bW5zQ291bnQgPSBudWxsO1xudmFyIGRldldhcm5pbmdzVGFnTmFtZSA9IG51bGw7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LldlYWtTZXQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgZGV2V2FybmluZ3NPdmVyc2NhbkNvdW50ID1cbiAgICAvKiNfX1BVUkVfXyovXG4gICAgbmV3IFdlYWtTZXQoKTtcbiAgICBkZXZXYXJuaW5nc092ZXJzY2FuUm93c0NvbHVtbnNDb3VudCA9XG4gICAgLyojX19QVVJFX18qL1xuICAgIG5ldyBXZWFrU2V0KCk7XG4gICAgZGV2V2FybmluZ3NUYWdOYW1lID1cbiAgICAvKiNfX1BVUkVfXyovXG4gICAgbmV3IFdlYWtTZXQoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVHcmlkQ29tcG9uZW50KF9yZWYyKSB7XG4gIHZhciBfY2xhc3MsIF90ZW1wO1xuXG4gIHZhciBnZXRDb2x1bW5PZmZzZXQgPSBfcmVmMi5nZXRDb2x1bW5PZmZzZXQsXG4gICAgICBnZXRDb2x1bW5TdGFydEluZGV4Rm9yT2Zmc2V0ID0gX3JlZjIuZ2V0Q29sdW1uU3RhcnRJbmRleEZvck9mZnNldCxcbiAgICAgIGdldENvbHVtblN0b3BJbmRleEZvclN0YXJ0SW5kZXggPSBfcmVmMi5nZXRDb2x1bW5TdG9wSW5kZXhGb3JTdGFydEluZGV4LFxuICAgICAgZ2V0Q29sdW1uV2lkdGggPSBfcmVmMi5nZXRDb2x1bW5XaWR0aCxcbiAgICAgIGdldEVzdGltYXRlZFRvdGFsSGVpZ2h0ID0gX3JlZjIuZ2V0RXN0aW1hdGVkVG90YWxIZWlnaHQsXG4gICAgICBnZXRFc3RpbWF0ZWRUb3RhbFdpZHRoID0gX3JlZjIuZ2V0RXN0aW1hdGVkVG90YWxXaWR0aCxcbiAgICAgIGdldE9mZnNldEZvckNvbHVtbkFuZEFsaWdubWVudCA9IF9yZWYyLmdldE9mZnNldEZvckNvbHVtbkFuZEFsaWdubWVudCxcbiAgICAgIGdldE9mZnNldEZvclJvd0FuZEFsaWdubWVudCA9IF9yZWYyLmdldE9mZnNldEZvclJvd0FuZEFsaWdubWVudCxcbiAgICAgIGdldFJvd0hlaWdodCA9IF9yZWYyLmdldFJvd0hlaWdodCxcbiAgICAgIGdldFJvd09mZnNldCA9IF9yZWYyLmdldFJvd09mZnNldCxcbiAgICAgIGdldFJvd1N0YXJ0SW5kZXhGb3JPZmZzZXQgPSBfcmVmMi5nZXRSb3dTdGFydEluZGV4Rm9yT2Zmc2V0LFxuICAgICAgZ2V0Um93U3RvcEluZGV4Rm9yU3RhcnRJbmRleCA9IF9yZWYyLmdldFJvd1N0b3BJbmRleEZvclN0YXJ0SW5kZXgsXG4gICAgICBpbml0SW5zdGFuY2VQcm9wcyA9IF9yZWYyLmluaXRJbnN0YW5jZVByb3BzLFxuICAgICAgc2hvdWxkUmVzZXRTdHlsZUNhY2hlT25JdGVtU2l6ZUNoYW5nZSA9IF9yZWYyLnNob3VsZFJlc2V0U3R5bGVDYWNoZU9uSXRlbVNpemVDaGFuZ2UsXG4gICAgICB2YWxpZGF0ZVByb3BzID0gX3JlZjIudmFsaWRhdGVQcm9wcztcbiAgcmV0dXJuIF90ZW1wID0gX2NsYXNzID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoX1B1cmVDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHNMb29zZShHcmlkLCBfUHVyZUNvbXBvbmVudCk7XG5cbiAgICAvLyBBbHdheXMgdXNlIGV4cGxpY2l0IGNvbnN0cnVjdG9yIGZvciBSZWFjdCBjb21wb25lbnRzLlxuICAgIC8vIEl0IHByb2R1Y2VzIGxlc3MgY29kZSBhZnRlciB0cmFuc3BpbGF0aW9uLiAoIzI2KVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWNvbnN0cnVjdG9yXG4gICAgZnVuY3Rpb24gR3JpZChwcm9wcykge1xuICAgICAgdmFyIF90aGlzO1xuXG4gICAgICBfdGhpcyA9IF9QdXJlQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XG4gICAgICBfdGhpcy5faW5zdGFuY2VQcm9wcyA9IGluaXRJbnN0YW5jZVByb3BzKF90aGlzLnByb3BzLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSk7XG4gICAgICBfdGhpcy5fcmVzZXRJc1Njcm9sbGluZ1RpbWVvdXRJZCA9IG51bGw7XG4gICAgICBfdGhpcy5fb3V0ZXJSZWYgPSB2b2lkIDA7XG4gICAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgaW5zdGFuY2U6IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLFxuICAgICAgICBpc1Njcm9sbGluZzogZmFsc2UsXG4gICAgICAgIGhvcml6b250YWxTY3JvbGxEaXJlY3Rpb246ICdmb3J3YXJkJyxcbiAgICAgICAgc2Nyb2xsTGVmdDogdHlwZW9mIF90aGlzLnByb3BzLmluaXRpYWxTY3JvbGxMZWZ0ID09PSAnbnVtYmVyJyA/IF90aGlzLnByb3BzLmluaXRpYWxTY3JvbGxMZWZ0IDogMCxcbiAgICAgICAgc2Nyb2xsVG9wOiB0eXBlb2YgX3RoaXMucHJvcHMuaW5pdGlhbFNjcm9sbFRvcCA9PT0gJ251bWJlcicgPyBfdGhpcy5wcm9wcy5pbml0aWFsU2Nyb2xsVG9wIDogMCxcbiAgICAgICAgc2Nyb2xsVXBkYXRlV2FzUmVxdWVzdGVkOiBmYWxzZSxcbiAgICAgICAgdmVydGljYWxTY3JvbGxEaXJlY3Rpb246ICdmb3J3YXJkJ1xuICAgICAgfTtcbiAgICAgIF90aGlzLl9jYWxsT25JdGVtc1JlbmRlcmVkID0gdm9pZCAwO1xuICAgICAgX3RoaXMuX2NhbGxPbkl0ZW1zUmVuZGVyZWQgPSBtZW1vaXplT25lKGZ1bmN0aW9uIChvdmVyc2NhbkNvbHVtblN0YXJ0SW5kZXgsIG92ZXJzY2FuQ29sdW1uU3RvcEluZGV4LCBvdmVyc2NhblJvd1N0YXJ0SW5kZXgsIG92ZXJzY2FuUm93U3RvcEluZGV4LCB2aXNpYmxlQ29sdW1uU3RhcnRJbmRleCwgdmlzaWJsZUNvbHVtblN0b3BJbmRleCwgdmlzaWJsZVJvd1N0YXJ0SW5kZXgsIHZpc2libGVSb3dTdG9wSW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLnByb3BzLm9uSXRlbXNSZW5kZXJlZCh7XG4gICAgICAgICAgb3ZlcnNjYW5Db2x1bW5TdGFydEluZGV4OiBvdmVyc2NhbkNvbHVtblN0YXJ0SW5kZXgsXG4gICAgICAgICAgb3ZlcnNjYW5Db2x1bW5TdG9wSW5kZXg6IG92ZXJzY2FuQ29sdW1uU3RvcEluZGV4LFxuICAgICAgICAgIG92ZXJzY2FuUm93U3RhcnRJbmRleDogb3ZlcnNjYW5Sb3dTdGFydEluZGV4LFxuICAgICAgICAgIG92ZXJzY2FuUm93U3RvcEluZGV4OiBvdmVyc2NhblJvd1N0b3BJbmRleCxcbiAgICAgICAgICB2aXNpYmxlQ29sdW1uU3RhcnRJbmRleDogdmlzaWJsZUNvbHVtblN0YXJ0SW5kZXgsXG4gICAgICAgICAgdmlzaWJsZUNvbHVtblN0b3BJbmRleDogdmlzaWJsZUNvbHVtblN0b3BJbmRleCxcbiAgICAgICAgICB2aXNpYmxlUm93U3RhcnRJbmRleDogdmlzaWJsZVJvd1N0YXJ0SW5kZXgsXG4gICAgICAgICAgdmlzaWJsZVJvd1N0b3BJbmRleDogdmlzaWJsZVJvd1N0b3BJbmRleFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgX3RoaXMuX2NhbGxPblNjcm9sbCA9IHZvaWQgMDtcbiAgICAgIF90aGlzLl9jYWxsT25TY3JvbGwgPSBtZW1vaXplT25lKGZ1bmN0aW9uIChzY3JvbGxMZWZ0LCBzY3JvbGxUb3AsIGhvcml6b250YWxTY3JvbGxEaXJlY3Rpb24sIHZlcnRpY2FsU2Nyb2xsRGlyZWN0aW9uLCBzY3JvbGxVcGRhdGVXYXNSZXF1ZXN0ZWQpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLnByb3BzLm9uU2Nyb2xsKHtcbiAgICAgICAgICBob3Jpem9udGFsU2Nyb2xsRGlyZWN0aW9uOiBob3Jpem9udGFsU2Nyb2xsRGlyZWN0aW9uLFxuICAgICAgICAgIHNjcm9sbExlZnQ6IHNjcm9sbExlZnQsXG4gICAgICAgICAgc2Nyb2xsVG9wOiBzY3JvbGxUb3AsXG4gICAgICAgICAgdmVydGljYWxTY3JvbGxEaXJlY3Rpb246IHZlcnRpY2FsU2Nyb2xsRGlyZWN0aW9uLFxuICAgICAgICAgIHNjcm9sbFVwZGF0ZVdhc1JlcXVlc3RlZDogc2Nyb2xsVXBkYXRlV2FzUmVxdWVzdGVkXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICBfdGhpcy5fZ2V0SXRlbVN0eWxlID0gdm9pZCAwO1xuXG4gICAgICBfdGhpcy5fZ2V0SXRlbVN0eWxlID0gZnVuY3Rpb24gKHJvd0luZGV4LCBjb2x1bW5JbmRleCkge1xuICAgICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIGNvbHVtbldpZHRoID0gX3RoaXMkcHJvcHMuY29sdW1uV2lkdGgsXG4gICAgICAgICAgICBkaXJlY3Rpb24gPSBfdGhpcyRwcm9wcy5kaXJlY3Rpb24sXG4gICAgICAgICAgICByb3dIZWlnaHQgPSBfdGhpcyRwcm9wcy5yb3dIZWlnaHQ7XG5cbiAgICAgICAgdmFyIGl0ZW1TdHlsZUNhY2hlID0gX3RoaXMuX2dldEl0ZW1TdHlsZUNhY2hlKHNob3VsZFJlc2V0U3R5bGVDYWNoZU9uSXRlbVNpemVDaGFuZ2UgJiYgY29sdW1uV2lkdGgsIHNob3VsZFJlc2V0U3R5bGVDYWNoZU9uSXRlbVNpemVDaGFuZ2UgJiYgZGlyZWN0aW9uLCBzaG91bGRSZXNldFN0eWxlQ2FjaGVPbkl0ZW1TaXplQ2hhbmdlICYmIHJvd0hlaWdodCk7XG5cbiAgICAgICAgdmFyIGtleSA9IHJvd0luZGV4ICsgXCI6XCIgKyBjb2x1bW5JbmRleDtcbiAgICAgICAgdmFyIHN0eWxlO1xuXG4gICAgICAgIGlmIChpdGVtU3R5bGVDYWNoZS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgc3R5bGUgPSBpdGVtU3R5bGVDYWNoZVtrZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBfb2Zmc2V0ID0gZ2V0Q29sdW1uT2Zmc2V0KF90aGlzLnByb3BzLCBjb2x1bW5JbmRleCwgX3RoaXMuX2luc3RhbmNlUHJvcHMpO1xuXG4gICAgICAgICAgdmFyIGlzUnRsID0gZGlyZWN0aW9uID09PSAncnRsJztcbiAgICAgICAgICBpdGVtU3R5bGVDYWNoZVtrZXldID0gc3R5bGUgPSB7XG4gICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgIGxlZnQ6IGlzUnRsID8gdW5kZWZpbmVkIDogX29mZnNldCxcbiAgICAgICAgICAgIHJpZ2h0OiBpc1J0bCA/IF9vZmZzZXQgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB0b3A6IGdldFJvd09mZnNldChfdGhpcy5wcm9wcywgcm93SW5kZXgsIF90aGlzLl9pbnN0YW5jZVByb3BzKSxcbiAgICAgICAgICAgIGhlaWdodDogZ2V0Um93SGVpZ2h0KF90aGlzLnByb3BzLCByb3dJbmRleCwgX3RoaXMuX2luc3RhbmNlUHJvcHMpLFxuICAgICAgICAgICAgd2lkdGg6IGdldENvbHVtbldpZHRoKF90aGlzLnByb3BzLCBjb2x1bW5JbmRleCwgX3RoaXMuX2luc3RhbmNlUHJvcHMpXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzdHlsZTtcbiAgICAgIH07XG5cbiAgICAgIF90aGlzLl9nZXRJdGVtU3R5bGVDYWNoZSA9IHZvaWQgMDtcbiAgICAgIF90aGlzLl9nZXRJdGVtU3R5bGVDYWNoZSA9IG1lbW9pemVPbmUoZnVuY3Rpb24gKF8sIF9fLCBfX18pIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfSk7XG5cbiAgICAgIF90aGlzLl9vblNjcm9sbCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB2YXIgX2V2ZW50JGN1cnJlbnRUYXJnZXQgPSBldmVudC5jdXJyZW50VGFyZ2V0LFxuICAgICAgICAgICAgY2xpZW50SGVpZ2h0ID0gX2V2ZW50JGN1cnJlbnRUYXJnZXQuY2xpZW50SGVpZ2h0LFxuICAgICAgICAgICAgY2xpZW50V2lkdGggPSBfZXZlbnQkY3VycmVudFRhcmdldC5jbGllbnRXaWR0aCxcbiAgICAgICAgICAgIHNjcm9sbExlZnQgPSBfZXZlbnQkY3VycmVudFRhcmdldC5zY3JvbGxMZWZ0LFxuICAgICAgICAgICAgc2Nyb2xsVG9wID0gX2V2ZW50JGN1cnJlbnRUYXJnZXQuc2Nyb2xsVG9wLFxuICAgICAgICAgICAgc2Nyb2xsSGVpZ2h0ID0gX2V2ZW50JGN1cnJlbnRUYXJnZXQuc2Nyb2xsSGVpZ2h0LFxuICAgICAgICAgICAgc2Nyb2xsV2lkdGggPSBfZXZlbnQkY3VycmVudFRhcmdldC5zY3JvbGxXaWR0aDtcblxuICAgICAgICBfdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAocHJldlN0YXRlKSB7XG4gICAgICAgICAgaWYgKHByZXZTdGF0ZS5zY3JvbGxMZWZ0ID09PSBzY3JvbGxMZWZ0ICYmIHByZXZTdGF0ZS5zY3JvbGxUb3AgPT09IHNjcm9sbFRvcCkge1xuICAgICAgICAgICAgLy8gU2Nyb2xsIHBvc2l0aW9uIG1heSBoYXZlIGJlZW4gdXBkYXRlZCBieSBjRE0vY0RVLFxuICAgICAgICAgICAgLy8gSW4gd2hpY2ggY2FzZSB3ZSBkb24ndCBuZWVkIHRvIHRyaWdnZXIgYW5vdGhlciByZW5kZXIsXG4gICAgICAgICAgICAvLyBBbmQgd2UgZG9uJ3Qgd2FudCB0byB1cGRhdGUgc3RhdGUuaXNTY3JvbGxpbmcuXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgZGlyZWN0aW9uID0gX3RoaXMucHJvcHMuZGlyZWN0aW9uOyAvLyBUUklDS1kgQWNjb3JkaW5nIHRvIHRoZSBzcGVjLCBzY3JvbGxMZWZ0IHNob3VsZCBiZSBuZWdhdGl2ZSBmb3IgUlRMIGFsaWduZWQgZWxlbWVudHMuXG4gICAgICAgICAgLy8gVGhpcyBpcyBub3QgdGhlIGNhc2UgZm9yIGFsbCBicm93c2VycyB0aG91Z2ggKGUuZy4gQ2hyb21lIHJlcG9ydHMgdmFsdWVzIGFzIHBvc2l0aXZlLCBtZWFzdXJlZCByZWxhdGl2ZSB0byB0aGUgbGVmdCkuXG4gICAgICAgICAgLy8gSXQncyBhbHNvIGVhc2llciBmb3IgdGhpcyBjb21wb25lbnQgaWYgd2UgY29udmVydCBvZmZzZXRzIHRvIHRoZSBzYW1lIGZvcm1hdCBhcyB0aGV5IHdvdWxkIGJlIGluIGZvciBsdHIuXG4gICAgICAgICAgLy8gU28gdGhlIHNpbXBsZXN0IHNvbHV0aW9uIGlzIHRvIGRldGVybWluZSB3aGljaCBicm93c2VyIGJlaGF2aW9yIHdlJ3JlIGRlYWxpbmcgd2l0aCwgYW5kIGNvbnZlcnQgYmFzZWQgb24gaXQuXG5cbiAgICAgICAgICB2YXIgY2FsY3VsYXRlZFNjcm9sbExlZnQgPSBzY3JvbGxMZWZ0O1xuXG4gICAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ3J0bCcpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoZ2V0UlRMT2Zmc2V0VHlwZSgpKSB7XG4gICAgICAgICAgICAgIGNhc2UgJ25lZ2F0aXZlJzpcbiAgICAgICAgICAgICAgICBjYWxjdWxhdGVkU2Nyb2xsTGVmdCA9IC1zY3JvbGxMZWZ0O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgJ3Bvc2l0aXZlLWRlc2NlbmRpbmcnOlxuICAgICAgICAgICAgICAgIGNhbGN1bGF0ZWRTY3JvbGxMZWZ0ID0gc2Nyb2xsV2lkdGggLSBjbGllbnRXaWR0aCAtIHNjcm9sbExlZnQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSAvLyBQcmV2ZW50IFNhZmFyaSdzIGVsYXN0aWMgc2Nyb2xsaW5nIGZyb20gY2F1c2luZyB2aXN1YWwgc2hha2luZyB3aGVuIHNjcm9sbGluZyBwYXN0IGJvdW5kcy5cblxuXG4gICAgICAgICAgY2FsY3VsYXRlZFNjcm9sbExlZnQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihjYWxjdWxhdGVkU2Nyb2xsTGVmdCwgc2Nyb2xsV2lkdGggLSBjbGllbnRXaWR0aCkpO1xuICAgICAgICAgIHZhciBjYWxjdWxhdGVkU2Nyb2xsVG9wID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oc2Nyb2xsVG9wLCBzY3JvbGxIZWlnaHQgLSBjbGllbnRIZWlnaHQpKTtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaXNTY3JvbGxpbmc6IHRydWUsXG4gICAgICAgICAgICBob3Jpem9udGFsU2Nyb2xsRGlyZWN0aW9uOiBwcmV2U3RhdGUuc2Nyb2xsTGVmdCA8IHNjcm9sbExlZnQgPyAnZm9yd2FyZCcgOiAnYmFja3dhcmQnLFxuICAgICAgICAgICAgc2Nyb2xsTGVmdDogY2FsY3VsYXRlZFNjcm9sbExlZnQsXG4gICAgICAgICAgICBzY3JvbGxUb3A6IGNhbGN1bGF0ZWRTY3JvbGxUb3AsXG4gICAgICAgICAgICB2ZXJ0aWNhbFNjcm9sbERpcmVjdGlvbjogcHJldlN0YXRlLnNjcm9sbFRvcCA8IHNjcm9sbFRvcCA/ICdmb3J3YXJkJyA6ICdiYWNrd2FyZCcsXG4gICAgICAgICAgICBzY3JvbGxVcGRhdGVXYXNSZXF1ZXN0ZWQ6IGZhbHNlXG4gICAgICAgICAgfTtcbiAgICAgICAgfSwgX3RoaXMuX3Jlc2V0SXNTY3JvbGxpbmdEZWJvdW5jZWQpO1xuICAgICAgfTtcblxuICAgICAgX3RoaXMuX291dGVyUmVmU2V0dGVyID0gZnVuY3Rpb24gKHJlZikge1xuICAgICAgICB2YXIgb3V0ZXJSZWYgPSBfdGhpcy5wcm9wcy5vdXRlclJlZjtcbiAgICAgICAgX3RoaXMuX291dGVyUmVmID0gcmVmO1xuXG4gICAgICAgIGlmICh0eXBlb2Ygb3V0ZXJSZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBvdXRlclJlZihyZWYpO1xuICAgICAgICB9IGVsc2UgaWYgKG91dGVyUmVmICE9IG51bGwgJiYgdHlwZW9mIG91dGVyUmVmID09PSAnb2JqZWN0JyAmJiBvdXRlclJlZi5oYXNPd25Qcm9wZXJ0eSgnY3VycmVudCcpKSB7XG4gICAgICAgICAgb3V0ZXJSZWYuY3VycmVudCA9IHJlZjtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgX3RoaXMuX3Jlc2V0SXNTY3JvbGxpbmdEZWJvdW5jZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChfdGhpcy5fcmVzZXRJc1Njcm9sbGluZ1RpbWVvdXRJZCAhPT0gbnVsbCkge1xuICAgICAgICAgIGNhbmNlbFRpbWVvdXQoX3RoaXMuX3Jlc2V0SXNTY3JvbGxpbmdUaW1lb3V0SWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMuX3Jlc2V0SXNTY3JvbGxpbmdUaW1lb3V0SWQgPSByZXF1ZXN0VGltZW91dChfdGhpcy5fcmVzZXRJc1Njcm9sbGluZywgSVNfU0NST0xMSU5HX0RFQk9VTkNFX0lOVEVSVkFMKTtcbiAgICAgIH07XG5cbiAgICAgIF90aGlzLl9yZXNldElzU2Nyb2xsaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5fcmVzZXRJc1Njcm9sbGluZ1RpbWVvdXRJZCA9IG51bGw7XG5cbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGlzU2Nyb2xsaW5nOiBmYWxzZVxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgLy8gQ2xlYXIgc3R5bGUgY2FjaGUgYWZ0ZXIgc3RhdGUgdXBkYXRlIGhhcyBiZWVuIGNvbW1pdHRlZC5cbiAgICAgICAgICAvLyBUaGlzIHdheSB3ZSBkb24ndCBicmVhayBwdXJlIHNDVSBmb3IgaXRlbXMgdGhhdCBkb24ndCB1c2UgaXNTY3JvbGxpbmcgcGFyYW0uXG4gICAgICAgICAgX3RoaXMuX2dldEl0ZW1TdHlsZUNhY2hlKC0xKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgR3JpZC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzLCBwcmV2U3RhdGUpIHtcbiAgICAgIHZhbGlkYXRlU2hhcmVkUHJvcHMobmV4dFByb3BzLCBwcmV2U3RhdGUpO1xuICAgICAgdmFsaWRhdGVQcm9wcyhuZXh0UHJvcHMpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcblxuICAgIHZhciBfcHJvdG8gPSBHcmlkLnByb3RvdHlwZTtcblxuICAgIF9wcm90by5zY3JvbGxUbyA9IGZ1bmN0aW9uIHNjcm9sbFRvKF9yZWYzKSB7XG4gICAgICB2YXIgc2Nyb2xsTGVmdCA9IF9yZWYzLnNjcm9sbExlZnQsXG4gICAgICAgICAgc2Nyb2xsVG9wID0gX3JlZjMuc2Nyb2xsVG9wO1xuXG4gICAgICBpZiAoc2Nyb2xsTGVmdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHNjcm9sbExlZnQgPSBNYXRoLm1heCgwLCBzY3JvbGxMZWZ0KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNjcm9sbFRvcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHNjcm9sbFRvcCA9IE1hdGgubWF4KDAsIHNjcm9sbFRvcCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKHByZXZTdGF0ZSkge1xuICAgICAgICBpZiAoc2Nyb2xsTGVmdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgc2Nyb2xsTGVmdCA9IHByZXZTdGF0ZS5zY3JvbGxMZWZ0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNjcm9sbFRvcCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgc2Nyb2xsVG9wID0gcHJldlN0YXRlLnNjcm9sbFRvcDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwcmV2U3RhdGUuc2Nyb2xsTGVmdCA9PT0gc2Nyb2xsTGVmdCAmJiBwcmV2U3RhdGUuc2Nyb2xsVG9wID09PSBzY3JvbGxUb3ApIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaG9yaXpvbnRhbFNjcm9sbERpcmVjdGlvbjogcHJldlN0YXRlLnNjcm9sbExlZnQgPCBzY3JvbGxMZWZ0ID8gJ2ZvcndhcmQnIDogJ2JhY2t3YXJkJyxcbiAgICAgICAgICBzY3JvbGxMZWZ0OiBzY3JvbGxMZWZ0LFxuICAgICAgICAgIHNjcm9sbFRvcDogc2Nyb2xsVG9wLFxuICAgICAgICAgIHNjcm9sbFVwZGF0ZVdhc1JlcXVlc3RlZDogdHJ1ZSxcbiAgICAgICAgICB2ZXJ0aWNhbFNjcm9sbERpcmVjdGlvbjogcHJldlN0YXRlLnNjcm9sbFRvcCA8IHNjcm9sbFRvcCA/ICdmb3J3YXJkJyA6ICdiYWNrd2FyZCdcbiAgICAgICAgfTtcbiAgICAgIH0sIHRoaXMuX3Jlc2V0SXNTY3JvbGxpbmdEZWJvdW5jZWQpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uc2Nyb2xsVG9JdGVtID0gZnVuY3Rpb24gc2Nyb2xsVG9JdGVtKF9yZWY0KSB7XG4gICAgICB2YXIgX3JlZjQkYWxpZ24gPSBfcmVmNC5hbGlnbixcbiAgICAgICAgICBhbGlnbiA9IF9yZWY0JGFsaWduID09PSB2b2lkIDAgPyAnYXV0bycgOiBfcmVmNCRhbGlnbixcbiAgICAgICAgICBjb2x1bW5JbmRleCA9IF9yZWY0LmNvbHVtbkluZGV4LFxuICAgICAgICAgIHJvd0luZGV4ID0gX3JlZjQucm93SW5kZXg7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjb2x1bW5Db3VudCA9IF90aGlzJHByb3BzMi5jb2x1bW5Db3VudCxcbiAgICAgICAgICBoZWlnaHQgPSBfdGhpcyRwcm9wczIuaGVpZ2h0LFxuICAgICAgICAgIHJvd0NvdW50ID0gX3RoaXMkcHJvcHMyLnJvd0NvdW50LFxuICAgICAgICAgIHdpZHRoID0gX3RoaXMkcHJvcHMyLndpZHRoO1xuICAgICAgdmFyIF90aGlzJHN0YXRlID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICBzY3JvbGxMZWZ0ID0gX3RoaXMkc3RhdGUuc2Nyb2xsTGVmdCxcbiAgICAgICAgICBzY3JvbGxUb3AgPSBfdGhpcyRzdGF0ZS5zY3JvbGxUb3A7XG4gICAgICB2YXIgc2Nyb2xsYmFyU2l6ZSA9IGdldFNjcm9sbGJhclNpemUoKTtcblxuICAgICAgaWYgKGNvbHVtbkluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29sdW1uSW5kZXggPSBNYXRoLm1heCgwLCBNYXRoLm1pbihjb2x1bW5JbmRleCwgY29sdW1uQ291bnQgLSAxKSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyb3dJbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJvd0luZGV4ID0gTWF0aC5tYXgoMCwgTWF0aC5taW4ocm93SW5kZXgsIHJvd0NvdW50IC0gMSkpO1xuICAgICAgfVxuXG4gICAgICB2YXIgZXN0aW1hdGVkVG90YWxIZWlnaHQgPSBnZXRFc3RpbWF0ZWRUb3RhbEhlaWdodCh0aGlzLnByb3BzLCB0aGlzLl9pbnN0YW5jZVByb3BzKTtcbiAgICAgIHZhciBlc3RpbWF0ZWRUb3RhbFdpZHRoID0gZ2V0RXN0aW1hdGVkVG90YWxXaWR0aCh0aGlzLnByb3BzLCB0aGlzLl9pbnN0YW5jZVByb3BzKTsgLy8gVGhlIHNjcm9sbGJhciBzaXplIHNob3VsZCBiZSBjb25zaWRlcmVkIHdoZW4gc2Nyb2xsaW5nIGFuIGl0ZW0gaW50byB2aWV3LFxuICAgICAgLy8gdG8gZW5zdXJlIGl0J3MgZnVsbHkgdmlzaWJsZS5cbiAgICAgIC8vIEJ1dCB3ZSBvbmx5IG5lZWQgdG8gYWNjb3VudCBmb3IgaXRzIHNpemUgd2hlbiBpdCdzIGFjdHVhbGx5IHZpc2libGUuXG5cbiAgICAgIHZhciBob3Jpem9udGFsU2Nyb2xsYmFyU2l6ZSA9IGVzdGltYXRlZFRvdGFsV2lkdGggPiB3aWR0aCA/IHNjcm9sbGJhclNpemUgOiAwO1xuICAgICAgdmFyIHZlcnRpY2FsU2Nyb2xsYmFyU2l6ZSA9IGVzdGltYXRlZFRvdGFsSGVpZ2h0ID4gaGVpZ2h0ID8gc2Nyb2xsYmFyU2l6ZSA6IDA7XG4gICAgICB0aGlzLnNjcm9sbFRvKHtcbiAgICAgICAgc2Nyb2xsTGVmdDogY29sdW1uSW5kZXggIT09IHVuZGVmaW5lZCA/IGdldE9mZnNldEZvckNvbHVtbkFuZEFsaWdubWVudCh0aGlzLnByb3BzLCBjb2x1bW5JbmRleCwgYWxpZ24sIHNjcm9sbExlZnQsIHRoaXMuX2luc3RhbmNlUHJvcHMsIHZlcnRpY2FsU2Nyb2xsYmFyU2l6ZSkgOiBzY3JvbGxMZWZ0LFxuICAgICAgICBzY3JvbGxUb3A6IHJvd0luZGV4ICE9PSB1bmRlZmluZWQgPyBnZXRPZmZzZXRGb3JSb3dBbmRBbGlnbm1lbnQodGhpcy5wcm9wcywgcm93SW5kZXgsIGFsaWduLCBzY3JvbGxUb3AsIHRoaXMuX2luc3RhbmNlUHJvcHMsIGhvcml6b250YWxTY3JvbGxiYXJTaXplKSA6IHNjcm9sbFRvcFxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgaW5pdGlhbFNjcm9sbExlZnQgPSBfdGhpcyRwcm9wczMuaW5pdGlhbFNjcm9sbExlZnQsXG4gICAgICAgICAgaW5pdGlhbFNjcm9sbFRvcCA9IF90aGlzJHByb3BzMy5pbml0aWFsU2Nyb2xsVG9wO1xuXG4gICAgICBpZiAodGhpcy5fb3V0ZXJSZWYgIT0gbnVsbCkge1xuICAgICAgICB2YXIgb3V0ZXJSZWYgPSB0aGlzLl9vdXRlclJlZjtcblxuICAgICAgICBpZiAodHlwZW9mIGluaXRpYWxTY3JvbGxMZWZ0ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIG91dGVyUmVmLnNjcm9sbExlZnQgPSBpbml0aWFsU2Nyb2xsTGVmdDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgaW5pdGlhbFNjcm9sbFRvcCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICBvdXRlclJlZi5zY3JvbGxUb3AgPSBpbml0aWFsU2Nyb2xsVG9wO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2NhbGxQcm9wc0NhbGxiYWNrcygpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgdmFyIGRpcmVjdGlvbiA9IHRoaXMucHJvcHMuZGlyZWN0aW9uO1xuICAgICAgdmFyIF90aGlzJHN0YXRlMiA9IHRoaXMuc3RhdGUsXG4gICAgICAgICAgc2Nyb2xsTGVmdCA9IF90aGlzJHN0YXRlMi5zY3JvbGxMZWZ0LFxuICAgICAgICAgIHNjcm9sbFRvcCA9IF90aGlzJHN0YXRlMi5zY3JvbGxUb3AsXG4gICAgICAgICAgc2Nyb2xsVXBkYXRlV2FzUmVxdWVzdGVkID0gX3RoaXMkc3RhdGUyLnNjcm9sbFVwZGF0ZVdhc1JlcXVlc3RlZDtcblxuICAgICAgaWYgKHNjcm9sbFVwZGF0ZVdhc1JlcXVlc3RlZCAmJiB0aGlzLl9vdXRlclJlZiAhPSBudWxsKSB7XG4gICAgICAgIC8vIFRSSUNLWSBBY2NvcmRpbmcgdG8gdGhlIHNwZWMsIHNjcm9sbExlZnQgc2hvdWxkIGJlIG5lZ2F0aXZlIGZvciBSVEwgYWxpZ25lZCBlbGVtZW50cy5cbiAgICAgICAgLy8gVGhpcyBpcyBub3QgdGhlIGNhc2UgZm9yIGFsbCBicm93c2VycyB0aG91Z2ggKGUuZy4gQ2hyb21lIHJlcG9ydHMgdmFsdWVzIGFzIHBvc2l0aXZlLCBtZWFzdXJlZCByZWxhdGl2ZSB0byB0aGUgbGVmdCkuXG4gICAgICAgIC8vIFNvIHdlIG5lZWQgdG8gZGV0ZXJtaW5lIHdoaWNoIGJyb3dzZXIgYmVoYXZpb3Igd2UncmUgZGVhbGluZyB3aXRoLCBhbmQgbWltaWMgaXQuXG4gICAgICAgIHZhciBvdXRlclJlZiA9IHRoaXMuX291dGVyUmVmO1xuXG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT09ICdydGwnKSB7XG4gICAgICAgICAgc3dpdGNoIChnZXRSVExPZmZzZXRUeXBlKCkpIHtcbiAgICAgICAgICAgIGNhc2UgJ25lZ2F0aXZlJzpcbiAgICAgICAgICAgICAgb3V0ZXJSZWYuc2Nyb2xsTGVmdCA9IC1zY3JvbGxMZWZ0O1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAncG9zaXRpdmUtYXNjZW5kaW5nJzpcbiAgICAgICAgICAgICAgb3V0ZXJSZWYuc2Nyb2xsTGVmdCA9IHNjcm9sbExlZnQ7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICB2YXIgY2xpZW50V2lkdGggPSBvdXRlclJlZi5jbGllbnRXaWR0aCxcbiAgICAgICAgICAgICAgICAgIHNjcm9sbFdpZHRoID0gb3V0ZXJSZWYuc2Nyb2xsV2lkdGg7XG4gICAgICAgICAgICAgIG91dGVyUmVmLnNjcm9sbExlZnQgPSBzY3JvbGxXaWR0aCAtIGNsaWVudFdpZHRoIC0gc2Nyb2xsTGVmdDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dGVyUmVmLnNjcm9sbExlZnQgPSBNYXRoLm1heCgwLCBzY3JvbGxMZWZ0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIG91dGVyUmVmLnNjcm9sbFRvcCA9IE1hdGgubWF4KDAsIHNjcm9sbFRvcCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2NhbGxQcm9wc0NhbGxiYWNrcygpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLl9yZXNldElzU2Nyb2xsaW5nVGltZW91dElkICE9PSBudWxsKSB7XG4gICAgICAgIGNhbmNlbFRpbWVvdXQodGhpcy5fcmVzZXRJc1Njcm9sbGluZ1RpbWVvdXRJZCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHM0ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzNC5jaGlsZHJlbixcbiAgICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wczQuY2xhc3NOYW1lLFxuICAgICAgICAgIGNvbHVtbkNvdW50ID0gX3RoaXMkcHJvcHM0LmNvbHVtbkNvdW50LFxuICAgICAgICAgIGRpcmVjdGlvbiA9IF90aGlzJHByb3BzNC5kaXJlY3Rpb24sXG4gICAgICAgICAgaGVpZ2h0ID0gX3RoaXMkcHJvcHM0LmhlaWdodCxcbiAgICAgICAgICBpbm5lclJlZiA9IF90aGlzJHByb3BzNC5pbm5lclJlZixcbiAgICAgICAgICBpbm5lckVsZW1lbnRUeXBlID0gX3RoaXMkcHJvcHM0LmlubmVyRWxlbWVudFR5cGUsXG4gICAgICAgICAgaW5uZXJUYWdOYW1lID0gX3RoaXMkcHJvcHM0LmlubmVyVGFnTmFtZSxcbiAgICAgICAgICBpdGVtRGF0YSA9IF90aGlzJHByb3BzNC5pdGVtRGF0YSxcbiAgICAgICAgICBfdGhpcyRwcm9wczQkaXRlbUtleSA9IF90aGlzJHByb3BzNC5pdGVtS2V5LFxuICAgICAgICAgIGl0ZW1LZXkgPSBfdGhpcyRwcm9wczQkaXRlbUtleSA9PT0gdm9pZCAwID8gZGVmYXVsdEl0ZW1LZXkgOiBfdGhpcyRwcm9wczQkaXRlbUtleSxcbiAgICAgICAgICBvdXRlckVsZW1lbnRUeXBlID0gX3RoaXMkcHJvcHM0Lm91dGVyRWxlbWVudFR5cGUsXG4gICAgICAgICAgb3V0ZXJUYWdOYW1lID0gX3RoaXMkcHJvcHM0Lm91dGVyVGFnTmFtZSxcbiAgICAgICAgICByb3dDb3VudCA9IF90aGlzJHByb3BzNC5yb3dDb3VudCxcbiAgICAgICAgICBzdHlsZSA9IF90aGlzJHByb3BzNC5zdHlsZSxcbiAgICAgICAgICB1c2VJc1Njcm9sbGluZyA9IF90aGlzJHByb3BzNC51c2VJc1Njcm9sbGluZyxcbiAgICAgICAgICB3aWR0aCA9IF90aGlzJHByb3BzNC53aWR0aDtcbiAgICAgIHZhciBpc1Njcm9sbGluZyA9IHRoaXMuc3RhdGUuaXNTY3JvbGxpbmc7XG5cbiAgICAgIHZhciBfdGhpcyRfZ2V0SG9yaXpvbnRhbFIgPSB0aGlzLl9nZXRIb3Jpem9udGFsUmFuZ2VUb1JlbmRlcigpLFxuICAgICAgICAgIGNvbHVtblN0YXJ0SW5kZXggPSBfdGhpcyRfZ2V0SG9yaXpvbnRhbFJbMF0sXG4gICAgICAgICAgY29sdW1uU3RvcEluZGV4ID0gX3RoaXMkX2dldEhvcml6b250YWxSWzFdO1xuXG4gICAgICB2YXIgX3RoaXMkX2dldFZlcnRpY2FsUmFuID0gdGhpcy5fZ2V0VmVydGljYWxSYW5nZVRvUmVuZGVyKCksXG4gICAgICAgICAgcm93U3RhcnRJbmRleCA9IF90aGlzJF9nZXRWZXJ0aWNhbFJhblswXSxcbiAgICAgICAgICByb3dTdG9wSW5kZXggPSBfdGhpcyRfZ2V0VmVydGljYWxSYW5bMV07XG5cbiAgICAgIHZhciBpdGVtcyA9IFtdO1xuXG4gICAgICBpZiAoY29sdW1uQ291bnQgPiAwICYmIHJvd0NvdW50KSB7XG4gICAgICAgIGZvciAodmFyIF9yb3dJbmRleCA9IHJvd1N0YXJ0SW5kZXg7IF9yb3dJbmRleCA8PSByb3dTdG9wSW5kZXg7IF9yb3dJbmRleCsrKSB7XG4gICAgICAgICAgZm9yICh2YXIgX2NvbHVtbkluZGV4ID0gY29sdW1uU3RhcnRJbmRleDsgX2NvbHVtbkluZGV4IDw9IGNvbHVtblN0b3BJbmRleDsgX2NvbHVtbkluZGV4KyspIHtcbiAgICAgICAgICAgIGl0ZW1zLnB1c2goY3JlYXRlRWxlbWVudChjaGlsZHJlbiwge1xuICAgICAgICAgICAgICBjb2x1bW5JbmRleDogX2NvbHVtbkluZGV4LFxuICAgICAgICAgICAgICBkYXRhOiBpdGVtRGF0YSxcbiAgICAgICAgICAgICAgaXNTY3JvbGxpbmc6IHVzZUlzU2Nyb2xsaW5nID8gaXNTY3JvbGxpbmcgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIGtleTogaXRlbUtleSh7XG4gICAgICAgICAgICAgICAgY29sdW1uSW5kZXg6IF9jb2x1bW5JbmRleCxcbiAgICAgICAgICAgICAgICBkYXRhOiBpdGVtRGF0YSxcbiAgICAgICAgICAgICAgICByb3dJbmRleDogX3Jvd0luZGV4XG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICByb3dJbmRleDogX3Jvd0luZGV4LFxuICAgICAgICAgICAgICBzdHlsZTogdGhpcy5fZ2V0SXRlbVN0eWxlKF9yb3dJbmRleCwgX2NvbHVtbkluZGV4KVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSAvLyBSZWFkIHRoaXMgdmFsdWUgQUZURVIgaXRlbXMgaGF2ZSBiZWVuIGNyZWF0ZWQsXG4gICAgICAvLyBTbyB0aGVpciBhY3R1YWwgc2l6ZXMgKGlmIHZhcmlhYmxlKSBhcmUgdGFrZW4gaW50byBjb25zaWRlcmF0aW9uLlxuXG5cbiAgICAgIHZhciBlc3RpbWF0ZWRUb3RhbEhlaWdodCA9IGdldEVzdGltYXRlZFRvdGFsSGVpZ2h0KHRoaXMucHJvcHMsIHRoaXMuX2luc3RhbmNlUHJvcHMpO1xuICAgICAgdmFyIGVzdGltYXRlZFRvdGFsV2lkdGggPSBnZXRFc3RpbWF0ZWRUb3RhbFdpZHRoKHRoaXMucHJvcHMsIHRoaXMuX2luc3RhbmNlUHJvcHMpO1xuICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQob3V0ZXJFbGVtZW50VHlwZSB8fCBvdXRlclRhZ05hbWUgfHwgJ2RpdicsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICAgIG9uU2Nyb2xsOiB0aGlzLl9vblNjcm9sbCxcbiAgICAgICAgcmVmOiB0aGlzLl9vdXRlclJlZlNldHRlcixcbiAgICAgICAgc3R5bGU6IF9leHRlbmRzKHtcbiAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgICAgb3ZlcmZsb3c6ICdhdXRvJyxcbiAgICAgICAgICBXZWJraXRPdmVyZmxvd1Njcm9sbGluZzogJ3RvdWNoJyxcbiAgICAgICAgICB3aWxsQ2hhbmdlOiAndHJhbnNmb3JtJyxcbiAgICAgICAgICBkaXJlY3Rpb246IGRpcmVjdGlvblxuICAgICAgICB9LCBzdHlsZSlcbiAgICAgIH0sIGNyZWF0ZUVsZW1lbnQoaW5uZXJFbGVtZW50VHlwZSB8fCBpbm5lclRhZ05hbWUgfHwgJ2RpdicsIHtcbiAgICAgICAgY2hpbGRyZW46IGl0ZW1zLFxuICAgICAgICByZWY6IGlubmVyUmVmLFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIGhlaWdodDogZXN0aW1hdGVkVG90YWxIZWlnaHQsXG4gICAgICAgICAgcG9pbnRlckV2ZW50czogaXNTY3JvbGxpbmcgPyAnbm9uZScgOiB1bmRlZmluZWQsXG4gICAgICAgICAgd2lkdGg6IGVzdGltYXRlZFRvdGFsV2lkdGhcbiAgICAgICAgfVxuICAgICAgfSkpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2NhbGxQcm9wc0NhbGxiYWNrcyA9IGZ1bmN0aW9uIF9jYWxsUHJvcHNDYWxsYmFja3MoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHM1ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjb2x1bW5Db3VudCA9IF90aGlzJHByb3BzNS5jb2x1bW5Db3VudCxcbiAgICAgICAgICBvbkl0ZW1zUmVuZGVyZWQgPSBfdGhpcyRwcm9wczUub25JdGVtc1JlbmRlcmVkLFxuICAgICAgICAgIG9uU2Nyb2xsID0gX3RoaXMkcHJvcHM1Lm9uU2Nyb2xsLFxuICAgICAgICAgIHJvd0NvdW50ID0gX3RoaXMkcHJvcHM1LnJvd0NvdW50O1xuXG4gICAgICBpZiAodHlwZW9mIG9uSXRlbXNSZW5kZXJlZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBpZiAoY29sdW1uQ291bnQgPiAwICYmIHJvd0NvdW50ID4gMCkge1xuICAgICAgICAgIHZhciBfdGhpcyRfZ2V0SG9yaXpvbnRhbFIyID0gdGhpcy5fZ2V0SG9yaXpvbnRhbFJhbmdlVG9SZW5kZXIoKSxcbiAgICAgICAgICAgICAgX292ZXJzY2FuQ29sdW1uU3RhcnRJbmRleCA9IF90aGlzJF9nZXRIb3Jpem9udGFsUjJbMF0sXG4gICAgICAgICAgICAgIF9vdmVyc2NhbkNvbHVtblN0b3BJbmRleCA9IF90aGlzJF9nZXRIb3Jpem9udGFsUjJbMV0sXG4gICAgICAgICAgICAgIF92aXNpYmxlQ29sdW1uU3RhcnRJbmRleCA9IF90aGlzJF9nZXRIb3Jpem9udGFsUjJbMl0sXG4gICAgICAgICAgICAgIF92aXNpYmxlQ29sdW1uU3RvcEluZGV4ID0gX3RoaXMkX2dldEhvcml6b250YWxSMlszXTtcblxuICAgICAgICAgIHZhciBfdGhpcyRfZ2V0VmVydGljYWxSYW4yID0gdGhpcy5fZ2V0VmVydGljYWxSYW5nZVRvUmVuZGVyKCksXG4gICAgICAgICAgICAgIF9vdmVyc2NhblJvd1N0YXJ0SW5kZXggPSBfdGhpcyRfZ2V0VmVydGljYWxSYW4yWzBdLFxuICAgICAgICAgICAgICBfb3ZlcnNjYW5Sb3dTdG9wSW5kZXggPSBfdGhpcyRfZ2V0VmVydGljYWxSYW4yWzFdLFxuICAgICAgICAgICAgICBfdmlzaWJsZVJvd1N0YXJ0SW5kZXggPSBfdGhpcyRfZ2V0VmVydGljYWxSYW4yWzJdLFxuICAgICAgICAgICAgICBfdmlzaWJsZVJvd1N0b3BJbmRleCA9IF90aGlzJF9nZXRWZXJ0aWNhbFJhbjJbM107XG5cbiAgICAgICAgICB0aGlzLl9jYWxsT25JdGVtc1JlbmRlcmVkKF9vdmVyc2NhbkNvbHVtblN0YXJ0SW5kZXgsIF9vdmVyc2NhbkNvbHVtblN0b3BJbmRleCwgX292ZXJzY2FuUm93U3RhcnRJbmRleCwgX292ZXJzY2FuUm93U3RvcEluZGV4LCBfdmlzaWJsZUNvbHVtblN0YXJ0SW5kZXgsIF92aXNpYmxlQ29sdW1uU3RvcEluZGV4LCBfdmlzaWJsZVJvd1N0YXJ0SW5kZXgsIF92aXNpYmxlUm93U3RvcEluZGV4KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIG9uU2Nyb2xsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhciBfdGhpcyRzdGF0ZTMgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgICAgX2hvcml6b250YWxTY3JvbGxEaXJlY3Rpb24gPSBfdGhpcyRzdGF0ZTMuaG9yaXpvbnRhbFNjcm9sbERpcmVjdGlvbixcbiAgICAgICAgICAgIF9zY3JvbGxMZWZ0ID0gX3RoaXMkc3RhdGUzLnNjcm9sbExlZnQsXG4gICAgICAgICAgICBfc2Nyb2xsVG9wID0gX3RoaXMkc3RhdGUzLnNjcm9sbFRvcCxcbiAgICAgICAgICAgIF9zY3JvbGxVcGRhdGVXYXNSZXF1ZXN0ZWQgPSBfdGhpcyRzdGF0ZTMuc2Nyb2xsVXBkYXRlV2FzUmVxdWVzdGVkLFxuICAgICAgICAgICAgX3ZlcnRpY2FsU2Nyb2xsRGlyZWN0aW9uID0gX3RoaXMkc3RhdGUzLnZlcnRpY2FsU2Nyb2xsRGlyZWN0aW9uO1xuXG4gICAgICAgIHRoaXMuX2NhbGxPblNjcm9sbChfc2Nyb2xsTGVmdCwgX3Njcm9sbFRvcCwgX2hvcml6b250YWxTY3JvbGxEaXJlY3Rpb24sIF92ZXJ0aWNhbFNjcm9sbERpcmVjdGlvbiwgX3Njcm9sbFVwZGF0ZVdhc1JlcXVlc3RlZCk7XG4gICAgICB9XG4gICAgfTsgLy8gTGF6aWx5IGNyZWF0ZSBhbmQgY2FjaGUgaXRlbSBzdHlsZXMgd2hpbGUgc2Nyb2xsaW5nLFxuICAgIC8vIFNvIHRoYXQgcHVyZSBjb21wb25lbnQgc0NVIHdpbGwgcHJldmVudCByZS1yZW5kZXJzLlxuICAgIC8vIFdlIG1haW50YWluIHRoaXMgY2FjaGUsIGFuZCBwYXNzIGEgc3R5bGUgcHJvcCByYXRoZXIgdGhhbiBpbmRleCxcbiAgICAvLyBTbyB0aGF0IExpc3QgY2FuIGNsZWFyIGNhY2hlZCBzdHlsZXMgYW5kIGZvcmNlIGl0ZW0gcmUtcmVuZGVyIGlmIG5lY2Vzc2FyeS5cblxuXG4gICAgX3Byb3RvLl9nZXRIb3Jpem9udGFsUmFuZ2VUb1JlbmRlciA9IGZ1bmN0aW9uIF9nZXRIb3Jpem9udGFsUmFuZ2VUb1JlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczYgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNvbHVtbkNvdW50ID0gX3RoaXMkcHJvcHM2LmNvbHVtbkNvdW50LFxuICAgICAgICAgIG92ZXJzY2FuQ29sdW1uQ291bnQgPSBfdGhpcyRwcm9wczYub3ZlcnNjYW5Db2x1bW5Db3VudCxcbiAgICAgICAgICBvdmVyc2NhbkNvbHVtbnNDb3VudCA9IF90aGlzJHByb3BzNi5vdmVyc2NhbkNvbHVtbnNDb3VudCxcbiAgICAgICAgICBvdmVyc2NhbkNvdW50ID0gX3RoaXMkcHJvcHM2Lm92ZXJzY2FuQ291bnQsXG4gICAgICAgICAgcm93Q291bnQgPSBfdGhpcyRwcm9wczYucm93Q291bnQ7XG4gICAgICB2YXIgX3RoaXMkc3RhdGU0ID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICBob3Jpem9udGFsU2Nyb2xsRGlyZWN0aW9uID0gX3RoaXMkc3RhdGU0Lmhvcml6b250YWxTY3JvbGxEaXJlY3Rpb24sXG4gICAgICAgICAgaXNTY3JvbGxpbmcgPSBfdGhpcyRzdGF0ZTQuaXNTY3JvbGxpbmcsXG4gICAgICAgICAgc2Nyb2xsTGVmdCA9IF90aGlzJHN0YXRlNC5zY3JvbGxMZWZ0O1xuICAgICAgdmFyIG92ZXJzY2FuQ291bnRSZXNvbHZlZCA9IG92ZXJzY2FuQ29sdW1uQ291bnQgfHwgb3ZlcnNjYW5Db2x1bW5zQ291bnQgfHwgb3ZlcnNjYW5Db3VudCB8fCAxO1xuXG4gICAgICBpZiAoY29sdW1uQ291bnQgPT09IDAgfHwgcm93Q291bnQgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIFswLCAwLCAwLCAwXTtcbiAgICAgIH1cblxuICAgICAgdmFyIHN0YXJ0SW5kZXggPSBnZXRDb2x1bW5TdGFydEluZGV4Rm9yT2Zmc2V0KHRoaXMucHJvcHMsIHNjcm9sbExlZnQsIHRoaXMuX2luc3RhbmNlUHJvcHMpO1xuICAgICAgdmFyIHN0b3BJbmRleCA9IGdldENvbHVtblN0b3BJbmRleEZvclN0YXJ0SW5kZXgodGhpcy5wcm9wcywgc3RhcnRJbmRleCwgc2Nyb2xsTGVmdCwgdGhpcy5faW5zdGFuY2VQcm9wcyk7IC8vIE92ZXJzY2FuIGJ5IG9uZSBpdGVtIGluIGVhY2ggZGlyZWN0aW9uIHNvIHRoYXQgdGFiL2ZvY3VzIHdvcmtzLlxuICAgICAgLy8gSWYgdGhlcmUgaXNuJ3QgYXQgbGVhc3Qgb25lIGV4dHJhIGl0ZW0sIHRhYiBsb29wcyBiYWNrIGFyb3VuZC5cblxuICAgICAgdmFyIG92ZXJzY2FuQmFja3dhcmQgPSAhaXNTY3JvbGxpbmcgfHwgaG9yaXpvbnRhbFNjcm9sbERpcmVjdGlvbiA9PT0gJ2JhY2t3YXJkJyA/IE1hdGgubWF4KDEsIG92ZXJzY2FuQ291bnRSZXNvbHZlZCkgOiAxO1xuICAgICAgdmFyIG92ZXJzY2FuRm9yd2FyZCA9ICFpc1Njcm9sbGluZyB8fCBob3Jpem9udGFsU2Nyb2xsRGlyZWN0aW9uID09PSAnZm9yd2FyZCcgPyBNYXRoLm1heCgxLCBvdmVyc2NhbkNvdW50UmVzb2x2ZWQpIDogMTtcbiAgICAgIHJldHVybiBbTWF0aC5tYXgoMCwgc3RhcnRJbmRleCAtIG92ZXJzY2FuQmFja3dhcmQpLCBNYXRoLm1heCgwLCBNYXRoLm1pbihjb2x1bW5Db3VudCAtIDEsIHN0b3BJbmRleCArIG92ZXJzY2FuRm9yd2FyZCkpLCBzdGFydEluZGV4LCBzdG9wSW5kZXhdO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldFZlcnRpY2FsUmFuZ2VUb1JlbmRlciA9IGZ1bmN0aW9uIF9nZXRWZXJ0aWNhbFJhbmdlVG9SZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHM3ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjb2x1bW5Db3VudCA9IF90aGlzJHByb3BzNy5jb2x1bW5Db3VudCxcbiAgICAgICAgICBvdmVyc2NhbkNvdW50ID0gX3RoaXMkcHJvcHM3Lm92ZXJzY2FuQ291bnQsXG4gICAgICAgICAgb3ZlcnNjYW5Sb3dDb3VudCA9IF90aGlzJHByb3BzNy5vdmVyc2NhblJvd0NvdW50LFxuICAgICAgICAgIG92ZXJzY2FuUm93c0NvdW50ID0gX3RoaXMkcHJvcHM3Lm92ZXJzY2FuUm93c0NvdW50LFxuICAgICAgICAgIHJvd0NvdW50ID0gX3RoaXMkcHJvcHM3LnJvd0NvdW50O1xuICAgICAgdmFyIF90aGlzJHN0YXRlNSA9IHRoaXMuc3RhdGUsXG4gICAgICAgICAgaXNTY3JvbGxpbmcgPSBfdGhpcyRzdGF0ZTUuaXNTY3JvbGxpbmcsXG4gICAgICAgICAgdmVydGljYWxTY3JvbGxEaXJlY3Rpb24gPSBfdGhpcyRzdGF0ZTUudmVydGljYWxTY3JvbGxEaXJlY3Rpb24sXG4gICAgICAgICAgc2Nyb2xsVG9wID0gX3RoaXMkc3RhdGU1LnNjcm9sbFRvcDtcbiAgICAgIHZhciBvdmVyc2NhbkNvdW50UmVzb2x2ZWQgPSBvdmVyc2NhblJvd0NvdW50IHx8IG92ZXJzY2FuUm93c0NvdW50IHx8IG92ZXJzY2FuQ291bnQgfHwgMTtcblxuICAgICAgaWYgKGNvbHVtbkNvdW50ID09PSAwIHx8IHJvd0NvdW50ID09PSAwKSB7XG4gICAgICAgIHJldHVybiBbMCwgMCwgMCwgMF07XG4gICAgICB9XG5cbiAgICAgIHZhciBzdGFydEluZGV4ID0gZ2V0Um93U3RhcnRJbmRleEZvck9mZnNldCh0aGlzLnByb3BzLCBzY3JvbGxUb3AsIHRoaXMuX2luc3RhbmNlUHJvcHMpO1xuICAgICAgdmFyIHN0b3BJbmRleCA9IGdldFJvd1N0b3BJbmRleEZvclN0YXJ0SW5kZXgodGhpcy5wcm9wcywgc3RhcnRJbmRleCwgc2Nyb2xsVG9wLCB0aGlzLl9pbnN0YW5jZVByb3BzKTsgLy8gT3ZlcnNjYW4gYnkgb25lIGl0ZW0gaW4gZWFjaCBkaXJlY3Rpb24gc28gdGhhdCB0YWIvZm9jdXMgd29ya3MuXG4gICAgICAvLyBJZiB0aGVyZSBpc24ndCBhdCBsZWFzdCBvbmUgZXh0cmEgaXRlbSwgdGFiIGxvb3BzIGJhY2sgYXJvdW5kLlxuXG4gICAgICB2YXIgb3ZlcnNjYW5CYWNrd2FyZCA9ICFpc1Njcm9sbGluZyB8fCB2ZXJ0aWNhbFNjcm9sbERpcmVjdGlvbiA9PT0gJ2JhY2t3YXJkJyA/IE1hdGgubWF4KDEsIG92ZXJzY2FuQ291bnRSZXNvbHZlZCkgOiAxO1xuICAgICAgdmFyIG92ZXJzY2FuRm9yd2FyZCA9ICFpc1Njcm9sbGluZyB8fCB2ZXJ0aWNhbFNjcm9sbERpcmVjdGlvbiA9PT0gJ2ZvcndhcmQnID8gTWF0aC5tYXgoMSwgb3ZlcnNjYW5Db3VudFJlc29sdmVkKSA6IDE7XG4gICAgICByZXR1cm4gW01hdGgubWF4KDAsIHN0YXJ0SW5kZXggLSBvdmVyc2NhbkJhY2t3YXJkKSwgTWF0aC5tYXgoMCwgTWF0aC5taW4ocm93Q291bnQgLSAxLCBzdG9wSW5kZXggKyBvdmVyc2NhbkZvcndhcmQpKSwgc3RhcnRJbmRleCwgc3RvcEluZGV4XTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIEdyaWQ7XG4gIH0oUHVyZUNvbXBvbmVudCksIF9jbGFzcy5kZWZhdWx0UHJvcHMgPSB7XG4gICAgZGlyZWN0aW9uOiAnbHRyJyxcbiAgICBpdGVtRGF0YTogdW5kZWZpbmVkLFxuICAgIHVzZUlzU2Nyb2xsaW5nOiBmYWxzZVxuICB9LCBfdGVtcDtcbn1cblxudmFyIHZhbGlkYXRlU2hhcmVkUHJvcHMgPSBmdW5jdGlvbiB2YWxpZGF0ZVNoYXJlZFByb3BzKF9yZWY1LCBfcmVmNikge1xuICB2YXIgY2hpbGRyZW4gPSBfcmVmNS5jaGlsZHJlbixcbiAgICAgIGRpcmVjdGlvbiA9IF9yZWY1LmRpcmVjdGlvbixcbiAgICAgIGhlaWdodCA9IF9yZWY1LmhlaWdodCxcbiAgICAgIGlubmVyVGFnTmFtZSA9IF9yZWY1LmlubmVyVGFnTmFtZSxcbiAgICAgIG91dGVyVGFnTmFtZSA9IF9yZWY1Lm91dGVyVGFnTmFtZSxcbiAgICAgIG92ZXJzY2FuQ29sdW1uc0NvdW50ID0gX3JlZjUub3ZlcnNjYW5Db2x1bW5zQ291bnQsXG4gICAgICBvdmVyc2NhbkNvdW50ID0gX3JlZjUub3ZlcnNjYW5Db3VudCxcbiAgICAgIG92ZXJzY2FuUm93c0NvdW50ID0gX3JlZjUub3ZlcnNjYW5Sb3dzQ291bnQsXG4gICAgICB3aWR0aCA9IF9yZWY1LndpZHRoO1xuICB2YXIgaW5zdGFuY2UgPSBfcmVmNi5pbnN0YW5jZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICh0eXBlb2Ygb3ZlcnNjYW5Db3VudCA9PT0gJ251bWJlcicpIHtcbiAgICAgIGlmIChkZXZXYXJuaW5nc092ZXJzY2FuQ291bnQgJiYgIWRldldhcm5pbmdzT3ZlcnNjYW5Db3VudC5oYXMoaW5zdGFuY2UpKSB7XG4gICAgICAgIGRldldhcm5pbmdzT3ZlcnNjYW5Db3VudC5hZGQoaW5zdGFuY2UpO1xuICAgICAgICBjb25zb2xlLndhcm4oJ1RoZSBvdmVyc2NhbkNvdW50IHByb3AgaGFzIGJlZW4gZGVwcmVjYXRlZC4gJyArICdQbGVhc2UgdXNlIHRoZSBvdmVyc2NhbkNvbHVtbkNvdW50IGFuZCBvdmVyc2NhblJvd0NvdW50IHByb3BzIGluc3RlYWQuJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvdmVyc2NhbkNvbHVtbnNDb3VudCA9PT0gJ251bWJlcicgfHwgdHlwZW9mIG92ZXJzY2FuUm93c0NvdW50ID09PSAnbnVtYmVyJykge1xuICAgICAgaWYgKGRldldhcm5pbmdzT3ZlcnNjYW5Sb3dzQ29sdW1uc0NvdW50ICYmICFkZXZXYXJuaW5nc092ZXJzY2FuUm93c0NvbHVtbnNDb3VudC5oYXMoaW5zdGFuY2UpKSB7XG4gICAgICAgIGRldldhcm5pbmdzT3ZlcnNjYW5Sb3dzQ29sdW1uc0NvdW50LmFkZChpbnN0YW5jZSk7XG4gICAgICAgIGNvbnNvbGUud2FybignVGhlIG92ZXJzY2FuQ29sdW1uc0NvdW50IGFuZCBvdmVyc2NhblJvd3NDb3VudCBwcm9wcyBoYXZlIGJlZW4gZGVwcmVjYXRlZC4gJyArICdQbGVhc2UgdXNlIHRoZSBvdmVyc2NhbkNvbHVtbkNvdW50IGFuZCBvdmVyc2NhblJvd0NvdW50IHByb3BzIGluc3RlYWQuJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGlubmVyVGFnTmFtZSAhPSBudWxsIHx8IG91dGVyVGFnTmFtZSAhPSBudWxsKSB7XG4gICAgICBpZiAoZGV2V2FybmluZ3NUYWdOYW1lICYmICFkZXZXYXJuaW5nc1RhZ05hbWUuaGFzKGluc3RhbmNlKSkge1xuICAgICAgICBkZXZXYXJuaW5nc1RhZ05hbWUuYWRkKGluc3RhbmNlKTtcbiAgICAgICAgY29uc29sZS53YXJuKCdUaGUgaW5uZXJUYWdOYW1lIGFuZCBvdXRlclRhZ05hbWUgcHJvcHMgaGF2ZSBiZWVuIGRlcHJlY2F0ZWQuICcgKyAnUGxlYXNlIHVzZSB0aGUgaW5uZXJFbGVtZW50VHlwZSBhbmQgb3V0ZXJFbGVtZW50VHlwZSBwcm9wcyBpbnN0ZWFkLicpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjaGlsZHJlbiA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBFcnJvcignQW4gaW52YWxpZCBcImNoaWxkcmVuXCIgcHJvcCBoYXMgYmVlbiBzcGVjaWZpZWQuICcgKyAnVmFsdWUgc2hvdWxkIGJlIGEgUmVhY3QgY29tcG9uZW50LiAnICsgKFwiXFxcIlwiICsgKGNoaWxkcmVuID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIGNoaWxkcmVuKSArIFwiXFxcIiB3YXMgc3BlY2lmaWVkLlwiKSk7XG4gICAgfVxuXG4gICAgc3dpdGNoIChkaXJlY3Rpb24pIHtcbiAgICAgIGNhc2UgJ2x0cic6XG4gICAgICBjYXNlICdydGwnOlxuICAgICAgICAvLyBWYWxpZCB2YWx1ZXNcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IEVycm9yKCdBbiBpbnZhbGlkIFwiZGlyZWN0aW9uXCIgcHJvcCBoYXMgYmVlbiBzcGVjaWZpZWQuICcgKyAnVmFsdWUgc2hvdWxkIGJlIGVpdGhlciBcImx0clwiIG9yIFwicnRsXCIuICcgKyAoXCJcXFwiXCIgKyBkaXJlY3Rpb24gKyBcIlxcXCIgd2FzIHNwZWNpZmllZC5cIikpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygd2lkdGggIT09ICdudW1iZXInKSB7XG4gICAgICB0aHJvdyBFcnJvcignQW4gaW52YWxpZCBcIndpZHRoXCIgcHJvcCBoYXMgYmVlbiBzcGVjaWZpZWQuICcgKyAnR3JpZHMgbXVzdCBzcGVjaWZ5IGEgbnVtYmVyIGZvciB3aWR0aC4gJyArIChcIlxcXCJcIiArICh3aWR0aCA9PT0gbnVsbCA/ICdudWxsJyA6IHR5cGVvZiB3aWR0aCkgKyBcIlxcXCIgd2FzIHNwZWNpZmllZC5cIikpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgaGVpZ2h0ICE9PSAnbnVtYmVyJykge1xuICAgICAgdGhyb3cgRXJyb3IoJ0FuIGludmFsaWQgXCJoZWlnaHRcIiBwcm9wIGhhcyBiZWVuIHNwZWNpZmllZC4gJyArICdHcmlkcyBtdXN0IHNwZWNpZnkgYSBudW1iZXIgZm9yIGhlaWdodC4gJyArIChcIlxcXCJcIiArIChoZWlnaHQgPT09IG51bGwgPyAnbnVsbCcgOiB0eXBlb2YgaGVpZ2h0KSArIFwiXFxcIiB3YXMgc3BlY2lmaWVkLlwiKSk7XG4gICAgfVxuICB9XG59O1xuXG52YXIgREVGQVVMVF9FU1RJTUFURURfSVRFTV9TSVpFID0gNTA7XG5cbnZhciBnZXRFc3RpbWF0ZWRUb3RhbEhlaWdodCA9IGZ1bmN0aW9uIGdldEVzdGltYXRlZFRvdGFsSGVpZ2h0KF9yZWYsIF9yZWYyKSB7XG4gIHZhciByb3dDb3VudCA9IF9yZWYucm93Q291bnQ7XG4gIHZhciByb3dNZXRhZGF0YU1hcCA9IF9yZWYyLnJvd01ldGFkYXRhTWFwLFxuICAgICAgZXN0aW1hdGVkUm93SGVpZ2h0ID0gX3JlZjIuZXN0aW1hdGVkUm93SGVpZ2h0LFxuICAgICAgbGFzdE1lYXN1cmVkUm93SW5kZXggPSBfcmVmMi5sYXN0TWVhc3VyZWRSb3dJbmRleDtcbiAgdmFyIHRvdGFsU2l6ZU9mTWVhc3VyZWRSb3dzID0gMDsgLy8gRWRnZSBjYXNlIGNoZWNrIGZvciB3aGVuIHRoZSBudW1iZXIgb2YgaXRlbXMgZGVjcmVhc2VzIHdoaWxlIGEgc2Nyb2xsIGlzIGluIHByb2dyZXNzLlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vYnZhdWdobi9yZWFjdC13aW5kb3cvcHVsbC8xMzhcblxuICBpZiAobGFzdE1lYXN1cmVkUm93SW5kZXggPj0gcm93Q291bnQpIHtcbiAgICBsYXN0TWVhc3VyZWRSb3dJbmRleCA9IHJvd0NvdW50IC0gMTtcbiAgfVxuXG4gIGlmIChsYXN0TWVhc3VyZWRSb3dJbmRleCA+PSAwKSB7XG4gICAgdmFyIGl0ZW1NZXRhZGF0YSA9IHJvd01ldGFkYXRhTWFwW2xhc3RNZWFzdXJlZFJvd0luZGV4XTtcbiAgICB0b3RhbFNpemVPZk1lYXN1cmVkUm93cyA9IGl0ZW1NZXRhZGF0YS5vZmZzZXQgKyBpdGVtTWV0YWRhdGEuc2l6ZTtcbiAgfVxuXG4gIHZhciBudW1Vbm1lYXN1cmVkSXRlbXMgPSByb3dDb3VudCAtIGxhc3RNZWFzdXJlZFJvd0luZGV4IC0gMTtcbiAgdmFyIHRvdGFsU2l6ZU9mVW5tZWFzdXJlZEl0ZW1zID0gbnVtVW5tZWFzdXJlZEl0ZW1zICogZXN0aW1hdGVkUm93SGVpZ2h0O1xuICByZXR1cm4gdG90YWxTaXplT2ZNZWFzdXJlZFJvd3MgKyB0b3RhbFNpemVPZlVubWVhc3VyZWRJdGVtcztcbn07XG5cbnZhciBnZXRFc3RpbWF0ZWRUb3RhbFdpZHRoID0gZnVuY3Rpb24gZ2V0RXN0aW1hdGVkVG90YWxXaWR0aChfcmVmMywgX3JlZjQpIHtcbiAgdmFyIGNvbHVtbkNvdW50ID0gX3JlZjMuY29sdW1uQ291bnQ7XG4gIHZhciBjb2x1bW5NZXRhZGF0YU1hcCA9IF9yZWY0LmNvbHVtbk1ldGFkYXRhTWFwLFxuICAgICAgZXN0aW1hdGVkQ29sdW1uV2lkdGggPSBfcmVmNC5lc3RpbWF0ZWRDb2x1bW5XaWR0aCxcbiAgICAgIGxhc3RNZWFzdXJlZENvbHVtbkluZGV4ID0gX3JlZjQubGFzdE1lYXN1cmVkQ29sdW1uSW5kZXg7XG4gIHZhciB0b3RhbFNpemVPZk1lYXN1cmVkUm93cyA9IDA7IC8vIEVkZ2UgY2FzZSBjaGVjayBmb3Igd2hlbiB0aGUgbnVtYmVyIG9mIGl0ZW1zIGRlY3JlYXNlcyB3aGlsZSBhIHNjcm9sbCBpcyBpbiBwcm9ncmVzcy5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2J2YXVnaG4vcmVhY3Qtd2luZG93L3B1bGwvMTM4XG5cbiAgaWYgKGxhc3RNZWFzdXJlZENvbHVtbkluZGV4ID49IGNvbHVtbkNvdW50KSB7XG4gICAgbGFzdE1lYXN1cmVkQ29sdW1uSW5kZXggPSBjb2x1bW5Db3VudCAtIDE7XG4gIH1cblxuICBpZiAobGFzdE1lYXN1cmVkQ29sdW1uSW5kZXggPj0gMCkge1xuICAgIHZhciBpdGVtTWV0YWRhdGEgPSBjb2x1bW5NZXRhZGF0YU1hcFtsYXN0TWVhc3VyZWRDb2x1bW5JbmRleF07XG4gICAgdG90YWxTaXplT2ZNZWFzdXJlZFJvd3MgPSBpdGVtTWV0YWRhdGEub2Zmc2V0ICsgaXRlbU1ldGFkYXRhLnNpemU7XG4gIH1cblxuICB2YXIgbnVtVW5tZWFzdXJlZEl0ZW1zID0gY29sdW1uQ291bnQgLSBsYXN0TWVhc3VyZWRDb2x1bW5JbmRleCAtIDE7XG4gIHZhciB0b3RhbFNpemVPZlVubWVhc3VyZWRJdGVtcyA9IG51bVVubWVhc3VyZWRJdGVtcyAqIGVzdGltYXRlZENvbHVtbldpZHRoO1xuICByZXR1cm4gdG90YWxTaXplT2ZNZWFzdXJlZFJvd3MgKyB0b3RhbFNpemVPZlVubWVhc3VyZWRJdGVtcztcbn07XG5cbnZhciBnZXRJdGVtTWV0YWRhdGEgPSBmdW5jdGlvbiBnZXRJdGVtTWV0YWRhdGEoaXRlbVR5cGUsIHByb3BzLCBpbmRleCwgaW5zdGFuY2VQcm9wcykge1xuICB2YXIgaXRlbU1ldGFkYXRhTWFwLCBpdGVtU2l6ZSwgbGFzdE1lYXN1cmVkSW5kZXg7XG5cbiAgaWYgKGl0ZW1UeXBlID09PSAnY29sdW1uJykge1xuICAgIGl0ZW1NZXRhZGF0YU1hcCA9IGluc3RhbmNlUHJvcHMuY29sdW1uTWV0YWRhdGFNYXA7XG4gICAgaXRlbVNpemUgPSBwcm9wcy5jb2x1bW5XaWR0aDtcbiAgICBsYXN0TWVhc3VyZWRJbmRleCA9IGluc3RhbmNlUHJvcHMubGFzdE1lYXN1cmVkQ29sdW1uSW5kZXg7XG4gIH0gZWxzZSB7XG4gICAgaXRlbU1ldGFkYXRhTWFwID0gaW5zdGFuY2VQcm9wcy5yb3dNZXRhZGF0YU1hcDtcbiAgICBpdGVtU2l6ZSA9IHByb3BzLnJvd0hlaWdodDtcbiAgICBsYXN0TWVhc3VyZWRJbmRleCA9IGluc3RhbmNlUHJvcHMubGFzdE1lYXN1cmVkUm93SW5kZXg7XG4gIH1cblxuICBpZiAoaW5kZXggPiBsYXN0TWVhc3VyZWRJbmRleCkge1xuICAgIHZhciBvZmZzZXQgPSAwO1xuXG4gICAgaWYgKGxhc3RNZWFzdXJlZEluZGV4ID49IDApIHtcbiAgICAgIHZhciBpdGVtTWV0YWRhdGEgPSBpdGVtTWV0YWRhdGFNYXBbbGFzdE1lYXN1cmVkSW5kZXhdO1xuICAgICAgb2Zmc2V0ID0gaXRlbU1ldGFkYXRhLm9mZnNldCArIGl0ZW1NZXRhZGF0YS5zaXplO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSBsYXN0TWVhc3VyZWRJbmRleCArIDE7IGkgPD0gaW5kZXg7IGkrKykge1xuICAgICAgdmFyIHNpemUgPSBpdGVtU2l6ZShpKTtcbiAgICAgIGl0ZW1NZXRhZGF0YU1hcFtpXSA9IHtcbiAgICAgICAgb2Zmc2V0OiBvZmZzZXQsXG4gICAgICAgIHNpemU6IHNpemVcbiAgICAgIH07XG4gICAgICBvZmZzZXQgKz0gc2l6ZTtcbiAgICB9XG5cbiAgICBpZiAoaXRlbVR5cGUgPT09ICdjb2x1bW4nKSB7XG4gICAgICBpbnN0YW5jZVByb3BzLmxhc3RNZWFzdXJlZENvbHVtbkluZGV4ID0gaW5kZXg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluc3RhbmNlUHJvcHMubGFzdE1lYXN1cmVkUm93SW5kZXggPSBpbmRleDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaXRlbU1ldGFkYXRhTWFwW2luZGV4XTtcbn07XG5cbnZhciBmaW5kTmVhcmVzdEl0ZW0gPSBmdW5jdGlvbiBmaW5kTmVhcmVzdEl0ZW0oaXRlbVR5cGUsIHByb3BzLCBpbnN0YW5jZVByb3BzLCBvZmZzZXQpIHtcbiAgdmFyIGl0ZW1NZXRhZGF0YU1hcCwgbGFzdE1lYXN1cmVkSW5kZXg7XG5cbiAgaWYgKGl0ZW1UeXBlID09PSAnY29sdW1uJykge1xuICAgIGl0ZW1NZXRhZGF0YU1hcCA9IGluc3RhbmNlUHJvcHMuY29sdW1uTWV0YWRhdGFNYXA7XG4gICAgbGFzdE1lYXN1cmVkSW5kZXggPSBpbnN0YW5jZVByb3BzLmxhc3RNZWFzdXJlZENvbHVtbkluZGV4O1xuICB9IGVsc2Uge1xuICAgIGl0ZW1NZXRhZGF0YU1hcCA9IGluc3RhbmNlUHJvcHMucm93TWV0YWRhdGFNYXA7XG4gICAgbGFzdE1lYXN1cmVkSW5kZXggPSBpbnN0YW5jZVByb3BzLmxhc3RNZWFzdXJlZFJvd0luZGV4O1xuICB9XG5cbiAgdmFyIGxhc3RNZWFzdXJlZEl0ZW1PZmZzZXQgPSBsYXN0TWVhc3VyZWRJbmRleCA+IDAgPyBpdGVtTWV0YWRhdGFNYXBbbGFzdE1lYXN1cmVkSW5kZXhdLm9mZnNldCA6IDA7XG5cbiAgaWYgKGxhc3RNZWFzdXJlZEl0ZW1PZmZzZXQgPj0gb2Zmc2V0KSB7XG4gICAgLy8gSWYgd2UndmUgYWxyZWFkeSBtZWFzdXJlZCBpdGVtcyB3aXRoaW4gdGhpcyByYW5nZSBqdXN0IHVzZSBhIGJpbmFyeSBzZWFyY2ggYXMgaXQncyBmYXN0ZXIuXG4gICAgcmV0dXJuIGZpbmROZWFyZXN0SXRlbUJpbmFyeVNlYXJjaChpdGVtVHlwZSwgcHJvcHMsIGluc3RhbmNlUHJvcHMsIGxhc3RNZWFzdXJlZEluZGV4LCAwLCBvZmZzZXQpO1xuICB9IGVsc2Uge1xuICAgIC8vIElmIHdlIGhhdmVuJ3QgeWV0IG1lYXN1cmVkIHRoaXMgaGlnaCwgZmFsbGJhY2sgdG8gYW4gZXhwb25lbnRpYWwgc2VhcmNoIHdpdGggYW4gaW5uZXIgYmluYXJ5IHNlYXJjaC5cbiAgICAvLyBUaGUgZXhwb25lbnRpYWwgc2VhcmNoIGF2b2lkcyBwcmUtY29tcHV0aW5nIHNpemVzIGZvciB0aGUgZnVsbCBzZXQgb2YgaXRlbXMgYXMgYSBiaW5hcnkgc2VhcmNoIHdvdWxkLlxuICAgIC8vIFRoZSBvdmVyYWxsIGNvbXBsZXhpdHkgZm9yIHRoaXMgYXBwcm9hY2ggaXMgTyhsb2cgbikuXG4gICAgcmV0dXJuIGZpbmROZWFyZXN0SXRlbUV4cG9uZW50aWFsU2VhcmNoKGl0ZW1UeXBlLCBwcm9wcywgaW5zdGFuY2VQcm9wcywgTWF0aC5tYXgoMCwgbGFzdE1lYXN1cmVkSW5kZXgpLCBvZmZzZXQpO1xuICB9XG59O1xuXG52YXIgZmluZE5lYXJlc3RJdGVtQmluYXJ5U2VhcmNoID0gZnVuY3Rpb24gZmluZE5lYXJlc3RJdGVtQmluYXJ5U2VhcmNoKGl0ZW1UeXBlLCBwcm9wcywgaW5zdGFuY2VQcm9wcywgaGlnaCwgbG93LCBvZmZzZXQpIHtcbiAgd2hpbGUgKGxvdyA8PSBoaWdoKSB7XG4gICAgdmFyIG1pZGRsZSA9IGxvdyArIE1hdGguZmxvb3IoKGhpZ2ggLSBsb3cpIC8gMik7XG4gICAgdmFyIGN1cnJlbnRPZmZzZXQgPSBnZXRJdGVtTWV0YWRhdGEoaXRlbVR5cGUsIHByb3BzLCBtaWRkbGUsIGluc3RhbmNlUHJvcHMpLm9mZnNldDtcblxuICAgIGlmIChjdXJyZW50T2Zmc2V0ID09PSBvZmZzZXQpIHtcbiAgICAgIHJldHVybiBtaWRkbGU7XG4gICAgfSBlbHNlIGlmIChjdXJyZW50T2Zmc2V0IDwgb2Zmc2V0KSB7XG4gICAgICBsb3cgPSBtaWRkbGUgKyAxO1xuICAgIH0gZWxzZSBpZiAoY3VycmVudE9mZnNldCA+IG9mZnNldCkge1xuICAgICAgaGlnaCA9IG1pZGRsZSAtIDE7XG4gICAgfVxuICB9XG5cbiAgaWYgKGxvdyA+IDApIHtcbiAgICByZXR1cm4gbG93IC0gMTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gMDtcbiAgfVxufTtcblxudmFyIGZpbmROZWFyZXN0SXRlbUV4cG9uZW50aWFsU2VhcmNoID0gZnVuY3Rpb24gZmluZE5lYXJlc3RJdGVtRXhwb25lbnRpYWxTZWFyY2goaXRlbVR5cGUsIHByb3BzLCBpbnN0YW5jZVByb3BzLCBpbmRleCwgb2Zmc2V0KSB7XG4gIHZhciBpdGVtQ291bnQgPSBpdGVtVHlwZSA9PT0gJ2NvbHVtbicgPyBwcm9wcy5jb2x1bW5Db3VudCA6IHByb3BzLnJvd0NvdW50O1xuICB2YXIgaW50ZXJ2YWwgPSAxO1xuXG4gIHdoaWxlIChpbmRleCA8IGl0ZW1Db3VudCAmJiBnZXRJdGVtTWV0YWRhdGEoaXRlbVR5cGUsIHByb3BzLCBpbmRleCwgaW5zdGFuY2VQcm9wcykub2Zmc2V0IDwgb2Zmc2V0KSB7XG4gICAgaW5kZXggKz0gaW50ZXJ2YWw7XG4gICAgaW50ZXJ2YWwgKj0gMjtcbiAgfVxuXG4gIHJldHVybiBmaW5kTmVhcmVzdEl0ZW1CaW5hcnlTZWFyY2goaXRlbVR5cGUsIHByb3BzLCBpbnN0YW5jZVByb3BzLCBNYXRoLm1pbihpbmRleCwgaXRlbUNvdW50IC0gMSksIE1hdGguZmxvb3IoaW5kZXggLyAyKSwgb2Zmc2V0KTtcbn07XG5cbnZhciBnZXRPZmZzZXRGb3JJbmRleEFuZEFsaWdubWVudCA9IGZ1bmN0aW9uIGdldE9mZnNldEZvckluZGV4QW5kQWxpZ25tZW50KGl0ZW1UeXBlLCBwcm9wcywgaW5kZXgsIGFsaWduLCBzY3JvbGxPZmZzZXQsIGluc3RhbmNlUHJvcHMsIHNjcm9sbGJhclNpemUpIHtcbiAgdmFyIHNpemUgPSBpdGVtVHlwZSA9PT0gJ2NvbHVtbicgPyBwcm9wcy53aWR0aCA6IHByb3BzLmhlaWdodDtcbiAgdmFyIGl0ZW1NZXRhZGF0YSA9IGdldEl0ZW1NZXRhZGF0YShpdGVtVHlwZSwgcHJvcHMsIGluZGV4LCBpbnN0YW5jZVByb3BzKTsgLy8gR2V0IGVzdGltYXRlZCB0b3RhbCBzaXplIGFmdGVyIEl0ZW1NZXRhZGF0YSBpcyBjb21wdXRlZCxcbiAgLy8gVG8gZW5zdXJlIGl0IHJlZmxlY3RzIGFjdHVhbCBtZWFzdXJlbWVudHMgaW5zdGVhZCBvZiBqdXN0IGVzdGltYXRlcy5cblxuICB2YXIgZXN0aW1hdGVkVG90YWxTaXplID0gaXRlbVR5cGUgPT09ICdjb2x1bW4nID8gZ2V0RXN0aW1hdGVkVG90YWxXaWR0aChwcm9wcywgaW5zdGFuY2VQcm9wcykgOiBnZXRFc3RpbWF0ZWRUb3RhbEhlaWdodChwcm9wcywgaW5zdGFuY2VQcm9wcyk7XG4gIHZhciBtYXhPZmZzZXQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihlc3RpbWF0ZWRUb3RhbFNpemUgLSBzaXplLCBpdGVtTWV0YWRhdGEub2Zmc2V0KSk7XG4gIHZhciBtaW5PZmZzZXQgPSBNYXRoLm1heCgwLCBpdGVtTWV0YWRhdGEub2Zmc2V0IC0gc2l6ZSArIHNjcm9sbGJhclNpemUgKyBpdGVtTWV0YWRhdGEuc2l6ZSk7XG5cbiAgaWYgKGFsaWduID09PSAnc21hcnQnKSB7XG4gICAgaWYgKHNjcm9sbE9mZnNldCA+PSBtaW5PZmZzZXQgLSBzaXplICYmIHNjcm9sbE9mZnNldCA8PSBtYXhPZmZzZXQgKyBzaXplKSB7XG4gICAgICBhbGlnbiA9ICdhdXRvJztcbiAgICB9IGVsc2Uge1xuICAgICAgYWxpZ24gPSAnY2VudGVyJztcbiAgICB9XG4gIH1cblxuICBzd2l0Y2ggKGFsaWduKSB7XG4gICAgY2FzZSAnc3RhcnQnOlxuICAgICAgcmV0dXJuIG1heE9mZnNldDtcblxuICAgIGNhc2UgJ2VuZCc6XG4gICAgICByZXR1cm4gbWluT2Zmc2V0O1xuXG4gICAgY2FzZSAnY2VudGVyJzpcbiAgICAgIHJldHVybiBNYXRoLnJvdW5kKG1pbk9mZnNldCArIChtYXhPZmZzZXQgLSBtaW5PZmZzZXQpIC8gMik7XG5cbiAgICBjYXNlICdhdXRvJzpcbiAgICBkZWZhdWx0OlxuICAgICAgaWYgKHNjcm9sbE9mZnNldCA+PSBtaW5PZmZzZXQgJiYgc2Nyb2xsT2Zmc2V0IDw9IG1heE9mZnNldCkge1xuICAgICAgICByZXR1cm4gc2Nyb2xsT2Zmc2V0O1xuICAgICAgfSBlbHNlIGlmIChtaW5PZmZzZXQgPiBtYXhPZmZzZXQpIHtcbiAgICAgICAgLy8gQmVjYXVzZSB3ZSBvbmx5IHRha2UgaW50byBhY2NvdW50IHRoZSBzY3JvbGxiYXIgc2l6ZSB3aGVuIGNhbGN1bGF0aW5nIG1pbk9mZnNldFxuICAgICAgICAvLyB0aGlzIHZhbHVlIGNhbiBiZSBsYXJnZXIgdGhhbiBtYXhPZmZzZXQgd2hlbiBhdCB0aGUgZW5kIG9mIHRoZSBsaXN0XG4gICAgICAgIHJldHVybiBtaW5PZmZzZXQ7XG4gICAgICB9IGVsc2UgaWYgKHNjcm9sbE9mZnNldCA8IG1pbk9mZnNldCkge1xuICAgICAgICByZXR1cm4gbWluT2Zmc2V0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG1heE9mZnNldDtcbiAgICAgIH1cblxuICB9XG59O1xuXG52YXIgVmFyaWFibGVTaXplR3JpZCA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVHcmlkQ29tcG9uZW50KHtcbiAgZ2V0Q29sdW1uT2Zmc2V0OiBmdW5jdGlvbiBnZXRDb2x1bW5PZmZzZXQocHJvcHMsIGluZGV4LCBpbnN0YW5jZVByb3BzKSB7XG4gICAgcmV0dXJuIGdldEl0ZW1NZXRhZGF0YSgnY29sdW1uJywgcHJvcHMsIGluZGV4LCBpbnN0YW5jZVByb3BzKS5vZmZzZXQ7XG4gIH0sXG4gIGdldENvbHVtblN0YXJ0SW5kZXhGb3JPZmZzZXQ6IGZ1bmN0aW9uIGdldENvbHVtblN0YXJ0SW5kZXhGb3JPZmZzZXQocHJvcHMsIHNjcm9sbExlZnQsIGluc3RhbmNlUHJvcHMpIHtcbiAgICByZXR1cm4gZmluZE5lYXJlc3RJdGVtKCdjb2x1bW4nLCBwcm9wcywgaW5zdGFuY2VQcm9wcywgc2Nyb2xsTGVmdCk7XG4gIH0sXG4gIGdldENvbHVtblN0b3BJbmRleEZvclN0YXJ0SW5kZXg6IGZ1bmN0aW9uIGdldENvbHVtblN0b3BJbmRleEZvclN0YXJ0SW5kZXgocHJvcHMsIHN0YXJ0SW5kZXgsIHNjcm9sbExlZnQsIGluc3RhbmNlUHJvcHMpIHtcbiAgICB2YXIgY29sdW1uQ291bnQgPSBwcm9wcy5jb2x1bW5Db3VudCxcbiAgICAgICAgd2lkdGggPSBwcm9wcy53aWR0aDtcbiAgICB2YXIgaXRlbU1ldGFkYXRhID0gZ2V0SXRlbU1ldGFkYXRhKCdjb2x1bW4nLCBwcm9wcywgc3RhcnRJbmRleCwgaW5zdGFuY2VQcm9wcyk7XG4gICAgdmFyIG1heE9mZnNldCA9IHNjcm9sbExlZnQgKyB3aWR0aDtcbiAgICB2YXIgb2Zmc2V0ID0gaXRlbU1ldGFkYXRhLm9mZnNldCArIGl0ZW1NZXRhZGF0YS5zaXplO1xuICAgIHZhciBzdG9wSW5kZXggPSBzdGFydEluZGV4O1xuXG4gICAgd2hpbGUgKHN0b3BJbmRleCA8IGNvbHVtbkNvdW50IC0gMSAmJiBvZmZzZXQgPCBtYXhPZmZzZXQpIHtcbiAgICAgIHN0b3BJbmRleCsrO1xuICAgICAgb2Zmc2V0ICs9IGdldEl0ZW1NZXRhZGF0YSgnY29sdW1uJywgcHJvcHMsIHN0b3BJbmRleCwgaW5zdGFuY2VQcm9wcykuc2l6ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RvcEluZGV4O1xuICB9LFxuICBnZXRDb2x1bW5XaWR0aDogZnVuY3Rpb24gZ2V0Q29sdW1uV2lkdGgocHJvcHMsIGluZGV4LCBpbnN0YW5jZVByb3BzKSB7XG4gICAgcmV0dXJuIGluc3RhbmNlUHJvcHMuY29sdW1uTWV0YWRhdGFNYXBbaW5kZXhdLnNpemU7XG4gIH0sXG4gIGdldEVzdGltYXRlZFRvdGFsSGVpZ2h0OiBnZXRFc3RpbWF0ZWRUb3RhbEhlaWdodCxcbiAgZ2V0RXN0aW1hdGVkVG90YWxXaWR0aDogZ2V0RXN0aW1hdGVkVG90YWxXaWR0aCxcbiAgZ2V0T2Zmc2V0Rm9yQ29sdW1uQW5kQWxpZ25tZW50OiBmdW5jdGlvbiBnZXRPZmZzZXRGb3JDb2x1bW5BbmRBbGlnbm1lbnQocHJvcHMsIGluZGV4LCBhbGlnbiwgc2Nyb2xsT2Zmc2V0LCBpbnN0YW5jZVByb3BzLCBzY3JvbGxiYXJTaXplKSB7XG4gICAgcmV0dXJuIGdldE9mZnNldEZvckluZGV4QW5kQWxpZ25tZW50KCdjb2x1bW4nLCBwcm9wcywgaW5kZXgsIGFsaWduLCBzY3JvbGxPZmZzZXQsIGluc3RhbmNlUHJvcHMsIHNjcm9sbGJhclNpemUpO1xuICB9LFxuICBnZXRPZmZzZXRGb3JSb3dBbmRBbGlnbm1lbnQ6IGZ1bmN0aW9uIGdldE9mZnNldEZvclJvd0FuZEFsaWdubWVudChwcm9wcywgaW5kZXgsIGFsaWduLCBzY3JvbGxPZmZzZXQsIGluc3RhbmNlUHJvcHMsIHNjcm9sbGJhclNpemUpIHtcbiAgICByZXR1cm4gZ2V0T2Zmc2V0Rm9ySW5kZXhBbmRBbGlnbm1lbnQoJ3JvdycsIHByb3BzLCBpbmRleCwgYWxpZ24sIHNjcm9sbE9mZnNldCwgaW5zdGFuY2VQcm9wcywgc2Nyb2xsYmFyU2l6ZSk7XG4gIH0sXG4gIGdldFJvd09mZnNldDogZnVuY3Rpb24gZ2V0Um93T2Zmc2V0KHByb3BzLCBpbmRleCwgaW5zdGFuY2VQcm9wcykge1xuICAgIHJldHVybiBnZXRJdGVtTWV0YWRhdGEoJ3JvdycsIHByb3BzLCBpbmRleCwgaW5zdGFuY2VQcm9wcykub2Zmc2V0O1xuICB9LFxuICBnZXRSb3dIZWlnaHQ6IGZ1bmN0aW9uIGdldFJvd0hlaWdodChwcm9wcywgaW5kZXgsIGluc3RhbmNlUHJvcHMpIHtcbiAgICByZXR1cm4gaW5zdGFuY2VQcm9wcy5yb3dNZXRhZGF0YU1hcFtpbmRleF0uc2l6ZTtcbiAgfSxcbiAgZ2V0Um93U3RhcnRJbmRleEZvck9mZnNldDogZnVuY3Rpb24gZ2V0Um93U3RhcnRJbmRleEZvck9mZnNldChwcm9wcywgc2Nyb2xsVG9wLCBpbnN0YW5jZVByb3BzKSB7XG4gICAgcmV0dXJuIGZpbmROZWFyZXN0SXRlbSgncm93JywgcHJvcHMsIGluc3RhbmNlUHJvcHMsIHNjcm9sbFRvcCk7XG4gIH0sXG4gIGdldFJvd1N0b3BJbmRleEZvclN0YXJ0SW5kZXg6IGZ1bmN0aW9uIGdldFJvd1N0b3BJbmRleEZvclN0YXJ0SW5kZXgocHJvcHMsIHN0YXJ0SW5kZXgsIHNjcm9sbFRvcCwgaW5zdGFuY2VQcm9wcykge1xuICAgIHZhciByb3dDb3VudCA9IHByb3BzLnJvd0NvdW50LFxuICAgICAgICBoZWlnaHQgPSBwcm9wcy5oZWlnaHQ7XG4gICAgdmFyIGl0ZW1NZXRhZGF0YSA9IGdldEl0ZW1NZXRhZGF0YSgncm93JywgcHJvcHMsIHN0YXJ0SW5kZXgsIGluc3RhbmNlUHJvcHMpO1xuICAgIHZhciBtYXhPZmZzZXQgPSBzY3JvbGxUb3AgKyBoZWlnaHQ7XG4gICAgdmFyIG9mZnNldCA9IGl0ZW1NZXRhZGF0YS5vZmZzZXQgKyBpdGVtTWV0YWRhdGEuc2l6ZTtcbiAgICB2YXIgc3RvcEluZGV4ID0gc3RhcnRJbmRleDtcblxuICAgIHdoaWxlIChzdG9wSW5kZXggPCByb3dDb3VudCAtIDEgJiYgb2Zmc2V0IDwgbWF4T2Zmc2V0KSB7XG4gICAgICBzdG9wSW5kZXgrKztcbiAgICAgIG9mZnNldCArPSBnZXRJdGVtTWV0YWRhdGEoJ3JvdycsIHByb3BzLCBzdG9wSW5kZXgsIGluc3RhbmNlUHJvcHMpLnNpemU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0b3BJbmRleDtcbiAgfSxcbiAgaW5pdEluc3RhbmNlUHJvcHM6IGZ1bmN0aW9uIGluaXRJbnN0YW5jZVByb3BzKHByb3BzLCBpbnN0YW5jZSkge1xuICAgIHZhciBfcmVmNSA9IHByb3BzLFxuICAgICAgICBlc3RpbWF0ZWRDb2x1bW5XaWR0aCA9IF9yZWY1LmVzdGltYXRlZENvbHVtbldpZHRoLFxuICAgICAgICBlc3RpbWF0ZWRSb3dIZWlnaHQgPSBfcmVmNS5lc3RpbWF0ZWRSb3dIZWlnaHQ7XG4gICAgdmFyIGluc3RhbmNlUHJvcHMgPSB7XG4gICAgICBjb2x1bW5NZXRhZGF0YU1hcDoge30sXG4gICAgICBlc3RpbWF0ZWRDb2x1bW5XaWR0aDogZXN0aW1hdGVkQ29sdW1uV2lkdGggfHwgREVGQVVMVF9FU1RJTUFURURfSVRFTV9TSVpFLFxuICAgICAgZXN0aW1hdGVkUm93SGVpZ2h0OiBlc3RpbWF0ZWRSb3dIZWlnaHQgfHwgREVGQVVMVF9FU1RJTUFURURfSVRFTV9TSVpFLFxuICAgICAgbGFzdE1lYXN1cmVkQ29sdW1uSW5kZXg6IC0xLFxuICAgICAgbGFzdE1lYXN1cmVkUm93SW5kZXg6IC0xLFxuICAgICAgcm93TWV0YWRhdGFNYXA6IHt9XG4gICAgfTtcblxuICAgIGluc3RhbmNlLnJlc2V0QWZ0ZXJDb2x1bW5JbmRleCA9IGZ1bmN0aW9uIChjb2x1bW5JbmRleCwgc2hvdWxkRm9yY2VVcGRhdGUpIHtcbiAgICAgIGlmIChzaG91bGRGb3JjZVVwZGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHNob3VsZEZvcmNlVXBkYXRlID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaW5zdGFuY2UucmVzZXRBZnRlckluZGljZXMoe1xuICAgICAgICBjb2x1bW5JbmRleDogY29sdW1uSW5kZXgsXG4gICAgICAgIHNob3VsZEZvcmNlVXBkYXRlOiBzaG91bGRGb3JjZVVwZGF0ZVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGluc3RhbmNlLnJlc2V0QWZ0ZXJSb3dJbmRleCA9IGZ1bmN0aW9uIChyb3dJbmRleCwgc2hvdWxkRm9yY2VVcGRhdGUpIHtcbiAgICAgIGlmIChzaG91bGRGb3JjZVVwZGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHNob3VsZEZvcmNlVXBkYXRlID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaW5zdGFuY2UucmVzZXRBZnRlckluZGljZXMoe1xuICAgICAgICByb3dJbmRleDogcm93SW5kZXgsXG4gICAgICAgIHNob3VsZEZvcmNlVXBkYXRlOiBzaG91bGRGb3JjZVVwZGF0ZVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGluc3RhbmNlLnJlc2V0QWZ0ZXJJbmRpY2VzID0gZnVuY3Rpb24gKF9yZWY2KSB7XG4gICAgICB2YXIgY29sdW1uSW5kZXggPSBfcmVmNi5jb2x1bW5JbmRleCxcbiAgICAgICAgICByb3dJbmRleCA9IF9yZWY2LnJvd0luZGV4LFxuICAgICAgICAgIF9yZWY2JHNob3VsZEZvcmNlVXBkYSA9IF9yZWY2LnNob3VsZEZvcmNlVXBkYXRlLFxuICAgICAgICAgIHNob3VsZEZvcmNlVXBkYXRlID0gX3JlZjYkc2hvdWxkRm9yY2VVcGRhID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZjYkc2hvdWxkRm9yY2VVcGRhO1xuXG4gICAgICBpZiAodHlwZW9mIGNvbHVtbkluZGV4ID09PSAnbnVtYmVyJykge1xuICAgICAgICBpbnN0YW5jZVByb3BzLmxhc3RNZWFzdXJlZENvbHVtbkluZGV4ID0gTWF0aC5taW4oaW5zdGFuY2VQcm9wcy5sYXN0TWVhc3VyZWRDb2x1bW5JbmRleCwgY29sdW1uSW5kZXggLSAxKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiByb3dJbmRleCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgaW5zdGFuY2VQcm9wcy5sYXN0TWVhc3VyZWRSb3dJbmRleCA9IE1hdGgubWluKGluc3RhbmNlUHJvcHMubGFzdE1lYXN1cmVkUm93SW5kZXgsIHJvd0luZGV4IC0gMSk7XG4gICAgICB9IC8vIFdlIGNvdWxkIHBvdGVudGlhbGx5IG9wdGltaXplIGZ1cnRoZXIgYnkgb25seSBldmljdGluZyBzdHlsZXMgYWZ0ZXIgdGhpcyBpbmRleCxcbiAgICAgIC8vIEJ1dCBzaW5jZSBzdHlsZXMgYXJlIG9ubHkgY2FjaGVkIHdoaWxlIHNjcm9sbGluZyBpcyBpbiBwcm9ncmVzcy1cbiAgICAgIC8vIEl0IHNlZW1zIGFuIHVubmVjZXNzYXJ5IG9wdGltaXphdGlvbi5cbiAgICAgIC8vIEl0J3MgdW5saWtlbHkgdGhhdCByZXNldEFmdGVySW5kZXgoKSB3aWxsIGJlIGNhbGxlZCB3aGlsZSBhIHVzZXIgaXMgc2Nyb2xsaW5nLlxuXG5cbiAgICAgIGluc3RhbmNlLl9nZXRJdGVtU3R5bGVDYWNoZSgtMSk7XG5cbiAgICAgIGlmIChzaG91bGRGb3JjZVVwZGF0ZSkge1xuICAgICAgICBpbnN0YW5jZS5mb3JjZVVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gaW5zdGFuY2VQcm9wcztcbiAgfSxcbiAgc2hvdWxkUmVzZXRTdHlsZUNhY2hlT25JdGVtU2l6ZUNoYW5nZTogZmFsc2UsXG4gIHZhbGlkYXRlUHJvcHM6IGZ1bmN0aW9uIHZhbGlkYXRlUHJvcHMoX3JlZjcpIHtcbiAgICB2YXIgY29sdW1uV2lkdGggPSBfcmVmNy5jb2x1bW5XaWR0aCxcbiAgICAgICAgcm93SGVpZ2h0ID0gX3JlZjcucm93SGVpZ2h0O1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICh0eXBlb2YgY29sdW1uV2lkdGggIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ0FuIGludmFsaWQgXCJjb2x1bW5XaWR0aFwiIHByb3AgaGFzIGJlZW4gc3BlY2lmaWVkLiAnICsgJ1ZhbHVlIHNob3VsZCBiZSBhIGZ1bmN0aW9uLiAnICsgKFwiXFxcIlwiICsgKGNvbHVtbldpZHRoID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIGNvbHVtbldpZHRoKSArIFwiXFxcIiB3YXMgc3BlY2lmaWVkLlwiKSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiByb3dIZWlnaHQgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ0FuIGludmFsaWQgXCJyb3dIZWlnaHRcIiBwcm9wIGhhcyBiZWVuIHNwZWNpZmllZC4gJyArICdWYWx1ZSBzaG91bGQgYmUgYSBmdW5jdGlvbi4gJyArIChcIlxcXCJcIiArIChyb3dIZWlnaHQgPT09IG51bGwgPyAnbnVsbCcgOiB0eXBlb2Ygcm93SGVpZ2h0KSArIFwiXFxcIiB3YXMgc3BlY2lmaWVkLlwiKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59KTtcblxudmFyIElTX1NDUk9MTElOR19ERUJPVU5DRV9JTlRFUlZBTCQxID0gMTUwO1xuXG52YXIgZGVmYXVsdEl0ZW1LZXkkMSA9IGZ1bmN0aW9uIGRlZmF1bHRJdGVtS2V5KGluZGV4LCBkYXRhKSB7XG4gIHJldHVybiBpbmRleDtcbn07IC8vIEluIERFViBtb2RlLCB0aGlzIFNldCBoZWxwcyB1cyBvbmx5IGxvZyBhIHdhcm5pbmcgb25jZSBwZXIgY29tcG9uZW50IGluc3RhbmNlLlxuLy8gVGhpcyBhdm9pZHMgc3BhbW1pbmcgdGhlIGNvbnNvbGUgZXZlcnkgdGltZSBhIHJlbmRlciBoYXBwZW5zLlxuXG5cbnZhciBkZXZXYXJuaW5nc0RpcmVjdGlvbiA9IG51bGw7XG52YXIgZGV2V2FybmluZ3NUYWdOYW1lJDEgPSBudWxsO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5XZWFrU2V0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIGRldldhcm5pbmdzRGlyZWN0aW9uID1cbiAgICAvKiNfX1BVUkVfXyovXG4gICAgbmV3IFdlYWtTZXQoKTtcbiAgICBkZXZXYXJuaW5nc1RhZ05hbWUkMSA9XG4gICAgLyojX19QVVJFX18qL1xuICAgIG5ldyBXZWFrU2V0KCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlTGlzdENvbXBvbmVudChfcmVmKSB7XG4gIHZhciBfY2xhc3MsIF90ZW1wO1xuXG4gIHZhciBnZXRJdGVtT2Zmc2V0ID0gX3JlZi5nZXRJdGVtT2Zmc2V0LFxuICAgICAgZ2V0RXN0aW1hdGVkVG90YWxTaXplID0gX3JlZi5nZXRFc3RpbWF0ZWRUb3RhbFNpemUsXG4gICAgICBnZXRJdGVtU2l6ZSA9IF9yZWYuZ2V0SXRlbVNpemUsXG4gICAgICBnZXRPZmZzZXRGb3JJbmRleEFuZEFsaWdubWVudCA9IF9yZWYuZ2V0T2Zmc2V0Rm9ySW5kZXhBbmRBbGlnbm1lbnQsXG4gICAgICBnZXRTdGFydEluZGV4Rm9yT2Zmc2V0ID0gX3JlZi5nZXRTdGFydEluZGV4Rm9yT2Zmc2V0LFxuICAgICAgZ2V0U3RvcEluZGV4Rm9yU3RhcnRJbmRleCA9IF9yZWYuZ2V0U3RvcEluZGV4Rm9yU3RhcnRJbmRleCxcbiAgICAgIGluaXRJbnN0YW5jZVByb3BzID0gX3JlZi5pbml0SW5zdGFuY2VQcm9wcyxcbiAgICAgIHNob3VsZFJlc2V0U3R5bGVDYWNoZU9uSXRlbVNpemVDaGFuZ2UgPSBfcmVmLnNob3VsZFJlc2V0U3R5bGVDYWNoZU9uSXRlbVNpemVDaGFuZ2UsXG4gICAgICB2YWxpZGF0ZVByb3BzID0gX3JlZi52YWxpZGF0ZVByb3BzO1xuICByZXR1cm4gX3RlbXAgPSBfY2xhc3MgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uIChfUHVyZUNvbXBvbmVudCkge1xuICAgIF9pbmhlcml0c0xvb3NlKExpc3QsIF9QdXJlQ29tcG9uZW50KTtcblxuICAgIC8vIEFsd2F5cyB1c2UgZXhwbGljaXQgY29uc3RydWN0b3IgZm9yIFJlYWN0IGNvbXBvbmVudHMuXG4gICAgLy8gSXQgcHJvZHVjZXMgbGVzcyBjb2RlIGFmdGVyIHRyYW5zcGlsYXRpb24uICgjMjYpXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtY29uc3RydWN0b3JcbiAgICBmdW5jdGlvbiBMaXN0KHByb3BzKSB7XG4gICAgICB2YXIgX3RoaXM7XG5cbiAgICAgIF90aGlzID0gX1B1cmVDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcbiAgICAgIF90aGlzLl9pbnN0YW5jZVByb3BzID0gaW5pdEluc3RhbmNlUHJvcHMoX3RoaXMucHJvcHMsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpKTtcbiAgICAgIF90aGlzLl9vdXRlclJlZiA9IHZvaWQgMDtcbiAgICAgIF90aGlzLl9yZXNldElzU2Nyb2xsaW5nVGltZW91dElkID0gbnVsbDtcbiAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICBpbnN0YW5jZTogX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksXG4gICAgICAgIGlzU2Nyb2xsaW5nOiBmYWxzZSxcbiAgICAgICAgc2Nyb2xsRGlyZWN0aW9uOiAnZm9yd2FyZCcsXG4gICAgICAgIHNjcm9sbE9mZnNldDogdHlwZW9mIF90aGlzLnByb3BzLmluaXRpYWxTY3JvbGxPZmZzZXQgPT09ICdudW1iZXInID8gX3RoaXMucHJvcHMuaW5pdGlhbFNjcm9sbE9mZnNldCA6IDAsXG4gICAgICAgIHNjcm9sbFVwZGF0ZVdhc1JlcXVlc3RlZDogZmFsc2VcbiAgICAgIH07XG4gICAgICBfdGhpcy5fY2FsbE9uSXRlbXNSZW5kZXJlZCA9IHZvaWQgMDtcbiAgICAgIF90aGlzLl9jYWxsT25JdGVtc1JlbmRlcmVkID0gbWVtb2l6ZU9uZShmdW5jdGlvbiAob3ZlcnNjYW5TdGFydEluZGV4LCBvdmVyc2NhblN0b3BJbmRleCwgdmlzaWJsZVN0YXJ0SW5kZXgsIHZpc2libGVTdG9wSW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLnByb3BzLm9uSXRlbXNSZW5kZXJlZCh7XG4gICAgICAgICAgb3ZlcnNjYW5TdGFydEluZGV4OiBvdmVyc2NhblN0YXJ0SW5kZXgsXG4gICAgICAgICAgb3ZlcnNjYW5TdG9wSW5kZXg6IG92ZXJzY2FuU3RvcEluZGV4LFxuICAgICAgICAgIHZpc2libGVTdGFydEluZGV4OiB2aXNpYmxlU3RhcnRJbmRleCxcbiAgICAgICAgICB2aXNpYmxlU3RvcEluZGV4OiB2aXNpYmxlU3RvcEluZGV4XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICBfdGhpcy5fY2FsbE9uU2Nyb2xsID0gdm9pZCAwO1xuICAgICAgX3RoaXMuX2NhbGxPblNjcm9sbCA9IG1lbW9pemVPbmUoZnVuY3Rpb24gKHNjcm9sbERpcmVjdGlvbiwgc2Nyb2xsT2Zmc2V0LCBzY3JvbGxVcGRhdGVXYXNSZXF1ZXN0ZWQpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLnByb3BzLm9uU2Nyb2xsKHtcbiAgICAgICAgICBzY3JvbGxEaXJlY3Rpb246IHNjcm9sbERpcmVjdGlvbixcbiAgICAgICAgICBzY3JvbGxPZmZzZXQ6IHNjcm9sbE9mZnNldCxcbiAgICAgICAgICBzY3JvbGxVcGRhdGVXYXNSZXF1ZXN0ZWQ6IHNjcm9sbFVwZGF0ZVdhc1JlcXVlc3RlZFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgX3RoaXMuX2dldEl0ZW1TdHlsZSA9IHZvaWQgMDtcblxuICAgICAgX3RoaXMuX2dldEl0ZW1TdHlsZSA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIGRpcmVjdGlvbiA9IF90aGlzJHByb3BzLmRpcmVjdGlvbixcbiAgICAgICAgICAgIGl0ZW1TaXplID0gX3RoaXMkcHJvcHMuaXRlbVNpemUsXG4gICAgICAgICAgICBsYXlvdXQgPSBfdGhpcyRwcm9wcy5sYXlvdXQ7XG5cbiAgICAgICAgdmFyIGl0ZW1TdHlsZUNhY2hlID0gX3RoaXMuX2dldEl0ZW1TdHlsZUNhY2hlKHNob3VsZFJlc2V0U3R5bGVDYWNoZU9uSXRlbVNpemVDaGFuZ2UgJiYgaXRlbVNpemUsIHNob3VsZFJlc2V0U3R5bGVDYWNoZU9uSXRlbVNpemVDaGFuZ2UgJiYgbGF5b3V0LCBzaG91bGRSZXNldFN0eWxlQ2FjaGVPbkl0ZW1TaXplQ2hhbmdlICYmIGRpcmVjdGlvbik7XG5cbiAgICAgICAgdmFyIHN0eWxlO1xuXG4gICAgICAgIGlmIChpdGVtU3R5bGVDYWNoZS5oYXNPd25Qcm9wZXJ0eShpbmRleCkpIHtcbiAgICAgICAgICBzdHlsZSA9IGl0ZW1TdHlsZUNhY2hlW2luZGV4XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgX29mZnNldCA9IGdldEl0ZW1PZmZzZXQoX3RoaXMucHJvcHMsIGluZGV4LCBfdGhpcy5faW5zdGFuY2VQcm9wcyk7XG5cbiAgICAgICAgICB2YXIgc2l6ZSA9IGdldEl0ZW1TaXplKF90aGlzLnByb3BzLCBpbmRleCwgX3RoaXMuX2luc3RhbmNlUHJvcHMpOyAvLyBUT0RPIERlcHJlY2F0ZSBkaXJlY3Rpb24gXCJob3Jpem9udGFsXCJcblxuICAgICAgICAgIHZhciBpc0hvcml6b250YWwgPSBkaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyB8fCBsYXlvdXQgPT09ICdob3Jpem9udGFsJztcbiAgICAgICAgICB2YXIgaXNSdGwgPSBkaXJlY3Rpb24gPT09ICdydGwnO1xuICAgICAgICAgIHZhciBvZmZzZXRIb3Jpem9udGFsID0gaXNIb3Jpem9udGFsID8gX29mZnNldCA6IDA7XG4gICAgICAgICAgaXRlbVN0eWxlQ2FjaGVbaW5kZXhdID0gc3R5bGUgPSB7XG4gICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgIGxlZnQ6IGlzUnRsID8gdW5kZWZpbmVkIDogb2Zmc2V0SG9yaXpvbnRhbCxcbiAgICAgICAgICAgIHJpZ2h0OiBpc1J0bCA/IG9mZnNldEhvcml6b250YWwgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB0b3A6ICFpc0hvcml6b250YWwgPyBfb2Zmc2V0IDogMCxcbiAgICAgICAgICAgIGhlaWdodDogIWlzSG9yaXpvbnRhbCA/IHNpemUgOiAnMTAwJScsXG4gICAgICAgICAgICB3aWR0aDogaXNIb3Jpem9udGFsID8gc2l6ZSA6ICcxMDAlJ1xuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc3R5bGU7XG4gICAgICB9O1xuXG4gICAgICBfdGhpcy5fZ2V0SXRlbVN0eWxlQ2FjaGUgPSB2b2lkIDA7XG4gICAgICBfdGhpcy5fZ2V0SXRlbVN0eWxlQ2FjaGUgPSBtZW1vaXplT25lKGZ1bmN0aW9uIChfLCBfXywgX19fKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpcy5fb25TY3JvbGxIb3Jpem9udGFsID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHZhciBfZXZlbnQkY3VycmVudFRhcmdldCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQsXG4gICAgICAgICAgICBjbGllbnRXaWR0aCA9IF9ldmVudCRjdXJyZW50VGFyZ2V0LmNsaWVudFdpZHRoLFxuICAgICAgICAgICAgc2Nyb2xsTGVmdCA9IF9ldmVudCRjdXJyZW50VGFyZ2V0LnNjcm9sbExlZnQsXG4gICAgICAgICAgICBzY3JvbGxXaWR0aCA9IF9ldmVudCRjdXJyZW50VGFyZ2V0LnNjcm9sbFdpZHRoO1xuXG4gICAgICAgIF90aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChwcmV2U3RhdGUpIHtcbiAgICAgICAgICBpZiAocHJldlN0YXRlLnNjcm9sbE9mZnNldCA9PT0gc2Nyb2xsTGVmdCkge1xuICAgICAgICAgICAgLy8gU2Nyb2xsIHBvc2l0aW9uIG1heSBoYXZlIGJlZW4gdXBkYXRlZCBieSBjRE0vY0RVLFxuICAgICAgICAgICAgLy8gSW4gd2hpY2ggY2FzZSB3ZSBkb24ndCBuZWVkIHRvIHRyaWdnZXIgYW5vdGhlciByZW5kZXIsXG4gICAgICAgICAgICAvLyBBbmQgd2UgZG9uJ3Qgd2FudCB0byB1cGRhdGUgc3RhdGUuaXNTY3JvbGxpbmcuXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgZGlyZWN0aW9uID0gX3RoaXMucHJvcHMuZGlyZWN0aW9uO1xuICAgICAgICAgIHZhciBzY3JvbGxPZmZzZXQgPSBzY3JvbGxMZWZ0O1xuXG4gICAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ3J0bCcpIHtcbiAgICAgICAgICAgIC8vIFRSSUNLWSBBY2NvcmRpbmcgdG8gdGhlIHNwZWMsIHNjcm9sbExlZnQgc2hvdWxkIGJlIG5lZ2F0aXZlIGZvciBSVEwgYWxpZ25lZCBlbGVtZW50cy5cbiAgICAgICAgICAgIC8vIFRoaXMgaXMgbm90IHRoZSBjYXNlIGZvciBhbGwgYnJvd3NlcnMgdGhvdWdoIChlLmcuIENocm9tZSByZXBvcnRzIHZhbHVlcyBhcyBwb3NpdGl2ZSwgbWVhc3VyZWQgcmVsYXRpdmUgdG8gdGhlIGxlZnQpLlxuICAgICAgICAgICAgLy8gSXQncyBhbHNvIGVhc2llciBmb3IgdGhpcyBjb21wb25lbnQgaWYgd2UgY29udmVydCBvZmZzZXRzIHRvIHRoZSBzYW1lIGZvcm1hdCBhcyB0aGV5IHdvdWxkIGJlIGluIGZvciBsdHIuXG4gICAgICAgICAgICAvLyBTbyB0aGUgc2ltcGxlc3Qgc29sdXRpb24gaXMgdG8gZGV0ZXJtaW5lIHdoaWNoIGJyb3dzZXIgYmVoYXZpb3Igd2UncmUgZGVhbGluZyB3aXRoLCBhbmQgY29udmVydCBiYXNlZCBvbiBpdC5cbiAgICAgICAgICAgIHN3aXRjaCAoZ2V0UlRMT2Zmc2V0VHlwZSgpKSB7XG4gICAgICAgICAgICAgIGNhc2UgJ25lZ2F0aXZlJzpcbiAgICAgICAgICAgICAgICBzY3JvbGxPZmZzZXQgPSAtc2Nyb2xsTGVmdDtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlICdwb3NpdGl2ZS1kZXNjZW5kaW5nJzpcbiAgICAgICAgICAgICAgICBzY3JvbGxPZmZzZXQgPSBzY3JvbGxXaWR0aCAtIGNsaWVudFdpZHRoIC0gc2Nyb2xsTGVmdDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IC8vIFByZXZlbnQgU2FmYXJpJ3MgZWxhc3RpYyBzY3JvbGxpbmcgZnJvbSBjYXVzaW5nIHZpc3VhbCBzaGFraW5nIHdoZW4gc2Nyb2xsaW5nIHBhc3QgYm91bmRzLlxuXG5cbiAgICAgICAgICBzY3JvbGxPZmZzZXQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihzY3JvbGxPZmZzZXQsIHNjcm9sbFdpZHRoIC0gY2xpZW50V2lkdGgpKTtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaXNTY3JvbGxpbmc6IHRydWUsXG4gICAgICAgICAgICBzY3JvbGxEaXJlY3Rpb246IHByZXZTdGF0ZS5zY3JvbGxPZmZzZXQgPCBzY3JvbGxMZWZ0ID8gJ2ZvcndhcmQnIDogJ2JhY2t3YXJkJyxcbiAgICAgICAgICAgIHNjcm9sbE9mZnNldDogc2Nyb2xsT2Zmc2V0LFxuICAgICAgICAgICAgc2Nyb2xsVXBkYXRlV2FzUmVxdWVzdGVkOiBmYWxzZVxuICAgICAgICAgIH07XG4gICAgICAgIH0sIF90aGlzLl9yZXNldElzU2Nyb2xsaW5nRGVib3VuY2VkKTtcbiAgICAgIH07XG5cbiAgICAgIF90aGlzLl9vblNjcm9sbFZlcnRpY2FsID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHZhciBfZXZlbnQkY3VycmVudFRhcmdldDIgPSBldmVudC5jdXJyZW50VGFyZ2V0LFxuICAgICAgICAgICAgY2xpZW50SGVpZ2h0ID0gX2V2ZW50JGN1cnJlbnRUYXJnZXQyLmNsaWVudEhlaWdodCxcbiAgICAgICAgICAgIHNjcm9sbEhlaWdodCA9IF9ldmVudCRjdXJyZW50VGFyZ2V0Mi5zY3JvbGxIZWlnaHQsXG4gICAgICAgICAgICBzY3JvbGxUb3AgPSBfZXZlbnQkY3VycmVudFRhcmdldDIuc2Nyb2xsVG9wO1xuXG4gICAgICAgIF90aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChwcmV2U3RhdGUpIHtcbiAgICAgICAgICBpZiAocHJldlN0YXRlLnNjcm9sbE9mZnNldCA9PT0gc2Nyb2xsVG9wKSB7XG4gICAgICAgICAgICAvLyBTY3JvbGwgcG9zaXRpb24gbWF5IGhhdmUgYmVlbiB1cGRhdGVkIGJ5IGNETS9jRFUsXG4gICAgICAgICAgICAvLyBJbiB3aGljaCBjYXNlIHdlIGRvbid0IG5lZWQgdG8gdHJpZ2dlciBhbm90aGVyIHJlbmRlcixcbiAgICAgICAgICAgIC8vIEFuZCB3ZSBkb24ndCB3YW50IHRvIHVwZGF0ZSBzdGF0ZS5pc1Njcm9sbGluZy5cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH0gLy8gUHJldmVudCBTYWZhcmkncyBlbGFzdGljIHNjcm9sbGluZyBmcm9tIGNhdXNpbmcgdmlzdWFsIHNoYWtpbmcgd2hlbiBzY3JvbGxpbmcgcGFzdCBib3VuZHMuXG5cblxuICAgICAgICAgIHZhciBzY3JvbGxPZmZzZXQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihzY3JvbGxUb3AsIHNjcm9sbEhlaWdodCAtIGNsaWVudEhlaWdodCkpO1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpc1Njcm9sbGluZzogdHJ1ZSxcbiAgICAgICAgICAgIHNjcm9sbERpcmVjdGlvbjogcHJldlN0YXRlLnNjcm9sbE9mZnNldCA8IHNjcm9sbE9mZnNldCA/ICdmb3J3YXJkJyA6ICdiYWNrd2FyZCcsXG4gICAgICAgICAgICBzY3JvbGxPZmZzZXQ6IHNjcm9sbE9mZnNldCxcbiAgICAgICAgICAgIHNjcm9sbFVwZGF0ZVdhc1JlcXVlc3RlZDogZmFsc2VcbiAgICAgICAgICB9O1xuICAgICAgICB9LCBfdGhpcy5fcmVzZXRJc1Njcm9sbGluZ0RlYm91bmNlZCk7XG4gICAgICB9O1xuXG4gICAgICBfdGhpcy5fb3V0ZXJSZWZTZXR0ZXIgPSBmdW5jdGlvbiAocmVmKSB7XG4gICAgICAgIHZhciBvdXRlclJlZiA9IF90aGlzLnByb3BzLm91dGVyUmVmO1xuICAgICAgICBfdGhpcy5fb3V0ZXJSZWYgPSByZWY7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBvdXRlclJlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIG91dGVyUmVmKHJlZik7XG4gICAgICAgIH0gZWxzZSBpZiAob3V0ZXJSZWYgIT0gbnVsbCAmJiB0eXBlb2Ygb3V0ZXJSZWYgPT09ICdvYmplY3QnICYmIG91dGVyUmVmLmhhc093blByb3BlcnR5KCdjdXJyZW50JykpIHtcbiAgICAgICAgICBvdXRlclJlZi5jdXJyZW50ID0gcmVmO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBfdGhpcy5fcmVzZXRJc1Njcm9sbGluZ0RlYm91bmNlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKF90aGlzLl9yZXNldElzU2Nyb2xsaW5nVGltZW91dElkICE9PSBudWxsKSB7XG4gICAgICAgICAgY2FuY2VsVGltZW91dChfdGhpcy5fcmVzZXRJc1Njcm9sbGluZ1RpbWVvdXRJZCk7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpcy5fcmVzZXRJc1Njcm9sbGluZ1RpbWVvdXRJZCA9IHJlcXVlc3RUaW1lb3V0KF90aGlzLl9yZXNldElzU2Nyb2xsaW5nLCBJU19TQ1JPTExJTkdfREVCT1VOQ0VfSU5URVJWQUwkMSk7XG4gICAgICB9O1xuXG4gICAgICBfdGhpcy5fcmVzZXRJc1Njcm9sbGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMuX3Jlc2V0SXNTY3JvbGxpbmdUaW1lb3V0SWQgPSBudWxsO1xuXG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBpc1Njcm9sbGluZzogZmFsc2VcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIC8vIENsZWFyIHN0eWxlIGNhY2hlIGFmdGVyIHN0YXRlIHVwZGF0ZSBoYXMgYmVlbiBjb21taXR0ZWQuXG4gICAgICAgICAgLy8gVGhpcyB3YXkgd2UgZG9uJ3QgYnJlYWsgcHVyZSBzQ1UgZm9yIGl0ZW1zIHRoYXQgZG9uJ3QgdXNlIGlzU2Nyb2xsaW5nIHBhcmFtLlxuICAgICAgICAgIF90aGlzLl9nZXRJdGVtU3R5bGVDYWNoZSgtMSwgbnVsbCk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIExpc3QuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgICB2YWxpZGF0ZVNoYXJlZFByb3BzJDEobmV4dFByb3BzLCBwcmV2U3RhdGUpO1xuICAgICAgdmFsaWRhdGVQcm9wcyhuZXh0UHJvcHMpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcblxuICAgIHZhciBfcHJvdG8gPSBMaXN0LnByb3RvdHlwZTtcblxuICAgIF9wcm90by5zY3JvbGxUbyA9IGZ1bmN0aW9uIHNjcm9sbFRvKHNjcm9sbE9mZnNldCkge1xuICAgICAgc2Nyb2xsT2Zmc2V0ID0gTWF0aC5tYXgoMCwgc2Nyb2xsT2Zmc2V0KTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKHByZXZTdGF0ZSkge1xuICAgICAgICBpZiAocHJldlN0YXRlLnNjcm9sbE9mZnNldCA9PT0gc2Nyb2xsT2Zmc2V0KSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHNjcm9sbERpcmVjdGlvbjogcHJldlN0YXRlLnNjcm9sbE9mZnNldCA8IHNjcm9sbE9mZnNldCA/ICdmb3J3YXJkJyA6ICdiYWNrd2FyZCcsXG4gICAgICAgICAgc2Nyb2xsT2Zmc2V0OiBzY3JvbGxPZmZzZXQsXG4gICAgICAgICAgc2Nyb2xsVXBkYXRlV2FzUmVxdWVzdGVkOiB0cnVlXG4gICAgICAgIH07XG4gICAgICB9LCB0aGlzLl9yZXNldElzU2Nyb2xsaW5nRGVib3VuY2VkKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLnNjcm9sbFRvSXRlbSA9IGZ1bmN0aW9uIHNjcm9sbFRvSXRlbShpbmRleCwgYWxpZ24pIHtcbiAgICAgIGlmIChhbGlnbiA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGFsaWduID0gJ2F1dG8nO1xuICAgICAgfVxuXG4gICAgICB2YXIgaXRlbUNvdW50ID0gdGhpcy5wcm9wcy5pdGVtQ291bnQ7XG4gICAgICB2YXIgc2Nyb2xsT2Zmc2V0ID0gdGhpcy5zdGF0ZS5zY3JvbGxPZmZzZXQ7XG4gICAgICBpbmRleCA9IE1hdGgubWF4KDAsIE1hdGgubWluKGluZGV4LCBpdGVtQ291bnQgLSAxKSk7XG4gICAgICB0aGlzLnNjcm9sbFRvKGdldE9mZnNldEZvckluZGV4QW5kQWxpZ25tZW50KHRoaXMucHJvcHMsIGluZGV4LCBhbGlnbiwgc2Nyb2xsT2Zmc2V0LCB0aGlzLl9pbnN0YW5jZVByb3BzKSk7XG4gICAgfTtcblxuICAgIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgZGlyZWN0aW9uID0gX3RoaXMkcHJvcHMyLmRpcmVjdGlvbixcbiAgICAgICAgICBpbml0aWFsU2Nyb2xsT2Zmc2V0ID0gX3RoaXMkcHJvcHMyLmluaXRpYWxTY3JvbGxPZmZzZXQsXG4gICAgICAgICAgbGF5b3V0ID0gX3RoaXMkcHJvcHMyLmxheW91dDtcblxuICAgICAgaWYgKHR5cGVvZiBpbml0aWFsU2Nyb2xsT2Zmc2V0ID09PSAnbnVtYmVyJyAmJiB0aGlzLl9vdXRlclJlZiAhPSBudWxsKSB7XG4gICAgICAgIHZhciBvdXRlclJlZiA9IHRoaXMuX291dGVyUmVmOyAvLyBUT0RPIERlcHJlY2F0ZSBkaXJlY3Rpb24gXCJob3Jpem9udGFsXCJcblxuICAgICAgICBpZiAoZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcgfHwgbGF5b3V0ID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgICBvdXRlclJlZi5zY3JvbGxMZWZ0ID0gaW5pdGlhbFNjcm9sbE9mZnNldDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXRlclJlZi5zY3JvbGxUb3AgPSBpbml0aWFsU2Nyb2xsT2Zmc2V0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2NhbGxQcm9wc0NhbGxiYWNrcygpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgZGlyZWN0aW9uID0gX3RoaXMkcHJvcHMzLmRpcmVjdGlvbixcbiAgICAgICAgICBsYXlvdXQgPSBfdGhpcyRwcm9wczMubGF5b3V0O1xuICAgICAgdmFyIF90aGlzJHN0YXRlID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICBzY3JvbGxPZmZzZXQgPSBfdGhpcyRzdGF0ZS5zY3JvbGxPZmZzZXQsXG4gICAgICAgICAgc2Nyb2xsVXBkYXRlV2FzUmVxdWVzdGVkID0gX3RoaXMkc3RhdGUuc2Nyb2xsVXBkYXRlV2FzUmVxdWVzdGVkO1xuXG4gICAgICBpZiAoc2Nyb2xsVXBkYXRlV2FzUmVxdWVzdGVkICYmIHRoaXMuX291dGVyUmVmICE9IG51bGwpIHtcbiAgICAgICAgdmFyIG91dGVyUmVmID0gdGhpcy5fb3V0ZXJSZWY7IC8vIFRPRE8gRGVwcmVjYXRlIGRpcmVjdGlvbiBcImhvcml6b250YWxcIlxuXG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyB8fCBsYXlvdXQgPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICAgIGlmIChkaXJlY3Rpb24gPT09ICdydGwnKSB7XG4gICAgICAgICAgICAvLyBUUklDS1kgQWNjb3JkaW5nIHRvIHRoZSBzcGVjLCBzY3JvbGxMZWZ0IHNob3VsZCBiZSBuZWdhdGl2ZSBmb3IgUlRMIGFsaWduZWQgZWxlbWVudHMuXG4gICAgICAgICAgICAvLyBUaGlzIGlzIG5vdCB0aGUgY2FzZSBmb3IgYWxsIGJyb3dzZXJzIHRob3VnaCAoZS5nLiBDaHJvbWUgcmVwb3J0cyB2YWx1ZXMgYXMgcG9zaXRpdmUsIG1lYXN1cmVkIHJlbGF0aXZlIHRvIHRoZSBsZWZ0KS5cbiAgICAgICAgICAgIC8vIFNvIHdlIG5lZWQgdG8gZGV0ZXJtaW5lIHdoaWNoIGJyb3dzZXIgYmVoYXZpb3Igd2UncmUgZGVhbGluZyB3aXRoLCBhbmQgbWltaWMgaXQuXG4gICAgICAgICAgICBzd2l0Y2ggKGdldFJUTE9mZnNldFR5cGUoKSkge1xuICAgICAgICAgICAgICBjYXNlICduZWdhdGl2ZSc6XG4gICAgICAgICAgICAgICAgb3V0ZXJSZWYuc2Nyb2xsTGVmdCA9IC1zY3JvbGxPZmZzZXQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSAncG9zaXRpdmUtYXNjZW5kaW5nJzpcbiAgICAgICAgICAgICAgICBvdXRlclJlZi5zY3JvbGxMZWZ0ID0gc2Nyb2xsT2Zmc2V0O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdmFyIGNsaWVudFdpZHRoID0gb3V0ZXJSZWYuY2xpZW50V2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbFdpZHRoID0gb3V0ZXJSZWYuc2Nyb2xsV2lkdGg7XG4gICAgICAgICAgICAgICAgb3V0ZXJSZWYuc2Nyb2xsTGVmdCA9IHNjcm9sbFdpZHRoIC0gY2xpZW50V2lkdGggLSBzY3JvbGxPZmZzZXQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG91dGVyUmVmLnNjcm9sbExlZnQgPSBzY3JvbGxPZmZzZXQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dGVyUmVmLnNjcm9sbFRvcCA9IHNjcm9sbE9mZnNldDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9jYWxsUHJvcHNDYWxsYmFja3MoKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5fcmVzZXRJc1Njcm9sbGluZ1RpbWVvdXRJZCAhPT0gbnVsbCkge1xuICAgICAgICBjYW5jZWxUaW1lb3V0KHRoaXMuX3Jlc2V0SXNTY3JvbGxpbmdUaW1lb3V0SWQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzNCA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wczQuY2hpbGRyZW4sXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHM0LmNsYXNzTmFtZSxcbiAgICAgICAgICBkaXJlY3Rpb24gPSBfdGhpcyRwcm9wczQuZGlyZWN0aW9uLFxuICAgICAgICAgIGhlaWdodCA9IF90aGlzJHByb3BzNC5oZWlnaHQsXG4gICAgICAgICAgaW5uZXJSZWYgPSBfdGhpcyRwcm9wczQuaW5uZXJSZWYsXG4gICAgICAgICAgaW5uZXJFbGVtZW50VHlwZSA9IF90aGlzJHByb3BzNC5pbm5lckVsZW1lbnRUeXBlLFxuICAgICAgICAgIGlubmVyVGFnTmFtZSA9IF90aGlzJHByb3BzNC5pbm5lclRhZ05hbWUsXG4gICAgICAgICAgaXRlbUNvdW50ID0gX3RoaXMkcHJvcHM0Lml0ZW1Db3VudCxcbiAgICAgICAgICBpdGVtRGF0YSA9IF90aGlzJHByb3BzNC5pdGVtRGF0YSxcbiAgICAgICAgICBfdGhpcyRwcm9wczQkaXRlbUtleSA9IF90aGlzJHByb3BzNC5pdGVtS2V5LFxuICAgICAgICAgIGl0ZW1LZXkgPSBfdGhpcyRwcm9wczQkaXRlbUtleSA9PT0gdm9pZCAwID8gZGVmYXVsdEl0ZW1LZXkkMSA6IF90aGlzJHByb3BzNCRpdGVtS2V5LFxuICAgICAgICAgIGxheW91dCA9IF90aGlzJHByb3BzNC5sYXlvdXQsXG4gICAgICAgICAgb3V0ZXJFbGVtZW50VHlwZSA9IF90aGlzJHByb3BzNC5vdXRlckVsZW1lbnRUeXBlLFxuICAgICAgICAgIG91dGVyVGFnTmFtZSA9IF90aGlzJHByb3BzNC5vdXRlclRhZ05hbWUsXG4gICAgICAgICAgc3R5bGUgPSBfdGhpcyRwcm9wczQuc3R5bGUsXG4gICAgICAgICAgdXNlSXNTY3JvbGxpbmcgPSBfdGhpcyRwcm9wczQudXNlSXNTY3JvbGxpbmcsXG4gICAgICAgICAgd2lkdGggPSBfdGhpcyRwcm9wczQud2lkdGg7XG4gICAgICB2YXIgaXNTY3JvbGxpbmcgPSB0aGlzLnN0YXRlLmlzU2Nyb2xsaW5nOyAvLyBUT0RPIERlcHJlY2F0ZSBkaXJlY3Rpb24gXCJob3Jpem9udGFsXCJcblxuICAgICAgdmFyIGlzSG9yaXpvbnRhbCA9IGRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnIHx8IGxheW91dCA9PT0gJ2hvcml6b250YWwnO1xuICAgICAgdmFyIG9uU2Nyb2xsID0gaXNIb3Jpem9udGFsID8gdGhpcy5fb25TY3JvbGxIb3Jpem9udGFsIDogdGhpcy5fb25TY3JvbGxWZXJ0aWNhbDtcblxuICAgICAgdmFyIF90aGlzJF9nZXRSYW5nZVRvUmVuZCA9IHRoaXMuX2dldFJhbmdlVG9SZW5kZXIoKSxcbiAgICAgICAgICBzdGFydEluZGV4ID0gX3RoaXMkX2dldFJhbmdlVG9SZW5kWzBdLFxuICAgICAgICAgIHN0b3BJbmRleCA9IF90aGlzJF9nZXRSYW5nZVRvUmVuZFsxXTtcblxuICAgICAgdmFyIGl0ZW1zID0gW107XG5cbiAgICAgIGlmIChpdGVtQ291bnQgPiAwKSB7XG4gICAgICAgIGZvciAodmFyIF9pbmRleCA9IHN0YXJ0SW5kZXg7IF9pbmRleCA8PSBzdG9wSW5kZXg7IF9pbmRleCsrKSB7XG4gICAgICAgICAgaXRlbXMucHVzaChjcmVhdGVFbGVtZW50KGNoaWxkcmVuLCB7XG4gICAgICAgICAgICBkYXRhOiBpdGVtRGF0YSxcbiAgICAgICAgICAgIGtleTogaXRlbUtleShfaW5kZXgsIGl0ZW1EYXRhKSxcbiAgICAgICAgICAgIGluZGV4OiBfaW5kZXgsXG4gICAgICAgICAgICBpc1Njcm9sbGluZzogdXNlSXNTY3JvbGxpbmcgPyBpc1Njcm9sbGluZyA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHN0eWxlOiB0aGlzLl9nZXRJdGVtU3R5bGUoX2luZGV4KVxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgICAgfSAvLyBSZWFkIHRoaXMgdmFsdWUgQUZURVIgaXRlbXMgaGF2ZSBiZWVuIGNyZWF0ZWQsXG4gICAgICAvLyBTbyB0aGVpciBhY3R1YWwgc2l6ZXMgKGlmIHZhcmlhYmxlKSBhcmUgdGFrZW4gaW50byBjb25zaWRlcmF0aW9uLlxuXG5cbiAgICAgIHZhciBlc3RpbWF0ZWRUb3RhbFNpemUgPSBnZXRFc3RpbWF0ZWRUb3RhbFNpemUodGhpcy5wcm9wcywgdGhpcy5faW5zdGFuY2VQcm9wcyk7XG4gICAgICByZXR1cm4gY3JlYXRlRWxlbWVudChvdXRlckVsZW1lbnRUeXBlIHx8IG91dGVyVGFnTmFtZSB8fCAnZGl2Jywge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgICAgb25TY3JvbGw6IG9uU2Nyb2xsLFxuICAgICAgICByZWY6IHRoaXMuX291dGVyUmVmU2V0dGVyLFxuICAgICAgICBzdHlsZTogX2V4dGVuZHMoe1xuICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgICBvdmVyZmxvdzogJ2F1dG8nLFxuICAgICAgICAgIFdlYmtpdE92ZXJmbG93U2Nyb2xsaW5nOiAndG91Y2gnLFxuICAgICAgICAgIHdpbGxDaGFuZ2U6ICd0cmFuc2Zvcm0nLFxuICAgICAgICAgIGRpcmVjdGlvbjogZGlyZWN0aW9uXG4gICAgICAgIH0sIHN0eWxlKVxuICAgICAgfSwgY3JlYXRlRWxlbWVudChpbm5lckVsZW1lbnRUeXBlIHx8IGlubmVyVGFnTmFtZSB8fCAnZGl2Jywge1xuICAgICAgICBjaGlsZHJlbjogaXRlbXMsXG4gICAgICAgIHJlZjogaW5uZXJSZWYsXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgaGVpZ2h0OiBpc0hvcml6b250YWwgPyAnMTAwJScgOiBlc3RpbWF0ZWRUb3RhbFNpemUsXG4gICAgICAgICAgcG9pbnRlckV2ZW50czogaXNTY3JvbGxpbmcgPyAnbm9uZScgOiB1bmRlZmluZWQsXG4gICAgICAgICAgd2lkdGg6IGlzSG9yaXpvbnRhbCA/IGVzdGltYXRlZFRvdGFsU2l6ZSA6ICcxMDAlJ1xuICAgICAgICB9XG4gICAgICB9KSk7XG4gICAgfTtcblxuICAgIF9wcm90by5fY2FsbFByb3BzQ2FsbGJhY2tzID0gZnVuY3Rpb24gX2NhbGxQcm9wc0NhbGxiYWNrcygpIHtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5wcm9wcy5vbkl0ZW1zUmVuZGVyZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFyIGl0ZW1Db3VudCA9IHRoaXMucHJvcHMuaXRlbUNvdW50O1xuXG4gICAgICAgIGlmIChpdGVtQ291bnQgPiAwKSB7XG4gICAgICAgICAgdmFyIF90aGlzJF9nZXRSYW5nZVRvUmVuZDIgPSB0aGlzLl9nZXRSYW5nZVRvUmVuZGVyKCksXG4gICAgICAgICAgICAgIF9vdmVyc2NhblN0YXJ0SW5kZXggPSBfdGhpcyRfZ2V0UmFuZ2VUb1JlbmQyWzBdLFxuICAgICAgICAgICAgICBfb3ZlcnNjYW5TdG9wSW5kZXggPSBfdGhpcyRfZ2V0UmFuZ2VUb1JlbmQyWzFdLFxuICAgICAgICAgICAgICBfdmlzaWJsZVN0YXJ0SW5kZXggPSBfdGhpcyRfZ2V0UmFuZ2VUb1JlbmQyWzJdLFxuICAgICAgICAgICAgICBfdmlzaWJsZVN0b3BJbmRleCA9IF90aGlzJF9nZXRSYW5nZVRvUmVuZDJbM107XG5cbiAgICAgICAgICB0aGlzLl9jYWxsT25JdGVtc1JlbmRlcmVkKF9vdmVyc2NhblN0YXJ0SW5kZXgsIF9vdmVyc2NhblN0b3BJbmRleCwgX3Zpc2libGVTdGFydEluZGV4LCBfdmlzaWJsZVN0b3BJbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiB0aGlzLnByb3BzLm9uU2Nyb2xsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhciBfdGhpcyRzdGF0ZTIgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgICAgX3Njcm9sbERpcmVjdGlvbiA9IF90aGlzJHN0YXRlMi5zY3JvbGxEaXJlY3Rpb24sXG4gICAgICAgICAgICBfc2Nyb2xsT2Zmc2V0ID0gX3RoaXMkc3RhdGUyLnNjcm9sbE9mZnNldCxcbiAgICAgICAgICAgIF9zY3JvbGxVcGRhdGVXYXNSZXF1ZXN0ZWQgPSBfdGhpcyRzdGF0ZTIuc2Nyb2xsVXBkYXRlV2FzUmVxdWVzdGVkO1xuXG4gICAgICAgIHRoaXMuX2NhbGxPblNjcm9sbChfc2Nyb2xsRGlyZWN0aW9uLCBfc2Nyb2xsT2Zmc2V0LCBfc2Nyb2xsVXBkYXRlV2FzUmVxdWVzdGVkKTtcbiAgICAgIH1cbiAgICB9OyAvLyBMYXppbHkgY3JlYXRlIGFuZCBjYWNoZSBpdGVtIHN0eWxlcyB3aGlsZSBzY3JvbGxpbmcsXG4gICAgLy8gU28gdGhhdCBwdXJlIGNvbXBvbmVudCBzQ1Ugd2lsbCBwcmV2ZW50IHJlLXJlbmRlcnMuXG4gICAgLy8gV2UgbWFpbnRhaW4gdGhpcyBjYWNoZSwgYW5kIHBhc3MgYSBzdHlsZSBwcm9wIHJhdGhlciB0aGFuIGluZGV4LFxuICAgIC8vIFNvIHRoYXQgTGlzdCBjYW4gY2xlYXIgY2FjaGVkIHN0eWxlcyBhbmQgZm9yY2UgaXRlbSByZS1yZW5kZXIgaWYgbmVjZXNzYXJ5LlxuXG5cbiAgICBfcHJvdG8uX2dldFJhbmdlVG9SZW5kZXIgPSBmdW5jdGlvbiBfZ2V0UmFuZ2VUb1JlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczUgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGl0ZW1Db3VudCA9IF90aGlzJHByb3BzNS5pdGVtQ291bnQsXG4gICAgICAgICAgb3ZlcnNjYW5Db3VudCA9IF90aGlzJHByb3BzNS5vdmVyc2NhbkNvdW50O1xuICAgICAgdmFyIF90aGlzJHN0YXRlMyA9IHRoaXMuc3RhdGUsXG4gICAgICAgICAgaXNTY3JvbGxpbmcgPSBfdGhpcyRzdGF0ZTMuaXNTY3JvbGxpbmcsXG4gICAgICAgICAgc2Nyb2xsRGlyZWN0aW9uID0gX3RoaXMkc3RhdGUzLnNjcm9sbERpcmVjdGlvbixcbiAgICAgICAgICBzY3JvbGxPZmZzZXQgPSBfdGhpcyRzdGF0ZTMuc2Nyb2xsT2Zmc2V0O1xuXG4gICAgICBpZiAoaXRlbUNvdW50ID09PSAwKSB7XG4gICAgICAgIHJldHVybiBbMCwgMCwgMCwgMF07XG4gICAgICB9XG5cbiAgICAgIHZhciBzdGFydEluZGV4ID0gZ2V0U3RhcnRJbmRleEZvck9mZnNldCh0aGlzLnByb3BzLCBzY3JvbGxPZmZzZXQsIHRoaXMuX2luc3RhbmNlUHJvcHMpO1xuICAgICAgdmFyIHN0b3BJbmRleCA9IGdldFN0b3BJbmRleEZvclN0YXJ0SW5kZXgodGhpcy5wcm9wcywgc3RhcnRJbmRleCwgc2Nyb2xsT2Zmc2V0LCB0aGlzLl9pbnN0YW5jZVByb3BzKTsgLy8gT3ZlcnNjYW4gYnkgb25lIGl0ZW0gaW4gZWFjaCBkaXJlY3Rpb24gc28gdGhhdCB0YWIvZm9jdXMgd29ya3MuXG4gICAgICAvLyBJZiB0aGVyZSBpc24ndCBhdCBsZWFzdCBvbmUgZXh0cmEgaXRlbSwgdGFiIGxvb3BzIGJhY2sgYXJvdW5kLlxuXG4gICAgICB2YXIgb3ZlcnNjYW5CYWNrd2FyZCA9ICFpc1Njcm9sbGluZyB8fCBzY3JvbGxEaXJlY3Rpb24gPT09ICdiYWNrd2FyZCcgPyBNYXRoLm1heCgxLCBvdmVyc2NhbkNvdW50KSA6IDE7XG4gICAgICB2YXIgb3ZlcnNjYW5Gb3J3YXJkID0gIWlzU2Nyb2xsaW5nIHx8IHNjcm9sbERpcmVjdGlvbiA9PT0gJ2ZvcndhcmQnID8gTWF0aC5tYXgoMSwgb3ZlcnNjYW5Db3VudCkgOiAxO1xuICAgICAgcmV0dXJuIFtNYXRoLm1heCgwLCBzdGFydEluZGV4IC0gb3ZlcnNjYW5CYWNrd2FyZCksIE1hdGgubWF4KDAsIE1hdGgubWluKGl0ZW1Db3VudCAtIDEsIHN0b3BJbmRleCArIG92ZXJzY2FuRm9yd2FyZCkpLCBzdGFydEluZGV4LCBzdG9wSW5kZXhdO1xuICAgIH07XG5cbiAgICByZXR1cm4gTGlzdDtcbiAgfShQdXJlQ29tcG9uZW50KSwgX2NsYXNzLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBkaXJlY3Rpb246ICdsdHInLFxuICAgIGl0ZW1EYXRhOiB1bmRlZmluZWQsXG4gICAgbGF5b3V0OiAndmVydGljYWwnLFxuICAgIG92ZXJzY2FuQ291bnQ6IDIsXG4gICAgdXNlSXNTY3JvbGxpbmc6IGZhbHNlXG4gIH0sIF90ZW1wO1xufSAvLyBOT1RFOiBJIGNvbnNpZGVyZWQgZnVydGhlciB3cmFwcGluZyBpbmRpdmlkdWFsIGl0ZW1zIHdpdGggYSBwdXJlIExpc3RJdGVtIGNvbXBvbmVudC5cbi8vIFRoaXMgd291bGQgYXZvaWQgZXZlciBjYWxsaW5nIHRoZSByZW5kZXIgZnVuY3Rpb24gZm9yIHRoZSBzYW1lIGluZGV4IG1vcmUgdGhhbiBvbmNlLFxuLy8gQnV0IGl0IHdvdWxkIGFsc28gYWRkIHRoZSBvdmVyaGVhZCBvZiBhIGxvdCBvZiBjb21wb25lbnRzL2ZpYmVycy5cbi8vIEkgYXNzdW1lIHBlb3BsZSBhbHJlYWR5IGRvIHRoaXMgKHJlbmRlciBmdW5jdGlvbiByZXR1cm5pbmcgYSBjbGFzcyBjb21wb25lbnQpLFxuLy8gU28gbXkgZG9pbmcgaXQgd291bGQganVzdCB1bm5lY2Vzc2FyaWx5IGRvdWJsZSB0aGUgd3JhcHBlcnMuXG5cbnZhciB2YWxpZGF0ZVNoYXJlZFByb3BzJDEgPSBmdW5jdGlvbiB2YWxpZGF0ZVNoYXJlZFByb3BzKF9yZWYyLCBfcmVmMykge1xuICB2YXIgY2hpbGRyZW4gPSBfcmVmMi5jaGlsZHJlbixcbiAgICAgIGRpcmVjdGlvbiA9IF9yZWYyLmRpcmVjdGlvbixcbiAgICAgIGhlaWdodCA9IF9yZWYyLmhlaWdodCxcbiAgICAgIGxheW91dCA9IF9yZWYyLmxheW91dCxcbiAgICAgIGlubmVyVGFnTmFtZSA9IF9yZWYyLmlubmVyVGFnTmFtZSxcbiAgICAgIG91dGVyVGFnTmFtZSA9IF9yZWYyLm91dGVyVGFnTmFtZSxcbiAgICAgIHdpZHRoID0gX3JlZjIud2lkdGg7XG4gIHZhciBpbnN0YW5jZSA9IF9yZWYzLmluc3RhbmNlO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGlubmVyVGFnTmFtZSAhPSBudWxsIHx8IG91dGVyVGFnTmFtZSAhPSBudWxsKSB7XG4gICAgICBpZiAoZGV2V2FybmluZ3NUYWdOYW1lJDEgJiYgIWRldldhcm5pbmdzVGFnTmFtZSQxLmhhcyhpbnN0YW5jZSkpIHtcbiAgICAgICAgZGV2V2FybmluZ3NUYWdOYW1lJDEuYWRkKGluc3RhbmNlKTtcbiAgICAgICAgY29uc29sZS53YXJuKCdUaGUgaW5uZXJUYWdOYW1lIGFuZCBvdXRlclRhZ05hbWUgcHJvcHMgaGF2ZSBiZWVuIGRlcHJlY2F0ZWQuICcgKyAnUGxlYXNlIHVzZSB0aGUgaW5uZXJFbGVtZW50VHlwZSBhbmQgb3V0ZXJFbGVtZW50VHlwZSBwcm9wcyBpbnN0ZWFkLicpO1xuICAgICAgfVxuICAgIH0gLy8gVE9ETyBEZXByZWNhdGUgZGlyZWN0aW9uIFwiaG9yaXpvbnRhbFwiXG5cblxuICAgIHZhciBpc0hvcml6b250YWwgPSBkaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyB8fCBsYXlvdXQgPT09ICdob3Jpem9udGFsJztcblxuICAgIHN3aXRjaCAoZGlyZWN0aW9uKSB7XG4gICAgICBjYXNlICdob3Jpem9udGFsJzpcbiAgICAgIGNhc2UgJ3ZlcnRpY2FsJzpcbiAgICAgICAgaWYgKGRldldhcm5pbmdzRGlyZWN0aW9uICYmICFkZXZXYXJuaW5nc0RpcmVjdGlvbi5oYXMoaW5zdGFuY2UpKSB7XG4gICAgICAgICAgZGV2V2FybmluZ3NEaXJlY3Rpb24uYWRkKGluc3RhbmNlKTtcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ1RoZSBkaXJlY3Rpb24gcHJvcCBzaG91bGQgYmUgZWl0aGVyIFwibHRyXCIgKGRlZmF1bHQpIG9yIFwicnRsXCIuICcgKyAnUGxlYXNlIHVzZSB0aGUgbGF5b3V0IHByb3AgdG8gc3BlY2lmeSBcInZlcnRpY2FsXCIgKGRlZmF1bHQpIG9yIFwiaG9yaXpvbnRhbFwiIG9yaWVudGF0aW9uLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2x0cic6XG4gICAgICBjYXNlICdydGwnOlxuICAgICAgICAvLyBWYWxpZCB2YWx1ZXNcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IEVycm9yKCdBbiBpbnZhbGlkIFwiZGlyZWN0aW9uXCIgcHJvcCBoYXMgYmVlbiBzcGVjaWZpZWQuICcgKyAnVmFsdWUgc2hvdWxkIGJlIGVpdGhlciBcImx0clwiIG9yIFwicnRsXCIuICcgKyAoXCJcXFwiXCIgKyBkaXJlY3Rpb24gKyBcIlxcXCIgd2FzIHNwZWNpZmllZC5cIikpO1xuICAgIH1cblxuICAgIHN3aXRjaCAobGF5b3V0KSB7XG4gICAgICBjYXNlICdob3Jpem9udGFsJzpcbiAgICAgIGNhc2UgJ3ZlcnRpY2FsJzpcbiAgICAgICAgLy8gVmFsaWQgdmFsdWVzXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBFcnJvcignQW4gaW52YWxpZCBcImxheW91dFwiIHByb3AgaGFzIGJlZW4gc3BlY2lmaWVkLiAnICsgJ1ZhbHVlIHNob3VsZCBiZSBlaXRoZXIgXCJob3Jpem9udGFsXCIgb3IgXCJ2ZXJ0aWNhbFwiLiAnICsgKFwiXFxcIlwiICsgbGF5b3V0ICsgXCJcXFwiIHdhcyBzcGVjaWZpZWQuXCIpKTtcbiAgICB9XG5cbiAgICBpZiAoY2hpbGRyZW4gPT0gbnVsbCkge1xuICAgICAgdGhyb3cgRXJyb3IoJ0FuIGludmFsaWQgXCJjaGlsZHJlblwiIHByb3AgaGFzIGJlZW4gc3BlY2lmaWVkLiAnICsgJ1ZhbHVlIHNob3VsZCBiZSBhIFJlYWN0IGNvbXBvbmVudC4gJyArIChcIlxcXCJcIiArIChjaGlsZHJlbiA9PT0gbnVsbCA/ICdudWxsJyA6IHR5cGVvZiBjaGlsZHJlbikgKyBcIlxcXCIgd2FzIHNwZWNpZmllZC5cIikpO1xuICAgIH1cblxuICAgIGlmIChpc0hvcml6b250YWwgJiYgdHlwZW9mIHdpZHRoICE9PSAnbnVtYmVyJykge1xuICAgICAgdGhyb3cgRXJyb3IoJ0FuIGludmFsaWQgXCJ3aWR0aFwiIHByb3AgaGFzIGJlZW4gc3BlY2lmaWVkLiAnICsgJ0hvcml6b250YWwgbGlzdHMgbXVzdCBzcGVjaWZ5IGEgbnVtYmVyIGZvciB3aWR0aC4gJyArIChcIlxcXCJcIiArICh3aWR0aCA9PT0gbnVsbCA/ICdudWxsJyA6IHR5cGVvZiB3aWR0aCkgKyBcIlxcXCIgd2FzIHNwZWNpZmllZC5cIikpO1xuICAgIH0gZWxzZSBpZiAoIWlzSG9yaXpvbnRhbCAmJiB0eXBlb2YgaGVpZ2h0ICE9PSAnbnVtYmVyJykge1xuICAgICAgdGhyb3cgRXJyb3IoJ0FuIGludmFsaWQgXCJoZWlnaHRcIiBwcm9wIGhhcyBiZWVuIHNwZWNpZmllZC4gJyArICdWZXJ0aWNhbCBsaXN0cyBtdXN0IHNwZWNpZnkgYSBudW1iZXIgZm9yIGhlaWdodC4gJyArIChcIlxcXCJcIiArIChoZWlnaHQgPT09IG51bGwgPyAnbnVsbCcgOiB0eXBlb2YgaGVpZ2h0KSArIFwiXFxcIiB3YXMgc3BlY2lmaWVkLlwiKSk7XG4gICAgfVxuICB9XG59O1xuXG52YXIgREVGQVVMVF9FU1RJTUFURURfSVRFTV9TSVpFJDEgPSA1MDtcblxudmFyIGdldEl0ZW1NZXRhZGF0YSQxID0gZnVuY3Rpb24gZ2V0SXRlbU1ldGFkYXRhKHByb3BzLCBpbmRleCwgaW5zdGFuY2VQcm9wcykge1xuICB2YXIgX3JlZiA9IHByb3BzLFxuICAgICAgaXRlbVNpemUgPSBfcmVmLml0ZW1TaXplO1xuICB2YXIgaXRlbU1ldGFkYXRhTWFwID0gaW5zdGFuY2VQcm9wcy5pdGVtTWV0YWRhdGFNYXAsXG4gICAgICBsYXN0TWVhc3VyZWRJbmRleCA9IGluc3RhbmNlUHJvcHMubGFzdE1lYXN1cmVkSW5kZXg7XG5cbiAgaWYgKGluZGV4ID4gbGFzdE1lYXN1cmVkSW5kZXgpIHtcbiAgICB2YXIgb2Zmc2V0ID0gMDtcblxuICAgIGlmIChsYXN0TWVhc3VyZWRJbmRleCA+PSAwKSB7XG4gICAgICB2YXIgaXRlbU1ldGFkYXRhID0gaXRlbU1ldGFkYXRhTWFwW2xhc3RNZWFzdXJlZEluZGV4XTtcbiAgICAgIG9mZnNldCA9IGl0ZW1NZXRhZGF0YS5vZmZzZXQgKyBpdGVtTWV0YWRhdGEuc2l6ZTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gbGFzdE1lYXN1cmVkSW5kZXggKyAxOyBpIDw9IGluZGV4OyBpKyspIHtcbiAgICAgIHZhciBzaXplID0gaXRlbVNpemUoaSk7XG4gICAgICBpdGVtTWV0YWRhdGFNYXBbaV0gPSB7XG4gICAgICAgIG9mZnNldDogb2Zmc2V0LFxuICAgICAgICBzaXplOiBzaXplXG4gICAgICB9O1xuICAgICAgb2Zmc2V0ICs9IHNpemU7XG4gICAgfVxuXG4gICAgaW5zdGFuY2VQcm9wcy5sYXN0TWVhc3VyZWRJbmRleCA9IGluZGV4O1xuICB9XG5cbiAgcmV0dXJuIGl0ZW1NZXRhZGF0YU1hcFtpbmRleF07XG59O1xuXG52YXIgZmluZE5lYXJlc3RJdGVtJDEgPSBmdW5jdGlvbiBmaW5kTmVhcmVzdEl0ZW0ocHJvcHMsIGluc3RhbmNlUHJvcHMsIG9mZnNldCkge1xuICB2YXIgaXRlbU1ldGFkYXRhTWFwID0gaW5zdGFuY2VQcm9wcy5pdGVtTWV0YWRhdGFNYXAsXG4gICAgICBsYXN0TWVhc3VyZWRJbmRleCA9IGluc3RhbmNlUHJvcHMubGFzdE1lYXN1cmVkSW5kZXg7XG4gIHZhciBsYXN0TWVhc3VyZWRJdGVtT2Zmc2V0ID0gbGFzdE1lYXN1cmVkSW5kZXggPiAwID8gaXRlbU1ldGFkYXRhTWFwW2xhc3RNZWFzdXJlZEluZGV4XS5vZmZzZXQgOiAwO1xuXG4gIGlmIChsYXN0TWVhc3VyZWRJdGVtT2Zmc2V0ID49IG9mZnNldCkge1xuICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgbWVhc3VyZWQgaXRlbXMgd2l0aGluIHRoaXMgcmFuZ2UganVzdCB1c2UgYSBiaW5hcnkgc2VhcmNoIGFzIGl0J3MgZmFzdGVyLlxuICAgIHJldHVybiBmaW5kTmVhcmVzdEl0ZW1CaW5hcnlTZWFyY2gkMShwcm9wcywgaW5zdGFuY2VQcm9wcywgbGFzdE1lYXN1cmVkSW5kZXgsIDAsIG9mZnNldCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gSWYgd2UgaGF2ZW4ndCB5ZXQgbWVhc3VyZWQgdGhpcyBoaWdoLCBmYWxsYmFjayB0byBhbiBleHBvbmVudGlhbCBzZWFyY2ggd2l0aCBhbiBpbm5lciBiaW5hcnkgc2VhcmNoLlxuICAgIC8vIFRoZSBleHBvbmVudGlhbCBzZWFyY2ggYXZvaWRzIHByZS1jb21wdXRpbmcgc2l6ZXMgZm9yIHRoZSBmdWxsIHNldCBvZiBpdGVtcyBhcyBhIGJpbmFyeSBzZWFyY2ggd291bGQuXG4gICAgLy8gVGhlIG92ZXJhbGwgY29tcGxleGl0eSBmb3IgdGhpcyBhcHByb2FjaCBpcyBPKGxvZyBuKS5cbiAgICByZXR1cm4gZmluZE5lYXJlc3RJdGVtRXhwb25lbnRpYWxTZWFyY2gkMShwcm9wcywgaW5zdGFuY2VQcm9wcywgTWF0aC5tYXgoMCwgbGFzdE1lYXN1cmVkSW5kZXgpLCBvZmZzZXQpO1xuICB9XG59O1xuXG52YXIgZmluZE5lYXJlc3RJdGVtQmluYXJ5U2VhcmNoJDEgPSBmdW5jdGlvbiBmaW5kTmVhcmVzdEl0ZW1CaW5hcnlTZWFyY2gocHJvcHMsIGluc3RhbmNlUHJvcHMsIGhpZ2gsIGxvdywgb2Zmc2V0KSB7XG4gIHdoaWxlIChsb3cgPD0gaGlnaCkge1xuICAgIHZhciBtaWRkbGUgPSBsb3cgKyBNYXRoLmZsb29yKChoaWdoIC0gbG93KSAvIDIpO1xuICAgIHZhciBjdXJyZW50T2Zmc2V0ID0gZ2V0SXRlbU1ldGFkYXRhJDEocHJvcHMsIG1pZGRsZSwgaW5zdGFuY2VQcm9wcykub2Zmc2V0O1xuXG4gICAgaWYgKGN1cnJlbnRPZmZzZXQgPT09IG9mZnNldCkge1xuICAgICAgcmV0dXJuIG1pZGRsZTtcbiAgICB9IGVsc2UgaWYgKGN1cnJlbnRPZmZzZXQgPCBvZmZzZXQpIHtcbiAgICAgIGxvdyA9IG1pZGRsZSArIDE7XG4gICAgfSBlbHNlIGlmIChjdXJyZW50T2Zmc2V0ID4gb2Zmc2V0KSB7XG4gICAgICBoaWdoID0gbWlkZGxlIC0gMTtcbiAgICB9XG4gIH1cblxuICBpZiAobG93ID4gMCkge1xuICAgIHJldHVybiBsb3cgLSAxO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAwO1xuICB9XG59O1xuXG52YXIgZmluZE5lYXJlc3RJdGVtRXhwb25lbnRpYWxTZWFyY2gkMSA9IGZ1bmN0aW9uIGZpbmROZWFyZXN0SXRlbUV4cG9uZW50aWFsU2VhcmNoKHByb3BzLCBpbnN0YW5jZVByb3BzLCBpbmRleCwgb2Zmc2V0KSB7XG4gIHZhciBpdGVtQ291bnQgPSBwcm9wcy5pdGVtQ291bnQ7XG4gIHZhciBpbnRlcnZhbCA9IDE7XG5cbiAgd2hpbGUgKGluZGV4IDwgaXRlbUNvdW50ICYmIGdldEl0ZW1NZXRhZGF0YSQxKHByb3BzLCBpbmRleCwgaW5zdGFuY2VQcm9wcykub2Zmc2V0IDwgb2Zmc2V0KSB7XG4gICAgaW5kZXggKz0gaW50ZXJ2YWw7XG4gICAgaW50ZXJ2YWwgKj0gMjtcbiAgfVxuXG4gIHJldHVybiBmaW5kTmVhcmVzdEl0ZW1CaW5hcnlTZWFyY2gkMShwcm9wcywgaW5zdGFuY2VQcm9wcywgTWF0aC5taW4oaW5kZXgsIGl0ZW1Db3VudCAtIDEpLCBNYXRoLmZsb29yKGluZGV4IC8gMiksIG9mZnNldCk7XG59O1xuXG52YXIgZ2V0RXN0aW1hdGVkVG90YWxTaXplID0gZnVuY3Rpb24gZ2V0RXN0aW1hdGVkVG90YWxTaXplKF9yZWYyLCBfcmVmMykge1xuICB2YXIgaXRlbUNvdW50ID0gX3JlZjIuaXRlbUNvdW50O1xuICB2YXIgaXRlbU1ldGFkYXRhTWFwID0gX3JlZjMuaXRlbU1ldGFkYXRhTWFwLFxuICAgICAgZXN0aW1hdGVkSXRlbVNpemUgPSBfcmVmMy5lc3RpbWF0ZWRJdGVtU2l6ZSxcbiAgICAgIGxhc3RNZWFzdXJlZEluZGV4ID0gX3JlZjMubGFzdE1lYXN1cmVkSW5kZXg7XG4gIHZhciB0b3RhbFNpemVPZk1lYXN1cmVkSXRlbXMgPSAwOyAvLyBFZGdlIGNhc2UgY2hlY2sgZm9yIHdoZW4gdGhlIG51bWJlciBvZiBpdGVtcyBkZWNyZWFzZXMgd2hpbGUgYSBzY3JvbGwgaXMgaW4gcHJvZ3Jlc3MuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9idmF1Z2huL3JlYWN0LXdpbmRvdy9wdWxsLzEzOFxuXG4gIGlmIChsYXN0TWVhc3VyZWRJbmRleCA+PSBpdGVtQ291bnQpIHtcbiAgICBsYXN0TWVhc3VyZWRJbmRleCA9IGl0ZW1Db3VudCAtIDE7XG4gIH1cblxuICBpZiAobGFzdE1lYXN1cmVkSW5kZXggPj0gMCkge1xuICAgIHZhciBpdGVtTWV0YWRhdGEgPSBpdGVtTWV0YWRhdGFNYXBbbGFzdE1lYXN1cmVkSW5kZXhdO1xuICAgIHRvdGFsU2l6ZU9mTWVhc3VyZWRJdGVtcyA9IGl0ZW1NZXRhZGF0YS5vZmZzZXQgKyBpdGVtTWV0YWRhdGEuc2l6ZTtcbiAgfVxuXG4gIHZhciBudW1Vbm1lYXN1cmVkSXRlbXMgPSBpdGVtQ291bnQgLSBsYXN0TWVhc3VyZWRJbmRleCAtIDE7XG4gIHZhciB0b3RhbFNpemVPZlVubWVhc3VyZWRJdGVtcyA9IG51bVVubWVhc3VyZWRJdGVtcyAqIGVzdGltYXRlZEl0ZW1TaXplO1xuICByZXR1cm4gdG90YWxTaXplT2ZNZWFzdXJlZEl0ZW1zICsgdG90YWxTaXplT2ZVbm1lYXN1cmVkSXRlbXM7XG59O1xuXG52YXIgVmFyaWFibGVTaXplTGlzdCA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVMaXN0Q29tcG9uZW50KHtcbiAgZ2V0SXRlbU9mZnNldDogZnVuY3Rpb24gZ2V0SXRlbU9mZnNldChwcm9wcywgaW5kZXgsIGluc3RhbmNlUHJvcHMpIHtcbiAgICByZXR1cm4gZ2V0SXRlbU1ldGFkYXRhJDEocHJvcHMsIGluZGV4LCBpbnN0YW5jZVByb3BzKS5vZmZzZXQ7XG4gIH0sXG4gIGdldEl0ZW1TaXplOiBmdW5jdGlvbiBnZXRJdGVtU2l6ZShwcm9wcywgaW5kZXgsIGluc3RhbmNlUHJvcHMpIHtcbiAgICByZXR1cm4gaW5zdGFuY2VQcm9wcy5pdGVtTWV0YWRhdGFNYXBbaW5kZXhdLnNpemU7XG4gIH0sXG4gIGdldEVzdGltYXRlZFRvdGFsU2l6ZTogZ2V0RXN0aW1hdGVkVG90YWxTaXplLFxuICBnZXRPZmZzZXRGb3JJbmRleEFuZEFsaWdubWVudDogZnVuY3Rpb24gZ2V0T2Zmc2V0Rm9ySW5kZXhBbmRBbGlnbm1lbnQocHJvcHMsIGluZGV4LCBhbGlnbiwgc2Nyb2xsT2Zmc2V0LCBpbnN0YW5jZVByb3BzKSB7XG4gICAgdmFyIGRpcmVjdGlvbiA9IHByb3BzLmRpcmVjdGlvbixcbiAgICAgICAgaGVpZ2h0ID0gcHJvcHMuaGVpZ2h0LFxuICAgICAgICBsYXlvdXQgPSBwcm9wcy5sYXlvdXQsXG4gICAgICAgIHdpZHRoID0gcHJvcHMud2lkdGg7IC8vIFRPRE8gRGVwcmVjYXRlIGRpcmVjdGlvbiBcImhvcml6b250YWxcIlxuXG4gICAgdmFyIGlzSG9yaXpvbnRhbCA9IGRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnIHx8IGxheW91dCA9PT0gJ2hvcml6b250YWwnO1xuICAgIHZhciBzaXplID0gaXNIb3Jpem9udGFsID8gd2lkdGggOiBoZWlnaHQ7XG4gICAgdmFyIGl0ZW1NZXRhZGF0YSA9IGdldEl0ZW1NZXRhZGF0YSQxKHByb3BzLCBpbmRleCwgaW5zdGFuY2VQcm9wcyk7IC8vIEdldCBlc3RpbWF0ZWQgdG90YWwgc2l6ZSBhZnRlciBJdGVtTWV0YWRhdGEgaXMgY29tcHV0ZWQsXG4gICAgLy8gVG8gZW5zdXJlIGl0IHJlZmxlY3RzIGFjdHVhbCBtZWFzdXJlbWVudHMgaW5zdGVhZCBvZiBqdXN0IGVzdGltYXRlcy5cblxuICAgIHZhciBlc3RpbWF0ZWRUb3RhbFNpemUgPSBnZXRFc3RpbWF0ZWRUb3RhbFNpemUocHJvcHMsIGluc3RhbmNlUHJvcHMpO1xuICAgIHZhciBtYXhPZmZzZXQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihlc3RpbWF0ZWRUb3RhbFNpemUgLSBzaXplLCBpdGVtTWV0YWRhdGEub2Zmc2V0KSk7XG4gICAgdmFyIG1pbk9mZnNldCA9IE1hdGgubWF4KDAsIGl0ZW1NZXRhZGF0YS5vZmZzZXQgLSBzaXplICsgaXRlbU1ldGFkYXRhLnNpemUpO1xuXG4gICAgaWYgKGFsaWduID09PSAnc21hcnQnKSB7XG4gICAgICBpZiAoc2Nyb2xsT2Zmc2V0ID49IG1pbk9mZnNldCAtIHNpemUgJiYgc2Nyb2xsT2Zmc2V0IDw9IG1heE9mZnNldCArIHNpemUpIHtcbiAgICAgICAgYWxpZ24gPSAnYXV0byc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhbGlnbiA9ICdjZW50ZXInO1xuICAgICAgfVxuICAgIH1cblxuICAgIHN3aXRjaCAoYWxpZ24pIHtcbiAgICAgIGNhc2UgJ3N0YXJ0JzpcbiAgICAgICAgcmV0dXJuIG1heE9mZnNldDtcblxuICAgICAgY2FzZSAnZW5kJzpcbiAgICAgICAgcmV0dXJuIG1pbk9mZnNldDtcblxuICAgICAgY2FzZSAnY2VudGVyJzpcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQobWluT2Zmc2V0ICsgKG1heE9mZnNldCAtIG1pbk9mZnNldCkgLyAyKTtcblxuICAgICAgY2FzZSAnYXV0byc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAoc2Nyb2xsT2Zmc2V0ID49IG1pbk9mZnNldCAmJiBzY3JvbGxPZmZzZXQgPD0gbWF4T2Zmc2V0KSB7XG4gICAgICAgICAgcmV0dXJuIHNjcm9sbE9mZnNldDtcbiAgICAgICAgfSBlbHNlIGlmIChzY3JvbGxPZmZzZXQgPCBtaW5PZmZzZXQpIHtcbiAgICAgICAgICByZXR1cm4gbWluT2Zmc2V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBtYXhPZmZzZXQ7XG4gICAgICAgIH1cblxuICAgIH1cbiAgfSxcbiAgZ2V0U3RhcnRJbmRleEZvck9mZnNldDogZnVuY3Rpb24gZ2V0U3RhcnRJbmRleEZvck9mZnNldChwcm9wcywgb2Zmc2V0LCBpbnN0YW5jZVByb3BzKSB7XG4gICAgcmV0dXJuIGZpbmROZWFyZXN0SXRlbSQxKHByb3BzLCBpbnN0YW5jZVByb3BzLCBvZmZzZXQpO1xuICB9LFxuICBnZXRTdG9wSW5kZXhGb3JTdGFydEluZGV4OiBmdW5jdGlvbiBnZXRTdG9wSW5kZXhGb3JTdGFydEluZGV4KHByb3BzLCBzdGFydEluZGV4LCBzY3JvbGxPZmZzZXQsIGluc3RhbmNlUHJvcHMpIHtcbiAgICB2YXIgZGlyZWN0aW9uID0gcHJvcHMuZGlyZWN0aW9uLFxuICAgICAgICBoZWlnaHQgPSBwcm9wcy5oZWlnaHQsXG4gICAgICAgIGl0ZW1Db3VudCA9IHByb3BzLml0ZW1Db3VudCxcbiAgICAgICAgbGF5b3V0ID0gcHJvcHMubGF5b3V0LFxuICAgICAgICB3aWR0aCA9IHByb3BzLndpZHRoOyAvLyBUT0RPIERlcHJlY2F0ZSBkaXJlY3Rpb24gXCJob3Jpem9udGFsXCJcblxuICAgIHZhciBpc0hvcml6b250YWwgPSBkaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyB8fCBsYXlvdXQgPT09ICdob3Jpem9udGFsJztcbiAgICB2YXIgc2l6ZSA9IGlzSG9yaXpvbnRhbCA/IHdpZHRoIDogaGVpZ2h0O1xuICAgIHZhciBpdGVtTWV0YWRhdGEgPSBnZXRJdGVtTWV0YWRhdGEkMShwcm9wcywgc3RhcnRJbmRleCwgaW5zdGFuY2VQcm9wcyk7XG4gICAgdmFyIG1heE9mZnNldCA9IHNjcm9sbE9mZnNldCArIHNpemU7XG4gICAgdmFyIG9mZnNldCA9IGl0ZW1NZXRhZGF0YS5vZmZzZXQgKyBpdGVtTWV0YWRhdGEuc2l6ZTtcbiAgICB2YXIgc3RvcEluZGV4ID0gc3RhcnRJbmRleDtcblxuICAgIHdoaWxlIChzdG9wSW5kZXggPCBpdGVtQ291bnQgLSAxICYmIG9mZnNldCA8IG1heE9mZnNldCkge1xuICAgICAgc3RvcEluZGV4Kys7XG4gICAgICBvZmZzZXQgKz0gZ2V0SXRlbU1ldGFkYXRhJDEocHJvcHMsIHN0b3BJbmRleCwgaW5zdGFuY2VQcm9wcykuc2l6ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RvcEluZGV4O1xuICB9LFxuICBpbml0SW5zdGFuY2VQcm9wczogZnVuY3Rpb24gaW5pdEluc3RhbmNlUHJvcHMocHJvcHMsIGluc3RhbmNlKSB7XG4gICAgdmFyIF9yZWY0ID0gcHJvcHMsXG4gICAgICAgIGVzdGltYXRlZEl0ZW1TaXplID0gX3JlZjQuZXN0aW1hdGVkSXRlbVNpemU7XG4gICAgdmFyIGluc3RhbmNlUHJvcHMgPSB7XG4gICAgICBpdGVtTWV0YWRhdGFNYXA6IHt9LFxuICAgICAgZXN0aW1hdGVkSXRlbVNpemU6IGVzdGltYXRlZEl0ZW1TaXplIHx8IERFRkFVTFRfRVNUSU1BVEVEX0lURU1fU0laRSQxLFxuICAgICAgbGFzdE1lYXN1cmVkSW5kZXg6IC0xXG4gICAgfTtcblxuICAgIGluc3RhbmNlLnJlc2V0QWZ0ZXJJbmRleCA9IGZ1bmN0aW9uIChpbmRleCwgc2hvdWxkRm9yY2VVcGRhdGUpIHtcbiAgICAgIGlmIChzaG91bGRGb3JjZVVwZGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHNob3VsZEZvcmNlVXBkYXRlID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaW5zdGFuY2VQcm9wcy5sYXN0TWVhc3VyZWRJbmRleCA9IE1hdGgubWluKGluc3RhbmNlUHJvcHMubGFzdE1lYXN1cmVkSW5kZXgsIGluZGV4IC0gMSk7IC8vIFdlIGNvdWxkIHBvdGVudGlhbGx5IG9wdGltaXplIGZ1cnRoZXIgYnkgb25seSBldmljdGluZyBzdHlsZXMgYWZ0ZXIgdGhpcyBpbmRleCxcbiAgICAgIC8vIEJ1dCBzaW5jZSBzdHlsZXMgYXJlIG9ubHkgY2FjaGVkIHdoaWxlIHNjcm9sbGluZyBpcyBpbiBwcm9ncmVzcy1cbiAgICAgIC8vIEl0IHNlZW1zIGFuIHVubmVjZXNzYXJ5IG9wdGltaXphdGlvbi5cbiAgICAgIC8vIEl0J3MgdW5saWtlbHkgdGhhdCByZXNldEFmdGVySW5kZXgoKSB3aWxsIGJlIGNhbGxlZCB3aGlsZSBhIHVzZXIgaXMgc2Nyb2xsaW5nLlxuXG4gICAgICBpbnN0YW5jZS5fZ2V0SXRlbVN0eWxlQ2FjaGUoLTEpO1xuXG4gICAgICBpZiAoc2hvdWxkRm9yY2VVcGRhdGUpIHtcbiAgICAgICAgaW5zdGFuY2UuZm9yY2VVcGRhdGUoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIGluc3RhbmNlUHJvcHM7XG4gIH0sXG4gIHNob3VsZFJlc2V0U3R5bGVDYWNoZU9uSXRlbVNpemVDaGFuZ2U6IGZhbHNlLFxuICB2YWxpZGF0ZVByb3BzOiBmdW5jdGlvbiB2YWxpZGF0ZVByb3BzKF9yZWY1KSB7XG4gICAgdmFyIGl0ZW1TaXplID0gX3JlZjUuaXRlbVNpemU7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHR5cGVvZiBpdGVtU2l6ZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBFcnJvcignQW4gaW52YWxpZCBcIml0ZW1TaXplXCIgcHJvcCBoYXMgYmVlbiBzcGVjaWZpZWQuICcgKyAnVmFsdWUgc2hvdWxkIGJlIGEgZnVuY3Rpb24uICcgKyAoXCJcXFwiXCIgKyAoaXRlbVNpemUgPT09IG51bGwgPyAnbnVsbCcgOiB0eXBlb2YgaXRlbVNpemUpICsgXCJcXFwiIHdhcyBzcGVjaWZpZWQuXCIpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pO1xuXG52YXIgRml4ZWRTaXplR3JpZCA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVHcmlkQ29tcG9uZW50KHtcbiAgZ2V0Q29sdW1uT2Zmc2V0OiBmdW5jdGlvbiBnZXRDb2x1bW5PZmZzZXQoX3JlZiwgaW5kZXgpIHtcbiAgICB2YXIgY29sdW1uV2lkdGggPSBfcmVmLmNvbHVtbldpZHRoO1xuICAgIHJldHVybiBpbmRleCAqIGNvbHVtbldpZHRoO1xuICB9LFxuICBnZXRDb2x1bW5XaWR0aDogZnVuY3Rpb24gZ2V0Q29sdW1uV2lkdGgoX3JlZjIsIGluZGV4KSB7XG4gICAgdmFyIGNvbHVtbldpZHRoID0gX3JlZjIuY29sdW1uV2lkdGg7XG4gICAgcmV0dXJuIGNvbHVtbldpZHRoO1xuICB9LFxuICBnZXRSb3dPZmZzZXQ6IGZ1bmN0aW9uIGdldFJvd09mZnNldChfcmVmMywgaW5kZXgpIHtcbiAgICB2YXIgcm93SGVpZ2h0ID0gX3JlZjMucm93SGVpZ2h0O1xuICAgIHJldHVybiBpbmRleCAqIHJvd0hlaWdodDtcbiAgfSxcbiAgZ2V0Um93SGVpZ2h0OiBmdW5jdGlvbiBnZXRSb3dIZWlnaHQoX3JlZjQsIGluZGV4KSB7XG4gICAgdmFyIHJvd0hlaWdodCA9IF9yZWY0LnJvd0hlaWdodDtcbiAgICByZXR1cm4gcm93SGVpZ2h0O1xuICB9LFxuICBnZXRFc3RpbWF0ZWRUb3RhbEhlaWdodDogZnVuY3Rpb24gZ2V0RXN0aW1hdGVkVG90YWxIZWlnaHQoX3JlZjUpIHtcbiAgICB2YXIgcm93Q291bnQgPSBfcmVmNS5yb3dDb3VudCxcbiAgICAgICAgcm93SGVpZ2h0ID0gX3JlZjUucm93SGVpZ2h0O1xuICAgIHJldHVybiByb3dIZWlnaHQgKiByb3dDb3VudDtcbiAgfSxcbiAgZ2V0RXN0aW1hdGVkVG90YWxXaWR0aDogZnVuY3Rpb24gZ2V0RXN0aW1hdGVkVG90YWxXaWR0aChfcmVmNikge1xuICAgIHZhciBjb2x1bW5Db3VudCA9IF9yZWY2LmNvbHVtbkNvdW50LFxuICAgICAgICBjb2x1bW5XaWR0aCA9IF9yZWY2LmNvbHVtbldpZHRoO1xuICAgIHJldHVybiBjb2x1bW5XaWR0aCAqIGNvbHVtbkNvdW50O1xuICB9LFxuICBnZXRPZmZzZXRGb3JDb2x1bW5BbmRBbGlnbm1lbnQ6IGZ1bmN0aW9uIGdldE9mZnNldEZvckNvbHVtbkFuZEFsaWdubWVudChfcmVmNywgY29sdW1uSW5kZXgsIGFsaWduLCBzY3JvbGxMZWZ0LCBpbnN0YW5jZVByb3BzLCBzY3JvbGxiYXJTaXplKSB7XG4gICAgdmFyIGNvbHVtbkNvdW50ID0gX3JlZjcuY29sdW1uQ291bnQsXG4gICAgICAgIGNvbHVtbldpZHRoID0gX3JlZjcuY29sdW1uV2lkdGgsXG4gICAgICAgIHdpZHRoID0gX3JlZjcud2lkdGg7XG4gICAgdmFyIGxhc3RDb2x1bW5PZmZzZXQgPSBNYXRoLm1heCgwLCBjb2x1bW5Db3VudCAqIGNvbHVtbldpZHRoIC0gd2lkdGgpO1xuICAgIHZhciBtYXhPZmZzZXQgPSBNYXRoLm1pbihsYXN0Q29sdW1uT2Zmc2V0LCBjb2x1bW5JbmRleCAqIGNvbHVtbldpZHRoKTtcbiAgICB2YXIgbWluT2Zmc2V0ID0gTWF0aC5tYXgoMCwgY29sdW1uSW5kZXggKiBjb2x1bW5XaWR0aCAtIHdpZHRoICsgc2Nyb2xsYmFyU2l6ZSArIGNvbHVtbldpZHRoKTtcblxuICAgIGlmIChhbGlnbiA9PT0gJ3NtYXJ0Jykge1xuICAgICAgaWYgKHNjcm9sbExlZnQgPj0gbWluT2Zmc2V0IC0gd2lkdGggJiYgc2Nyb2xsTGVmdCA8PSBtYXhPZmZzZXQgKyB3aWR0aCkge1xuICAgICAgICBhbGlnbiA9ICdhdXRvJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFsaWduID0gJ2NlbnRlcic7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3dpdGNoIChhbGlnbikge1xuICAgICAgY2FzZSAnc3RhcnQnOlxuICAgICAgICByZXR1cm4gbWF4T2Zmc2V0O1xuXG4gICAgICBjYXNlICdlbmQnOlxuICAgICAgICByZXR1cm4gbWluT2Zmc2V0O1xuXG4gICAgICBjYXNlICdjZW50ZXInOlxuICAgICAgICAvLyBcIkNlbnRlcmVkXCIgb2Zmc2V0IGlzIHVzdWFsbHkgdGhlIGF2ZXJhZ2Ugb2YgdGhlIG1pbiBhbmQgbWF4LlxuICAgICAgICAvLyBCdXQgbmVhciB0aGUgZWRnZXMgb2YgdGhlIGxpc3QsIHRoaXMgZG9lc24ndCBob2xkIHRydWUuXG4gICAgICAgIHZhciBtaWRkbGVPZmZzZXQgPSBNYXRoLnJvdW5kKG1pbk9mZnNldCArIChtYXhPZmZzZXQgLSBtaW5PZmZzZXQpIC8gMik7XG5cbiAgICAgICAgaWYgKG1pZGRsZU9mZnNldCA8IE1hdGguY2VpbCh3aWR0aCAvIDIpKSB7XG4gICAgICAgICAgcmV0dXJuIDA7IC8vIG5lYXIgdGhlIGJlZ2lubmluZ1xuICAgICAgICB9IGVsc2UgaWYgKG1pZGRsZU9mZnNldCA+IGxhc3RDb2x1bW5PZmZzZXQgKyBNYXRoLmZsb29yKHdpZHRoIC8gMikpIHtcbiAgICAgICAgICByZXR1cm4gbGFzdENvbHVtbk9mZnNldDsgLy8gbmVhciB0aGUgZW5kXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIG1pZGRsZU9mZnNldDtcbiAgICAgICAgfVxuXG4gICAgICBjYXNlICdhdXRvJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChzY3JvbGxMZWZ0ID49IG1pbk9mZnNldCAmJiBzY3JvbGxMZWZ0IDw9IG1heE9mZnNldCkge1xuICAgICAgICAgIHJldHVybiBzY3JvbGxMZWZ0O1xuICAgICAgICB9IGVsc2UgaWYgKG1pbk9mZnNldCA+IG1heE9mZnNldCkge1xuICAgICAgICAgIC8vIEJlY2F1c2Ugd2Ugb25seSB0YWtlIGludG8gYWNjb3VudCB0aGUgc2Nyb2xsYmFyIHNpemUgd2hlbiBjYWxjdWxhdGluZyBtaW5PZmZzZXRcbiAgICAgICAgICAvLyB0aGlzIHZhbHVlIGNhbiBiZSBsYXJnZXIgdGhhbiBtYXhPZmZzZXQgd2hlbiBhdCB0aGUgZW5kIG9mIHRoZSBsaXN0XG4gICAgICAgICAgcmV0dXJuIG1pbk9mZnNldDtcbiAgICAgICAgfSBlbHNlIGlmIChzY3JvbGxMZWZ0IDwgbWluT2Zmc2V0KSB7XG4gICAgICAgICAgcmV0dXJuIG1pbk9mZnNldDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gbWF4T2Zmc2V0O1xuICAgICAgICB9XG5cbiAgICB9XG4gIH0sXG4gIGdldE9mZnNldEZvclJvd0FuZEFsaWdubWVudDogZnVuY3Rpb24gZ2V0T2Zmc2V0Rm9yUm93QW5kQWxpZ25tZW50KF9yZWY4LCByb3dJbmRleCwgYWxpZ24sIHNjcm9sbFRvcCwgaW5zdGFuY2VQcm9wcywgc2Nyb2xsYmFyU2l6ZSkge1xuICAgIHZhciByb3dIZWlnaHQgPSBfcmVmOC5yb3dIZWlnaHQsXG4gICAgICAgIGhlaWdodCA9IF9yZWY4LmhlaWdodCxcbiAgICAgICAgcm93Q291bnQgPSBfcmVmOC5yb3dDb3VudDtcbiAgICB2YXIgbGFzdFJvd09mZnNldCA9IE1hdGgubWF4KDAsIHJvd0NvdW50ICogcm93SGVpZ2h0IC0gaGVpZ2h0KTtcbiAgICB2YXIgbWF4T2Zmc2V0ID0gTWF0aC5taW4obGFzdFJvd09mZnNldCwgcm93SW5kZXggKiByb3dIZWlnaHQpO1xuICAgIHZhciBtaW5PZmZzZXQgPSBNYXRoLm1heCgwLCByb3dJbmRleCAqIHJvd0hlaWdodCAtIGhlaWdodCArIHNjcm9sbGJhclNpemUgKyByb3dIZWlnaHQpO1xuXG4gICAgaWYgKGFsaWduID09PSAnc21hcnQnKSB7XG4gICAgICBpZiAoc2Nyb2xsVG9wID49IG1pbk9mZnNldCAtIGhlaWdodCAmJiBzY3JvbGxUb3AgPD0gbWF4T2Zmc2V0ICsgaGVpZ2h0KSB7XG4gICAgICAgIGFsaWduID0gJ2F1dG8nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWxpZ24gPSAnY2VudGVyJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzd2l0Y2ggKGFsaWduKSB7XG4gICAgICBjYXNlICdzdGFydCc6XG4gICAgICAgIHJldHVybiBtYXhPZmZzZXQ7XG5cbiAgICAgIGNhc2UgJ2VuZCc6XG4gICAgICAgIHJldHVybiBtaW5PZmZzZXQ7XG5cbiAgICAgIGNhc2UgJ2NlbnRlcic6XG4gICAgICAgIC8vIFwiQ2VudGVyZWRcIiBvZmZzZXQgaXMgdXN1YWxseSB0aGUgYXZlcmFnZSBvZiB0aGUgbWluIGFuZCBtYXguXG4gICAgICAgIC8vIEJ1dCBuZWFyIHRoZSBlZGdlcyBvZiB0aGUgbGlzdCwgdGhpcyBkb2Vzbid0IGhvbGQgdHJ1ZS5cbiAgICAgICAgdmFyIG1pZGRsZU9mZnNldCA9IE1hdGgucm91bmQobWluT2Zmc2V0ICsgKG1heE9mZnNldCAtIG1pbk9mZnNldCkgLyAyKTtcblxuICAgICAgICBpZiAobWlkZGxlT2Zmc2V0IDwgTWF0aC5jZWlsKGhlaWdodCAvIDIpKSB7XG4gICAgICAgICAgcmV0dXJuIDA7IC8vIG5lYXIgdGhlIGJlZ2lubmluZ1xuICAgICAgICB9IGVsc2UgaWYgKG1pZGRsZU9mZnNldCA+IGxhc3RSb3dPZmZzZXQgKyBNYXRoLmZsb29yKGhlaWdodCAvIDIpKSB7XG4gICAgICAgICAgcmV0dXJuIGxhc3RSb3dPZmZzZXQ7IC8vIG5lYXIgdGhlIGVuZFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBtaWRkbGVPZmZzZXQ7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSAnYXV0byc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAoc2Nyb2xsVG9wID49IG1pbk9mZnNldCAmJiBzY3JvbGxUb3AgPD0gbWF4T2Zmc2V0KSB7XG4gICAgICAgICAgcmV0dXJuIHNjcm9sbFRvcDtcbiAgICAgICAgfSBlbHNlIGlmIChtaW5PZmZzZXQgPiBtYXhPZmZzZXQpIHtcbiAgICAgICAgICAvLyBCZWNhdXNlIHdlIG9ubHkgdGFrZSBpbnRvIGFjY291bnQgdGhlIHNjcm9sbGJhciBzaXplIHdoZW4gY2FsY3VsYXRpbmcgbWluT2Zmc2V0XG4gICAgICAgICAgLy8gdGhpcyB2YWx1ZSBjYW4gYmUgbGFyZ2VyIHRoYW4gbWF4T2Zmc2V0IHdoZW4gYXQgdGhlIGVuZCBvZiB0aGUgbGlzdFxuICAgICAgICAgIHJldHVybiBtaW5PZmZzZXQ7XG4gICAgICAgIH0gZWxzZSBpZiAoc2Nyb2xsVG9wIDwgbWluT2Zmc2V0KSB7XG4gICAgICAgICAgcmV0dXJuIG1pbk9mZnNldDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gbWF4T2Zmc2V0O1xuICAgICAgICB9XG5cbiAgICB9XG4gIH0sXG4gIGdldENvbHVtblN0YXJ0SW5kZXhGb3JPZmZzZXQ6IGZ1bmN0aW9uIGdldENvbHVtblN0YXJ0SW5kZXhGb3JPZmZzZXQoX3JlZjksIHNjcm9sbExlZnQpIHtcbiAgICB2YXIgY29sdW1uV2lkdGggPSBfcmVmOS5jb2x1bW5XaWR0aCxcbiAgICAgICAgY29sdW1uQ291bnQgPSBfcmVmOS5jb2x1bW5Db3VudDtcbiAgICByZXR1cm4gTWF0aC5tYXgoMCwgTWF0aC5taW4oY29sdW1uQ291bnQgLSAxLCBNYXRoLmZsb29yKHNjcm9sbExlZnQgLyBjb2x1bW5XaWR0aCkpKTtcbiAgfSxcbiAgZ2V0Q29sdW1uU3RvcEluZGV4Rm9yU3RhcnRJbmRleDogZnVuY3Rpb24gZ2V0Q29sdW1uU3RvcEluZGV4Rm9yU3RhcnRJbmRleChfcmVmMTAsIHN0YXJ0SW5kZXgsIHNjcm9sbExlZnQpIHtcbiAgICB2YXIgY29sdW1uV2lkdGggPSBfcmVmMTAuY29sdW1uV2lkdGgsXG4gICAgICAgIGNvbHVtbkNvdW50ID0gX3JlZjEwLmNvbHVtbkNvdW50LFxuICAgICAgICB3aWR0aCA9IF9yZWYxMC53aWR0aDtcbiAgICB2YXIgbGVmdCA9IHN0YXJ0SW5kZXggKiBjb2x1bW5XaWR0aDtcbiAgICB2YXIgbnVtVmlzaWJsZUNvbHVtbnMgPSBNYXRoLmNlaWwoKHdpZHRoICsgc2Nyb2xsTGVmdCAtIGxlZnQpIC8gY29sdW1uV2lkdGgpO1xuICAgIHJldHVybiBNYXRoLm1heCgwLCBNYXRoLm1pbihjb2x1bW5Db3VudCAtIDEsIHN0YXJ0SW5kZXggKyBudW1WaXNpYmxlQ29sdW1ucyAtIDEgLy8gLTEgaXMgYmVjYXVzZSBzdG9wIGluZGV4IGlzIGluY2x1c2l2ZVxuICAgICkpO1xuICB9LFxuICBnZXRSb3dTdGFydEluZGV4Rm9yT2Zmc2V0OiBmdW5jdGlvbiBnZXRSb3dTdGFydEluZGV4Rm9yT2Zmc2V0KF9yZWYxMSwgc2Nyb2xsVG9wKSB7XG4gICAgdmFyIHJvd0hlaWdodCA9IF9yZWYxMS5yb3dIZWlnaHQsXG4gICAgICAgIHJvd0NvdW50ID0gX3JlZjExLnJvd0NvdW50O1xuICAgIHJldHVybiBNYXRoLm1heCgwLCBNYXRoLm1pbihyb3dDb3VudCAtIDEsIE1hdGguZmxvb3Ioc2Nyb2xsVG9wIC8gcm93SGVpZ2h0KSkpO1xuICB9LFxuICBnZXRSb3dTdG9wSW5kZXhGb3JTdGFydEluZGV4OiBmdW5jdGlvbiBnZXRSb3dTdG9wSW5kZXhGb3JTdGFydEluZGV4KF9yZWYxMiwgc3RhcnRJbmRleCwgc2Nyb2xsVG9wKSB7XG4gICAgdmFyIHJvd0hlaWdodCA9IF9yZWYxMi5yb3dIZWlnaHQsXG4gICAgICAgIHJvd0NvdW50ID0gX3JlZjEyLnJvd0NvdW50LFxuICAgICAgICBoZWlnaHQgPSBfcmVmMTIuaGVpZ2h0O1xuICAgIHZhciB0b3AgPSBzdGFydEluZGV4ICogcm93SGVpZ2h0O1xuICAgIHZhciBudW1WaXNpYmxlUm93cyA9IE1hdGguY2VpbCgoaGVpZ2h0ICsgc2Nyb2xsVG9wIC0gdG9wKSAvIHJvd0hlaWdodCk7XG4gICAgcmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWluKHJvd0NvdW50IC0gMSwgc3RhcnRJbmRleCArIG51bVZpc2libGVSb3dzIC0gMSAvLyAtMSBpcyBiZWNhdXNlIHN0b3AgaW5kZXggaXMgaW5jbHVzaXZlXG4gICAgKSk7XG4gIH0sXG4gIGluaXRJbnN0YW5jZVByb3BzOiBmdW5jdGlvbiBpbml0SW5zdGFuY2VQcm9wcyhwcm9wcykgey8vIE5vb3BcbiAgfSxcbiAgc2hvdWxkUmVzZXRTdHlsZUNhY2hlT25JdGVtU2l6ZUNoYW5nZTogdHJ1ZSxcbiAgdmFsaWRhdGVQcm9wczogZnVuY3Rpb24gdmFsaWRhdGVQcm9wcyhfcmVmMTMpIHtcbiAgICB2YXIgY29sdW1uV2lkdGggPSBfcmVmMTMuY29sdW1uV2lkdGgsXG4gICAgICAgIHJvd0hlaWdodCA9IF9yZWYxMy5yb3dIZWlnaHQ7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHR5cGVvZiBjb2x1bW5XaWR0aCAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ0FuIGludmFsaWQgXCJjb2x1bW5XaWR0aFwiIHByb3AgaGFzIGJlZW4gc3BlY2lmaWVkLiAnICsgJ1ZhbHVlIHNob3VsZCBiZSBhIG51bWJlci4gJyArIChcIlxcXCJcIiArIChjb2x1bW5XaWR0aCA9PT0gbnVsbCA/ICdudWxsJyA6IHR5cGVvZiBjb2x1bW5XaWR0aCkgKyBcIlxcXCIgd2FzIHNwZWNpZmllZC5cIikpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHJvd0hlaWdodCAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ0FuIGludmFsaWQgXCJyb3dIZWlnaHRcIiBwcm9wIGhhcyBiZWVuIHNwZWNpZmllZC4gJyArICdWYWx1ZSBzaG91bGQgYmUgYSBudW1iZXIuICcgKyAoXCJcXFwiXCIgKyAocm93SGVpZ2h0ID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIHJvd0hlaWdodCkgKyBcIlxcXCIgd2FzIHNwZWNpZmllZC5cIikpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufSk7XG5cbnZhciBGaXhlZFNpemVMaXN0ID1cbi8qI19fUFVSRV9fKi9cbmNyZWF0ZUxpc3RDb21wb25lbnQoe1xuICBnZXRJdGVtT2Zmc2V0OiBmdW5jdGlvbiBnZXRJdGVtT2Zmc2V0KF9yZWYsIGluZGV4KSB7XG4gICAgdmFyIGl0ZW1TaXplID0gX3JlZi5pdGVtU2l6ZTtcbiAgICByZXR1cm4gaW5kZXggKiBpdGVtU2l6ZTtcbiAgfSxcbiAgZ2V0SXRlbVNpemU6IGZ1bmN0aW9uIGdldEl0ZW1TaXplKF9yZWYyLCBpbmRleCkge1xuICAgIHZhciBpdGVtU2l6ZSA9IF9yZWYyLml0ZW1TaXplO1xuICAgIHJldHVybiBpdGVtU2l6ZTtcbiAgfSxcbiAgZ2V0RXN0aW1hdGVkVG90YWxTaXplOiBmdW5jdGlvbiBnZXRFc3RpbWF0ZWRUb3RhbFNpemUoX3JlZjMpIHtcbiAgICB2YXIgaXRlbUNvdW50ID0gX3JlZjMuaXRlbUNvdW50LFxuICAgICAgICBpdGVtU2l6ZSA9IF9yZWYzLml0ZW1TaXplO1xuICAgIHJldHVybiBpdGVtU2l6ZSAqIGl0ZW1Db3VudDtcbiAgfSxcbiAgZ2V0T2Zmc2V0Rm9ySW5kZXhBbmRBbGlnbm1lbnQ6IGZ1bmN0aW9uIGdldE9mZnNldEZvckluZGV4QW5kQWxpZ25tZW50KF9yZWY0LCBpbmRleCwgYWxpZ24sIHNjcm9sbE9mZnNldCkge1xuICAgIHZhciBkaXJlY3Rpb24gPSBfcmVmNC5kaXJlY3Rpb24sXG4gICAgICAgIGhlaWdodCA9IF9yZWY0LmhlaWdodCxcbiAgICAgICAgaXRlbUNvdW50ID0gX3JlZjQuaXRlbUNvdW50LFxuICAgICAgICBpdGVtU2l6ZSA9IF9yZWY0Lml0ZW1TaXplLFxuICAgICAgICBsYXlvdXQgPSBfcmVmNC5sYXlvdXQsXG4gICAgICAgIHdpZHRoID0gX3JlZjQud2lkdGg7XG4gICAgLy8gVE9ETyBEZXByZWNhdGUgZGlyZWN0aW9uIFwiaG9yaXpvbnRhbFwiXG4gICAgdmFyIGlzSG9yaXpvbnRhbCA9IGRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnIHx8IGxheW91dCA9PT0gJ2hvcml6b250YWwnO1xuICAgIHZhciBzaXplID0gaXNIb3Jpem9udGFsID8gd2lkdGggOiBoZWlnaHQ7XG4gICAgdmFyIGxhc3RJdGVtT2Zmc2V0ID0gTWF0aC5tYXgoMCwgaXRlbUNvdW50ICogaXRlbVNpemUgLSBzaXplKTtcbiAgICB2YXIgbWF4T2Zmc2V0ID0gTWF0aC5taW4obGFzdEl0ZW1PZmZzZXQsIGluZGV4ICogaXRlbVNpemUpO1xuICAgIHZhciBtaW5PZmZzZXQgPSBNYXRoLm1heCgwLCBpbmRleCAqIGl0ZW1TaXplIC0gc2l6ZSArIGl0ZW1TaXplKTtcblxuICAgIGlmIChhbGlnbiA9PT0gJ3NtYXJ0Jykge1xuICAgICAgaWYgKHNjcm9sbE9mZnNldCA+PSBtaW5PZmZzZXQgLSBzaXplICYmIHNjcm9sbE9mZnNldCA8PSBtYXhPZmZzZXQgKyBzaXplKSB7XG4gICAgICAgIGFsaWduID0gJ2F1dG8nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWxpZ24gPSAnY2VudGVyJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzd2l0Y2ggKGFsaWduKSB7XG4gICAgICBjYXNlICdzdGFydCc6XG4gICAgICAgIHJldHVybiBtYXhPZmZzZXQ7XG5cbiAgICAgIGNhc2UgJ2VuZCc6XG4gICAgICAgIHJldHVybiBtaW5PZmZzZXQ7XG5cbiAgICAgIGNhc2UgJ2NlbnRlcic6XG4gICAgICAgIHtcbiAgICAgICAgICAvLyBcIkNlbnRlcmVkXCIgb2Zmc2V0IGlzIHVzdWFsbHkgdGhlIGF2ZXJhZ2Ugb2YgdGhlIG1pbiBhbmQgbWF4LlxuICAgICAgICAgIC8vIEJ1dCBuZWFyIHRoZSBlZGdlcyBvZiB0aGUgbGlzdCwgdGhpcyBkb2Vzbid0IGhvbGQgdHJ1ZS5cbiAgICAgICAgICB2YXIgbWlkZGxlT2Zmc2V0ID0gTWF0aC5yb3VuZChtaW5PZmZzZXQgKyAobWF4T2Zmc2V0IC0gbWluT2Zmc2V0KSAvIDIpO1xuXG4gICAgICAgICAgaWYgKG1pZGRsZU9mZnNldCA8IE1hdGguY2VpbChzaXplIC8gMikpIHtcbiAgICAgICAgICAgIHJldHVybiAwOyAvLyBuZWFyIHRoZSBiZWdpbm5pbmdcbiAgICAgICAgICB9IGVsc2UgaWYgKG1pZGRsZU9mZnNldCA+IGxhc3RJdGVtT2Zmc2V0ICsgTWF0aC5mbG9vcihzaXplIC8gMikpIHtcbiAgICAgICAgICAgIHJldHVybiBsYXN0SXRlbU9mZnNldDsgLy8gbmVhciB0aGUgZW5kXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBtaWRkbGVPZmZzZXQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgIGNhc2UgJ2F1dG8nOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKHNjcm9sbE9mZnNldCA+PSBtaW5PZmZzZXQgJiYgc2Nyb2xsT2Zmc2V0IDw9IG1heE9mZnNldCkge1xuICAgICAgICAgIHJldHVybiBzY3JvbGxPZmZzZXQ7XG4gICAgICAgIH0gZWxzZSBpZiAoc2Nyb2xsT2Zmc2V0IDwgbWluT2Zmc2V0KSB7XG4gICAgICAgICAgcmV0dXJuIG1pbk9mZnNldDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gbWF4T2Zmc2V0O1xuICAgICAgICB9XG5cbiAgICB9XG4gIH0sXG4gIGdldFN0YXJ0SW5kZXhGb3JPZmZzZXQ6IGZ1bmN0aW9uIGdldFN0YXJ0SW5kZXhGb3JPZmZzZXQoX3JlZjUsIG9mZnNldCkge1xuICAgIHZhciBpdGVtQ291bnQgPSBfcmVmNS5pdGVtQ291bnQsXG4gICAgICAgIGl0ZW1TaXplID0gX3JlZjUuaXRlbVNpemU7XG4gICAgcmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWluKGl0ZW1Db3VudCAtIDEsIE1hdGguZmxvb3Iob2Zmc2V0IC8gaXRlbVNpemUpKSk7XG4gIH0sXG4gIGdldFN0b3BJbmRleEZvclN0YXJ0SW5kZXg6IGZ1bmN0aW9uIGdldFN0b3BJbmRleEZvclN0YXJ0SW5kZXgoX3JlZjYsIHN0YXJ0SW5kZXgsIHNjcm9sbE9mZnNldCkge1xuICAgIHZhciBkaXJlY3Rpb24gPSBfcmVmNi5kaXJlY3Rpb24sXG4gICAgICAgIGhlaWdodCA9IF9yZWY2LmhlaWdodCxcbiAgICAgICAgaXRlbUNvdW50ID0gX3JlZjYuaXRlbUNvdW50LFxuICAgICAgICBpdGVtU2l6ZSA9IF9yZWY2Lml0ZW1TaXplLFxuICAgICAgICBsYXlvdXQgPSBfcmVmNi5sYXlvdXQsXG4gICAgICAgIHdpZHRoID0gX3JlZjYud2lkdGg7XG4gICAgLy8gVE9ETyBEZXByZWNhdGUgZGlyZWN0aW9uIFwiaG9yaXpvbnRhbFwiXG4gICAgdmFyIGlzSG9yaXpvbnRhbCA9IGRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnIHx8IGxheW91dCA9PT0gJ2hvcml6b250YWwnO1xuICAgIHZhciBvZmZzZXQgPSBzdGFydEluZGV4ICogaXRlbVNpemU7XG4gICAgdmFyIHNpemUgPSBpc0hvcml6b250YWwgPyB3aWR0aCA6IGhlaWdodDtcbiAgICB2YXIgbnVtVmlzaWJsZUl0ZW1zID0gTWF0aC5jZWlsKChzaXplICsgc2Nyb2xsT2Zmc2V0IC0gb2Zmc2V0KSAvIGl0ZW1TaXplKTtcbiAgICByZXR1cm4gTWF0aC5tYXgoMCwgTWF0aC5taW4oaXRlbUNvdW50IC0gMSwgc3RhcnRJbmRleCArIG51bVZpc2libGVJdGVtcyAtIDEgLy8gLTEgaXMgYmVjYXVzZSBzdG9wIGluZGV4IGlzIGluY2x1c2l2ZVxuICAgICkpO1xuICB9LFxuICBpbml0SW5zdGFuY2VQcm9wczogZnVuY3Rpb24gaW5pdEluc3RhbmNlUHJvcHMocHJvcHMpIHsvLyBOb29wXG4gIH0sXG4gIHNob3VsZFJlc2V0U3R5bGVDYWNoZU9uSXRlbVNpemVDaGFuZ2U6IHRydWUsXG4gIHZhbGlkYXRlUHJvcHM6IGZ1bmN0aW9uIHZhbGlkYXRlUHJvcHMoX3JlZjcpIHtcbiAgICB2YXIgaXRlbVNpemUgPSBfcmVmNy5pdGVtU2l6ZTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAodHlwZW9mIGl0ZW1TaXplICE9PSAnbnVtYmVyJykge1xuICAgICAgICB0aHJvdyBFcnJvcignQW4gaW52YWxpZCBcIml0ZW1TaXplXCIgcHJvcCBoYXMgYmVlbiBzcGVjaWZpZWQuICcgKyAnVmFsdWUgc2hvdWxkIGJlIGEgbnVtYmVyLiAnICsgKFwiXFxcIlwiICsgKGl0ZW1TaXplID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIGl0ZW1TaXplKSArIFwiXFxcIiB3YXMgc3BlY2lmaWVkLlwiKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59KTtcblxuLy8gUHVsbGVkIGZyb20gcmVhY3QtY29tcGF0XG4vLyBodHRwczovL2dpdGh1Yi5jb20vZGV2ZWxvcGl0L3ByZWFjdC1jb21wYXQvYmxvYi83YzVkZTAwZTdjODVlMmZmZDAxMWJmM2FmMDI4OTliNjNmNjk5ZDNhL3NyYy9pbmRleC5qcyNMMzQ5XG5mdW5jdGlvbiBzaGFsbG93RGlmZmVycyhwcmV2LCBuZXh0KSB7XG4gIGZvciAodmFyIGF0dHJpYnV0ZSBpbiBwcmV2KSB7XG4gICAgaWYgKCEoYXR0cmlidXRlIGluIG5leHQpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBfYXR0cmlidXRlIGluIG5leHQpIHtcbiAgICBpZiAocHJldltfYXR0cmlidXRlXSAhPT0gbmV4dFtfYXR0cmlidXRlXSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vLyBJdCBrbm93cyB0byBjb21wYXJlIGluZGl2aWR1YWwgc3R5bGUgcHJvcHMgYW5kIGlnbm9yZSB0aGUgd3JhcHBlciBvYmplY3QuXG4vLyBTZWUgaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL3JlYWN0LWFwaS5odG1sI3JlYWN0bWVtb1xuXG5mdW5jdGlvbiBhcmVFcXVhbChwcmV2UHJvcHMsIG5leHRQcm9wcykge1xuICB2YXIgcHJldlN0eWxlID0gcHJldlByb3BzLnN0eWxlLFxuICAgICAgcHJldlJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcmV2UHJvcHMsIFtcInN0eWxlXCJdKTtcblxuICB2YXIgbmV4dFN0eWxlID0gbmV4dFByb3BzLnN0eWxlLFxuICAgICAgbmV4dFJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShuZXh0UHJvcHMsIFtcInN0eWxlXCJdKTtcblxuICByZXR1cm4gIXNoYWxsb3dEaWZmZXJzKHByZXZTdHlsZSwgbmV4dFN0eWxlKSAmJiAhc2hhbGxvd0RpZmZlcnMocHJldlJlc3QsIG5leHRSZXN0KTtcbn1cblxuLy8gSXQga25vd3MgdG8gY29tcGFyZSBpbmRpdmlkdWFsIHN0eWxlIHByb3BzIGFuZCBpZ25vcmUgdGhlIHdyYXBwZXIgb2JqZWN0LlxuLy8gU2VlIGh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9yZWFjdC1jb21wb25lbnQuaHRtbCNzaG91bGRjb21wb25lbnR1cGRhdGVcblxuZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gIHJldHVybiAhYXJlRXF1YWwodGhpcy5wcm9wcywgbmV4dFByb3BzKSB8fCBzaGFsbG93RGlmZmVycyh0aGlzLnN0YXRlLCBuZXh0U3RhdGUpO1xufVxuXG5leHBvcnQgeyBWYXJpYWJsZVNpemVHcmlkLCBWYXJpYWJsZVNpemVMaXN0LCBGaXhlZFNpemVHcmlkLCBGaXhlZFNpemVMaXN0LCBhcmVFcXVhbCwgc2hvdWxkQ29tcG9uZW50VXBkYXRlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5lc20uanMubWFwXG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwocm9vdCkge1xuXHR2YXIgcmVzdWx0O1xuXHR2YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cblx0aWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcblx0XHRpZiAoU3ltYm9sLm9ic2VydmFibGUpIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbC5vYnNlcnZhYmxlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2woJ29ic2VydmFibGUnKTtcblx0XHRcdFN5bWJvbC5vYnNlcnZhYmxlID0gcmVzdWx0O1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRyZXN1bHQgPSAnQEBvYnNlcnZhYmxlJztcblx0fVxuXG5cdHJldHVybiByZXN1bHQ7XG59O1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNy4wLjFcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgbD1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxuPTYwMTAzLHA9NjAxMDY7ZXhwb3J0cy5GcmFnbWVudD02MDEwNztleHBvcnRzLlN0cmljdE1vZGU9NjAxMDg7ZXhwb3J0cy5Qcm9maWxlcj02MDExNDt2YXIgcT02MDEwOSxyPTYwMTEwLHQ9NjAxMTI7ZXhwb3J0cy5TdXNwZW5zZT02MDExMzt2YXIgdT02MDExNSx2PTYwMTE2O1xuaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcil7dmFyIHc9U3ltYm9sLmZvcjtuPXcoXCJyZWFjdC5lbGVtZW50XCIpO3A9dyhcInJlYWN0LnBvcnRhbFwiKTtleHBvcnRzLkZyYWdtZW50PXcoXCJyZWFjdC5mcmFnbWVudFwiKTtleHBvcnRzLlN0cmljdE1vZGU9dyhcInJlYWN0LnN0cmljdF9tb2RlXCIpO2V4cG9ydHMuUHJvZmlsZXI9dyhcInJlYWN0LnByb2ZpbGVyXCIpO3E9dyhcInJlYWN0LnByb3ZpZGVyXCIpO3I9dyhcInJlYWN0LmNvbnRleHRcIik7dD13KFwicmVhY3QuZm9yd2FyZF9yZWZcIik7ZXhwb3J0cy5TdXNwZW5zZT13KFwicmVhY3Quc3VzcGVuc2VcIik7dT13KFwicmVhY3QubWVtb1wiKTt2PXcoXCJyZWFjdC5sYXp5XCIpfXZhciB4PVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtcbmZ1bmN0aW9uIHkoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPXgmJmFbeF18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1mdW5jdGlvbiB6KGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifVxudmFyIEE9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319LEI9e307ZnVuY3Rpb24gQyhhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1CO3RoaXMudXBkYXRlcj1jfHxBfUMucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307Qy5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtpZihcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hKXRocm93IEVycm9yKHooODUpKTt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0MucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O1xuZnVuY3Rpb24gRCgpe31ELnByb3RvdHlwZT1DLnByb3RvdHlwZTtmdW5jdGlvbiBFKGEsYixjKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUI7dGhpcy51cGRhdGVyPWN8fEF9dmFyIEY9RS5wcm90b3R5cGU9bmV3IEQ7Ri5jb25zdHJ1Y3Rvcj1FO2woRixDLnByb3RvdHlwZSk7Ri5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgRz17Y3VycmVudDpudWxsfSxIPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksST17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gSihhLGIsYyl7dmFyIGUsZD17fSxrPW51bGwsaD1udWxsO2lmKG51bGwhPWIpZm9yKGUgaW4gdm9pZCAwIT09Yi5yZWYmJihoPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGs9XCJcIitiLmtleSksYilILmNhbGwoYixlKSYmIUkuaGFzT3duUHJvcGVydHkoZSkmJihkW2VdPWJbZV0pO3ZhciBnPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZylkLmNoaWxkcmVuPWM7ZWxzZSBpZigxPGcpe2Zvcih2YXIgZj1BcnJheShnKSxtPTA7bTxnO20rKylmW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49Zn1pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoZSBpbiBnPWEuZGVmYXVsdFByb3BzLGcpdm9pZCAwPT09ZFtlXSYmKGRbZV09Z1tlXSk7cmV0dXJueyQkdHlwZW9mOm4sdHlwZTphLGtleTprLHJlZjpoLHByb3BzOmQsX293bmVyOkcuY3VycmVudH19XG5mdW5jdGlvbiBLKGEsYil7cmV0dXJueyQkdHlwZW9mOm4sdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfX1mdW5jdGlvbiBMKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1ufWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrYS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgTT0vXFwvKy9nO2Z1bmN0aW9uIE4oYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoXCJcIithLmtleSk6Yi50b1N0cmluZygzNil9XG5mdW5jdGlvbiBPKGEsYixjLGUsZCl7dmFyIGs9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWt8fFwiYm9vbGVhblwiPT09aylhPW51bGw7dmFyIGg9ITE7aWYobnVsbD09PWEpaD0hMDtlbHNlIHN3aXRjaChrKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmg9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIG46Y2FzZSBwOmg9ITB9fWlmKGgpcmV0dXJuIGg9YSxkPWQoaCksYT1cIlwiPT09ZT9cIi5cIitOKGgsMCk6ZSxBcnJheS5pc0FycmF5KGQpPyhjPVwiXCIsbnVsbCE9YSYmKGM9YS5yZXBsYWNlKE0sXCIkJi9cIikrXCIvXCIpLE8oZCxiLGMsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYX0pKTpudWxsIT1kJiYoTChkKSYmKGQ9SyhkLGMrKCFkLmtleXx8aCYmaC5rZXk9PT1kLmtleT9cIlwiOihcIlwiK2Qua2V5KS5yZXBsYWNlKE0sXCIkJi9cIikrXCIvXCIpK2EpKSxiLnB1c2goZCkpLDE7aD0wO2U9XCJcIj09PWU/XCIuXCI6ZStcIjpcIjtpZihBcnJheS5pc0FycmF5KGEpKWZvcih2YXIgZz1cbjA7ZzxhLmxlbmd0aDtnKyspe2s9YVtnXTt2YXIgZj1lK04oayxnKTtoKz1PKGssYixjLGYsZCl9ZWxzZSBpZihmPXkoYSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLGc9MDshKGs9YS5uZXh0KCkpLmRvbmU7KWs9ay52YWx1ZSxmPWUrTihrLGcrKyksaCs9TyhrLGIsYyxmLGQpO2Vsc2UgaWYoXCJvYmplY3RcIj09PWspdGhyb3cgYj1cIlwiK2EsRXJyb3IoeigzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09Yj9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjpiKSk7cmV0dXJuIGh9ZnVuY3Rpb24gUChhLGIsYyl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgZT1bXSxkPTA7TyhhLGUsXCJcIixcIlwiLGZ1bmN0aW9uKGEpe3JldHVybiBiLmNhbGwoYyxhLGQrKyl9KTtyZXR1cm4gZX1cbmZ1bmN0aW9uIFEoYSl7aWYoLTE9PT1hLl9zdGF0dXMpe3ZhciBiPWEuX3Jlc3VsdDtiPWIoKTthLl9zdGF0dXM9MDthLl9yZXN1bHQ9YjtiLnRoZW4oZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGI9Yi5kZWZhdWx0LGEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1iKX0sZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1iKX0pfWlmKDE9PT1hLl9zdGF0dXMpcmV0dXJuIGEuX3Jlc3VsdDt0aHJvdyBhLl9yZXN1bHQ7fXZhciBSPXtjdXJyZW50Om51bGx9O2Z1bmN0aW9uIFMoKXt2YXIgYT1SLmN1cnJlbnQ7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IoeigzMjEpKTtyZXR1cm4gYX12YXIgVD17UmVhY3RDdXJyZW50RGlzcGF0Y2hlcjpSLFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnOnt0cmFuc2l0aW9uOjB9LFJlYWN0Q3VycmVudE93bmVyOkcsSXNTb21lUmVuZGVyZXJBY3Rpbmc6e2N1cnJlbnQ6ITF9LGFzc2lnbjpsfTtcbmV4cG9ydHMuQ2hpbGRyZW49e21hcDpQLGZvckVhY2g6ZnVuY3Rpb24oYSxiLGMpe1AoYSxmdW5jdGlvbigpe2IuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxjKX0sY291bnQ6ZnVuY3Rpb24oYSl7dmFyIGI9MDtQKGEsZnVuY3Rpb24oKXtiKyt9KTtyZXR1cm4gYn0sdG9BcnJheTpmdW5jdGlvbihhKXtyZXR1cm4gUChhLGZ1bmN0aW9uKGEpe3JldHVybiBhfSl8fFtdfSxvbmx5OmZ1bmN0aW9uKGEpe2lmKCFMKGEpKXRocm93IEVycm9yKHooMTQzKSk7cmV0dXJuIGF9fTtleHBvcnRzLkNvbXBvbmVudD1DO2V4cG9ydHMuUHVyZUNvbXBvbmVudD1FO2V4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9VDtcbmV4cG9ydHMuY2xvbmVFbGVtZW50PWZ1bmN0aW9uKGEsYixjKXtpZihudWxsPT09YXx8dm9pZCAwPT09YSl0aHJvdyBFcnJvcih6KDI2NyxhKSk7dmFyIGU9bCh7fSxhLnByb3BzKSxkPWEua2V5LGs9YS5yZWYsaD1hLl9vd25lcjtpZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGs9Yi5yZWYsaD1HLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoZD1cIlwiK2Iua2V5KTtpZihhLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMpdmFyIGc9YS50eXBlLmRlZmF1bHRQcm9wcztmb3IoZiBpbiBiKUguY2FsbChiLGYpJiYhSS5oYXNPd25Qcm9wZXJ0eShmKSYmKGVbZl09dm9pZCAwPT09YltmXSYmdm9pZCAwIT09Zz9nW2ZdOmJbZl0pfXZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZillLmNoaWxkcmVuPWM7ZWxzZSBpZigxPGYpe2c9QXJyYXkoZik7Zm9yKHZhciBtPTA7bTxmO20rKylnW21dPWFyZ3VtZW50c1ttKzJdO2UuY2hpbGRyZW49Z31yZXR1cm57JCR0eXBlb2Y6bix0eXBlOmEudHlwZSxcbmtleTpkLHJlZjprLHByb3BzOmUsX293bmVyOmh9fTtleHBvcnRzLmNyZWF0ZUNvbnRleHQ9ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj1udWxsKTthPXskJHR5cGVvZjpyLF9jYWxjdWxhdGVDaGFuZ2VkQml0czpiLF9jdXJyZW50VmFsdWU6YSxfY3VycmVudFZhbHVlMjphLF90aHJlYWRDb3VudDowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6cSxfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfTtleHBvcnRzLmNyZWF0ZUVsZW1lbnQ9SjtleHBvcnRzLmNyZWF0ZUZhY3Rvcnk9ZnVuY3Rpb24oYSl7dmFyIGI9Si5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9O2V4cG9ydHMuY3JlYXRlUmVmPWZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19O2V4cG9ydHMuZm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6dCxyZW5kZXI6YX19O2V4cG9ydHMuaXNWYWxpZEVsZW1lbnQ9TDtcbmV4cG9ydHMubGF6eT1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6dixfcGF5bG9hZDp7X3N0YXR1czotMSxfcmVzdWx0OmF9LF9pbml0OlF9fTtleHBvcnRzLm1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm57JCR0eXBlb2Y6dSx0eXBlOmEsY29tcGFyZTp2b2lkIDA9PT1iP251bGw6Yn19O2V4cG9ydHMudXNlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUNhbGxiYWNrKGEsYil9O2V4cG9ydHMudXNlQ29udGV4dD1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlQ29udGV4dChhLGIpfTtleHBvcnRzLnVzZURlYnVnVmFsdWU9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudXNlRWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VJbXBlcmF0aXZlSGFuZGxlPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gUygpLnVzZUltcGVyYXRpdmVIYW5kbGUoYSxiLGMpfTtcbmV4cG9ydHMudXNlTGF5b3V0RWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VMYXlvdXRFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VNZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VNZW1vKGEsYil9O2V4cG9ydHMudXNlUmVkdWNlcj1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIFMoKS51c2VSZWR1Y2VyKGEsYixjKX07ZXhwb3J0cy51c2VSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIFMoKS51c2VSZWYoYSl9O2V4cG9ydHMudXNlU3RhdGU9ZnVuY3Rpb24oYSl7cmV0dXJuIFMoKS51c2VTdGF0ZShhKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTcuMC4xXCI7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE3LjAuMVxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwicmVhY3RcIiksbT1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxyPXJlcXVpcmUoXCJzY2hlZHVsZXJcIik7ZnVuY3Rpb24geShhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1pZighYWEpdGhyb3cgRXJyb3IoeSgyMjcpKTt2YXIgYmE9bmV3IFNldCxjYT17fTtmdW5jdGlvbiBkYShhLGIpe2VhKGEsYik7ZWEoYStcIkNhcHR1cmVcIixiKX1cbmZ1bmN0aW9uIGVhKGEsYil7Y2FbYV09Yjtmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKWJhLmFkZChiW2FdKX1cbnZhciBmYT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudHx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCksaGE9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLGlhPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksXG5qYT17fSxrYT17fTtmdW5jdGlvbiBsYShhKXtpZihpYS5jYWxsKGthLGEpKXJldHVybiEwO2lmKGlhLmNhbGwoamEsYSkpcmV0dXJuITE7aWYoaGEudGVzdChhKSlyZXR1cm4ga2FbYV09ITA7amFbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gbWEoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBuYShhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxtYShhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIEIoYSxiLGMsZCxlLGYsZyl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yjt0aGlzLnNhbml0aXplVVJMPWY7dGhpcy5yZW1vdmVFbXB0eVN0cmluZz1nfXZhciBEPXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMCwhMSxhLG51bGwsITEsITEpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO0RbYl09bmV3IEIoYiwxLCExLGFbMV0sbnVsbCwhMSwhMSl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMiwhMSxhLG51bGwsITEsITEpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgZGlzYWJsZVJlbW90ZVBsYXliYWNrIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDMsITAsYSxudWxsLCExLCExKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDQsITEsYSxudWxsLCExLCExKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNiwhMSxhLG51bGwsITEsITEpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTt2YXIgb2E9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiBwYShhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShvYSxcbnBhKTtEW2JdPW5ldyBCKGIsMSwhMSxhLG51bGwsITEsITEpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uob2EscGEpO0RbYl09bmV3IEIoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITEsITEpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uob2EscGEpO0RbYl09bmV3IEIoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIiwhMSwhMSl9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbkQueGxpbmtIcmVmPW5ldyBCKFwieGxpbmtIcmVmXCIsMSwhMSxcInhsaW5rOmhyZWZcIixcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMCwhMSk7W1wic3JjXCIsXCJocmVmXCIsXCJhY3Rpb25cIixcImZvcm1BY3Rpb25cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMCwhMCl9KTtcbmZ1bmN0aW9uIHFhKGEsYixjLGQpe3ZhciBlPUQuaGFzT3duUHJvcGVydHkoYik/RFtiXTpudWxsO3ZhciBmPW51bGwhPT1lPzA9PT1lLnR5cGU6ZD8hMTohKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0/ITE6ITA7Znx8KG5hKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9sYShiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSkpfVxudmFyIHJhPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELHNhPTYwMTAzLHRhPTYwMTA2LHVhPTYwMTA3LHdhPTYwMTA4LHhhPTYwMTE0LHlhPTYwMTA5LHphPTYwMTEwLEFhPTYwMTEyLEJhPTYwMTEzLENhPTYwMTIwLERhPTYwMTE1LEVhPTYwMTE2LEZhPTYwMTIxLEdhPTYwMTI4LEhhPTYwMTI5LElhPTYwMTMwLEphPTYwMTMxO1xuaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcil7dmFyIEU9U3ltYm9sLmZvcjtzYT1FKFwicmVhY3QuZWxlbWVudFwiKTt0YT1FKFwicmVhY3QucG9ydGFsXCIpO3VhPUUoXCJyZWFjdC5mcmFnbWVudFwiKTt3YT1FKFwicmVhY3Quc3RyaWN0X21vZGVcIik7eGE9RShcInJlYWN0LnByb2ZpbGVyXCIpO3lhPUUoXCJyZWFjdC5wcm92aWRlclwiKTt6YT1FKFwicmVhY3QuY29udGV4dFwiKTtBYT1FKFwicmVhY3QuZm9yd2FyZF9yZWZcIik7QmE9RShcInJlYWN0LnN1c3BlbnNlXCIpO0NhPUUoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpO0RhPUUoXCJyZWFjdC5tZW1vXCIpO0VhPUUoXCJyZWFjdC5sYXp5XCIpO0ZhPUUoXCJyZWFjdC5ibG9ja1wiKTtFKFwicmVhY3Quc2NvcGVcIik7R2E9RShcInJlYWN0Lm9wYXF1ZS5pZFwiKTtIYT1FKFwicmVhY3QuZGVidWdfdHJhY2VfbW9kZVwiKTtJYT1FKFwicmVhY3Qub2Zmc2NyZWVuXCIpO0phPUUoXCJyZWFjdC5sZWdhY3lfaGlkZGVuXCIpfVxudmFyIEthPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBMYShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9S2EmJmFbS2FdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9dmFyIE1hO2Z1bmN0aW9uIE5hKGEpe2lmKHZvaWQgMD09PU1hKXRyeXt0aHJvdyBFcnJvcigpO31jYXRjaChjKXt2YXIgYj1jLnN0YWNrLnRyaW0oKS5tYXRjaCgvXFxuKCAqKGF0ICk/KS8pO01hPWImJmJbMV18fFwiXCJ9cmV0dXJuXCJcXG5cIitNYSthfXZhciBPYT0hMTtcbmZ1bmN0aW9uIFBhKGEsYil7aWYoIWF8fE9hKXJldHVyblwiXCI7T2E9ITA7dmFyIGM9RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U7RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9dm9pZCAwO3RyeXtpZihiKWlmKGI9ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO30sT2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwicHJvcHNcIix7c2V0OmZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9fSksXCJvYmplY3RcIj09PXR5cGVvZiBSZWZsZWN0JiZSZWZsZWN0LmNvbnN0cnVjdCl7dHJ5e1JlZmxlY3QuY29uc3RydWN0KGIsW10pfWNhdGNoKGspe3ZhciBkPWt9UmVmbGVjdC5jb25zdHJ1Y3QoYSxbXSxiKX1lbHNle3RyeXtiLmNhbGwoKX1jYXRjaChrKXtkPWt9YS5jYWxsKGIucHJvdG90eXBlKX1lbHNle3RyeXt0aHJvdyBFcnJvcigpO31jYXRjaChrKXtkPWt9YSgpfX1jYXRjaChrKXtpZihrJiZkJiZcInN0cmluZ1wiPT09dHlwZW9mIGsuc3RhY2spe2Zvcih2YXIgZT1rLnN0YWNrLnNwbGl0KFwiXFxuXCIpLFxuZj1kLnN0YWNrLnNwbGl0KFwiXFxuXCIpLGc9ZS5sZW5ndGgtMSxoPWYubGVuZ3RoLTE7MTw9ZyYmMDw9aCYmZVtnXSE9PWZbaF07KWgtLTtmb3IoOzE8PWcmJjA8PWg7Zy0tLGgtLSlpZihlW2ddIT09ZltoXSl7aWYoMSE9PWd8fDEhPT1oKXtkbyBpZihnLS0saC0tLDA+aHx8ZVtnXSE9PWZbaF0pcmV0dXJuXCJcXG5cIitlW2ddLnJlcGxhY2UoXCIgYXQgbmV3IFwiLFwiIGF0IFwiKTt3aGlsZSgxPD1nJiYwPD1oKX1icmVha319fWZpbmFsbHl7T2E9ITEsRXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9Y31yZXR1cm4oYT1hP2EuZGlzcGxheU5hbWV8fGEubmFtZTpcIlwiKT9OYShhKTpcIlwifVxuZnVuY3Rpb24gUWEoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDU6cmV0dXJuIE5hKGEudHlwZSk7Y2FzZSAxNjpyZXR1cm4gTmEoXCJMYXp5XCIpO2Nhc2UgMTM6cmV0dXJuIE5hKFwiU3VzcGVuc2VcIik7Y2FzZSAxOTpyZXR1cm4gTmEoXCJTdXNwZW5zZUxpc3RcIik7Y2FzZSAwOmNhc2UgMjpjYXNlIDE1OnJldHVybiBhPVBhKGEudHlwZSwhMSksYTtjYXNlIDExOnJldHVybiBhPVBhKGEudHlwZS5yZW5kZXIsITEpLGE7Y2FzZSAyMjpyZXR1cm4gYT1QYShhLnR5cGUuX3JlbmRlciwhMSksYTtjYXNlIDE6cmV0dXJuIGE9UGEoYS50eXBlLCEwKSxhO2RlZmF1bHQ6cmV0dXJuXCJcIn19XG5mdW5jdGlvbiBSYShhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIHVhOnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIHRhOnJldHVyblwiUG9ydGFsXCI7Y2FzZSB4YTpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSB3YTpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIEJhOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIENhOnJldHVyblwiU3VzcGVuc2VMaXN0XCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHphOnJldHVybihhLmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuQ29uc3VtZXJcIjtjYXNlIHlhOnJldHVybihhLl9jb250ZXh0LmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuUHJvdmlkZXJcIjtjYXNlIEFhOnZhciBiPWEucmVuZGVyO2I9Yi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxcIlwiO1xucmV0dXJuIGEuZGlzcGxheU5hbWV8fChcIlwiIT09Yj9cIkZvcndhcmRSZWYoXCIrYitcIilcIjpcIkZvcndhcmRSZWZcIik7Y2FzZSBEYTpyZXR1cm4gUmEoYS50eXBlKTtjYXNlIEZhOnJldHVybiBSYShhLl9yZW5kZXIpO2Nhc2UgRWE6Yj1hLl9wYXlsb2FkO2E9YS5faW5pdDt0cnl7cmV0dXJuIFJhKGEoYikpfWNhdGNoKGMpe319cmV0dXJuIG51bGx9ZnVuY3Rpb24gU2EoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fWZ1bmN0aW9uIFRhKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBVYShhKXt2YXIgYj1UYShhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24gVmEoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPVVhKGEpKX1mdW5jdGlvbiBXYShhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9VGEoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1mdW5jdGlvbiBYYShhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19XG5mdW5jdGlvbiBZYShhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gbSh7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9ZnVuY3Rpb24gWmEoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9U2EobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiAkYShhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJnFhKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBhYihhLGIpeyRhKGEsYik7dmFyIGM9U2EoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/YmIoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmYmIoYSxiLnR5cGUsU2EoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBjYihhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gYmIoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxYYShhLm93bmVyRG9jdW1lbnQpIT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9ZnVuY3Rpb24gZGIoYSl7dmFyIGI9XCJcIjthYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbCE9YSYmKGIrPWEpfSk7cmV0dXJuIGJ9ZnVuY3Rpb24gZWIoYSxiKXthPW0oe2NoaWxkcmVuOnZvaWQgMH0sYik7aWYoYj1kYihiLmNoaWxkcmVuKSlhLmNoaWxkcmVuPWI7cmV0dXJuIGF9XG5mdW5jdGlvbiBmYihhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrU2EoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIGdiKGEsYil7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl0aHJvdyBFcnJvcih5KDkxKSk7cmV0dXJuIG0oe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gaGIoYSxiKXt2YXIgYz1iLnZhbHVlO2lmKG51bGw9PWMpe2M9Yi5jaGlsZHJlbjtiPWIuZGVmYXVsdFZhbHVlO2lmKG51bGwhPWMpe2lmKG51bGwhPWIpdGhyb3cgRXJyb3IoeSg5MikpO2lmKEFycmF5LmlzQXJyYXkoYykpe2lmKCEoMT49Yy5sZW5ndGgpKXRocm93IEVycm9yKHkoOTMpKTtjPWNbMF19Yj1jfW51bGw9PWImJihiPVwiXCIpO2M9Yn1hLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpTYShjKX19XG5mdW5jdGlvbiBpYihhLGIpe3ZhciBjPVNhKGIudmFsdWUpLGQ9U2EoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBqYihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiZcIlwiIT09YiYmbnVsbCE9PWImJihhLnZhbHVlPWIpfXZhciBrYj17aHRtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixtYXRobWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsc3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn07XG5mdW5jdGlvbiBsYihhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fWZ1bmN0aW9uIG1iKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9sYihiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBuYixvYj1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoYS5uYW1lc3BhY2VVUkkhPT1rYi5zdmd8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXtuYj1uYnx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtuYi5pbm5lckhUTUw9XCI8c3ZnPlwiK2IudmFsdWVPZigpLnRvU3RyaW5nKCkrXCI8L3N2Zz5cIjtmb3IoYj1uYi5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBwYihhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIHFiPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxcbmZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LHJiPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhxYikuZm9yRWFjaChmdW5jdGlvbihhKXtyYi5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO3FiW2JdPXFiW2FdfSl9KTtmdW5jdGlvbiBzYihhLGIsYyl7cmV0dXJuIG51bGw9PWJ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwiXCI9PT1iP1wiXCI6Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBifHwwPT09Ynx8cWIuaGFzT3duUHJvcGVydHkoYSkmJnFiW2FdPyhcIlwiK2IpLnRyaW0oKTpiK1wicHhcIn1cbmZ1bmN0aW9uIHRiKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKSxlPXNiKGMsYltjXSxkKTtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIHViPW0oe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiB2YihhLGIpe2lmKGIpe2lmKHViW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IoeSgxMzcsYSkpO2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpe2lmKG51bGwhPWIuY2hpbGRyZW4pdGhyb3cgRXJyb3IoeSg2MCkpO2lmKCEoXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IoeSg2MSkpO31pZihudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGUpdGhyb3cgRXJyb3IoeSg2MikpO319XG5mdW5jdGlvbiB3YihhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19ZnVuY3Rpb24geGIoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfXZhciB5Yj1udWxsLHpiPW51bGwsQWI9bnVsbDtcbmZ1bmN0aW9uIEJiKGEpe2lmKGE9Q2IoYSkpe2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB5Yil0aHJvdyBFcnJvcih5KDI4MCkpO3ZhciBiPWEuc3RhdGVOb2RlO2ImJihiPURiKGIpLHliKGEuc3RhdGVOb2RlLGEudHlwZSxiKSl9fWZ1bmN0aW9uIEViKGEpe3piP0FiP0FiLnB1c2goYSk6QWI9W2FdOnpiPWF9ZnVuY3Rpb24gRmIoKXtpZih6Yil7dmFyIGE9emIsYj1BYjtBYj16Yj1udWxsO0JiKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylCYihiW2FdKX19ZnVuY3Rpb24gR2IoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBIYihhLGIsYyxkLGUpe3JldHVybiBhKGIsYyxkLGUpfWZ1bmN0aW9uIEliKCl7fXZhciBKYj1HYixLYj0hMSxMYj0hMTtmdW5jdGlvbiBNYigpe2lmKG51bGwhPT16Ynx8bnVsbCE9PUFiKUliKCksRmIoKX1cbmZ1bmN0aW9uIE5iKGEsYixjKXtpZihMYilyZXR1cm4gYShiLGMpO0xiPSEwO3RyeXtyZXR1cm4gSmIoYSxiLGMpfWZpbmFsbHl7TGI9ITEsTWIoKX19XG5mdW5jdGlvbiBPYihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKG51bGw9PT1jKXJldHVybiBudWxsO3ZhciBkPURiKGMpO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjpjYXNlIFwib25Nb3VzZUVudGVyXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtpZihjJiZcImZ1bmN0aW9uXCIhPT1cbnR5cGVvZiBjKXRocm93IEVycm9yKHkoMjMxLGIsdHlwZW9mIGMpKTtyZXR1cm4gY312YXIgUGI9ITE7aWYoZmEpdHJ5e3ZhciBRYj17fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoUWIsXCJwYXNzaXZlXCIse2dldDpmdW5jdGlvbigpe1BiPSEwfX0pO3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidGVzdFwiLFFiLFFiKTt3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRlc3RcIixRYixRYil9Y2F0Y2goYSl7UGI9ITF9ZnVuY3Rpb24gUmIoYSxiLGMsZCxlLGYsZyxoLGspe3ZhciBsPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLGwpfWNhdGNoKG4pe3RoaXMub25FcnJvcihuKX19dmFyIFNiPSExLFRiPW51bGwsVWI9ITEsVmI9bnVsbCxXYj17b25FcnJvcjpmdW5jdGlvbihhKXtTYj0hMDtUYj1hfX07ZnVuY3Rpb24gWGIoYSxiLGMsZCxlLGYsZyxoLGspe1NiPSExO1RiPW51bGw7UmIuYXBwbHkoV2IsYXJndW1lbnRzKX1cbmZ1bmN0aW9uIFliKGEsYixjLGQsZSxmLGcsaCxrKXtYYi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoU2Ipe2lmKFNiKXt2YXIgbD1UYjtTYj0hMTtUYj1udWxsfWVsc2UgdGhyb3cgRXJyb3IoeSgxOTgpKTtVYnx8KFViPSEwLFZiPWwpfX1mdW5jdGlvbiBaYihhKXt2YXIgYj1hLGM9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7YT1iO2RvIGI9YSwwIT09KGIuZmxhZ3MmMTAyNikmJihjPWIucmV0dXJuKSxhPWIucmV0dXJuO3doaWxlKGEpfXJldHVybiAzPT09Yi50YWc/YzpudWxsfWZ1bmN0aW9uICRiKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09YiYmKGE9YS5hbHRlcm5hdGUsbnVsbCE9PWEmJihiPWEubWVtb2l6ZWRTdGF0ZSkpO2lmKG51bGwhPT1iKXJldHVybiBiLmRlaHlkcmF0ZWR9cmV0dXJuIG51bGx9ZnVuY3Rpb24gYWMoYSl7aWYoWmIoYSkhPT1hKXRocm93IEVycm9yKHkoMTg4KSk7fVxuZnVuY3Rpb24gYmMoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpe2I9WmIoYSk7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IoeSgxODgpKTtyZXR1cm4gYiE9PWE/bnVsbDphfWZvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jLnJldHVybjtpZihudWxsPT09ZSlicmVhazt2YXIgZj1lLmFsdGVybmF0ZTtpZihudWxsPT09Zil7ZD1lLnJldHVybjtpZihudWxsIT09ZCl7Yz1kO2NvbnRpbnVlfWJyZWFrfWlmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IoZj1lLmNoaWxkO2Y7KXtpZihmPT09YylyZXR1cm4gYWMoZSksYTtpZihmPT09ZClyZXR1cm4gYWMoZSksYjtmPWYuc2libGluZ310aHJvdyBFcnJvcih5KDE4OCkpO31pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtmb3IodmFyIGc9ITEsaD1lLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpe2ZvcihoPWYuY2hpbGQ7aDspe2lmKGg9PT1cbmMpe2c9ITA7Yz1mO2Q9ZTticmVha31pZihoPT09ZCl7Zz0hMDtkPWY7Yz1lO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXRocm93IEVycm9yKHkoMTg5KSk7fX1pZihjLmFsdGVybmF0ZSE9PWQpdGhyb3cgRXJyb3IoeSgxOTApKTt9aWYoMyE9PWMudGFnKXRocm93IEVycm9yKHkoMTg4KSk7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBjYyhhKXthPWJjKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZC5yZXR1cm49YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gZGMoYSxiKXtmb3IodmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWI7KXtpZihiPT09YXx8Yj09PWMpcmV0dXJuITA7Yj1iLnJldHVybn1yZXR1cm4hMX12YXIgZWMsZmMsZ2MsaGMsaWM9ITEsamM9W10sa2M9bnVsbCxsYz1udWxsLG1jPW51bGwsbmM9bmV3IE1hcCxvYz1uZXcgTWFwLHBjPVtdLHFjPVwibW91c2Vkb3duIG1vdXNldXAgdG91Y2hjYW5jZWwgdG91Y2hlbmQgdG91Y2hzdGFydCBhdXhjbGljayBkYmxjbGljayBwb2ludGVyY2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJ1cCBkcmFnZW5kIGRyYWdzdGFydCBkcm9wIGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBpbnB1dCB0ZXh0SW5wdXQgY29weSBjdXQgcGFzdGUgY2xpY2sgY2hhbmdlIGNvbnRleHRtZW51IHJlc2V0IHN1Ym1pdFwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIHJjKGEsYixjLGQsZSl7cmV0dXJue2Jsb2NrZWRPbjphLGRvbUV2ZW50TmFtZTpiLGV2ZW50U3lzdGVtRmxhZ3M6Y3wxNixuYXRpdmVFdmVudDplLHRhcmdldENvbnRhaW5lcnM6W2RdfX1mdW5jdGlvbiBzYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmNhc2UgXCJmb2N1c291dFwiOmtjPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpsYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjptYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6bmMuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6b2MuZGVsZXRlKGIucG9pbnRlcklkKX19XG5mdW5jdGlvbiB0YyhhLGIsYyxkLGUsZil7aWYobnVsbD09PWF8fGEubmF0aXZlRXZlbnQhPT1mKXJldHVybiBhPXJjKGIsYyxkLGUsZiksbnVsbCE9PWImJihiPUNiKGIpLG51bGwhPT1iJiZmYyhiKSksYTthLmV2ZW50U3lzdGVtRmxhZ3N8PWQ7Yj1hLnRhcmdldENvbnRhaW5lcnM7bnVsbCE9PWUmJi0xPT09Yi5pbmRleE9mKGUpJiZiLnB1c2goZSk7cmV0dXJuIGF9XG5mdW5jdGlvbiB1YyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiZm9jdXNpblwiOnJldHVybiBrYz10YyhrYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJkcmFnZW50ZXJcIjpyZXR1cm4gbGM9dGMobGMsYSxiLGMsZCxlKSwhMDtjYXNlIFwibW91c2VvdmVyXCI6cmV0dXJuIG1jPXRjKG1jLGEsYixjLGQsZSksITA7Y2FzZSBcInBvaW50ZXJvdmVyXCI6dmFyIGY9ZS5wb2ludGVySWQ7bmMuc2V0KGYsdGMobmMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpO3JldHVybiEwO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOnJldHVybiBmPWUucG9pbnRlcklkLG9jLnNldChmLHRjKG9jLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKSwhMH1yZXR1cm4hMX1cbmZ1bmN0aW9uIHZjKGEpe3ZhciBiPXdjKGEudGFyZ2V0KTtpZihudWxsIT09Yil7dmFyIGM9WmIoYik7aWYobnVsbCE9PWMpaWYoYj1jLnRhZywxMz09PWIpe2lmKGI9JGIoYyksbnVsbCE9PWIpe2EuYmxvY2tlZE9uPWI7aGMoYS5sYW5lUHJpb3JpdHksZnVuY3Rpb24oKXtyLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShhLnByaW9yaXR5LGZ1bmN0aW9uKCl7Z2MoYyl9KX0pO3JldHVybn19ZWxzZSBpZigzPT09YiYmYy5zdGF0ZU5vZGUuaHlkcmF0ZSl7YS5ibG9ja2VkT249Mz09PWMudGFnP2Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtyZXR1cm59fWEuYmxvY2tlZE9uPW51bGx9XG5mdW5jdGlvbiB4YyhhKXtpZihudWxsIT09YS5ibG9ja2VkT24pcmV0dXJuITE7Zm9yKHZhciBiPWEudGFyZ2V0Q29udGFpbmVyczswPGIubGVuZ3RoOyl7dmFyIGM9eWMoYS5kb21FdmVudE5hbWUsYS5ldmVudFN5c3RlbUZsYWdzLGJbMF0sYS5uYXRpdmVFdmVudCk7aWYobnVsbCE9PWMpcmV0dXJuIGI9Q2IoYyksbnVsbCE9PWImJmZjKGIpLGEuYmxvY2tlZE9uPWMsITE7Yi5zaGlmdCgpfXJldHVybiEwfWZ1bmN0aW9uIHpjKGEsYixjKXt4YyhhKSYmYy5kZWxldGUoYil9XG5mdW5jdGlvbiBBYygpe2ZvcihpYz0hMTswPGpjLmxlbmd0aDspe3ZhciBhPWpjWzBdO2lmKG51bGwhPT1hLmJsb2NrZWRPbil7YT1DYihhLmJsb2NrZWRPbik7bnVsbCE9PWEmJmVjKGEpO2JyZWFrfWZvcih2YXIgYj1hLnRhcmdldENvbnRhaW5lcnM7MDxiLmxlbmd0aDspe3ZhciBjPXljKGEuZG9tRXZlbnROYW1lLGEuZXZlbnRTeXN0ZW1GbGFncyxiWzBdLGEubmF0aXZlRXZlbnQpO2lmKG51bGwhPT1jKXthLmJsb2NrZWRPbj1jO2JyZWFrfWIuc2hpZnQoKX1udWxsPT09YS5ibG9ja2VkT24mJmpjLnNoaWZ0KCl9bnVsbCE9PWtjJiZ4YyhrYykmJihrYz1udWxsKTtudWxsIT09bGMmJnhjKGxjKSYmKGxjPW51bGwpO251bGwhPT1tYyYmeGMobWMpJiYobWM9bnVsbCk7bmMuZm9yRWFjaCh6Yyk7b2MuZm9yRWFjaCh6Yyl9XG5mdW5jdGlvbiBCYyhhLGIpe2EuYmxvY2tlZE9uPT09YiYmKGEuYmxvY2tlZE9uPW51bGwsaWN8fChpYz0hMCxyLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxBYykpKX1cbmZ1bmN0aW9uIENjKGEpe2Z1bmN0aW9uIGIoYil7cmV0dXJuIEJjKGIsYSl9aWYoMDxqYy5sZW5ndGgpe0JjKGpjWzBdLGEpO2Zvcih2YXIgYz0xO2M8amMubGVuZ3RoO2MrKyl7dmFyIGQ9amNbY107ZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCl9fW51bGwhPT1rYyYmQmMoa2MsYSk7bnVsbCE9PWxjJiZCYyhsYyxhKTtudWxsIT09bWMmJkJjKG1jLGEpO25jLmZvckVhY2goYik7b2MuZm9yRWFjaChiKTtmb3IoYz0wO2M8cGMubGVuZ3RoO2MrKylkPXBjW2NdLGQuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpO2Zvcig7MDxwYy5sZW5ndGgmJihjPXBjWzBdLG51bGw9PT1jLmJsb2NrZWRPbik7KXZjKGMpLG51bGw9PT1jLmJsb2NrZWRPbiYmcGMuc2hpZnQoKX1cbmZ1bmN0aW9uIERjKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7cmV0dXJuIGN9dmFyIEVjPXthbmltYXRpb25lbmQ6RGMoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246RGMoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDpEYyhcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDpEYyhcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LEZjPXt9LEdjPXt9O1xuZmEmJihHYz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBFYy5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBFYy5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBFYy5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBFYy50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO2Z1bmN0aW9uIEhjKGEpe2lmKEZjW2FdKXJldHVybiBGY1thXTtpZighRWNbYV0pcmV0dXJuIGE7dmFyIGI9RWNbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gR2MpcmV0dXJuIEZjW2FdPWJbY107cmV0dXJuIGF9XG52YXIgSWM9SGMoXCJhbmltYXRpb25lbmRcIiksSmM9SGMoXCJhbmltYXRpb25pdGVyYXRpb25cIiksS2M9SGMoXCJhbmltYXRpb25zdGFydFwiKSxMYz1IYyhcInRyYW5zaXRpb25lbmRcIiksTWM9bmV3IE1hcCxOYz1uZXcgTWFwLE9jPVtcImFib3J0XCIsXCJhYm9ydFwiLEljLFwiYW5pbWF0aW9uRW5kXCIsSmMsXCJhbmltYXRpb25JdGVyYXRpb25cIixLYyxcImFuaW1hdGlvblN0YXJ0XCIsXCJjYW5wbGF5XCIsXCJjYW5QbGF5XCIsXCJjYW5wbGF5dGhyb3VnaFwiLFwiY2FuUGxheVRocm91Z2hcIixcImR1cmF0aW9uY2hhbmdlXCIsXCJkdXJhdGlvbkNoYW5nZVwiLFwiZW1wdGllZFwiLFwiZW1wdGllZFwiLFwiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIixcImVuZGVkXCIsXCJlbmRlZFwiLFwiZXJyb3JcIixcImVycm9yXCIsXCJnb3Rwb2ludGVyY2FwdHVyZVwiLFwiZ290UG9pbnRlckNhcHR1cmVcIixcImxvYWRcIixcImxvYWRcIixcImxvYWRlZGRhdGFcIixcImxvYWRlZERhdGFcIixcImxvYWRlZG1ldGFkYXRhXCIsXCJsb2FkZWRNZXRhZGF0YVwiLFwibG9hZHN0YXJ0XCIsXCJsb2FkU3RhcnRcIixcblwibG9zdHBvaW50ZXJjYXB0dXJlXCIsXCJsb3N0UG9pbnRlckNhcHR1cmVcIixcInBsYXlpbmdcIixcInBsYXlpbmdcIixcInByb2dyZXNzXCIsXCJwcm9ncmVzc1wiLFwic2Vla2luZ1wiLFwic2Vla2luZ1wiLFwic3RhbGxlZFwiLFwic3RhbGxlZFwiLFwic3VzcGVuZFwiLFwic3VzcGVuZFwiLFwidGltZXVwZGF0ZVwiLFwidGltZVVwZGF0ZVwiLExjLFwidHJhbnNpdGlvbkVuZFwiLFwid2FpdGluZ1wiLFwid2FpdGluZ1wiXTtmdW5jdGlvbiBQYyhhLGIpe2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7Yys9Mil7dmFyIGQ9YVtjXSxlPWFbYysxXTtlPVwib25cIisoZVswXS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSkpO05jLnNldChkLGIpO01jLnNldChkLGUpO2RhKGUsW2RdKX19dmFyIFFjPXIudW5zdGFibGVfbm93O1FjKCk7dmFyIEY9ODtcbmZ1bmN0aW9uIFJjKGEpe2lmKDAhPT0oMSZhKSlyZXR1cm4gRj0xNSwxO2lmKDAhPT0oMiZhKSlyZXR1cm4gRj0xNCwyO2lmKDAhPT0oNCZhKSlyZXR1cm4gRj0xMyw0O3ZhciBiPTI0JmE7aWYoMCE9PWIpcmV0dXJuIEY9MTIsYjtpZigwIT09KGEmMzIpKXJldHVybiBGPTExLDMyO2I9MTkyJmE7aWYoMCE9PWIpcmV0dXJuIEY9MTAsYjtpZigwIT09KGEmMjU2KSlyZXR1cm4gRj05LDI1NjtiPTM1ODQmYTtpZigwIT09YilyZXR1cm4gRj04LGI7aWYoMCE9PShhJjQwOTYpKXJldHVybiBGPTcsNDA5NjtiPTQxODYxMTImYTtpZigwIT09YilyZXR1cm4gRj02LGI7Yj02MjkxNDU2MCZhO2lmKDAhPT1iKXJldHVybiBGPTUsYjtpZihhJjY3MTA4ODY0KXJldHVybiBGPTQsNjcxMDg4NjQ7aWYoMCE9PShhJjEzNDIxNzcyOCkpcmV0dXJuIEY9MywxMzQyMTc3Mjg7Yj04MDUzMDYzNjgmYTtpZigwIT09YilyZXR1cm4gRj0yLGI7aWYoMCE9PSgxMDczNzQxODI0JmEpKXJldHVybiBGPTEsMTA3Mzc0MTgyNDtcbkY9ODtyZXR1cm4gYX1mdW5jdGlvbiBTYyhhKXtzd2l0Y2goYSl7Y2FzZSA5OTpyZXR1cm4gMTU7Y2FzZSA5ODpyZXR1cm4gMTA7Y2FzZSA5NzpjYXNlIDk2OnJldHVybiA4O2Nhc2UgOTU6cmV0dXJuIDI7ZGVmYXVsdDpyZXR1cm4gMH19ZnVuY3Rpb24gVGMoYSl7c3dpdGNoKGEpe2Nhc2UgMTU6Y2FzZSAxNDpyZXR1cm4gOTk7Y2FzZSAxMzpjYXNlIDEyOmNhc2UgMTE6Y2FzZSAxMDpyZXR1cm4gOTg7Y2FzZSA5OmNhc2UgODpjYXNlIDc6Y2FzZSA2OmNhc2UgNDpjYXNlIDU6cmV0dXJuIDk3O2Nhc2UgMzpjYXNlIDI6Y2FzZSAxOnJldHVybiA5NTtjYXNlIDA6cmV0dXJuIDkwO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzNTgsYSkpO319XG5mdW5jdGlvbiBVYyhhLGIpe3ZhciBjPWEucGVuZGluZ0xhbmVzO2lmKDA9PT1jKXJldHVybiBGPTA7dmFyIGQ9MCxlPTAsZj1hLmV4cGlyZWRMYW5lcyxnPWEuc3VzcGVuZGVkTGFuZXMsaD1hLnBpbmdlZExhbmVzO2lmKDAhPT1mKWQ9ZixlPUY9MTU7ZWxzZSBpZihmPWMmMTM0MjE3NzI3LDAhPT1mKXt2YXIgaz1mJn5nOzAhPT1rPyhkPVJjKGspLGU9Rik6KGgmPWYsMCE9PWgmJihkPVJjKGgpLGU9RikpfWVsc2UgZj1jJn5nLDAhPT1mPyhkPVJjKGYpLGU9Rik6MCE9PWgmJihkPVJjKGgpLGU9Rik7aWYoMD09PWQpcmV0dXJuIDA7ZD0zMS1WYyhkKTtkPWMmKCgwPmQ/MDoxPDxkKTw8MSktMTtpZigwIT09YiYmYiE9PWQmJjA9PT0oYiZnKSl7UmMoYik7aWYoZTw9RilyZXR1cm4gYjtGPWV9Yj1hLmVudGFuZ2xlZExhbmVzO2lmKDAhPT1iKWZvcihhPWEuZW50YW5nbGVtZW50cyxiJj1kOzA8YjspYz0zMS1WYyhiKSxlPTE8PGMsZHw9YVtjXSxiJj1+ZTtyZXR1cm4gZH1cbmZ1bmN0aW9uIFdjKGEpe2E9YS5wZW5kaW5nTGFuZXMmLTEwNzM3NDE4MjU7cmV0dXJuIDAhPT1hP2E6YSYxMDczNzQxODI0PzEwNzM3NDE4MjQ6MH1mdW5jdGlvbiBYYyhhLGIpe3N3aXRjaChhKXtjYXNlIDE1OnJldHVybiAxO2Nhc2UgMTQ6cmV0dXJuIDI7Y2FzZSAxMjpyZXR1cm4gYT1ZYygyNCZ+YiksMD09PWE/WGMoMTAsYik6YTtjYXNlIDEwOnJldHVybiBhPVljKDE5MiZ+YiksMD09PWE/WGMoOCxiKTphO2Nhc2UgODpyZXR1cm4gYT1ZYygzNTg0Jn5iKSwwPT09YSYmKGE9WWMoNDE4NjExMiZ+YiksMD09PWEmJihhPTUxMikpLGE7Y2FzZSAyOnJldHVybiBiPVljKDgwNTMwNjM2OCZ+YiksMD09PWImJihiPTI2ODQzNTQ1NiksYn10aHJvdyBFcnJvcih5KDM1OCxhKSk7fWZ1bmN0aW9uIFljKGEpe3JldHVybiBhJi1hfWZ1bmN0aW9uIFpjKGEpe2Zvcih2YXIgYj1bXSxjPTA7MzE+YztjKyspYi5wdXNoKGEpO3JldHVybiBifVxuZnVuY3Rpb24gJGMoYSxiLGMpe2EucGVuZGluZ0xhbmVzfD1iO3ZhciBkPWItMTthLnN1c3BlbmRlZExhbmVzJj1kO2EucGluZ2VkTGFuZXMmPWQ7YT1hLmV2ZW50VGltZXM7Yj0zMS1WYyhiKTthW2JdPWN9dmFyIFZjPU1hdGguY2x6MzI/TWF0aC5jbHozMjphZCxiZD1NYXRoLmxvZyxjZD1NYXRoLkxOMjtmdW5jdGlvbiBhZChhKXtyZXR1cm4gMD09PWE/MzI6MzEtKGJkKGEpL2NkfDApfDB9dmFyIGRkPXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksZWQ9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksZmQ9ITA7ZnVuY3Rpb24gZ2QoYSxiLGMsZCl7S2J8fEliKCk7dmFyIGU9aGQsZj1LYjtLYj0hMDt0cnl7SGIoZSxhLGIsYyxkKX1maW5hbGx5eyhLYj1mKXx8TWIoKX19ZnVuY3Rpb24gaWQoYSxiLGMsZCl7ZWQoZGQsaGQuYmluZChudWxsLGEsYixjLGQpKX1cbmZ1bmN0aW9uIGhkKGEsYixjLGQpe2lmKGZkKXt2YXIgZTtpZigoZT0wPT09KGImNCkpJiYwPGpjLmxlbmd0aCYmLTE8cWMuaW5kZXhPZihhKSlhPXJjKG51bGwsYSxiLGMsZCksamMucHVzaChhKTtlbHNle3ZhciBmPXljKGEsYixjLGQpO2lmKG51bGw9PT1mKWUmJnNjKGEsZCk7ZWxzZXtpZihlKXtpZigtMTxxYy5pbmRleE9mKGEpKXthPXJjKGYsYSxiLGMsZCk7amMucHVzaChhKTtyZXR1cm59aWYodWMoZixhLGIsYyxkKSlyZXR1cm47c2MoYSxkKX1qZChhLGIsZCxudWxsLGMpfX19fVxuZnVuY3Rpb24geWMoYSxiLGMsZCl7dmFyIGU9eGIoZCk7ZT13YyhlKTtpZihudWxsIT09ZSl7dmFyIGY9WmIoZSk7aWYobnVsbD09PWYpZT1udWxsO2Vsc2V7dmFyIGc9Zi50YWc7aWYoMTM9PT1nKXtlPSRiKGYpO2lmKG51bGwhPT1lKXJldHVybiBlO2U9bnVsbH1lbHNlIGlmKDM9PT1nKXtpZihmLnN0YXRlTm9kZS5oeWRyYXRlKXJldHVybiAzPT09Zi50YWc/Zi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO2U9bnVsbH1lbHNlIGYhPT1lJiYoZT1udWxsKX19amQoYSxiLGQsZSxjKTtyZXR1cm4gbnVsbH12YXIga2Q9bnVsbCxsZD1udWxsLG1kPW51bGw7XG5mdW5jdGlvbiBuZCgpe2lmKG1kKXJldHVybiBtZDt2YXIgYSxiPWxkLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuIG1kPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9ZnVuY3Rpb24gb2QoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9ZnVuY3Rpb24gcGQoKXtyZXR1cm4hMH1mdW5jdGlvbiBxZCgpe3JldHVybiExfVxuZnVuY3Rpb24gcmQoYSl7ZnVuY3Rpb24gYihiLGQsZSxmLGcpe3RoaXMuX3JlYWN0TmFtZT1iO3RoaXMuX3RhcmdldEluc3Q9ZTt0aGlzLnR5cGU9ZDt0aGlzLm5hdGl2ZUV2ZW50PWY7dGhpcy50YXJnZXQ9Zzt0aGlzLmN1cnJlbnRUYXJnZXQ9bnVsbDtmb3IodmFyIGMgaW4gYSlhLmhhc093blByb3BlcnR5KGMpJiYoYj1hW2NdLHRoaXNbY109Yj9iKGYpOmZbY10pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1mLmRlZmF1bHRQcmV2ZW50ZWQ/Zi5kZWZhdWx0UHJldmVudGVkOiExPT09Zi5yZXR1cm5WYWx1ZSk/cGQ6cWQ7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1xZDtyZXR1cm4gdGhpc31tKGIucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiZcbihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1wZCl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1wZCl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt9LGlzUGVyc2lzdGVudDpwZH0pO3JldHVybiBifVxudmFyIHNkPXtldmVudFBoYXNlOjAsYnViYmxlczowLGNhbmNlbGFibGU6MCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOjAsaXNUcnVzdGVkOjB9LHRkPXJkKHNkKSx1ZD1tKHt9LHNkLHt2aWV3OjAsZGV0YWlsOjB9KSx2ZD1yZCh1ZCksd2QseGQseWQsQWQ9bSh7fSx1ZCx7c2NyZWVuWDowLHNjcmVlblk6MCxjbGllbnRYOjAsY2xpZW50WTowLHBhZ2VYOjAscGFnZVk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZCxidXR0b246MCxidXR0b25zOjAscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gdm9pZCAwPT09YS5yZWxhdGVkVGFyZ2V0P2EuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudDphLnJlbGF0ZWRUYXJnZXR9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW5cbmEpcmV0dXJuIGEubW92ZW1lbnRYO2EhPT15ZCYmKHlkJiZcIm1vdXNlbW92ZVwiPT09YS50eXBlPyh3ZD1hLnNjcmVlblgteWQuc2NyZWVuWCx4ZD1hLnNjcmVlblkteWQuc2NyZWVuWSk6eGQ9d2Q9MCx5ZD1hKTtyZXR1cm4gd2R9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtyZXR1cm5cIm1vdmVtZW50WVwiaW4gYT9hLm1vdmVtZW50WTp4ZH19KSxCZD1yZChBZCksQ2Q9bSh7fSxBZCx7ZGF0YVRyYW5zZmVyOjB9KSxEZD1yZChDZCksRWQ9bSh7fSx1ZCx7cmVsYXRlZFRhcmdldDowfSksRmQ9cmQoRWQpLEdkPW0oe30sc2Qse2FuaW1hdGlvbk5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLEhkPXJkKEdkKSxJZD1tKHt9LHNkLHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksSmQ9cmQoSWQpLEtkPW0oe30sc2Qse2RhdGE6MH0pLExkPXJkKEtkKSxNZD17RXNjOlwiRXNjYXBlXCIsXG5TcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxOZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIiwxMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIixcbjExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sT2Q9e0FsdDpcImFsdEtleVwiLENvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIFBkKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9T2RbYV0pPyEhYlthXTohMX1mdW5jdGlvbiB6ZCgpe3JldHVybiBQZH1cbnZhciBRZD1tKHt9LHVkLHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPU1kW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPW9kKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9OZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGNvZGU6MCxsb2NhdGlvbjowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxyZXBlYXQ6MCxsb2NhbGU6MCxnZXRNb2RpZmllclN0YXRlOnpkLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9vZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP29kKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksUmQ9cmQoUWQpLFNkPW0oe30sQWQse3BvaW50ZXJJZDowLHdpZHRoOjAsaGVpZ2h0OjAscHJlc3N1cmU6MCx0YW5nZW50aWFsUHJlc3N1cmU6MCx0aWx0WDowLHRpbHRZOjAsdHdpc3Q6MCxwb2ludGVyVHlwZTowLGlzUHJpbWFyeTowfSksVGQ9cmQoU2QpLFVkPW0oe30sdWQse3RvdWNoZXM6MCx0YXJnZXRUb3VjaGVzOjAsY2hhbmdlZFRvdWNoZXM6MCxhbHRLZXk6MCxtZXRhS2V5OjAsY3RybEtleTowLHNoaWZ0S2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZH0pLFZkPXJkKFVkKSxXZD1tKHt9LHNkLHtwcm9wZXJ0eU5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLFhkPXJkKFdkKSxZZD1tKHt9LEFkLHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW4gYT8tYS53aGVlbERlbHRhWDowfSxcbmRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjowLGRlbHRhTW9kZTowfSksWmQ9cmQoWWQpLCRkPVs5LDEzLDI3LDMyXSxhZT1mYSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csYmU9bnVsbDtmYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoYmU9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTt2YXIgY2U9ZmEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFiZSxkZT1mYSYmKCFhZXx8YmUmJjg8YmUmJjExPj1iZSksZWU9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksZmU9ITE7XG5mdW5jdGlvbiBnZShhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PSRkLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJmb2N1c291dFwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIGhlKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIGllPSExO2Z1bmN0aW9uIGplKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBoZShiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7ZmU9ITA7cmV0dXJuIGVlO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PWVlJiZmZT9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBrZShhLGIpe2lmKGllKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFhZSYmZ2UoYSxiKT8oYT1uZCgpLG1kPWxkPWtkPW51bGwsaWU9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGRlJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBsZT17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBtZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIWxlW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1mdW5jdGlvbiBuZShhLGIsYyxkKXtFYihkKTtiPW9lKGIsXCJvbkNoYW5nZVwiKTswPGIubGVuZ3RoJiYoYz1uZXcgdGQoXCJvbkNoYW5nZVwiLFwiY2hhbmdlXCIsbnVsbCxjLGQpLGEucHVzaCh7ZXZlbnQ6YyxsaXN0ZW5lcnM6Yn0pKX12YXIgcGU9bnVsbCxxZT1udWxsO2Z1bmN0aW9uIHJlKGEpe3NlKGEsMCl9ZnVuY3Rpb24gdGUoYSl7dmFyIGI9dWUoYSk7aWYoV2EoYikpcmV0dXJuIGF9XG5mdW5jdGlvbiB2ZShhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciB3ZT0hMTtpZihmYSl7dmFyIHhlO2lmKGZhKXt2YXIgeWU9XCJvbmlucHV0XCJpbiBkb2N1bWVudDtpZigheWUpe3ZhciB6ZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3plLnNldEF0dHJpYnV0ZShcIm9uaW5wdXRcIixcInJldHVybjtcIik7eWU9XCJmdW5jdGlvblwiPT09dHlwZW9mIHplLm9uaW5wdXR9eGU9eWV9ZWxzZSB4ZT0hMTt3ZT14ZSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKX1mdW5jdGlvbiBBZSgpe3BlJiYocGUuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpLHFlPXBlPW51bGwpfWZ1bmN0aW9uIEJlKGEpe2lmKFwidmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZ0ZShxZSkpe3ZhciBiPVtdO25lKGIscWUsYSx4YihhKSk7YT1yZTtpZihLYilhKGIpO2Vsc2V7S2I9ITA7dHJ5e0diKGEsYil9ZmluYWxseXtLYj0hMSxNYigpfX19fVxuZnVuY3Rpb24gQ2UoYSxiLGMpe1wiZm9jdXNpblwiPT09YT8oQWUoKSxwZT1iLHFlPWMscGUuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpKTpcImZvY3Vzb3V0XCI9PT1hJiZBZSgpfWZ1bmN0aW9uIERlKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIHRlKHFlKX1mdW5jdGlvbiBFZShhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEZlKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEdlKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgSGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6R2UsSWU9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIEplKGEsYil7aWYoSGUoYSxiKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT09dHlwZW9mIGF8fG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGJ8fG51bGw9PT1iKXJldHVybiExO3ZhciBjPU9iamVjdC5rZXlzKGEpLGQ9T2JqZWN0LmtleXMoYik7aWYoYy5sZW5ndGghPT1kLmxlbmd0aClyZXR1cm4hMTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKWlmKCFJZS5jYWxsKGIsY1tkXSl8fCFIZShhW2NbZF1dLGJbY1tkXV0pKXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIEtlKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIExlKGEsYil7dmFyIGM9S2UoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9S2UoYyl9fWZ1bmN0aW9uIE1lKGEsYil7cmV0dXJuIGEmJmI/YT09PWI/ITA6YSYmMz09PWEubm9kZVR5cGU/ITE6YiYmMz09PWIubm9kZVR5cGU/TWUoYSxiLnBhcmVudE5vZGUpOlwiY29udGFpbnNcImluIGE/YS5jb250YWlucyhiKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uPyEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTYpOiExOiExfVxuZnVuY3Rpb24gTmUoKXtmb3IodmFyIGE9d2luZG93LGI9WGEoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXt2YXIgYz1cInN0cmluZ1wiPT09dHlwZW9mIGIuY29udGVudFdpbmRvdy5sb2NhdGlvbi5ocmVmfWNhdGNoKGQpe2M9ITF9aWYoYylhPWIuY29udGVudFdpbmRvdztlbHNlIGJyZWFrO2I9WGEoYS5kb2N1bWVudCl9cmV0dXJuIGJ9ZnVuY3Rpb24gT2UoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbnZhciBQZT1mYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLFFlPW51bGwsUmU9bnVsbCxTZT1udWxsLFRlPSExO1xuZnVuY3Rpb24gVWUoYSxiLGMpe3ZhciBkPWMud2luZG93PT09Yz9jLmRvY3VtZW50Ojk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O1RlfHxudWxsPT1RZXx8UWUhPT1YYShkKXx8KGQ9UWUsXCJzZWxlY3Rpb25TdGFydFwiaW4gZCYmT2UoZCk/ZD17c3RhcnQ6ZC5zZWxlY3Rpb25TdGFydCxlbmQ6ZC5zZWxlY3Rpb25FbmR9OihkPShkLm93bmVyRG9jdW1lbnQmJmQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxkPXthbmNob3JOb2RlOmQuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6ZC5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmQuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmQuZm9jdXNPZmZzZXR9KSxTZSYmSmUoU2UsZCl8fChTZT1kLGQ9b2UoUmUsXCJvblNlbGVjdFwiKSwwPGQubGVuZ3RoJiYoYj1uZXcgdGQoXCJvblNlbGVjdFwiLFwic2VsZWN0XCIsbnVsbCxiLGMpLGEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6ZH0pLGIudGFyZ2V0PVFlKSkpfVxuUGMoXCJjYW5jZWwgY2FuY2VsIGNsaWNrIGNsaWNrIGNsb3NlIGNsb3NlIGNvbnRleHRtZW51IGNvbnRleHRNZW51IGNvcHkgY29weSBjdXQgY3V0IGF1eGNsaWNrIGF1eENsaWNrIGRibGNsaWNrIGRvdWJsZUNsaWNrIGRyYWdlbmQgZHJhZ0VuZCBkcmFnc3RhcnQgZHJhZ1N0YXJ0IGRyb3AgZHJvcCBmb2N1c2luIGZvY3VzIGZvY3Vzb3V0IGJsdXIgaW5wdXQgaW5wdXQgaW52YWxpZCBpbnZhbGlkIGtleWRvd24ga2V5RG93biBrZXlwcmVzcyBrZXlQcmVzcyBrZXl1cCBrZXlVcCBtb3VzZWRvd24gbW91c2VEb3duIG1vdXNldXAgbW91c2VVcCBwYXN0ZSBwYXN0ZSBwYXVzZSBwYXVzZSBwbGF5IHBsYXkgcG9pbnRlcmNhbmNlbCBwb2ludGVyQ2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJEb3duIHBvaW50ZXJ1cCBwb2ludGVyVXAgcmF0ZWNoYW5nZSByYXRlQ2hhbmdlIHJlc2V0IHJlc2V0IHNlZWtlZCBzZWVrZWQgc3VibWl0IHN1Ym1pdCB0b3VjaGNhbmNlbCB0b3VjaENhbmNlbCB0b3VjaGVuZCB0b3VjaEVuZCB0b3VjaHN0YXJ0IHRvdWNoU3RhcnQgdm9sdW1lY2hhbmdlIHZvbHVtZUNoYW5nZVwiLnNwbGl0KFwiIFwiKSxcbjApO1BjKFwiZHJhZyBkcmFnIGRyYWdlbnRlciBkcmFnRW50ZXIgZHJhZ2V4aXQgZHJhZ0V4aXQgZHJhZ2xlYXZlIGRyYWdMZWF2ZSBkcmFnb3ZlciBkcmFnT3ZlciBtb3VzZW1vdmUgbW91c2VNb3ZlIG1vdXNlb3V0IG1vdXNlT3V0IG1vdXNlb3ZlciBtb3VzZU92ZXIgcG9pbnRlcm1vdmUgcG9pbnRlck1vdmUgcG9pbnRlcm91dCBwb2ludGVyT3V0IHBvaW50ZXJvdmVyIHBvaW50ZXJPdmVyIHNjcm9sbCBzY3JvbGwgdG9nZ2xlIHRvZ2dsZSB0b3VjaG1vdmUgdG91Y2hNb3ZlIHdoZWVsIHdoZWVsXCIuc3BsaXQoXCIgXCIpLDEpO1BjKE9jLDIpO2Zvcih2YXIgVmU9XCJjaGFuZ2Ugc2VsZWN0aW9uY2hhbmdlIHRleHRJbnB1dCBjb21wb3NpdGlvbnN0YXJ0IGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9udXBkYXRlXCIuc3BsaXQoXCIgXCIpLFdlPTA7V2U8VmUubGVuZ3RoO1dlKyspTmMuc2V0KFZlW1dlXSwwKTtlYShcIm9uTW91c2VFbnRlclwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO1xuZWEoXCJvbk1vdXNlTGVhdmVcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtlYShcIm9uUG9pbnRlckVudGVyXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO2VhKFwib25Qb2ludGVyTGVhdmVcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7ZGEoXCJvbkNoYW5nZVwiLFwiY2hhbmdlIGNsaWNrIGZvY3VzaW4gZm9jdXNvdXQgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2RhKFwib25TZWxlY3RcIixcImZvY3Vzb3V0IGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXNpbiBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZGEoXCJvbkJlZm9yZUlucHV0XCIsW1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdKTtkYShcIm9uQ29tcG9zaXRpb25FbmRcIixcImNvbXBvc2l0aW9uZW5kIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtcbmRhKFwib25Db21wb3NpdGlvblN0YXJ0XCIsXCJjb21wb3NpdGlvbnN0YXJ0IGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtkYShcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixcImNvbXBvc2l0aW9udXBkYXRlIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTt2YXIgWGU9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLFllPW5ldyBTZXQoXCJjYW5jZWwgY2xvc2UgaW52YWxpZCBsb2FkIHNjcm9sbCB0b2dnbGVcIi5zcGxpdChcIiBcIikuY29uY2F0KFhlKSk7XG5mdW5jdGlvbiBaZShhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9YztZYihkLGIsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfVxuZnVuY3Rpb24gc2UoYSxiKXtiPTAhPT0oYiY0KTtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKyl7dmFyIGQ9YVtjXSxlPWQuZXZlbnQ7ZD1kLmxpc3RlbmVyczthOnt2YXIgZj12b2lkIDA7aWYoYilmb3IodmFyIGc9ZC5sZW5ndGgtMTswPD1nO2ctLSl7dmFyIGg9ZFtnXSxrPWguaW5zdGFuY2UsbD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtaZShlLGgsbCk7Zj1rfWVsc2UgZm9yKGc9MDtnPGQubGVuZ3RoO2crKyl7aD1kW2ddO2s9aC5pbnN0YW5jZTtsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO1plKGUsaCxsKTtmPWt9fX1pZihVYil0aHJvdyBhPVZiLFViPSExLFZiPW51bGwsYTt9XG5mdW5jdGlvbiBHKGEsYil7dmFyIGM9JGUoYiksZD1hK1wiX19idWJibGVcIjtjLmhhcyhkKXx8KGFmKGIsYSwyLCExKSxjLmFkZChkKSl9dmFyIGJmPVwiX3JlYWN0TGlzdGVuaW5nXCIrTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7ZnVuY3Rpb24gY2YoYSl7YVtiZl18fChhW2JmXT0hMCxiYS5mb3JFYWNoKGZ1bmN0aW9uKGIpe1llLmhhcyhiKXx8ZGYoYiwhMSxhLG51bGwpO2RmKGIsITAsYSxudWxsKX0pKX1cbmZ1bmN0aW9uIGRmKGEsYixjLGQpe3ZhciBlPTQ8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzRdP2FyZ3VtZW50c1s0XTowLGY9YztcInNlbGVjdGlvbmNoYW5nZVwiPT09YSYmOSE9PWMubm9kZVR5cGUmJihmPWMub3duZXJEb2N1bWVudCk7aWYobnVsbCE9PWQmJiFiJiZZZS5oYXMoYSkpe2lmKFwic2Nyb2xsXCIhPT1hKXJldHVybjtlfD0yO2Y9ZH12YXIgZz0kZShmKSxoPWErXCJfX1wiKyhiP1wiY2FwdHVyZVwiOlwiYnViYmxlXCIpO2cuaGFzKGgpfHwoYiYmKGV8PTQpLGFmKGYsYSxlLGIpLGcuYWRkKGgpKX1cbmZ1bmN0aW9uIGFmKGEsYixjLGQpe3ZhciBlPU5jLmdldChiKTtzd2l0Y2godm9pZCAwPT09ZT8yOmUpe2Nhc2UgMDplPWdkO2JyZWFrO2Nhc2UgMTplPWlkO2JyZWFrO2RlZmF1bHQ6ZT1oZH1jPWUuYmluZChudWxsLGIsYyxhKTtlPXZvaWQgMDshUGJ8fFwidG91Y2hzdGFydFwiIT09YiYmXCJ0b3VjaG1vdmVcIiE9PWImJlwid2hlZWxcIiE9PWJ8fChlPSEwKTtkP3ZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7Y2FwdHVyZTohMCxwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCEwKTp2b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse3Bhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITEpfVxuZnVuY3Rpb24gamQoYSxiLGMsZCxlKXt2YXIgZj1kO2lmKDA9PT0oYiYxKSYmMD09PShiJjIpJiZudWxsIT09ZClhOmZvcig7Oyl7aWYobnVsbD09PWQpcmV0dXJuO3ZhciBnPWQudGFnO2lmKDM9PT1nfHw0PT09Zyl7dmFyIGg9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZihoPT09ZXx8OD09PWgubm9kZVR5cGUmJmgucGFyZW50Tm9kZT09PWUpYnJlYWs7aWYoND09PWcpZm9yKGc9ZC5yZXR1cm47bnVsbCE9PWc7KXt2YXIgaz1nLnRhZztpZigzPT09a3x8ND09PWspaWYoaz1nLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLGs9PT1lfHw4PT09ay5ub2RlVHlwZSYmay5wYXJlbnROb2RlPT09ZSlyZXR1cm47Zz1nLnJldHVybn1mb3IoO251bGwhPT1oOyl7Zz13YyhoKTtpZihudWxsPT09ZylyZXR1cm47az1nLnRhZztpZig1PT09a3x8Nj09PWspe2Q9Zj1nO2NvbnRpbnVlIGF9aD1oLnBhcmVudE5vZGV9fWQ9ZC5yZXR1cm59TmIoZnVuY3Rpb24oKXt2YXIgZD1mLGU9eGIoYyksZz1bXTtcbmE6e3ZhciBoPU1jLmdldChhKTtpZih2b2lkIDAhPT1oKXt2YXIgaz10ZCx4PWE7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1vZChjKSlicmVhayBhO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6az1SZDticmVhaztjYXNlIFwiZm9jdXNpblwiOng9XCJmb2N1c1wiO2s9RmQ7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6eD1cImJsdXJcIjtrPUZkO2JyZWFrO2Nhc2UgXCJiZWZvcmVibHVyXCI6Y2FzZSBcImFmdGVyYmx1clwiOms9RmQ7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKWJyZWFrIGE7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjprPUJkO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOms9XG5EZDticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjprPVZkO2JyZWFrO2Nhc2UgSWM6Y2FzZSBKYzpjYXNlIEtjOms9SGQ7YnJlYWs7Y2FzZSBMYzprPVhkO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjprPXZkO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOms9WmQ7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6az1KZDticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjprPVRkfXZhciB3PTAhPT0oYiY0KSx6PSF3JiZcInNjcm9sbFwiPT09YSx1PXc/bnVsbCE9PWg/aCtcIkNhcHR1cmVcIjpudWxsOmg7dz1bXTtmb3IodmFyIHQ9ZCxxO251bGwhPT1cbnQ7KXtxPXQ7dmFyIHY9cS5zdGF0ZU5vZGU7NT09PXEudGFnJiZudWxsIT09diYmKHE9dixudWxsIT09dSYmKHY9T2IodCx1KSxudWxsIT12JiZ3LnB1c2goZWYodCx2LHEpKSkpO2lmKHopYnJlYWs7dD10LnJldHVybn0wPHcubGVuZ3RoJiYoaD1uZXcgayhoLHgsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6aCxsaXN0ZW5lcnM6d30pKX19aWYoMD09PShiJjcpKXthOntoPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hO2s9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGgmJjA9PT0oYiYxNikmJih4PWMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCkmJih3Yyh4KXx8eFtmZl0pKWJyZWFrIGE7aWYoa3x8aCl7aD1lLndpbmRvdz09PWU/ZTooaD1lLm93bmVyRG9jdW1lbnQpP2guZGVmYXVsdFZpZXd8fGgucGFyZW50V2luZG93OndpbmRvdztpZihrKXtpZih4PWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQsaz1kLHg9eD93Yyh4KTpudWxsLG51bGwhPT1cbngmJih6PVpiKHgpLHghPT16fHw1IT09eC50YWcmJjYhPT14LnRhZykpeD1udWxsfWVsc2Ugaz1udWxsLHg9ZDtpZihrIT09eCl7dz1CZDt2PVwib25Nb3VzZUxlYXZlXCI7dT1cIm9uTW91c2VFbnRlclwiO3Q9XCJtb3VzZVwiO2lmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSl3PVRkLHY9XCJvblBvaW50ZXJMZWF2ZVwiLHU9XCJvblBvaW50ZXJFbnRlclwiLHQ9XCJwb2ludGVyXCI7ej1udWxsPT1rP2g6dWUoayk7cT1udWxsPT14P2g6dWUoeCk7aD1uZXcgdyh2LHQrXCJsZWF2ZVwiLGssYyxlKTtoLnRhcmdldD16O2gucmVsYXRlZFRhcmdldD1xO3Y9bnVsbDt3YyhlKT09PWQmJih3PW5ldyB3KHUsdCtcImVudGVyXCIseCxjLGUpLHcudGFyZ2V0PXEsdy5yZWxhdGVkVGFyZ2V0PXosdj13KTt6PXY7aWYoayYmeCliOnt3PWs7dT14O3Q9MDtmb3IocT13O3E7cT1nZihxKSl0Kys7cT0wO2Zvcih2PXU7djt2PWdmKHYpKXErKztmb3IoOzA8dC1xOyl3PWdmKHcpLHQtLTtmb3IoOzA8cS10Oyl1PVxuZ2YodSkscS0tO2Zvcig7dC0tOyl7aWYodz09PXV8fG51bGwhPT11JiZ3PT09dS5hbHRlcm5hdGUpYnJlYWsgYjt3PWdmKHcpO3U9Z2YodSl9dz1udWxsfWVsc2Ugdz1udWxsO251bGwhPT1rJiZoZihnLGgsayx3LCExKTtudWxsIT09eCYmbnVsbCE9PXomJmhmKGcseix4LHcsITApfX19YTp7aD1kP3VlKGQpOndpbmRvdztrPWgubm9kZU5hbWUmJmgubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZihcInNlbGVjdFwiPT09a3x8XCJpbnB1dFwiPT09ayYmXCJmaWxlXCI9PT1oLnR5cGUpdmFyIEo9dmU7ZWxzZSBpZihtZShoKSlpZih3ZSlKPUZlO2Vsc2V7Sj1EZTt2YXIgSz1DZX1lbHNlKGs9aC5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWsudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWgudHlwZXx8XCJyYWRpb1wiPT09aC50eXBlKSYmKEo9RWUpO2lmKEomJihKPUooYSxkKSkpe25lKGcsSixjLGUpO2JyZWFrIGF9SyYmSyhhLGgsZCk7XCJmb2N1c291dFwiPT09YSYmKEs9aC5fd3JhcHBlclN0YXRlKSYmXG5LLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1oLnR5cGUmJmJiKGgsXCJudW1iZXJcIixoLnZhbHVlKX1LPWQ/dWUoZCk6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmlmKG1lKEspfHxcInRydWVcIj09PUsuY29udGVudEVkaXRhYmxlKVFlPUssUmU9ZCxTZT1udWxsO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOlNlPVJlPVFlPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOlRlPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpUZT0hMTtVZShnLGMsZSk7YnJlYWs7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKFBlKWJyZWFrO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6VWUoZyxjLGUpfXZhciBRO2lmKGFlKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOnZhciBMPVwib25Db21wb3NpdGlvblN0YXJ0XCI7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpMPVwib25Db21wb3NpdGlvbkVuZFwiO2JyZWFrIGI7XG5jYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpMPVwib25Db21wb3NpdGlvblVwZGF0ZVwiO2JyZWFrIGJ9TD12b2lkIDB9ZWxzZSBpZT9nZShhLGMpJiYoTD1cIm9uQ29tcG9zaXRpb25FbmRcIik6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihMPVwib25Db21wb3NpdGlvblN0YXJ0XCIpO0wmJihkZSYmXCJrb1wiIT09Yy5sb2NhbGUmJihpZXx8XCJvbkNvbXBvc2l0aW9uU3RhcnRcIiE9PUw/XCJvbkNvbXBvc2l0aW9uRW5kXCI9PT1MJiZpZSYmKFE9bmQoKSk6KGtkPWUsbGQ9XCJ2YWx1ZVwiaW4ga2Q/a2QudmFsdWU6a2QudGV4dENvbnRlbnQsaWU9ITApKSxLPW9lKGQsTCksMDxLLmxlbmd0aCYmKEw9bmV3IExkKEwsYSxudWxsLGMsZSksZy5wdXNoKHtldmVudDpMLGxpc3RlbmVyczpLfSksUT9MLmRhdGE9UTooUT1oZShjKSxudWxsIT09USYmKEwuZGF0YT1RKSkpKTtpZihRPWNlP2plKGEsYyk6a2UoYSxjKSlkPW9lKGQsXCJvbkJlZm9yZUlucHV0XCIpLDA8ZC5sZW5ndGgmJihlPW5ldyBMZChcIm9uQmVmb3JlSW5wdXRcIixcblwiYmVmb3JlaW5wdXRcIixudWxsLGMsZSksZy5wdXNoKHtldmVudDplLGxpc3RlbmVyczpkfSksZS5kYXRhPVEpfXNlKGcsYil9KX1mdW5jdGlvbiBlZihhLGIsYyl7cmV0dXJue2luc3RhbmNlOmEsbGlzdGVuZXI6YixjdXJyZW50VGFyZ2V0OmN9fWZ1bmN0aW9uIG9lKGEsYil7Zm9yKHZhciBjPWIrXCJDYXB0dXJlXCIsZD1bXTtudWxsIT09YTspe3ZhciBlPWEsZj1lLnN0YXRlTm9kZTs1PT09ZS50YWcmJm51bGwhPT1mJiYoZT1mLGY9T2IoYSxjKSxudWxsIT1mJiZkLnVuc2hpZnQoZWYoYSxmLGUpKSxmPU9iKGEsYiksbnVsbCE9ZiYmZC5wdXNoKGVmKGEsZixlKSkpO2E9YS5yZXR1cm59cmV0dXJuIGR9ZnVuY3Rpb24gZ2YoYSl7aWYobnVsbD09PWEpcmV0dXJuIG51bGw7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1cbmZ1bmN0aW9uIGhmKGEsYixjLGQsZSl7Zm9yKHZhciBmPWIuX3JlYWN0TmFtZSxnPVtdO251bGwhPT1jJiZjIT09ZDspe3ZhciBoPWMsaz1oLmFsdGVybmF0ZSxsPWguc3RhdGVOb2RlO2lmKG51bGwhPT1rJiZrPT09ZClicmVhazs1PT09aC50YWcmJm51bGwhPT1sJiYoaD1sLGU/KGs9T2IoYyxmKSxudWxsIT1rJiZnLnVuc2hpZnQoZWYoYyxrLGgpKSk6ZXx8KGs9T2IoYyxmKSxudWxsIT1rJiZnLnB1c2goZWYoYyxrLGgpKSkpO2M9Yy5yZXR1cm59MCE9PWcubGVuZ3RoJiZhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmd9KX1mdW5jdGlvbiBqZigpe312YXIga2Y9bnVsbCxsZj1udWxsO2Z1bmN0aW9uIG1mKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6cmV0dXJuISFiLmF1dG9Gb2N1c31yZXR1cm4hMX1cbmZ1bmN0aW9uIG5mKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJvcHRpb25cIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH12YXIgb2Y9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAscGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwO2Z1bmN0aW9uIHFmKGEpezE9PT1hLm5vZGVUeXBlP2EudGV4dENvbnRlbnQ9XCJcIjo5PT09YS5ub2RlVHlwZSYmKGE9YS5ib2R5LG51bGwhPWEmJihhLnRleHRDb250ZW50PVwiXCIpKX1cbmZ1bmN0aW9uIHJmKGEpe2Zvcig7bnVsbCE9YTthPWEubmV4dFNpYmxpbmcpe3ZhciBiPWEubm9kZVR5cGU7aWYoMT09PWJ8fDM9PT1iKWJyZWFrfXJldHVybiBhfWZ1bmN0aW9uIHNmKGEpe2E9YS5wcmV2aW91c1NpYmxpbmc7Zm9yKHZhciBiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIkXCI9PT1jfHxcIiQhXCI9PT1jfHxcIiQ/XCI9PT1jKXtpZigwPT09YilyZXR1cm4gYTtiLS19ZWxzZVwiLyRcIj09PWMmJmIrK31hPWEucHJldmlvdXNTaWJsaW5nfXJldHVybiBudWxsfXZhciB0Zj0wO2Z1bmN0aW9uIHVmKGEpe3JldHVybnskJHR5cGVvZjpHYSx0b1N0cmluZzphLHZhbHVlT2Y6YX19dmFyIHZmPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLHdmPVwiX19yZWFjdEZpYmVyJFwiK3ZmLHhmPVwiX19yZWFjdFByb3BzJFwiK3ZmLGZmPVwiX19yZWFjdENvbnRhaW5lciRcIit2Zix5Zj1cIl9fcmVhY3RFdmVudHMkXCIrdmY7XG5mdW5jdGlvbiB3YyhhKXt2YXIgYj1hW3dmXTtpZihiKXJldHVybiBiO2Zvcih2YXIgYz1hLnBhcmVudE5vZGU7Yzspe2lmKGI9Y1tmZl18fGNbd2ZdKXtjPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1iLmNoaWxkfHxudWxsIT09YyYmbnVsbCE9PWMuY2hpbGQpZm9yKGE9c2YoYSk7bnVsbCE9PWE7KXtpZihjPWFbd2ZdKXJldHVybiBjO2E9c2YoYSl9cmV0dXJuIGJ9YT1jO2M9YS5wYXJlbnROb2RlfXJldHVybiBudWxsfWZ1bmN0aW9uIENiKGEpe2E9YVt3Zl18fGFbZmZdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZyYmMTMhPT1hLnRhZyYmMyE9PWEudGFnP251bGw6YX1mdW5jdGlvbiB1ZShhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7dGhyb3cgRXJyb3IoeSgzMykpO31mdW5jdGlvbiBEYihhKXtyZXR1cm4gYVt4Zl18fG51bGx9XG5mdW5jdGlvbiAkZShhKXt2YXIgYj1hW3lmXTt2b2lkIDA9PT1iJiYoYj1hW3lmXT1uZXcgU2V0KTtyZXR1cm4gYn12YXIgemY9W10sQWY9LTE7ZnVuY3Rpb24gQmYoYSl7cmV0dXJue2N1cnJlbnQ6YX19ZnVuY3Rpb24gSChhKXswPkFmfHwoYS5jdXJyZW50PXpmW0FmXSx6ZltBZl09bnVsbCxBZi0tKX1mdW5jdGlvbiBJKGEsYil7QWYrKzt6ZltBZl09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBDZj17fSxNPUJmKENmKSxOPUJmKCExKSxEZj1DZjtcbmZ1bmN0aW9uIEVmKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gQ2Y7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9ZnVuY3Rpb24gRmYoYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1mdW5jdGlvbiBHZigpe0goTik7SChNKX1mdW5jdGlvbiBIZihhLGIsYyl7aWYoTS5jdXJyZW50IT09Q2YpdGhyb3cgRXJyb3IoeSgxNjgpKTtJKE0sYik7SShOLGMpfVxuZnVuY3Rpb24gSWYoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2E9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWlmKCEoZSBpbiBhKSl0aHJvdyBFcnJvcih5KDEwOCxSYShiKXx8XCJVbmtub3duXCIsZSkpO3JldHVybiBtKHt9LGMsZCl9ZnVuY3Rpb24gSmYoYSl7YT0oYT1hLnN0YXRlTm9kZSkmJmEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fENmO0RmPU0uY3VycmVudDtJKE0sYSk7SShOLE4uY3VycmVudCk7cmV0dXJuITB9ZnVuY3Rpb24gS2YoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2lmKCFkKXRocm93IEVycm9yKHkoMTY5KSk7Yz8oYT1JZihhLGIsRGYpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YSxIKE4pLEgoTSksSShNLGEpKTpIKE4pO0koTixjKX1cbnZhciBMZj1udWxsLE1mPW51bGwsTmY9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksT2Y9ci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrLFBmPXIudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssUWY9ci51bnN0YWJsZV9zaG91bGRZaWVsZCxSZj1yLnVuc3RhYmxlX3JlcXVlc3RQYWludCxTZj1yLnVuc3RhYmxlX25vdyxUZj1yLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLFVmPXIudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksVmY9ci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxXZj1yLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LFhmPXIudW5zdGFibGVfTG93UHJpb3JpdHksWWY9ci51bnN0YWJsZV9JZGxlUHJpb3JpdHksWmY9e30sJGY9dm9pZCAwIT09UmY/UmY6ZnVuY3Rpb24oKXt9LGFnPW51bGwsYmc9bnVsbCxjZz0hMSxkZz1TZigpLE89MUU0PmRnP1NmOmZ1bmN0aW9uKCl7cmV0dXJuIFNmKCktZGd9O1xuZnVuY3Rpb24gZWcoKXtzd2l0Y2goVGYoKSl7Y2FzZSBVZjpyZXR1cm4gOTk7Y2FzZSBWZjpyZXR1cm4gOTg7Y2FzZSBXZjpyZXR1cm4gOTc7Y2FzZSBYZjpyZXR1cm4gOTY7Y2FzZSBZZjpyZXR1cm4gOTU7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDMzMikpO319ZnVuY3Rpb24gZmcoYSl7c3dpdGNoKGEpe2Nhc2UgOTk6cmV0dXJuIFVmO2Nhc2UgOTg6cmV0dXJuIFZmO2Nhc2UgOTc6cmV0dXJuIFdmO2Nhc2UgOTY6cmV0dXJuIFhmO2Nhc2UgOTU6cmV0dXJuIFlmO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzMzIpKTt9fWZ1bmN0aW9uIGdnKGEsYil7YT1mZyhhKTtyZXR1cm4gTmYoYSxiKX1mdW5jdGlvbiBoZyhhLGIsYyl7YT1mZyhhKTtyZXR1cm4gT2YoYSxiLGMpfWZ1bmN0aW9uIGlnKCl7aWYobnVsbCE9PWJnKXt2YXIgYT1iZztiZz1udWxsO1BmKGEpfWpnKCl9XG5mdW5jdGlvbiBqZygpe2lmKCFjZyYmbnVsbCE9PWFnKXtjZz0hMDt2YXIgYT0wO3RyeXt2YXIgYj1hZztnZyg5OSxmdW5jdGlvbigpe2Zvcig7YTxiLmxlbmd0aDthKyspe3ZhciBjPWJbYV07ZG8gYz1jKCEwKTt3aGlsZShudWxsIT09Yyl9fSk7YWc9bnVsbH1jYXRjaChjKXt0aHJvdyBudWxsIT09YWcmJihhZz1hZy5zbGljZShhKzEpKSxPZihVZixpZyksYzt9ZmluYWxseXtjZz0hMX19fXZhciBrZz1yYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZztmdW5jdGlvbiBsZyhhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPW0oe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKTtyZXR1cm4gYn1yZXR1cm4gYn12YXIgbWc9QmYobnVsbCksbmc9bnVsbCxvZz1udWxsLHBnPW51bGw7ZnVuY3Rpb24gcWcoKXtwZz1vZz1uZz1udWxsfVxuZnVuY3Rpb24gcmcoYSl7dmFyIGI9bWcuY3VycmVudDtIKG1nKTthLnR5cGUuX2NvbnRleHQuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIHNnKGEsYil7Zm9yKDtudWxsIT09YTspe3ZhciBjPWEuYWx0ZXJuYXRlO2lmKChhLmNoaWxkTGFuZXMmYik9PT1iKWlmKG51bGw9PT1jfHwoYy5jaGlsZExhbmVzJmIpPT09YilicmVhaztlbHNlIGMuY2hpbGRMYW5lc3w9YjtlbHNlIGEuY2hpbGRMYW5lc3w9YixudWxsIT09YyYmKGMuY2hpbGRMYW5lc3w9Yik7YT1hLnJldHVybn19ZnVuY3Rpb24gdGcoYSxiKXtuZz1hO3BnPW9nPW51bGw7YT1hLmRlcGVuZGVuY2llcztudWxsIT09YSYmbnVsbCE9PWEuZmlyc3RDb250ZXh0JiYoMCE9PShhLmxhbmVzJmIpJiYodWc9ITApLGEuZmlyc3RDb250ZXh0PW51bGwpfVxuZnVuY3Rpb24gdmcoYSxiKXtpZihwZyE9PWEmJiExIT09YiYmMCE9PWIpe2lmKFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MTA3Mzc0MTgyMz09PWIpcGc9YSxiPTEwNzM3NDE4MjM7Yj17Y29udGV4dDphLG9ic2VydmVkQml0czpiLG5leHQ6bnVsbH07aWYobnVsbD09PW9nKXtpZihudWxsPT09bmcpdGhyb3cgRXJyb3IoeSgzMDgpKTtvZz1iO25nLmRlcGVuZGVuY2llcz17bGFuZXM6MCxmaXJzdENvbnRleHQ6YixyZXNwb25kZXJzOm51bGx9fWVsc2Ugb2c9b2cubmV4dD1ifXJldHVybiBhLl9jdXJyZW50VmFsdWV9dmFyIHdnPSExO2Z1bmN0aW9uIHhnKGEpe2EudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLm1lbW9pemVkU3RhdGUsZmlyc3RCYXNlVXBkYXRlOm51bGwsbGFzdEJhc2VVcGRhdGU6bnVsbCxzaGFyZWQ6e3BlbmRpbmc6bnVsbH0sZWZmZWN0czpudWxsfX1cbmZ1bmN0aW9uIHlnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9PT1hJiYoYi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTphLmZpcnN0QmFzZVVwZGF0ZSxsYXN0QmFzZVVwZGF0ZTphLmxhc3RCYXNlVXBkYXRlLHNoYXJlZDphLnNoYXJlZCxlZmZlY3RzOmEuZWZmZWN0c30pfWZ1bmN0aW9uIHpnKGEsYil7cmV0dXJue2V2ZW50VGltZTphLGxhbmU6Yix0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9fWZ1bmN0aW9uIEFnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1hKXthPWEuc2hhcmVkO3ZhciBjPWEucGVuZGluZztudWxsPT09Yz9iLm5leHQ9YjooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yik7YS5wZW5kaW5nPWJ9fVxuZnVuY3Rpb24gQmcoYSxiKXt2YXIgYz1hLnVwZGF0ZVF1ZXVlLGQ9YS5hbHRlcm5hdGU7aWYobnVsbCE9PWQmJihkPWQudXBkYXRlUXVldWUsYz09PWQpKXt2YXIgZT1udWxsLGY9bnVsbDtjPWMuZmlyc3RCYXNlVXBkYXRlO2lmKG51bGwhPT1jKXtkb3t2YXIgZz17ZXZlbnRUaW1lOmMuZXZlbnRUaW1lLGxhbmU6Yy5sYW5lLHRhZzpjLnRhZyxwYXlsb2FkOmMucGF5bG9hZCxjYWxsYmFjazpjLmNhbGxiYWNrLG5leHQ6bnVsbH07bnVsbD09PWY/ZT1mPWc6Zj1mLm5leHQ9ZztjPWMubmV4dH13aGlsZShudWxsIT09Yyk7bnVsbD09PWY/ZT1mPWI6Zj1mLm5leHQ9Yn1lbHNlIGU9Zj1iO2M9e2Jhc2VTdGF0ZTpkLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6ZSxsYXN0QmFzZVVwZGF0ZTpmLHNoYXJlZDpkLnNoYXJlZCxlZmZlY3RzOmQuZWZmZWN0c307YS51cGRhdGVRdWV1ZT1jO3JldHVybn1hPWMubGFzdEJhc2VVcGRhdGU7bnVsbD09PWE/Yy5maXJzdEJhc2VVcGRhdGU9YjphLm5leHQ9XG5iO2MubGFzdEJhc2VVcGRhdGU9Yn1cbmZ1bmN0aW9uIENnKGEsYixjLGQpe3ZhciBlPWEudXBkYXRlUXVldWU7d2c9ITE7dmFyIGY9ZS5maXJzdEJhc2VVcGRhdGUsZz1lLmxhc3RCYXNlVXBkYXRlLGg9ZS5zaGFyZWQucGVuZGluZztpZihudWxsIT09aCl7ZS5zaGFyZWQucGVuZGluZz1udWxsO3ZhciBrPWgsbD1rLm5leHQ7ay5uZXh0PW51bGw7bnVsbD09PWc/Zj1sOmcubmV4dD1sO2c9azt2YXIgbj1hLmFsdGVybmF0ZTtpZihudWxsIT09bil7bj1uLnVwZGF0ZVF1ZXVlO3ZhciBBPW4ubGFzdEJhc2VVcGRhdGU7QSE9PWcmJihudWxsPT09QT9uLmZpcnN0QmFzZVVwZGF0ZT1sOkEubmV4dD1sLG4ubGFzdEJhc2VVcGRhdGU9ayl9fWlmKG51bGwhPT1mKXtBPWUuYmFzZVN0YXRlO2c9MDtuPWw9az1udWxsO2Rve2g9Zi5sYW5lO3ZhciBwPWYuZXZlbnRUaW1lO2lmKChkJmgpPT09aCl7bnVsbCE9PW4mJihuPW4ubmV4dD17ZXZlbnRUaW1lOnAsbGFuZTowLHRhZzpmLnRhZyxwYXlsb2FkOmYucGF5bG9hZCxjYWxsYmFjazpmLmNhbGxiYWNrLFxubmV4dDpudWxsfSk7YTp7dmFyIEM9YSx4PWY7aD1iO3A9Yztzd2l0Y2goeC50YWcpe2Nhc2UgMTpDPXgucGF5bG9hZDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgQyl7QT1DLmNhbGwocCxBLGgpO2JyZWFrIGF9QT1DO2JyZWFrIGE7Y2FzZSAzOkMuZmxhZ3M9Qy5mbGFncyYtNDA5N3w2NDtjYXNlIDA6Qz14LnBheWxvYWQ7aD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgQz9DLmNhbGwocCxBLGgpOkM7aWYobnVsbD09PWh8fHZvaWQgMD09PWgpYnJlYWsgYTtBPW0oe30sQSxoKTticmVhayBhO2Nhc2UgMjp3Zz0hMH19bnVsbCE9PWYuY2FsbGJhY2smJihhLmZsYWdzfD0zMixoPWUuZWZmZWN0cyxudWxsPT09aD9lLmVmZmVjdHM9W2ZdOmgucHVzaChmKSl9ZWxzZSBwPXtldmVudFRpbWU6cCxsYW5lOmgsdGFnOmYudGFnLHBheWxvYWQ6Zi5wYXlsb2FkLGNhbGxiYWNrOmYuY2FsbGJhY2ssbmV4dDpudWxsfSxudWxsPT09bj8obD1uPXAsaz1BKTpuPW4ubmV4dD1wLGd8PWg7Zj1mLm5leHQ7aWYobnVsbD09PVxuZilpZihoPWUuc2hhcmVkLnBlbmRpbmcsbnVsbD09PWgpYnJlYWs7ZWxzZSBmPWgubmV4dCxoLm5leHQ9bnVsbCxlLmxhc3RCYXNlVXBkYXRlPWgsZS5zaGFyZWQucGVuZGluZz1udWxsfXdoaWxlKDEpO251bGw9PT1uJiYoaz1BKTtlLmJhc2VTdGF0ZT1rO2UuZmlyc3RCYXNlVXBkYXRlPWw7ZS5sYXN0QmFzZVVwZGF0ZT1uO0RnfD1nO2EubGFuZXM9ZzthLm1lbW9pemVkU3RhdGU9QX19ZnVuY3Rpb24gRWcoYSxiLGMpe2E9Yi5lZmZlY3RzO2IuZWZmZWN0cz1udWxsO2lmKG51bGwhPT1hKWZvcihiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBkPWFbYl0sZT1kLmNhbGxiYWNrO2lmKG51bGwhPT1lKXtkLmNhbGxiYWNrPW51bGw7ZD1jO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlKXRocm93IEVycm9yKHkoMTkxLGUpKTtlLmNhbGwoZCl9fX12YXIgRmc9KG5ldyBhYS5Db21wb25lbnQpLnJlZnM7XG5mdW5jdGlvbiBHZyhhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6bSh7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jOzA9PT1hLmxhbmVzJiYoYS51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9Yyl9XG52YXIgS2c9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFscyk/WmIoYSk9PT1hOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9SGcoKSxlPUlnKGEpLGY9emcoZCxlKTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7QWcoYSxmKTtKZyhhLGUsZCl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9SGcoKSxlPUlnKGEpLGY9emcoZCxlKTtmLnRhZz0xO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtBZyhhLGYpO0pnKGEsZSxkKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsczt2YXIgYz1IZygpLGQ9SWcoYSksZT16ZyhjLGQpO2UudGFnPTI7dm9pZCAwIT09YiYmbnVsbCE9PWImJihlLmNhbGxiYWNrPVxuYik7QWcoYSxlKTtKZyhhLGQsYyl9fTtmdW5jdGlvbiBMZyhhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFKZShjLGQpfHwhSmUoZSxmKTohMH1cbmZ1bmN0aW9uIE1nKGEsYixjKXt2YXIgZD0hMSxlPUNmO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPXZnKGYpOihlPUZmKGIpP0RmOk0uY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP0VmKGEsZSk6Q2YpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj1LZzthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxzPWE7ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIE5nKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZLZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIE9nKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlO2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9Rmc7eGcoYSk7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2UuY29udGV4dD12ZyhmKTooZj1GZihiKT9EZjpNLmN1cnJlbnQsZS5jb250ZXh0PUVmKGEsZikpO0NnKGEsYyxlLGQpO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihHZyhhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHxcbihiPWUuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZLZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSxDZyhhLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmZsYWdzfD00KX12YXIgUGc9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIFFnKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjtpZihjKXtpZigxIT09Yy50YWcpdGhyb3cgRXJyb3IoeSgzMDkpKTt2YXIgZD1jLnN0YXRlTm9kZX1pZighZCl0aHJvdyBFcnJvcih5KDE0NyxhKSk7dmFyIGU9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWUpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZC5yZWZzO2I9PT1GZyYmKGI9ZC5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2IuX3N0cmluZ1JlZj1lO3JldHVybiBifWlmKFwic3RyaW5nXCIhPT10eXBlb2YgYSl0aHJvdyBFcnJvcih5KDI4NCkpO2lmKCFjLl9vd25lcil0aHJvdyBFcnJvcih5KDI5MCxhKSk7fXJldHVybiBhfVxuZnVuY3Rpb24gUmcoYSxiKXtpZihcInRleHRhcmVhXCIhPT1hLnR5cGUpdGhyb3cgRXJyb3IoeSgzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIpKTt9XG5mdW5jdGlvbiBTZyhhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmZsYWdzPTh9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiKXthPVRnKGEsYik7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmZsYWdzPTIsXG5jKTpkO2IuZmxhZ3M9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZmxhZ3M9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPVVnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIuZWxlbWVudFR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMpLGQucmVmPVFnKGEsYixjKSxkLnJldHVybj1hLGQ7ZD1WZyhjLnR5cGUsYy5rZXksYy5wcm9wcyxudWxsLGEubW9kZSxkKTtkLnJlZj1RZyhhLGIsYyk7ZC5yZXR1cm49YTtyZXR1cm4gZH1mdW5jdGlvbiBsKGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09Yy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1cbldnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBuKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDchPT1iLnRhZylyZXR1cm4gYj1YZyhjLGEubW9kZSxkLGYpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIEEoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPVVnKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIHNhOnJldHVybiBjPVZnKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLGMucmVmPVFnKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSB0YTpyZXR1cm4gYj1XZyhiLGEubW9kZSxjKSxiLnJldHVybj1hLGJ9aWYoUGcoYil8fExhKGIpKXJldHVybiBiPVhnKGIsXG5hLm1vZGUsYyxudWxsKSxiLnJldHVybj1hLGI7UmcoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBwKGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIHNhOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09dWE/bihhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmsoYSxiLGMsZCk6bnVsbDtjYXNlIHRhOnJldHVybiBjLmtleT09PWU/bChhLGIsYyxkKTpudWxsfWlmKFBnKGMpfHxMYShjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDpuKGEsYixjLGQsbnVsbCk7UmcoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBDKGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9YS5nZXQoYyl8fFxubnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2Ugc2E6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGQudHlwZT09PXVhP24oYixhLGQucHJvcHMuY2hpbGRyZW4sZSxkLmtleSk6ayhiLGEsZCxlKTtjYXNlIHRhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpfWlmKFBnKGQpfHxMYShkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxuKGIsYSxkLGUsbnVsbCk7UmcoYixkKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB4KGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLHQ9bnVsbCx1PWcsej1nPTAscT1udWxsO251bGwhPT11JiZ6PGgubGVuZ3RoO3orKyl7dS5pbmRleD56PyhxPXUsdT1udWxsKTpxPXUuc2libGluZzt2YXIgbj1wKGUsdSxoW3pdLGspO2lmKG51bGw9PT1uKXtudWxsPT09dSYmKHU9cSk7YnJlYWt9YSYmdSYmbnVsbD09PVxubi5hbHRlcm5hdGUmJmIoZSx1KTtnPWYobixnLHopO251bGw9PT10P2w9bjp0LnNpYmxpbmc9bjt0PW47dT1xfWlmKHo9PT1oLmxlbmd0aClyZXR1cm4gYyhlLHUpLGw7aWYobnVsbD09PXUpe2Zvcig7ejxoLmxlbmd0aDt6KyspdT1BKGUsaFt6XSxrKSxudWxsIT09dSYmKGc9Zih1LGcseiksbnVsbD09PXQ/bD11OnQuc2libGluZz11LHQ9dSk7cmV0dXJuIGx9Zm9yKHU9ZChlLHUpO3o8aC5sZW5ndGg7eisrKXE9Qyh1LGUseixoW3pdLGspLG51bGwhPT1xJiYoYSYmbnVsbCE9PXEuYWx0ZXJuYXRlJiZ1LmRlbGV0ZShudWxsPT09cS5rZXk/ejpxLmtleSksZz1mKHEsZyx6KSxudWxsPT09dD9sPXE6dC5zaWJsaW5nPXEsdD1xKTthJiZ1LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfWZ1bmN0aW9uIHcoZSxnLGgsayl7dmFyIGw9TGEoaCk7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGwpdGhyb3cgRXJyb3IoeSgxNTApKTtoPWwuY2FsbChoKTtpZihudWxsPT1cbmgpdGhyb3cgRXJyb3IoeSgxNTEpKTtmb3IodmFyIHQ9bD1udWxsLHU9Zyx6PWc9MCxxPW51bGwsbj1oLm5leHQoKTtudWxsIT09dSYmIW4uZG9uZTt6Kyssbj1oLm5leHQoKSl7dS5pbmRleD56PyhxPXUsdT1udWxsKTpxPXUuc2libGluZzt2YXIgdz1wKGUsdSxuLnZhbHVlLGspO2lmKG51bGw9PT13KXtudWxsPT09dSYmKHU9cSk7YnJlYWt9YSYmdSYmbnVsbD09PXcuYWx0ZXJuYXRlJiZiKGUsdSk7Zz1mKHcsZyx6KTtudWxsPT09dD9sPXc6dC5zaWJsaW5nPXc7dD13O3U9cX1pZihuLmRvbmUpcmV0dXJuIGMoZSx1KSxsO2lmKG51bGw9PT11KXtmb3IoOyFuLmRvbmU7eisrLG49aC5uZXh0KCkpbj1BKGUsbi52YWx1ZSxrKSxudWxsIT09biYmKGc9ZihuLGcseiksbnVsbD09PXQ/bD1uOnQuc2libGluZz1uLHQ9bik7cmV0dXJuIGx9Zm9yKHU9ZChlLHUpOyFuLmRvbmU7eisrLG49aC5uZXh0KCkpbj1DKHUsZSx6LG4udmFsdWUsayksbnVsbCE9PW4mJihhJiZudWxsIT09bi5hbHRlcm5hdGUmJlxudS5kZWxldGUobnVsbD09PW4ua2V5P3o6bi5rZXkpLGc9ZihuLGcseiksbnVsbD09PXQ/bD1uOnQuc2libGluZz1uLHQ9bik7YSYmdS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1yZXR1cm4gZnVuY3Rpb24oYSxkLGYsaCl7dmFyIGs9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09dWEmJm51bGw9PT1mLmtleTtrJiYoZj1mLnByb3BzLmNoaWxkcmVuKTt2YXIgbD1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mO2lmKGwpc3dpdGNoKGYuJCR0eXBlb2Ype2Nhc2Ugc2E6YTp7bD1mLmtleTtmb3Ioaz1kO251bGwhPT1rOyl7aWYoay5rZXk9PT1sKXtzd2l0Y2goay50YWcpe2Nhc2UgNzppZihmLnR5cGU9PT11YSl7YyhhLGsuc2libGluZyk7ZD1lKGssZi5wcm9wcy5jaGlsZHJlbik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1icmVhaztkZWZhdWx0OmlmKGsuZWxlbWVudFR5cGU9PT1mLnR5cGUpe2MoYSxrLnNpYmxpbmcpO1xuZD1lKGssZi5wcm9wcyk7ZC5yZWY9UWcoYSxrLGYpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9fWMoYSxrKTticmVha31lbHNlIGIoYSxrKTtrPWsuc2libGluZ31mLnR5cGU9PT11YT8oZD1YZyhmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9VmcoZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsaCksaC5yZWY9UWcoYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlIHRhOmE6e2ZvcihrPWYua2V5O251bGwhPT1kOyl7aWYoZC5rZXk9PT1rKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPVxuV2coZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSl9aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBmfHxcIm51bWJlclwiPT09dHlwZW9mIGYpcmV0dXJuIGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYpLGQucmV0dXJuPWEsYT1kKTooYyhhLGQpLGQ9VWcoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSk7aWYoUGcoZikpcmV0dXJuIHgoYSxkLGYsaCk7aWYoTGEoZikpcmV0dXJuIHcoYSxkLGYsaCk7bCYmUmcoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYmJiFrKXN3aXRjaChhLnRhZyl7Y2FzZSAxOmNhc2UgMjI6Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTp0aHJvdyBFcnJvcih5KDE1MixSYShhLnR5cGUpfHxcIkNvbXBvbmVudFwiKSk7fXJldHVybiBjKGEsZCl9fXZhciBZZz1TZyghMCksWmc9U2coITEpLCRnPXt9LGFoPUJmKCRnKSxiaD1CZigkZyksY2g9QmYoJGcpO1xuZnVuY3Rpb24gZGgoYSl7aWYoYT09PSRnKXRocm93IEVycm9yKHkoMTc0KSk7cmV0dXJuIGF9ZnVuY3Rpb24gZWgoYSxiKXtJKGNoLGIpO0koYmgsYSk7SShhaCwkZyk7YT1iLm5vZGVUeXBlO3N3aXRjaChhKXtjYXNlIDk6Y2FzZSAxMTpiPShiPWIuZG9jdW1lbnRFbGVtZW50KT9iLm5hbWVzcGFjZVVSSTptYihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6YT04PT09YT9iLnBhcmVudE5vZGU6YixiPWEubmFtZXNwYWNlVVJJfHxudWxsLGE9YS50YWdOYW1lLGI9bWIoYixhKX1IKGFoKTtJKGFoLGIpfWZ1bmN0aW9uIGZoKCl7SChhaCk7SChiaCk7SChjaCl9ZnVuY3Rpb24gZ2goYSl7ZGgoY2guY3VycmVudCk7dmFyIGI9ZGgoYWguY3VycmVudCk7dmFyIGM9bWIoYixhLnR5cGUpO2IhPT1jJiYoSShiaCxhKSxJKGFoLGMpKX1mdW5jdGlvbiBoaChhKXtiaC5jdXJyZW50PT09YSYmKEgoYWgpLEgoYmgpKX12YXIgUD1CZigwKTtcbmZ1bmN0aW9uIGloKGEpe2Zvcih2YXIgYj1hO251bGwhPT1iOyl7aWYoMTM9PT1iLnRhZyl7dmFyIGM9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbD09PWN8fFwiJD9cIj09PWMuZGF0YXx8XCIkIVwiPT09Yy5kYXRhKSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmZsYWdzJjY0KSlyZXR1cm4gYn1lbHNlIGlmKG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9cmV0dXJuIG51bGx9dmFyIGpoPW51bGwsa2g9bnVsbCxsaD0hMTtcbmZ1bmN0aW9uIG1oKGEsYil7dmFyIGM9bmgoNSxudWxsLG51bGwsMCk7Yy5lbGVtZW50VHlwZT1cIkRFTEVURURcIjtjLnR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2MuZmxhZ3M9ODtudWxsIT09YS5sYXN0RWZmZWN0PyhhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGEubGFzdEVmZmVjdD1jKTphLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1jfWZ1bmN0aW9uIG9oKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgMTM6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBwaChhKXtpZihsaCl7dmFyIGI9a2g7aWYoYil7dmFyIGM9YjtpZighb2goYSxiKSl7Yj1yZihjLm5leHRTaWJsaW5nKTtpZighYnx8IW9oKGEsYikpe2EuZmxhZ3M9YS5mbGFncyYtMTAyNXwyO2xoPSExO2poPWE7cmV0dXJufW1oKGpoLGMpfWpoPWE7a2g9cmYoYi5maXJzdENoaWxkKX1lbHNlIGEuZmxhZ3M9YS5mbGFncyYtMTAyNXwyLGxoPSExLGpoPWF9fWZ1bmN0aW9uIHFoKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZyYmMTMhPT1hLnRhZzspYT1hLnJldHVybjtqaD1hfVxuZnVuY3Rpb24gcmgoYSl7aWYoYSE9PWpoKXJldHVybiExO2lmKCFsaClyZXR1cm4gcWgoYSksbGg9ITAsITE7dmFyIGI9YS50eXBlO2lmKDUhPT1hLnRhZ3x8XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiFuZihiLGEubWVtb2l6ZWRQcm9wcykpZm9yKGI9a2g7YjspbWgoYSxiKSxiPXJmKGIubmV4dFNpYmxpbmcpO3FoKGEpO2lmKDEzPT09YS50YWcpe2E9YS5tZW1vaXplZFN0YXRlO2E9bnVsbCE9PWE/YS5kZWh5ZHJhdGVkOm51bGw7aWYoIWEpdGhyb3cgRXJyb3IoeSgzMTcpKTthOnthPWEubmV4dFNpYmxpbmc7Zm9yKGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIi8kXCI9PT1jKXtpZigwPT09Yil7a2g9cmYoYS5uZXh0U2libGluZyk7YnJlYWsgYX1iLS19ZWxzZVwiJFwiIT09YyYmXCIkIVwiIT09YyYmXCIkP1wiIT09Y3x8YisrfWE9YS5uZXh0U2libGluZ31raD1udWxsfX1lbHNlIGtoPWpoP3JmKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfVxuZnVuY3Rpb24gc2goKXtraD1qaD1udWxsO2xoPSExfXZhciB0aD1bXTtmdW5jdGlvbiB1aCgpe2Zvcih2YXIgYT0wO2E8dGgubGVuZ3RoO2ErKyl0aFthXS5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1udWxsO3RoLmxlbmd0aD0wfXZhciB2aD1yYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLHdoPXJhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLHhoPTAsUj1udWxsLFM9bnVsbCxUPW51bGwseWg9ITEsemg9ITE7ZnVuY3Rpb24gQWgoKXt0aHJvdyBFcnJvcih5KDMyMSkpO31mdW5jdGlvbiBCaChhLGIpe2lmKG51bGw9PT1iKXJldHVybiExO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGgmJmM8YS5sZW5ndGg7YysrKWlmKCFIZShhW2NdLGJbY10pKXJldHVybiExO3JldHVybiEwfVxuZnVuY3Rpb24gQ2goYSxiLGMsZCxlLGYpe3hoPWY7Uj1iO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtiLmxhbmVzPTA7dmguY3VycmVudD1udWxsPT09YXx8bnVsbD09PWEubWVtb2l6ZWRTdGF0ZT9EaDpFaDthPWMoZCxlKTtpZih6aCl7Zj0wO2Rve3poPSExO2lmKCEoMjU+ZikpdGhyb3cgRXJyb3IoeSgzMDEpKTtmKz0xO1Q9Uz1udWxsO2IudXBkYXRlUXVldWU9bnVsbDt2aC5jdXJyZW50PUZoO2E9YyhkLGUpfXdoaWxlKHpoKX12aC5jdXJyZW50PUdoO2I9bnVsbCE9PVMmJm51bGwhPT1TLm5leHQ7eGg9MDtUPVM9Uj1udWxsO3loPSExO2lmKGIpdGhyb3cgRXJyb3IoeSgzMDApKTtyZXR1cm4gYX1mdW5jdGlvbiBIaCgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwsYmFzZVF1ZXVlOm51bGwscXVldWU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1UP1IubWVtb2l6ZWRTdGF0ZT1UPWE6VD1ULm5leHQ9YTtyZXR1cm4gVH1cbmZ1bmN0aW9uIEloKCl7aWYobnVsbD09PVMpe3ZhciBhPVIuYWx0ZXJuYXRlO2E9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGx9ZWxzZSBhPVMubmV4dDt2YXIgYj1udWxsPT09VD9SLm1lbW9pemVkU3RhdGU6VC5uZXh0O2lmKG51bGwhPT1iKVQ9YixTPWE7ZWxzZXtpZihudWxsPT09YSl0aHJvdyBFcnJvcih5KDMxMCkpO1M9YTthPXttZW1vaXplZFN0YXRlOlMubWVtb2l6ZWRTdGF0ZSxiYXNlU3RhdGU6Uy5iYXNlU3RhdGUsYmFzZVF1ZXVlOlMuYmFzZVF1ZXVlLHF1ZXVlOlMucXVldWUsbmV4dDpudWxsfTtudWxsPT09VD9SLm1lbW9pemVkU3RhdGU9VD1hOlQ9VC5uZXh0PWF9cmV0dXJuIFR9ZnVuY3Rpb24gSmgoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiBLaChhKXt2YXIgYj1JaCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcih5KDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPVMsZT1kLmJhc2VRdWV1ZSxmPWMucGVuZGluZztpZihudWxsIT09Zil7aWYobnVsbCE9PWUpe3ZhciBnPWUubmV4dDtlLm5leHQ9Zi5uZXh0O2YubmV4dD1nfWQuYmFzZVF1ZXVlPWU9ZjtjLnBlbmRpbmc9bnVsbH1pZihudWxsIT09ZSl7ZT1lLm5leHQ7ZD1kLmJhc2VTdGF0ZTt2YXIgaD1nPWY9bnVsbCxrPWU7ZG97dmFyIGw9ay5sYW5lO2lmKCh4aCZsKT09PWwpbnVsbCE9PWgmJihoPWgubmV4dD17bGFuZTowLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsZWFnZXJTdGF0ZTprLmVhZ2VyU3RhdGUsbmV4dDpudWxsfSksZD1rLmVhZ2VyUmVkdWNlcj09PWE/ay5lYWdlclN0YXRlOmEoZCxrLmFjdGlvbik7ZWxzZXt2YXIgbj17bGFuZTpsLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsXG5lYWdlclN0YXRlOmsuZWFnZXJTdGF0ZSxuZXh0Om51bGx9O251bGw9PT1oPyhnPWg9bixmPWQpOmg9aC5uZXh0PW47Ui5sYW5lc3w9bDtEZ3w9bH1rPWsubmV4dH13aGlsZShudWxsIT09ayYmayE9PWUpO251bGw9PT1oP2Y9ZDpoLm5leHQ9ZztIZShkLGIubWVtb2l6ZWRTdGF0ZSl8fCh1Zz0hMCk7Yi5tZW1vaXplZFN0YXRlPWQ7Yi5iYXNlU3RhdGU9ZjtiLmJhc2VRdWV1ZT1oO2MubGFzdFJlbmRlcmVkU3RhdGU9ZH1yZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24gTGgoYSl7dmFyIGI9SWgoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IoeSgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1jLmRpc3BhdGNoLGU9Yy5wZW5kaW5nLGY9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lKXtjLnBlbmRpbmc9bnVsbDt2YXIgZz1lPWUubmV4dDtkbyBmPWEoZixnLmFjdGlvbiksZz1nLm5leHQ7d2hpbGUoZyE9PWUpO0hlKGYsYi5tZW1vaXplZFN0YXRlKXx8KHVnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtudWxsPT09Yi5iYXNlUXVldWUmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2YsZF19XG5mdW5jdGlvbiBNaChhLGIsYyl7dmFyIGQ9Yi5fZ2V0VmVyc2lvbjtkPWQoYi5fc291cmNlKTt2YXIgZT1iLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5O2lmKG51bGwhPT1lKWE9ZT09PWQ7ZWxzZSBpZihhPWEubXV0YWJsZVJlYWRMYW5lcyxhPSh4aCZhKT09PWEpYi5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1kLHRoLnB1c2goYik7aWYoYSlyZXR1cm4gYyhiLl9zb3VyY2UpO3RoLnB1c2goYik7dGhyb3cgRXJyb3IoeSgzNTApKTt9XG5mdW5jdGlvbiBOaChhLGIsYyxkKXt2YXIgZT1VO2lmKG51bGw9PT1lKXRocm93IEVycm9yKHkoMzQ5KSk7dmFyIGY9Yi5fZ2V0VmVyc2lvbixnPWYoYi5fc291cmNlKSxoPXZoLmN1cnJlbnQsaz1oLnVzZVN0YXRlKGZ1bmN0aW9uKCl7cmV0dXJuIE1oKGUsYixjKX0pLGw9a1sxXSxuPWtbMF07az1UO3ZhciBBPWEubWVtb2l6ZWRTdGF0ZSxwPUEucmVmcyxDPXAuZ2V0U25hcHNob3QseD1BLnNvdXJjZTtBPUEuc3Vic2NyaWJlO3ZhciB3PVI7YS5tZW1vaXplZFN0YXRlPXtyZWZzOnAsc291cmNlOmIsc3Vic2NyaWJlOmR9O2gudXNlRWZmZWN0KGZ1bmN0aW9uKCl7cC5nZXRTbmFwc2hvdD1jO3Auc2V0U25hcHNob3Q9bDt2YXIgYT1mKGIuX3NvdXJjZSk7aWYoIUhlKGcsYSkpe2E9YyhiLl9zb3VyY2UpO0hlKG4sYSl8fChsKGEpLGE9SWcodyksZS5tdXRhYmxlUmVhZExhbmVzfD1hJmUucGVuZGluZ0xhbmVzKTthPWUubXV0YWJsZVJlYWRMYW5lcztlLmVudGFuZ2xlZExhbmVzfD1hO2Zvcih2YXIgZD1cbmUuZW50YW5nbGVtZW50cyxoPWE7MDxoOyl7dmFyIGs9MzEtVmMoaCksdj0xPDxrO2Rba118PWE7aCY9fnZ9fX0sW2MsYixkXSk7aC51c2VFZmZlY3QoZnVuY3Rpb24oKXtyZXR1cm4gZChiLl9zb3VyY2UsZnVuY3Rpb24oKXt2YXIgYT1wLmdldFNuYXBzaG90LGM9cC5zZXRTbmFwc2hvdDt0cnl7YyhhKGIuX3NvdXJjZSkpO3ZhciBkPUlnKHcpO2UubXV0YWJsZVJlYWRMYW5lc3w9ZCZlLnBlbmRpbmdMYW5lc31jYXRjaChxKXtjKGZ1bmN0aW9uKCl7dGhyb3cgcTt9KX19KX0sW2IsZF0pO0hlKEMsYykmJkhlKHgsYikmJkhlKEEsZCl8fChhPXtwZW5kaW5nOm51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOkpoLGxhc3RSZW5kZXJlZFN0YXRlOm59LGEuZGlzcGF0Y2g9bD1PaC5iaW5kKG51bGwsUixhKSxrLnF1ZXVlPWEsay5iYXNlUXVldWU9bnVsbCxuPU1oKGUsYixjKSxrLm1lbW9pemVkU3RhdGU9ay5iYXNlU3RhdGU9bik7cmV0dXJuIG59XG5mdW5jdGlvbiBQaChhLGIsYyl7dmFyIGQ9SWgoKTtyZXR1cm4gTmgoZCxhLGIsYyl9ZnVuY3Rpb24gUWgoYSl7dmFyIGI9SGgoKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPWIucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6SmgsbGFzdFJlbmRlcmVkU3RhdGU6YX07YT1hLmRpc3BhdGNoPU9oLmJpbmQobnVsbCxSLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19XG5mdW5jdGlvbiBSaChhLGIsYyxkKXthPXt0YWc6YSxjcmVhdGU6YixkZXN0cm95OmMsZGVwczpkLG5leHQ6bnVsbH07Yj1SLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGx9LFIudXBkYXRlUXVldWU9YixiLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihjPWIubGFzdEVmZmVjdCxudWxsPT09Yz9iLmxhc3RFZmZlY3Q9YS5uZXh0PWE6KGQ9Yy5uZXh0LGMubmV4dD1hLGEubmV4dD1kLGIubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9ZnVuY3Rpb24gU2goYSl7dmFyIGI9SGgoKTthPXtjdXJyZW50OmF9O3JldHVybiBiLm1lbW9pemVkU3RhdGU9YX1mdW5jdGlvbiBUaCgpe3JldHVybiBJaCgpLm1lbW9pemVkU3RhdGV9ZnVuY3Rpb24gVWgoYSxiLGMsZCl7dmFyIGU9SGgoKTtSLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1SaCgxfGIsYyx2b2lkIDAsdm9pZCAwPT09ZD9udWxsOmQpfVxuZnVuY3Rpb24gVmgoYSxiLGMsZCl7dmFyIGU9SWgoKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Uyl7dmFyIGc9Uy5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZCaChkLGcuZGVwcykpe1JoKGIsYyxmLGQpO3JldHVybn19Ui5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9UmgoMXxiLGMsZixkKX1mdW5jdGlvbiBXaChhLGIpe3JldHVybiBVaCg1MTYsNCxhLGIpfWZ1bmN0aW9uIFhoKGEsYil7cmV0dXJuIFZoKDUxNiw0LGEsYil9ZnVuY3Rpb24gWWgoYSxiKXtyZXR1cm4gVmgoNCwyLGEsYil9ZnVuY3Rpb24gWmgoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1cbmZ1bmN0aW9uICRoKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gVmgoNCwyLFpoLmJpbmQobnVsbCxiLGEpLGMpfWZ1bmN0aW9uIGFpKCl7fWZ1bmN0aW9uIGJpKGEsYil7dmFyIGM9SWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJkJoKGIsZFsxXSkpcmV0dXJuIGRbMF07Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfWZ1bmN0aW9uIGNpKGEsYil7dmFyIGM9SWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJkJoKGIsZFsxXSkpcmV0dXJuIGRbMF07YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfVxuZnVuY3Rpb24gZGkoYSxiKXt2YXIgYz1lZygpO2dnKDk4PmM/OTg6YyxmdW5jdGlvbigpe2EoITApfSk7Z2coOTc8Yz85NzpjLGZ1bmN0aW9uKCl7dmFyIGM9d2gudHJhbnNpdGlvbjt3aC50cmFuc2l0aW9uPTE7dHJ5e2EoITEpLGIoKX1maW5hbGx5e3doLnRyYW5zaXRpb249Y319KX1cbmZ1bmN0aW9uIE9oKGEsYixjKXt2YXIgZD1IZygpLGU9SWcoYSksZj17bGFuZTplLGFjdGlvbjpjLGVhZ2VyUmVkdWNlcjpudWxsLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9LGc9Yi5wZW5kaW5nO251bGw9PT1nP2YubmV4dD1mOihmLm5leHQ9Zy5uZXh0LGcubmV4dD1mKTtiLnBlbmRpbmc9ZjtnPWEuYWx0ZXJuYXRlO2lmKGE9PT1SfHxudWxsIT09ZyYmZz09PVIpemg9eWg9ITA7ZWxzZXtpZigwPT09YS5sYW5lcyYmKG51bGw9PT1nfHwwPT09Zy5sYW5lcykmJihnPWIubGFzdFJlbmRlcmVkUmVkdWNlcixudWxsIT09ZykpdHJ5e3ZhciBoPWIubGFzdFJlbmRlcmVkU3RhdGUsaz1nKGgsYyk7Zi5lYWdlclJlZHVjZXI9ZztmLmVhZ2VyU3RhdGU9aztpZihIZShrLGgpKXJldHVybn1jYXRjaChsKXt9ZmluYWxseXt9SmcoYSxlLGQpfX1cbnZhciBHaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6QWgsdXNlQ29udGV4dDpBaCx1c2VFZmZlY3Q6QWgsdXNlSW1wZXJhdGl2ZUhhbmRsZTpBaCx1c2VMYXlvdXRFZmZlY3Q6QWgsdXNlTWVtbzpBaCx1c2VSZWR1Y2VyOkFoLHVzZVJlZjpBaCx1c2VTdGF0ZTpBaCx1c2VEZWJ1Z1ZhbHVlOkFoLHVzZURlZmVycmVkVmFsdWU6QWgsdXNlVHJhbnNpdGlvbjpBaCx1c2VNdXRhYmxlU291cmNlOkFoLHVzZU9wYXF1ZUlkZW50aWZpZXI6QWgsdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxEaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXtIaCgpLm1lbW9pemVkU3RhdGU9W2Esdm9pZCAwPT09Yj9udWxsOmJdO3JldHVybiBhfSx1c2VDb250ZXh0OnZnLHVzZUVmZmVjdDpXaCx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gVWgoNCwyLFpoLmJpbmQobnVsbCxcbmIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBVaCg0LDIsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPUhoKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPUhoKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPWQucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTthPWEuZGlzcGF0Y2g9T2guYmluZChudWxsLFIsYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOlNoLHVzZVN0YXRlOlFoLHVzZURlYnVnVmFsdWU6YWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1RaChhKSxjPWJbMF0sZD1iWzFdO1doKGZ1bmN0aW9uKCl7dmFyIGI9d2gudHJhbnNpdGlvbjtcbndoLnRyYW5zaXRpb249MTt0cnl7ZChhKX1maW5hbGx5e3doLnRyYW5zaXRpb249Yn19LFthXSk7cmV0dXJuIGN9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1RaCghMSksYj1hWzBdO2E9ZGkuYmluZChudWxsLGFbMV0pO1NoKGEpO3JldHVyblthLGJdfSx1c2VNdXRhYmxlU291cmNlOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1IaCgpO2QubWVtb2l6ZWRTdGF0ZT17cmVmczp7Z2V0U25hcHNob3Q6YixzZXRTbmFwc2hvdDpudWxsfSxzb3VyY2U6YSxzdWJzY3JpYmU6Y307cmV0dXJuIE5oKGQsYSxiLGMpfSx1c2VPcGFxdWVJZGVudGlmaWVyOmZ1bmN0aW9uKCl7aWYobGgpe3ZhciBhPSExLGI9dWYoZnVuY3Rpb24oKXthfHwoYT0hMCxjKFwicjpcIisodGYrKykudG9TdHJpbmcoMzYpKSk7dGhyb3cgRXJyb3IoeSgzNTUpKTt9KSxjPVFoKGIpWzFdOzA9PT0oUi5tb2RlJjIpJiYoUi5mbGFnc3w9NTE2LFJoKDUsZnVuY3Rpb24oKXtjKFwicjpcIisodGYrKykudG9TdHJpbmcoMzYpKX0sXG52b2lkIDAsbnVsbCkpO3JldHVybiBifWI9XCJyOlwiKyh0ZisrKS50b1N0cmluZygzNik7UWgoYik7cmV0dXJuIGJ9LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sRWg9e3JlYWRDb250ZXh0OnZnLHVzZUNhbGxiYWNrOmJpLHVzZUNvbnRleHQ6dmcsdXNlRWZmZWN0OlhoLHVzZUltcGVyYXRpdmVIYW5kbGU6JGgsdXNlTGF5b3V0RWZmZWN0OlloLHVzZU1lbW86Y2ksdXNlUmVkdWNlcjpLaCx1c2VSZWY6VGgsdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gS2goSmgpfSx1c2VEZWJ1Z1ZhbHVlOmFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9S2goSmgpLGM9YlswXSxkPWJbMV07WGgoZnVuY3Rpb24oKXt2YXIgYj13aC50cmFuc2l0aW9uO3doLnRyYW5zaXRpb249MTt0cnl7ZChhKX1maW5hbGx5e3doLnRyYW5zaXRpb249Yn19LFthXSk7cmV0dXJuIGN9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1LaChKaClbMF07cmV0dXJuW1RoKCkuY3VycmVudCxcbmFdfSx1c2VNdXRhYmxlU291cmNlOlBoLHVzZU9wYXF1ZUlkZW50aWZpZXI6ZnVuY3Rpb24oKXtyZXR1cm4gS2goSmgpWzBdfSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LEZoPXtyZWFkQ29udGV4dDp2Zyx1c2VDYWxsYmFjazpiaSx1c2VDb250ZXh0OnZnLHVzZUVmZmVjdDpYaCx1c2VJbXBlcmF0aXZlSGFuZGxlOiRoLHVzZUxheW91dEVmZmVjdDpZaCx1c2VNZW1vOmNpLHVzZVJlZHVjZXI6TGgsdXNlUmVmOlRoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIExoKEpoKX0sdXNlRGVidWdWYWx1ZTphaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPUxoKEpoKSxjPWJbMF0sZD1iWzFdO1hoKGZ1bmN0aW9uKCl7dmFyIGI9d2gudHJhbnNpdGlvbjt3aC50cmFuc2l0aW9uPTE7dHJ5e2QoYSl9ZmluYWxseXt3aC50cmFuc2l0aW9uPWJ9fSxbYV0pO3JldHVybiBjfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9TGgoSmgpWzBdO3JldHVybltUaCgpLmN1cnJlbnQsXG5hXX0sdXNlTXV0YWJsZVNvdXJjZTpQaCx1c2VPcGFxdWVJZGVudGlmaWVyOmZ1bmN0aW9uKCl7cmV0dXJuIExoKEpoKVswXX0sdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxlaT1yYS5SZWFjdEN1cnJlbnRPd25lcix1Zz0hMTtmdW5jdGlvbiBmaShhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP1pnKGIsbnVsbCxjLGQpOllnKGIsYS5jaGlsZCxjLGQpfWZ1bmN0aW9uIGdpKGEsYixjLGQsZSl7Yz1jLnJlbmRlcjt2YXIgZj1iLnJlZjt0ZyhiLGUpO2Q9Q2goYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhdWcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tNTE3LGEubGFuZXMmPX5lLGhpKGEsYixlKTtiLmZsYWdzfD0xO2ZpKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gaWkoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hKXt2YXIgZz1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJiFqaShnKSYmdm9pZCAwPT09Zy5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZyxraShhLGIsZyxkLGUsZik7YT1WZyhjLnR5cGUsbnVsbCxkLGIsYi5tb2RlLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1nPWEuY2hpbGQ7aWYoMD09PShlJmYpJiYoZT1nLm1lbW9pemVkUHJvcHMsYz1jLmNvbXBhcmUsYz1udWxsIT09Yz9jOkplLGMoZSxkKSYmYS5yZWY9PT1iLnJlZikpcmV0dXJuIGhpKGEsYixmKTtiLmZsYWdzfD0xO2E9VGcoZyxkKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBraShhLGIsYyxkLGUsZil7aWYobnVsbCE9PWEmJkplKGEubWVtb2l6ZWRQcm9wcyxkKSYmYS5yZWY9PT1iLnJlZilpZih1Zz0hMSwwIT09KGYmZSkpMCE9PShhLmZsYWdzJjE2Mzg0KSYmKHVnPSEwKTtlbHNlIHJldHVybiBiLmxhbmVzPWEubGFuZXMsaGkoYSxiLGYpO3JldHVybiBsaShhLGIsYyxkLGYpfVxuZnVuY3Rpb24gbWkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5jaGlsZHJlbixmPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsO2lmKFwiaGlkZGVuXCI9PT1kLm1vZGV8fFwidW5zdGFibGUtZGVmZXItd2l0aG91dC1oaWRpbmdcIj09PWQubW9kZSlpZigwPT09KGIubW9kZSY0KSliLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowfSxuaShiLGMpO2Vsc2UgaWYoMCE9PShjJjEwNzM3NDE4MjQpKWIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjB9LG5pKGIsbnVsbCE9PWY/Zi5iYXNlTGFuZXM6Yyk7ZWxzZSByZXR1cm4gYT1udWxsIT09Zj9mLmJhc2VMYW5lc3xjOmMsYi5sYW5lcz1iLmNoaWxkTGFuZXM9MTA3Mzc0MTgyNCxiLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczphfSxuaShiLGEpLG51bGw7ZWxzZSBudWxsIT09Zj8oZD1mLmJhc2VMYW5lc3xjLGIubWVtb2l6ZWRTdGF0ZT1udWxsKTpkPWMsbmkoYixkKTtmaShhLGIsZSxjKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIG9pKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZmxhZ3N8PTEyOH1mdW5jdGlvbiBsaShhLGIsYyxkLGUpe3ZhciBmPUZmKGMpP0RmOk0uY3VycmVudDtmPUVmKGIsZik7dGcoYixlKTtjPUNoKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXVnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTUxNyxhLmxhbmVzJj1+ZSxoaShhLGIsZSk7Yi5mbGFnc3w9MTtmaShhLGIsYyxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIHBpKGEsYixjLGQsZSl7aWYoRmYoYykpe3ZhciBmPSEwO0pmKGIpfWVsc2UgZj0hMTt0ZyhiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSludWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKSxNZyhiLGMsZCksT2coYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9dmcobCk6KGw9RmYoYyk/RGY6TS5jdXJyZW50LGw9RWYoYixsKSk7dmFyIG49Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsQT1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7QXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxrIT09bCkmJk5nKGIsZyxkLGwpO3dnPSExO3ZhciBwPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXA7Q2coYixkLGcsZSk7az1iLm1lbW9pemVkU3RhdGU7aCE9PWR8fHAhPT1rfHxOLmN1cnJlbnR8fHdnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbiYmKEdnKGIsYyxuLGQpLGs9Yi5tZW1vaXplZFN0YXRlKSwoaD13Z3x8TGcoYixjLGgsZCxwLGssbCkpPyhBfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnQmJmcuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PVxudHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00KSk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWspLGcucHJvcHM9ZCxnLnN0YXRlPWssZy5jb250ZXh0PWwsZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00KSxkPSExKX1lbHNle2c9Yi5zdGF0ZU5vZGU7eWcoYSxiKTtoPWIubWVtb2l6ZWRQcm9wcztsPWIudHlwZT09PWIuZWxlbWVudFR5cGU/aDpsZyhiLnR5cGUsaCk7Zy5wcm9wcz1sO0E9Yi5wZW5kaW5nUHJvcHM7cD1nLmNvbnRleHQ7az1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWs/az12ZyhrKTooaz1GZihjKT9EZjpNLmN1cnJlbnQsaz1FZihiLGspKTt2YXIgQz1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczsobj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgQ3x8XG5cImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PUF8fHAhPT1rKSYmTmcoYixnLGQsayk7d2c9ITE7cD1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT1wO0NnKGIsZCxnLGUpO3ZhciB4PWIubWVtb2l6ZWRTdGF0ZTtoIT09QXx8cCE9PXh8fE4uY3VycmVudHx8d2c/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBDJiYoR2coYixjLEMsZCkseD1iLm1lbW9pemVkU3RhdGUpLChsPXdnfHxMZyhiLGMsbCxkLHAseCxrKSk/KG58fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQsXG54LGspLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQseCxrKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmZsYWdzfD0yNTYpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0yNTYpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT14KSxnLnByb3BzPWQsZy5zdGF0ZT14LGcuY29udGV4dD1rLGQ9bCk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8XG5oPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0yNTYpLGQ9ITEpfXJldHVybiBxaShhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiBxaShhLGIsYyxkLGUsZil7b2koYSxiKTt2YXIgZz0wIT09KGIuZmxhZ3MmNjQpO2lmKCFkJiYhZylyZXR1cm4gZSYmS2YoYixjLCExKSxoaShhLGIsZik7ZD1iLnN0YXRlTm9kZTtlaS5jdXJyZW50PWI7dmFyIGg9ZyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yP251bGw6ZC5yZW5kZXIoKTtiLmZsYWdzfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPVlnKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9WWcoYixudWxsLGgsZikpOmZpKGEsYixoLGYpO2IubWVtb2l6ZWRTdGF0ZT1kLnN0YXRlO2UmJktmKGIsYywhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gcmkoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9IZihhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZIZihhLGIuY29udGV4dCwhMSk7ZWgoYSxiLmNvbnRhaW5lckluZm8pfVxudmFyIHNpPXtkZWh5ZHJhdGVkOm51bGwscmV0cnlMYW5lOjB9O1xuZnVuY3Rpb24gdGkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9UC5jdXJyZW50LGY9ITEsZzsoZz0wIT09KGIuZmxhZ3MmNjQpKXx8KGc9bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGU/ITE6MCE9PShlJjIpKTtnPyhmPSEwLGIuZmxhZ3MmPS02NSk6bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGV8fHZvaWQgMD09PWQuZmFsbGJhY2t8fCEwPT09ZC51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8KGV8PTEpO0koUCxlJjEpO2lmKG51bGw9PT1hKXt2b2lkIDAhPT1kLmZhbGxiYWNrJiZwaChiKTthPWQuY2hpbGRyZW47ZT1kLmZhbGxiYWNrO2lmKGYpcmV0dXJuIGE9dWkoYixhLGUsYyksYi5jaGlsZC5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6Y30sYi5tZW1vaXplZFN0YXRlPXNpLGE7aWYoXCJudW1iZXJcIj09PXR5cGVvZiBkLnVuc3RhYmxlX2V4cGVjdGVkTG9hZFRpbWUpcmV0dXJuIGE9dWkoYixhLGUsYyksYi5jaGlsZC5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6Y30sXG5iLm1lbW9pemVkU3RhdGU9c2ksYi5sYW5lcz0zMzU1NDQzMixhO2M9dmkoe21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46YX0sYi5tb2RlLGMsbnVsbCk7Yy5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1jfWlmKG51bGwhPT1hLm1lbW9pemVkU3RhdGUpe2lmKGYpcmV0dXJuIGQ9d2koYSxiLGQuY2hpbGRyZW4sZC5mYWxsYmFjayxjKSxmPWIuY2hpbGQsZT1hLmNoaWxkLm1lbW9pemVkU3RhdGUsZi5tZW1vaXplZFN0YXRlPW51bGw9PT1lP3tiYXNlTGFuZXM6Y306e2Jhc2VMYW5lczplLmJhc2VMYW5lc3xjfSxmLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzJn5jLGIubWVtb2l6ZWRTdGF0ZT1zaSxkO2M9eGkoYSxiLGQuY2hpbGRyZW4sYyk7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGN9aWYoZilyZXR1cm4gZD13aShhLGIsZC5jaGlsZHJlbixkLmZhbGxiYWNrLGMpLGY9Yi5jaGlsZCxlPWEuY2hpbGQubWVtb2l6ZWRTdGF0ZSxmLm1lbW9pemVkU3RhdGU9bnVsbD09PWU/e2Jhc2VMYW5lczpjfTpcbntiYXNlTGFuZXM6ZS5iYXNlTGFuZXN8Y30sZi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YyxiLm1lbW9pemVkU3RhdGU9c2ksZDtjPXhpKGEsYixkLmNoaWxkcmVuLGMpO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBjfWZ1bmN0aW9uIHVpKGEsYixjLGQpe3ZhciBlPWEubW9kZSxmPWEuY2hpbGQ7Yj17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmJ9OzA9PT0oZSYyKSYmbnVsbCE9PWY/KGYuY2hpbGRMYW5lcz0wLGYucGVuZGluZ1Byb3BzPWIpOmY9dmkoYixlLDAsbnVsbCk7Yz1YZyhjLGUsZCxudWxsKTtmLnJldHVybj1hO2MucmV0dXJuPWE7Zi5zaWJsaW5nPWM7YS5jaGlsZD1mO3JldHVybiBjfVxuZnVuY3Rpb24geGkoYSxiLGMsZCl7dmFyIGU9YS5jaGlsZDthPWUuc2libGluZztjPVRnKGUse21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46Y30pOzA9PT0oYi5tb2RlJjIpJiYoYy5sYW5lcz1kKTtjLnJldHVybj1iO2Muc2libGluZz1udWxsO251bGwhPT1hJiYoYS5uZXh0RWZmZWN0PW51bGwsYS5mbGFncz04LGIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWEpO3JldHVybiBiLmNoaWxkPWN9XG5mdW5jdGlvbiB3aShhLGIsYyxkLGUpe3ZhciBmPWIubW9kZSxnPWEuY2hpbGQ7YT1nLnNpYmxpbmc7dmFyIGg9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjpjfTswPT09KGYmMikmJmIuY2hpbGQhPT1nPyhjPWIuY2hpbGQsYy5jaGlsZExhbmVzPTAsYy5wZW5kaW5nUHJvcHM9aCxnPWMubGFzdEVmZmVjdCxudWxsIT09Zz8oYi5maXJzdEVmZmVjdD1jLmZpcnN0RWZmZWN0LGIubGFzdEVmZmVjdD1nLGcubmV4dEVmZmVjdD1udWxsKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1udWxsKTpjPVRnKGcsaCk7bnVsbCE9PWE/ZD1UZyhhLGQpOihkPVhnKGQsZixlLG51bGwpLGQuZmxhZ3N8PTIpO2QucmV0dXJuPWI7Yy5yZXR1cm49YjtjLnNpYmxpbmc9ZDtiLmNoaWxkPWM7cmV0dXJuIGR9ZnVuY3Rpb24geWkoYSxiKXthLmxhbmVzfD1iO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiYoYy5sYW5lc3w9Yik7c2coYS5yZXR1cm4sYil9XG5mdW5jdGlvbiB6aShhLGIsYyxkLGUsZil7dmFyIGc9YS5tZW1vaXplZFN0YXRlO251bGw9PT1nP2EubWVtb2l6ZWRTdGF0ZT17aXNCYWNrd2FyZHM6YixyZW5kZXJpbmc6bnVsbCxyZW5kZXJpbmdTdGFydFRpbWU6MCxsYXN0OmQsdGFpbDpjLHRhaWxNb2RlOmUsbGFzdEVmZmVjdDpmfTooZy5pc0JhY2t3YXJkcz1iLGcucmVuZGVyaW5nPW51bGwsZy5yZW5kZXJpbmdTdGFydFRpbWU9MCxnLmxhc3Q9ZCxnLnRhaWw9YyxnLnRhaWxNb2RlPWUsZy5sYXN0RWZmZWN0PWYpfVxuZnVuY3Rpb24gQWkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5yZXZlYWxPcmRlcixmPWQudGFpbDtmaShhLGIsZC5jaGlsZHJlbixjKTtkPVAuY3VycmVudDtpZigwIT09KGQmMikpZD1kJjF8MixiLmZsYWdzfD02NDtlbHNle2lmKG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmNjQpKWE6Zm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2lmKDEzPT09YS50YWcpbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmeWkoYSxjKTtlbHNlIGlmKDE5PT09YS50YWcpeWkoYSxjKTtlbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YilicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1iKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfWQmPTF9SShQLGQpO2lmKDA9PT0oYi5tb2RlJjIpKWIubWVtb2l6ZWRTdGF0ZT1cbm51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWE9Yy5hbHRlcm5hdGUsbnVsbCE9PWEmJm51bGw9PT1paChhKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO3ppKGIsITEsZSxjLGYsYi5sYXN0RWZmZWN0KTticmVhaztjYXNlIFwiYmFja3dhcmRzXCI6Yz1udWxsO2U9Yi5jaGlsZDtmb3IoYi5jaGlsZD1udWxsO251bGwhPT1lOyl7YT1lLmFsdGVybmF0ZTtpZihudWxsIT09YSYmbnVsbD09PWloKGEpKXtiLmNoaWxkPWU7YnJlYWt9YT1lLnNpYmxpbmc7ZS5zaWJsaW5nPWM7Yz1lO2U9YX16aShiLCEwLGMsbnVsbCxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcInRvZ2V0aGVyXCI6emkoYiwhMSxudWxsLG51bGwsdm9pZCAwLGIubGFzdEVmZmVjdCk7YnJlYWs7ZGVmYXVsdDpiLm1lbW9pemVkU3RhdGU9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGhpKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTtEZ3w9Yi5sYW5lcztpZigwIT09KGMmYi5jaGlsZExhbmVzKSl7aWYobnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkKXRocm93IEVycm9yKHkoMTUzKSk7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPVRnKGEsYS5wZW5kaW5nUHJvcHMpO2IuY2hpbGQ9Yztmb3IoYy5yZXR1cm49YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz1UZyhhLGEucGVuZGluZ1Byb3BzKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfXJldHVybiBudWxsfXZhciBCaSxDaSxEaSxFaTtcbkJpPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTtDaT1mdW5jdGlvbigpe307XG5EaT1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1hLm1lbW9pemVkUHJvcHM7aWYoZSE9PWQpe2E9Yi5zdGF0ZU5vZGU7ZGgoYWguY3VycmVudCk7dmFyIGY9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6ZT1ZYShhLGUpO2Q9WWEoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjplPWViKGEsZSk7ZD1lYihhLGQpO2Y9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmU9bSh7fSxlLHt2YWx1ZTp2b2lkIDB9KTtkPW0oe30sZCx7dmFsdWU6dm9pZCAwfSk7Zj1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjplPWdiKGEsZSk7ZD1nYihhLGQpO2Y9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoYS5vbmNsaWNrPWpmKX12YihjLGQpO3ZhciBnO2M9bnVsbDtmb3IobCBpbiBlKWlmKCFkLmhhc093blByb3BlcnR5KGwpJiZlLmhhc093blByb3BlcnR5KGwpJiZudWxsIT1lW2xdKWlmKFwic3R5bGVcIj09PVxubCl7dmFyIGg9ZVtsXTtmb3IoZyBpbiBoKWguaGFzT3duUHJvcGVydHkoZykmJihjfHwoYz17fSksY1tnXT1cIlwiKX1lbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09bCYmXCJjaGlsZHJlblwiIT09bCYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiZcImF1dG9Gb2N1c1wiIT09bCYmKGNhLmhhc093blByb3BlcnR5KGwpP2Z8fChmPVtdKTooZj1mfHxbXSkucHVzaChsLG51bGwpKTtmb3IobCBpbiBkKXt2YXIgaz1kW2xdO2g9bnVsbCE9ZT9lW2xdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGwpJiZrIT09aCYmKG51bGwhPWt8fG51bGwhPWgpKWlmKFwic3R5bGVcIj09PWwpaWYoaCl7Zm9yKGcgaW4gaCkhaC5oYXNPd25Qcm9wZXJ0eShnKXx8ayYmay5oYXNPd25Qcm9wZXJ0eShnKXx8KGN8fChjPXt9KSxjW2ddPVwiXCIpO2ZvcihnIGluIGspay5oYXNPd25Qcm9wZXJ0eShnKSYmaFtnXSE9PWtbZ10mJihjfHxcbihjPXt9KSxjW2ddPWtbZ10pfWVsc2UgY3x8KGZ8fChmPVtdKSxmLnB1c2gobCxjKSksYz1rO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1sPyhrPWs/ay5fX2h0bWw6dm9pZCAwLGg9aD9oLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmaCE9PWsmJihmPWZ8fFtdKS5wdXNoKGwsaykpOlwiY2hpbGRyZW5cIj09PWw/XCJzdHJpbmdcIiE9PXR5cGVvZiBrJiZcIm51bWJlclwiIT09dHlwZW9mIGt8fChmPWZ8fFtdKS5wdXNoKGwsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJihjYS5oYXNPd25Qcm9wZXJ0eShsKT8obnVsbCE9ayYmXCJvblNjcm9sbFwiPT09bCYmRyhcInNjcm9sbFwiLGEpLGZ8fGg9PT1rfHwoZj1bXSkpOlwib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWsmJmsuJCR0eXBlb2Y9PT1HYT9rLnRvU3RyaW5nKCk6KGY9Znx8W10pLnB1c2gobCxrKSl9YyYmKGY9Znx8W10pLnB1c2goXCJzdHlsZVwiLFxuYyk7dmFyIGw9ZjtpZihiLnVwZGF0ZVF1ZXVlPWwpYi5mbGFnc3w9NH19O0VpPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiYoYi5mbGFnc3w9NCl9O2Z1bmN0aW9uIEZpKGEsYil7aWYoIWxoKXN3aXRjaChhLnRhaWxNb2RlKXtjYXNlIFwiaGlkZGVuXCI6Yj1hLnRhaWw7Zm9yKHZhciBjPW51bGw7bnVsbCE9PWI7KW51bGwhPT1iLmFsdGVybmF0ZSYmKGM9YiksYj1iLnNpYmxpbmc7bnVsbD09PWM/YS50YWlsPW51bGw6Yy5zaWJsaW5nPW51bGw7YnJlYWs7Y2FzZSBcImNvbGxhcHNlZFwiOmM9YS50YWlsO2Zvcih2YXIgZD1udWxsO251bGwhPT1jOyludWxsIT09Yy5hbHRlcm5hdGUmJihkPWMpLGM9Yy5zaWJsaW5nO251bGw9PT1kP2J8fG51bGw9PT1hLnRhaWw/YS50YWlsPW51bGw6YS50YWlsLnNpYmxpbmc9bnVsbDpkLnNpYmxpbmc9bnVsbH19XG5mdW5jdGlvbiBHaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHM7c3dpdGNoKGIudGFnKXtjYXNlIDI6Y2FzZSAxNjpjYXNlIDE1OmNhc2UgMDpjYXNlIDExOmNhc2UgNzpjYXNlIDg6Y2FzZSAxMjpjYXNlIDk6Y2FzZSAxNDpyZXR1cm4gbnVsbDtjYXNlIDE6cmV0dXJuIEZmKGIudHlwZSkmJkdmKCksbnVsbDtjYXNlIDM6ZmgoKTtIKE4pO0goTSk7dWgoKTtkPWIuc3RhdGVOb2RlO2QucGVuZGluZ0NvbnRleHQmJihkLmNvbnRleHQ9ZC5wZW5kaW5nQ29udGV4dCxkLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1hfHxudWxsPT09YS5jaGlsZClyaChiKT9iLmZsYWdzfD00OmQuaHlkcmF0ZXx8KGIuZmxhZ3N8PTI1Nik7Q2koYik7cmV0dXJuIG51bGw7Y2FzZSA1OmhoKGIpO3ZhciBlPWRoKGNoLmN1cnJlbnQpO2M9Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSlEaShhLGIsYyxkLGUpLGEucmVmIT09Yi5yZWYmJihiLmZsYWdzfD0xMjgpO2Vsc2V7aWYoIWQpe2lmKG51bGw9PT1cbmIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTY2KSk7cmV0dXJuIG51bGx9YT1kaChhaC5jdXJyZW50KTtpZihyaChiKSl7ZD1iLnN0YXRlTm9kZTtjPWIudHlwZTt2YXIgZj1iLm1lbW9pemVkUHJvcHM7ZFt3Zl09YjtkW3hmXT1mO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RyhcImNhbmNlbFwiLGQpO0coXCJjbG9zZVwiLGQpO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RyhcImxvYWRcIixkKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoYT0wO2E8WGUubGVuZ3RoO2ErKylHKFhlW2FdLGQpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpHKFwiZXJyb3JcIixkKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpHKFwiZXJyb3JcIixkKTtHKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RyhcInRvZ2dsZVwiLGQpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGQsZik7RyhcImludmFsaWRcIixkKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZC5fd3JhcHBlclN0YXRlPVxue3dhc011bHRpcGxlOiEhZi5tdWx0aXBsZX07RyhcImludmFsaWRcIixkKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpoYihkLGYpLEcoXCJpbnZhbGlkXCIsZCl9dmIoYyxmKTthPW51bGw7Zm9yKHZhciBnIGluIGYpZi5oYXNPd25Qcm9wZXJ0eShnKSYmKGU9ZltnXSxcImNoaWxkcmVuXCI9PT1nP1wic3RyaW5nXCI9PT10eXBlb2YgZT9kLnRleHRDb250ZW50IT09ZSYmKGE9W1wiY2hpbGRyZW5cIixlXSk6XCJudW1iZXJcIj09PXR5cGVvZiBlJiZkLnRleHRDb250ZW50IT09XCJcIitlJiYoYT1bXCJjaGlsZHJlblwiLFwiXCIrZV0pOmNhLmhhc093blByb3BlcnR5KGcpJiZudWxsIT1lJiZcIm9uU2Nyb2xsXCI9PT1nJiZHKFwic2Nyb2xsXCIsZCkpO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpWYShkKTtjYihkLGYsITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGQpO2piKGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5vbkNsaWNrJiYoZC5vbmNsaWNrPVxuamYpfWQ9YTtiLnVwZGF0ZVF1ZXVlPWQ7bnVsbCE9PWQmJihiLmZsYWdzfD00KX1lbHNle2c9OT09PWUubm9kZVR5cGU/ZTplLm93bmVyRG9jdW1lbnQ7YT09PWtiLmh0bWwmJihhPWxiKGMpKTthPT09a2IuaHRtbD9cInNjcmlwdFwiPT09Yz8oYT1nLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYS5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixhPWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKSk6XCJzdHJpbmdcIj09PXR5cGVvZiBkLmlzP2E9Zy5jcmVhdGVFbGVtZW50KGMse2lzOmQuaXN9KTooYT1nLmNyZWF0ZUVsZW1lbnQoYyksXCJzZWxlY3RcIj09PWMmJihnPWEsZC5tdWx0aXBsZT9nLm11bHRpcGxlPSEwOmQuc2l6ZSYmKGcuc2l6ZT1kLnNpemUpKSk6YT1nLmNyZWF0ZUVsZW1lbnROUyhhLGMpO2Fbd2ZdPWI7YVt4Zl09ZDtCaShhLGIsITEsITEpO2Iuc3RhdGVOb2RlPWE7Zz13YihjLGQpO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RyhcImNhbmNlbFwiLGEpO0coXCJjbG9zZVwiLGEpO1xuZT1kO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RyhcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGU9MDtlPFhlLmxlbmd0aDtlKyspRyhYZVtlXSxhKTtlPWQ7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkcoXCJlcnJvclwiLGEpO2U9ZDticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpHKFwiZXJyb3JcIixhKTtHKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwiZGV0YWlsc1wiOkcoXCJ0b2dnbGVcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImlucHV0XCI6WmEoYSxkKTtlPVlhKGEsZCk7RyhcImludmFsaWRcIixhKTticmVhaztjYXNlIFwib3B0aW9uXCI6ZT1lYihhLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZC5tdWx0aXBsZX07ZT1tKHt9LGQse3ZhbHVlOnZvaWQgMH0pO0coXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoYSxkKTtlPVxuZ2IoYSxkKTtHKFwiaW52YWxpZFwiLGEpO2JyZWFrO2RlZmF1bHQ6ZT1kfXZiKGMsZSk7dmFyIGg9ZTtmb3IoZiBpbiBoKWlmKGguaGFzT3duUHJvcGVydHkoZikpe3ZhciBrPWhbZl07XCJzdHlsZVwiPT09Zj90YihhLGspOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWY/KGs9az9rLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmb2IoYSxrKSk6XCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGs/KFwidGV4dGFyZWFcIiE9PWN8fFwiXCIhPT1rKSYmcGIoYSxrKTpcIm51bWJlclwiPT09dHlwZW9mIGsmJnBiKGEsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ZiYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWYmJlwiYXV0b0ZvY3VzXCIhPT1mJiYoY2EuaGFzT3duUHJvcGVydHkoZik/bnVsbCE9ayYmXCJvblNjcm9sbFwiPT09ZiYmRyhcInNjcm9sbFwiLGEpOm51bGwhPWsmJnFhKGEsZixrLGcpKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoYSk7Y2IoYSxkLCExKTtcbmJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGEpO2piKGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1kLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIitTYShkLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFkLm11bHRpcGxlO2Y9ZC52YWx1ZTtudWxsIT1mP2ZiKGEsISFkLm11bHRpcGxlLGYsITEpOm51bGwhPWQuZGVmYXVsdFZhbHVlJiZmYihhLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5vbkNsaWNrJiYoYS5vbmNsaWNrPWpmKX1tZihjLGQpJiYoYi5mbGFnc3w9NCl9bnVsbCE9PWIucmVmJiYoYi5mbGFnc3w9MTI4KX1yZXR1cm4gbnVsbDtjYXNlIDY6aWYoYSYmbnVsbCE9Yi5zdGF0ZU5vZGUpRWkoYSxiLGEubWVtb2l6ZWRQcm9wcyxkKTtlbHNle2lmKFwic3RyaW5nXCIhPT10eXBlb2YgZCYmbnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTY2KSk7XG5jPWRoKGNoLmN1cnJlbnQpO2RoKGFoLmN1cnJlbnQpO3JoKGIpPyhkPWIuc3RhdGVOb2RlLGM9Yi5tZW1vaXplZFByb3BzLGRbd2ZdPWIsZC5ub2RlVmFsdWUhPT1jJiYoYi5mbGFnc3w9NCkpOihkPSg5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZCksZFt3Zl09YixiLnN0YXRlTm9kZT1kKX1yZXR1cm4gbnVsbDtjYXNlIDEzOkgoUCk7ZD1iLm1lbW9pemVkU3RhdGU7aWYoMCE9PShiLmZsYWdzJjY0KSlyZXR1cm4gYi5sYW5lcz1jLGI7ZD1udWxsIT09ZDtjPSExO251bGw9PT1hP3ZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5mYWxsYmFjayYmcmgoYik6Yz1udWxsIT09YS5tZW1vaXplZFN0YXRlO2lmKGQmJiFjJiYwIT09KGIubW9kZSYyKSlpZihudWxsPT09YSYmITAhPT1iLm1lbW9pemVkUHJvcHMudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fDAhPT0oUC5jdXJyZW50JjEpKTA9PT1WJiYoVj0zKTtlbHNle2lmKDA9PT1WfHwzPT09VilWPVxuNDtudWxsPT09VXx8MD09PShEZyYxMzQyMTc3MjcpJiYwPT09KEhpJjEzNDIxNzcyNyl8fElpKFUsVyl9aWYoZHx8YyliLmZsYWdzfD00O3JldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gZmgoKSxDaShiKSxudWxsPT09YSYmY2YoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksbnVsbDtjYXNlIDEwOnJldHVybiByZyhiKSxudWxsO2Nhc2UgMTc6cmV0dXJuIEZmKGIudHlwZSkmJkdmKCksbnVsbDtjYXNlIDE5OkgoUCk7ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7Zj0wIT09KGIuZmxhZ3MmNjQpO2c9ZC5yZW5kZXJpbmc7aWYobnVsbD09PWcpaWYoZilGaShkLCExKTtlbHNle2lmKDAhPT1WfHxudWxsIT09YSYmMCE9PShhLmZsYWdzJjY0KSlmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7Zz1paChhKTtpZihudWxsIT09Zyl7Yi5mbGFnc3w9NjQ7RmkoZCwhMSk7Zj1nLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiYoYi51cGRhdGVRdWV1ZT1mLGIuZmxhZ3N8PTQpO1xubnVsbD09PWQubGFzdEVmZmVjdCYmKGIuZmlyc3RFZmZlY3Q9bnVsbCk7Yi5sYXN0RWZmZWN0PWQubGFzdEVmZmVjdDtkPWM7Zm9yKGM9Yi5jaGlsZDtudWxsIT09YzspZj1jLGE9ZCxmLmZsYWdzJj0yLGYubmV4dEVmZmVjdD1udWxsLGYuZmlyc3RFZmZlY3Q9bnVsbCxmLmxhc3RFZmZlY3Q9bnVsbCxnPWYuYWx0ZXJuYXRlLG51bGw9PT1nPyhmLmNoaWxkTGFuZXM9MCxmLmxhbmVzPWEsZi5jaGlsZD1udWxsLGYubWVtb2l6ZWRQcm9wcz1udWxsLGYubWVtb2l6ZWRTdGF0ZT1udWxsLGYudXBkYXRlUXVldWU9bnVsbCxmLmRlcGVuZGVuY2llcz1udWxsLGYuc3RhdGVOb2RlPW51bGwpOihmLmNoaWxkTGFuZXM9Zy5jaGlsZExhbmVzLGYubGFuZXM9Zy5sYW5lcyxmLmNoaWxkPWcuY2hpbGQsZi5tZW1vaXplZFByb3BzPWcubWVtb2l6ZWRQcm9wcyxmLm1lbW9pemVkU3RhdGU9Zy5tZW1vaXplZFN0YXRlLGYudXBkYXRlUXVldWU9Zy51cGRhdGVRdWV1ZSxmLnR5cGU9Zy50eXBlLGE9Zy5kZXBlbmRlbmNpZXMsXG5mLmRlcGVuZGVuY2llcz1udWxsPT09YT9udWxsOntsYW5lczphLmxhbmVzLGZpcnN0Q29udGV4dDphLmZpcnN0Q29udGV4dH0pLGM9Yy5zaWJsaW5nO0koUCxQLmN1cnJlbnQmMXwyKTtyZXR1cm4gYi5jaGlsZH1hPWEuc2libGluZ31udWxsIT09ZC50YWlsJiZPKCk+SmkmJihiLmZsYWdzfD02NCxmPSEwLEZpKGQsITEpLGIubGFuZXM9MzM1NTQ0MzIpfWVsc2V7aWYoIWYpaWYoYT1paChnKSxudWxsIT09YSl7aWYoYi5mbGFnc3w9NjQsZj0hMCxjPWEudXBkYXRlUXVldWUsbnVsbCE9PWMmJihiLnVwZGF0ZVF1ZXVlPWMsYi5mbGFnc3w9NCksRmkoZCwhMCksbnVsbD09PWQudGFpbCYmXCJoaWRkZW5cIj09PWQudGFpbE1vZGUmJiFnLmFsdGVybmF0ZSYmIWxoKXJldHVybiBiPWIubGFzdEVmZmVjdD1kLmxhc3RFZmZlY3QsbnVsbCE9PWImJihiLm5leHRFZmZlY3Q9bnVsbCksbnVsbH1lbHNlIDIqTygpLWQucmVuZGVyaW5nU3RhcnRUaW1lPkppJiYxMDczNzQxODI0IT09YyYmKGIuZmxhZ3N8PVxuNjQsZj0hMCxGaShkLCExKSxiLmxhbmVzPTMzNTU0NDMyKTtkLmlzQmFja3dhcmRzPyhnLnNpYmxpbmc9Yi5jaGlsZCxiLmNoaWxkPWcpOihjPWQubGFzdCxudWxsIT09Yz9jLnNpYmxpbmc9ZzpiLmNoaWxkPWcsZC5sYXN0PWcpfXJldHVybiBudWxsIT09ZC50YWlsPyhjPWQudGFpbCxkLnJlbmRlcmluZz1jLGQudGFpbD1jLnNpYmxpbmcsZC5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdCxkLnJlbmRlcmluZ1N0YXJ0VGltZT1PKCksYy5zaWJsaW5nPW51bGwsYj1QLmN1cnJlbnQsSShQLGY/YiYxfDI6YiYxKSxjKTpudWxsO2Nhc2UgMjM6Y2FzZSAyNDpyZXR1cm4gS2koKSxudWxsIT09YSYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSE9PShudWxsIT09Yi5tZW1vaXplZFN0YXRlKSYmXCJ1bnN0YWJsZS1kZWZlci13aXRob3V0LWhpZGluZ1wiIT09ZC5tb2RlJiYoYi5mbGFnc3w9NCksbnVsbH10aHJvdyBFcnJvcih5KDE1NixiLnRhZykpO31cbmZ1bmN0aW9uIExpKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAxOkZmKGEudHlwZSkmJkdmKCk7dmFyIGI9YS5mbGFncztyZXR1cm4gYiY0MDk2PyhhLmZsYWdzPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDM6ZmgoKTtIKE4pO0goTSk7dWgoKTtiPWEuZmxhZ3M7aWYoMCE9PShiJjY0KSl0aHJvdyBFcnJvcih5KDI4NSkpO2EuZmxhZ3M9YiYtNDA5N3w2NDtyZXR1cm4gYTtjYXNlIDU6cmV0dXJuIGhoKGEpLG51bGw7Y2FzZSAxMzpyZXR1cm4gSChQKSxiPWEuZmxhZ3MsYiY0MDk2PyhhLmZsYWdzPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDE5OnJldHVybiBIKFApLG51bGw7Y2FzZSA0OnJldHVybiBmaCgpLG51bGw7Y2FzZSAxMDpyZXR1cm4gcmcoYSksbnVsbDtjYXNlIDIzOmNhc2UgMjQ6cmV0dXJuIEtpKCksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIE1pKGEsYil7dHJ5e3ZhciBjPVwiXCIsZD1iO2RvIGMrPVFhKGQpLGQ9ZC5yZXR1cm47d2hpbGUoZCk7dmFyIGU9Y31jYXRjaChmKXtlPVwiXFxuRXJyb3IgZ2VuZXJhdGluZyBzdGFjazogXCIrZi5tZXNzYWdlK1wiXFxuXCIrZi5zdGFja31yZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazplfX1mdW5jdGlvbiBOaShhLGIpe3RyeXtjb25zb2xlLmVycm9yKGIudmFsdWUpfWNhdGNoKGMpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBjO30pfX12YXIgT2k9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7ZnVuY3Rpb24gUGkoYSxiLGMpe2M9emcoLTEsYyk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7UWl8fChRaT0hMCxSaT1kKTtOaShhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uIFNpKGEsYixjKXtjPXpnKC0xLGMpO2MudGFnPTM7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXtOaShhLGIpO3JldHVybiBkKGUpfX12YXIgZj1hLnN0YXRlTm9kZTtudWxsIT09ZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09VGk/VGk9bmV3IFNldChbdGhpc10pOlRpLmFkZCh0aGlzKSxOaShhLGIpKTt2YXIgYz1iLnN0YWNrO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYi52YWx1ZSx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWM/YzpcIlwifSl9KTtyZXR1cm4gY312YXIgVWk9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQ7XG5mdW5jdGlvbiBWaShhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09YilpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYil0cnl7YihudWxsKX1jYXRjaChjKXtXaShhLGMpfWVsc2UgYi5jdXJyZW50PW51bGx9ZnVuY3Rpb24gWGkoYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpyZXR1cm47Y2FzZSAxOmlmKGIuZmxhZ3MmMjU2JiZudWxsIT09YSl7dmFyIGM9YS5tZW1vaXplZFByb3BzLGQ9YS5tZW1vaXplZFN0YXRlO2E9Yi5zdGF0ZU5vZGU7Yj1hLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGIuZWxlbWVudFR5cGU9PT1iLnR5cGU/YzpsZyhiLnR5cGUsYyksZCk7YS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT1ifXJldHVybjtjYXNlIDM6Yi5mbGFncyYyNTYmJnFmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO3JldHVybjtjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OnJldHVybn10aHJvdyBFcnJvcih5KDE2MykpO31cbmZ1bmN0aW9uIFlpKGEsYixjKXtzd2l0Y2goYy50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpiPWMudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7YT1iPWIubmV4dDtkb3tpZigzPT09KGEudGFnJjMpKXt2YXIgZD1hLmNyZWF0ZTthLmRlc3Ryb3k9ZCgpfWE9YS5uZXh0fXdoaWxlKGEhPT1iKX1iPWMudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7YT1iPWIubmV4dDtkb3t2YXIgZT1hO2Q9ZS5uZXh0O2U9ZS50YWc7MCE9PShlJjQpJiYwIT09KGUmMSkmJihaaShjLGEpLCRpKGMsYSkpO2E9ZH13aGlsZShhIT09Yil9cmV0dXJuO2Nhc2UgMTphPWMuc3RhdGVOb2RlO2MuZmxhZ3MmNCYmKG51bGw9PT1iP2EuY29tcG9uZW50RGlkTW91bnQoKTooZD1jLmVsZW1lbnRUeXBlPT09Yy50eXBlP2IubWVtb2l6ZWRQcm9wczpsZyhjLnR5cGUsYi5tZW1vaXplZFByb3BzKSxhLmNvbXBvbmVudERpZFVwZGF0ZShkLFxuYi5tZW1vaXplZFN0YXRlLGEuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpKSk7Yj1jLnVwZGF0ZVF1ZXVlO251bGwhPT1iJiZFZyhjLGIsYSk7cmV0dXJuO2Nhc2UgMzpiPWMudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2E9bnVsbDtpZihudWxsIT09Yy5jaGlsZClzd2l0Y2goYy5jaGlsZC50YWcpe2Nhc2UgNTphPWMuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMTphPWMuY2hpbGQuc3RhdGVOb2RlfUVnKGMsYixhKX1yZXR1cm47Y2FzZSA1OmE9Yy5zdGF0ZU5vZGU7bnVsbD09PWImJmMuZmxhZ3MmNCYmbWYoYy50eXBlLGMubWVtb2l6ZWRQcm9wcykmJmEuZm9jdXMoKTtyZXR1cm47Y2FzZSA2OnJldHVybjtjYXNlIDQ6cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6bnVsbD09PWMubWVtb2l6ZWRTdGF0ZSYmKGM9Yy5hbHRlcm5hdGUsbnVsbCE9PWMmJihjPWMubWVtb2l6ZWRTdGF0ZSxudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGwhPT1jJiZDYyhjKSkpKTtcbnJldHVybjtjYXNlIDE5OmNhc2UgMTc6Y2FzZSAyMDpjYXNlIDIxOmNhc2UgMjM6Y2FzZSAyNDpyZXR1cm59dGhyb3cgRXJyb3IoeSgxNjMpKTt9XG5mdW5jdGlvbiBhaihhLGIpe2Zvcih2YXIgYz1hOzspe2lmKDU9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoYilkPWQuc3R5bGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuc2V0UHJvcGVydHk/ZC5zZXRQcm9wZXJ0eShcImRpc3BsYXlcIixcIm5vbmVcIixcImltcG9ydGFudFwiKTpkLmRpc3BsYXk9XCJub25lXCI7ZWxzZXtkPWMuc3RhdGVOb2RlO3ZhciBlPWMubWVtb2l6ZWRQcm9wcy5zdHlsZTtlPXZvaWQgMCE9PWUmJm51bGwhPT1lJiZlLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9lLmRpc3BsYXk6bnVsbDtkLnN0eWxlLmRpc3BsYXk9c2IoXCJkaXNwbGF5XCIsZSl9fWVsc2UgaWYoNj09PWMudGFnKWMuc3RhdGVOb2RlLm5vZGVWYWx1ZT1iP1wiXCI6Yy5tZW1vaXplZFByb3BzO2Vsc2UgaWYoKDIzIT09Yy50YWcmJjI0IT09Yy50YWd8fG51bGw9PT1jLm1lbW9pemVkU3RhdGV8fGM9PT1hKSYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1cbmEpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWEpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319XG5mdW5jdGlvbiBiaihhLGIpe2lmKE1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgTWYub25Db21taXRGaWJlclVubW91bnQpdHJ5e01mLm9uQ29tbWl0RmliZXJVbm1vdW50KExmLGIpfWNhdGNoKGYpe31zd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpjYXNlIDIyOmE9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YSYmKGE9YS5sYXN0RWZmZWN0LG51bGwhPT1hKSl7dmFyIGM9YT1hLm5leHQ7ZG97dmFyIGQ9YyxlPWQuZGVzdHJveTtkPWQudGFnO2lmKHZvaWQgMCE9PWUpaWYoMCE9PShkJjQpKVppKGIsYyk7ZWxzZXtkPWI7dHJ5e2UoKX1jYXRjaChmKXtXaShkLGYpfX1jPWMubmV4dH13aGlsZShjIT09YSl9YnJlYWs7Y2FzZSAxOlZpKGIpO2E9Yi5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuY29tcG9uZW50V2lsbFVubW91bnQpdHJ5e2EucHJvcHM9Yi5tZW1vaXplZFByb3BzLGEuc3RhdGU9Yi5tZW1vaXplZFN0YXRlLGEuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChmKXtXaShiLFxuZil9YnJlYWs7Y2FzZSA1OlZpKGIpO2JyZWFrO2Nhc2UgNDpjaihhLGIpfX1mdW5jdGlvbiBkaihhKXthLmFsdGVybmF0ZT1udWxsO2EuY2hpbGQ9bnVsbDthLmRlcGVuZGVuY2llcz1udWxsO2EuZmlyc3RFZmZlY3Q9bnVsbDthLmxhc3RFZmZlY3Q9bnVsbDthLm1lbW9pemVkUHJvcHM9bnVsbDthLm1lbW9pemVkU3RhdGU9bnVsbDthLnBlbmRpbmdQcm9wcz1udWxsO2EucmV0dXJuPW51bGw7YS51cGRhdGVRdWV1ZT1udWxsfWZ1bmN0aW9uIGVqKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24gZmooYSl7YTp7Zm9yKHZhciBiPWEucmV0dXJuO251bGwhPT1iOyl7aWYoZWooYikpYnJlYWsgYTtiPWIucmV0dXJufXRocm93IEVycm9yKHkoMTYwKSk7fXZhciBjPWI7Yj1jLnN0YXRlTm9kZTtzd2l0Y2goYy50YWcpe2Nhc2UgNTp2YXIgZD0hMTticmVhaztjYXNlIDM6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztjYXNlIDQ6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHkoMTYxKSk7fWMuZmxhZ3MmMTYmJihwYihiLFwiXCIpLGMuZmxhZ3MmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxlaihjLnJldHVybikpe2M9bnVsbDticmVhayBhfWM9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtmb3IoYz1jLnNpYmxpbmc7NSE9PWMudGFnJiY2IT09Yy50YWcmJjE4IT09Yy50YWc7KXtpZihjLmZsYWdzJjIpY29udGludWUgYjtpZihudWxsPT09XG5jLmNoaWxkfHw0PT09Yy50YWcpY29udGludWUgYjtlbHNlIGMuY2hpbGQucmV0dXJuPWMsYz1jLmNoaWxkfWlmKCEoYy5mbGFncyYyKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1kP2dqKGEsYyxiKTpoaihhLGMsYil9XG5mdW5jdGlvbiBnaihhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj84PT09Yy5ub2RlVHlwZT9jLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsYik6Yy5pbnNlcnRCZWZvcmUoYSxiKTooOD09PWMubm9kZVR5cGU/KGI9Yy5wYXJlbnROb2RlLGIuaW5zZXJ0QmVmb3JlKGEsYykpOihiPWMsYi5hcHBlbmRDaGlsZChhKSksYz1jLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWMmJnZvaWQgMCE9PWN8fG51bGwhPT1iLm9uY2xpY2t8fChiLm9uY2xpY2s9amYpKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoZ2ooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylnaihhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBoaihhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj9jLmluc2VydEJlZm9yZShhLGIpOmMuYXBwZW5kQ2hpbGQoYSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKGhqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspaGooYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gY2ooYSxiKXtmb3IodmFyIGM9YixkPSExLGUsZjs7KXtpZighZCl7ZD1jLnJldHVybjthOmZvcig7Oyl7aWYobnVsbD09PWQpdGhyb3cgRXJyb3IoeSgxNjApKTtlPWQuc3RhdGVOb2RlO3N3aXRjaChkLnRhZyl7Y2FzZSA1OmY9ITE7YnJlYWsgYTtjYXNlIDM6ZT1lLmNvbnRhaW5lckluZm87Zj0hMDticmVhayBhO2Nhc2UgNDplPWUuY29udGFpbmVySW5mbztmPSEwO2JyZWFrIGF9ZD1kLnJldHVybn1kPSEwfWlmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKXthOmZvcih2YXIgZz1hLGg9YyxrPWg7OylpZihiaihnLGspLG51bGwhPT1rLmNoaWxkJiY0IT09ay50YWcpay5jaGlsZC5yZXR1cm49ayxrPWsuY2hpbGQ7ZWxzZXtpZihrPT09aClicmVhayBhO2Zvcig7bnVsbD09PWsuc2libGluZzspe2lmKG51bGw9PT1rLnJldHVybnx8ay5yZXR1cm49PT1oKWJyZWFrIGE7az1rLnJldHVybn1rLnNpYmxpbmcucmV0dXJuPWsucmV0dXJuO2s9ay5zaWJsaW5nfWY/KGc9ZSxoPWMuc3RhdGVOb2RlLFxuOD09PWcubm9kZVR5cGU/Zy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGgpOmcucmVtb3ZlQ2hpbGQoaCkpOmUucmVtb3ZlQ2hpbGQoYy5zdGF0ZU5vZGUpfWVsc2UgaWYoND09PWMudGFnKXtpZihudWxsIT09Yy5jaGlsZCl7ZT1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Y9ITA7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9fWVsc2UgaWYoYmooYSxjKSxudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm47ND09PWMudGFnJiYoZD0hMSl9Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319XG5mdW5jdGlvbiBpaihhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmNhc2UgMjI6dmFyIGM9Yi51cGRhdGVRdWV1ZTtjPW51bGwhPT1jP2MubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1jKXt2YXIgZD1jPWMubmV4dDtkbyAzPT09KGQudGFnJjMpJiYoYT1kLmRlc3Ryb3ksZC5kZXN0cm95PXZvaWQgMCx2b2lkIDAhPT1hJiZhKCkpLGQ9ZC5uZXh0O3doaWxlKGQhPT1jKX1yZXR1cm47Y2FzZSAxOnJldHVybjtjYXNlIDU6Yz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXtkPWIubWVtb2l6ZWRQcm9wczt2YXIgZT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDthPWIudHlwZTt2YXIgZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtpZihudWxsIT09Zil7Y1t4Zl09ZDtcImlucHV0XCI9PT1hJiZcInJhZGlvXCI9PT1kLnR5cGUmJm51bGwhPWQubmFtZSYmJGEoYyxkKTt3YihhLGUpO2I9d2IoYSxkKTtmb3IoZT0wO2U8Zi5sZW5ndGg7ZSs9XG4yKXt2YXIgZz1mW2VdLGg9ZltlKzFdO1wic3R5bGVcIj09PWc/dGIoYyxoKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nP29iKGMsaCk6XCJjaGlsZHJlblwiPT09Zz9wYihjLGgpOnFhKGMsZyxoLGIpfXN3aXRjaChhKXtjYXNlIFwiaW5wdXRcIjphYihjLGQpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGMsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmE9Yy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlLGMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWQubXVsdGlwbGUsZj1kLnZhbHVlLG51bGwhPWY/ZmIoYywhIWQubXVsdGlwbGUsZiwhMSk6YSE9PSEhZC5tdWx0aXBsZSYmKG51bGwhPWQuZGVmYXVsdFZhbHVlP2ZiKGMsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTpmYihjLCEhZC5tdWx0aXBsZSxkLm11bHRpcGxlP1tdOlwiXCIsITEpKX19fXJldHVybjtjYXNlIDY6aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTYyKSk7Yi5zdGF0ZU5vZGUubm9kZVZhbHVlPVxuYi5tZW1vaXplZFByb3BzO3JldHVybjtjYXNlIDM6Yz1iLnN0YXRlTm9kZTtjLmh5ZHJhdGUmJihjLmh5ZHJhdGU9ITEsQ2MoYy5jb250YWluZXJJbmZvKSk7cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSYmKGpqPU8oKSxhaihiLmNoaWxkLCEwKSk7a2ooYik7cmV0dXJuO2Nhc2UgMTk6a2ooYik7cmV0dXJuO2Nhc2UgMTc6cmV0dXJuO2Nhc2UgMjM6Y2FzZSAyNDphaihiLG51bGwhPT1iLm1lbW9pemVkU3RhdGUpO3JldHVybn10aHJvdyBFcnJvcih5KDE2MykpO31mdW5jdGlvbiBraihhKXt2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbD09PWMmJihjPWEuc3RhdGVOb2RlPW5ldyBVaSk7Yi5mb3JFYWNoKGZ1bmN0aW9uKGIpe3ZhciBkPWxqLmJpbmQobnVsbCxhLGIpO2MuaGFzKGIpfHwoYy5hZGQoYiksYi50aGVuKGQsZCkpfSl9fVxuZnVuY3Rpb24gbWooYSxiKXtyZXR1cm4gbnVsbCE9PWEmJihhPWEubWVtb2l6ZWRTdGF0ZSxudWxsPT09YXx8bnVsbCE9PWEuZGVoeWRyYXRlZCk/KGI9Yi5tZW1vaXplZFN0YXRlLG51bGwhPT1iJiZudWxsPT09Yi5kZWh5ZHJhdGVkKTohMX12YXIgbmo9TWF0aC5jZWlsLG9qPXJhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIscGo9cmEuUmVhY3RDdXJyZW50T3duZXIsWD0wLFU9bnVsbCxZPW51bGwsVz0wLHFqPTAscmo9QmYoMCksVj0wLHNqPW51bGwsdGo9MCxEZz0wLEhpPTAsdWo9MCx2aj1udWxsLGpqPTAsSmk9SW5maW5pdHk7ZnVuY3Rpb24gd2ooKXtKaT1PKCkrNTAwfXZhciBaPW51bGwsUWk9ITEsUmk9bnVsbCxUaT1udWxsLHhqPSExLHlqPW51bGwsemo9OTAsQWo9W10sQmo9W10sQ2o9bnVsbCxEaj0wLEVqPW51bGwsRmo9LTEsR2o9MCxIaj0wLElqPW51bGwsSmo9ITE7ZnVuY3Rpb24gSGcoKXtyZXR1cm4gMCE9PShYJjQ4KT9PKCk6LTEhPT1Gaj9GajpGaj1PKCl9XG5mdW5jdGlvbiBJZyhhKXthPWEubW9kZTtpZigwPT09KGEmMikpcmV0dXJuIDE7aWYoMD09PShhJjQpKXJldHVybiA5OT09PWVnKCk/MToyOzA9PT1HaiYmKEdqPXRqKTtpZigwIT09a2cudHJhbnNpdGlvbil7MCE9PUhqJiYoSGo9bnVsbCE9PXZqP3ZqLnBlbmRpbmdMYW5lczowKTthPUdqO3ZhciBiPTQxODYxMTImfkhqO2ImPS1iOzA9PT1iJiYoYT00MTg2MTEyJn5hLGI9YSYtYSwwPT09YiYmKGI9ODE5MikpO3JldHVybiBifWE9ZWcoKTswIT09KFgmNCkmJjk4PT09YT9hPVhjKDEyLEdqKTooYT1TYyhhKSxhPVhjKGEsR2opKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIEpnKGEsYixjKXtpZig1MDxEail0aHJvdyBEaj0wLEVqPW51bGwsRXJyb3IoeSgxODUpKTthPUtqKGEsYik7aWYobnVsbD09PWEpcmV0dXJuIG51bGw7JGMoYSxiLGMpO2E9PT1VJiYoSGl8PWIsND09PVYmJklpKGEsVykpO3ZhciBkPWVnKCk7MT09PWI/MCE9PShYJjgpJiYwPT09KFgmNDgpP0xqKGEpOihNaihhLGMpLDA9PT1YJiYod2ooKSxpZygpKSk6KDA9PT0oWCY0KXx8OTghPT1kJiY5OSE9PWR8fChudWxsPT09Q2o/Q2o9bmV3IFNldChbYV0pOkNqLmFkZChhKSksTWooYSxjKSk7dmo9YX1mdW5jdGlvbiBLaihhLGIpe2EubGFuZXN8PWI7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJihjLmxhbmVzfD1iKTtjPWE7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWE7KWEuY2hpbGRMYW5lc3w9YixjPWEuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYy5jaGlsZExhbmVzfD1iKSxjPWEsYT1hLnJldHVybjtyZXR1cm4gMz09PWMudGFnP2Muc3RhdGVOb2RlOm51bGx9XG5mdW5jdGlvbiBNaihhLGIpe2Zvcih2YXIgYz1hLmNhbGxiYWNrTm9kZSxkPWEuc3VzcGVuZGVkTGFuZXMsZT1hLnBpbmdlZExhbmVzLGY9YS5leHBpcmF0aW9uVGltZXMsZz1hLnBlbmRpbmdMYW5lczswPGc7KXt2YXIgaD0zMS1WYyhnKSxrPTE8PGgsbD1mW2hdO2lmKC0xPT09bCl7aWYoMD09PShrJmQpfHwwIT09KGsmZSkpe2w9YjtSYyhrKTt2YXIgbj1GO2ZbaF09MTA8PW4/bCsyNTA6Njw9bj9sKzVFMzotMX19ZWxzZSBsPD1iJiYoYS5leHBpcmVkTGFuZXN8PWspO2cmPX5rfWQ9VWMoYSxhPT09VT9XOjApO2I9RjtpZigwPT09ZCludWxsIT09YyYmKGMhPT1aZiYmUGYoYyksYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrUHJpb3JpdHk9MCk7ZWxzZXtpZihudWxsIT09Yyl7aWYoYS5jYWxsYmFja1ByaW9yaXR5PT09YilyZXR1cm47YyE9PVpmJiZQZihjKX0xNT09PWI/KGM9TGouYmluZChudWxsLGEpLG51bGw9PT1hZz8oYWc9W2NdLGJnPU9mKFVmLGpnKSk6YWcucHVzaChjKSxcbmM9WmYpOjE0PT09Yj9jPWhnKDk5LExqLmJpbmQobnVsbCxhKSk6KGM9VGMoYiksYz1oZyhjLE5qLmJpbmQobnVsbCxhKSkpO2EuY2FsbGJhY2tQcmlvcml0eT1iO2EuY2FsbGJhY2tOb2RlPWN9fVxuZnVuY3Rpb24gTmooYSl7Rmo9LTE7SGo9R2o9MDtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzI3KSk7dmFyIGI9YS5jYWxsYmFja05vZGU7aWYoT2ooKSYmYS5jYWxsYmFja05vZGUhPT1iKXJldHVybiBudWxsO3ZhciBjPVVjKGEsYT09PVU/VzowKTtpZigwPT09YylyZXR1cm4gbnVsbDt2YXIgZD1jO3ZhciBlPVg7WHw9MTY7dmFyIGY9UGooKTtpZihVIT09YXx8VyE9PWQpd2ooKSxRaihhLGQpO2RvIHRyeXtSaigpO2JyZWFrfWNhdGNoKGgpe1NqKGEsaCl9d2hpbGUoMSk7cWcoKTtvai5jdXJyZW50PWY7WD1lO251bGwhPT1ZP2Q9MDooVT1udWxsLFc9MCxkPVYpO2lmKDAhPT0odGomSGkpKVFqKGEsMCk7ZWxzZSBpZigwIT09ZCl7Mj09PWQmJihYfD02NCxhLmh5ZHJhdGUmJihhLmh5ZHJhdGU9ITEscWYoYS5jb250YWluZXJJbmZvKSksYz1XYyhhKSwwIT09YyYmKGQ9VGooYSxjKSkpO2lmKDE9PT1kKXRocm93IGI9c2osUWooYSwwKSxJaShhLGMpLE1qKGEsTygpKSxiO2EuZmluaXNoZWRXb3JrPVxuYS5jdXJyZW50LmFsdGVybmF0ZTthLmZpbmlzaGVkTGFuZXM9Yztzd2l0Y2goZCl7Y2FzZSAwOmNhc2UgMTp0aHJvdyBFcnJvcih5KDM0NSkpO2Nhc2UgMjpVaihhKTticmVhaztjYXNlIDM6SWkoYSxjKTtpZigoYyY2MjkxNDU2MCk9PT1jJiYoZD1qais1MDAtTygpLDEwPGQpKXtpZigwIT09VWMoYSwwKSlicmVhaztlPWEuc3VzcGVuZGVkTGFuZXM7aWYoKGUmYykhPT1jKXtIZygpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmZTticmVha31hLnRpbWVvdXRIYW5kbGU9b2YoVWouYmluZChudWxsLGEpLGQpO2JyZWFrfVVqKGEpO2JyZWFrO2Nhc2UgNDpJaShhLGMpO2lmKChjJjQxODYxMTIpPT09YylicmVhaztkPWEuZXZlbnRUaW1lcztmb3IoZT0tMTswPGM7KXt2YXIgZz0zMS1WYyhjKTtmPTE8PGc7Zz1kW2ddO2c+ZSYmKGU9Zyk7YyY9fmZ9Yz1lO2M9TygpLWM7Yz0oMTIwPmM/MTIwOjQ4MD5jPzQ4MDoxMDgwPmM/MTA4MDoxOTIwPmM/MTkyMDozRTM+Yz8zRTM6NDMyMD5cbmM/NDMyMDoxOTYwKm5qKGMvMTk2MCkpLWM7aWYoMTA8Yyl7YS50aW1lb3V0SGFuZGxlPW9mKFVqLmJpbmQobnVsbCxhKSxjKTticmVha31VaihhKTticmVhaztjYXNlIDU6VWooYSk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDMyOSkpO319TWooYSxPKCkpO3JldHVybiBhLmNhbGxiYWNrTm9kZT09PWI/TmouYmluZChudWxsLGEpOm51bGx9ZnVuY3Rpb24gSWkoYSxiKXtiJj1+dWo7YiY9fkhpO2Euc3VzcGVuZGVkTGFuZXN8PWI7YS5waW5nZWRMYW5lcyY9fmI7Zm9yKGE9YS5leHBpcmF0aW9uVGltZXM7MDxiOyl7dmFyIGM9MzEtVmMoYiksZD0xPDxjO2FbY109LTE7YiY9fmR9fVxuZnVuY3Rpb24gTGooYSl7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMyNykpO09qKCk7aWYoYT09PVUmJjAhPT0oYS5leHBpcmVkTGFuZXMmVykpe3ZhciBiPVc7dmFyIGM9VGooYSxiKTswIT09KHRqJkhpKSYmKGI9VWMoYSxiKSxjPVRqKGEsYikpfWVsc2UgYj1VYyhhLDApLGM9VGooYSxiKTswIT09YS50YWcmJjI9PT1jJiYoWHw9NjQsYS5oeWRyYXRlJiYoYS5oeWRyYXRlPSExLHFmKGEuY29udGFpbmVySW5mbykpLGI9V2MoYSksMCE9PWImJihjPVRqKGEsYikpKTtpZigxPT09Yyl0aHJvdyBjPXNqLFFqKGEsMCksSWkoYSxiKSxNaihhLE8oKSksYzthLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRMYW5lcz1iO1VqKGEpO01qKGEsTygpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFZqKCl7aWYobnVsbCE9PUNqKXt2YXIgYT1DajtDaj1udWxsO2EuZm9yRWFjaChmdW5jdGlvbihhKXthLmV4cGlyZWRMYW5lc3w9MjQmYS5wZW5kaW5nTGFuZXM7TWooYSxPKCkpfSl9aWcoKX1mdW5jdGlvbiBXaihhLGIpe3ZhciBjPVg7WHw9MTt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtYPWMsMD09PVgmJih3aigpLGlnKCkpfX1mdW5jdGlvbiBYaihhLGIpe3ZhciBjPVg7WCY9LTI7WHw9ODt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtYPWMsMD09PVgmJih3aigpLGlnKCkpfX1mdW5jdGlvbiBuaShhLGIpe0kocmoscWopO3FqfD1iO3RqfD1ifWZ1bmN0aW9uIEtpKCl7cWo9cmouY3VycmVudDtIKHJqKX1cbmZ1bmN0aW9uIFFqKGEsYil7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDt2YXIgYz1hLnRpbWVvdXRIYW5kbGU7LTEhPT1jJiYoYS50aW1lb3V0SGFuZGxlPS0xLHBmKGMpKTtpZihudWxsIT09WSlmb3IoYz1ZLnJldHVybjtudWxsIT09Yzspe3ZhciBkPWM7c3dpdGNoKGQudGFnKXtjYXNlIDE6ZD1kLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWQmJnZvaWQgMCE9PWQmJkdmKCk7YnJlYWs7Y2FzZSAzOmZoKCk7SChOKTtIKE0pO3VoKCk7YnJlYWs7Y2FzZSA1OmhoKGQpO2JyZWFrO2Nhc2UgNDpmaCgpO2JyZWFrO2Nhc2UgMTM6SChQKTticmVhaztjYXNlIDE5OkgoUCk7YnJlYWs7Y2FzZSAxMDpyZyhkKTticmVhaztjYXNlIDIzOmNhc2UgMjQ6S2koKX1jPWMucmV0dXJufVU9YTtZPVRnKGEuY3VycmVudCxudWxsKTtXPXFqPXRqPWI7Vj0wO3NqPW51bGw7dWo9SGk9RGc9MH1cbmZ1bmN0aW9uIFNqKGEsYil7ZG97dmFyIGM9WTt0cnl7cWcoKTt2aC5jdXJyZW50PUdoO2lmKHloKXtmb3IodmFyIGQ9Ui5tZW1vaXplZFN0YXRlO251bGwhPT1kOyl7dmFyIGU9ZC5xdWV1ZTtudWxsIT09ZSYmKGUucGVuZGluZz1udWxsKTtkPWQubmV4dH15aD0hMX14aD0wO1Q9Uz1SPW51bGw7emg9ITE7cGouY3VycmVudD1udWxsO2lmKG51bGw9PT1jfHxudWxsPT09Yy5yZXR1cm4pe1Y9MTtzaj1iO1k9bnVsbDticmVha31hOnt2YXIgZj1hLGc9Yy5yZXR1cm4saD1jLGs9YjtiPVc7aC5mbGFnc3w9MjA0ODtoLmZpcnN0RWZmZWN0PWgubGFzdEVmZmVjdD1udWxsO2lmKG51bGwhPT1rJiZcIm9iamVjdFwiPT09dHlwZW9mIGsmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBrLnRoZW4pe3ZhciBsPWs7aWYoMD09PShoLm1vZGUmMikpe3ZhciBuPWguYWx0ZXJuYXRlO24/KGgudXBkYXRlUXVldWU9bi51cGRhdGVRdWV1ZSxoLm1lbW9pemVkU3RhdGU9bi5tZW1vaXplZFN0YXRlLGgubGFuZXM9bi5sYW5lcyk6XG4oaC51cGRhdGVRdWV1ZT1udWxsLGgubWVtb2l6ZWRTdGF0ZT1udWxsKX12YXIgQT0wIT09KFAuY3VycmVudCYxKSxwPWc7ZG97dmFyIEM7aWYoQz0xMz09PXAudGFnKXt2YXIgeD1wLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PXgpQz1udWxsIT09eC5kZWh5ZHJhdGVkPyEwOiExO2Vsc2V7dmFyIHc9cC5tZW1vaXplZFByb3BzO0M9dm9pZCAwPT09dy5mYWxsYmFjaz8hMTohMCE9PXcudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2s/ITA6QT8hMTohMH19aWYoQyl7dmFyIHo9cC51cGRhdGVRdWV1ZTtpZihudWxsPT09eil7dmFyIHU9bmV3IFNldDt1LmFkZChsKTtwLnVwZGF0ZVF1ZXVlPXV9ZWxzZSB6LmFkZChsKTtpZigwPT09KHAubW9kZSYyKSl7cC5mbGFnc3w9NjQ7aC5mbGFnc3w9MTYzODQ7aC5mbGFncyY9LTI5ODE7aWYoMT09PWgudGFnKWlmKG51bGw9PT1oLmFsdGVybmF0ZSloLnRhZz0xNztlbHNle3ZhciB0PXpnKC0xLDEpO3QudGFnPTI7QWcoaCx0KX1oLmxhbmVzfD0xO2JyZWFrIGF9az1cbnZvaWQgMDtoPWI7dmFyIHE9Zi5waW5nQ2FjaGU7bnVsbD09PXE/KHE9Zi5waW5nQ2FjaGU9bmV3IE9pLGs9bmV3IFNldCxxLnNldChsLGspKTooaz1xLmdldChsKSx2b2lkIDA9PT1rJiYoaz1uZXcgU2V0LHEuc2V0KGwsaykpKTtpZighay5oYXMoaCkpe2suYWRkKGgpO3ZhciB2PVlqLmJpbmQobnVsbCxmLGwsaCk7bC50aGVuKHYsdil9cC5mbGFnc3w9NDA5NjtwLmxhbmVzPWI7YnJlYWsgYX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKTtrPUVycm9yKChSYShoLnR5cGUpfHxcIkEgUmVhY3QgY29tcG9uZW50XCIpK1wiIHN1c3BlbmRlZCB3aGlsZSByZW5kZXJpbmcsIGJ1dCBubyBmYWxsYmFjayBVSSB3YXMgc3BlY2lmaWVkLlxcblxcbkFkZCBhIDxTdXNwZW5zZSBmYWxsYmFjaz0uLi4+IGNvbXBvbmVudCBoaWdoZXIgaW4gdGhlIHRyZWUgdG8gcHJvdmlkZSBhIGxvYWRpbmcgaW5kaWNhdG9yIG9yIHBsYWNlaG9sZGVyIHRvIGRpc3BsYXkuXCIpfTUhPT1WJiYoVj0yKTtrPU1pKGssaCk7cD1cbmc7ZG97c3dpdGNoKHAudGFnKXtjYXNlIDM6Zj1rO3AuZmxhZ3N8PTQwOTY7YiY9LWI7cC5sYW5lc3w9Yjt2YXIgSj1QaShwLGYsYik7QmcocCxKKTticmVhayBhO2Nhc2UgMTpmPWs7dmFyIEs9cC50eXBlLFE9cC5zdGF0ZU5vZGU7aWYoMD09PShwLmZsYWdzJjY0KSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBLLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8bnVsbCE9PVEmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBRLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVRpfHwhVGkuaGFzKFEpKSkpe3AuZmxhZ3N8PTQwOTY7YiY9LWI7cC5sYW5lc3w9Yjt2YXIgTD1TaShwLGYsYik7QmcocCxMKTticmVhayBhfX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKX1aaihjKX1jYXRjaCh2YSl7Yj12YTtZPT09YyYmbnVsbCE9PWMmJihZPWM9Yy5yZXR1cm4pO2NvbnRpbnVlfWJyZWFrfXdoaWxlKDEpfVxuZnVuY3Rpb24gUGooKXt2YXIgYT1vai5jdXJyZW50O29qLmN1cnJlbnQ9R2g7cmV0dXJuIG51bGw9PT1hP0doOmF9ZnVuY3Rpb24gVGooYSxiKXt2YXIgYz1YO1h8PTE2O3ZhciBkPVBqKCk7VT09PWEmJlc9PT1ifHxRaihhLGIpO2RvIHRyeXthaygpO2JyZWFrfWNhdGNoKGUpe1NqKGEsZSl9d2hpbGUoMSk7cWcoKTtYPWM7b2ouY3VycmVudD1kO2lmKG51bGwhPT1ZKXRocm93IEVycm9yKHkoMjYxKSk7VT1udWxsO1c9MDtyZXR1cm4gVn1mdW5jdGlvbiBhaygpe2Zvcig7bnVsbCE9PVk7KWJrKFkpfWZ1bmN0aW9uIFJqKCl7Zm9yKDtudWxsIT09WSYmIVFmKCk7KWJrKFkpfWZ1bmN0aW9uIGJrKGEpe3ZhciBiPWNrKGEuYWx0ZXJuYXRlLGEscWopO2EubWVtb2l6ZWRQcm9wcz1hLnBlbmRpbmdQcm9wcztudWxsPT09Yj9aaihhKTpZPWI7cGouY3VycmVudD1udWxsfVxuZnVuY3Rpb24gWmooYSl7dmFyIGI9YTtkb3t2YXIgYz1iLmFsdGVybmF0ZTthPWIucmV0dXJuO2lmKDA9PT0oYi5mbGFncyYyMDQ4KSl7Yz1HaShjLGIscWopO2lmKG51bGwhPT1jKXtZPWM7cmV0dXJufWM9YjtpZigyNCE9PWMudGFnJiYyMyE9PWMudGFnfHxudWxsPT09Yy5tZW1vaXplZFN0YXRlfHwwIT09KHFqJjEwNzM3NDE4MjQpfHwwPT09KGMubW9kZSY0KSl7Zm9yKHZhciBkPTAsZT1jLmNoaWxkO251bGwhPT1lOylkfD1lLmxhbmVzfGUuY2hpbGRMYW5lcyxlPWUuc2libGluZztjLmNoaWxkTGFuZXM9ZH1udWxsIT09YSYmMD09PShhLmZsYWdzJjIwNDgpJiYobnVsbD09PWEuZmlyc3RFZmZlY3QmJihhLmZpcnN0RWZmZWN0PWIuZmlyc3RFZmZlY3QpLG51bGwhPT1iLmxhc3RFZmZlY3QmJihudWxsIT09YS5sYXN0RWZmZWN0JiYoYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9Yi5maXJzdEVmZmVjdCksYS5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdCksMTxiLmZsYWdzJiYobnVsbCE9PVxuYS5sYXN0RWZmZWN0P2EubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWI6YS5maXJzdEVmZmVjdD1iLGEubGFzdEVmZmVjdD1iKSl9ZWxzZXtjPUxpKGIpO2lmKG51bGwhPT1jKXtjLmZsYWdzJj0yMDQ3O1k9YztyZXR1cm59bnVsbCE9PWEmJihhLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1udWxsLGEuZmxhZ3N8PTIwNDgpfWI9Yi5zaWJsaW5nO2lmKG51bGwhPT1iKXtZPWI7cmV0dXJufVk9Yj1hfXdoaWxlKG51bGwhPT1iKTswPT09ViYmKFY9NSl9ZnVuY3Rpb24gVWooYSl7dmFyIGI9ZWcoKTtnZyg5OSxkay5iaW5kKG51bGwsYSxiKSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBkayhhLGIpe2RvIE9qKCk7d2hpbGUobnVsbCE9PXlqKTtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzI3KSk7dmFyIGM9YS5maW5pc2hlZFdvcms7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDtpZihjPT09YS5jdXJyZW50KXRocm93IEVycm9yKHkoMTc3KSk7YS5jYWxsYmFja05vZGU9bnVsbDt2YXIgZD1jLmxhbmVzfGMuY2hpbGRMYW5lcyxlPWQsZj1hLnBlbmRpbmdMYW5lcyZ+ZTthLnBlbmRpbmdMYW5lcz1lO2Euc3VzcGVuZGVkTGFuZXM9MDthLnBpbmdlZExhbmVzPTA7YS5leHBpcmVkTGFuZXMmPWU7YS5tdXRhYmxlUmVhZExhbmVzJj1lO2EuZW50YW5nbGVkTGFuZXMmPWU7ZT1hLmVudGFuZ2xlbWVudHM7Zm9yKHZhciBnPWEuZXZlbnRUaW1lcyxoPWEuZXhwaXJhdGlvblRpbWVzOzA8Zjspe3ZhciBrPTMxLVZjKGYpLGw9MTw8aztlW2tdPTA7Z1trXT0tMTtoW2tdPS0xO2YmPX5sfW51bGwhPT1cbkNqJiYwPT09KGQmMjQpJiZDai5oYXMoYSkmJkNqLmRlbGV0ZShhKTthPT09VSYmKFk9VT1udWxsLFc9MCk7MTxjLmZsYWdzP251bGwhPT1jLmxhc3RFZmZlY3Q/KGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsZD1jLmZpcnN0RWZmZWN0KTpkPWM6ZD1jLmZpcnN0RWZmZWN0O2lmKG51bGwhPT1kKXtlPVg7WHw9MzI7cGouY3VycmVudD1udWxsO2tmPWZkO2c9TmUoKTtpZihPZShnKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gZyloPXtzdGFydDpnLnNlbGVjdGlvblN0YXJ0LGVuZDpnLnNlbGVjdGlvbkVuZH07ZWxzZSBhOmlmKGg9KGg9Zy5vd25lckRvY3VtZW50KSYmaC5kZWZhdWx0Vmlld3x8d2luZG93LChsPWguZ2V0U2VsZWN0aW9uJiZoLmdldFNlbGVjdGlvbigpKSYmMCE9PWwucmFuZ2VDb3VudCl7aD1sLmFuY2hvck5vZGU7Zj1sLmFuY2hvck9mZnNldDtrPWwuZm9jdXNOb2RlO2w9bC5mb2N1c09mZnNldDt0cnl7aC5ub2RlVHlwZSxrLm5vZGVUeXBlfWNhdGNoKHZhKXtoPW51bGw7XG5icmVhayBhfXZhciBuPTAsQT0tMSxwPS0xLEM9MCx4PTAsdz1nLHo9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB1Ozspe3chPT1ofHwwIT09ZiYmMyE9PXcubm9kZVR5cGV8fChBPW4rZik7dyE9PWt8fDAhPT1sJiYzIT09dy5ub2RlVHlwZXx8KHA9bitsKTszPT09dy5ub2RlVHlwZSYmKG4rPXcubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PSh1PXcuZmlyc3RDaGlsZCkpYnJlYWs7ej13O3c9dX1mb3IoOzspe2lmKHc9PT1nKWJyZWFrIGI7ej09PWgmJisrQz09PWYmJihBPW4pO3o9PT1rJiYrK3g9PT1sJiYocD1uKTtpZihudWxsIT09KHU9dy5uZXh0U2libGluZykpYnJlYWs7dz16O3o9dy5wYXJlbnROb2RlfXc9dX1oPS0xPT09QXx8LTE9PT1wP251bGw6e3N0YXJ0OkEsZW5kOnB9fWVsc2UgaD1udWxsO2g9aHx8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgaD1udWxsO2xmPXtmb2N1c2VkRWxlbTpnLHNlbGVjdGlvblJhbmdlOmh9O2ZkPSExO0lqPW51bGw7Smo9ITE7Wj1kO2RvIHRyeXtlaygpfWNhdGNoKHZhKXtpZihudWxsPT09XG5aKXRocm93IEVycm9yKHkoMzMwKSk7V2koWix2YSk7Wj1aLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVopO0lqPW51bGw7Wj1kO2RvIHRyeXtmb3IoZz1hO251bGwhPT1aOyl7dmFyIHQ9Wi5mbGFnczt0JjE2JiZwYihaLnN0YXRlTm9kZSxcIlwiKTtpZih0JjEyOCl7dmFyIHE9Wi5hbHRlcm5hdGU7aWYobnVsbCE9PXEpe3ZhciB2PXEucmVmO251bGwhPT12JiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHY/dihudWxsKTp2LmN1cnJlbnQ9bnVsbCl9fXN3aXRjaCh0JjEwMzgpe2Nhc2UgMjpmaihaKTtaLmZsYWdzJj0tMzticmVhaztjYXNlIDY6ZmooWik7Wi5mbGFncyY9LTM7aWooWi5hbHRlcm5hdGUsWik7YnJlYWs7Y2FzZSAxMDI0OlouZmxhZ3MmPS0xMDI1O2JyZWFrO2Nhc2UgMTAyODpaLmZsYWdzJj0tMTAyNTtpaihaLmFsdGVybmF0ZSxaKTticmVhaztjYXNlIDQ6aWooWi5hbHRlcm5hdGUsWik7YnJlYWs7Y2FzZSA4Omg9WjtjaihnLGgpO3ZhciBKPWguYWx0ZXJuYXRlO2RqKGgpO251bGwhPT1cbkomJmRqKEopfVo9Wi5uZXh0RWZmZWN0fX1jYXRjaCh2YSl7aWYobnVsbD09PVopdGhyb3cgRXJyb3IoeSgzMzApKTtXaShaLHZhKTtaPVoubmV4dEVmZmVjdH13aGlsZShudWxsIT09Wik7dj1sZjtxPU5lKCk7dD12LmZvY3VzZWRFbGVtO2c9di5zZWxlY3Rpb25SYW5nZTtpZihxIT09dCYmdCYmdC5vd25lckRvY3VtZW50JiZNZSh0Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHQpKXtudWxsIT09ZyYmT2UodCkmJihxPWcuc3RhcnQsdj1nLmVuZCx2b2lkIDA9PT12JiYodj1xKSxcInNlbGVjdGlvblN0YXJ0XCJpbiB0Pyh0LnNlbGVjdGlvblN0YXJ0PXEsdC5zZWxlY3Rpb25FbmQ9TWF0aC5taW4odix0LnZhbHVlLmxlbmd0aCkpOih2PShxPXQub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZxLmRlZmF1bHRWaWV3fHx3aW5kb3csdi5nZXRTZWxlY3Rpb24mJih2PXYuZ2V0U2VsZWN0aW9uKCksaD10LnRleHRDb250ZW50Lmxlbmd0aCxKPU1hdGgubWluKGcuc3RhcnQsaCksZz12b2lkIDA9PT1cbmcuZW5kP0o6TWF0aC5taW4oZy5lbmQsaCksIXYuZXh0ZW5kJiZKPmcmJihoPWcsZz1KLEo9aCksaD1MZSh0LEopLGY9TGUodCxnKSxoJiZmJiYoMSE9PXYucmFuZ2VDb3VudHx8di5hbmNob3JOb2RlIT09aC5ub2RlfHx2LmFuY2hvck9mZnNldCE9PWgub2Zmc2V0fHx2LmZvY3VzTm9kZSE9PWYubm9kZXx8di5mb2N1c09mZnNldCE9PWYub2Zmc2V0KSYmKHE9cS5jcmVhdGVSYW5nZSgpLHEuc2V0U3RhcnQoaC5ub2RlLGgub2Zmc2V0KSx2LnJlbW92ZUFsbFJhbmdlcygpLEo+Zz8odi5hZGRSYW5nZShxKSx2LmV4dGVuZChmLm5vZGUsZi5vZmZzZXQpKToocS5zZXRFbmQoZi5ub2RlLGYub2Zmc2V0KSx2LmFkZFJhbmdlKHEpKSkpKSk7cT1bXTtmb3Iodj10O3Y9di5wYXJlbnROb2RlOykxPT09di5ub2RlVHlwZSYmcS5wdXNoKHtlbGVtZW50OnYsbGVmdDp2LnNjcm9sbExlZnQsdG9wOnYuc2Nyb2xsVG9wfSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIHQuZm9jdXMmJnQuZm9jdXMoKTtmb3IodD1cbjA7dDxxLmxlbmd0aDt0Kyspdj1xW3RdLHYuZWxlbWVudC5zY3JvbGxMZWZ0PXYubGVmdCx2LmVsZW1lbnQuc2Nyb2xsVG9wPXYudG9wfWZkPSEha2Y7bGY9a2Y9bnVsbDthLmN1cnJlbnQ9YztaPWQ7ZG8gdHJ5e2Zvcih0PWE7bnVsbCE9PVo7KXt2YXIgSz1aLmZsYWdzO0smMzYmJllpKHQsWi5hbHRlcm5hdGUsWik7aWYoSyYxMjgpe3E9dm9pZCAwO3ZhciBRPVoucmVmO2lmKG51bGwhPT1RKXt2YXIgTD1aLnN0YXRlTm9kZTtzd2l0Y2goWi50YWcpe2Nhc2UgNTpxPUw7YnJlYWs7ZGVmYXVsdDpxPUx9XCJmdW5jdGlvblwiPT09dHlwZW9mIFE/UShxKTpRLmN1cnJlbnQ9cX19Wj1aLm5leHRFZmZlY3R9fWNhdGNoKHZhKXtpZihudWxsPT09Wil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKFosdmEpO1o9Wi5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1aKTtaPW51bGw7JGYoKTtYPWV9ZWxzZSBhLmN1cnJlbnQ9YztpZih4ail4aj0hMSx5aj1hLHpqPWI7ZWxzZSBmb3IoWj1kO251bGwhPT1aOyliPVxuWi5uZXh0RWZmZWN0LFoubmV4dEVmZmVjdD1udWxsLFouZmxhZ3MmOCYmKEs9WixLLnNpYmxpbmc9bnVsbCxLLnN0YXRlTm9kZT1udWxsKSxaPWI7ZD1hLnBlbmRpbmdMYW5lczswPT09ZCYmKFRpPW51bGwpOzE9PT1kP2E9PT1Faj9EaisrOihEaj0wLEVqPWEpOkRqPTA7Yz1jLnN0YXRlTm9kZTtpZihNZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIE1mLm9uQ29tbWl0RmliZXJSb290KXRyeXtNZi5vbkNvbW1pdEZpYmVyUm9vdChMZixjLHZvaWQgMCw2ND09PShjLmN1cnJlbnQuZmxhZ3MmNjQpKX1jYXRjaCh2YSl7fU1qKGEsTygpKTtpZihRaSl0aHJvdyBRaT0hMSxhPVJpLFJpPW51bGwsYTtpZigwIT09KFgmOCkpcmV0dXJuIG51bGw7aWcoKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGVrKCl7Zm9yKDtudWxsIT09Wjspe3ZhciBhPVouYWx0ZXJuYXRlO0pqfHxudWxsPT09SWp8fCgwIT09KFouZmxhZ3MmOCk/ZGMoWixJaikmJihKaj0hMCk6MTM9PT1aLnRhZyYmbWooYSxaKSYmZGMoWixJaikmJihKaj0hMCkpO3ZhciBiPVouZmxhZ3M7MCE9PShiJjI1NikmJlhpKGEsWik7MD09PShiJjUxMil8fHhqfHwoeGo9ITAsaGcoOTcsZnVuY3Rpb24oKXtPaigpO3JldHVybiBudWxsfSkpO1o9Wi5uZXh0RWZmZWN0fX1mdW5jdGlvbiBPaigpe2lmKDkwIT09emope3ZhciBhPTk3PHpqPzk3OnpqO3pqPTkwO3JldHVybiBnZyhhLGZrKX1yZXR1cm4hMX1mdW5jdGlvbiAkaShhLGIpe0FqLnB1c2goYixhKTt4anx8KHhqPSEwLGhnKDk3LGZ1bmN0aW9uKCl7T2ooKTtyZXR1cm4gbnVsbH0pKX1mdW5jdGlvbiBaaShhLGIpe0JqLnB1c2goYixhKTt4anx8KHhqPSEwLGhnKDk3LGZ1bmN0aW9uKCl7T2ooKTtyZXR1cm4gbnVsbH0pKX1cbmZ1bmN0aW9uIGZrKCl7aWYobnVsbD09PXlqKXJldHVybiExO3ZhciBhPXlqO3lqPW51bGw7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMzMSkpO3ZhciBiPVg7WHw9MzI7dmFyIGM9Qmo7Qmo9W107Zm9yKHZhciBkPTA7ZDxjLmxlbmd0aDtkKz0yKXt2YXIgZT1jW2RdLGY9Y1tkKzFdLGc9ZS5kZXN0cm95O2UuZGVzdHJveT12b2lkIDA7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcpdHJ5e2coKX1jYXRjaChrKXtpZihudWxsPT09Zil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKGYsayl9fWM9QWo7QWo9W107Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrPTIpe2U9Y1tkXTtmPWNbZCsxXTt0cnl7dmFyIGg9ZS5jcmVhdGU7ZS5kZXN0cm95PWgoKX1jYXRjaChrKXtpZihudWxsPT09Zil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKGYsayl9fWZvcihoPWEuY3VycmVudC5maXJzdEVmZmVjdDtudWxsIT09aDspYT1oLm5leHRFZmZlY3QsaC5uZXh0RWZmZWN0PW51bGwsaC5mbGFncyY4JiYoaC5zaWJsaW5nPVxubnVsbCxoLnN0YXRlTm9kZT1udWxsKSxoPWE7WD1iO2lnKCk7cmV0dXJuITB9ZnVuY3Rpb24gZ2soYSxiLGMpe2I9TWkoYyxiKTtiPVBpKGEsYiwxKTtBZyhhLGIpO2I9SGcoKTthPUtqKGEsMSk7bnVsbCE9PWEmJigkYyhhLDEsYiksTWooYSxiKSl9XG5mdW5jdGlvbiBXaShhLGIpe2lmKDM9PT1hLnRhZylnayhhLGEsYik7ZWxzZSBmb3IodmFyIGM9YS5yZXR1cm47bnVsbCE9PWM7KXtpZigzPT09Yy50YWcpe2drKGMsYSxiKTticmVha31lbHNlIGlmKDE9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVRpfHwhVGkuaGFzKGQpKSl7YT1NaShiLGEpO3ZhciBlPVNpKGMsYSwxKTtBZyhjLGUpO2U9SGcoKTtjPUtqKGMsMSk7aWYobnVsbCE9PWMpJGMoYywxLGUpLE1qKGMsZSk7ZWxzZSBpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1UaXx8IVRpLmhhcyhkKSkpdHJ5e2QuY29tcG9uZW50RGlkQ2F0Y2goYixhKX1jYXRjaChmKXt9YnJlYWt9fWM9Yy5yZXR1cm59fVxuZnVuY3Rpb24gWWooYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO251bGwhPT1kJiZkLmRlbGV0ZShiKTtiPUhnKCk7YS5waW5nZWRMYW5lc3w9YS5zdXNwZW5kZWRMYW5lcyZjO1U9PT1hJiYoVyZjKT09PWMmJig0PT09Vnx8Mz09PVYmJihXJjYyOTE0NTYwKT09PVcmJjUwMD5PKCktamo/UWooYSwwKTp1anw9Yyk7TWooYSxiKX1mdW5jdGlvbiBsaihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO251bGwhPT1jJiZjLmRlbGV0ZShiKTtiPTA7MD09PWImJihiPWEubW9kZSwwPT09KGImMik/Yj0xOjA9PT0oYiY0KT9iPTk5PT09ZWcoKT8xOjI6KDA9PT1HaiYmKEdqPXRqKSxiPVljKDYyOTE0NTYwJn5HaiksMD09PWImJihiPTQxOTQzMDQpKSk7Yz1IZygpO2E9S2ooYSxiKTtudWxsIT09YSYmKCRjKGEsYixjKSxNaihhLGMpKX12YXIgY2s7XG5jaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9Yi5sYW5lcztpZihudWxsIT09YSlpZihhLm1lbW9pemVkUHJvcHMhPT1iLnBlbmRpbmdQcm9wc3x8Ti5jdXJyZW50KXVnPSEwO2Vsc2UgaWYoMCE9PShjJmQpKXVnPTAhPT0oYS5mbGFncyYxNjM4NCk/ITA6ITE7ZWxzZXt1Zz0hMTtzd2l0Y2goYi50YWcpe2Nhc2UgMzpyaShiKTtzaCgpO2JyZWFrO2Nhc2UgNTpnaChiKTticmVhaztjYXNlIDE6RmYoYi50eXBlKSYmSmYoYik7YnJlYWs7Y2FzZSA0OmVoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDpkPWIubWVtb2l6ZWRQcm9wcy52YWx1ZTt2YXIgZT1iLnR5cGUuX2NvbnRleHQ7SShtZyxlLl9jdXJyZW50VmFsdWUpO2UuX2N1cnJlbnRWYWx1ZT1kO2JyZWFrO2Nhc2UgMTM6aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSl7aWYoMCE9PShjJmIuY2hpbGQuY2hpbGRMYW5lcykpcmV0dXJuIHRpKGEsYixjKTtJKFAsUC5jdXJyZW50JjEpO2I9aGkoYSxiLGMpO3JldHVybiBudWxsIT09XG5iP2Iuc2libGluZzpudWxsfUkoUCxQLmN1cnJlbnQmMSk7YnJlYWs7Y2FzZSAxOTpkPTAhPT0oYyZiLmNoaWxkTGFuZXMpO2lmKDAhPT0oYS5mbGFncyY2NCkpe2lmKGQpcmV0dXJuIEFpKGEsYixjKTtiLmZsYWdzfD02NH1lPWIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGUucmVuZGVyaW5nPW51bGwsZS50YWlsPW51bGwsZS5sYXN0RWZmZWN0PW51bGwpO0koUCxQLmN1cnJlbnQpO2lmKGQpYnJlYWs7ZWxzZSByZXR1cm4gbnVsbDtjYXNlIDIzOmNhc2UgMjQ6cmV0dXJuIGIubGFuZXM9MCxtaShhLGIsYyl9cmV0dXJuIGhpKGEsYixjKX1lbHNlIHVnPSExO2IubGFuZXM9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjpkPWIudHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKTthPWIucGVuZGluZ1Byb3BzO2U9RWYoYixNLmN1cnJlbnQpO3RnKGIsYyk7ZT1DaChudWxsLGIsZCxhLGUsYyk7Yi5mbGFnc3w9MTtpZihcIm9iamVjdFwiPT09XG50eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZil7Yi50YWc9MTtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYoRmYoZCkpe3ZhciBmPSEwO0pmKGIpfWVsc2UgZj0hMTtiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWUuc3RhdGUmJnZvaWQgMCE9PWUuc3RhdGU/ZS5zdGF0ZTpudWxsO3hnKGIpO3ZhciBnPWQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiZHZyhiLGQsZyxhKTtlLnVwZGF0ZXI9S2c7Yi5zdGF0ZU5vZGU9ZTtlLl9yZWFjdEludGVybmFscz1iO09nKGIsZCxhLGMpO2I9cWkobnVsbCxiLGQsITAsZixjKX1lbHNlIGIudGFnPTAsZmkobnVsbCxiLGUsYyksYj1iLmNoaWxkO3JldHVybiBiO2Nhc2UgMTY6ZT1iLmVsZW1lbnRUeXBlO2E6e251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpO1xuYT1iLnBlbmRpbmdQcm9wcztmPWUuX2luaXQ7ZT1mKGUuX3BheWxvYWQpO2IudHlwZT1lO2Y9Yi50YWc9aGsoZSk7YT1sZyhlLGEpO3N3aXRjaChmKXtjYXNlIDA6Yj1saShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxOmI9cGkobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTE6Yj1naShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxNDpiPWlpKG51bGwsYixlLGxnKGUudHlwZSxhKSxkLGMpO2JyZWFrIGF9dGhyb3cgRXJyb3IoeSgzMDYsZSxcIlwiKSk7fXJldHVybiBiO2Nhc2UgMDpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxsaShhLGIsZCxlLGMpO2Nhc2UgMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxwaShhLGIsZCxlLGMpO2Nhc2UgMzpyaShiKTtkPWIudXBkYXRlUXVldWU7aWYobnVsbD09PWF8fG51bGw9PT1kKXRocm93IEVycm9yKHkoMjgyKSk7XG5kPWIucGVuZGluZ1Byb3BzO2U9Yi5tZW1vaXplZFN0YXRlO2U9bnVsbCE9PWU/ZS5lbGVtZW50Om51bGw7eWcoYSxiKTtDZyhiLGQsbnVsbCxjKTtkPWIubWVtb2l6ZWRTdGF0ZS5lbGVtZW50O2lmKGQ9PT1lKXNoKCksYj1oaShhLGIsYyk7ZWxzZXtlPWIuc3RhdGVOb2RlO2lmKGY9ZS5oeWRyYXRlKWtoPXJmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8uZmlyc3RDaGlsZCksamg9YixmPWxoPSEwO2lmKGYpe2E9ZS5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhO2lmKG51bGwhPWEpZm9yKGU9MDtlPGEubGVuZ3RoO2UrPTIpZj1hW2VdLGYuX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk9YVtlKzFdLHRoLnB1c2goZik7Yz1aZyhiLG51bGwsZCxjKTtmb3IoYi5jaGlsZD1jO2M7KWMuZmxhZ3M9Yy5mbGFncyYtM3wxMDI0LGM9Yy5zaWJsaW5nfWVsc2UgZmkoYSxiLGQsYyksc2goKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA1OnJldHVybiBnaChiKSxudWxsPT09YSYmXG5waChiKSxkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGwsZz1lLmNoaWxkcmVuLG5mKGQsZSk/Zz1udWxsOm51bGwhPT1mJiZuZihkLGYpJiYoYi5mbGFnc3w9MTYpLG9pKGEsYiksZmkoYSxiLGcsYyksYi5jaGlsZDtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZwaChiKSxudWxsO2Nhc2UgMTM6cmV0dXJuIHRpKGEsYixjKTtjYXNlIDQ6cmV0dXJuIGVoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZD1iLnBlbmRpbmdQcm9wcyxudWxsPT09YT9iLmNoaWxkPVlnKGIsbnVsbCxkLGMpOmZpKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxnaShhLGIsZCxlLGMpO2Nhc2UgNzpyZXR1cm4gZmkoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBmaShhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sXG5jKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIGZpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTA6YTp7ZD1iLnR5cGUuX2NvbnRleHQ7ZT1iLnBlbmRpbmdQcm9wcztnPWIubWVtb2l6ZWRQcm9wcztmPWUudmFsdWU7dmFyIGg9Yi50eXBlLl9jb250ZXh0O0kobWcsaC5fY3VycmVudFZhbHVlKTtoLl9jdXJyZW50VmFsdWU9ZjtpZihudWxsIT09ZylpZihoPWcudmFsdWUsZj1IZShoLGYpPzA6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyhoLGYpOjEwNzM3NDE4MjMpfDAsMD09PWYpe2lmKGcuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhTi5jdXJyZW50KXtiPWhpKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihoPWIuY2hpbGQsbnVsbCE9PWgmJihoLnJldHVybj1iKTtudWxsIT09aDspe3ZhciBrPWguZGVwZW5kZW5jaWVzO2lmKG51bGwhPT1rKXtnPWguY2hpbGQ7Zm9yKHZhciBsPVxuay5maXJzdENvbnRleHQ7bnVsbCE9PWw7KXtpZihsLmNvbnRleHQ9PT1kJiYwIT09KGwub2JzZXJ2ZWRCaXRzJmYpKXsxPT09aC50YWcmJihsPXpnKC0xLGMmLWMpLGwudGFnPTIsQWcoaCxsKSk7aC5sYW5lc3w9YztsPWguYWx0ZXJuYXRlO251bGwhPT1sJiYobC5sYW5lc3w9Yyk7c2coaC5yZXR1cm4sYyk7ay5sYW5lc3w9YzticmVha31sPWwubmV4dH19ZWxzZSBnPTEwPT09aC50YWc/aC50eXBlPT09Yi50eXBlP251bGw6aC5jaGlsZDpoLmNoaWxkO2lmKG51bGwhPT1nKWcucmV0dXJuPWg7ZWxzZSBmb3IoZz1oO251bGwhPT1nOyl7aWYoZz09PWIpe2c9bnVsbDticmVha31oPWcuc2libGluZztpZihudWxsIT09aCl7aC5yZXR1cm49Zy5yZXR1cm47Zz1oO2JyZWFrfWc9Zy5yZXR1cm59aD1nfWZpKGEsYixlLmNoaWxkcmVuLGMpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDk6cmV0dXJuIGU9Yi50eXBlLGY9Yi5wZW5kaW5nUHJvcHMsZD1mLmNoaWxkcmVuLHRnKGIsYyksZT12ZyhlLFxuZi51bnN0YWJsZV9vYnNlcnZlZEJpdHMpLGQ9ZChlKSxiLmZsYWdzfD0xLGZpKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZT1iLnR5cGUsZj1sZyhlLGIucGVuZGluZ1Byb3BzKSxmPWxnKGUudHlwZSxmKSxpaShhLGIsZSxmLGQsYyk7Y2FzZSAxNTpyZXR1cm4ga2koYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxkLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmxnKGQsZSksbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9MiksYi50YWc9MSxGZihkKT8oYT0hMCxKZihiKSk6YT0hMSx0ZyhiLGMpLE1nKGIsZCxlKSxPZyhiLGQsZSxjKSxxaShudWxsLGIsZCwhMCxhLGMpO2Nhc2UgMTk6cmV0dXJuIEFpKGEsYixjKTtjYXNlIDIzOnJldHVybiBtaShhLGIsYyk7Y2FzZSAyNDpyZXR1cm4gbWkoYSxiLGMpfXRocm93IEVycm9yKHkoMTU2LGIudGFnKSk7XG59O2Z1bmN0aW9uIGlrKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9dGhpcy5lbGVtZW50VHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5kZXBlbmRlbmNpZXM9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5mbGFncz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuY2hpbGRMYW5lcz10aGlzLmxhbmVzPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBuaChhLGIsYyxkKXtyZXR1cm4gbmV3IGlrKGEsYixjLGQpfWZ1bmN0aW9uIGppKGEpe2E9YS5wcm90b3R5cGU7cmV0dXJuISghYXx8IWEuaXNSZWFjdENvbXBvbmVudCl9XG5mdW5jdGlvbiBoayhhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gamkoYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PUFhKXJldHVybiAxMTtpZihhPT09RGEpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gVGcoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz1uaChhLnRhZyxiLGEua2V5LGEubW9kZSksYy5lbGVtZW50VHlwZT1hLmVsZW1lbnRUeXBlLGMudHlwZT1hLnR5cGUsYy5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsYy5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1jKTooYy5wZW5kaW5nUHJvcHM9YixjLnR5cGU9YS50eXBlLGMuZmxhZ3M9MCxjLm5leHRFZmZlY3Q9bnVsbCxjLmZpcnN0RWZmZWN0PW51bGwsYy5sYXN0RWZmZWN0PW51bGwpO2MuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXM7Yy5sYW5lcz1hLmxhbmVzO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2I9YS5kZXBlbmRlbmNpZXM7Yy5kZXBlbmRlbmNpZXM9bnVsbD09PWI/bnVsbDp7bGFuZXM6Yi5sYW5lcyxmaXJzdENvbnRleHQ6Yi5maXJzdENvbnRleHR9O1xuYy5zaWJsaW5nPWEuc2libGluZztjLmluZGV4PWEuaW5kZXg7Yy5yZWY9YS5yZWY7cmV0dXJuIGN9XG5mdW5jdGlvbiBWZyhhLGIsYyxkLGUsZil7dmFyIGc9MjtkPWE7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpamkoYSkmJihnPTEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWc9NTtlbHNlIGE6c3dpdGNoKGEpe2Nhc2UgdWE6cmV0dXJuIFhnKGMuY2hpbGRyZW4sZSxmLGIpO2Nhc2UgSGE6Zz04O2V8PTE2O2JyZWFrO2Nhc2Ugd2E6Zz04O2V8PTE7YnJlYWs7Y2FzZSB4YTpyZXR1cm4gYT1uaCgxMixjLGIsZXw4KSxhLmVsZW1lbnRUeXBlPXhhLGEudHlwZT14YSxhLmxhbmVzPWYsYTtjYXNlIEJhOnJldHVybiBhPW5oKDEzLGMsYixlKSxhLnR5cGU9QmEsYS5lbGVtZW50VHlwZT1CYSxhLmxhbmVzPWYsYTtjYXNlIENhOnJldHVybiBhPW5oKDE5LGMsYixlKSxhLmVsZW1lbnRUeXBlPUNhLGEubGFuZXM9ZixhO2Nhc2UgSWE6cmV0dXJuIHZpKGMsZSxmLGIpO2Nhc2UgSmE6cmV0dXJuIGE9bmgoMjQsYyxiLGUpLGEuZWxlbWVudFR5cGU9SmEsYS5sYW5lcz1mLGE7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09XG50eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgeWE6Zz0xMDticmVhayBhO2Nhc2UgemE6Zz05O2JyZWFrIGE7Y2FzZSBBYTpnPTExO2JyZWFrIGE7Y2FzZSBEYTpnPTE0O2JyZWFrIGE7Y2FzZSBFYTpnPTE2O2Q9bnVsbDticmVhayBhO2Nhc2UgRmE6Zz0yMjticmVhayBhfXRocm93IEVycm9yKHkoMTMwLG51bGw9PWE/YTp0eXBlb2YgYSxcIlwiKSk7fWI9bmgoZyxjLGIsZSk7Yi5lbGVtZW50VHlwZT1hO2IudHlwZT1kO2IubGFuZXM9ZjtyZXR1cm4gYn1mdW5jdGlvbiBYZyhhLGIsYyxkKXthPW5oKDcsYSxkLGIpO2EubGFuZXM9YztyZXR1cm4gYX1mdW5jdGlvbiB2aShhLGIsYyxkKXthPW5oKDIzLGEsZCxiKTthLmVsZW1lbnRUeXBlPUlhO2EubGFuZXM9YztyZXR1cm4gYX1mdW5jdGlvbiBVZyhhLGIsYyl7YT1uaCg2LGEsbnVsbCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiBXZyhhLGIsYyl7Yj1uaCg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5sYW5lcz1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGprKGEsYixjKXt0aGlzLnRhZz1iO3RoaXMuY29udGFpbmVySW5mbz1hO3RoaXMuZmluaXNoZWRXb3JrPXRoaXMucGluZ0NhY2hlPXRoaXMuY3VycmVudD10aGlzLnBlbmRpbmdDaGlsZHJlbj1udWxsO3RoaXMudGltZW91dEhhbmRsZT0tMTt0aGlzLnBlbmRpbmdDb250ZXh0PXRoaXMuY29udGV4dD1udWxsO3RoaXMuaHlkcmF0ZT1jO3RoaXMuY2FsbGJhY2tOb2RlPW51bGw7dGhpcy5jYWxsYmFja1ByaW9yaXR5PTA7dGhpcy5ldmVudFRpbWVzPVpjKDApO3RoaXMuZXhwaXJhdGlvblRpbWVzPVpjKC0xKTt0aGlzLmVudGFuZ2xlZExhbmVzPXRoaXMuZmluaXNoZWRMYW5lcz10aGlzLm11dGFibGVSZWFkTGFuZXM9dGhpcy5leHBpcmVkTGFuZXM9dGhpcy5waW5nZWRMYW5lcz10aGlzLnN1c3BlbmRlZExhbmVzPXRoaXMucGVuZGluZ0xhbmVzPTA7dGhpcy5lbnRhbmdsZW1lbnRzPVpjKDApO3RoaXMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1udWxsfVxuZnVuY3Rpb24ga2soYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjp0YSxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbmZ1bmN0aW9uIGxrKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPUhnKCksZz1JZyhlKTthOmlmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbHM7Yjp7aWYoWmIoYykhPT1jfHwxIT09Yy50YWcpdGhyb3cgRXJyb3IoeSgxNzApKTt2YXIgaD1jO2Rve3N3aXRjaChoLnRhZyl7Y2FzZSAzOmg9aC5zdGF0ZU5vZGUuY29udGV4dDticmVhayBiO2Nhc2UgMTppZihGZihoLnR5cGUpKXtoPWguc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGJ9fWg9aC5yZXR1cm59d2hpbGUobnVsbCE9PWgpO3Rocm93IEVycm9yKHkoMTcxKSk7fWlmKDE9PT1jLnRhZyl7dmFyIGs9Yy50eXBlO2lmKEZmKGspKXtjPUlmKGMsayxoKTticmVhayBhfX1jPWh9ZWxzZSBjPUNmO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9emcoZixnKTtiLnBheWxvYWQ9e2VsZW1lbnQ6YX07ZD12b2lkIDA9PT1kP251bGw6ZDtudWxsIT09XG5kJiYoYi5jYWxsYmFjaz1kKTtBZyhlLGIpO0pnKGUsZyxmKTtyZXR1cm4gZ31mdW5jdGlvbiBtayhhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIG5rKGEsYil7YT1hLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQpe3ZhciBjPWEucmV0cnlMYW5lO2EucmV0cnlMYW5lPTAhPT1jJiZjPGI/YzpifX1mdW5jdGlvbiBvayhhLGIpe25rKGEsYik7KGE9YS5hbHRlcm5hdGUpJiZuayhhLGIpfWZ1bmN0aW9uIHBrKCl7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBxayhhLGIsYyl7dmFyIGQ9bnVsbCE9YyYmbnVsbCE9Yy5oeWRyYXRpb25PcHRpb25zJiZjLmh5ZHJhdGlvbk9wdGlvbnMubXV0YWJsZVNvdXJjZXN8fG51bGw7Yz1uZXcgamsoYSxiLG51bGwhPWMmJiEwPT09Yy5oeWRyYXRlKTtiPW5oKDMsbnVsbCxudWxsLDI9PT1iPzc6MT09PWI/MzowKTtjLmN1cnJlbnQ9YjtiLnN0YXRlTm9kZT1jO3hnKGIpO2FbZmZdPWMuY3VycmVudDtjZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7aWYoZClmb3IoYT0wO2E8ZC5sZW5ndGg7YSsrKXtiPWRbYV07dmFyIGU9Yi5fZ2V0VmVyc2lvbjtlPWUoYi5fc291cmNlKTtudWxsPT1jLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE/Yy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhPVtiLGVdOmMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YS5wdXNoKGIsZSl9dGhpcy5faW50ZXJuYWxSb290PWN9XG5xay5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe2xrKGEsdGhpcy5faW50ZXJuYWxSb290LG51bGwsbnVsbCl9O3FrLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5faW50ZXJuYWxSb290LGI9YS5jb250YWluZXJJbmZvO2xrKG51bGwsYSxudWxsLGZ1bmN0aW9uKCl7YltmZl09bnVsbH0pfTtmdW5jdGlvbiByayhhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9XG5mdW5jdGlvbiBzayhhLGIpe2J8fChiPWE/OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YS5maXJzdENoaWxkOm51bGwsYj0hKCFifHwxIT09Yi5ub2RlVHlwZXx8IWIuaGFzQXR0cmlidXRlKFwiZGF0YS1yZWFjdHJvb3RcIikpKTtpZighYilmb3IodmFyIGM7Yz1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChjKTtyZXR1cm4gbmV3IHFrKGEsMCxiP3toeWRyYXRlOiEwfTp2b2lkIDApfVxuZnVuY3Rpb24gdGsoYSxiLGMsZCxlKXt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7dmFyIGc9Zi5faW50ZXJuYWxSb290O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1tayhnKTtoLmNhbGwoYSl9fWxrKGIsZyxhLGUpfWVsc2V7Zj1jLl9yZWFjdFJvb3RDb250YWluZXI9c2soYyxkKTtnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGs9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9bWsoZyk7ay5jYWxsKGEpfX1YaihmdW5jdGlvbigpe2xrKGIsZyxhLGUpfSl9cmV0dXJuIG1rKGcpfWVjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUhnKCk7SmcoYSw0LGIpO29rKGEsNCl9fTtmYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1IZygpO0pnKGEsNjcxMDg4NjQsYik7b2soYSw2NzEwODg2NCl9fTtcbmdjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUhnKCksYz1JZyhhKTtKZyhhLGMsYik7b2soYSxjKX19O2hjPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGIoKX07XG55Yj1mdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOmFiKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPVwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZT1cInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1EYihkKTtpZighZSl0aHJvdyBFcnJvcih5KDkwKSk7V2EoZCk7YWIoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZmYihhLCEhYy5tdWx0aXBsZSxiLCExKX19O0diPVdqO1xuSGI9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1YO1h8PTQ7dHJ5e3JldHVybiBnZyg5OCxhLmJpbmQobnVsbCxiLGMsZCxlKSl9ZmluYWxseXtYPWYsMD09PVgmJih3aigpLGlnKCkpfX07SWI9ZnVuY3Rpb24oKXswPT09KFgmNDkpJiYoVmooKSxPaigpKX07SmI9ZnVuY3Rpb24oYSxiKXt2YXIgYz1YO1h8PTI7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7WD1jLDA9PT1YJiYod2ooKSxpZygpKX19O2Z1bmN0aW9uIHVrKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7aWYoIXJrKGIpKXRocm93IEVycm9yKHkoMjAwKSk7cmV0dXJuIGtrKGEsYixudWxsLGMpfXZhciB2az17RXZlbnRzOltDYix1ZSxEYixFYixGYixPaix7Y3VycmVudDohMX1dfSx3az17ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6d2MsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxNy4wLjFcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9O1xudmFyIHhrPXtidW5kbGVUeXBlOndrLmJ1bmRsZVR5cGUsdmVyc2lvbjp3ay52ZXJzaW9uLHJlbmRlcmVyUGFja2FnZU5hbWU6d2sucmVuZGVyZXJQYWNrYWdlTmFtZSxyZW5kZXJlckNvbmZpZzp3ay5yZW5kZXJlckNvbmZpZyxvdmVycmlkZUhvb2tTdGF0ZTpudWxsLG92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aDpudWxsLG92ZXJyaWRlUHJvcHM6bnVsbCxvdmVycmlkZVByb3BzRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjpyYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9Y2MoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOndrLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlfHxcbnBrLGZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaDpudWxsLHNjaGVkdWxlUmVmcmVzaDpudWxsLHNjaGVkdWxlUm9vdDpudWxsLHNldFJlZnJlc2hIYW5kbGVyOm51bGwsZ2V0Q3VycmVudEZpYmVyOm51bGx9O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXt2YXIgeWs9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKCF5ay5pc0Rpc2FibGVkJiZ5ay5zdXBwb3J0c0ZpYmVyKXRyeXtMZj15ay5pbmplY3QoeGspLE1mPXlrfWNhdGNoKGEpe319ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD12aztleHBvcnRzLmNyZWF0ZVBvcnRhbD11aztcbmV4cG9ydHMuZmluZERPTU5vZGU9ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZigxPT09YS5ub2RlVHlwZSlyZXR1cm4gYTt2YXIgYj1hLl9yZWFjdEludGVybmFscztpZih2b2lkIDA9PT1iKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXIpdGhyb3cgRXJyb3IoeSgxODgpKTt0aHJvdyBFcnJvcih5KDI2OCxPYmplY3Qua2V5cyhhKSkpO31hPWNjKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX07ZXhwb3J0cy5mbHVzaFN5bmM9ZnVuY3Rpb24oYSxiKXt2YXIgYz1YO2lmKDAhPT0oYyY0OCkpcmV0dXJuIGEoYik7WHw9MTt0cnl7aWYoYSlyZXR1cm4gZ2coOTksYS5iaW5kKG51bGwsYikpfWZpbmFsbHl7WD1jLGlnKCl9fTtleHBvcnRzLmh5ZHJhdGU9ZnVuY3Rpb24oYSxiLGMpe2lmKCFyayhiKSl0aHJvdyBFcnJvcih5KDIwMCkpO3JldHVybiB0ayhudWxsLGEsYiwhMCxjKX07XG5leHBvcnRzLnJlbmRlcj1mdW5jdGlvbihhLGIsYyl7aWYoIXJrKGIpKXRocm93IEVycm9yKHkoMjAwKSk7cmV0dXJuIHRrKG51bGwsYSxiLCExLGMpfTtleHBvcnRzLnVubW91bnRDb21wb25lbnRBdE5vZGU9ZnVuY3Rpb24oYSl7aWYoIXJrKGEpKXRocm93IEVycm9yKHkoNDApKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhYaihmdW5jdGlvbigpe3RrKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGw7YVtmZl09bnVsbH0pfSksITApOiExfTtleHBvcnRzLnVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzPVdqO2V4cG9ydHMudW5zdGFibGVfY3JlYXRlUG9ydGFsPWZ1bmN0aW9uKGEsYil7cmV0dXJuIHVrKGEsYiwyPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbCl9O1xuZXhwb3J0cy51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyxkKXtpZighcmsoYykpdGhyb3cgRXJyb3IoeSgyMDApKTtpZihudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFscyl0aHJvdyBFcnJvcih5KDM4KSk7cmV0dXJuIHRrKGEsYixjLCExLGQpfTtleHBvcnRzLnZlcnNpb249XCIxNy4wLjFcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjAuMjAuMVxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgZixnLGgsaztpZihcIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93KXt2YXIgbD1wZXJmb3JtYW5jZTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBsLm5vdygpfX1lbHNle3ZhciBwPURhdGUscT1wLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHAubm93KCktcX19XG5pZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgdD1udWxsLHU9bnVsbCx3PWZ1bmN0aW9uKCl7aWYobnVsbCE9PXQpdHJ5e3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7dCghMCxhKTt0PW51bGx9Y2F0Y2goYil7dGhyb3cgc2V0VGltZW91dCh3LDApLGI7fX07Zj1mdW5jdGlvbihhKXtudWxsIT09dD9zZXRUaW1lb3V0KGYsMCxhKToodD1hLHNldFRpbWVvdXQodywwKSl9O2c9ZnVuY3Rpb24oYSxiKXt1PXNldFRpbWVvdXQoYSxiKX07aD1mdW5jdGlvbigpe2NsZWFyVGltZW91dCh1KX07ZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1mdW5jdGlvbigpe3JldHVybiExfTtrPWV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oKXt9fWVsc2V7dmFyIHg9d2luZG93LnNldFRpbWVvdXQseT13aW5kb3cuY2xlYXJUaW1lb3V0O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgY29uc29sZSl7dmFyIHo9XG53aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWU7XCJmdW5jdGlvblwiIT09dHlwZW9mIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUmJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHJlcXVlc3RBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3JlYWN0LXBvbHlmaWxsc1wiKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgeiYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgY2FuY2VsQW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9yZWFjdC1wb2x5ZmlsbHNcIil9dmFyIEE9ITEsQj1udWxsLEM9LTEsRD01LEU9MDtleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7cmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCk+PVxuRX07az1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbihhKXswPmF8fDEyNTxhP2NvbnNvbGUuZXJyb3IoXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZSByYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCBzdXBwb3J0ZWRcIik6RD0wPGE/TWF0aC5mbG9vcigxRTMvYSk6NX07dmFyIEY9bmV3IE1lc3NhZ2VDaGFubmVsLEc9Ri5wb3J0MjtGLnBvcnQxLm9ubWVzc2FnZT1mdW5jdGlvbigpe2lmKG51bGwhPT1CKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO0U9YStEO3RyeXtCKCEwLGEpP0cucG9zdE1lc3NhZ2UobnVsbCk6KEE9ITEsQj1udWxsKX1jYXRjaChiKXt0aHJvdyBHLnBvc3RNZXNzYWdlKG51bGwpLGI7fX1lbHNlIEE9ITF9O2Y9ZnVuY3Rpb24oYSl7Qj1hO0F8fChBPSEwLEcucG9zdE1lc3NhZ2UobnVsbCkpfTtnPWZ1bmN0aW9uKGEsYil7Qz1cbngoZnVuY3Rpb24oKXthKGV4cG9ydHMudW5zdGFibGVfbm93KCkpfSxiKX07aD1mdW5jdGlvbigpe3koQyk7Qz0tMX19ZnVuY3Rpb24gSChhLGIpe3ZhciBjPWEubGVuZ3RoO2EucHVzaChiKTthOmZvcig7Oyl7dmFyIGQ9Yy0xPj4+MSxlPWFbZF07aWYodm9pZCAwIT09ZSYmMDxJKGUsYikpYVtkXT1iLGFbY109ZSxjPWQ7ZWxzZSBicmVhayBhfX1mdW5jdGlvbiBKKGEpe2E9YVswXTtyZXR1cm4gdm9pZCAwPT09YT9udWxsOmF9XG5mdW5jdGlvbiBLKGEpe3ZhciBiPWFbMF07aWYodm9pZCAwIT09Yil7dmFyIGM9YS5wb3AoKTtpZihjIT09Yil7YVswXT1jO2E6Zm9yKHZhciBkPTAsZT1hLmxlbmd0aDtkPGU7KXt2YXIgbT0yKihkKzEpLTEsbj1hW21dLHY9bSsxLHI9YVt2XTtpZih2b2lkIDAhPT1uJiYwPkkobixjKSl2b2lkIDAhPT1yJiYwPkkocixuKT8oYVtkXT1yLGFbdl09YyxkPXYpOihhW2RdPW4sYVttXT1jLGQ9bSk7ZWxzZSBpZih2b2lkIDAhPT1yJiYwPkkocixjKSlhW2RdPXIsYVt2XT1jLGQ9djtlbHNlIGJyZWFrIGF9fXJldHVybiBifXJldHVybiBudWxsfWZ1bmN0aW9uIEkoYSxiKXt2YXIgYz1hLnNvcnRJbmRleC1iLnNvcnRJbmRleDtyZXR1cm4gMCE9PWM/YzphLmlkLWIuaWR9dmFyIEw9W10sTT1bXSxOPTEsTz1udWxsLFA9MyxRPSExLFI9ITEsUz0hMTtcbmZ1bmN0aW9uIFQoYSl7Zm9yKHZhciBiPUooTSk7bnVsbCE9PWI7KXtpZihudWxsPT09Yi5jYWxsYmFjaylLKE0pO2Vsc2UgaWYoYi5zdGFydFRpbWU8PWEpSyhNKSxiLnNvcnRJbmRleD1iLmV4cGlyYXRpb25UaW1lLEgoTCxiKTtlbHNlIGJyZWFrO2I9SihNKX19ZnVuY3Rpb24gVShhKXtTPSExO1QoYSk7aWYoIVIpaWYobnVsbCE9PUooTCkpUj0hMCxmKFYpO2Vsc2V7dmFyIGI9SihNKTtudWxsIT09YiYmZyhVLGIuc3RhcnRUaW1lLWEpfX1cbmZ1bmN0aW9uIFYoYSxiKXtSPSExO1MmJihTPSExLGgoKSk7UT0hMDt2YXIgYz1QO3RyeXtUKGIpO2ZvcihPPUooTCk7bnVsbCE9PU8mJighKE8uZXhwaXJhdGlvblRpbWU+Yil8fGEmJiFleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkKCkpOyl7dmFyIGQ9Ty5jYWxsYmFjaztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7Ty5jYWxsYmFjaz1udWxsO1A9Ty5wcmlvcml0eUxldmVsO3ZhciBlPWQoTy5leHBpcmF0aW9uVGltZTw9Yik7Yj1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlP08uY2FsbGJhY2s9ZTpPPT09SihMKSYmSyhMKTtUKGIpfWVsc2UgSyhMKTtPPUooTCl9aWYobnVsbCE9PU8pdmFyIG09ITA7ZWxzZXt2YXIgbj1KKE0pO251bGwhPT1uJiZnKFUsbi5zdGFydFRpbWUtYik7bT0hMX1yZXR1cm4gbX1maW5hbGx5e089bnVsbCxQPWMsUT0hMX19dmFyIFc9aztleHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O1xuZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9Qcm9maWxpbmc9bnVsbDtleHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5PTI7ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXthLmNhbGxiYWNrPW51bGx9O2V4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb249ZnVuY3Rpb24oKXtSfHxRfHwoUj0hMCxmKFYpKX07ZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiBQfTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIEooTCl9O1xuZXhwb3J0cy51bnN0YWJsZV9uZXh0PWZ1bmN0aW9uKGEpe3N3aXRjaChQKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzp2YXIgYj0zO2JyZWFrO2RlZmF1bHQ6Yj1QfXZhciBjPVA7UD1iO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7UD1jfX07ZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQ9VztleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPVA7UD1hO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7UD1jfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yz8oYz1jLmRlbGF5LGM9XCJudW1iZXJcIj09PXR5cGVvZiBjJiYwPGM/ZCtjOmQpOmM9ZDtzd2l0Y2goYSl7Y2FzZSAxOnZhciBlPS0xO2JyZWFrO2Nhc2UgMjplPTI1MDticmVhaztjYXNlIDU6ZT0xMDczNzQxODIzO2JyZWFrO2Nhc2UgNDplPTFFNDticmVhaztkZWZhdWx0OmU9NUUzfWU9YytlO2E9e2lkOk4rKyxjYWxsYmFjazpiLHByaW9yaXR5TGV2ZWw6YSxzdGFydFRpbWU6YyxleHBpcmF0aW9uVGltZTplLHNvcnRJbmRleDotMX07Yz5kPyhhLnNvcnRJbmRleD1jLEgoTSxhKSxudWxsPT09SihMKSYmYT09PUooTSkmJihTP2goKTpTPSEwLGcoVSxjLWQpKSk6KGEuc29ydEluZGV4PWUsSChMLGEpLFJ8fFF8fChSPSEwLGYoVikpKTtyZXR1cm4gYX07XG5leHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj1QO3JldHVybiBmdW5jdGlvbigpe3ZhciBjPVA7UD1iO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXtQPWN9fX07XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9yaWdpbmFsTW9kdWxlKSB7XG5cdGlmICghb3JpZ2luYWxNb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0dmFyIG1vZHVsZSA9IE9iamVjdC5jcmVhdGUob3JpZ2luYWxNb2R1bGUpO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImV4cG9ydHNcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbldpdGhSZXNldCgpIHt9XG5lbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LnJlc2V0V2FybmluZ0NhY2hlID0gZW1wdHlGdW5jdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGVsZW1lbnRUeXBlOiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW0sXG5cbiAgICBjaGVja1Byb3BUeXBlczogZW1wdHlGdW5jdGlvbldpdGhSZXNldCxcbiAgICByZXNldFdhcm5pbmdDYWNoZTogZW1wdHlGdW5jdGlvblxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/XG5TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTo2MDEyMCxyPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHY9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsdz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyx4PWI/U3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTo2MDExOCx5PWI/U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpOjYwMTE5O1xuZnVuY3Rpb24geihhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgdDpjYXNlIHI6Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIEEoYSl7cmV0dXJuIHooYSk9PT1tfWV4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtleHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXQ7ZXhwb3J0cy5NZW1vPXI7ZXhwb3J0cy5Qb3J0YWw9ZDtcbmV4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gQShhKXx8eihhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1BO2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1rfTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09aH07ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT10fTtcbmV4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cn07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Zn07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cH07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXR8fGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09d3x8YS4kJHR5cGVvZj09PXh8fGEuJCR0eXBlb2Y9PT15fHxhLiQkdHlwZW9mPT09dil9O2V4cG9ydHMudHlwZU9mPXo7XG4iLCJpbXBvcnQgeyB1bmlmb3JtQmluZGluZ3MgfSBmcm9tIFwiLi8uLi9jb21wb25lbnRzL3VuaWZvcm1zL3VuaWZvcm1CaW5kaW5nc1wiO1xyXG5pbXBvcnQgeyBnZXRFeHRlbnNpb25TdGF0ZSB9IGZyb20gXCIuLi8uLi8uLi9jb21tb24vZXh0ZW5zaW9uU3RhdGVcIjtcclxuaW1wb3J0IHsgVmlld2VyQWN0aW9uIH0gZnJvbSBcIi4vYWN0aW9uc1wiO1xyXG5pbXBvcnQgeyBWaWV3ZXJTdGF0ZSB9IGZyb20gXCIuL3N0YXRlXCI7XHJcbmltcG9ydCB7IGF0dHJpYnV0ZUJ1ZmZlckJpbmRpbmdzIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvYXR0cmlidXRlQnVmZmVycy9hdHRyaWJ1dGVCdWZmZXJCaW5kaW5nc1wiO1xyXG5pbXBvcnQgeyBvYmplY3RNYXAgfSBmcm9tIFwiLi4vdXRpbHMvb2JqZWN0XCI7XHJcblxyXG5jb25zdCBpbml0aWFsU3RhdGU6IFZpZXdlclN0YXRlID0ge1xyXG4gIC4uLmdldEV4dGVuc2lvblN0YXRlKCksXHJcbiAgY291bnRlcjogMCxcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCByZWR1Y2VyID0gKHN0YXRlOiBWaWV3ZXJTdGF0ZSA9IGluaXRpYWxTdGF0ZSwgYWN0aW9uOiBWaWV3ZXJBY3Rpb24pOiBWaWV3ZXJTdGF0ZSA9PiB7XHJcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xyXG4gICAgY2FzZSBcIlNFVF9WRVJURVhfRklMRV9QQVRIXCI6IHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICB2ZXJ0ZXhGaWxlUGF0aDogYWN0aW9uLnBheWxvYWQucGF0aCxcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIGNhc2UgXCJTRVRfRlJBR01FTlRfRklMRV9QQVRIXCI6IHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICBmcmFnbWVudEZpbGVQYXRoOiBhY3Rpb24ucGF5bG9hZC5wYXRoLFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gICAgY2FzZSBcIlNFVF9VTklGT1JNXCI6IHtcclxuICAgICAgY29uc3QgeyBuYW1lLCAuLi5yZXN0IH0gPSBhY3Rpb24ucGF5bG9hZDtcclxuICAgICAgLy9jb25zdCBiaW5kaW5nTmFtZXMuaGFzKG9wdGlvbklkKVxyXG5cclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICB1bmlmb3JtVmFsdWVzOiB7XHJcbiAgICAgICAgICAuLi5zdGF0ZS51bmlmb3JtVmFsdWVzLFxyXG4gICAgICAgICAgW25hbWVdOiB7XHJcbiAgICAgICAgICAgIC4uLnN0YXRlLnVuaWZvcm1WYWx1ZXNbbmFtZV0sXHJcbiAgICAgICAgICAgIC4uLnJlc3QsXHJcbiAgICAgICAgICAgIHZhbHVlOlxyXG4gICAgICAgICAgICAgIHVuaWZvcm1CaW5kaW5nc1xyXG4gICAgICAgICAgICAgICAgLmdldChyZXN0Lm9wdGlvbklkKVxyXG4gICAgICAgICAgICAgICAgPy5nZXRWYWx1ZShzdGF0ZS5jYW1lcmFQb3NpdGlvbiwgc3RhdGUudmlld2VyU2l6ZSkgPz8gcmVzdC52YWx1ZSxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIGNhc2UgXCJTRVRfQVRUUklCVVRFX0JVRkZFUlwiOiB7XHJcbiAgICAgIGNvbnN0IHsgbmFtZSwgLi4ucmVzdCB9ID0gYWN0aW9uLnBheWxvYWQ7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4uc3RhdGUsXHJcbiAgICAgICAgYXR0cmlidXRlQnVmZmVyVmFsdWVzOiB7XHJcbiAgICAgICAgICAuLi5zdGF0ZS5hdHRyaWJ1dGVCdWZmZXJWYWx1ZXMsXHJcbiAgICAgICAgICBbbmFtZV06IHtcclxuICAgICAgICAgICAgLi4uc3RhdGUuYXR0cmlidXRlQnVmZmVyVmFsdWVzW25hbWVdLFxyXG4gICAgICAgICAgICAuLi5yZXN0LFxyXG4gICAgICAgICAgICB2YWx1ZTogYXR0cmlidXRlQnVmZmVyQmluZGluZ3MuZ2V0KHJlc3Qub3B0aW9uSWQpPy5nZXRWYWx1ZShzdGF0ZS5tZXNoSWQpID8/IHJlc3QudmFsdWUsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgICBjYXNlIFwiU0VUX1RFWFRVUkVcIjoge1xyXG4gICAgICBjb25zdCB7IG5hbWUsIC4uLnJlc3QgfSA9IGFjdGlvbi5wYXlsb2FkO1xyXG5cclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICB0ZXh0dXJlVmFsdWVzOiB7XHJcbiAgICAgICAgICAuLi5zdGF0ZS50ZXh0dXJlVmFsdWVzLFxyXG4gICAgICAgICAgW25hbWVdOiB7IC4uLnN0YXRlLnRleHR1cmVWYWx1ZXNbbmFtZV0sIC4uLnJlc3QgfSxcclxuICAgICAgICB9LFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gICAgY2FzZSBcIlNFVF9WSVdFUl9TSVpFXCI6IHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICB2aWV3ZXJTaXplOiBhY3Rpb24ucGF5bG9hZC5zaXplLFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gICAgY2FzZSBcIlNFVF9DQU1FUkFfUE9TSVRJT05cIjoge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIC4uLnN0YXRlLFxyXG4gICAgICAgIHVuaWZvcm1WYWx1ZXM6IG9iamVjdE1hcChzdGF0ZS51bmlmb3JtVmFsdWVzLCBwcm9wVmFsdWUgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgLi4ucHJvcFZhbHVlLFxyXG4gICAgICAgICAgICB2YWx1ZTpcclxuICAgICAgICAgICAgICB1bmlmb3JtQmluZGluZ3NcclxuICAgICAgICAgICAgICAgIC5nZXQocHJvcFZhbHVlLm9wdGlvbklkKVxyXG4gICAgICAgICAgICAgICAgPy5nZXRWYWx1ZShhY3Rpb24ucGF5bG9hZC5wb3NpdGlvbiwgc3RhdGUudmlld2VyU2l6ZSkgPz8gcHJvcFZhbHVlLnZhbHVlLFxyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9KSxcclxuICAgICAgICBjYW1lcmFQb3NpdGlvbjogYWN0aW9uLnBheWxvYWQucG9zaXRpb24sXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgICBjYXNlIFwiU0VUX01FU0hcIjoge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIC4uLnN0YXRlLFxyXG4gICAgICAgIGF0dHJpYnV0ZUJ1ZmZlclZhbHVlczogb2JqZWN0TWFwKHN0YXRlLmF0dHJpYnV0ZUJ1ZmZlclZhbHVlcywgcHJvcFZhbHVlID0+IHtcclxuICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIC4uLnByb3BWYWx1ZSxcclxuICAgICAgICAgICAgdmFsdWU6XHJcbiAgICAgICAgICAgICAgYXR0cmlidXRlQnVmZmVyQmluZGluZ3MuZ2V0KHByb3BWYWx1ZS5vcHRpb25JZCk/LmdldFZhbHVlKGFjdGlvbi5wYXlsb2FkLmlkKSA/P1xyXG4gICAgICAgICAgICAgIHByb3BWYWx1ZS52YWx1ZSxcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfSksXHJcbiAgICAgICAgbWVzaElkOiBhY3Rpb24ucGF5bG9hZC5pZCxcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIGNhc2UgXCJTRVRfRFJBV19NT0RFXCI6IHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICBkcmF3TW9kZTogYWN0aW9uLnBheWxvYWQubW9kZSxcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIGRlZmF1bHQ6IHtcclxuICAgICAgcmV0dXJuIHN0YXRlO1xyXG4gICAgfVxyXG4gIH1cclxufTtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XHJcbmltcG9ydCB7IHZpZXdlckVuZHBvaW50IH0gZnJvbSBcIi4uLy4uLy4uL2NvbW1vbi9jb21tdW5pY2F0aW9uL3ZpZXdlckVuZHBvaW50XCI7XHJcbmltcG9ydCB7IFZpZXdlclN0YXRlIH0gZnJvbSBcIi4uL3N0b3JlL3N0YXRlXCI7XHJcbmltcG9ydCB7IG9ic2VydmVFbGVtZW50Qm91bmRpbmdSZWN0IH0gZnJvbSBcIi4uL3V0aWxzL2h0bWxcIjtcclxuaW1wb3J0IHtcclxuICBjb21waWxlU2hhZGVyc0Zyb21Tb3VyY2UsXHJcbiAgZm9ybWF0U2hhZGVyQ29tcGlsZUVycm9ycyxcclxuICBnZXRQcm9ncmFtQXR0cmlidXRlQnVmZmVycyxcclxuICBnZXRQcm9ncmFtVW5pZm9ybXMsXHJcbiAgcmVuZGVyUHJvZ3JhbSxcclxufSBmcm9tIFwiLi4vdXRpbHMvd2ViZ2xcIjtcclxuaW1wb3J0IHsgY3JlYXRlQXR0cmlidXRlQnVmZmVySW5mb3MgfSBmcm9tIFwiLi4vdXRpbHMvd2ViZ2wvYXR0cmlidXRlQnVmZmVyU3RvcmVcIjtcclxuaW1wb3J0IHsgSW5kZXhCdWZmZXJJbmZvIH0gZnJvbSBcIi4uL3V0aWxzL3dlYmdsL2luZGV4QnVmZmVyXCI7XHJcbmltcG9ydCB7IFVuaWZvcm1UeXBlIH0gZnJvbSBcIi4uL3V0aWxzL3dlYmdsL3VuaWZvcm1cIjtcclxuaW1wb3J0IHsgRHJhd09wdGlvbnNTZWN0aW9uIH0gZnJvbSBcIi4vRHJhd09wdGlvbnNTZWN0aW9uXCI7XHJcbmltcG9ydCB7IFNoYWRlcnNTZWxlY3RvclNlY3Rpb24gfSBmcm9tIFwiLi9TaGFkZXJzU2VsZWN0b3JTZWN0aW9uXCI7XHJcbmltcG9ydCB7IFRleHR1cmVGaWVsZEluZm8sIFRleHR1cmVTZWN0aW9uIH0gZnJvbSBcIi4vdGV4dHVyZXMvVGV4dHVyZXNTZWN0aW9uXCI7XHJcbmltcG9ydCB7IFVuaWZvcm1TZWN0aW9uIH0gZnJvbSBcIi4vdW5pZm9ybXMvVW5pZm9ybXNTZWN0aW9uXCI7XHJcbmltcG9ydCB7IFNoYWRlcnNDb21waWxlUmVzdWx0QXJlYSB9IGZyb20gXCIuL1NoYWRlcnNDb21waWxlUmVzdWx0QXJlYVwiO1xyXG5pbXBvcnQgeyB1c2VQZXJzcGVjdGl2ZUNhbWVyYSB9IGZyb20gXCIuLi9ob29rcy91c2VQZXJzcGVjdGl2ZUNhbWVyYVwiO1xyXG5pbXBvcnQgeyBEaXNwYXRjaCB9IGZyb20gXCJyZWR1eFwiO1xyXG5pbXBvcnQgeyBWaWV3ZXJBY3Rpb24gfSBmcm9tIFwiLi4vc3RvcmUvYWN0aW9uc1wiO1xyXG5pbXBvcnQgeyB1c2VEb2N1bWVudFdhdGNoZXIgfSBmcm9tIFwiLi4vaG9va3MvdXNlRG9jdW1lbnRXYXRjaGVyXCI7XHJcbmltcG9ydCB7XHJcbiAgQXR0cmlidXRlQnVmZmVyRmllbGRJbmZvLFxyXG4gIEF0dHJpYnV0ZUJ1ZmZlcnNTZWN0aW9uLFxyXG59IGZyb20gXCIuL2F0dHJpYnV0ZUJ1ZmZlcnMvQXR0cmlidXRlQnVmZmVyc1NlY3Rpb25cIjtcclxuaW1wb3J0IHsgY3JlYXRlVW5pZm9ybUluZm9zIH0gZnJvbSBcIi4uL3V0aWxzL3dlYmdsL3VuaWZvcm1TdG9yZVwiO1xyXG5pbXBvcnQgeyBzZXRXZWJHTEZyb21TdGF0ZSB9IGZyb20gXCIuLi91dGlscy93ZWJnbC9zdG9yZVdhdGNoZXJcIjtcclxuaW1wb3J0IHsgc3RvcmUgfSBmcm9tIFwiLi5cIjtcclxuaW1wb3J0IHsgQ2FtZXJhUG9zaXRpb24gfSBmcm9tIFwiLi4vdXRpbHMvY2FtZXJhTWFuaXB1bGF0b3JcIjtcclxuXHJcbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZTogVmlld2VyU3RhdGUpID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAgc2VsZWN0ZWRWZXJ0ZXhGaWxlSWQ6IHN0YXRlLnZlcnRleEZpbGVQYXRoLFxyXG4gICAgc2VsZWN0ZWRGcmFnbWVudEZpbGVJZDogc3RhdGUuZnJhZ21lbnRGaWxlUGF0aCxcclxuICAgIGNhbWVyYVBvc2l0aW9uOiBzdGF0ZS5jYW1lcmFQb3NpdGlvbixcclxuICB9O1xyXG59O1xyXG5cclxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gKGRpc3BhdGNoOiBEaXNwYXRjaDxWaWV3ZXJBY3Rpb24+KSA9PiB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHNldENhbWVyYVBvc2l0aW9uOiAobmV3Q2FtZXJhUG9zaXRpb246IENhbWVyYVBvc2l0aW9uKSA9PlxyXG4gICAgICBkaXNwYXRjaCh7IHR5cGU6IFwiU0VUX0NBTUVSQV9QT1NJVElPTlwiLCBwYXlsb2FkOiB7IHBvc2l0aW9uOiBuZXdDYW1lcmFQb3NpdGlvbiB9IH0pLFxyXG4gICAgc2V0Vmlld2VyU2l6ZTogKHNpemU6IHsgd2lkdGg6IG51bWJlcjsgaGVpZ2h0OiBudW1iZXIgfSkgPT5cclxuICAgICAgZGlzcGF0Y2goeyB0eXBlOiBcIlNFVF9WSVdFUl9TSVpFXCIsIHBheWxvYWQ6IHsgc2l6ZSB9IH0pLFxyXG4gIH07XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgVmlld2VyID0gY29ubmVjdChcclxuICBtYXBTdGF0ZVRvUHJvcHMsXHJcbiAgbWFwRGlzcGF0Y2hUb1Byb3BzXHJcbikoXHJcbiAgKHByb3BzOiB7XHJcbiAgICBzZWxlY3RlZFZlcnRleEZpbGVJZDogc3RyaW5nO1xyXG4gICAgc2VsZWN0ZWRGcmFnbWVudEZpbGVJZDogc3RyaW5nO1xyXG4gICAgY2FtZXJhUG9zaXRpb246IENhbWVyYVBvc2l0aW9uO1xyXG4gICAgc2V0Q2FtZXJhUG9zaXRpb246IChuZXdDYW1lcmFQb3NpdGlvbjogQ2FtZXJhUG9zaXRpb24pID0+IHZvaWQ7XHJcbiAgICBzZXRWaWV3ZXJTaXplOiAoc2l6ZTogeyB3aWR0aDogbnVtYmVyOyBoZWlnaHQ6IG51bWJlciB9KSA9PiB2b2lkO1xyXG4gIH0pID0+IHtcclxuICAgIGNvbnN0IHtcclxuICAgICAgc2VsZWN0ZWRWZXJ0ZXhGaWxlSWQsXHJcbiAgICAgIHNlbGVjdGVkRnJhZ21lbnRGaWxlSWQsXHJcbiAgICAgIGNhbWVyYVBvc2l0aW9uLFxyXG4gICAgICBzZXRDYW1lcmFQb3NpdGlvbixcclxuICAgICAgc2V0Vmlld2VyU2l6ZSxcclxuICAgIH0gPSBwcm9wcztcclxuXHJcbiAgICBjb25zdCBbc2hhZGVyQ29tcGlsZUVycm9ycywgc2V0U2hhZGVyQ29tcGlsZUVycm9yc10gPSBSZWFjdC51c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IFtzZWxlY3RlZFZlcnRleEZpbGVUZXh0LCBzZXRTZWxlY3RlZFZlcnRleEZpbGVUZXh0XSA9IFJlYWN0LnVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW3NlbGVjdGVkRnJhZ21lbnRGaWxlVGV4dCwgc2V0U2VsZWN0ZWRGcmFnbWVudEZpbGVUZXh0XSA9IFJlYWN0LnVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW2F0dHJpYnV0ZUJ1ZmZlckZpZWxkc0luZm8sIHNldEF0dHJpYnV0ZUJ1ZmZlckZpZWxkc0luZm9dID0gUmVhY3QudXNlU3RhdGU8XHJcbiAgICAgIEF0dHJpYnV0ZUJ1ZmZlckZpZWxkSW5mb1tdXHJcbiAgICA+KFtdKTtcclxuICAgIGNvbnN0IFt1bmlmb3JtRmllbGRzSW5mbywgc2V0VW5pZm9ybUZpZWxkc0luZm9dID0gUmVhY3QudXNlU3RhdGU8XHJcbiAgICAgIHsgbmFtZTogc3RyaW5nOyB0eXBlOiBVbmlmb3JtVHlwZSB9W11cclxuICAgID4oW10pO1xyXG4gICAgY29uc3QgW3RleHR1cmVGaWVsZHNJbmZvLCBzZXRUZXh0dXJlRmllbGRzSW5mb10gPSBSZWFjdC51c2VTdGF0ZTxUZXh0dXJlRmllbGRJbmZvW10+KFtdKTtcclxuICAgIGNvbnN0IGNvbnRlbnRSZWYgPSBSZWFjdC51c2VSZWY8SFRNTERpdkVsZW1lbnQ+KG51bGwpO1xyXG4gICAgY29uc3QgY2FudmFzUmVmID0gUmVhY3QudXNlUmVmPEhUTUxDYW52YXNFbGVtZW50PihudWxsKTtcclxuICAgIGNvbnN0IGNvbnRleHRSZWYgPSBSZWFjdC51c2VSZWY8V2ViR0xSZW5kZXJpbmdDb250ZXh0PihudWxsKTtcclxuICAgIGNvbnN0IGluZGV4QnVmZmVySW5mb1JlZiA9IFJlYWN0LnVzZVJlZjxJbmRleEJ1ZmZlckluZm8+KG51bGwpO1xyXG4gICAgY29uc3QgYW5pbWF0aW9uRnJhbWVIYW5kbGVSZWYgPSBSZWFjdC51c2VSZWY8bnVtYmVyIHwgbnVsbD4obnVsbCk7XHJcblxyXG4gICAgLy9zdGFydHVwXHJcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICBjb250ZXh0UmVmLmN1cnJlbnQgPSBjYW52YXNSZWYuY3VycmVudC5nZXRDb250ZXh0KFwid2ViZ2xcIik7XHJcblxyXG4gICAgICBpZiAoIWNvbnRleHRSZWYuY3VycmVudCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuYWJsZSB0byBjcmVhdGUgd2ViZ2wgY29udGV4dFwiKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaW5kZXhCdWZmZXJJbmZvUmVmLmN1cnJlbnQgPSBuZXcgSW5kZXhCdWZmZXJJbmZvKGNvbnRleHRSZWYuY3VycmVudCk7XHJcblxyXG4gICAgICBvYnNlcnZlRWxlbWVudEJvdW5kaW5nUmVjdChjb250ZW50UmVmLmN1cnJlbnQsIHJlY3QgPT4ge1xyXG4gICAgICAgIGNhbnZhc1JlZi5jdXJyZW50LndpZHRoID0gcmVjdC53aWR0aDtcclxuICAgICAgICBjYW52YXNSZWYuY3VycmVudC5oZWlnaHQgPSByZWN0LmhlaWdodDtcclxuICAgICAgICBzZXRWaWV3ZXJTaXplKHsgLi4ucmVjdCB9KTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICB2aWV3ZXJFbmRwb2ludC5zaG93V2ViVmlld0RldlRvb2xzKCk7XHJcbiAgICB9LCBbXSk7XHJcblxyXG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgaWYgKCFzZWxlY3RlZFZlcnRleEZpbGVUZXh0IHx8ICFzZWxlY3RlZEZyYWdtZW50RmlsZVRleHQpIHJldHVybjtcclxuXHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGNvbXBpbGVTaGFkZXJzRnJvbVNvdXJjZShcclxuICAgICAgICBjb250ZXh0UmVmLmN1cnJlbnQsXHJcbiAgICAgICAgc2VsZWN0ZWRWZXJ0ZXhGaWxlVGV4dCxcclxuICAgICAgICBzZWxlY3RlZEZyYWdtZW50RmlsZVRleHRcclxuICAgICAgKTtcclxuXHJcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlc3VsdCkpIHtcclxuICAgICAgICBzZXRTaGFkZXJDb21waWxlRXJyb3JzKGZvcm1hdFNoYWRlckNvbXBpbGVFcnJvcnMocmVzdWx0KSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc2V0U2hhZGVyQ29tcGlsZUVycm9ycyhcIlwiKTtcclxuICAgICAgICBjb25zdCBwcm9ncmFtID0gcmVzdWx0O1xyXG4gICAgICAgIGNvbnN0IHByb2dyYW1Vbmlmb3JtcyA9IGdldFByb2dyYW1Vbmlmb3Jtcyhjb250ZXh0UmVmLmN1cnJlbnQsIHByb2dyYW0pO1xyXG4gICAgICAgIGNvbnN0IHByb2dyYW1BdHRyaWJ1dGVCdWZmZXJzID0gZ2V0UHJvZ3JhbUF0dHJpYnV0ZUJ1ZmZlcnMoY29udGV4dFJlZi5jdXJyZW50LCBwcm9ncmFtKTtcclxuICAgICAgICBzZXRVbmlmb3JtRmllbGRzSW5mbyhwcm9ncmFtVW5pZm9ybXMuZGF0YVVuaWZvcm1zKTtcclxuICAgICAgICBzZXRUZXh0dXJlRmllbGRzSW5mbyhwcm9ncmFtVW5pZm9ybXMudGV4dHVyZVVuaWZvcm1zKTtcclxuICAgICAgICBzZXRBdHRyaWJ1dGVCdWZmZXJGaWVsZHNJbmZvKHByb2dyYW1BdHRyaWJ1dGVCdWZmZXJzKTtcclxuICAgICAgICBjb25zdCBhdHRyaWJ1dGVCdWZmZXJJbmZvcyA9IGNyZWF0ZUF0dHJpYnV0ZUJ1ZmZlckluZm9zKFxyXG4gICAgICAgICAgY29udGV4dFJlZi5jdXJyZW50LFxyXG4gICAgICAgICAgcHJvZ3JhbSxcclxuICAgICAgICAgIHByb2dyYW1BdHRyaWJ1dGVCdWZmZXJzXHJcbiAgICAgICAgKTtcclxuICAgICAgICBjb25zdCB1bmlmb3JtSW5mb3MgPSBjcmVhdGVVbmlmb3JtSW5mb3MoXHJcbiAgICAgICAgICBjb250ZXh0UmVmLmN1cnJlbnQsXHJcbiAgICAgICAgICBwcm9ncmFtLFxyXG4gICAgICAgICAgcHJvZ3JhbVVuaWZvcm1zLmRhdGFVbmlmb3Jtc1xyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHNldFdlYkdMRnJvbVN0YXRlKCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHJlbmRlciA9ICgpID0+IHtcclxuICAgICAgICAgIGNvbnN0IHsgZHJhd01vZGUgfSA9IHN0b3JlLmdldFN0YXRlKCk7XHJcbiAgICAgICAgICByZW5kZXJQcm9ncmFtKFxyXG4gICAgICAgICAgICBjb250ZXh0UmVmLmN1cnJlbnQsXHJcbiAgICAgICAgICAgIHByb2dyYW0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICB1bmlmb3JtSW5mb3M6IHVuaWZvcm1JbmZvcyxcclxuICAgICAgICAgICAgICB0ZXh0dXJlSW5mb3M6IFtdLFxyXG4gICAgICAgICAgICAgIGF0dHJpYnV0ZUJ1ZmZlckluZm9zLFxyXG4gICAgICAgICAgICAgIGluZGV4QnVmZmVySW5mbzogaW5kZXhCdWZmZXJJbmZvUmVmLmN1cnJlbnQsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHsgZHJhd01vZGUgfVxyXG4gICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICBhbmltYXRpb25GcmFtZUhhbmRsZVJlZi5jdXJyZW50ID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlbmRlcik7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmVuZGVyKCk7XHJcblxyXG4gICAgICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhcImRlbGV0aW5nIHByb2dcIik7XHJcblxyXG4gICAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoYW5pbWF0aW9uRnJhbWVIYW5kbGVSZWYuY3VycmVudCk7XHJcbiAgICAgICAgICBjb250ZXh0UmVmLmN1cnJlbnQuZGVsZXRlUHJvZ3JhbShyZXN1bHQpO1xyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuICAgIH0sIFtzZWxlY3RlZFZlcnRleEZpbGVUZXh0LCBzZWxlY3RlZEZyYWdtZW50RmlsZVRleHRdKTtcclxuXHJcbiAgICB1c2VQZXJzcGVjdGl2ZUNhbWVyYShjb250ZW50UmVmLmN1cnJlbnQsIGNhbWVyYVBvc2l0aW9uLCBzZXRDYW1lcmFQb3NpdGlvbik7XHJcbiAgICB1c2VEb2N1bWVudFdhdGNoZXIoc2VsZWN0ZWRWZXJ0ZXhGaWxlSWQsIHNldFNlbGVjdGVkVmVydGV4RmlsZVRleHQpO1xyXG4gICAgdXNlRG9jdW1lbnRXYXRjaGVyKHNlbGVjdGVkRnJhZ21lbnRGaWxlSWQsIHNldFNlbGVjdGVkRnJhZ21lbnRGaWxlVGV4dCk7XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ2aWV3ZXItZ3JpZFwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidmlld2VyLW9wdGlvbnNcIj5cclxuICAgICAgICAgIDxTaGFkZXJzU2VsZWN0b3JTZWN0aW9uPjwvU2hhZGVyc1NlbGVjdG9yU2VjdGlvbj5cclxuICAgICAgICAgIDxEcmF3T3B0aW9uc1NlY3Rpb24+PC9EcmF3T3B0aW9uc1NlY3Rpb24+XHJcbiAgICAgICAgICB7dW5pZm9ybUZpZWxkc0luZm8ubGVuZ3RoID4gMCAmJiAoXHJcbiAgICAgICAgICAgIDxVbmlmb3JtU2VjdGlvbiB1bmlmb3JtRmllbGRzPXt1bmlmb3JtRmllbGRzSW5mb30+PC9Vbmlmb3JtU2VjdGlvbj5cclxuICAgICAgICAgICl9XHJcbiAgICAgICAgICB7YXR0cmlidXRlQnVmZmVyRmllbGRzSW5mby5sZW5ndGggPiAwICYmIChcclxuICAgICAgICAgICAgPEF0dHJpYnV0ZUJ1ZmZlcnNTZWN0aW9uXHJcbiAgICAgICAgICAgICAgYXR0cmlidXRlQnVmZmVyRmllbGRzPXthdHRyaWJ1dGVCdWZmZXJGaWVsZHNJbmZvfVxyXG4gICAgICAgICAgICA+PC9BdHRyaWJ1dGVCdWZmZXJzU2VjdGlvbj5cclxuICAgICAgICAgICl9XHJcbiAgICAgICAgICB7dGV4dHVyZUZpZWxkc0luZm8ubGVuZ3RoID4gMCAmJiAoXHJcbiAgICAgICAgICAgIDxUZXh0dXJlU2VjdGlvbiB0ZXh0dXJlRmllbGRzPXt0ZXh0dXJlRmllbGRzSW5mb30+PC9UZXh0dXJlU2VjdGlvbj5cclxuICAgICAgICAgICl9XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiByZWY9e2NvbnRlbnRSZWZ9IGNsYXNzTmFtZT1cInZpZXdlci1jb250ZW50XCI+XHJcbiAgICAgICAgICB7c2hhZGVyQ29tcGlsZUVycm9ycyAmJiAoXHJcbiAgICAgICAgICAgIDxTaGFkZXJzQ29tcGlsZVJlc3VsdEFyZWEgZXJyb3JzPXtzaGFkZXJDb21waWxlRXJyb3JzfT48L1NoYWRlcnNDb21waWxlUmVzdWx0QXJlYT5cclxuICAgICAgICAgICl9XHJcbiAgICAgICAgICA8Y2FudmFzIGNsYXNzTmFtZT1cInZpZXdlci1jYW52YXNcIiByZWY9e2NhbnZhc1JlZn0+PC9jYW52YXM+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxuICB9XHJcbik7XHJcbiIsIi8vaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIxMTc1MjNcclxuZXhwb3J0IGNvbnN0IHV1aWR2NCA9ICgpID0+IHtcclxuICByZXR1cm4gXCJ4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHhcIi5yZXBsYWNlKC9beHldL2csIGZ1bmN0aW9uIChjKSB7XHJcbiAgICB2YXIgciA9IChNYXRoLnJhbmRvbSgpICogMTYpIHwgMCxcclxuICAgICAgdiA9IGMgPT0gXCJ4XCIgPyByIDogKHIgJiAweDMpIHwgMHg4O1xyXG4gICAgcmV0dXJuIHYudG9TdHJpbmcoMTYpO1xyXG4gIH0pO1xyXG59O1xyXG4iLCJleHBvcnQgY29uc3Qgb2JzZXJ2ZUVsZW1lbnRCb3VuZGluZ1JlY3QgPSAoXHJcbiAgZWxlbWVudDogRWxlbWVudCxcclxuICBjYWxsYmFjazogKHJlY3RhbmdsZToge1xyXG4gICAgeDogbnVtYmVyO1xyXG4gICAgeTogbnVtYmVyO1xyXG4gICAgd2lkdGg6IG51bWJlcjtcclxuICAgIGhlaWdodDogbnVtYmVyO1xyXG4gIH0pID0+IHZvaWRcclxuKTogKCgpID0+IHZvaWQpID0+IHtcclxuICBjb25zdCByZXNpemVPYnNlcnZlciA9IG5ldyBSZXNpemVPYnNlcnZlcihlbGVtZW50cyA9PiB7XHJcbiAgICBjb25zdCBvYnNlcnZlckVudHJ5ID0gZWxlbWVudHMuZmluZChlID0+IGUudGFyZ2V0ID09PSBlbGVtZW50KTtcclxuXHJcbiAgICBpZiAob2JzZXJ2ZXJFbnRyeSkge1xyXG4gICAgICBjb25zdCBkb21SZWN0ID0gb2JzZXJ2ZXJFbnRyeS50YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgIGNhbGxiYWNrKHtcclxuICAgICAgICB4OiBkb21SZWN0LngsXHJcbiAgICAgICAgeTogZG9tUmVjdC55LFxyXG4gICAgICAgIHdpZHRoOiBkb21SZWN0LndpZHRoLFxyXG4gICAgICAgIGhlaWdodDogZG9tUmVjdC5oZWlnaHQsXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICByZXNpemVPYnNlcnZlci5vYnNlcnZlKGVsZW1lbnQpO1xyXG4gIHJldHVybiAoKSA9PiByZXNpemVPYnNlcnZlci5kaXNjb25uZWN0KCk7XHJcbn07XHJcbiIsImltcG9ydCB7IFRleHR1cmVJbmZvIH0gZnJvbSBcIi4vdGV4dHVyZUluZm9cIjtcclxuaW1wb3J0IHsgSW5kZXhCdWZmZXJJbmZvIH0gZnJvbSBcIi4vaW5kZXhCdWZmZXJcIjtcclxuaW1wb3J0IHsgcmVtb3ZlTGFzdCB9IGZyb20gXCIuLi8uLi8uLi8uLi9jb21tb24vYXJyYXlcIjtcclxuaW1wb3J0IHsgaGFzUHJvcGVydHkgfSBmcm9tIFwiLi4vdHlwZUd1YXJkc1wiO1xyXG5pbXBvcnQgeyBBdHRyaWJ1dGVCdWZmZXJJbmZvLCBBdHRyaWJ1dGVCdWZmZXJUeXBlIH0gZnJvbSBcIi4vYXR0cmlidXRlQnVmZmVyXCI7XHJcbmltcG9ydCB7IFVuaWZvcm1JbmZvLCBVbmlmb3JtVHlwZSB9IGZyb20gXCIuL3VuaWZvcm1cIjtcclxuXHJcbmV4cG9ydCB0eXBlIERyYXdNb2RlID0gXCJlbGVtZW50c1wiIHwgXCJhcnJheXNcIjtcclxuZXhwb3J0IHR5cGUgRHJhd09wdGlvbnMgPSB7XHJcbiAgZHJhd01vZGU6IERyYXdNb2RlO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGNvbXBpbGVTaGFkZXIgPSAoXHJcbiAgcmVuZGVyaW5nQ29udGV4dDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LFxyXG4gIHR5cGU6IEdMZW51bSxcclxuICBzb3VyY2U6IHN0cmluZ1xyXG4pOiBXZWJHTFNoYWRlciB8IHsgZXJyb3I6IHN0cmluZyB9ID0+IHtcclxuICBjb25zdCBzaGFkZXIgPSByZW5kZXJpbmdDb250ZXh0LmNyZWF0ZVNoYWRlcih0eXBlKTtcclxuICByZW5kZXJpbmdDb250ZXh0LnNoYWRlclNvdXJjZShzaGFkZXIsIHNvdXJjZSk7XHJcbiAgcmVuZGVyaW5nQ29udGV4dC5jb21waWxlU2hhZGVyKHNoYWRlcik7XHJcblxyXG4gIGNvbnN0IHJlc3VsdCA9IHJlbmRlcmluZ0NvbnRleHQuZ2V0U2hhZGVyUGFyYW1ldGVyKHNoYWRlciwgcmVuZGVyaW5nQ29udGV4dC5DT01QSUxFX1NUQVRVUyk7XHJcblxyXG4gIGlmIChyZXN1bHQpIHtcclxuICAgIHJldHVybiBzaGFkZXI7XHJcbiAgfSBlbHNlIHtcclxuICAgIGNvbnN0IGVycm9yID0gcmVuZGVyaW5nQ29udGV4dC5nZXRTaGFkZXJJbmZvTG9nKHNoYWRlcik7XHJcbiAgICByZW5kZXJpbmdDb250ZXh0LmRlbGV0ZVNoYWRlcihzaGFkZXIpO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgZXJyb3IsXHJcbiAgICB9O1xyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBjb21waWxlU2hhZGVyc0Zyb21Tb3VyY2UgPSAoXHJcbiAgY29udGV4dDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LFxyXG4gIHZlcnRleFNoYWRlckNvbnRlbnQ6IHN0cmluZyxcclxuICBmcmFnbWVudFNoYWRlckNvbnRlbnQ6IHN0cmluZ1xyXG4pOiBXZWJHTFByb2dyYW0gfCBTaGFkZXJDb21waWxlRXJyb3JzID0+IHtcclxuICBjb25zdCB2ZXJ0ZXhTaGFkZXIgPSBjb21waWxlU2hhZGVyKGNvbnRleHQsIGNvbnRleHQuVkVSVEVYX1NIQURFUiwgdmVydGV4U2hhZGVyQ29udGVudCk7XHJcblxyXG4gIGNvbnN0IGZyYWdtZW50U2hhZGVyID0gY29tcGlsZVNoYWRlcihjb250ZXh0LCBjb250ZXh0LkZSQUdNRU5UX1NIQURFUiwgZnJhZ21lbnRTaGFkZXJDb250ZW50KTtcclxuXHJcbiAgbGV0IHZlcnRleEVycm9yOiBzdHJpbmcgPSB1bmRlZmluZWQ7XHJcbiAgaWYgKGhhc1Byb3BlcnR5KHZlcnRleFNoYWRlciwgXCJlcnJvclwiKSkge1xyXG4gICAgdmVydGV4RXJyb3IgPSByZW1vdmVMYXN0KHZlcnRleFNoYWRlci5lcnJvciwgMSk7XHJcbiAgfVxyXG5cclxuICBsZXQgZnJhZ21lbnRFcnJvcjogc3RyaW5nID0gdW5kZWZpbmVkO1xyXG4gIGlmIChoYXNQcm9wZXJ0eShmcmFnbWVudFNoYWRlciwgXCJlcnJvclwiKSkge1xyXG4gICAgZnJhZ21lbnRFcnJvciA9IHJlbW92ZUxhc3QoZnJhZ21lbnRTaGFkZXIuZXJyb3IsIDEpO1xyXG4gIH1cclxuXHJcbiAgaWYgKHZlcnRleEVycm9yIHx8IGZyYWdtZW50RXJyb3IpIHtcclxuICAgIC8vdG9kbyBjbGVhbnVwXHJcbiAgICByZXR1cm4gW3ZlcnRleEVycm9yLCBmcmFnbWVudEVycm9yXSBhcyBTaGFkZXJDb21waWxlRXJyb3JzO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGNyZWF0ZVByb2dyYW0oY29udGV4dCwgdmVydGV4U2hhZGVyLCBmcmFnbWVudFNoYWRlcik7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgY3JlYXRlUHJvZ3JhbSA9IChcclxuICByZW5kZXJpbmdDb250ZXh0OiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsXHJcbiAgdmVydGV4U2hhZGVyOiBXZWJHTFNoYWRlcixcclxuICBmcmFnbWVudFNoYWRlcjogV2ViR0xTaGFkZXJcclxuKSA9PiB7XHJcbiAgY29uc3QgcHJvZ3JhbSA9IHJlbmRlcmluZ0NvbnRleHQuY3JlYXRlUHJvZ3JhbSgpO1xyXG4gIHJlbmRlcmluZ0NvbnRleHQuYXR0YWNoU2hhZGVyKHByb2dyYW0sIHZlcnRleFNoYWRlcik7XHJcbiAgcmVuZGVyaW5nQ29udGV4dC5hdHRhY2hTaGFkZXIocHJvZ3JhbSwgZnJhZ21lbnRTaGFkZXIpO1xyXG4gIHJlbmRlcmluZ0NvbnRleHQubGlua1Byb2dyYW0ocHJvZ3JhbSk7XHJcblxyXG4gIGNvbnN0IHJlc3VsdCA9IHJlbmRlcmluZ0NvbnRleHQuZ2V0UHJvZ3JhbVBhcmFtZXRlcihwcm9ncmFtLCByZW5kZXJpbmdDb250ZXh0LkxJTktfU1RBVFVTKTtcclxuXHJcbiAgaWYgKHJlc3VsdCkge1xyXG4gICAgcmV0dXJuIHByb2dyYW07XHJcbiAgfSBlbHNlIHtcclxuICAgIGNvbnN0IGluZm9Mb2cgPSByZW5kZXJpbmdDb250ZXh0LmdldFByb2dyYW1JbmZvTG9nKHByb2dyYW0pO1xyXG4gICAgcmVuZGVyaW5nQ29udGV4dC5kZWxldGVQcm9ncmFtKHByb2dyYW0pO1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKGBDcmVhdGluZyBwcm9ncmFtIGZhaWxlZDogJHtpbmZvTG9nfWApO1xyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRQcm9ncmFtVW5pZm9ybXMgPSAoXHJcbiAgY29udGV4dDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LFxyXG4gIHByb2dyYW06IFdlYkdMUHJvZ3JhbVxyXG4pOiB7XHJcbiAgZGF0YVVuaWZvcm1zOiB7IG5hbWU6IHN0cmluZzsgdHlwZTogVW5pZm9ybVR5cGUgfVtdO1xyXG4gIHRleHR1cmVVbmlmb3JtczogeyBuYW1lOiBzdHJpbmc7IHVuaXQ6IG51bWJlciB9W107XHJcbn0gPT4ge1xyXG4gIGNvbnN0IG51bVVuaWZvcm1zID0gY29udGV4dC5nZXRQcm9ncmFtUGFyYW1ldGVyKHByb2dyYW0sIGNvbnRleHQuQUNUSVZFX1VOSUZPUk1TKTtcclxuICBjb25zdCBkYXRhVW5pZm9ybXM6IHsgbmFtZTogc3RyaW5nOyB0eXBlOiBVbmlmb3JtVHlwZSB9W10gPSBbXTtcclxuICBjb25zdCB0ZXh0dXJlVW5pZm9ybXM6IHsgbmFtZTogc3RyaW5nOyB1bml0OiBudW1iZXIgfVtdID0gW107XHJcblxyXG4gIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBudW1Vbmlmb3JtczsgKytpbmRleCkge1xyXG4gICAgY29uc3QgdW5pZm9ybSA9IGNvbnRleHQuZ2V0QWN0aXZlVW5pZm9ybShwcm9ncmFtLCBpbmRleCk7XHJcblxyXG4gICAgLy9zYW1wbGVyMkRcclxuICAgIGlmICh1bmlmb3JtLnR5cGUgPT09IDM1Njc4KSB7XHJcbiAgICAgIHRleHR1cmVVbmlmb3Jtcy5wdXNoKHtcclxuICAgICAgICBuYW1lOiB1bmlmb3JtLm5hbWUsXHJcbiAgICAgICAgdW5pdDogdGV4dHVyZVVuaWZvcm1zLmxlbmd0aCxcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2UgZGF0YVVuaWZvcm1zLnB1c2goeyBuYW1lOiB1bmlmb3JtLm5hbWUsIHR5cGU6IHVuaWZvcm0udHlwZSB9KTtcclxuICB9XHJcblxyXG4gIHJldHVybiB7IGRhdGFVbmlmb3JtcywgdGV4dHVyZVVuaWZvcm1zIH07XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0UHJvZ3JhbUF0dHJpYnV0ZUJ1ZmZlcnMgPSAoXHJcbiAgY29udGV4dDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LFxyXG4gIHByb2dyYW06IFdlYkdMUHJvZ3JhbVxyXG4pID0+IHtcclxuICBjb25zdCBudW1BdHRyaWJ1dGVCdWZmZXJzID0gY29udGV4dC5nZXRQcm9ncmFtUGFyYW1ldGVyKHByb2dyYW0sIGNvbnRleHQuQUNUSVZFX0FUVFJJQlVURVMpO1xyXG5cclxuICBjb25zdCByZXN1bHQ6IHsgbmFtZTogc3RyaW5nOyB0eXBlOiBBdHRyaWJ1dGVCdWZmZXJUeXBlIH1bXSA9IFtdO1xyXG5cclxuICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgbnVtQXR0cmlidXRlQnVmZmVyczsgKytpbmRleCkge1xyXG4gICAgY29uc3QgYXR0cmlidXRlQnVmZmVyID0gY29udGV4dC5nZXRBY3RpdmVBdHRyaWIocHJvZ3JhbSwgaW5kZXgpO1xyXG4gICAgcmVzdWx0LnB1c2goeyBuYW1lOiBhdHRyaWJ1dGVCdWZmZXIubmFtZSwgdHlwZTogYXR0cmlidXRlQnVmZmVyLnR5cGUgfSk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gcmVzdWx0O1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHJlbmRlclByb2dyYW0gPSAoXHJcbiAgY29udGV4dDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LFxyXG4gIHByb2dyYW06IFdlYkdMUHJvZ3JhbSxcclxuICByZW5kZXJJbmZvOiB7XHJcbiAgICB1bmlmb3JtSW5mb3M6IFVuaWZvcm1JbmZvW107XHJcbiAgICB0ZXh0dXJlSW5mb3M6IFRleHR1cmVJbmZvW107XHJcbiAgICBhdHRyaWJ1dGVCdWZmZXJJbmZvczogQXR0cmlidXRlQnVmZmVySW5mb1tdO1xyXG4gICAgaW5kZXhCdWZmZXJJbmZvOiBJbmRleEJ1ZmZlckluZm87XHJcbiAgfSxcclxuICBkcmF3T3B0aW9uczogRHJhd09wdGlvbnNcclxuKSA9PiB7XHJcbiAgLy90b2RvXHJcbiAgY29udGV4dC51c2VQcm9ncmFtKHByb2dyYW0pO1xyXG4gIGNvbnRleHQudmlld3BvcnQoMCwgMCwgY29udGV4dC5jYW52YXMud2lkdGgsIGNvbnRleHQuY2FudmFzLmhlaWdodCk7XHJcbiAgLy9jb250ZXh0LmNsZWFyQ29sb3IoMCwgMCwgMCwgMCk7XHJcbiAgY29udGV4dC5jbGVhckNvbG9yKDAuMCwgMC4wLCAwLjAsIDEuMCk7IC8vIENsZWFyIHRvIGJsYWNrLCBmdWxseSBvcGFxdWVcclxuICBjb250ZXh0LmNsZWFyRGVwdGgoMS4wKTsgLy8gQ2xlYXIgZXZlcnl0aGluZ1xyXG4gIC8vIGdsLmVuYWJsZShnbC5ERVBUSF9URVNUKTsgICAgICAgICAgIC8vIEVuYWJsZSBkZXB0aCB0ZXN0aW5nXHJcbiAgY29udGV4dC5lbmFibGUoY29udGV4dC5ERVBUSF9URVNUKTtcclxuXHJcbiAgY29udGV4dC5kZXB0aEZ1bmMoY29udGV4dC5MRVFVQUwpOyAvLyBOZWFyIHRoaW5ncyBvYnNjdXJlIGZhciB0aGluZ3NcclxuICBjb250ZXh0LmNsZWFyKGNvbnRleHQuQ09MT1JfQlVGRkVSX0JJVCB8IGNvbnRleHQuREVQVEhfQlVGRkVSX0JJVCk7XHJcbiAgLy9jb250ZXh0LmVuYWJsZShjb250ZXh0LkNVTExfRkFDRSk7XHJcblxyXG4gIHJlbmRlckluZm8udW5pZm9ybUluZm9zLmZvckVhY2godSA9PiB1LnByZXBhcmVGb3JSZW5kZXIoKSk7XHJcbiAgcmVuZGVySW5mby50ZXh0dXJlSW5mb3MuZm9yRWFjaCh1ID0+IHUucHJlcGFyZUZvclJlbmRlcigpKTtcclxuICByZW5kZXJJbmZvLmF0dHJpYnV0ZUJ1ZmZlckluZm9zLmZvckVhY2goYWIgPT4gYWIuc2V0QXR0cmlidXRlQnVmZmVyKCkpO1xyXG5cclxuICBjb25zdCBwcmltaXRpdmVUeXBlID0gY29udGV4dC5UUklBTkdMRVM7XHJcbiAgY29uc3Qgb2Zmc2V0ID0gMDtcclxuXHJcbiAgaWYgKGRyYXdPcHRpb25zLmRyYXdNb2RlID09PSBcImFycmF5c1wiKSB7XHJcbiAgICBjb25zdCBudW1FbGVtZW50cyA9IE1hdGgubWluKC4uLnJlbmRlckluZm8uYXR0cmlidXRlQnVmZmVySW5mb3MubWFwKGFiID0+IGFiLmdldENvdW50KCkpKTtcclxuICAgIGNvbnRleHQuZHJhd0FycmF5cyhwcmltaXRpdmVUeXBlLCBvZmZzZXQsIG51bUVsZW1lbnRzKTtcclxuICB9IGVsc2Uge1xyXG4gICAgcmVuZGVySW5mby5pbmRleEJ1ZmZlckluZm8uc2V0SW5kZXhCdWZmZXIoKTtcclxuICAgIGNvbnRleHQuZHJhd0VsZW1lbnRzKFxyXG4gICAgICBwcmltaXRpdmVUeXBlLFxyXG4gICAgICByZW5kZXJJbmZvLmluZGV4QnVmZmVySW5mby5nZXRDb3VudCgpLCAvL251bUVsZW1lbnRzLFxyXG4gICAgICBjb250ZXh0LlVOU0lHTkVEX1NIT1JULFxyXG4gICAgICBvZmZzZXRcclxuICAgICk7XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgU2hhZGVyQ29tcGlsZUVycm9ycyA9IFt2ZXJ0ZXhTaGFkZXJFcnJvcnM6IHN0cmluZywgZnJhZ21lbnRTaGFkZXJFcnJvcnM6IHN0cmluZ107XHJcbmV4cG9ydCBjb25zdCBmb3JtYXRTaGFkZXJDb21waWxlRXJyb3JzID0gKHJlc3VsdDogU2hhZGVyQ29tcGlsZUVycm9ycykgPT4ge1xyXG4gIGNvbnN0IFt2ZXJ0ZXhTaGFkZXJFcnJvcnMsIGZyYWdtZW50U2hhZGVyRXJyb3JzXSA9IHJlc3VsdDtcclxuXHJcbiAgY29uc3QgZXJyb3JzOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuICBpZiAodmVydGV4U2hhZGVyRXJyb3JzKSB7XHJcbiAgICBlcnJvcnMucHVzaChcIlZFUlRFWCBTSEFERVI6XCIsIHZlcnRleFNoYWRlckVycm9ycyk7XHJcbiAgfVxyXG5cclxuICBpZiAoZnJhZ21lbnRTaGFkZXJFcnJvcnMpIHtcclxuICAgIGVycm9ycy5wdXNoKFwiRlJBR01FTlQgU0hBREVSOlwiLCBmcmFnbWVudFNoYWRlckVycm9ycyk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gZXJyb3JzLmpvaW4oXCJcXHJcXG5cIik7XHJcbn07XHJcbiIsImV4cG9ydCBjbGFzcyBJbmRleEJ1ZmZlckluZm8ge1xyXG4gIHByaXZhdGUgYnVmZmVyOiBXZWJHTEJ1ZmZlciB8IG51bGw7XHJcbiAgcHJpdmF0ZSBjb3VudDogbnVtYmVyID0gMDtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjb250ZXh0OiBXZWJHTFJlbmRlcmluZ0NvbnRleHQpIHtcclxuICAgIHRoaXMuYnVmZmVyID0gY29udGV4dC5jcmVhdGVCdWZmZXIoKTtcclxuICB9XHJcblxyXG4gIHNldFZhbHVlKG5ld1ZhbHVlOiBudW1iZXJbXSkge1xyXG4gICAgdGhpcy5jb3VudCA9IG5ld1ZhbHVlLmxlbmd0aDtcclxuICAgIHRoaXMuY29udGV4dC5iaW5kQnVmZmVyKHRoaXMuY29udGV4dC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgdGhpcy5idWZmZXIpO1xyXG4gICAgdGhpcy5jb250ZXh0LmJ1ZmZlckRhdGEoXHJcbiAgICAgIHRoaXMuY29udGV4dC5FTEVNRU5UX0FSUkFZX0JVRkZFUixcclxuICAgICAgbmV3IFVpbnQxNkFycmF5KG5ld1ZhbHVlKSxcclxuICAgICAgdGhpcy5jb250ZXh0LlNUQVRJQ19EUkFXXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgc2V0SW5kZXhCdWZmZXIoKSB7XHJcbiAgICB0aGlzLmNvbnRleHQuYmluZEJ1ZmZlcih0aGlzLmNvbnRleHQuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIHRoaXMuYnVmZmVyKTtcclxuICB9XHJcblxyXG4gIGdldENvdW50KCkge1xyXG4gICAgcmV0dXJuIHRoaXMuY291bnQ7XHJcbiAgfVxyXG5cclxuICBkZWxldGVCdWZmZXIoKSB7XHJcbiAgICB0aGlzLmNvbnRleHQuZGVsZXRlQnVmZmVyKHRoaXMuYnVmZmVyKTtcclxuICAgIHRoaXMuYnVmZmVyID0gbnVsbDtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IFJlYWN0LCB7IERpc3BhdGNoIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcclxuaW1wb3J0IHsgbWVzaGVzIH0gZnJvbSBcIi4uL21lc2hlc1wiO1xyXG5pbXBvcnQgeyBWaWV3ZXJBY3Rpb24gfSBmcm9tIFwiLi4vc3RvcmUvYWN0aW9uc1wiO1xyXG5pbXBvcnQgeyBWaWV3ZXJTdGF0ZSB9IGZyb20gXCIuLi9zdG9yZS9zdGF0ZVwiO1xyXG5pbXBvcnQgeyB0cmFuc2xhdGlvbnMgfSBmcm9tIFwiLi4vdHJhbnNsYXRpb25zXCI7XHJcbmltcG9ydCB7IERyYXdNb2RlLCBEcmF3T3B0aW9ucyB9IGZyb20gXCIuLi91dGlscy93ZWJnbFwiO1xyXG5pbXBvcnQgeyBEcm9wZG93biB9IGZyb20gXCIuL0Ryb3Bkb3duXCI7XHJcbmltcG9ydCB7IFNlY3Rpb25GaWVsZCB9IGZyb20gXCIuL1NlY3Rpb25GaWVsZFwiO1xyXG5pbXBvcnQgeyBTZWN0aW9uVGl0bGUgfSBmcm9tIFwiLi9TZWN0aW9uVGl0bGVcIjtcclxuXHJcbmNvbnN0IGRyYXdNb2RlT3B0aW9uczogeyBpZDogRHJhd01vZGU7IGRpc3BsYXk6IHN0cmluZyB9W10gPSBbXHJcbiAgeyBpZDogXCJhcnJheXNcIiwgZGlzcGxheTogXCJBcnJheXNcIiB9LFxyXG4gIHsgaWQ6IFwiZWxlbWVudHNcIiwgZGlzcGxheTogXCJFbGVtZW50c1wiIH0sXHJcbl07XHJcblxyXG5jb25zdCBtZXNoT3B0aW9ucyA9IEFycmF5LmZyb20obWVzaGVzLmVudHJpZXMoKSkubWFwKChba2V5LCB2YWx1ZV0pID0+ICh7XHJcbiAgaWQ6IGtleSxcclxuICBkaXNwbGF5OiB2YWx1ZS5kaXNwbGF5LFxyXG59KSk7XHJcblxyXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGU6IFZpZXdlclN0YXRlKSA9PiB7XHJcbiAgcmV0dXJuIHtcclxuICAgIGRyYXdNb2RlOiBzdGF0ZS5kcmF3TW9kZSxcclxuICAgIG1lc2hJZDogc3RhdGUubWVzaElkLFxyXG4gIH07XHJcbn07XHJcblxyXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSAoZGlzcGF0Y2g6IERpc3BhdGNoPFZpZXdlckFjdGlvbj4pID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAgc2V0RHJhd01vZGU6IChuZXdEcmF3TW9kZTogRHJhd01vZGUpID0+XHJcbiAgICAgIGRpc3BhdGNoKHsgdHlwZTogXCJTRVRfRFJBV19NT0RFXCIsIHBheWxvYWQ6IHsgbW9kZTogbmV3RHJhd01vZGUgfSB9KSxcclxuICAgIHNldE1lc2hJZDogKG5ld01lc2hJZDogc3RyaW5nKSA9PiBkaXNwYXRjaCh7IHR5cGU6IFwiU0VUX01FU0hcIiwgcGF5bG9hZDogeyBpZDogbmV3TWVzaElkIH0gfSksXHJcbiAgfTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBEcmF3T3B0aW9uc1NlY3Rpb24gPSBSZWFjdC5tZW1vKFxyXG4gIGNvbm5lY3QoXHJcbiAgICBtYXBTdGF0ZVRvUHJvcHMsXHJcbiAgICBtYXBEaXNwYXRjaFRvUHJvcHNcclxuICApKFxyXG4gICAgKHByb3BzOiB7XHJcbiAgICAgIGRyYXdNb2RlOiBEcmF3TW9kZTtcclxuICAgICAgbWVzaElkOiBzdHJpbmc7XHJcbiAgICAgIHNldERyYXdNb2RlOiAobmV3RHJhd01vZGU6IERyYXdNb2RlKSA9PiB2b2lkO1xyXG4gICAgICBzZXRNZXNoSWQ6IChuZXdNZXNoSWQ6IHN0cmluZykgPT4gdm9pZDtcclxuICAgIH0pID0+IHtcclxuICAgICAgY29uc3QgeyBkcmF3TW9kZSwgbWVzaElkLCBzZXREcmF3TW9kZSwgc2V0TWVzaElkIH0gPSBwcm9wcztcclxuICAgICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInZpZXdlci1vcHRpb25zLXNlY3Rpb25cIj5cclxuICAgICAgICAgIDxTZWN0aW9uVGl0bGUgdGV4dD17dHJhbnNsYXRpb25zLmRyYXdPcHRpb25zfT48L1NlY3Rpb25UaXRsZT5cclxuICAgICAgICAgIDxTZWN0aW9uRmllbGQgdGV4dD17XCJEcmF3IG1vZGVcIn0+XHJcbiAgICAgICAgICAgIDxEcm9wZG93blxyXG4gICAgICAgICAgICAgIHNlbGVjdGVkSXRlbUlkPXtkcmF3TW9kZX1cclxuICAgICAgICAgICAgICBvbkNoYW5nZT17c2V0RHJhd01vZGV9XHJcbiAgICAgICAgICAgICAgb3B0aW9ucz17ZHJhd01vZGVPcHRpb25zfVxyXG4gICAgICAgICAgICA+PC9Ecm9wZG93bj5cclxuICAgICAgICAgIDwvU2VjdGlvbkZpZWxkPlxyXG4gICAgICAgICAgPFNlY3Rpb25GaWVsZCB0ZXh0PXtcIk1lc2hcIn0+XHJcbiAgICAgICAgICAgIDxEcm9wZG93biBzZWxlY3RlZEl0ZW1JZD17bWVzaElkfSBvbkNoYW5nZT17c2V0TWVzaElkfSBvcHRpb25zPXttZXNoT3B0aW9uc30+PC9Ecm9wZG93bj5cclxuICAgICAgICAgIDwvU2VjdGlvbkZpZWxkPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gIClcclxuKTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XHJcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgb1trMl0gPSBtW2tdO1xyXG59KSk7XHJcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vQ29tcG9uZW50c1wiKSwgZXhwb3J0cyk7XHJcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9Ib29rc1wiKSwgZXhwb3J0cyk7XHJcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9Db21tb25cIiksIGV4cG9ydHMpO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcclxufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBvW2syXSA9IG1ba107XHJcbn0pKTtcclxudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9WaXJ0dWFsaXplZExpc3RcIiksIGV4cG9ydHMpO1xyXG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vVmlydHVhbGl6ZWRMYXp5TG9hZGluZ0xpc3RcIiksIGV4cG9ydHMpO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLlZpcnR1YWxpemVkTGlzdCA9IHZvaWQgMDtcclxudmFyIHJlYWN0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcclxudmFyIHJlYWN0X3dpbmRvd18xID0gcmVxdWlyZShcInJlYWN0LXdpbmRvd1wiKTtcclxudmFyIEhvb2tzXzEgPSByZXF1aXJlKFwiLi4vSG9va3NcIik7XHJcbnZhciBtZW1vaXplZFJvdyA9IHJlYWN0XzEuZGVmYXVsdC5tZW1vKGZ1bmN0aW9uIExpc3RSb3cocHJvcHMpIHtcclxuICAgIHZhciBpbmRleCA9IHByb3BzLmluZGV4LCBzdHlsZSA9IHByb3BzLnN0eWxlLCBpdGVtUmVuZGVyZXIgPSBwcm9wcy5kYXRhLml0ZW1SZW5kZXJlcjtcclxuICAgIHJldHVybiByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IHN0eWxlOiBzdHlsZSB9LCBpdGVtUmVuZGVyZXIoaW5kZXgpKTtcclxufSk7XHJcbmZ1bmN0aW9uIFZpcnR1YWxpemVkTGlzdChwcm9wcykge1xyXG4gICAgdmFyIGl0ZW1Db3VudCA9IHByb3BzLml0ZW1Db3VudCwgaXRlbUhlaWdodCA9IHByb3BzLml0ZW1IZWlnaHQsIG1heEhlaWdodCA9IHByb3BzLm1heEhlaWdodCwgaXRlbVJlbmRlcmVyID0gcHJvcHMuaXRlbVJlbmRlcmVyLCBfYSA9IHByb3BzLndpZHRoLCB3aWR0aCA9IF9hID09PSB2b2lkIDAgPyBcIjEwMCVcIiA6IF9hLCBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWU7XHJcbiAgICB2YXIgaGVpZ2h0ID0gTWF0aC5taW4oaXRlbUNvdW50ICogaXRlbUhlaWdodCwgbWF4SGVpZ2h0KTtcclxuICAgIHZhciBpdGVtRGF0YSA9IHJlYWN0XzEuZGVmYXVsdC51c2VNZW1vKGZ1bmN0aW9uICgpIHsgcmV0dXJuICh7XHJcbiAgICAgICAgaXRlbVJlbmRlcmVyOiBpdGVtUmVuZGVyZXIsXHJcbiAgICB9KTsgfSwgW2l0ZW1SZW5kZXJlcl0pO1xyXG4gICAgdmFyIGxpc3RSZWYgPSByZWFjdF8xLmRlZmF1bHQudXNlUmVmKG51bGwpO1xyXG4gICAgSG9va3NfMS51c2VTY3JvbGxMaXN0VG9JbmRleChsaXN0UmVmLCBwcm9wcy5oaWdobGlnaHRlZEluZGV4KTtcclxuICAgIHJldHVybiAocmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQocmVhY3Rfd2luZG93XzEuRml4ZWRTaXplTGlzdCwgeyBjbGFzc05hbWU6IGNsYXNzTmFtZSwgcmVmOiBsaXN0UmVmLCBoZWlnaHQ6IGhlaWdodCwgaXRlbUNvdW50OiBpdGVtQ291bnQsIGl0ZW1TaXplOiBpdGVtSGVpZ2h0LCB3aWR0aDogd2lkdGgsIGl0ZW1EYXRhOiBpdGVtRGF0YSB9LCBtZW1vaXplZFJvdykpO1xyXG59XHJcbmV4cG9ydHMuVmlydHVhbGl6ZWRMaXN0ID0gVmlydHVhbGl6ZWRMaXN0O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnVzZURyb3Bkb3duU3RhdGUgPSB2b2lkIDA7XHJcbnZhciByZWFjdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XHJcbnZhciByZWR1Y2VyXzEgPSByZXF1aXJlKFwiLi4vQ29tbW9uL3JlZHVjZXJcIik7XHJcbnZhciBoZWxwZXJzXzEgPSByZXF1aXJlKFwiLi4vQ29tbW9uL2hlbHBlcnNcIik7XHJcbnZhciB1c2VVbmlvblN0YXRlXzEgPSByZXF1aXJlKFwiLi91c2VVbmlvblN0YXRlXCIpO1xyXG52YXIgZGVmYXVsdEluaXRpYWxTdGF0ZSA9IHtcclxuICAgIHNlbGVjdGVkSW5kZXhlczogW10sXHJcbiAgICBoaWdobGlnaHRlZEluZGV4OiBudWxsLFxyXG4gICAgaXNPcGVuOiBmYWxzZSxcclxufTtcclxudmFyIGRlZmF1bHREcm9wZG93blJlZHVjZXIgPSBmdW5jdGlvbiAoc3RhdGUsIGl0ZW1Db3VudCwgYWN0aW9uKSB7IHJldHVybiByZWR1Y2VyXzEucmVkdWNlcihzdGF0ZSwgaXRlbUNvdW50LCBhY3Rpb24pOyB9O1xyXG5leHBvcnRzLnVzZURyb3Bkb3duU3RhdGUgPSBmdW5jdGlvbiAoaXRlbUNvdW50LCBleHRlcm5hbFN0YXRlLCBkZWZhdWx0SW50ZXJuYWxTdGF0ZSwgb25DaGFuZ2UsIHJlZHVjZXIpIHtcclxuICAgIGlmIChyZWR1Y2VyID09PSB2b2lkIDApIHsgcmVkdWNlciA9IGRlZmF1bHREcm9wZG93blJlZHVjZXI7IH1cclxuICAgIHZhciBzdGF0ZVJlZHVjZXIgPSByZWFjdF8xLmRlZmF1bHQudXNlQ2FsbGJhY2soZnVuY3Rpb24gKHN0YXRlLCBhY3Rpb24pIHtcclxuICAgICAgICByZXR1cm4gcmVkdWNlcihzdGF0ZSwgaXRlbUNvdW50LCBhY3Rpb24pO1xyXG4gICAgfSwgW2l0ZW1Db3VudCwgcmVkdWNlcl0pO1xyXG4gICAgdmFyIGluaXRpYWxJbnRlcm5hbFN0YXRlID0gZGVmYXVsdEludGVybmFsU3RhdGVcclxuICAgICAgICA/IGhlbHBlcnNfMS5vdmVycmlkZURlZmluZWRQcm9wc09ubHkoZGVmYXVsdEluaXRpYWxTdGF0ZSwgZGVmYXVsdEludGVybmFsU3RhdGUpXHJcbiAgICAgICAgOiBkZWZhdWx0SW5pdGlhbFN0YXRlO1xyXG4gICAgcmV0dXJuIHVzZVVuaW9uU3RhdGVfMS51c2VVbmlvblN0YXRlKGluaXRpYWxJbnRlcm5hbFN0YXRlLCBleHRlcm5hbFN0YXRlLCBzdGF0ZVJlZHVjZXIsIG9uQ2hhbmdlKTtcclxufTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy51c2VTY3JvbGxMaXN0VG9JbmRleCA9IHZvaWQgMDtcclxudmFyIHJlYWN0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcclxudmFyIHR5cGVOYXJyb3dpbmdfMSA9IHJlcXVpcmUoXCIuLi9Db21tb24vdHlwZU5hcnJvd2luZ1wiKTtcclxuZXhwb3J0cy51c2VTY3JvbGxMaXN0VG9JbmRleCA9IGZ1bmN0aW9uIChlbGVtZW50UmVmLCBpbmRleCkge1xyXG4gICAgcmVhY3RfMS5kZWZhdWx0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKGluZGV4ICE9PSBudWxsICYmIGVsZW1lbnRSZWYuY3VycmVudCkge1xyXG4gICAgICAgICAgICB2YXIgZWxlbWVudCA9IGVsZW1lbnRSZWYuY3VycmVudDtcclxuICAgICAgICAgICAgdmFyIHNjcm9sbGVyID0gdHlwZU5hcnJvd2luZ18xLmhhc1Byb3BlcnR5KGVsZW1lbnQsIFwiX2xpc3RSZWZcIilcclxuICAgICAgICAgICAgICAgID8gZWxlbWVudC5fbGlzdFJlZlxyXG4gICAgICAgICAgICAgICAgOiBlbGVtZW50O1xyXG4gICAgICAgICAgICBzY3JvbGxlci5zY3JvbGxUb0l0ZW0oaW5kZXgsIFwic21hcnRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfSwgW2luZGV4XSk7XHJcbn07XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMudXNlRHJvcGRvd25DbG9zZVdoZW5DbGlja2VkT3V0c2lkZSA9IHZvaWQgMDtcclxudmFyIHJlYWN0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcclxudmFyIF8xID0gcmVxdWlyZShcIi5cIik7XHJcbmV4cG9ydHMudXNlRHJvcGRvd25DbG9zZVdoZW5DbGlja2VkT3V0c2lkZSA9IGZ1bmN0aW9uIChlbGVtZW50UmVmLCBkaXNwYXRjaCkge1xyXG4gICAgdmFyIGNsaWNrSGFuZGxlciA9IHJlYWN0XzEuZGVmYXVsdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7IHJldHVybiBkaXNwYXRjaChbXCJDbG9zZUxpc3RcIl0pOyB9LCBbXHJcbiAgICAgICAgZGlzcGF0Y2gsXHJcbiAgICBdKTtcclxuICAgIF8xLnVzZUNsaWNrZWRPdXRzaWRlSGFuZGxlcihlbGVtZW50UmVmLCBjbGlja0hhbmRsZXIpO1xyXG59O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnVzZURyb3Bkb3duQ2xvc2VXaGVuRm9jdXNPdXQgPSB2b2lkIDA7XHJcbnZhciByZWFjdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XHJcbnZhciB1c2VGb2N1c091dEhhbmRsZXJfMSA9IHJlcXVpcmUoXCIuL3VzZUZvY3VzT3V0SGFuZGxlclwiKTtcclxuZXhwb3J0cy51c2VEcm9wZG93bkNsb3NlV2hlbkZvY3VzT3V0ID0gZnVuY3Rpb24gKGVsZW1lbnRSZWYsIGRpc3BhdGNoKSB7XHJcbiAgICB2YXIgY2xpY2tIYW5kbGVyID0gcmVhY3RfMS5kZWZhdWx0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRpc3BhdGNoKFtcIkNsb3NlTGlzdFwiXSk7IH0sIFtcclxuICAgICAgICBkaXNwYXRjaCxcclxuICAgIF0pO1xyXG4gICAgdXNlRm9jdXNPdXRIYW5kbGVyXzEudXNlRm9jdXNPdXRIYW5kbGVyKGVsZW1lbnRSZWYsIGNsaWNrSGFuZGxlcik7XHJcbn07XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMudXNlRm9jdXNPblN0YXRlQ2hhbmdlID0gdm9pZCAwO1xyXG52YXIgcmVhY3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xyXG52YXIgdXNlUHJldmlvdXNWYWx1ZV8xID0gcmVxdWlyZShcIi4vdXNlUHJldmlvdXNWYWx1ZVwiKTtcclxuZXhwb3J0cy51c2VGb2N1c09uU3RhdGVDaGFuZ2UgPSBmdW5jdGlvbiAoZWxlbWVudFJlZiwgc3RhdGUsIHZhbHVlVG9UcmlnZ2VyKSB7XHJcbiAgICB2YXIgaW5pdGlhbFJlbmRlciA9IHJlYWN0XzEuZGVmYXVsdC51c2VSZWYodHJ1ZSk7XHJcbiAgICB2YXIgcHJldmlvdXNTdGF0ZSA9IHVzZVByZXZpb3VzVmFsdWVfMS51c2VQcmV2aW91c1ZhbHVlKHN0YXRlKTtcclxuICAgIHJlYWN0XzEuZGVmYXVsdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmIChzdGF0ZSAhPT0gcHJldmlvdXNTdGF0ZSAmJlxyXG4gICAgICAgICAgICBzdGF0ZSA9PT0gdmFsdWVUb1RyaWdnZXIgJiZcclxuICAgICAgICAgICAgIWluaXRpYWxSZW5kZXIuY3VycmVudCkge1xyXG4gICAgICAgICAgICBpZiAoZWxlbWVudFJlZi5jdXJyZW50ICE9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgZWxlbWVudFJlZi5jdXJyZW50LmZvY3VzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGluaXRpYWxSZW5kZXIuY3VycmVudCA9IGZhbHNlO1xyXG4gICAgfSwgW3N0YXRlXSk7XHJcbn07XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMudXNlQ2xpY2tlZE91dHNpZGVIYW5kbGVyID0gdm9pZCAwO1xyXG52YXIgcmVhY3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xyXG5leHBvcnRzLnVzZUNsaWNrZWRPdXRzaWRlSGFuZGxlciA9IGZ1bmN0aW9uIChlbGVtZW50UmVmLCBoYW5kbGVyKSB7XHJcbiAgICByZWFjdF8xLmRlZmF1bHQudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBmdW5jdGlvbiBtb3VzZUhhbmRsZXIoZSkge1xyXG4gICAgICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgICAgIGlmICghKChfYSA9IGVsZW1lbnRSZWYuY3VycmVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNvbnRhaW5zKGUudGFyZ2V0KSkpIHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZXIoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIG1vdXNlSGFuZGxlcik7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCBtb3VzZUhhbmRsZXIpO1xyXG4gICAgICAgIH07XHJcbiAgICB9LCBbaGFuZGxlcl0pO1xyXG59O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnVzZUNodW5rTG9hZGVyID0gdm9pZCAwO1xyXG52YXIgcmVhY3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xyXG5leHBvcnRzLnVzZUNodW5rTG9hZGVyID0gZnVuY3Rpb24gKGl0ZW1Db3VudCwgbG9hZCkge1xyXG4gICAgdmFyIGl0ZW1zID0gcmVhY3RfMS5kZWZhdWx0LnVzZU1lbW8oZnVuY3Rpb24gKCkgeyByZXR1cm4gQXJyYXkoaXRlbUNvdW50KS5maWxsKHsgdmFsdWU6IG51bGwsIGlzTG9hZGVkOiBmYWxzZSB9KTsgfSwgW2l0ZW1Db3VudF0pO1xyXG4gICAgdmFyIGlzSXRlbUxvYWRlZCA9IHJlYWN0XzEuZGVmYXVsdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoaW5kZXgpIHsgcmV0dXJuIGl0ZW1zW2luZGV4XS5pc0xvYWRlZDsgfSwgW2l0ZW1zXSk7XHJcbiAgICB2YXIgbG9hZE1vcmVJdGVtcyA9IHJlYWN0XzEuZGVmYXVsdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoc3RhcnRJbmRleCwgZW5kSW5kZXgpIHtcclxuICAgICAgICByZXR1cm4gbG9hZChzdGFydEluZGV4LCBlbmRJbmRleCkudGhlbihmdW5jdGlvbiAobmV3SXRlbXMpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaXRlbXNJbmRleCA9IHN0YXJ0SW5kZXgsIGluZGV4ID0gMDsgaXRlbXNJbmRleCA8PSBlbmRJbmRleDsgaXRlbXNJbmRleCsrLCBpbmRleCsrKSB7XHJcbiAgICAgICAgICAgICAgICBpdGVtc1tpdGVtc0luZGV4XSA9IHtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogbmV3SXRlbXNbaW5kZXhdLFxyXG4gICAgICAgICAgICAgICAgICAgIGlzTG9hZGVkOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSwgW2l0ZW1zXSk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGl0ZW1zOiBpdGVtcyxcclxuICAgICAgICBpc0l0ZW1Mb2FkZWQ6IGlzSXRlbUxvYWRlZCxcclxuICAgICAgICBsb2FkTW9yZUl0ZW1zOiBsb2FkTW9yZUl0ZW1zLFxyXG4gICAgfTtcclxufTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy51c2VEcm9wZG93bkxpc3RLZXlib2FyZE5hdmlnYXRvciA9IHZvaWQgMDtcclxudmFyIHJlYWN0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcclxudmFyIGtleWJvYXJkTmF2aWdhdG9yXzEgPSByZXF1aXJlKFwiLi4vQ29tbW9uL2tleWJvYXJkTmF2aWdhdG9yXCIpO1xyXG5leHBvcnRzLnVzZURyb3Bkb3duTGlzdEtleWJvYXJkTmF2aWdhdG9yID0gZnVuY3Rpb24gKGRpc3BhdGNoKSB7IHJldHVybiByZWFjdF8xLmRlZmF1bHQudXNlTWVtbyhmdW5jdGlvbiAoKSB7IHJldHVybiBrZXlib2FyZE5hdmlnYXRvcl8xLmNyZWF0ZUxpc3RLZXlib2FyZE5hdmlnYXRvcihkaXNwYXRjaCk7IH0sIFtkaXNwYXRjaF0pOyB9O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLlZpcnR1YWxpemVkTGF6eUxvYWRpbmdMaXN0ID0gdm9pZCAwO1xyXG52YXIgcmVhY3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xyXG52YXIgcmVhY3Rfd2luZG93XzEgPSByZXF1aXJlKFwicmVhY3Qtd2luZG93XCIpO1xyXG52YXIgSG9va3NfMSA9IHJlcXVpcmUoXCIuLi9Ib29rc1wiKTtcclxudmFyIHJlYWN0X3dpbmRvd19pbmZpbml0ZV9sb2FkZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicmVhY3Qtd2luZG93LWluZmluaXRlLWxvYWRlclwiKSk7XHJcbnZhciBtZW1vaXplZFJvdyA9IHJlYWN0XzEuZGVmYXVsdC5tZW1vKGZ1bmN0aW9uIFJvdyhwcm9wcykge1xyXG4gICAgdmFyIGluZGV4ID0gcHJvcHMuaW5kZXgsIHN0eWxlID0gcHJvcHMuc3R5bGUsIF9hID0gcHJvcHMuZGF0YSwgaXRlbVJlbmRlcmVyID0gX2EuaXRlbVJlbmRlcmVyLCBpc0l0ZW1Mb2FkZWQgPSBfYS5pc0l0ZW1Mb2FkZWQ7XHJcbiAgICByZXR1cm4gcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBzdHlsZTogc3R5bGUgfSwgaXRlbVJlbmRlcmVyKGluZGV4LCBpc0l0ZW1Mb2FkZWQoaW5kZXgpKSk7XHJcbn0pO1xyXG5mdW5jdGlvbiBWaXJ0dWFsaXplZExhenlMb2FkaW5nTGlzdChwcm9wcykge1xyXG4gICAgdmFyIGl0ZW1Db3VudCA9IHByb3BzLml0ZW1Db3VudCwgaXRlbUhlaWdodCA9IHByb3BzLml0ZW1IZWlnaHQsIG1heEhlaWdodCA9IHByb3BzLm1heEhlaWdodCwgaXRlbVJlbmRlcmVyID0gcHJvcHMuaXRlbVJlbmRlcmVyLCBfYSA9IHByb3BzLndpZHRoLCB3aWR0aCA9IF9hID09PSB2b2lkIDAgPyBcIjEwMCVcIiA6IF9hLCBpc0l0ZW1Mb2FkZWQgPSBwcm9wcy5pc0l0ZW1Mb2FkZWQsIGxvYWRNb3JlSXRlbXMgPSBwcm9wcy5sb2FkTW9yZUl0ZW1zLCBoaWdobGlnaHRlZEluZGV4ID0gcHJvcHMuaGlnaGxpZ2h0ZWRJbmRleCwgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lO1xyXG4gICAgdmFyIGhlaWdodCA9IE1hdGgubWluKGl0ZW1Db3VudCAqIGl0ZW1IZWlnaHQsIG1heEhlaWdodCk7XHJcbiAgICB2YXIgaXRlbURhdGEgPSByZWFjdF8xLmRlZmF1bHQudXNlTWVtbyhmdW5jdGlvbiAoKSB7IHJldHVybiAoe1xyXG4gICAgICAgIGl0ZW1SZW5kZXJlcjogaXRlbVJlbmRlcmVyLFxyXG4gICAgICAgIGlzSXRlbUxvYWRlZDogaXNJdGVtTG9hZGVkLFxyXG4gICAgfSk7IH0sIFtpdGVtUmVuZGVyZXIsIGlzSXRlbUxvYWRlZF0pO1xyXG4gICAgdmFyIGxvYWRlclJlZiA9IHJlYWN0XzEuZGVmYXVsdC51c2VSZWYobnVsbCk7XHJcbiAgICBIb29rc18xLnVzZVNjcm9sbExpc3RUb0luZGV4KGxvYWRlclJlZiwgaGlnaGxpZ2h0ZWRJbmRleCk7XHJcbiAgICByZXR1cm4gKHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KHJlYWN0X3dpbmRvd19pbmZpbml0ZV9sb2FkZXJfMS5kZWZhdWx0LCB7IHJlZjogbG9hZGVyUmVmLCBpc0l0ZW1Mb2FkZWQ6IGlzSXRlbUxvYWRlZCwgaXRlbUNvdW50OiBpdGVtQ291bnQsIGxvYWRNb3JlSXRlbXM6IGxvYWRNb3JlSXRlbXMgfSwgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgdmFyIG9uSXRlbXNSZW5kZXJlZCA9IF9hLm9uSXRlbXNSZW5kZXJlZCwgcmVmID0gX2EucmVmO1xyXG4gICAgICAgIHJldHVybiAocmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQocmVhY3Rfd2luZG93XzEuRml4ZWRTaXplTGlzdCwgeyBjbGFzc05hbWU6IGNsYXNzTmFtZSwgcmVmOiByZWYsIGhlaWdodDogaGVpZ2h0LCBpdGVtQ291bnQ6IGl0ZW1Db3VudCwgaXRlbVNpemU6IGl0ZW1IZWlnaHQsIG9uSXRlbXNSZW5kZXJlZDogb25JdGVtc1JlbmRlcmVkLCB3aWR0aDogd2lkdGgsIGl0ZW1EYXRhOiBpdGVtRGF0YSB9LCBtZW1vaXplZFJvdykpO1xyXG4gICAgfSkpO1xyXG59XHJcbmV4cG9ydHMuVmlydHVhbGl6ZWRMYXp5TG9hZGluZ0xpc3QgPSBWaXJ0dWFsaXplZExhenlMb2FkaW5nTGlzdDtcclxuIiwiaW1wb3J0IHsgUHVyZUNvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcblxuZnVuY3Rpb24gaXNJbnRlZ2VyKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmIGlzRmluaXRlKHZhbHVlKSAmJiBNYXRoLmZsb29yKHZhbHVlKSA9PT0gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIGlzUmFuZ2VWaXNpYmxlKF9yZWYpIHtcbiAgdmFyIGxhc3RSZW5kZXJlZFN0YXJ0SW5kZXggPSBfcmVmLmxhc3RSZW5kZXJlZFN0YXJ0SW5kZXgsXG4gICAgICBsYXN0UmVuZGVyZWRTdG9wSW5kZXggPSBfcmVmLmxhc3RSZW5kZXJlZFN0b3BJbmRleCxcbiAgICAgIHN0YXJ0SW5kZXggPSBfcmVmLnN0YXJ0SW5kZXgsXG4gICAgICBzdG9wSW5kZXggPSBfcmVmLnN0b3BJbmRleDtcblxuICByZXR1cm4gIShzdGFydEluZGV4ID4gbGFzdFJlbmRlcmVkU3RvcEluZGV4IHx8IHN0b3BJbmRleCA8IGxhc3RSZW5kZXJlZFN0YXJ0SW5kZXgpO1xufVxuXG5mdW5jdGlvbiBzY2FuRm9yVW5sb2FkZWRSYW5nZXMoX3JlZikge1xuICB2YXIgaXNJdGVtTG9hZGVkID0gX3JlZi5pc0l0ZW1Mb2FkZWQsXG4gICAgICBpdGVtQ291bnQgPSBfcmVmLml0ZW1Db3VudCxcbiAgICAgIG1pbmltdW1CYXRjaFNpemUgPSBfcmVmLm1pbmltdW1CYXRjaFNpemUsXG4gICAgICBzdGFydEluZGV4ID0gX3JlZi5zdGFydEluZGV4LFxuICAgICAgc3RvcEluZGV4ID0gX3JlZi5zdG9wSW5kZXg7XG5cbiAgdmFyIHVubG9hZGVkUmFuZ2VzID0gW107XG5cbiAgdmFyIHJhbmdlU3RhcnRJbmRleCA9IG51bGw7XG4gIHZhciByYW5nZVN0b3BJbmRleCA9IG51bGw7XG5cbiAgZm9yICh2YXIgX2luZGV4ID0gc3RhcnRJbmRleDsgX2luZGV4IDw9IHN0b3BJbmRleDsgX2luZGV4KyspIHtcbiAgICB2YXIgbG9hZGVkID0gaXNJdGVtTG9hZGVkKF9pbmRleCk7XG5cbiAgICBpZiAoIWxvYWRlZCkge1xuICAgICAgcmFuZ2VTdG9wSW5kZXggPSBfaW5kZXg7XG4gICAgICBpZiAocmFuZ2VTdGFydEluZGV4ID09PSBudWxsKSB7XG4gICAgICAgIHJhbmdlU3RhcnRJbmRleCA9IF9pbmRleDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHJhbmdlU3RvcEluZGV4ICE9PSBudWxsKSB7XG4gICAgICB1bmxvYWRlZFJhbmdlcy5wdXNoKHJhbmdlU3RhcnRJbmRleCwgcmFuZ2VTdG9wSW5kZXgpO1xuXG4gICAgICByYW5nZVN0YXJ0SW5kZXggPSByYW5nZVN0b3BJbmRleCA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgLy8gSWYgOnJhbmdlU3RvcEluZGV4IGlzIG5vdCBudWxsIGl0IG1lYW5zIHdlIGhhdmVuJ3QgcmFuIG91dCBvZiB1bmxvYWRlZCByb3dzLlxuICAvLyBTY2FuIGZvcndhcmQgdG8gdHJ5IGZpbGxpbmcgb3VyIDptaW5pbXVtQmF0Y2hTaXplLlxuICBpZiAocmFuZ2VTdG9wSW5kZXggIT09IG51bGwpIHtcbiAgICB2YXIgcG90ZW50aWFsU3RvcEluZGV4ID0gTWF0aC5taW4oTWF0aC5tYXgocmFuZ2VTdG9wSW5kZXgsIHJhbmdlU3RhcnRJbmRleCArIG1pbmltdW1CYXRjaFNpemUgLSAxKSwgaXRlbUNvdW50IC0gMSk7XG5cbiAgICBmb3IgKHZhciBfaW5kZXgyID0gcmFuZ2VTdG9wSW5kZXggKyAxOyBfaW5kZXgyIDw9IHBvdGVudGlhbFN0b3BJbmRleDsgX2luZGV4MisrKSB7XG4gICAgICBpZiAoIWlzSXRlbUxvYWRlZChfaW5kZXgyKSkge1xuICAgICAgICByYW5nZVN0b3BJbmRleCA9IF9pbmRleDI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB1bmxvYWRlZFJhbmdlcy5wdXNoKHJhbmdlU3RhcnRJbmRleCwgcmFuZ2VTdG9wSW5kZXgpO1xuICB9XG5cbiAgLy8gQ2hlY2sgdG8gc2VlIGlmIG91ciBmaXJzdCByYW5nZSBlbmRlZCBwcmVtYXR1cmVseS5cbiAgLy8gSW4gdGhpcyBjYXNlIHdlIHNob3VsZCBzY2FuIGJhY2t3YXJkcyB0byB0cnkgZmlsbGluZyBvdXIgOm1pbmltdW1CYXRjaFNpemUuXG4gIGlmICh1bmxvYWRlZFJhbmdlcy5sZW5ndGgpIHtcbiAgICB3aGlsZSAodW5sb2FkZWRSYW5nZXNbMV0gLSB1bmxvYWRlZFJhbmdlc1swXSArIDEgPCBtaW5pbXVtQmF0Y2hTaXplICYmIHVubG9hZGVkUmFuZ2VzWzBdID4gMCkge1xuICAgICAgdmFyIF9pbmRleDMgPSB1bmxvYWRlZFJhbmdlc1swXSAtIDE7XG5cbiAgICAgIGlmICghaXNJdGVtTG9hZGVkKF9pbmRleDMpKSB7XG4gICAgICAgIHVubG9hZGVkUmFuZ2VzWzBdID0gX2luZGV4MztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB1bmxvYWRlZFJhbmdlcztcbn1cblxudmFyIGNsYXNzQ2FsbENoZWNrID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn07XG5cbnZhciBjcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfTtcbn0oKTtcblxudmFyIGluaGVyaXRzID0gZnVuY3Rpb24gKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTtcbiAgfVxuXG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfVxuICB9KTtcbiAgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufTtcblxudmFyIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gPSBmdW5jdGlvbiAoc2VsZiwgY2FsbCkge1xuICBpZiAoIXNlbGYpIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbn07XG5cbnZhciBJbmZpbml0ZUxvYWRlciA9IGZ1bmN0aW9uIChfUHVyZUNvbXBvbmVudCkge1xuICBpbmhlcml0cyhJbmZpbml0ZUxvYWRlciwgX1B1cmVDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEluZmluaXRlTG9hZGVyKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIEluZmluaXRlTG9hZGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZiA9IEluZmluaXRlTG9hZGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoSW5maW5pdGVMb2FkZXIpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5fbGFzdFJlbmRlcmVkU3RhcnRJbmRleCA9IC0xLCBfdGhpcy5fbGFzdFJlbmRlcmVkU3RvcEluZGV4ID0gLTEsIF90aGlzLl9tZW1vaXplZFVubG9hZGVkUmFuZ2VzID0gW10sIF90aGlzLl9vbkl0ZW1zUmVuZGVyZWQgPSBmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICAgIHZhciB2aXNpYmxlU3RhcnRJbmRleCA9IF9yZWYyLnZpc2libGVTdGFydEluZGV4LFxuICAgICAgICAgIHZpc2libGVTdG9wSW5kZXggPSBfcmVmMi52aXNpYmxlU3RvcEluZGV4O1xuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoIWlzSW50ZWdlcih2aXNpYmxlU3RhcnRJbmRleCkgfHwgIWlzSW50ZWdlcih2aXNpYmxlU3RvcEluZGV4KSkge1xuICAgICAgICAgIGNvbnNvbGUud2FybignSW52YWxpZCBvbkl0ZW1zUmVuZGVyZWQgc2lnbmF0dXJlOyBwbGVhc2UgcmVmZXIgdG8gSW5maW5pdGVMb2FkZXIgZG9jdW1lbnRhdGlvbi4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgX3RoaXMucHJvcHMubG9hZE1vcmVSb3dzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKCdJbmZpbml0ZUxvYWRlciBcImxvYWRNb3JlUm93c1wiIHByb3AgaGFzIGJlZW4gcmVuYW1lZCB0byBcImxvYWRNb3JlSXRlbXNcIi4nKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBfdGhpcy5fbGFzdFJlbmRlcmVkU3RhcnRJbmRleCA9IHZpc2libGVTdGFydEluZGV4O1xuICAgICAgX3RoaXMuX2xhc3RSZW5kZXJlZFN0b3BJbmRleCA9IHZpc2libGVTdG9wSW5kZXg7XG5cbiAgICAgIF90aGlzLl9lbnN1cmVSb3dzTG9hZGVkKHZpc2libGVTdGFydEluZGV4LCB2aXNpYmxlU3RvcEluZGV4KTtcbiAgICB9LCBfdGhpcy5fc2V0UmVmID0gZnVuY3Rpb24gKGxpc3RSZWYpIHtcbiAgICAgIF90aGlzLl9saXN0UmVmID0gbGlzdFJlZjtcbiAgICB9LCBfdGVtcCksIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoSW5maW5pdGVMb2FkZXIsIFt7XG4gICAga2V5OiAncmVzZXRsb2FkTW9yZUl0ZW1zQ2FjaGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXNldGxvYWRNb3JlSXRlbXNDYWNoZSgpIHtcbiAgICAgIHZhciBhdXRvUmVsb2FkID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcblxuICAgICAgdGhpcy5fbWVtb2l6ZWRVbmxvYWRlZFJhbmdlcyA9IFtdO1xuXG4gICAgICBpZiAoYXV0b1JlbG9hZCkge1xuICAgICAgICB0aGlzLl9lbnN1cmVSb3dzTG9hZGVkKHRoaXMuX2xhc3RSZW5kZXJlZFN0YXJ0SW5kZXgsIHRoaXMuX2xhc3RSZW5kZXJlZFN0b3BJbmRleCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50RGlkTW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmICh0aGlzLl9saXN0UmVmID09IG51bGwpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ0ludmFsaWQgbGlzdCByZWY7IHBsZWFzZSByZWZlciB0byBJbmZpbml0ZUxvYWRlciBkb2N1bWVudGF0aW9uLicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcm9wcy5jaGlsZHJlbjtcblxuXG4gICAgICByZXR1cm4gY2hpbGRyZW4oe1xuICAgICAgICBvbkl0ZW1zUmVuZGVyZWQ6IHRoaXMuX29uSXRlbXNSZW5kZXJlZCxcbiAgICAgICAgcmVmOiB0aGlzLl9zZXRSZWZcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19lbnN1cmVSb3dzTG9hZGVkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2Vuc3VyZVJvd3NMb2FkZWQoc3RhcnRJbmRleCwgc3RvcEluZGV4KSB7XG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBpc0l0ZW1Mb2FkZWQgPSBfcHJvcHMuaXNJdGVtTG9hZGVkLFxuICAgICAgICAgIGl0ZW1Db3VudCA9IF9wcm9wcy5pdGVtQ291bnQsXG4gICAgICAgICAgX3Byb3BzJG1pbmltdW1CYXRjaFNpID0gX3Byb3BzLm1pbmltdW1CYXRjaFNpemUsXG4gICAgICAgICAgbWluaW11bUJhdGNoU2l6ZSA9IF9wcm9wcyRtaW5pbXVtQmF0Y2hTaSA9PT0gdW5kZWZpbmVkID8gMTAgOiBfcHJvcHMkbWluaW11bUJhdGNoU2ksXG4gICAgICAgICAgX3Byb3BzJHRocmVzaG9sZCA9IF9wcm9wcy50aHJlc2hvbGQsXG4gICAgICAgICAgdGhyZXNob2xkID0gX3Byb3BzJHRocmVzaG9sZCA9PT0gdW5kZWZpbmVkID8gMTUgOiBfcHJvcHMkdGhyZXNob2xkO1xuXG5cbiAgICAgIHZhciB1bmxvYWRlZFJhbmdlcyA9IHNjYW5Gb3JVbmxvYWRlZFJhbmdlcyh7XG4gICAgICAgIGlzSXRlbUxvYWRlZDogaXNJdGVtTG9hZGVkLFxuICAgICAgICBpdGVtQ291bnQ6IGl0ZW1Db3VudCxcbiAgICAgICAgbWluaW11bUJhdGNoU2l6ZTogbWluaW11bUJhdGNoU2l6ZSxcbiAgICAgICAgc3RhcnRJbmRleDogTWF0aC5tYXgoMCwgc3RhcnRJbmRleCAtIHRocmVzaG9sZCksXG4gICAgICAgIHN0b3BJbmRleDogTWF0aC5taW4oaXRlbUNvdW50IC0gMSwgc3RvcEluZGV4ICsgdGhyZXNob2xkKVxuICAgICAgfSk7XG5cbiAgICAgIC8vIEF2b2lkIGNhbGxpbmcgbG9hZC1yb3dzIHVubGVzcyByYW5nZSBoYXMgY2hhbmdlZC5cbiAgICAgIC8vIFRoaXMgc2hvdWxkbid0IGJlIHN0cmljdGx5IG5lY2Vzc2FyeSwgYnV0IGlzIG1heWJlIG5pY2UgdG8gZG8uXG4gICAgICBpZiAodGhpcy5fbWVtb2l6ZWRVbmxvYWRlZFJhbmdlcy5sZW5ndGggIT09IHVubG9hZGVkUmFuZ2VzLmxlbmd0aCB8fCB0aGlzLl9tZW1vaXplZFVubG9hZGVkUmFuZ2VzLnNvbWUoZnVuY3Rpb24gKHN0YXJ0T3JTdG9wLCBpbmRleCkge1xuICAgICAgICByZXR1cm4gdW5sb2FkZWRSYW5nZXNbaW5kZXhdICE9PSBzdGFydE9yU3RvcDtcbiAgICAgIH0pKSB7XG4gICAgICAgIHRoaXMuX21lbW9pemVkVW5sb2FkZWRSYW5nZXMgPSB1bmxvYWRlZFJhbmdlcztcbiAgICAgICAgdGhpcy5fbG9hZFVubG9hZGVkUmFuZ2VzKHVubG9hZGVkUmFuZ2VzKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfbG9hZFVubG9hZGVkUmFuZ2VzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2xvYWRVbmxvYWRlZFJhbmdlcyh1bmxvYWRlZFJhbmdlcykge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIC8vIGxvYWRNb3JlUm93cyB3YXMgcmVuYW1lZCB0byBsb2FkTW9yZUl0ZW1zIGluIHYxLjAuMzsgd2lsbCBiZSByZW1vdmVkIGluIHYyLjBcbiAgICAgIHZhciBsb2FkTW9yZUl0ZW1zID0gdGhpcy5wcm9wcy5sb2FkTW9yZUl0ZW1zIHx8IHRoaXMucHJvcHMubG9hZE1vcmVSb3dzO1xuXG4gICAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcChpKSB7XG4gICAgICAgIHZhciBzdGFydEluZGV4ID0gdW5sb2FkZWRSYW5nZXNbaV07XG4gICAgICAgIHZhciBzdG9wSW5kZXggPSB1bmxvYWRlZFJhbmdlc1tpICsgMV07XG4gICAgICAgIHZhciBwcm9taXNlID0gbG9hZE1vcmVJdGVtcyhzdGFydEluZGV4LCBzdG9wSW5kZXgpO1xuICAgICAgICBpZiAocHJvbWlzZSAhPSBudWxsKSB7XG4gICAgICAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIFJlZnJlc2ggdGhlIHZpc2libGUgcm93cyBpZiBhbnkgb2YgdGhlbSBoYXZlIGp1c3QgYmVlbiBsb2FkZWQuXG4gICAgICAgICAgICAvLyBPdGhlcndpc2UgdGhleSB3aWxsIHJlbWFpbiBpbiB0aGVpciB1bmxvYWRlZCB2aXN1YWwgc3RhdGUuXG4gICAgICAgICAgICBpZiAoaXNSYW5nZVZpc2libGUoe1xuICAgICAgICAgICAgICBsYXN0UmVuZGVyZWRTdGFydEluZGV4OiBfdGhpczIuX2xhc3RSZW5kZXJlZFN0YXJ0SW5kZXgsXG4gICAgICAgICAgICAgIGxhc3RSZW5kZXJlZFN0b3BJbmRleDogX3RoaXMyLl9sYXN0UmVuZGVyZWRTdG9wSW5kZXgsXG4gICAgICAgICAgICAgIHN0YXJ0SW5kZXg6IHN0YXJ0SW5kZXgsXG4gICAgICAgICAgICAgIHN0b3BJbmRleDogc3RvcEluZGV4XG4gICAgICAgICAgICB9KSkge1xuICAgICAgICAgICAgICAvLyBIYW5kbGUgYW4gdW5tb3VudCB3aGlsZSBwcm9taXNlcyBhcmUgc3RpbGwgaW4gZmxpZ2h0LlxuICAgICAgICAgICAgICBpZiAoX3RoaXMyLl9saXN0UmVmID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvLyBSZXNpemUgY2FjaGVkIHJvdyBzaXplcyBmb3IgVmFyaWFibGVTaXplTGlzdCxcbiAgICAgICAgICAgICAgLy8gb3RoZXJ3aXNlIGp1c3QgcmUtcmVuZGVyIHRoZSBsaXN0LlxuICAgICAgICAgICAgICBpZiAodHlwZW9mIF90aGlzMi5fbGlzdFJlZi5yZXNldEFmdGVySW5kZXggPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBfdGhpczIuX2xpc3RSZWYucmVzZXRBZnRlckluZGV4KHN0YXJ0SW5kZXgsIHRydWUpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEhBQ0sgcmVzZXQgdGVtcG9yYXJpbHkgY2FjaGVkIGl0ZW0gc3R5bGVzIHRvIGZvcmNlIFB1cmVDb21wb25lbnQgdG8gcmUtcmVuZGVyLlxuICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgcHJldHR5IGdyb3NzLCBidXQgSSdtIG9rYXkgd2l0aCBpdCBmb3Igbm93LlxuICAgICAgICAgICAgICAgIC8vIERvbid0IGp1ZGdlIG1lLlxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgX3RoaXMyLl9saXN0UmVmLl9nZXRJdGVtU3R5bGVDYWNoZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgX3RoaXMyLl9saXN0UmVmLl9nZXRJdGVtU3R5bGVDYWNoZSgtMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF90aGlzMi5fbGlzdFJlZi5mb3JjZVVwZGF0ZSgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdW5sb2FkZWRSYW5nZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgICAgX2xvb3AoaSk7XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBJbmZpbml0ZUxvYWRlcjtcbn0oUHVyZUNvbXBvbmVudCk7XG5cbmV4cG9ydCBkZWZhdWx0IEluZmluaXRlTG9hZGVyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XHJcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgb1trMl0gPSBtW2tdO1xyXG59KSk7XHJcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vYWN0aW9uc1wiKSwgZXhwb3J0cyk7XHJcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9kaXNwYXRjaFwiKSwgZXhwb3J0cyk7XHJcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9rZXlib2FyZE5hdmlnYXRvclwiKSwgZXhwb3J0cyk7XHJcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9yZWR1Y2VyXCIpLCBleHBvcnRzKTtcclxuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3N0YXRlXCIpLCBleHBvcnRzKTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XHJcbmltcG9ydCB7IERpc3BhdGNoIH0gZnJvbSBcInJlZHV4XCI7XHJcbmltcG9ydCB7IHZpZXdlckVuZHBvaW50IH0gZnJvbSBcIi4uLy4uLy4uL2NvbW1vbi9jb21tdW5pY2F0aW9uL3ZpZXdlckVuZHBvaW50XCI7XHJcbmltcG9ydCB7IHNoYWRlckV4dGVuc2lvbnMgfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XHJcbmltcG9ydCB7IFZpZXdlckFjdGlvbiB9IGZyb20gXCIuLi9zdG9yZS9hY3Rpb25zXCI7XHJcbmltcG9ydCB7IFZpZXdlclN0YXRlIH0gZnJvbSBcIi4uL3N0b3JlL3N0YXRlXCI7XHJcbmltcG9ydCB7IHRyYW5zbGF0aW9ucyB9IGZyb20gXCIuLi90cmFuc2xhdGlvbnNcIjtcclxuaW1wb3J0IHsgRHJvcGRvd24sIERyb3Bkb3duT3B0aW9uIH0gZnJvbSBcIi4vRHJvcGRvd25cIjtcclxuaW1wb3J0IHsgU2VjdGlvbkZpZWxkIGFzIFNlY3Rpb25GaWVsZCB9IGZyb20gXCIuL1NlY3Rpb25GaWVsZFwiO1xyXG5pbXBvcnQgeyBTZWN0aW9uVGl0bGUgfSBmcm9tIFwiLi9TZWN0aW9uVGl0bGVcIjtcclxuXHJcbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZTogVmlld2VyU3RhdGUpID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAgc2VsZWN0ZWRWZXJ0ZXhGaWxlSWQ6IHN0YXRlLnZlcnRleEZpbGVQYXRoLFxyXG4gICAgc2VsZWN0ZWRGcmFnbWVudEZpbGVJZDogc3RhdGUuZnJhZ21lbnRGaWxlUGF0aCxcclxuICB9O1xyXG59O1xyXG5cclxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gKGRpc3BhdGNoOiBEaXNwYXRjaDxWaWV3ZXJBY3Rpb24+KSA9PiB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHNldFNlbGVjdGVkVmVydGV4RmlsZUlkOiAodmFsdWU6IHN0cmluZyB8IG51bGwpID0+XHJcbiAgICAgIGRpc3BhdGNoKHsgdHlwZTogXCJTRVRfVkVSVEVYX0ZJTEVfUEFUSFwiLCBwYXlsb2FkOiB7IHBhdGg6IHZhbHVlIH0gfSksXHJcbiAgICBzZXRTZWxlY3RlZEZyYWdtZW50RmlsZUlkOiAodmFsdWU6IHN0cmluZyB8IG51bGwpID0+XHJcbiAgICAgIGRpc3BhdGNoKHsgdHlwZTogXCJTRVRfRlJBR01FTlRfRklMRV9QQVRIXCIsIHBheWxvYWQ6IHsgcGF0aDogdmFsdWUgfSB9KSxcclxuICB9O1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IFNoYWRlcnNTZWxlY3RvclNlY3Rpb24gPSBSZWFjdC5tZW1vKFxyXG4gIGNvbm5lY3QoXHJcbiAgICBtYXBTdGF0ZVRvUHJvcHMsXHJcbiAgICBtYXBEaXNwYXRjaFRvUHJvcHNcclxuICApKFxyXG4gICAgKHByb3BzOiB7XHJcbiAgICAgIHNlbGVjdGVkVmVydGV4RmlsZUlkOiBzdHJpbmc7XHJcbiAgICAgIHNlbGVjdGVkRnJhZ21lbnRGaWxlSWQ6IHN0cmluZztcclxuICAgICAgc2V0U2VsZWN0ZWRWZXJ0ZXhGaWxlSWQ6ICh2YWx1ZTogc3RyaW5nIHwgbnVsbCkgPT4gdm9pZDtcclxuICAgICAgc2V0U2VsZWN0ZWRGcmFnbWVudEZpbGVJZDogKHZhbHVlOiBzdHJpbmcgfCBudWxsKSA9PiB2b2lkO1xyXG4gICAgfSkgPT4ge1xyXG4gICAgICBjb25zdCB7XHJcbiAgICAgICAgc2VsZWN0ZWRWZXJ0ZXhGaWxlSWQsXHJcbiAgICAgICAgc2VsZWN0ZWRGcmFnbWVudEZpbGVJZCxcclxuICAgICAgICBzZXRTZWxlY3RlZFZlcnRleEZpbGVJZCxcclxuICAgICAgICBzZXRTZWxlY3RlZEZyYWdtZW50RmlsZUlkLFxyXG4gICAgICB9ID0gcHJvcHM7XHJcblxyXG4gICAgICBjb25zdCBbc2hhZGVyRmlsZU9wdGlvbnMsIHNldFNoYWRlckZpbGVPcHRpb25zXSA9IFJlYWN0LnVzZVN0YXRlPERyb3Bkb3duT3B0aW9uW10+KFtdKTtcclxuXHJcbiAgICAgIGNvbnN0IHN5bmNTaGFkZXJEb2N1bWVudHMgPSBSZWFjdC51c2VDYWxsYmFjaygoKSA9PiB7XHJcbiAgICAgICAgdmlld2VyRW5kcG9pbnQuZ2V0V29ya3NwYWNlRmlsZXNPZlR5cGVzKHNoYWRlckV4dGVuc2lvbnMpLnRoZW4oZmlsZXMgPT4ge1xyXG4gICAgICAgICAgc2V0U2hhZGVyRmlsZU9wdGlvbnMoXHJcbiAgICAgICAgICAgIGZpbGVzLm1hcChmaWxlID0+ICh7XHJcbiAgICAgICAgICAgICAgaWQ6IGZpbGUuZmlsZVBhdGgsXHJcbiAgICAgICAgICAgICAgZGlzcGxheTogZmlsZS5maWxlTmFtZSxcclxuICAgICAgICAgICAgfSkpXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9LCBbXSk7XHJcblxyXG4gICAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4gc3luY1NoYWRlckRvY3VtZW50cygpLCBbXSk7XHJcblxyXG4gICAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidmlld2VyLW9wdGlvbnMtc2VjdGlvblwiPlxyXG4gICAgICAgICAgPFNlY3Rpb25UaXRsZSB0ZXh0PXt0cmFuc2xhdGlvbnMuc2hhZGVyc30+XHJcbiAgICAgICAgICAgIDxidXR0b24gb25DbGljaz17c3luY1NoYWRlckRvY3VtZW50c30+U3luYzwvYnV0dG9uPlxyXG4gICAgICAgICAgPC9TZWN0aW9uVGl0bGU+XHJcbiAgICAgICAgICA8U2VjdGlvbkZpZWxkIHRleHQ9e3RyYW5zbGF0aW9ucy52ZXJ0ZXhTaGFkZXJ9PlxyXG4gICAgICAgICAgICA8RHJvcGRvd25cclxuICAgICAgICAgICAgICBzZWxlY3RlZEl0ZW1JZD17c2VsZWN0ZWRWZXJ0ZXhGaWxlSWR9XHJcbiAgICAgICAgICAgICAgb25DaGFuZ2U9e3NldFNlbGVjdGVkVmVydGV4RmlsZUlkfVxyXG4gICAgICAgICAgICAgIG9wdGlvbnM9e3NoYWRlckZpbGVPcHRpb25zfVxyXG4gICAgICAgICAgICA+PC9Ecm9wZG93bj5cclxuICAgICAgICAgIDwvU2VjdGlvbkZpZWxkPlxyXG4gICAgICAgICAgPFNlY3Rpb25GaWVsZCB0ZXh0PXt0cmFuc2xhdGlvbnMuZnJhZ21lbnRTaGFkZXJ9PlxyXG4gICAgICAgICAgICA8RHJvcGRvd25cclxuICAgICAgICAgICAgICBzZWxlY3RlZEl0ZW1JZD17c2VsZWN0ZWRGcmFnbWVudEZpbGVJZH1cclxuICAgICAgICAgICAgICBvbkNoYW5nZT17c2V0U2VsZWN0ZWRGcmFnbWVudEZpbGVJZH1cclxuICAgICAgICAgICAgICBvcHRpb25zPXtzaGFkZXJGaWxlT3B0aW9uc31cclxuICAgICAgICAgICAgPjwvRHJvcGRvd24+XHJcbiAgICAgICAgICA8L1NlY3Rpb25GaWVsZD5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgKTtcclxuICAgIH1cclxuICApXHJcbik7XHJcbiIsImV4cG9ydCBjb25zdCBzaGFkZXJFeHRlbnNpb25zID0gW1wiZ2xzbFwiXTtcclxuZXhwb3J0IGNvbnN0IGltYWdlRXh0ZW5zaW9ucyA9IFtcImpwZ1wiLCBcImJtcFwiXTtcclxuZXhwb3J0IGNvbnN0IGV4dGVuc2lvblRleHR1cmVzID0gW1widGV4dHVyZTEuanBnXCIsIFwidGV4dHVyZTIuanBnXCJdO1xyXG5leHBvcnQgY29uc3QgY3VzdG9tT3B0aW9uSWQgPSBcImN1c3RvbVwiO1xyXG5leHBvcnQgY29uc3QgZGVmYXVsdFRleHR1cmVVcmwgPVxyXG4gIFwiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL21hdGV1c3ptaWdhcy93ZWJnbC1zaGFkZXItdmlld2VyL21haW4vZG9jcy9pbWFnZXMvc2NyZWVuc2hvdDEuanBnXCI7XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xyXG5pbXBvcnQgeyBWaWV3ZXJTdGF0ZSB9IGZyb20gXCIuLi8uLi9zdG9yZS9zdGF0ZVwiO1xyXG5pbXBvcnQgeyB0cmFuc2xhdGlvbnMgfSBmcm9tIFwiLi4vLi4vdHJhbnNsYXRpb25zXCI7XHJcbmltcG9ydCB7IFNlY3Rpb25GaWVsZCB9IGZyb20gXCIuLi9TZWN0aW9uRmllbGRcIjtcclxuaW1wb3J0IHsgU2VjdGlvblRpdGxlIH0gZnJvbSBcIi4uL1NlY3Rpb25UaXRsZVwiO1xyXG5pbXBvcnQgeyBUZXh0dXJlRmllbGQgfSBmcm9tIFwiLi9UZXh0dXJlRmllbGRcIjtcclxuXHJcbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZTogVmlld2VyU3RhdGUpID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAgdmFsdWVzOiBzdGF0ZS50ZXh0dXJlVmFsdWVzLFxyXG4gIH07XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBUZXh0dXJlRmllbGRJbmZvID0geyBuYW1lOiBzdHJpbmcgfTtcclxuXHJcbmV4cG9ydCBjb25zdCBUZXh0dXJlU2VjdGlvbiA9IFJlYWN0Lm1lbW8oXHJcbiAgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMpKCh7IHRleHR1cmVGaWVsZHMgfTogeyB0ZXh0dXJlRmllbGRzOiBUZXh0dXJlRmllbGRJbmZvW10gfSkgPT4ge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ2aWV3ZXItb3B0aW9ucy1zZWN0aW9uXCI+XHJcbiAgICAgICAgPFNlY3Rpb25UaXRsZSB0ZXh0PXt0cmFuc2xhdGlvbnMudGV4dHVyZXN9PjwvU2VjdGlvblRpdGxlPlxyXG4gICAgICAgIHt0ZXh0dXJlRmllbGRzLm1hcCh0eCA9PiAoXHJcbiAgICAgICAgICA8U2VjdGlvbkZpZWxkIHRleHQ9e3R4Lm5hbWV9PlxyXG4gICAgICAgICAgICA8VGV4dHVyZUZpZWxkIHsuLi50eH0+PC9UZXh0dXJlRmllbGQ+XHJcbiAgICAgICAgICA8L1NlY3Rpb25GaWVsZD5cclxuICAgICAgICApKX1cclxuICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG4gIH0pXHJcbik7XHJcbiIsImltcG9ydCBSZWFjdCwgeyBEaXNwYXRjaCB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XHJcbmltcG9ydCB7IFZpZXdlckFjdGlvbiB9IGZyb20gXCIuLi8uLi9zdG9yZS9hY3Rpb25zXCI7XHJcbmltcG9ydCB7IFZpZXdlclN0YXRlIH0gZnJvbSBcIi4uLy4uL3N0b3JlL3N0YXRlXCI7XHJcbmltcG9ydCB7IGN1c3RvbU9wdGlvbiB9IGZyb20gXCIuLi9jb21tb24vY29uc3RhbnRzXCI7XHJcbmltcG9ydCB7IERyb3Bkb3duIH0gZnJvbSBcIi4uL0Ryb3Bkb3duXCI7XHJcbmltcG9ydCB7IGdldEJpbmRpbmdPcHRpb25zIH0gZnJvbSBcIi4vdGV4dHVyZUJpbmRpbmdzXCI7XHJcblxyXG50eXBlIE93blByb3BzID0ge1xyXG4gIG5hbWU6IHN0cmluZztcclxufTtcclxuXHJcbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZTogVmlld2VyU3RhdGUsIG93blByb3BzOiBPd25Qcm9wcykgPT4ge1xyXG4gIGNvbnN0IHRleHR1cmVWYWx1ZSA9IHN0YXRlLnRleHR1cmVWYWx1ZXNbb3duUHJvcHMubmFtZV07XHJcbiAgcmV0dXJuIHRleHR1cmVWYWx1ZTsgLy8gPz8gOiBnZXREZWZhdWx0UHJvcHMob3duUHJvcHMudHlwZSk7XHJcbn07XHJcblxyXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSAoZGlzcGF0Y2g6IERpc3BhdGNoPFZpZXdlckFjdGlvbj4sIG93blByb3BzOiBPd25Qcm9wcykgPT4ge1xyXG4gIHJldHVybiB7XHJcbiAgICBzZXRPcHRpb25BbmRWYWx1ZTogKG9wdGlvbklkOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpID0+IHt9LFxyXG4gIH07XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgVGV4dHVyZUZpZWxkID0gUmVhY3QubWVtbyhcclxuICBjb25uZWN0KFxyXG4gICAgbWFwU3RhdGVUb1Byb3BzLFxyXG4gICAgbWFwRGlzcGF0Y2hUb1Byb3BzXHJcbiAgKShcclxuICAgIChwcm9wczoge1xyXG4gICAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICAgIG9wdGlvbklkOiBzdHJpbmc7XHJcbiAgICAgIHZhbHVlOiBhbnk7XHJcbiAgICAgIHNldE9wdGlvbkFuZFZhbHVlOiAob3B0aW9uSWQ6IHN0cmluZywgdmFsdWU6IHN0cmluZykgPT4gdm9pZDtcclxuICAgIH0pID0+IHtcclxuICAgICAgY29uc3QgeyBvcHRpb25JZCwgdmFsdWUsIHNldE9wdGlvbkFuZFZhbHVlIH0gPSBwcm9wcztcclxuICAgICAgY29uc3Qgb3B0aW9ucyA9IFJlYWN0LnVzZU1lbW8oKCkgPT4gW2N1c3RvbU9wdGlvbiwgLi4uZ2V0QmluZGluZ09wdGlvbnMoKV0sIFtdKTtcclxuICAgICAgY29uc3QgaXNDdXN0b20gPSBvcHRpb25JZCA9PT0gY3VzdG9tT3B0aW9uLmlkO1xyXG5cclxuICAgICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAge29wdGlvbnMubGVuZ3RoID4gMSAmJiAoXHJcbiAgICAgICAgICAgIDxEcm9wZG93blxyXG4gICAgICAgICAgICAgIHNlbGVjdGVkSXRlbUlkPXtvcHRpb25JZH1cclxuICAgICAgICAgICAgICBvbkNoYW5nZT17b3B0aW9uSWQgPT4gc2V0T3B0aW9uQW5kVmFsdWUob3B0aW9uSWQsIHZhbHVlKX1cclxuICAgICAgICAgICAgICBvcHRpb25zPXtvcHRpb25zfVxyXG4gICAgICAgICAgICA+PC9Ecm9wZG93bj5cclxuICAgICAgICAgICl9XHJcbiAgICAgICAgICA8ZGl2PmR1cGE8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgKTtcclxuICAgIH1cclxuICApXHJcbik7XHJcbiIsImV4cG9ydCBjb25zdCB0ZXh0dXJlQmluZGluZ3M6IHsgW2tleTogc3RyaW5nXTogeyBkaXNwbGF5OiBzdHJpbmc7IHZhbHVlOiBzdHJpbmcgfSB9ID0ge1xyXG4gIHRleHR1cmUxOiB7IGRpc3BsYXk6IFwidGVzIDFcIiwgdmFsdWU6IFwiZnNlZnNmc1wiIH0sXHJcbiAgdGV4dHVyZTI6IHsgZGlzcGxheTogXCJ0ZXggMjJcIiwgdmFsdWU6IFwiYWVmYWVmXCIgfSxcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBiaW5kaW5nTmFtZXMgPSBuZXcgU2V0PHN0cmluZz4oT2JqZWN0LmtleXModGV4dHVyZUJpbmRpbmdzKSk7XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0QmluZGluZ1ZhbHVlID0gKG5hbWU6IHN0cmluZykgPT4gdGV4dHVyZUJpbmRpbmdzW25hbWVdLnZhbHVlO1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldEJpbmRpbmdPcHRpb25zID0gKCkgPT4ge1xyXG4gIHJldHVybiBPYmplY3QuZW50cmllcyh0ZXh0dXJlQmluZGluZ3MpLm1hcCgoW2tleSwgdmFsdWVdKSA9PiAoe1xyXG4gICAgaWQ6IGtleSxcclxuICAgIGRpc3BsYXk6IHZhbHVlLmRpc3BsYXksXHJcbiAgfSkpO1xyXG59O1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcclxuaW1wb3J0IHsgVmlld2VyU3RhdGUgfSBmcm9tIFwiLi4vLi4vc3RvcmUvc3RhdGVcIjtcclxuaW1wb3J0IHsgdHJhbnNsYXRpb25zIH0gZnJvbSBcIi4uLy4uL3RyYW5zbGF0aW9uc1wiO1xyXG5pbXBvcnQgeyBVbmlmb3JtVHlwZSB9IGZyb20gXCIuLi8uLi91dGlscy93ZWJnbC91bmlmb3JtXCI7XHJcbmltcG9ydCB7IFNlY3Rpb25GaWVsZCB9IGZyb20gXCIuLi9TZWN0aW9uRmllbGRcIjtcclxuaW1wb3J0IHsgU2VjdGlvblRpdGxlIH0gZnJvbSBcIi4uL1NlY3Rpb25UaXRsZVwiO1xyXG5pbXBvcnQgeyBVbmlmb3JtRmllbGQgfSBmcm9tIFwiLi9Vbmlmb3JtRmllbGRcIjtcclxuXHJcbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZTogVmlld2VyU3RhdGUpID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAgdmFsdWVzOiBzdGF0ZS51bmlmb3JtVmFsdWVzLFxyXG4gIH07XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBVbmlmb3JtRmllbGRJbmZvID0geyBuYW1lOiBzdHJpbmc7IHR5cGU6IFVuaWZvcm1UeXBlIH07XHJcblxyXG5leHBvcnQgY29uc3QgVW5pZm9ybVNlY3Rpb24gPSBSZWFjdC5tZW1vKFxyXG4gIGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzKSgoeyB1bmlmb3JtRmllbGRzIH06IHsgdW5pZm9ybUZpZWxkczogVW5pZm9ybUZpZWxkSW5mb1tdIH0pID0+IHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwidmlld2VyLW9wdGlvbnMtc2VjdGlvblwiPlxyXG4gICAgICAgIDxTZWN0aW9uVGl0bGUgdGV4dD17dHJhbnNsYXRpb25zLnVuaWZvcm1zfT48L1NlY3Rpb25UaXRsZT5cclxuICAgICAgICB7dW5pZm9ybUZpZWxkcy5tYXAodWYgPT4gKFxyXG4gICAgICAgICAgPFNlY3Rpb25GaWVsZCB0ZXh0PXt1Zi5uYW1lfT5cclxuICAgICAgICAgICAgPFVuaWZvcm1GaWVsZCB7Li4udWZ9PjwvVW5pZm9ybUZpZWxkPlxyXG4gICAgICAgICAgPC9TZWN0aW9uRmllbGQ+XHJcbiAgICAgICAgKSl9XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxuICB9KVxyXG4pO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcclxuaW1wb3J0IHsgRGlzcGF0Y2ggfSBmcm9tIFwicmVkdXhcIjtcclxuaW1wb3J0IHsgVmlld2VyQWN0aW9uIH0gZnJvbSBcIi4uLy4uL3N0b3JlL2FjdGlvbnNcIjtcclxuaW1wb3J0IHsgVmlld2VyU3RhdGUgfSBmcm9tIFwiLi4vLi4vc3RvcmUvc3RhdGVcIjtcclxuaW1wb3J0IHsgVW5pZm9ybVR5cGUgfSBmcm9tIFwiLi4vLi4vdXRpbHMvd2ViZ2wvdW5pZm9ybVwiO1xyXG5pbXBvcnQge1xyXG4gIFZlY3RvcjJOdW1iZXJJbnB1dCxcclxuICBWZWN0b3IzTnVtYmVySW5wdXQsXHJcbiAgVmVjdG9yNE51bWJlcklucHV0LFxyXG4gIE1hdHJpeDR4NE51bWJlcklucHV0LFxyXG59IGZyb20gXCIuLi9jb21tb25cIjtcclxuaW1wb3J0IHsgY3VzdG9tT3B0aW9uIH0gZnJvbSBcIi4uL2NvbW1vbi9jb25zdGFudHNcIjtcclxuaW1wb3J0IHsgRHJvcGRvd24gfSBmcm9tIFwiLi4vRHJvcGRvd25cIjtcclxuaW1wb3J0IHsgZ2V0QmluZGluZ09wdGlvbnMgfSBmcm9tIFwiLi91bmlmb3JtQmluZGluZ3NcIjtcclxuaW1wb3J0IHsgZ2V0RGVmYXVsdFByb3BzIH0gZnJvbSBcIi4vdW5pZm9ybVV0aWxzXCI7XHJcblxyXG50eXBlIE93blByb3BzID0ge1xyXG4gIG5hbWU6IHN0cmluZztcclxuICB0eXBlOiBVbmlmb3JtVHlwZTtcclxufTtcclxuXHJcbmNvbnN0IHJlbmRlclVuaWZvcm1JbnB1dCA9IChcclxuICB0eXBlOiBVbmlmb3JtVHlwZSxcclxuICBwcm9wczoge1xyXG4gICAgdmFsdWU6IGFueTtcclxuICAgIG9uQ2hhbmdlOiAobmV3VmFsdWU6IGFueSkgPT4gdm9pZDtcclxuICAgIHJlYWRvbmx5OiBib29sZWFuO1xyXG4gIH1cclxuKSA9PiB7XHJcbiAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICBjYXNlIFVuaWZvcm1UeXBlLkZMT0FUX1ZFQzI6XHJcbiAgICAgIHJldHVybiA8VmVjdG9yMk51bWJlcklucHV0IHsuLi5wcm9wc30+PC9WZWN0b3IyTnVtYmVySW5wdXQ+O1xyXG4gICAgY2FzZSBVbmlmb3JtVHlwZS5GTE9BVF9WRUMzOlxyXG4gICAgICByZXR1cm4gPFZlY3RvcjNOdW1iZXJJbnB1dCB7Li4ucHJvcHN9PjwvVmVjdG9yM051bWJlcklucHV0PjtcclxuICAgIGNhc2UgVW5pZm9ybVR5cGUuRkxPQVRfVkVDNDpcclxuICAgICAgcmV0dXJuIDxWZWN0b3I0TnVtYmVySW5wdXQgey4uLnByb3BzfT48L1ZlY3RvcjROdW1iZXJJbnB1dD47XHJcbiAgICBjYXNlIFVuaWZvcm1UeXBlLkZMT0FUX01BVDQ6XHJcbiAgICAgIHJldHVybiA8TWF0cml4NHg0TnVtYmVySW5wdXQgey4uLnByb3BzfT48L01hdHJpeDR4NE51bWJlcklucHV0PjtcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJldHVybiA8ZGl2PlVuaWZvcm0gbm90IHN1cHBvcnRlZDwvZGl2PjtcclxuICB9XHJcbn07XHJcblxyXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGU6IFZpZXdlclN0YXRlLCBvd25Qcm9wczogT3duUHJvcHMpID0+IHtcclxuICBjb25zdCB1bmlmb3JtVmFsdWUgPSBzdGF0ZS51bmlmb3JtVmFsdWVzW293blByb3BzLm5hbWVdO1xyXG4gIHJldHVybiB1bmlmb3JtVmFsdWU/LnR5cGUgPT09IG93blByb3BzLnR5cGUgPyB1bmlmb3JtVmFsdWUgOiBnZXREZWZhdWx0UHJvcHMob3duUHJvcHMudHlwZSk7XHJcbn07XHJcblxyXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSAoZGlzcGF0Y2g6IERpc3BhdGNoPFZpZXdlckFjdGlvbj4sIG93blByb3BzOiBPd25Qcm9wcykgPT4ge1xyXG4gIHJldHVybiB7XHJcbiAgICBzZXRPcHRpb25BbmRWYWx1ZTogKG9wdGlvbklkOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpID0+IHtcclxuICAgICAgZGlzcGF0Y2goe1xyXG4gICAgICAgIHR5cGU6IFwiU0VUX1VOSUZPUk1cIixcclxuICAgICAgICBwYXlsb2FkOiB7IC4uLm93blByb3BzLCBvcHRpb25JZCwgdmFsdWUgfSxcclxuICAgICAgfSk7XHJcbiAgICB9LFxyXG4gIH07XHJcbn07XHJcblxyXG4vLzogYmluZGluZ05hbWVzLmhhcyhvcHRpb25JZCkgPyBnZXRCaW5kaW5nVmFsdWUob3B0aW9uSWQsIG93blByb3BzLnR5cGUpIDogdmFsdWUsXHJcblxyXG5leHBvcnQgY29uc3QgVW5pZm9ybUZpZWxkID0gUmVhY3QubWVtbyhcclxuICBjb25uZWN0KFxyXG4gICAgbWFwU3RhdGVUb1Byb3BzLFxyXG4gICAgbWFwRGlzcGF0Y2hUb1Byb3BzXHJcbiAgKShcclxuICAgIChwcm9wczoge1xyXG4gICAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICAgIHR5cGU6IG51bWJlcjtcclxuICAgICAgb3B0aW9uSWQ6IHN0cmluZztcclxuICAgICAgdmFsdWU6IGFueTtcclxuICAgICAgc2V0T3B0aW9uQW5kVmFsdWU6IChvcHRpb25JZDogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKSA9PiB2b2lkO1xyXG4gICAgfSkgPT4ge1xyXG4gICAgICBjb25zdCB7IHR5cGUsIG9wdGlvbklkLCB2YWx1ZSwgc2V0T3B0aW9uQW5kVmFsdWUgfSA9IHByb3BzO1xyXG4gICAgICBjb25zdCBvcHRpb25zID0gUmVhY3QudXNlTWVtbygoKSA9PiBbY3VzdG9tT3B0aW9uLCAuLi5nZXRCaW5kaW5nT3B0aW9ucyh0eXBlKV0sIFt0eXBlXSk7XHJcbiAgICAgIGNvbnN0IGlzQ3VzdG9tID0gb3B0aW9uSWQgPT09IGN1c3RvbU9wdGlvbi5pZDtcclxuXHJcbiAgICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdj5cclxuICAgICAgICAgIHtvcHRpb25zLmxlbmd0aCA+IDEgJiYgKFxyXG4gICAgICAgICAgICA8RHJvcGRvd25cclxuICAgICAgICAgICAgICBzZWxlY3RlZEl0ZW1JZD17b3B0aW9uSWR9XHJcbiAgICAgICAgICAgICAgb25DaGFuZ2U9e29wdGlvbklkID0+IHNldE9wdGlvbkFuZFZhbHVlKG9wdGlvbklkLCB2YWx1ZSl9XHJcbiAgICAgICAgICAgICAgb3B0aW9ucz17b3B0aW9uc31cclxuICAgICAgICAgICAgPjwvRHJvcGRvd24+XHJcbiAgICAgICAgICApfVxyXG4gICAgICAgICAge3JlbmRlclVuaWZvcm1JbnB1dCh0eXBlLCB7XHJcbiAgICAgICAgICAgIHZhbHVlLFxyXG4gICAgICAgICAgICBvbkNoYW5nZTogaXNDdXN0b20gPyBuZXdWYWx1ZSA9PiBzZXRPcHRpb25BbmRWYWx1ZShvcHRpb25JZCwgbmV3VmFsdWUpIDogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICByZWFkb25seTogIWlzQ3VzdG9tLFxyXG4gICAgICAgICAgfSl9XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgKVxyXG4pO1xyXG4iLCJleHBvcnQgKiBmcm9tIFwiLi9NYXRyaXg0eDROdW1iZXJJbnB1dFwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9WZWN0b3IyTnVtYmVySW5wdXRcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vVmVjdG9yM051bWJlcklucHV0XCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL1ZlY3RvcjROdW1iZXJJbnB1dFwiO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IHJlcGVhdCB9IGZyb20gXCIuLi8uLi8uLi8uLi9jb21tb24vYXJyYXlcIjtcclxuaW1wb3J0IHsgTXVsdGlOdW1iZXJJbnB1dCB9IGZyb20gXCIuL011bHRpTnVtYmVySW5wdXRcIjtcclxuXHJcbmNvbnN0IGRlZmF1bHRWYWx1ZSA9IHJlcGVhdCgxNiwgMCk7XHJcblxyXG5leHBvcnQgY29uc3QgTWF0cml4NHg0TnVtYmVySW5wdXQgPSAocHJvcHM6IHtcclxuICB2YWx1ZTogbnVtYmVyW107XHJcbiAgb25DaGFuZ2U6IChuZXdWYWx1ZTogbnVtYmVyW10pID0+IHZvaWQ7XHJcbn0pID0+IChcclxuICA8TXVsdGlOdW1iZXJJbnB1dFxyXG4gICAgey4uLnByb3BzfVxyXG4gICAgcm93cz17NH1cclxuICAgIGNvbHVtbnM9ezR9XHJcbiAgICB2YWx1ZT17cHJvcHMudmFsdWUgPz8gZGVmYXVsdFZhbHVlfVxyXG4gID48L011bHRpTnVtYmVySW5wdXQ+XHJcbik7XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgTXVsdGlOdW1iZXJJbnB1dCB9IGZyb20gXCIuL011bHRpTnVtYmVySW5wdXRcIjtcclxuXHJcbmNvbnN0IGRlZmF1bHRWYWx1ZSA9IFswLCAwXTtcclxuXHJcbmV4cG9ydCBjb25zdCBWZWN0b3IyTnVtYmVySW5wdXQgPSAocHJvcHM6IHtcclxuICB2YWx1ZTogbnVtYmVyW107XHJcbiAgb25DaGFuZ2U6IChuZXdWYWx1ZTogbnVtYmVyW10pID0+IHZvaWQ7XHJcbn0pID0+IChcclxuICA8TXVsdGlOdW1iZXJJbnB1dFxyXG4gICAgey4uLnByb3BzfVxyXG4gICAgcm93cz17MX1cclxuICAgIGNvbHVtbnM9ezJ9XHJcbiAgICB2YWx1ZT17cHJvcHMudmFsdWUgPz8gZGVmYXVsdFZhbHVlfVxyXG4gID48L011bHRpTnVtYmVySW5wdXQ+XHJcbik7XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgTXVsdGlOdW1iZXJJbnB1dCB9IGZyb20gXCIuL011bHRpTnVtYmVySW5wdXRcIjtcclxuXHJcbmNvbnN0IGRlZmF1bHRWYWx1ZSA9IFswLCAwLCAwXTtcclxuXHJcbmV4cG9ydCBjb25zdCBWZWN0b3IzTnVtYmVySW5wdXQgPSAocHJvcHM6IHtcclxuICB2YWx1ZTogbnVtYmVyW107XHJcbiAgb25DaGFuZ2U6IChuZXdWYWx1ZTogbnVtYmVyW10pID0+IHZvaWQ7XHJcbn0pID0+IChcclxuICA8TXVsdGlOdW1iZXJJbnB1dFxyXG4gICAgey4uLnByb3BzfVxyXG4gICAgcm93cz17MX1cclxuICAgIGNvbHVtbnM9ezN9XHJcbiAgICB2YWx1ZT17cHJvcHMudmFsdWUgPz8gZGVmYXVsdFZhbHVlfVxyXG4gID48L011bHRpTnVtYmVySW5wdXQ+XHJcbik7XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgTXVsdGlOdW1iZXJJbnB1dCB9IGZyb20gXCIuL011bHRpTnVtYmVySW5wdXRcIjtcclxuXHJcbmNvbnN0IGRlZmF1bHRWYWx1ZSA9IFswLCAwLCAwLCAwXTtcclxuXHJcbmV4cG9ydCBjb25zdCBWZWN0b3I0TnVtYmVySW5wdXQgPSAocHJvcHM6IHtcclxuICB2YWx1ZTogbnVtYmVyW107XHJcbiAgb25DaGFuZ2U6IChuZXdWYWx1ZTogbnVtYmVyW10pID0+IHZvaWQ7XHJcbn0pID0+IChcclxuICA8TXVsdGlOdW1iZXJJbnB1dFxyXG4gICAgey4uLnByb3BzfVxyXG4gICAgcm93cz17MX1cclxuICAgIGNvbHVtbnM9ezR9XHJcbiAgICB2YWx1ZT17cHJvcHMudmFsdWUgPz8gZGVmYXVsdFZhbHVlfVxyXG4gID48L011bHRpTnVtYmVySW5wdXQ+XHJcbik7XHJcbiIsImltcG9ydCB7IENhbWVyYVBvc2l0aW9uLCBjYW1lcmFQb3NpdGlvblRvVmVjdG9yMyB9IGZyb20gXCIuLy4uLy4uL3V0aWxzL2NhbWVyYU1hbmlwdWxhdG9yXCI7XHJcbmltcG9ydCB7IFVuaWZvcm1UeXBlIH0gZnJvbSBcIi4uLy4uL3V0aWxzL3dlYmdsL3VuaWZvcm1cIjtcclxuaW1wb3J0IHsgTWF0cml4NEFycmF5IH0gZnJvbSBcIi4uLy4uL3R5cGVzXCI7XHJcbmltcG9ydCB7IG1hdDQgfSBmcm9tIFwiLi4vLi4vdXRpbHMvbWF0aFwiO1xyXG5cclxuY29uc3QgZ2V0Q2FtZXJhTWF0cml4ID0gKFxyXG4gIGNhbWVyYVBvc2l0aW9uOiBDYW1lcmFQb3NpdGlvbixcclxuICBzaXplOiB7IHdpZHRoOiBudW1iZXI7IGhlaWdodDogbnVtYmVyIH1cclxuKTogTWF0cml4NEFycmF5ID0+IHtcclxuICAvL2NvbnNvbGUubG9nKFwic2l6ZVwiLCBjYW1lcmFQb3NpdGlvbiwgc2l6ZSk7XHJcblxyXG4gIGNvbnN0IGZpZWxkT2ZWaWV3ID0gKDQ1ICogTWF0aC5QSSkgLyAxODA7IC8vIGluIHJhZGlhbnNcclxuICBjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IHNpemU7XHJcbiAgY29uc3QgYXNwZWN0ID0gd2lkdGggLyBoZWlnaHQ7XHJcbiAgY29uc3Qgek5lYXIgPSAwLjE7XHJcbiAgY29uc3QgekZhciA9IDEwMC4wO1xyXG4gIGNvbnN0IHByb2plY3Rpb25NYXRyaXggPSBtYXQ0LmNyZWF0ZSgpO1xyXG4gIG1hdDQucGVyc3BlY3RpdmUocHJvamVjdGlvbk1hdHJpeCwgZmllbGRPZlZpZXcsIGFzcGVjdCwgek5lYXIsIHpGYXIpO1xyXG4gIGNvbnN0IG1vZGVsVmlld01hdHJpeCA9IG1hdDQuY3JlYXRlKCk7XHJcbiAgY29uc3QgdmVjID0gY2FtZXJhUG9zaXRpb25Ub1ZlY3RvcjMoY2FtZXJhUG9zaXRpb24pO1xyXG4gIG1hdDQubG9va0F0KG1vZGVsVmlld01hdHJpeCwgW3ZlYy54LCB2ZWMueSwgdmVjLnpdLCBbMCwgMCwgMF0sIFswLCAxLCAwXSk7XHJcbiAgY29uc3QgcmVzID0gbWF0NC5jcmVhdGUoKTtcclxuICBtYXQ0Lm11bHRpcGx5KHJlcywgcHJvamVjdGlvbk1hdHJpeCwgbW9kZWxWaWV3TWF0cml4KTtcclxuICByZXR1cm4gQXJyYXkuZnJvbShyZXMpIGFzIE1hdHJpeDRBcnJheTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCB1bmlmb3JtQmluZGluZ3MgPSBuZXcgTWFwPFxyXG4gIHN0cmluZyxcclxuICB7IGRpc3BsYXk6IHN0cmluZzsgdHlwZTogVW5pZm9ybVR5cGU7IGdldFZhbHVlOiAoLi4uYXJnOiBhbnlbXSkgPT4gYW55IH1cclxuPihbXHJcbiAgW1xyXG4gICAgXCJwZXJzcGVjdGl2ZUNhbWVyYVwiLFxyXG4gICAge1xyXG4gICAgICB0eXBlOiBVbmlmb3JtVHlwZS5GTE9BVF9NQVQ0LFxyXG4gICAgICBkaXNwbGF5OiBcIkJpbmRpbmcgLSBQZXJzcGVjdGl2ZSBDYW1lcmFcIixcclxuICAgICAgZ2V0VmFsdWU6IChjYW1lcmFQb3NpdGlvbiwgc2l6ZSkgPT4gZ2V0Q2FtZXJhTWF0cml4KGNhbWVyYVBvc2l0aW9uLCBzaXplKSxcclxuICAgIH0sXHJcbiAgXSxcclxuXSk7XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0QmluZGluZ09wdGlvbnMgPSAodHlwZTogVW5pZm9ybVR5cGUpID0+XHJcbiAgQXJyYXkuZnJvbSh1bmlmb3JtQmluZGluZ3MuZW50cmllcygpKVxyXG4gICAgLmZpbHRlcigoW18sIHZhbHVlXSkgPT4gdmFsdWUudHlwZSA9PT0gdHlwZSlcclxuICAgIC5tYXAoKFtrZXksIHZhbHVlXSkgPT4gKHtcclxuICAgICAgaWQ6IGtleSxcclxuICAgICAgZGlzcGxheTogdmFsdWUuZGlzcGxheSxcclxuICAgIH0pKTtcclxuIiwiaW1wb3J0IHsgcmVwZWF0IH0gZnJvbSBcIi4uLy4uLy4uLy4uL2NvbW1vbi9hcnJheVwiO1xyXG5pbXBvcnQgeyBhc3NlcnROZXZlciB9IGZyb20gXCIuLi8uLi91dGlscy90eXBlR3VhcmRzXCI7XHJcbmltcG9ydCB7IFVuaWZvcm1UeXBlIH0gZnJvbSBcIi4uLy4uL3V0aWxzL3dlYmdsL3VuaWZvcm1cIjtcclxuaW1wb3J0IHsgY3VzdG9tT3B0aW9uIH0gZnJvbSBcIi4uL2NvbW1vbi9jb25zdGFudHNcIjtcclxuXHJcbmNvbnN0IGdldERlZmF1bHRPcHRpb24gPSAodHlwZTogVW5pZm9ybVR5cGUpID0+IGN1c3RvbU9wdGlvbi5pZDtcclxuY29uc3QgZ2V0RGVmYXVsdFZhbHVlID0gKHR5cGU6IFVuaWZvcm1UeXBlKSA9PiB7XHJcbiAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICBjYXNlIFVuaWZvcm1UeXBlLkZMT0FUX1ZFQzI6XHJcbiAgICAgIHJldHVybiByZXBlYXQoMiwgMSk7XHJcbiAgICBjYXNlIFVuaWZvcm1UeXBlLkZMT0FUX1ZFQzM6XHJcbiAgICAgIHJldHVybiByZXBlYXQoMywgMSk7XHJcbiAgICBjYXNlIFVuaWZvcm1UeXBlLkZMT0FUX1ZFQzQ6XHJcbiAgICAgIHJldHVybiByZXBlYXQoNCwgMSk7XHJcbiAgICBjYXNlIFVuaWZvcm1UeXBlLkZMT0FUX01BVDQ6XHJcbiAgICAgIHJldHVybiBbMSwgMCwgMCwgMCwgMCwgMSwgMCwgMCwgMCwgMCwgMSwgMCwgMCwgMCwgMCwgMV07XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICBhc3NlcnROZXZlcih0eXBlKTtcclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0RGVmYXVsdFByb3BzID0gKHR5cGU6IFVuaWZvcm1UeXBlKSA9PiAoe1xyXG4gIG9wdGlvbklkOiBnZXREZWZhdWx0T3B0aW9uKHR5cGUpLFxyXG4gIHZhbHVlOiBnZXREZWZhdWx0VmFsdWUodHlwZSksXHJcbn0pO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcblxyXG5leHBvcnQgY29uc3QgU2hhZGVyc0NvbXBpbGVSZXN1bHRBcmVhID0gKHByb3BzOiB7IGVycm9yczogc3RyaW5nIH0pID0+IHtcclxuICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJzaGFkZXItY29tcGlsZS1lcnJvcnMtYXJlYVwiPntwcm9wcy5lcnJvcnN9PC9kaXY+O1xyXG59O1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IENhbWVyYVBvc2l0aW9uLCBDYW1lcmFQb3NpdGlvbk1hbmlwdWxhdG9yIH0gZnJvbSBcIi4uL3V0aWxzL2NhbWVyYU1hbmlwdWxhdG9yXCI7XHJcblxyXG5leHBvcnQgY29uc3QgdXNlUGVyc3BlY3RpdmVDYW1lcmEgPSAoXHJcbiAgZWxlbWVudDogSFRNTEVsZW1lbnQsXHJcbiAgaW5pdGlhbENhbWVyYVBvc2l0aW9uOiBDYW1lcmFQb3NpdGlvbixcclxuICBzZXRDYW1lcmFQb3NpdGlvbjogKG5ld0NhbWVyYVBvc2l0aW9uOiBDYW1lcmFQb3NpdGlvbikgPT4gdm9pZFxyXG4pID0+IHtcclxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgaWYgKCFlbGVtZW50KSByZXR1cm47XHJcbiAgICBsZXQgY2FtZXJhUG9zaXRpb24gPSB7IC4uLmluaXRpYWxDYW1lcmFQb3NpdGlvbiB9O1xyXG4gICAgY29uc3QgY2FtZXJhTWFuaXB1bGF0b3IgPSBuZXcgQ2FtZXJhUG9zaXRpb25NYW5pcHVsYXRvcihcclxuICAgICAgZWxlbWVudCxcclxuICAgICAgKCkgPT4gY2FtZXJhUG9zaXRpb24sXHJcbiAgICAgIG5ld1Bvc2l0aW9uID0+IHtcclxuICAgICAgICBjYW1lcmFQb3NpdGlvbiA9IG5ld1Bvc2l0aW9uO1xyXG4gICAgICAgIHNldENhbWVyYVBvc2l0aW9uKG5ld1Bvc2l0aW9uKTtcclxuICAgICAgfVxyXG4gICAgKTtcclxuICAgIHJldHVybiAoKSA9PiBjYW1lcmFNYW5pcHVsYXRvci5kaXNwb3NlKCk7XHJcbiAgfSwgW2VsZW1lbnRdKTtcclxufTtcclxuIiwiaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gXCIuLi90eXBlc1wiO1xyXG5cclxudHlwZSBFdmVudFR5cGUgPSBrZXlvZiBIVE1MRWxlbWVudEV2ZW50TWFwO1xyXG50eXBlIEV2ZW50SGFuZGxlcjxUIGV4dGVuZHMgRXZlbnQ+ID0gKGV2ZW50OiBUKSA9PiB2b2lkO1xyXG5cclxuZXhwb3J0IGNvbnN0IGNhbWVyYVBvc2l0aW9uVG9WZWN0b3IzID0gKFxyXG4gIGNhbWVyYVBvc2l0aW9uOiBDYW1lcmFQb3NpdGlvblxyXG4pOiBWZWN0b3IzID0+IHtcclxuICBjb25zdCB5ID0gY2FtZXJhUG9zaXRpb24ucmFkaXVzICogTWF0aC5zaW4oY2FtZXJhUG9zaXRpb24ubGF0aXR1ZGUpO1xyXG4gIGNvbnN0IHIgPSBjYW1lcmFQb3NpdGlvbi5yYWRpdXMgKiBNYXRoLmNvcyhjYW1lcmFQb3NpdGlvbi5sYXRpdHVkZSk7XHJcbiAgY29uc3QgeiA9IHIgKiBNYXRoLmNvcyhjYW1lcmFQb3NpdGlvbi5sb25naXR1ZGUpO1xyXG4gIGNvbnN0IHggPSByICogTWF0aC5zaW4oY2FtZXJhUG9zaXRpb24ubG9uZ2l0dWRlKTtcclxuICByZXR1cm4geyB4LCB5LCB6IH07XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBDYW1lcmFQb3NpdGlvbiA9IHtcclxuICBsYXRpdHVkZTogbnVtYmVyO1xyXG4gIGxvbmdpdHVkZTogbnVtYmVyO1xyXG4gIHJhZGl1czogbnVtYmVyO1xyXG59O1xyXG5cclxudHlwZSBBY3Rpb24gPVxyXG4gIHwge1xyXG4gICAgICB0eXBlOiBcIm9yYml0Um90YXRlXCI7XHJcbiAgICAgIGRlbHRhTGF0aXR1ZGU6IG51bWJlcjtcclxuICAgICAgZGVsdGFMb25naXR1ZGU6IG51bWJlcjtcclxuICAgIH1cclxuICB8IHsgdHlwZTogXCJ6b29tSW5BdFwiIH1cclxuICB8IHsgdHlwZTogXCJ6b29tT3V0QXRcIiB9O1xyXG5cclxuY29uc3QgY2xhbXBMYXRpdHVkZSA9IChsYXRpdHVkZTogbnVtYmVyKSA9PiB7XHJcbiAgcmV0dXJuIE1hdGgubWluKFxyXG4gICAgTWF0aC5tYXgobGF0aXR1ZGUsIC1NYXRoLlBJIC8gMi4wICsgMC4xKSxcclxuICAgIE1hdGguUEkgLyAyLjAgLSAwLjFcclxuICApO1xyXG59O1xyXG5cclxuY29uc3QgY2xhbXBMb25naXR1ZGUgPSAobG9uZ2l0dWRlOiBudW1iZXIpID0+IHtcclxuICBpZiAobG9uZ2l0dWRlID4gTWF0aC5QSSkgcmV0dXJuIGxvbmdpdHVkZSAtIE1hdGguUEkgKiAyLjA7XHJcbiAgZWxzZSBpZiAobG9uZ2l0dWRlIDwgLU1hdGguUEkpIHJldHVybiBsb25naXR1ZGUgKyBNYXRoLlBJICogMi4wO1xyXG4gIGVsc2UgcmV0dXJuIGxvbmdpdHVkZTtcclxufTtcclxuXHJcbmNvbnN0IGNsYW1wUmFkaXVzID0gKHJhZGl1czogbnVtYmVyKSA9PiB7XHJcbiAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KHJhZGl1cywgMSksIDEwKTtcclxufTtcclxuXHJcbmNvbnN0IHJlZHVjZXIgPSAocG9zaXRpb246IENhbWVyYVBvc2l0aW9uLCBhY3Rpb246IEFjdGlvbik6IENhbWVyYVBvc2l0aW9uID0+IHtcclxuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XHJcbiAgICBjYXNlIFwib3JiaXRSb3RhdGVcIjoge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIC4uLnBvc2l0aW9uLFxyXG4gICAgICAgIGxhdGl0dWRlOiBjbGFtcExhdGl0dWRlKHBvc2l0aW9uLmxhdGl0dWRlICsgYWN0aW9uLmRlbHRhTGF0aXR1ZGUpLFxyXG4gICAgICAgIGxvbmdpdHVkZTogY2xhbXBMb25naXR1ZGUocG9zaXRpb24ubG9uZ2l0dWRlICsgYWN0aW9uLmRlbHRhTG9uZ2l0dWRlKSxcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIGNhc2UgXCJ6b29tSW5BdFwiOiB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4ucG9zaXRpb24sXHJcbiAgICAgICAgcmFkaXVzOiBjbGFtcFJhZGl1cyhwb3NpdGlvbi5yYWRpdXMgLSAwLjEpLFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gICAgY2FzZSBcInpvb21PdXRBdFwiOiB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4ucG9zaXRpb24sXHJcbiAgICAgICAgcmFkaXVzOiBjbGFtcFJhZGl1cyhwb3NpdGlvbi5yYWRpdXMgKyAwLjEpLFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmV0dXJuIHBvc2l0aW9uO1xyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCBjbGFzcyBDYW1lcmFQb3NpdGlvbk1hbmlwdWxhdG9yIHtcclxuICBwcml2YXRlIHBvaW50ZXJQb3NpdGlvbiA9IHsgeDogMCwgeTogMCB9O1xyXG4gIGV2ZW50TGlzdGVuZXJzID0gbmV3IE1hcDxzdHJpbmcsIEV2ZW50SGFuZGxlcjxFdmVudD4+KCk7XHJcbiAgcHJpdmF0ZSBpc01vdmluZyA9IGZhbHNlO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByb3RlY3RlZCBlbGVtZW50OiBIVE1MRWxlbWVudCxcclxuICAgIHByaXZhdGUgcG9zaXRpb25Qcm92aWRlcjogKCkgPT4gQ2FtZXJhUG9zaXRpb24sXHJcbiAgICBwcml2YXRlIG9uUG9zaXRpb25DaGFuZ2U6IChuZXdQb3NpdGlvbjogQ2FtZXJhUG9zaXRpb24pID0+IHZvaWRcclxuICApIHtcclxuICAgIHRoaXMucmVnaXN0ZXJFdmVudChcIm1vdXNlZG93blwiLCB0aGlzLm9uTW91c2VEb3duKTtcclxuICAgIHRoaXMucmVnaXN0ZXJFdmVudChcIm1vdXNlbW92ZVwiLCB0aGlzLm9uTW91c2VNb3ZlKTtcclxuICAgIHRoaXMucmVnaXN0ZXJFdmVudChcIm1vdXNldXBcIiwgdGhpcy5vbk1vdXNlVXApO1xyXG4gICAgdGhpcy5yZWdpc3RlckV2ZW50KFwibW91c2VsZWF2ZVwiLCB0aGlzLm9uTW91c2VMZWF2ZSk7XHJcbiAgICB0aGlzLnJlZ2lzdGVyRXZlbnQoXCJ3aGVlbFwiLCB0aGlzLm9uV2hlZWwpO1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIHRoaXMuZXZlbnRMaXN0ZW5lcnMuZm9yRWFjaCgodmFsdWUsIGtleSkgPT5cclxuICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoa2V5LCB2YWx1ZSlcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHJlZ2lzdGVyRXZlbnQ8VCBleHRlbmRzIEV2ZW50PihcclxuICAgIHR5cGU6IEV2ZW50VHlwZSxcclxuICAgIGhhbmRsZXI6IEV2ZW50SGFuZGxlcjxUPlxyXG4gICkge1xyXG4gICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgaGFuZGxlcik7XHJcbiAgICB0aGlzLmV2ZW50TGlzdGVuZXJzLnNldCh0eXBlLCBoYW5kbGVyIGFzIEV2ZW50SGFuZGxlcjxFdmVudD4pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBkaXNwYXRjaEFjdGlvbiA9IChhY3Rpb246IEFjdGlvbikgPT4ge1xyXG4gICAgY29uc3QgbmV3Vmlld3BvcnQgPSByZWR1Y2VyKHRoaXMucG9zaXRpb25Qcm92aWRlcigpLCBhY3Rpb24pO1xyXG4gICAgdGhpcy5vblBvc2l0aW9uQ2hhbmdlKG5ld1ZpZXdwb3J0KTtcclxuICB9O1xyXG5cclxuICBwcml2YXRlIG9uTW91c2VEb3duID0gKGU6IE1vdXNlRXZlbnQpID0+IHtcclxuICAgIGlmIChlLmJ1dHRvbiA9PT0gMCkge1xyXG4gICAgICB0aGlzLnBvaW50ZXJQb3NpdGlvbiA9IHsgeDogZS5vZmZzZXRYLCB5OiBlLm9mZnNldFkgfTtcclxuICAgICAgdGhpcy5pc01vdmluZyA9IHRydWU7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgcHJpdmF0ZSBvbk1vdXNlTW92ZSA9IChlOiBNb3VzZUV2ZW50KSA9PiB7XHJcbiAgICBpZiAodGhpcy5pc01vdmluZykge1xyXG4gICAgICBjb25zdCBtdWx0aXBsaWVyID0gMC4wMTtcclxuICAgICAgdGhpcy5kaXNwYXRjaEFjdGlvbih7XHJcbiAgICAgICAgdHlwZTogXCJvcmJpdFJvdGF0ZVwiLFxyXG4gICAgICAgIGRlbHRhTG9uZ2l0dWRlOiAtKGUub2Zmc2V0WCAtIHRoaXMucG9pbnRlclBvc2l0aW9uLngpICogbXVsdGlwbGllcixcclxuICAgICAgICBkZWx0YUxhdGl0dWRlOiAoZS5vZmZzZXRZIC0gdGhpcy5wb2ludGVyUG9zaXRpb24ueSkgKiBtdWx0aXBsaWVyLFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnBvaW50ZXJQb3NpdGlvbiA9IHsgeDogZS5vZmZzZXRYLCB5OiBlLm9mZnNldFkgfTtcclxuICB9O1xyXG5cclxuICBwcml2YXRlIG9uTW91c2VVcCA9ICgpID0+IHtcclxuICAgIHRoaXMuaXNNb3ZpbmcgPSBmYWxzZTtcclxuICB9O1xyXG5cclxuICBwcml2YXRlIG9uTW91c2VMZWF2ZSA9ICgpID0+IHtcclxuICAgIHRoaXMuaXNNb3ZpbmcgPSBmYWxzZTtcclxuICB9O1xyXG5cclxuICBwcml2YXRlIG9uV2hlZWwgPSAoZTogV2hlZWxFdmVudCkgPT4ge1xyXG4gICAgY29uc3QgYWN0aW9uID0gZS5kZWx0YVkgPCAwID8gXCJ6b29tSW5BdFwiIDogXCJ6b29tT3V0QXRcIjtcclxuXHJcbiAgICB0aGlzLmRpc3BhdGNoQWN0aW9uKHtcclxuICAgICAgdHlwZTogYWN0aW9uLFxyXG4gICAgfSk7XHJcbiAgfTtcclxufVxyXG4iLCJleHBvcnQgY29uc3QgaXNQb3dlck9mMiA9ICh2YWx1ZTogbnVtYmVyKSA9PiAodmFsdWUgJiAodmFsdWUgLSAxKSkgPT0gMDtcclxuXHJcbi8vZ2wtbWF0cml4IGZ1bmN0aW9uc1xyXG5leHBvcnQgbmFtZXNwYWNlIG1hdDQge1xyXG4gIGNvbnN0IEVQU0lMT04gPSAwLjAwMDAwMTtcclxuICBleHBvcnQgZnVuY3Rpb24gY3JlYXRlKCkge1xyXG4gICAgY29uc3Qgb3V0ID0gbmV3IEZsb2F0MzJBcnJheSgxNik7XHJcbiAgICBvdXRbMF0gPSAxO1xyXG4gICAgb3V0WzVdID0gMTtcclxuICAgIG91dFsxMF0gPSAxO1xyXG4gICAgb3V0WzE1XSA9IDE7XHJcbiAgICByZXR1cm4gb3V0O1xyXG4gIH1cclxuICBleHBvcnQgZnVuY3Rpb24gcGVyc3BlY3RpdmUoXHJcbiAgICBvdXQ6IGFueSxcclxuICAgIGZvdnk6IGFueSxcclxuICAgIGFzcGVjdDogYW55LFxyXG4gICAgbmVhcjogYW55LFxyXG4gICAgZmFyOiBhbnlcclxuICApIHtcclxuICAgIGxldCBmID0gMS4wIC8gTWF0aC50YW4oZm92eSAvIDIpLFxyXG4gICAgICBuZjtcclxuICAgIG91dFswXSA9IGYgLyBhc3BlY3Q7XHJcbiAgICBvdXRbMV0gPSAwO1xyXG4gICAgb3V0WzJdID0gMDtcclxuICAgIG91dFszXSA9IDA7XHJcbiAgICBvdXRbNF0gPSAwO1xyXG4gICAgb3V0WzVdID0gZjtcclxuICAgIG91dFs2XSA9IDA7XHJcbiAgICBvdXRbN10gPSAwO1xyXG4gICAgb3V0WzhdID0gMDtcclxuICAgIG91dFs5XSA9IDA7XHJcbiAgICBvdXRbMTFdID0gLTE7XHJcbiAgICBvdXRbMTJdID0gMDtcclxuICAgIG91dFsxM10gPSAwO1xyXG4gICAgb3V0WzE1XSA9IDA7XHJcblxyXG4gICAgaWYgKGZhciAhPSBudWxsICYmIGZhciAhPT0gSW5maW5pdHkpIHtcclxuICAgICAgbmYgPSAxIC8gKG5lYXIgLSBmYXIpO1xyXG4gICAgICBvdXRbMTBdID0gKGZhciArIG5lYXIpICogbmY7XHJcbiAgICAgIG91dFsxNF0gPSAyICogZmFyICogbmVhciAqIG5mO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgb3V0WzEwXSA9IC0xO1xyXG4gICAgICBvdXRbMTRdID0gLTIgKiBuZWFyO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBvdXQ7XHJcbiAgfVxyXG4gIGZ1bmN0aW9uIGlkZW50aXR5MyhvdXQ6IGFueSkge1xyXG4gICAgb3V0WzBdID0gMTtcclxuICAgIG91dFsxXSA9IDA7XHJcbiAgICBvdXRbMl0gPSAwO1xyXG4gICAgb3V0WzNdID0gMDtcclxuICAgIG91dFs0XSA9IDA7XHJcbiAgICBvdXRbNV0gPSAxO1xyXG4gICAgb3V0WzZdID0gMDtcclxuICAgIG91dFs3XSA9IDA7XHJcbiAgICBvdXRbOF0gPSAwO1xyXG4gICAgb3V0WzldID0gMDtcclxuICAgIG91dFsxMF0gPSAxO1xyXG4gICAgb3V0WzExXSA9IDA7XHJcbiAgICBvdXRbMTJdID0gMDtcclxuICAgIG91dFsxM10gPSAwO1xyXG4gICAgb3V0WzE0XSA9IDA7XHJcbiAgICBvdXRbMTVdID0gMTtcclxuICAgIHJldHVybiBvdXQ7XHJcbiAgfVxyXG4gIGV4cG9ydCBmdW5jdGlvbiBsb29rQXQob3V0OiBhbnksIGV5ZTogYW55LCBjZW50ZXI6IGFueSwgdXA6IGFueSkge1xyXG4gICAgdmFyIHgwLCB4MSwgeDIsIHkwLCB5MSwgeTIsIHowLCB6MSwgejIsIGxlbjtcclxuICAgIHZhciBleWV4ID0gZXllWzBdO1xyXG4gICAgdmFyIGV5ZXkgPSBleWVbMV07XHJcbiAgICB2YXIgZXlleiA9IGV5ZVsyXTtcclxuICAgIHZhciB1cHggPSB1cFswXTtcclxuICAgIHZhciB1cHkgPSB1cFsxXTtcclxuICAgIHZhciB1cHogPSB1cFsyXTtcclxuICAgIHZhciBjZW50ZXJ4ID0gY2VudGVyWzBdO1xyXG4gICAgdmFyIGNlbnRlcnkgPSBjZW50ZXJbMV07XHJcbiAgICB2YXIgY2VudGVyeiA9IGNlbnRlclsyXTtcclxuXHJcbiAgICBpZiAoXHJcbiAgICAgIE1hdGguYWJzKGV5ZXggLSBjZW50ZXJ4KSA8IEVQU0lMT04gJiZcclxuICAgICAgTWF0aC5hYnMoZXlleSAtIGNlbnRlcnkpIDwgRVBTSUxPTiAmJlxyXG4gICAgICBNYXRoLmFicyhleWV6IC0gY2VudGVyeikgPCBFUFNJTE9OXHJcbiAgICApIHtcclxuICAgICAgcmV0dXJuIGlkZW50aXR5MyhvdXQpO1xyXG4gICAgfVxyXG5cclxuICAgIHowID0gZXlleCAtIGNlbnRlcng7XHJcbiAgICB6MSA9IGV5ZXkgLSBjZW50ZXJ5O1xyXG4gICAgejIgPSBleWV6IC0gY2VudGVyejtcclxuICAgIGxlbiA9IDEgLyBNYXRoLmh5cG90KHowLCB6MSwgejIpO1xyXG4gICAgejAgKj0gbGVuO1xyXG4gICAgejEgKj0gbGVuO1xyXG4gICAgejIgKj0gbGVuO1xyXG4gICAgeDAgPSB1cHkgKiB6MiAtIHVweiAqIHoxO1xyXG4gICAgeDEgPSB1cHogKiB6MCAtIHVweCAqIHoyO1xyXG4gICAgeDIgPSB1cHggKiB6MSAtIHVweSAqIHowO1xyXG4gICAgbGVuID0gTWF0aC5oeXBvdCh4MCwgeDEsIHgyKTtcclxuXHJcbiAgICBpZiAoIWxlbikge1xyXG4gICAgICB4MCA9IDA7XHJcbiAgICAgIHgxID0gMDtcclxuICAgICAgeDIgPSAwO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbGVuID0gMSAvIGxlbjtcclxuICAgICAgeDAgKj0gbGVuO1xyXG4gICAgICB4MSAqPSBsZW47XHJcbiAgICAgIHgyICo9IGxlbjtcclxuICAgIH1cclxuXHJcbiAgICB5MCA9IHoxICogeDIgLSB6MiAqIHgxO1xyXG4gICAgeTEgPSB6MiAqIHgwIC0gejAgKiB4MjtcclxuICAgIHkyID0gejAgKiB4MSAtIHoxICogeDA7XHJcbiAgICBsZW4gPSBNYXRoLmh5cG90KHkwLCB5MSwgeTIpO1xyXG5cclxuICAgIGlmICghbGVuKSB7XHJcbiAgICAgIHkwID0gMDtcclxuICAgICAgeTEgPSAwO1xyXG4gICAgICB5MiA9IDA7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBsZW4gPSAxIC8gbGVuO1xyXG4gICAgICB5MCAqPSBsZW47XHJcbiAgICAgIHkxICo9IGxlbjtcclxuICAgICAgeTIgKj0gbGVuO1xyXG4gICAgfVxyXG5cclxuICAgIG91dFswXSA9IHgwO1xyXG4gICAgb3V0WzFdID0geTA7XHJcbiAgICBvdXRbMl0gPSB6MDtcclxuICAgIG91dFszXSA9IDA7XHJcbiAgICBvdXRbNF0gPSB4MTtcclxuICAgIG91dFs1XSA9IHkxO1xyXG4gICAgb3V0WzZdID0gejE7XHJcbiAgICBvdXRbN10gPSAwO1xyXG4gICAgb3V0WzhdID0geDI7XHJcbiAgICBvdXRbOV0gPSB5MjtcclxuICAgIG91dFsxMF0gPSB6MjtcclxuICAgIG91dFsxMV0gPSAwO1xyXG4gICAgb3V0WzEyXSA9IC0oeDAgKiBleWV4ICsgeDEgKiBleWV5ICsgeDIgKiBleWV6KTtcclxuICAgIG91dFsxM10gPSAtKHkwICogZXlleCArIHkxICogZXlleSArIHkyICogZXlleik7XHJcbiAgICBvdXRbMTRdID0gLSh6MCAqIGV5ZXggKyB6MSAqIGV5ZXkgKyB6MiAqIGV5ZXopO1xyXG4gICAgb3V0WzE1XSA9IDE7XHJcbiAgICByZXR1cm4gb3V0O1xyXG4gIH1cclxuXHJcbiAgZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5KG91dDogYW55LCBhOiBhbnksIGI6IGFueSkge1xyXG4gICAgbGV0IGEwMCA9IGFbMF0sXHJcbiAgICAgIGEwMSA9IGFbMV0sXHJcbiAgICAgIGEwMiA9IGFbMl0sXHJcbiAgICAgIGEwMyA9IGFbM107XHJcbiAgICBsZXQgYTEwID0gYVs0XSxcclxuICAgICAgYTExID0gYVs1XSxcclxuICAgICAgYTEyID0gYVs2XSxcclxuICAgICAgYTEzID0gYVs3XTtcclxuICAgIGxldCBhMjAgPSBhWzhdLFxyXG4gICAgICBhMjEgPSBhWzldLFxyXG4gICAgICBhMjIgPSBhWzEwXSxcclxuICAgICAgYTIzID0gYVsxMV07XHJcbiAgICBsZXQgYTMwID0gYVsxMl0sXHJcbiAgICAgIGEzMSA9IGFbMTNdLFxyXG4gICAgICBhMzIgPSBhWzE0XSxcclxuICAgICAgYTMzID0gYVsxNV07XHJcblxyXG4gICAgLy8gQ2FjaGUgb25seSB0aGUgY3VycmVudCBsaW5lIG9mIHRoZSBzZWNvbmQgbWF0cml4XHJcbiAgICBsZXQgYjAgPSBiWzBdLFxyXG4gICAgICBiMSA9IGJbMV0sXHJcbiAgICAgIGIyID0gYlsyXSxcclxuICAgICAgYjMgPSBiWzNdO1xyXG4gICAgb3V0WzBdID0gYjAgKiBhMDAgKyBiMSAqIGExMCArIGIyICogYTIwICsgYjMgKiBhMzA7XHJcbiAgICBvdXRbMV0gPSBiMCAqIGEwMSArIGIxICogYTExICsgYjIgKiBhMjEgKyBiMyAqIGEzMTtcclxuICAgIG91dFsyXSA9IGIwICogYTAyICsgYjEgKiBhMTIgKyBiMiAqIGEyMiArIGIzICogYTMyO1xyXG4gICAgb3V0WzNdID0gYjAgKiBhMDMgKyBiMSAqIGExMyArIGIyICogYTIzICsgYjMgKiBhMzM7XHJcblxyXG4gICAgYjAgPSBiWzRdO1xyXG4gICAgYjEgPSBiWzVdO1xyXG4gICAgYjIgPSBiWzZdO1xyXG4gICAgYjMgPSBiWzddO1xyXG4gICAgb3V0WzRdID0gYjAgKiBhMDAgKyBiMSAqIGExMCArIGIyICogYTIwICsgYjMgKiBhMzA7XHJcbiAgICBvdXRbNV0gPSBiMCAqIGEwMSArIGIxICogYTExICsgYjIgKiBhMjEgKyBiMyAqIGEzMTtcclxuICAgIG91dFs2XSA9IGIwICogYTAyICsgYjEgKiBhMTIgKyBiMiAqIGEyMiArIGIzICogYTMyO1xyXG4gICAgb3V0WzddID0gYjAgKiBhMDMgKyBiMSAqIGExMyArIGIyICogYTIzICsgYjMgKiBhMzM7XHJcblxyXG4gICAgYjAgPSBiWzhdO1xyXG4gICAgYjEgPSBiWzldO1xyXG4gICAgYjIgPSBiWzEwXTtcclxuICAgIGIzID0gYlsxMV07XHJcbiAgICBvdXRbOF0gPSBiMCAqIGEwMCArIGIxICogYTEwICsgYjIgKiBhMjAgKyBiMyAqIGEzMDtcclxuICAgIG91dFs5XSA9IGIwICogYTAxICsgYjEgKiBhMTEgKyBiMiAqIGEyMSArIGIzICogYTMxO1xyXG4gICAgb3V0WzEwXSA9IGIwICogYTAyICsgYjEgKiBhMTIgKyBiMiAqIGEyMiArIGIzICogYTMyO1xyXG4gICAgb3V0WzExXSA9IGIwICogYTAzICsgYjEgKiBhMTMgKyBiMiAqIGEyMyArIGIzICogYTMzO1xyXG5cclxuICAgIGIwID0gYlsxMl07XHJcbiAgICBiMSA9IGJbMTNdO1xyXG4gICAgYjIgPSBiWzE0XTtcclxuICAgIGIzID0gYlsxNV07XHJcbiAgICBvdXRbMTJdID0gYjAgKiBhMDAgKyBiMSAqIGExMCArIGIyICogYTIwICsgYjMgKiBhMzA7XHJcbiAgICBvdXRbMTNdID0gYjAgKiBhMDEgKyBiMSAqIGExMSArIGIyICogYTIxICsgYjMgKiBhMzE7XHJcbiAgICBvdXRbMTRdID0gYjAgKiBhMDIgKyBiMSAqIGExMiArIGIyICogYTIyICsgYjMgKiBhMzI7XHJcbiAgICBvdXRbMTVdID0gYjAgKiBhMDMgKyBiMSAqIGExMyArIGIyICogYTIzICsgYjMgKiBhMzM7XHJcbiAgICByZXR1cm4gb3V0O1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IHZpZXdlckVuZHBvaW50IH0gZnJvbSBcIi4uLy4uLy4uL2NvbW1vbi9jb21tdW5pY2F0aW9uL3ZpZXdlckVuZHBvaW50XCI7XHJcblxyXG5leHBvcnQgY29uc3QgdXNlRG9jdW1lbnRXYXRjaGVyID0gKGZpbGVQYXRoOiBzdHJpbmcsIG9uQ2hhbmdlOiAoZmlsZVRleHQ6IHN0cmluZykgPT4gdm9pZCkgPT4ge1xyXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBjb25zdCB1bnN1YnNjcmliZSA9IHZpZXdlckVuZHBvaW50LnN1YnNjcmliZVRvRG9jdW1lbnRTYXZlKGZpbGVQYXRoLCBvbkNoYW5nZSk7XHJcbiAgICB2aWV3ZXJFbmRwb2ludC5nZXREb2N1bWVudFRleHQoZmlsZVBhdGgpLnRoZW4ob25DaGFuZ2UpO1xyXG4gICAgcmV0dXJuICgpID0+IHVuc3Vic2NyaWJlKCk7XHJcbiAgfSwgW2ZpbGVQYXRoXSk7XHJcbn07XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xyXG5pbXBvcnQgeyBWaWV3ZXJTdGF0ZSB9IGZyb20gXCIuLi8uLi9zdG9yZS9zdGF0ZVwiO1xyXG5pbXBvcnQgeyB0cmFuc2xhdGlvbnMgfSBmcm9tIFwiLi4vLi4vdHJhbnNsYXRpb25zXCI7XHJcbmltcG9ydCB7IEF0dHJpYnV0ZUJ1ZmZlclR5cGUgfSBmcm9tIFwiLi4vLi4vdXRpbHMvd2ViZ2wvYXR0cmlidXRlQnVmZmVyXCI7XHJcbmltcG9ydCB7IFNlY3Rpb25GaWVsZCB9IGZyb20gXCIuLi9TZWN0aW9uRmllbGRcIjtcclxuaW1wb3J0IHsgU2VjdGlvblRpdGxlIH0gZnJvbSBcIi4uL1NlY3Rpb25UaXRsZVwiO1xyXG5pbXBvcnQgeyBBdHRyaWJ1dGVCdWZmZXJGaWVsZCB9IGZyb20gXCIuL0F0dHJpYnV0ZUJ1ZmZlckZpZWxkXCI7XHJcblxyXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGU6IFZpZXdlclN0YXRlKSA9PiB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHZhbHVlczogc3RhdGUuYXR0cmlidXRlQnVmZmVyVmFsdWVzLFxyXG4gIH07XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBBdHRyaWJ1dGVCdWZmZXJGaWVsZEluZm8gPSB7IG5hbWU6IHN0cmluZzsgdHlwZTogQXR0cmlidXRlQnVmZmVyVHlwZSB9O1xyXG5cclxuZXhwb3J0IGNvbnN0IEF0dHJpYnV0ZUJ1ZmZlcnNTZWN0aW9uID0gUmVhY3QubWVtbyhcclxuICBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcykoKHByb3BzOiB7IGF0dHJpYnV0ZUJ1ZmZlckZpZWxkczogQXR0cmlidXRlQnVmZmVyRmllbGRJbmZvW10gfSkgPT4ge1xyXG4gICAgY29uc3QgeyBhdHRyaWJ1dGVCdWZmZXJGaWVsZHMgfSA9IHByb3BzO1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwidmlld2VyLW9wdGlvbnMtc2VjdGlvblwiPlxyXG4gICAgICAgIDxTZWN0aW9uVGl0bGUgdGV4dD17dHJhbnNsYXRpb25zLmF0dHJpYnV0ZUJ1ZmZlcnN9PjwvU2VjdGlvblRpdGxlPlxyXG4gICAgICAgIHthdHRyaWJ1dGVCdWZmZXJGaWVsZHMubWFwKGFiZiA9PiAoXHJcbiAgICAgICAgICA8U2VjdGlvbkZpZWxkIGtleT17YWJmLm5hbWV9IHRleHQ9e2FiZi5uYW1lfT5cclxuICAgICAgICAgICAgPEF0dHJpYnV0ZUJ1ZmZlckZpZWxkIHsuLi5hYmZ9PjwvQXR0cmlidXRlQnVmZmVyRmllbGQ+XHJcbiAgICAgICAgICA8L1NlY3Rpb25GaWVsZD5cclxuICAgICAgICApKX1cclxuICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG4gIH0pXHJcbik7XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xyXG5pbXBvcnQgeyBEaXNwYXRjaCB9IGZyb20gXCJyZWR1eFwiO1xyXG5pbXBvcnQgeyBWaWV3ZXJBY3Rpb24gfSBmcm9tIFwiLi4vLi4vc3RvcmUvYWN0aW9uc1wiO1xyXG5pbXBvcnQgeyBWaWV3ZXJTdGF0ZSB9IGZyb20gXCIuLi8uLi9zdG9yZS9zdGF0ZVwiO1xyXG5pbXBvcnQgeyBBdHRyaWJ1dGVCdWZmZXJUeXBlIH0gZnJvbSBcIi4uLy4uL3V0aWxzL3dlYmdsL2F0dHJpYnV0ZUJ1ZmZlclwiO1xyXG5pbXBvcnQgeyBnZXRBdHRyaWJ1dGVCdWZmZXJJbmZvIH0gZnJvbSBcIi4uLy4uL3V0aWxzL3dlYmdsL2F0dHJpYnV0ZUJ1ZmZlclN0b3JlXCI7XHJcbmltcG9ydCB7IEFycmF5TnVtYmVySW5wdXQgfSBmcm9tIFwiLi4vY29tbW9uL0FycmF5TnVtYmVySW5wdXRcIjtcclxuaW1wb3J0IHsgY3VzdG9tT3B0aW9uIH0gZnJvbSBcIi4uL2NvbW1vbi9jb25zdGFudHNcIjtcclxuaW1wb3J0IHsgRHJvcGRvd24gfSBmcm9tIFwiLi4vRHJvcGRvd25cIjtcclxuaW1wb3J0IHsgZ2V0QmluZGluZ09wdGlvbnMgfSBmcm9tIFwiLi9hdHRyaWJ1dGVCdWZmZXJCaW5kaW5nc1wiO1xyXG5pbXBvcnQgeyBnZXREZWZhdWx0UHJvcHMgfSBmcm9tIFwiLi9hdHRyaWJ1dGVCdWZmZXJVdGlsc1wiO1xyXG5cclxudHlwZSBGaWVsZFN0YXRlID0geyBvcHRpb25JZDogc3RyaW5nOyB2YWx1ZTogc3RyaW5nOyBpc1ZhbGlkOiBib29sZWFuIH07XHJcblxyXG50eXBlIE93blByb3BzID0ge1xyXG4gIG5hbWU6IHN0cmluZztcclxuICB0eXBlOiBBdHRyaWJ1dGVCdWZmZXJUeXBlO1xyXG59O1xyXG5cclxuY29uc3QgcmVuZGVyQXR0cmlidXRlQnVmZmVySW5wdXQgPSAoXHJcbiAgdHlwZTogQXR0cmlidXRlQnVmZmVyVHlwZSxcclxuICBwcm9wczoge1xyXG4gICAgdmFsdWU6IHN0cmluZztcclxuICAgIG9uQ2hhbmdlOiAobmV3VmFsdWU6IHN0cmluZywgaXNWYWxpZDogYm9vbGVhbikgPT4gdm9pZDtcclxuICAgIG9uQmx1cjogKHZhbHVlOiBudW1iZXJbXVtdKSA9PiB2b2lkO1xyXG4gICAgcmVhZG9ubHk/OiBib29sZWFuO1xyXG4gIH1cclxuKSA9PiB7XHJcbiAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICBjYXNlIEF0dHJpYnV0ZUJ1ZmZlclR5cGUuRkxPQVRfVkVDMjpcclxuICAgICAgcmV0dXJuIDxBcnJheU51bWJlcklucHV0IHsuLi5wcm9wc30gZWxlbWVudFNpemU9ezJ9PjwvQXJyYXlOdW1iZXJJbnB1dD47XHJcbiAgICBjYXNlIEF0dHJpYnV0ZUJ1ZmZlclR5cGUuRkxPQVRfVkVDMzpcclxuICAgICAgcmV0dXJuIDxBcnJheU51bWJlcklucHV0IHsuLi5wcm9wc30gZWxlbWVudFNpemU9ezN9PjwvQXJyYXlOdW1iZXJJbnB1dD47XHJcbiAgICBjYXNlIEF0dHJpYnV0ZUJ1ZmZlclR5cGUuRkxPQVRfVkVDNDpcclxuICAgICAgcmV0dXJuIDxBcnJheU51bWJlcklucHV0IHsuLi5wcm9wc30gZWxlbWVudFNpemU9ezR9PjwvQXJyYXlOdW1iZXJJbnB1dD47XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICByZXR1cm4gPGRpdj5Vbmlmb3JtIG5vdCBzdXBwb3J0ZWQ8L2Rpdj47XHJcbiAgfVxyXG59O1xyXG5cclxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlOiBWaWV3ZXJTdGF0ZSwgb3duUHJvcHM6IE93blByb3BzKSA9PiB7XHJcbiAgY29uc3QgYXR0aWJ1dGVCdWZmZXJWYWx1ZSA9IHN0YXRlLmF0dHJpYnV0ZUJ1ZmZlclZhbHVlc1tvd25Qcm9wcy5uYW1lXTtcclxuICByZXR1cm4ge1xyXG4gICAgc3RhdGU6XHJcbiAgICAgIGF0dGlidXRlQnVmZmVyVmFsdWU/LnR5cGUgPT09IG93blByb3BzLnR5cGVcclxuICAgICAgICA/IGF0dGlidXRlQnVmZmVyVmFsdWVcclxuICAgICAgICA6IGdldERlZmF1bHRQcm9wcyhvd25Qcm9wcy50eXBlKSxcclxuICB9O1xyXG59O1xyXG5cclxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gKGRpc3BhdGNoOiBEaXNwYXRjaDxWaWV3ZXJBY3Rpb24+LCBvd25Qcm9wczogT3duUHJvcHMpID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAgc2V0U3RhdGU6IChzdGF0ZTogRmllbGRTdGF0ZSkgPT4ge1xyXG4gICAgICBkaXNwYXRjaCh7XHJcbiAgICAgICAgdHlwZTogXCJTRVRfQVRUUklCVVRFX0JVRkZFUlwiLFxyXG4gICAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICAgIC4uLm93blByb3BzLFxyXG4gICAgICAgICAgLi4uc3RhdGUsXHJcbiAgICAgICAgfSxcclxuICAgICAgfSk7XHJcbiAgICB9LFxyXG4gIH07XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgQXR0cmlidXRlQnVmZmVyRmllbGQgPSBSZWFjdC5tZW1vKFxyXG4gIGNvbm5lY3QoXHJcbiAgICBtYXBTdGF0ZVRvUHJvcHMsXHJcbiAgICBtYXBEaXNwYXRjaFRvUHJvcHNcclxuICApKFxyXG4gICAgKHByb3BzOiB7XHJcbiAgICAgIG5hbWU6IHN0cmluZztcclxuICAgICAgdHlwZTogbnVtYmVyO1xyXG4gICAgICBzdGF0ZTogRmllbGRTdGF0ZTtcclxuICAgICAgc2V0U3RhdGU6IChzdGF0ZTogRmllbGRTdGF0ZSkgPT4gdm9pZDtcclxuICAgIH0pID0+IHtcclxuICAgICAgY29uc3QgeyBuYW1lLCB0eXBlLCBzdGF0ZSwgc2V0U3RhdGUgfSA9IHByb3BzO1xyXG4gICAgICBjb25zdCB7IHZhbHVlLCBvcHRpb25JZCB9ID0gc3RhdGU7XHJcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSBSZWFjdC51c2VNZW1vKCgpID0+IFtjdXN0b21PcHRpb24sIC4uLmdldEJpbmRpbmdPcHRpb25zKHR5cGUpXSwgW3R5cGVdKTtcclxuICAgICAgY29uc3QgaXNDdXN0b20gPSBvcHRpb25JZCA9PT0gY3VzdG9tT3B0aW9uLmlkO1xyXG5cclxuICAgICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAge29wdGlvbnMubGVuZ3RoID4gMSAmJiAoXHJcbiAgICAgICAgICAgIDxEcm9wZG93blxyXG4gICAgICAgICAgICAgIHNlbGVjdGVkSXRlbUlkPXtvcHRpb25JZH1cclxuICAgICAgICAgICAgICBvbkNoYW5nZT17b3B0aW9uSWQgPT4gc2V0U3RhdGUoeyAuLi5zdGF0ZSwgb3B0aW9uSWQgfSl9XHJcbiAgICAgICAgICAgICAgb3B0aW9ucz17b3B0aW9uc31cclxuICAgICAgICAgICAgPjwvRHJvcGRvd24+XHJcbiAgICAgICAgICApfVxyXG4gICAgICAgICAge3JlbmRlckF0dHJpYnV0ZUJ1ZmZlcklucHV0KHR5cGUsIHtcclxuICAgICAgICAgICAgdmFsdWUsXHJcbiAgICAgICAgICAgIG9uQ2hhbmdlOiBpc0N1c3RvbVxyXG4gICAgICAgICAgICAgID8gKG5ld1ZhbHVlLCBpc1ZhbGlkKSA9PiBzZXRTdGF0ZSh7IC4uLnN0YXRlLCB2YWx1ZTogbmV3VmFsdWUsIGlzVmFsaWQgfSlcclxuICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgb25CbHVyOiBuZXdWYWx1ZSA9PlxyXG4gICAgICAgICAgICAgIGdldEF0dHJpYnV0ZUJ1ZmZlckluZm8obmFtZSwgdHlwZSkuYXR0cmlidXRlQnVmZmVySW5mby5zZXRWYWx1ZShuZXdWYWx1ZSksXHJcbiAgICAgICAgICAgIHJlYWRvbmx5OiAhaXNDdXN0b20sXHJcbiAgICAgICAgICB9KX1cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgKTtcclxuICAgIH1cclxuICApXHJcbik7XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuXHJcbnR5cGUgQXJyYXlOdW1iZXJJbnB1dFByb3BzID0ge1xyXG4gIHZhbHVlOiBzdHJpbmc7XHJcbiAgb25DaGFuZ2U6IChuZXdWYWx1ZTogc3RyaW5nLCBpc1ZhbGlkOiBib29sZWFuKSA9PiB2b2lkO1xyXG4gIG9uQmx1cjogKHZhbHVlOiBudW1iZXJbXVtdKSA9PiB2b2lkO1xyXG4gIGVsZW1lbnRTaXplOiBudW1iZXI7XHJcbiAgcmVhZG9ubHk/OiBib29sZWFuO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IEFycmF5TnVtYmVySW5wdXQgPSBSZWFjdC5tZW1vKChwcm9wczogQXJyYXlOdW1iZXJJbnB1dFByb3BzKSA9PiB7XHJcbiAgY29uc3QgeyB2YWx1ZSwgZWxlbWVudFNpemUsIHJlYWRvbmx5IH0gPSBwcm9wcztcclxuICBjb25zdCBlcnJvclJlZiA9IFJlYWN0LnVzZVJlZihcIlwiKTtcclxuXHJcbiAgY29uc3Qgb25DaGFuZ2UgPSBSZWFjdC51c2VDYWxsYmFjayhcclxuICAgIChlOiBSZWFjdC5DaGFuZ2VFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4ge1xyXG4gICAgICBsZXQgbmV3RXJyb3IgPSBcIlwiO1xyXG5cclxuICAgICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBwYXJzZWRSZXN1bHQgPSBKU09OLnBhcnNlKGUudGFyZ2V0LnZhbHVlKTtcclxuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkocGFyc2VkUmVzdWx0KSkge1xyXG4gICAgICAgICAgbmV3RXJyb3IgPSBcInRoaXMgaXMgbm90IGFuIGFycmF5IHR5cGVcIjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgY29uc3QgaXNFdmVyeUVsZW1lbnRDb3JyZWN0U2l6ZSA9IHBhcnNlZFJlc3VsdC5ldmVyeShlID0+XHJcbiAgICAgICAgICAgIEFycmF5LmlzQXJyYXkoZSkgPyBlLmxlbmd0aCA9PT0gZWxlbWVudFNpemUgOiBmYWxzZVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICAgIGlmICghaXNFdmVyeUVsZW1lbnRDb3JyZWN0U2l6ZSkge1xyXG4gICAgICAgICAgICBuZXdFcnJvciA9IFwibm90IGV2ZXJ5IGVsZW1lbnQgaWQgdGhlIGFycmEgaXMgc2FtZSBzaXplXCI7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGNhdGNoIHtcclxuICAgICAgICBuZXdFcnJvciA9IFwidGhpcyBpcyBub3QgYSB2YWxpZCBmb3JtYXRcIjtcclxuICAgICAgfVxyXG5cclxuICAgICAgZXJyb3JSZWYuY3VycmVudCA9IG5ld0Vycm9yO1xyXG4gICAgICBwcm9wcy5vbkNoYW5nZShlLnRhcmdldC52YWx1ZSwgIW5ld0Vycm9yKTtcclxuICAgIH0sXHJcbiAgICBbZWxlbWVudFNpemVdXHJcbiAgKTtcclxuXHJcbiAgY29uc3Qgb25CbHVyID0gUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4ge1xyXG4gICAgIWVycm9yUmVmLmN1cnJlbnQgJiYgcHJvcHMub25CbHVyKEpTT04ucGFyc2UodmFsdWUpKTtcclxuICB9LCBbdmFsdWVdKTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXY+XHJcbiAgICAgIDxpbnB1dFxyXG4gICAgICAgIGNsYXNzTmFtZT1cImVkaXQtaW5wdXRcIlxyXG4gICAgICAgIGRpc2FibGVkPXtyZWFkb25seX1cclxuICAgICAgICB2YWx1ZT17dmFsdWV9XHJcbiAgICAgICAgb25DaGFuZ2U9e29uQ2hhbmdlfVxyXG4gICAgICAgIG9uQmx1cj17b25CbHVyfVxyXG4gICAgICA+PC9pbnB1dD5cclxuICAgICAge2Vycm9yUmVmLmN1cnJlbnQgJiYgPGRpdj57ZXJyb3JSZWYuY3VycmVudH08L2Rpdj59XHJcbiAgICA8L2Rpdj5cclxuICApO1xyXG59KTtcclxuIiwiaW1wb3J0IHsgQXR0cmlidXRlQnVmZmVyVHlwZSB9IGZyb20gXCIuLy4uLy4uL3V0aWxzL3dlYmdsL2F0dHJpYnV0ZUJ1ZmZlclwiO1xyXG5pbXBvcnQgeyBjdXN0b21PcHRpb24gfSBmcm9tIFwiLi4vY29tbW9uL2NvbnN0YW50c1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldERlZmF1bHRQcm9wcyA9ICh0eXBlOiBBdHRyaWJ1dGVCdWZmZXJUeXBlKSA9PiAoe1xyXG4gIG9wdGlvbklkOiBjdXN0b21PcHRpb24uaWQsXHJcbiAgdmFsdWU6IFwiW11cIixcclxuICBpc1ZhbGlkOiB0cnVlLFxyXG59KTtcclxuIiwiZXhwb3J0IGNvbnN0IHNhZmVKU09OUGFyc2UgPSAodmFsdWU6IHN0cmluZyk6IGFueSB8IG51bGwgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICByZXR1cm4gSlNPTi5wYXJzZSh2YWx1ZSk7XHJcbiAgfSBjYXRjaCB7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcbn07XHJcbiIsImV4cG9ydCBjb25zdCBvYmplY3RNYXAgPSA8VCBleHRlbmRzIHsgW2tleTogc3RyaW5nXTogYW55IH0+KFxyXG4gIG9iamVjdDogVCxcclxuICBtYXA6ICh2YWx1ZTogYW55LCBrZXk6IHN0cmluZykgPT4gYW55XHJcbikgPT4ge1xyXG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmplY3QpLnJlZHVjZSgocmVzdWx0LCBrZXkpID0+IHtcclxuICAgIHJlc3VsdFtrZXldID0gbWFwKG9iamVjdFtrZXldLCBrZXkpO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9LCB7fSBhcyB7IFtrZXk6IHN0cmluZ106IGFueSB9KTtcclxufTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==