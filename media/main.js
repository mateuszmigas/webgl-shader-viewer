!function(t){var n={};function r(e){if(n[e])return n[e].exports;var a=n[e]={i:e,l:!1,exports:{}};return t[e].call(a.exports,a,a.exports,r),a.l=!0,a.exports}r.m=t,r.c=n,r.d=function(t,n,e){r.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:e})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,n){if(1&n&&(t=r(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(r.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var a in t)r.d(e,a,function(n){return t[n]}.bind(null,a));return e},r.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(n,"a",n),n},r.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},r.p="",r(r.s=1)}([function(t,n,r){
/*!
@fileoverview gl-matrix - High performance matrix and vector operations
@author Brandon Jones
@author Colin MacKenzie IV
@version 3.3.0

Copyright (c) 2015-2020, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/
!function(t){"use strict";var n=1e-6,r="undefined"!=typeof Float32Array?Float32Array:Array,e=Math.random,a=Math.PI/180;Math.hypot||(Math.hypot=function(){for(var t=0,n=arguments.length;n--;)t+=arguments[n]*arguments[n];return Math.sqrt(t)});var u=Object.freeze({__proto__:null,EPSILON:n,get ARRAY_TYPE(){return r},RANDOM:e,setMatrixArrayType:function(t){r=t},toRadian:function(t){return t*a},equals:function(t,r){return Math.abs(t-r)<=n*Math.max(1,Math.abs(t),Math.abs(r))}});function o(t,n,r){var e=n[0],a=n[1],u=n[2],o=n[3],i=r[0],c=r[1],s=r[2],f=r[3];return t[0]=e*i+u*c,t[1]=a*i+o*c,t[2]=e*s+u*f,t[3]=a*s+o*f,t}function i(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t[3]=n[3]-r[3],t}var c=o,s=i,f=Object.freeze({__proto__:null,create:function(){var t=new r(4);return r!=Float32Array&&(t[1]=0,t[2]=0),t[0]=1,t[3]=1,t},clone:function(t){var n=new r(4);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n},copy:function(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t},identity:function(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t},fromValues:function(t,n,e,a){var u=new r(4);return u[0]=t,u[1]=n,u[2]=e,u[3]=a,u},set:function(t,n,r,e,a){return t[0]=n,t[1]=r,t[2]=e,t[3]=a,t},transpose:function(t,n){if(t===n){var r=n[1];t[1]=n[2],t[2]=r}else t[0]=n[0],t[1]=n[2],t[2]=n[1],t[3]=n[3];return t},invert:function(t,n){var r=n[0],e=n[1],a=n[2],u=n[3],o=r*u-a*e;return o?(o=1/o,t[0]=u*o,t[1]=-e*o,t[2]=-a*o,t[3]=r*o,t):null},adjoint:function(t,n){var r=n[0];return t[0]=n[3],t[1]=-n[1],t[2]=-n[2],t[3]=r,t},determinant:function(t){return t[0]*t[3]-t[2]*t[1]},multiply:o,rotate:function(t,n,r){var e=n[0],a=n[1],u=n[2],o=n[3],i=Math.sin(r),c=Math.cos(r);return t[0]=e*c+u*i,t[1]=a*c+o*i,t[2]=e*-i+u*c,t[3]=a*-i+o*c,t},scale:function(t,n,r){var e=n[0],a=n[1],u=n[2],o=n[3],i=r[0],c=r[1];return t[0]=e*i,t[1]=a*i,t[2]=u*c,t[3]=o*c,t},fromRotation:function(t,n){var r=Math.sin(n),e=Math.cos(n);return t[0]=e,t[1]=r,t[2]=-r,t[3]=e,t},fromScaling:function(t,n){return t[0]=n[0],t[1]=0,t[2]=0,t[3]=n[1],t},str:function(t){return"mat2("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+")"},frob:function(t){return Math.hypot(t[0],t[1],t[2],t[3])},LDU:function(t,n,r,e){return t[2]=e[2]/e[0],r[0]=e[0],r[1]=e[1],r[3]=e[3]-t[2]*r[1],[t,n,r]},add:function(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t[3]=n[3]+r[3],t},subtract:i,exactEquals:function(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]},equals:function(t,r){var e=t[0],a=t[1],u=t[2],o=t[3],i=r[0],c=r[1],s=r[2],f=r[3];return Math.abs(e-i)<=n*Math.max(1,Math.abs(e),Math.abs(i))&&Math.abs(a-c)<=n*Math.max(1,Math.abs(a),Math.abs(c))&&Math.abs(u-s)<=n*Math.max(1,Math.abs(u),Math.abs(s))&&Math.abs(o-f)<=n*Math.max(1,Math.abs(o),Math.abs(f))},multiplyScalar:function(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=n[3]*r,t},multiplyScalarAndAdd:function(t,n,r,e){return t[0]=n[0]+r[0]*e,t[1]=n[1]+r[1]*e,t[2]=n[2]+r[2]*e,t[3]=n[3]+r[3]*e,t},mul:c,sub:s});function h(t,n,r){var e=n[0],a=n[1],u=n[2],o=n[3],i=n[4],c=n[5],s=r[0],f=r[1],h=r[2],l=r[3],M=r[4],m=r[5];return t[0]=e*s+u*f,t[1]=a*s+o*f,t[2]=e*h+u*l,t[3]=a*h+o*l,t[4]=e*M+u*m+i,t[5]=a*M+o*m+c,t}function l(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t[3]=n[3]-r[3],t[4]=n[4]-r[4],t[5]=n[5]-r[5],t}var M=h,m=l,v=Object.freeze({__proto__:null,create:function(){var t=new r(6);return r!=Float32Array&&(t[1]=0,t[2]=0,t[4]=0,t[5]=0),t[0]=1,t[3]=1,t},clone:function(t){var n=new r(6);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n[4]=t[4],n[5]=t[5],n},copy:function(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t},identity:function(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t[4]=0,t[5]=0,t},fromValues:function(t,n,e,a,u,o){var i=new r(6);return i[0]=t,i[1]=n,i[2]=e,i[3]=a,i[4]=u,i[5]=o,i},set:function(t,n,r,e,a,u,o){return t[0]=n,t[1]=r,t[2]=e,t[3]=a,t[4]=u,t[5]=o,t},invert:function(t,n){var r=n[0],e=n[1],a=n[2],u=n[3],o=n[4],i=n[5],c=r*u-e*a;return c?(c=1/c,t[0]=u*c,t[1]=-e*c,t[2]=-a*c,t[3]=r*c,t[4]=(a*i-u*o)*c,t[5]=(e*o-r*i)*c,t):null},determinant:function(t){return t[0]*t[3]-t[1]*t[2]},multiply:h,rotate:function(t,n,r){var e=n[0],a=n[1],u=n[2],o=n[3],i=n[4],c=n[5],s=Math.sin(r),f=Math.cos(r);return t[0]=e*f+u*s,t[1]=a*f+o*s,t[2]=e*-s+u*f,t[3]=a*-s+o*f,t[4]=i,t[5]=c,t},scale:function(t,n,r){var e=n[0],a=n[1],u=n[2],o=n[3],i=n[4],c=n[5],s=r[0],f=r[1];return t[0]=e*s,t[1]=a*s,t[2]=u*f,t[3]=o*f,t[4]=i,t[5]=c,t},translate:function(t,n,r){var e=n[0],a=n[1],u=n[2],o=n[3],i=n[4],c=n[5],s=r[0],f=r[1];return t[0]=e,t[1]=a,t[2]=u,t[3]=o,t[4]=e*s+u*f+i,t[5]=a*s+o*f+c,t},fromRotation:function(t,n){var r=Math.sin(n),e=Math.cos(n);return t[0]=e,t[1]=r,t[2]=-r,t[3]=e,t[4]=0,t[5]=0,t},fromScaling:function(t,n){return t[0]=n[0],t[1]=0,t[2]=0,t[3]=n[1],t[4]=0,t[5]=0,t},fromTranslation:function(t,n){return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t[4]=n[0],t[5]=n[1],t},str:function(t){return"mat2d("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+")"},frob:function(t){return Math.hypot(t[0],t[1],t[2],t[3],t[4],t[5],1)},add:function(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t[3]=n[3]+r[3],t[4]=n[4]+r[4],t[5]=n[5]+r[5],t},subtract:l,multiplyScalar:function(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=n[3]*r,t[4]=n[4]*r,t[5]=n[5]*r,t},multiplyScalarAndAdd:function(t,n,r,e){return t[0]=n[0]+r[0]*e,t[1]=n[1]+r[1]*e,t[2]=n[2]+r[2]*e,t[3]=n[3]+r[3]*e,t[4]=n[4]+r[4]*e,t[5]=n[5]+r[5]*e,t},exactEquals:function(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]&&t[4]===n[4]&&t[5]===n[5]},equals:function(t,r){var e=t[0],a=t[1],u=t[2],o=t[3],i=t[4],c=t[5],s=r[0],f=r[1],h=r[2],l=r[3],M=r[4],m=r[5];return Math.abs(e-s)<=n*Math.max(1,Math.abs(e),Math.abs(s))&&Math.abs(a-f)<=n*Math.max(1,Math.abs(a),Math.abs(f))&&Math.abs(u-h)<=n*Math.max(1,Math.abs(u),Math.abs(h))&&Math.abs(o-l)<=n*Math.max(1,Math.abs(o),Math.abs(l))&&Math.abs(i-M)<=n*Math.max(1,Math.abs(i),Math.abs(M))&&Math.abs(c-m)<=n*Math.max(1,Math.abs(c),Math.abs(m))},mul:M,sub:m});function p(){var t=new r(9);return r!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[5]=0,t[6]=0,t[7]=0),t[0]=1,t[4]=1,t[8]=1,t}function d(t,n,r){var e=n[0],a=n[1],u=n[2],o=n[3],i=n[4],c=n[5],s=n[6],f=n[7],h=n[8],l=r[0],M=r[1],m=r[2],v=r[3],p=r[4],d=r[5],b=r[6],y=r[7],g=r[8];return t[0]=l*e+M*o+m*s,t[1]=l*a+M*i+m*f,t[2]=l*u+M*c+m*h,t[3]=v*e+p*o+d*s,t[4]=v*a+p*i+d*f,t[5]=v*u+p*c+d*h,t[6]=b*e+y*o+g*s,t[7]=b*a+y*i+g*f,t[8]=b*u+y*c+g*h,t}function b(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t[3]=n[3]-r[3],t[4]=n[4]-r[4],t[5]=n[5]-r[5],t[6]=n[6]-r[6],t[7]=n[7]-r[7],t[8]=n[8]-r[8],t}var y=d,g=b,x=Object.freeze({__proto__:null,create:p,fromMat4:function(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[4],t[4]=n[5],t[5]=n[6],t[6]=n[8],t[7]=n[9],t[8]=n[10],t},clone:function(t){var n=new r(9);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n[4]=t[4],n[5]=t[5],n[6]=t[6],n[7]=t[7],n[8]=t[8],n},copy:function(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t},fromValues:function(t,n,e,a,u,o,i,c,s){var f=new r(9);return f[0]=t,f[1]=n,f[2]=e,f[3]=a,f[4]=u,f[5]=o,f[6]=i,f[7]=c,f[8]=s,f},set:function(t,n,r,e,a,u,o,i,c,s){return t[0]=n,t[1]=r,t[2]=e,t[3]=a,t[4]=u,t[5]=o,t[6]=i,t[7]=c,t[8]=s,t},identity:function(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t},transpose:function(t,n){if(t===n){var r=n[1],e=n[2],a=n[5];t[1]=n[3],t[2]=n[6],t[3]=r,t[5]=n[7],t[6]=e,t[7]=a}else t[0]=n[0],t[1]=n[3],t[2]=n[6],t[3]=n[1],t[4]=n[4],t[5]=n[7],t[6]=n[2],t[7]=n[5],t[8]=n[8];return t},invert:function(t,n){var r=n[0],e=n[1],a=n[2],u=n[3],o=n[4],i=n[5],c=n[6],s=n[7],f=n[8],h=f*o-i*s,l=-f*u+i*c,M=s*u-o*c,m=r*h+e*l+a*M;return m?(m=1/m,t[0]=h*m,t[1]=(-f*e+a*s)*m,t[2]=(i*e-a*o)*m,t[3]=l*m,t[4]=(f*r-a*c)*m,t[5]=(-i*r+a*u)*m,t[6]=M*m,t[7]=(-s*r+e*c)*m,t[8]=(o*r-e*u)*m,t):null},adjoint:function(t,n){var r=n[0],e=n[1],a=n[2],u=n[3],o=n[4],i=n[5],c=n[6],s=n[7],f=n[8];return t[0]=o*f-i*s,t[1]=a*s-e*f,t[2]=e*i-a*o,t[3]=i*c-u*f,t[4]=r*f-a*c,t[5]=a*u-r*i,t[6]=u*s-o*c,t[7]=e*c-r*s,t[8]=r*o-e*u,t},determinant:function(t){var n=t[0],r=t[1],e=t[2],a=t[3],u=t[4],o=t[5],i=t[6],c=t[7],s=t[8];return n*(s*u-o*c)+r*(-s*a+o*i)+e*(c*a-u*i)},multiply:d,translate:function(t,n,r){var e=n[0],a=n[1],u=n[2],o=n[3],i=n[4],c=n[5],s=n[6],f=n[7],h=n[8],l=r[0],M=r[1];return t[0]=e,t[1]=a,t[2]=u,t[3]=o,t[4]=i,t[5]=c,t[6]=l*e+M*o+s,t[7]=l*a+M*i+f,t[8]=l*u+M*c+h,t},rotate:function(t,n,r){var e=n[0],a=n[1],u=n[2],o=n[3],i=n[4],c=n[5],s=n[6],f=n[7],h=n[8],l=Math.sin(r),M=Math.cos(r);return t[0]=M*e+l*o,t[1]=M*a+l*i,t[2]=M*u+l*c,t[3]=M*o-l*e,t[4]=M*i-l*a,t[5]=M*c-l*u,t[6]=s,t[7]=f,t[8]=h,t},scale:function(t,n,r){var e=r[0],a=r[1];return t[0]=e*n[0],t[1]=e*n[1],t[2]=e*n[2],t[3]=a*n[3],t[4]=a*n[4],t[5]=a*n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t},fromTranslation:function(t,n){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=n[0],t[7]=n[1],t[8]=1,t},fromRotation:function(t,n){var r=Math.sin(n),e=Math.cos(n);return t[0]=e,t[1]=r,t[2]=0,t[3]=-r,t[4]=e,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t},fromScaling:function(t,n){return t[0]=n[0],t[1]=0,t[2]=0,t[3]=0,t[4]=n[1],t[5]=0,t[6]=0,t[7]=0,t[8]=1,t},fromMat2d:function(t,n){return t[0]=n[0],t[1]=n[1],t[2]=0,t[3]=n[2],t[4]=n[3],t[5]=0,t[6]=n[4],t[7]=n[5],t[8]=1,t},fromQuat:function(t,n){var r=n[0],e=n[1],a=n[2],u=n[3],o=r+r,i=e+e,c=a+a,s=r*o,f=e*o,h=e*i,l=a*o,M=a*i,m=a*c,v=u*o,p=u*i,d=u*c;return t[0]=1-h-m,t[3]=f-d,t[6]=l+p,t[1]=f+d,t[4]=1-s-m,t[7]=M-v,t[2]=l-p,t[5]=M+v,t[8]=1-s-h,t},normalFromMat4:function(t,n){var r=n[0],e=n[1],a=n[2],u=n[3],o=n[4],i=n[5],c=n[6],s=n[7],f=n[8],h=n[9],l=n[10],M=n[11],m=n[12],v=n[13],p=n[14],d=n[15],b=r*i-e*o,y=r*c-a*o,g=r*s-u*o,x=e*c-a*i,A=e*s-u*i,E=a*s-u*c,w=f*v-h*m,T=f*p-l*m,_=f*d-M*m,S=h*p-l*v,O=h*d-M*v,V=l*d-M*p,q=b*V-y*O+g*S+x*_-A*T+E*w;return q?(q=1/q,t[0]=(i*V-c*O+s*S)*q,t[1]=(c*_-o*V-s*T)*q,t[2]=(o*O-i*_+s*w)*q,t[3]=(a*O-e*V-u*S)*q,t[4]=(r*V-a*_+u*T)*q,t[5]=(e*_-r*O-u*w)*q,t[6]=(v*E-p*A+d*x)*q,t[7]=(p*g-m*E-d*y)*q,t[8]=(m*A-v*g+d*b)*q,t):null},projection:function(t,n,r){return t[0]=2/n,t[1]=0,t[2]=0,t[3]=0,t[4]=-2/r,t[5]=0,t[6]=-1,t[7]=1,t[8]=1,t},str:function(t){return"mat3("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+", "+t[8]+")"},frob:function(t){return Math.hypot(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8])},add:function(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t[3]=n[3]+r[3],t[4]=n[4]+r[4],t[5]=n[5]+r[5],t[6]=n[6]+r[6],t[7]=n[7]+r[7],t[8]=n[8]+r[8],t},subtract:b,multiplyScalar:function(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=n[3]*r,t[4]=n[4]*r,t[5]=n[5]*r,t[6]=n[6]*r,t[7]=n[7]*r,t[8]=n[8]*r,t},multiplyScalarAndAdd:function(t,n,r,e){return t[0]=n[0]+r[0]*e,t[1]=n[1]+r[1]*e,t[2]=n[2]+r[2]*e,t[3]=n[3]+r[3]*e,t[4]=n[4]+r[4]*e,t[5]=n[5]+r[5]*e,t[6]=n[6]+r[6]*e,t[7]=n[7]+r[7]*e,t[8]=n[8]+r[8]*e,t},exactEquals:function(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]&&t[4]===n[4]&&t[5]===n[5]&&t[6]===n[6]&&t[7]===n[7]&&t[8]===n[8]},equals:function(t,r){var e=t[0],a=t[1],u=t[2],o=t[3],i=t[4],c=t[5],s=t[6],f=t[7],h=t[8],l=r[0],M=r[1],m=r[2],v=r[3],p=r[4],d=r[5],b=r[6],y=r[7],g=r[8];return Math.abs(e-l)<=n*Math.max(1,Math.abs(e),Math.abs(l))&&Math.abs(a-M)<=n*Math.max(1,Math.abs(a),Math.abs(M))&&Math.abs(u-m)<=n*Math.max(1,Math.abs(u),Math.abs(m))&&Math.abs(o-v)<=n*Math.max(1,Math.abs(o),Math.abs(v))&&Math.abs(i-p)<=n*Math.max(1,Math.abs(i),Math.abs(p))&&Math.abs(c-d)<=n*Math.max(1,Math.abs(c),Math.abs(d))&&Math.abs(s-b)<=n*Math.max(1,Math.abs(s),Math.abs(b))&&Math.abs(f-y)<=n*Math.max(1,Math.abs(f),Math.abs(y))&&Math.abs(h-g)<=n*Math.max(1,Math.abs(h),Math.abs(g))},mul:y,sub:g});function A(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function E(t,n,r){var e=n[0],a=n[1],u=n[2],o=n[3],i=n[4],c=n[5],s=n[6],f=n[7],h=n[8],l=n[9],M=n[10],m=n[11],v=n[12],p=n[13],d=n[14],b=n[15],y=r[0],g=r[1],x=r[2],A=r[3];return t[0]=y*e+g*i+x*h+A*v,t[1]=y*a+g*c+x*l+A*p,t[2]=y*u+g*s+x*M+A*d,t[3]=y*o+g*f+x*m+A*b,y=r[4],g=r[5],x=r[6],A=r[7],t[4]=y*e+g*i+x*h+A*v,t[5]=y*a+g*c+x*l+A*p,t[6]=y*u+g*s+x*M+A*d,t[7]=y*o+g*f+x*m+A*b,y=r[8],g=r[9],x=r[10],A=r[11],t[8]=y*e+g*i+x*h+A*v,t[9]=y*a+g*c+x*l+A*p,t[10]=y*u+g*s+x*M+A*d,t[11]=y*o+g*f+x*m+A*b,y=r[12],g=r[13],x=r[14],A=r[15],t[12]=y*e+g*i+x*h+A*v,t[13]=y*a+g*c+x*l+A*p,t[14]=y*u+g*s+x*M+A*d,t[15]=y*o+g*f+x*m+A*b,t}function w(t,n,r){var e=n[0],a=n[1],u=n[2],o=n[3],i=e+e,c=a+a,s=u+u,f=e*i,h=e*c,l=e*s,M=a*c,m=a*s,v=u*s,p=o*i,d=o*c,b=o*s;return t[0]=1-(M+v),t[1]=h+b,t[2]=l-d,t[3]=0,t[4]=h-b,t[5]=1-(f+v),t[6]=m+p,t[7]=0,t[8]=l+d,t[9]=m-p,t[10]=1-(f+M),t[11]=0,t[12]=r[0],t[13]=r[1],t[14]=r[2],t[15]=1,t}function T(t,n){return t[0]=n[12],t[1]=n[13],t[2]=n[14],t}function _(t,n){var r=n[0],e=n[1],a=n[2],u=n[4],o=n[5],i=n[6],c=n[8],s=n[9],f=n[10];return t[0]=Math.hypot(r,e,a),t[1]=Math.hypot(u,o,i),t[2]=Math.hypot(c,s,f),t}function S(t,n){var e=new r(3);_(e,n);var a=1/e[0],u=1/e[1],o=1/e[2],i=n[0]*a,c=n[1]*u,s=n[2]*o,f=n[4]*a,h=n[5]*u,l=n[6]*o,M=n[8]*a,m=n[9]*u,v=n[10]*o,p=i+h+v,d=0;return p>0?(d=2*Math.sqrt(p+1),t[3]=.25*d,t[0]=(l-m)/d,t[1]=(M-s)/d,t[2]=(c-f)/d):i>h&&i>v?(d=2*Math.sqrt(1+i-h-v),t[3]=(l-m)/d,t[0]=.25*d,t[1]=(c+f)/d,t[2]=(M+s)/d):h>v?(d=2*Math.sqrt(1+h-i-v),t[3]=(M-s)/d,t[0]=(c+f)/d,t[1]=.25*d,t[2]=(l+m)/d):(d=2*Math.sqrt(1+v-i-h),t[3]=(c-f)/d,t[0]=(M+s)/d,t[1]=(l+m)/d,t[2]=.25*d),t}function O(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t[3]=n[3]-r[3],t[4]=n[4]-r[4],t[5]=n[5]-r[5],t[6]=n[6]-r[6],t[7]=n[7]-r[7],t[8]=n[8]-r[8],t[9]=n[9]-r[9],t[10]=n[10]-r[10],t[11]=n[11]-r[11],t[12]=n[12]-r[12],t[13]=n[13]-r[13],t[14]=n[14]-r[14],t[15]=n[15]-r[15],t}var V=E,q=O,L=Object.freeze({__proto__:null,create:function(){var t=new r(16);return r!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0),t[0]=1,t[5]=1,t[10]=1,t[15]=1,t},clone:function(t){var n=new r(16);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n[4]=t[4],n[5]=t[5],n[6]=t[6],n[7]=t[7],n[8]=t[8],n[9]=t[9],n[10]=t[10],n[11]=t[11],n[12]=t[12],n[13]=t[13],n[14]=t[14],n[15]=t[15],n},copy:function(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],t},fromValues:function(t,n,e,a,u,o,i,c,s,f,h,l,M,m,v,p){var d=new r(16);return d[0]=t,d[1]=n,d[2]=e,d[3]=a,d[4]=u,d[5]=o,d[6]=i,d[7]=c,d[8]=s,d[9]=f,d[10]=h,d[11]=l,d[12]=M,d[13]=m,d[14]=v,d[15]=p,d},set:function(t,n,r,e,a,u,o,i,c,s,f,h,l,M,m,v,p){return t[0]=n,t[1]=r,t[2]=e,t[3]=a,t[4]=u,t[5]=o,t[6]=i,t[7]=c,t[8]=s,t[9]=f,t[10]=h,t[11]=l,t[12]=M,t[13]=m,t[14]=v,t[15]=p,t},identity:A,transpose:function(t,n){if(t===n){var r=n[1],e=n[2],a=n[3],u=n[6],o=n[7],i=n[11];t[1]=n[4],t[2]=n[8],t[3]=n[12],t[4]=r,t[6]=n[9],t[7]=n[13],t[8]=e,t[9]=u,t[11]=n[14],t[12]=a,t[13]=o,t[14]=i}else t[0]=n[0],t[1]=n[4],t[2]=n[8],t[3]=n[12],t[4]=n[1],t[5]=n[5],t[6]=n[9],t[7]=n[13],t[8]=n[2],t[9]=n[6],t[10]=n[10],t[11]=n[14],t[12]=n[3],t[13]=n[7],t[14]=n[11],t[15]=n[15];return t},invert:function(t,n){var r=n[0],e=n[1],a=n[2],u=n[3],o=n[4],i=n[5],c=n[6],s=n[7],f=n[8],h=n[9],l=n[10],M=n[11],m=n[12],v=n[13],p=n[14],d=n[15],b=r*i-e*o,y=r*c-a*o,g=r*s-u*o,x=e*c-a*i,A=e*s-u*i,E=a*s-u*c,w=f*v-h*m,T=f*p-l*m,_=f*d-M*m,S=h*p-l*v,O=h*d-M*v,V=l*d-M*p,q=b*V-y*O+g*S+x*_-A*T+E*w;return q?(q=1/q,t[0]=(i*V-c*O+s*S)*q,t[1]=(a*O-e*V-u*S)*q,t[2]=(v*E-p*A+d*x)*q,t[3]=(l*A-h*E-M*x)*q,t[4]=(c*_-o*V-s*T)*q,t[5]=(r*V-a*_+u*T)*q,t[6]=(p*g-m*E-d*y)*q,t[7]=(f*E-l*g+M*y)*q,t[8]=(o*O-i*_+s*w)*q,t[9]=(e*_-r*O-u*w)*q,t[10]=(m*A-v*g+d*b)*q,t[11]=(h*g-f*A-M*b)*q,t[12]=(i*T-o*S-c*w)*q,t[13]=(r*S-e*T+a*w)*q,t[14]=(v*y-m*x-p*b)*q,t[15]=(f*x-h*y+l*b)*q,t):null},adjoint:function(t,n){var r=n[0],e=n[1],a=n[2],u=n[3],o=n[4],i=n[5],c=n[6],s=n[7],f=n[8],h=n[9],l=n[10],M=n[11],m=n[12],v=n[13],p=n[14],d=n[15],b=r*i-e*o,y=r*c-a*o,g=r*s-u*o,x=e*c-a*i,A=e*s-u*i,E=a*s-u*c,w=f*v-h*m,T=f*p-l*m,_=f*d-M*m,S=h*p-l*v,O=h*d-M*v,V=l*d-M*p;return t[0]=i*V-c*O+s*S,t[1]=a*O-e*V-u*S,t[2]=v*E-p*A+d*x,t[3]=l*A-h*E-M*x,t[4]=c*_-o*V-s*T,t[5]=r*V-a*_+u*T,t[6]=p*g-m*E-d*y,t[7]=f*E-l*g+M*y,t[8]=o*O-i*_+s*w,t[9]=e*_-r*O-u*w,t[10]=m*A-v*g+d*b,t[11]=h*g-f*A-M*b,t[12]=i*T-o*S-c*w,t[13]=r*S-e*T+a*w,t[14]=v*y-m*x-p*b,t[15]=f*x-h*y+l*b,t},determinant:function(t){var n=t[0],r=t[1],e=t[2],a=t[3],u=t[4],o=t[5],i=t[6],c=t[7],s=t[8],f=t[9],h=t[10],l=t[11],M=t[12],m=t[13],v=t[14],p=n*o-r*u,d=n*i-e*u,b=r*i-e*o,y=s*m-f*M,g=s*v-h*M,x=f*v-h*m;return c*(n*x-r*g+e*y)-a*(u*x-o*g+i*y)+t[15]*(s*b-f*d+h*p)-l*(M*b-m*d+v*p)},multiply:E,translate:function(t,n,r){var e,a,u,o,i,c,s,f,h,l,M,m,v=r[0],p=r[1],d=r[2];return n===t?(t[12]=n[0]*v+n[4]*p+n[8]*d+n[12],t[13]=n[1]*v+n[5]*p+n[9]*d+n[13],t[14]=n[2]*v+n[6]*p+n[10]*d+n[14],t[15]=n[3]*v+n[7]*p+n[11]*d+n[15]):(e=n[0],a=n[1],u=n[2],o=n[3],i=n[4],c=n[5],s=n[6],f=n[7],h=n[8],l=n[9],M=n[10],m=n[11],t[0]=e,t[1]=a,t[2]=u,t[3]=o,t[4]=i,t[5]=c,t[6]=s,t[7]=f,t[8]=h,t[9]=l,t[10]=M,t[11]=m,t[12]=e*v+i*p+h*d+n[12],t[13]=a*v+c*p+l*d+n[13],t[14]=u*v+s*p+M*d+n[14],t[15]=o*v+f*p+m*d+n[15]),t},scale:function(t,n,r){var e=r[0],a=r[1],u=r[2];return t[0]=n[0]*e,t[1]=n[1]*e,t[2]=n[2]*e,t[3]=n[3]*e,t[4]=n[4]*a,t[5]=n[5]*a,t[6]=n[6]*a,t[7]=n[7]*a,t[8]=n[8]*u,t[9]=n[9]*u,t[10]=n[10]*u,t[11]=n[11]*u,t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],t},rotate:function(t,r,e,a){var u,o,i,c,s,f,h,l,M,m,v,p,d,b,y,g,x,A,E,w,T,_,S,O,V=a[0],q=a[1],L=a[2],C=Math.hypot(V,q,L);return C<n?null:(V*=C=1/C,q*=C,L*=C,u=Math.sin(e),i=1-(o=Math.cos(e)),c=r[0],s=r[1],f=r[2],h=r[3],l=r[4],M=r[5],m=r[6],v=r[7],p=r[8],d=r[9],b=r[10],y=r[11],g=V*V*i+o,x=q*V*i+L*u,A=L*V*i-q*u,E=V*q*i-L*u,w=q*q*i+o,T=L*q*i+V*u,_=V*L*i+q*u,S=q*L*i-V*u,O=L*L*i+o,t[0]=c*g+l*x+p*A,t[1]=s*g+M*x+d*A,t[2]=f*g+m*x+b*A,t[3]=h*g+v*x+y*A,t[4]=c*E+l*w+p*T,t[5]=s*E+M*w+d*T,t[6]=f*E+m*w+b*T,t[7]=h*E+v*w+y*T,t[8]=c*_+l*S+p*O,t[9]=s*_+M*S+d*O,t[10]=f*_+m*S+b*O,t[11]=h*_+v*S+y*O,r!==t&&(t[12]=r[12],t[13]=r[13],t[14]=r[14],t[15]=r[15]),t)},rotateX:function(t,n,r){var e=Math.sin(r),a=Math.cos(r),u=n[4],o=n[5],i=n[6],c=n[7],s=n[8],f=n[9],h=n[10],l=n[11];return n!==t&&(t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t[4]=u*a+s*e,t[5]=o*a+f*e,t[6]=i*a+h*e,t[7]=c*a+l*e,t[8]=s*a-u*e,t[9]=f*a-o*e,t[10]=h*a-i*e,t[11]=l*a-c*e,t},rotateY:function(t,n,r){var e=Math.sin(r),a=Math.cos(r),u=n[0],o=n[1],i=n[2],c=n[3],s=n[8],f=n[9],h=n[10],l=n[11];return n!==t&&(t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t[0]=u*a-s*e,t[1]=o*a-f*e,t[2]=i*a-h*e,t[3]=c*a-l*e,t[8]=u*e+s*a,t[9]=o*e+f*a,t[10]=i*e+h*a,t[11]=c*e+l*a,t},rotateZ:function(t,n,r){var e=Math.sin(r),a=Math.cos(r),u=n[0],o=n[1],i=n[2],c=n[3],s=n[4],f=n[5],h=n[6],l=n[7];return n!==t&&(t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t[0]=u*a+s*e,t[1]=o*a+f*e,t[2]=i*a+h*e,t[3]=c*a+l*e,t[4]=s*a-u*e,t[5]=f*a-o*e,t[6]=h*a-i*e,t[7]=l*a-c*e,t},fromTranslation:function(t,n){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=n[0],t[13]=n[1],t[14]=n[2],t[15]=1,t},fromScaling:function(t,n){return t[0]=n[0],t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=n[1],t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=n[2],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},fromRotation:function(t,r,e){var a,u,o,i=e[0],c=e[1],s=e[2],f=Math.hypot(i,c,s);return f<n?null:(i*=f=1/f,c*=f,s*=f,a=Math.sin(r),o=1-(u=Math.cos(r)),t[0]=i*i*o+u,t[1]=c*i*o+s*a,t[2]=s*i*o-c*a,t[3]=0,t[4]=i*c*o-s*a,t[5]=c*c*o+u,t[6]=s*c*o+i*a,t[7]=0,t[8]=i*s*o+c*a,t[9]=c*s*o-i*a,t[10]=s*s*o+u,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t)},fromXRotation:function(t,n){var r=Math.sin(n),e=Math.cos(n);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e,t[6]=r,t[7]=0,t[8]=0,t[9]=-r,t[10]=e,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},fromYRotation:function(t,n){var r=Math.sin(n),e=Math.cos(n);return t[0]=e,t[1]=0,t[2]=-r,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=r,t[9]=0,t[10]=e,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},fromZRotation:function(t,n){var r=Math.sin(n),e=Math.cos(n);return t[0]=e,t[1]=r,t[2]=0,t[3]=0,t[4]=-r,t[5]=e,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},fromRotationTranslation:w,fromQuat2:function(t,n){var e=new r(3),a=-n[0],u=-n[1],o=-n[2],i=n[3],c=n[4],s=n[5],f=n[6],h=n[7],l=a*a+u*u+o*o+i*i;return l>0?(e[0]=2*(c*i+h*a+s*o-f*u)/l,e[1]=2*(s*i+h*u+f*a-c*o)/l,e[2]=2*(f*i+h*o+c*u-s*a)/l):(e[0]=2*(c*i+h*a+s*o-f*u),e[1]=2*(s*i+h*u+f*a-c*o),e[2]=2*(f*i+h*o+c*u-s*a)),w(t,n,e),t},getTranslation:T,getScaling:_,getRotation:S,decompose:function(t,n,r,e){n[0]=e[12],n[1]=e[13],n[2]=e[14];var a=e[0],u=e[1],o=e[2],i=e[4],c=e[5],s=e[6],f=e[8],h=e[9],l=e[10];r[0]=Math.hypot(a,u,o),r[1]=Math.hypot(i,c,s),r[2]=Math.hypot(f,h,l);var M=1/r[0],m=1/r[1],v=1/r[2],p=a*M,d=u*m,b=o*v,y=i*M,g=c*m,x=s*v,A=f*M,E=h*m,w=l*v,T=p+g+w,_=0;return T>0?(_=2*Math.sqrt(T+1),t[3]=.25*_,t[0]=(x-E)/_,t[1]=(A-b)/_,t[2]=(d-y)/_):p>g&&p>w?(_=2*Math.sqrt(1+p-g-w),t[3]=(x-E)/_,t[0]=.25*_,t[1]=(d+y)/_,t[2]=(A+b)/_):g>w?(_=2*Math.sqrt(1+g-p-w),t[3]=(A-b)/_,t[0]=(d+y)/_,t[1]=.25*_,t[2]=(x+E)/_):(_=2*Math.sqrt(1+w-p-g),t[3]=(d-y)/_,t[0]=(A+b)/_,t[1]=(x+E)/_,t[2]=.25*_),t},fromRotationTranslationScale:function(t,n,r,e){var a=n[0],u=n[1],o=n[2],i=n[3],c=a+a,s=u+u,f=o+o,h=a*c,l=a*s,M=a*f,m=u*s,v=u*f,p=o*f,d=i*c,b=i*s,y=i*f,g=e[0],x=e[1],A=e[2];return t[0]=(1-(m+p))*g,t[1]=(l+y)*g,t[2]=(M-b)*g,t[3]=0,t[4]=(l-y)*x,t[5]=(1-(h+p))*x,t[6]=(v+d)*x,t[7]=0,t[8]=(M+b)*A,t[9]=(v-d)*A,t[10]=(1-(h+m))*A,t[11]=0,t[12]=r[0],t[13]=r[1],t[14]=r[2],t[15]=1,t},fromRotationTranslationScaleOrigin:function(t,n,r,e,a){var u=n[0],o=n[1],i=n[2],c=n[3],s=u+u,f=o+o,h=i+i,l=u*s,M=u*f,m=u*h,v=o*f,p=o*h,d=i*h,b=c*s,y=c*f,g=c*h,x=e[0],A=e[1],E=e[2],w=a[0],T=a[1],_=a[2],S=(1-(v+d))*x,O=(M+g)*x,V=(m-y)*x,q=(M-g)*A,L=(1-(l+d))*A,C=(p+b)*A,I=(m+y)*E,F=(p-b)*E,R=(1-(l+v))*E;return t[0]=S,t[1]=O,t[2]=V,t[3]=0,t[4]=q,t[5]=L,t[6]=C,t[7]=0,t[8]=I,t[9]=F,t[10]=R,t[11]=0,t[12]=r[0]+w-(S*w+q*T+I*_),t[13]=r[1]+T-(O*w+L*T+F*_),t[14]=r[2]+_-(V*w+C*T+R*_),t[15]=1,t},fromQuat:function(t,n){var r=n[0],e=n[1],a=n[2],u=n[3],o=r+r,i=e+e,c=a+a,s=r*o,f=e*o,h=e*i,l=a*o,M=a*i,m=a*c,v=u*o,p=u*i,d=u*c;return t[0]=1-h-m,t[1]=f+d,t[2]=l-p,t[3]=0,t[4]=f-d,t[5]=1-s-m,t[6]=M+v,t[7]=0,t[8]=l+p,t[9]=M-v,t[10]=1-s-h,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},frustum:function(t,n,r,e,a,u,o){var i=1/(r-n),c=1/(a-e),s=1/(u-o);return t[0]=2*u*i,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=2*u*c,t[6]=0,t[7]=0,t[8]=(r+n)*i,t[9]=(a+e)*c,t[10]=(o+u)*s,t[11]=-1,t[12]=0,t[13]=0,t[14]=o*u*2*s,t[15]=0,t},perspective:function(t,n,r,e,a){var u,o=1/Math.tan(n/2);return t[0]=o/r,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=o,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=-1,t[12]=0,t[13]=0,t[15]=0,null!=a&&a!==1/0?(u=1/(e-a),t[10]=(a+e)*u,t[14]=2*a*e*u):(t[10]=-1,t[14]=-2*e),t},perspectiveFromFieldOfView:function(t,n,r,e){var a=Math.tan(n.upDegrees*Math.PI/180),u=Math.tan(n.downDegrees*Math.PI/180),o=Math.tan(n.leftDegrees*Math.PI/180),i=Math.tan(n.rightDegrees*Math.PI/180),c=2/(o+i),s=2/(a+u);return t[0]=c,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=s,t[6]=0,t[7]=0,t[8]=-(o-i)*c*.5,t[9]=(a-u)*s*.5,t[10]=e/(r-e),t[11]=-1,t[12]=0,t[13]=0,t[14]=e*r/(r-e),t[15]=0,t},ortho:function(t,n,r,e,a,u,o){var i=1/(n-r),c=1/(e-a),s=1/(u-o);return t[0]=-2*i,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*c,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*s,t[11]=0,t[12]=(n+r)*i,t[13]=(a+e)*c,t[14]=(o+u)*s,t[15]=1,t},lookAt:function(t,r,e,a){var u,o,i,c,s,f,h,l,M,m,v=r[0],p=r[1],d=r[2],b=a[0],y=a[1],g=a[2],x=e[0],E=e[1],w=e[2];return Math.abs(v-x)<n&&Math.abs(p-E)<n&&Math.abs(d-w)<n?A(t):(h=v-x,l=p-E,M=d-w,u=y*(M*=m=1/Math.hypot(h,l,M))-g*(l*=m),o=g*(h*=m)-b*M,i=b*l-y*h,(m=Math.hypot(u,o,i))?(u*=m=1/m,o*=m,i*=m):(u=0,o=0,i=0),c=l*i-M*o,s=M*u-h*i,f=h*o-l*u,(m=Math.hypot(c,s,f))?(c*=m=1/m,s*=m,f*=m):(c=0,s=0,f=0),t[0]=u,t[1]=c,t[2]=h,t[3]=0,t[4]=o,t[5]=s,t[6]=l,t[7]=0,t[8]=i,t[9]=f,t[10]=M,t[11]=0,t[12]=-(u*v+o*p+i*d),t[13]=-(c*v+s*p+f*d),t[14]=-(h*v+l*p+M*d),t[15]=1,t)},targetTo:function(t,n,r,e){var a=n[0],u=n[1],o=n[2],i=e[0],c=e[1],s=e[2],f=a-r[0],h=u-r[1],l=o-r[2],M=f*f+h*h+l*l;M>0&&(f*=M=1/Math.sqrt(M),h*=M,l*=M);var m=c*l-s*h,v=s*f-i*l,p=i*h-c*f;return(M=m*m+v*v+p*p)>0&&(m*=M=1/Math.sqrt(M),v*=M,p*=M),t[0]=m,t[1]=v,t[2]=p,t[3]=0,t[4]=h*p-l*v,t[5]=l*m-f*p,t[6]=f*v-h*m,t[7]=0,t[8]=f,t[9]=h,t[10]=l,t[11]=0,t[12]=a,t[13]=u,t[14]=o,t[15]=1,t},str:function(t){return"mat4("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+", "+t[8]+", "+t[9]+", "+t[10]+", "+t[11]+", "+t[12]+", "+t[13]+", "+t[14]+", "+t[15]+")"},frob:function(t){return Math.hypot(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12],t[13],t[14],t[15])},add:function(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t[3]=n[3]+r[3],t[4]=n[4]+r[4],t[5]=n[5]+r[5],t[6]=n[6]+r[6],t[7]=n[7]+r[7],t[8]=n[8]+r[8],t[9]=n[9]+r[9],t[10]=n[10]+r[10],t[11]=n[11]+r[11],t[12]=n[12]+r[12],t[13]=n[13]+r[13],t[14]=n[14]+r[14],t[15]=n[15]+r[15],t},subtract:O,multiplyScalar:function(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=n[3]*r,t[4]=n[4]*r,t[5]=n[5]*r,t[6]=n[6]*r,t[7]=n[7]*r,t[8]=n[8]*r,t[9]=n[9]*r,t[10]=n[10]*r,t[11]=n[11]*r,t[12]=n[12]*r,t[13]=n[13]*r,t[14]=n[14]*r,t[15]=n[15]*r,t},multiplyScalarAndAdd:function(t,n,r,e){return t[0]=n[0]+r[0]*e,t[1]=n[1]+r[1]*e,t[2]=n[2]+r[2]*e,t[3]=n[3]+r[3]*e,t[4]=n[4]+r[4]*e,t[5]=n[5]+r[5]*e,t[6]=n[6]+r[6]*e,t[7]=n[7]+r[7]*e,t[8]=n[8]+r[8]*e,t[9]=n[9]+r[9]*e,t[10]=n[10]+r[10]*e,t[11]=n[11]+r[11]*e,t[12]=n[12]+r[12]*e,t[13]=n[13]+r[13]*e,t[14]=n[14]+r[14]*e,t[15]=n[15]+r[15]*e,t},exactEquals:function(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]&&t[4]===n[4]&&t[5]===n[5]&&t[6]===n[6]&&t[7]===n[7]&&t[8]===n[8]&&t[9]===n[9]&&t[10]===n[10]&&t[11]===n[11]&&t[12]===n[12]&&t[13]===n[13]&&t[14]===n[14]&&t[15]===n[15]},equals:function(t,r){var e=t[0],a=t[1],u=t[2],o=t[3],i=t[4],c=t[5],s=t[6],f=t[7],h=t[8],l=t[9],M=t[10],m=t[11],v=t[12],p=t[13],d=t[14],b=t[15],y=r[0],g=r[1],x=r[2],A=r[3],E=r[4],w=r[5],T=r[6],_=r[7],S=r[8],O=r[9],V=r[10],q=r[11],L=r[12],C=r[13],I=r[14],F=r[15];return Math.abs(e-y)<=n*Math.max(1,Math.abs(e),Math.abs(y))&&Math.abs(a-g)<=n*Math.max(1,Math.abs(a),Math.abs(g))&&Math.abs(u-x)<=n*Math.max(1,Math.abs(u),Math.abs(x))&&Math.abs(o-A)<=n*Math.max(1,Math.abs(o),Math.abs(A))&&Math.abs(i-E)<=n*Math.max(1,Math.abs(i),Math.abs(E))&&Math.abs(c-w)<=n*Math.max(1,Math.abs(c),Math.abs(w))&&Math.abs(s-T)<=n*Math.max(1,Math.abs(s),Math.abs(T))&&Math.abs(f-_)<=n*Math.max(1,Math.abs(f),Math.abs(_))&&Math.abs(h-S)<=n*Math.max(1,Math.abs(h),Math.abs(S))&&Math.abs(l-O)<=n*Math.max(1,Math.abs(l),Math.abs(O))&&Math.abs(M-V)<=n*Math.max(1,Math.abs(M),Math.abs(V))&&Math.abs(m-q)<=n*Math.max(1,Math.abs(m),Math.abs(q))&&Math.abs(v-L)<=n*Math.max(1,Math.abs(v),Math.abs(L))&&Math.abs(p-C)<=n*Math.max(1,Math.abs(p),Math.abs(C))&&Math.abs(d-I)<=n*Math.max(1,Math.abs(d),Math.abs(I))&&Math.abs(b-F)<=n*Math.max(1,Math.abs(b),Math.abs(F))},mul:V,sub:q});function C(){var t=new r(3);return r!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t}function I(t){var n=t[0],r=t[1],e=t[2];return Math.hypot(n,r,e)}function F(t,n,e){var a=new r(3);return a[0]=t,a[1]=n,a[2]=e,a}function R(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t}function P(t,n,r){return t[0]=n[0]*r[0],t[1]=n[1]*r[1],t[2]=n[2]*r[2],t}function B(t,n,r){return t[0]=n[0]/r[0],t[1]=n[1]/r[1],t[2]=n[2]/r[2],t}function D(t,n){var r=n[0]-t[0],e=n[1]-t[1],a=n[2]-t[2];return Math.hypot(r,e,a)}function N(t,n){var r=n[0]-t[0],e=n[1]-t[1],a=n[2]-t[2];return r*r+e*e+a*a}function j(t){var n=t[0],r=t[1],e=t[2];return n*n+r*r+e*e}function z(t,n){var r=n[0],e=n[1],a=n[2],u=r*r+e*e+a*a;return u>0&&(u=1/Math.sqrt(u)),t[0]=n[0]*u,t[1]=n[1]*u,t[2]=n[2]*u,t}function k(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function U(t,n,r){var e=n[0],a=n[1],u=n[2],o=r[0],i=r[1],c=r[2];return t[0]=a*c-u*i,t[1]=u*o-e*c,t[2]=e*i-a*o,t}var Y,H=R,Q=P,X=B,G=D,K=N,Z=I,J=j,W=(Y=C(),function(t,n,r,e,a,u){var o,i;for(n||(n=3),r||(r=0),i=e?Math.min(e*n+r,t.length):t.length,o=r;o<i;o+=n)Y[0]=t[o],Y[1]=t[o+1],Y[2]=t[o+2],a(Y,Y,u),t[o]=Y[0],t[o+1]=Y[1],t[o+2]=Y[2];return t}),$=Object.freeze({__proto__:null,create:C,clone:function(t){var n=new r(3);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n},length:I,fromValues:F,copy:function(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t},set:function(t,n,r,e){return t[0]=n,t[1]=r,t[2]=e,t},add:function(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t},subtract:R,multiply:P,divide:B,ceil:function(t,n){return t[0]=Math.ceil(n[0]),t[1]=Math.ceil(n[1]),t[2]=Math.ceil(n[2]),t},floor:function(t,n){return t[0]=Math.floor(n[0]),t[1]=Math.floor(n[1]),t[2]=Math.floor(n[2]),t},min:function(t,n,r){return t[0]=Math.min(n[0],r[0]),t[1]=Math.min(n[1],r[1]),t[2]=Math.min(n[2],r[2]),t},max:function(t,n,r){return t[0]=Math.max(n[0],r[0]),t[1]=Math.max(n[1],r[1]),t[2]=Math.max(n[2],r[2]),t},round:function(t,n){return t[0]=Math.round(n[0]),t[1]=Math.round(n[1]),t[2]=Math.round(n[2]),t},scale:function(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t},scaleAndAdd:function(t,n,r,e){return t[0]=n[0]+r[0]*e,t[1]=n[1]+r[1]*e,t[2]=n[2]+r[2]*e,t},distance:D,squaredDistance:N,squaredLength:j,negate:function(t,n){return t[0]=-n[0],t[1]=-n[1],t[2]=-n[2],t},inverse:function(t,n){return t[0]=1/n[0],t[1]=1/n[1],t[2]=1/n[2],t},normalize:z,dot:k,cross:U,lerp:function(t,n,r,e){var a=n[0],u=n[1],o=n[2];return t[0]=a+e*(r[0]-a),t[1]=u+e*(r[1]-u),t[2]=o+e*(r[2]-o),t},slerp:function(t,n,r,e){var a=Math.acos(Math.min(Math.max(k(n,r),-1),1)),u=Math.sin(a),o=Math.sin((1-e)*a)/u,i=Math.sin(e*a)/u;return t[0]=o*n[0]+i*r[0],t[1]=o*n[1]+i*r[1],t[2]=o*n[2]+i*r[2],t},hermite:function(t,n,r,e,a,u){var o=u*u,i=o*(2*u-3)+1,c=o*(u-2)+u,s=o*(u-1),f=o*(3-2*u);return t[0]=n[0]*i+r[0]*c+e[0]*s+a[0]*f,t[1]=n[1]*i+r[1]*c+e[1]*s+a[1]*f,t[2]=n[2]*i+r[2]*c+e[2]*s+a[2]*f,t},bezier:function(t,n,r,e,a,u){var o=1-u,i=o*o,c=u*u,s=i*o,f=3*u*i,h=3*c*o,l=c*u;return t[0]=n[0]*s+r[0]*f+e[0]*h+a[0]*l,t[1]=n[1]*s+r[1]*f+e[1]*h+a[1]*l,t[2]=n[2]*s+r[2]*f+e[2]*h+a[2]*l,t},random:function(t,n){n=n||1;var r=2*e()*Math.PI,a=2*e()-1,u=Math.sqrt(1-a*a)*n;return t[0]=Math.cos(r)*u,t[1]=Math.sin(r)*u,t[2]=a*n,t},transformMat4:function(t,n,r){var e=n[0],a=n[1],u=n[2],o=r[3]*e+r[7]*a+r[11]*u+r[15];return o=o||1,t[0]=(r[0]*e+r[4]*a+r[8]*u+r[12])/o,t[1]=(r[1]*e+r[5]*a+r[9]*u+r[13])/o,t[2]=(r[2]*e+r[6]*a+r[10]*u+r[14])/o,t},transformMat3:function(t,n,r){var e=n[0],a=n[1],u=n[2];return t[0]=e*r[0]+a*r[3]+u*r[6],t[1]=e*r[1]+a*r[4]+u*r[7],t[2]=e*r[2]+a*r[5]+u*r[8],t},transformQuat:function(t,n,r){var e=r[0],a=r[1],u=r[2],o=r[3],i=n[0],c=n[1],s=n[2],f=a*s-u*c,h=u*i-e*s,l=e*c-a*i,M=a*l-u*h,m=u*f-e*l,v=e*h-a*f,p=2*o;return f*=p,h*=p,l*=p,M*=2,m*=2,v*=2,t[0]=i+f+M,t[1]=c+h+m,t[2]=s+l+v,t},rotateX:function(t,n,r,e){var a=[],u=[];return a[0]=n[0]-r[0],a[1]=n[1]-r[1],a[2]=n[2]-r[2],u[0]=a[0],u[1]=a[1]*Math.cos(e)-a[2]*Math.sin(e),u[2]=a[1]*Math.sin(e)+a[2]*Math.cos(e),t[0]=u[0]+r[0],t[1]=u[1]+r[1],t[2]=u[2]+r[2],t},rotateY:function(t,n,r,e){var a=[],u=[];return a[0]=n[0]-r[0],a[1]=n[1]-r[1],a[2]=n[2]-r[2],u[0]=a[2]*Math.sin(e)+a[0]*Math.cos(e),u[1]=a[1],u[2]=a[2]*Math.cos(e)-a[0]*Math.sin(e),t[0]=u[0]+r[0],t[1]=u[1]+r[1],t[2]=u[2]+r[2],t},rotateZ:function(t,n,r,e){var a=[],u=[];return a[0]=n[0]-r[0],a[1]=n[1]-r[1],a[2]=n[2]-r[2],u[0]=a[0]*Math.cos(e)-a[1]*Math.sin(e),u[1]=a[0]*Math.sin(e)+a[1]*Math.cos(e),u[2]=a[2],t[0]=u[0]+r[0],t[1]=u[1]+r[1],t[2]=u[2]+r[2],t},angle:function(t,n){var r=t[0],e=t[1],a=t[2],u=n[0],o=n[1],i=n[2],c=Math.sqrt(r*r+e*e+a*a)*Math.sqrt(u*u+o*o+i*i),s=c&&k(t,n)/c;return Math.acos(Math.min(Math.max(s,-1),1))},zero:function(t){return t[0]=0,t[1]=0,t[2]=0,t},str:function(t){return"vec3("+t[0]+", "+t[1]+", "+t[2]+")"},exactEquals:function(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]},equals:function(t,r){var e=t[0],a=t[1],u=t[2],o=r[0],i=r[1],c=r[2];return Math.abs(e-o)<=n*Math.max(1,Math.abs(e),Math.abs(o))&&Math.abs(a-i)<=n*Math.max(1,Math.abs(a),Math.abs(i))&&Math.abs(u-c)<=n*Math.max(1,Math.abs(u),Math.abs(c))},sub:H,mul:Q,div:X,dist:G,sqrDist:K,len:Z,sqrLen:J,forEach:W});function tt(){var t=new r(4);return r!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0,t[3]=0),t}function nt(t){var n=new r(4);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n}function rt(t,n,e,a){var u=new r(4);return u[0]=t,u[1]=n,u[2]=e,u[3]=a,u}function et(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t}function at(t,n,r,e,a){return t[0]=n,t[1]=r,t[2]=e,t[3]=a,t}function ut(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t[3]=n[3]+r[3],t}function ot(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t[3]=n[3]-r[3],t}function it(t,n,r){return t[0]=n[0]*r[0],t[1]=n[1]*r[1],t[2]=n[2]*r[2],t[3]=n[3]*r[3],t}function ct(t,n,r){return t[0]=n[0]/r[0],t[1]=n[1]/r[1],t[2]=n[2]/r[2],t[3]=n[3]/r[3],t}function st(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=n[3]*r,t}function ft(t,n){var r=n[0]-t[0],e=n[1]-t[1],a=n[2]-t[2],u=n[3]-t[3];return Math.hypot(r,e,a,u)}function ht(t,n){var r=n[0]-t[0],e=n[1]-t[1],a=n[2]-t[2],u=n[3]-t[3];return r*r+e*e+a*a+u*u}function lt(t){var n=t[0],r=t[1],e=t[2],a=t[3];return Math.hypot(n,r,e,a)}function Mt(t){var n=t[0],r=t[1],e=t[2],a=t[3];return n*n+r*r+e*e+a*a}function mt(t,n){var r=n[0],e=n[1],a=n[2],u=n[3],o=r*r+e*e+a*a+u*u;return o>0&&(o=1/Math.sqrt(o)),t[0]=r*o,t[1]=e*o,t[2]=a*o,t[3]=u*o,t}function vt(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]+t[3]*n[3]}function pt(t,n,r,e){var a=n[0],u=n[1],o=n[2],i=n[3];return t[0]=a+e*(r[0]-a),t[1]=u+e*(r[1]-u),t[2]=o+e*(r[2]-o),t[3]=i+e*(r[3]-i),t}function dt(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]}function bt(t,r){var e=t[0],a=t[1],u=t[2],o=t[3],i=r[0],c=r[1],s=r[2],f=r[3];return Math.abs(e-i)<=n*Math.max(1,Math.abs(e),Math.abs(i))&&Math.abs(a-c)<=n*Math.max(1,Math.abs(a),Math.abs(c))&&Math.abs(u-s)<=n*Math.max(1,Math.abs(u),Math.abs(s))&&Math.abs(o-f)<=n*Math.max(1,Math.abs(o),Math.abs(f))}var yt=ot,gt=it,xt=ct,At=ft,Et=ht,wt=lt,Tt=Mt,_t=function(){var t=tt();return function(n,r,e,a,u,o){var i,c;for(r||(r=4),e||(e=0),c=a?Math.min(a*r+e,n.length):n.length,i=e;i<c;i+=r)t[0]=n[i],t[1]=n[i+1],t[2]=n[i+2],t[3]=n[i+3],u(t,t,o),n[i]=t[0],n[i+1]=t[1],n[i+2]=t[2],n[i+3]=t[3];return n}}(),St=Object.freeze({__proto__:null,create:tt,clone:nt,fromValues:rt,copy:et,set:at,add:ut,subtract:ot,multiply:it,divide:ct,ceil:function(t,n){return t[0]=Math.ceil(n[0]),t[1]=Math.ceil(n[1]),t[2]=Math.ceil(n[2]),t[3]=Math.ceil(n[3]),t},floor:function(t,n){return t[0]=Math.floor(n[0]),t[1]=Math.floor(n[1]),t[2]=Math.floor(n[2]),t[3]=Math.floor(n[3]),t},min:function(t,n,r){return t[0]=Math.min(n[0],r[0]),t[1]=Math.min(n[1],r[1]),t[2]=Math.min(n[2],r[2]),t[3]=Math.min(n[3],r[3]),t},max:function(t,n,r){return t[0]=Math.max(n[0],r[0]),t[1]=Math.max(n[1],r[1]),t[2]=Math.max(n[2],r[2]),t[3]=Math.max(n[3],r[3]),t},round:function(t,n){return t[0]=Math.round(n[0]),t[1]=Math.round(n[1]),t[2]=Math.round(n[2]),t[3]=Math.round(n[3]),t},scale:st,scaleAndAdd:function(t,n,r,e){return t[0]=n[0]+r[0]*e,t[1]=n[1]+r[1]*e,t[2]=n[2]+r[2]*e,t[3]=n[3]+r[3]*e,t},distance:ft,squaredDistance:ht,length:lt,squaredLength:Mt,negate:function(t,n){return t[0]=-n[0],t[1]=-n[1],t[2]=-n[2],t[3]=-n[3],t},inverse:function(t,n){return t[0]=1/n[0],t[1]=1/n[1],t[2]=1/n[2],t[3]=1/n[3],t},normalize:mt,dot:vt,cross:function(t,n,r,e){var a=r[0]*e[1]-r[1]*e[0],u=r[0]*e[2]-r[2]*e[0],o=r[0]*e[3]-r[3]*e[0],i=r[1]*e[2]-r[2]*e[1],c=r[1]*e[3]-r[3]*e[1],s=r[2]*e[3]-r[3]*e[2],f=n[0],h=n[1],l=n[2],M=n[3];return t[0]=h*s-l*c+M*i,t[1]=-f*s+l*o-M*u,t[2]=f*c-h*o+M*a,t[3]=-f*i+h*u-l*a,t},lerp:pt,random:function(t,n){var r,a,u,o,i,c;n=n||1;do{i=(r=2*e()-1)*r+(a=2*e()-1)*a}while(i>=1);do{c=(u=2*e()-1)*u+(o=2*e()-1)*o}while(c>=1);var s=Math.sqrt((1-i)/c);return t[0]=n*r,t[1]=n*a,t[2]=n*u*s,t[3]=n*o*s,t},transformMat4:function(t,n,r){var e=n[0],a=n[1],u=n[2],o=n[3];return t[0]=r[0]*e+r[4]*a+r[8]*u+r[12]*o,t[1]=r[1]*e+r[5]*a+r[9]*u+r[13]*o,t[2]=r[2]*e+r[6]*a+r[10]*u+r[14]*o,t[3]=r[3]*e+r[7]*a+r[11]*u+r[15]*o,t},transformQuat:function(t,n,r){var e=n[0],a=n[1],u=n[2],o=r[0],i=r[1],c=r[2],s=r[3],f=s*e+i*u-c*a,h=s*a+c*e-o*u,l=s*u+o*a-i*e,M=-o*e-i*a-c*u;return t[0]=f*s+M*-o+h*-c-l*-i,t[1]=h*s+M*-i+l*-o-f*-c,t[2]=l*s+M*-c+f*-i-h*-o,t[3]=n[3],t},zero:function(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=0,t},str:function(t){return"vec4("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+")"},exactEquals:dt,equals:bt,sub:yt,mul:gt,div:xt,dist:At,sqrDist:Et,len:wt,sqrLen:Tt,forEach:_t});function Ot(){var t=new r(4);return r!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t[3]=1,t}function Vt(t,n,r){r*=.5;var e=Math.sin(r);return t[0]=e*n[0],t[1]=e*n[1],t[2]=e*n[2],t[3]=Math.cos(r),t}function qt(t,n,r){var e=n[0],a=n[1],u=n[2],o=n[3],i=r[0],c=r[1],s=r[2],f=r[3];return t[0]=e*f+o*i+a*s-u*c,t[1]=a*f+o*c+u*i-e*s,t[2]=u*f+o*s+e*c-a*i,t[3]=o*f-e*i-a*c-u*s,t}function Lt(t,n,r){r*=.5;var e=n[0],a=n[1],u=n[2],o=n[3],i=Math.sin(r),c=Math.cos(r);return t[0]=e*c+o*i,t[1]=a*c+u*i,t[2]=u*c-a*i,t[3]=o*c-e*i,t}function Ct(t,n,r){r*=.5;var e=n[0],a=n[1],u=n[2],o=n[3],i=Math.sin(r),c=Math.cos(r);return t[0]=e*c-u*i,t[1]=a*c+o*i,t[2]=u*c+e*i,t[3]=o*c-a*i,t}function It(t,n,r){r*=.5;var e=n[0],a=n[1],u=n[2],o=n[3],i=Math.sin(r),c=Math.cos(r);return t[0]=e*c+a*i,t[1]=a*c-e*i,t[2]=u*c+o*i,t[3]=o*c-u*i,t}function Ft(t,n){var r=n[0],e=n[1],a=n[2],u=n[3],o=Math.sqrt(r*r+e*e+a*a),i=Math.exp(u),c=o>0?i*Math.sin(o)/o:0;return t[0]=r*c,t[1]=e*c,t[2]=a*c,t[3]=i*Math.cos(o),t}function Rt(t,n){var r=n[0],e=n[1],a=n[2],u=n[3],o=Math.sqrt(r*r+e*e+a*a),i=o>0?Math.atan2(o,u)/o:0;return t[0]=r*i,t[1]=e*i,t[2]=a*i,t[3]=.5*Math.log(r*r+e*e+a*a+u*u),t}function Pt(t,r,e,a){var u,o,i,c,s,f=r[0],h=r[1],l=r[2],M=r[3],m=e[0],v=e[1],p=e[2],d=e[3];return(o=f*m+h*v+l*p+M*d)<0&&(o=-o,m=-m,v=-v,p=-p,d=-d),1-o>n?(u=Math.acos(o),i=Math.sin(u),c=Math.sin((1-a)*u)/i,s=Math.sin(a*u)/i):(c=1-a,s=a),t[0]=c*f+s*m,t[1]=c*h+s*v,t[2]=c*l+s*p,t[3]=c*M+s*d,t}function Bt(t,n){var r,e=n[0]+n[4]+n[8];if(e>0)r=Math.sqrt(e+1),t[3]=.5*r,r=.5/r,t[0]=(n[5]-n[7])*r,t[1]=(n[6]-n[2])*r,t[2]=(n[1]-n[3])*r;else{var a=0;n[4]>n[0]&&(a=1),n[8]>n[3*a+a]&&(a=2);var u=(a+1)%3,o=(a+2)%3;r=Math.sqrt(n[3*a+a]-n[3*u+u]-n[3*o+o]+1),t[a]=.5*r,r=.5/r,t[3]=(n[3*u+o]-n[3*o+u])*r,t[u]=(n[3*u+a]+n[3*a+u])*r,t[o]=(n[3*o+a]+n[3*a+o])*r}return t}var Dt,Nt,jt,zt,kt,Ut,Yt=nt,Ht=rt,Qt=et,Xt=at,Gt=ut,Kt=qt,Zt=st,Jt=vt,Wt=pt,$t=lt,tn=$t,nn=Mt,rn=nn,en=mt,an=dt,un=bt,on=(zt=C(),kt=F(1,0,0),Ut=F(0,1,0),function(t,n,r){var e=k(n,r);return e<-.999999?(U(zt,kt,n),Z(zt)<1e-6&&U(zt,Ut,n),z(zt,zt),Vt(t,zt,Math.PI),t):e>.999999?(t[0]=0,t[1]=0,t[2]=0,t[3]=1,t):(U(zt,n,r),t[0]=zt[0],t[1]=zt[1],t[2]=zt[2],t[3]=1+e,en(t,t))}),cn=(Nt=Ot(),jt=Ot(),function(t,n,r,e,a,u){return Pt(Nt,n,a,u),Pt(jt,r,e,u),Pt(t,Nt,jt,2*u*(1-u)),t}),sn=(Dt=p(),function(t,n,r,e){return Dt[0]=r[0],Dt[3]=r[1],Dt[6]=r[2],Dt[1]=e[0],Dt[4]=e[1],Dt[7]=e[2],Dt[2]=-n[0],Dt[5]=-n[1],Dt[8]=-n[2],en(t,Bt(t,Dt))}),fn=Object.freeze({__proto__:null,create:Ot,identity:function(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t},setAxisAngle:Vt,getAxisAngle:function(t,r){var e=2*Math.acos(r[3]),a=Math.sin(e/2);return a>n?(t[0]=r[0]/a,t[1]=r[1]/a,t[2]=r[2]/a):(t[0]=1,t[1]=0,t[2]=0),e},getAngle:function(t,n){var r=Jt(t,n);return Math.acos(2*r*r-1)},multiply:qt,rotateX:Lt,rotateY:Ct,rotateZ:It,calculateW:function(t,n){var r=n[0],e=n[1],a=n[2];return t[0]=r,t[1]=e,t[2]=a,t[3]=Math.sqrt(Math.abs(1-r*r-e*e-a*a)),t},exp:Ft,ln:Rt,pow:function(t,n,r){return Rt(t,n),Zt(t,t,r),Ft(t,t),t},slerp:Pt,random:function(t){var n=e(),r=e(),a=e(),u=Math.sqrt(1-n),o=Math.sqrt(n);return t[0]=u*Math.sin(2*Math.PI*r),t[1]=u*Math.cos(2*Math.PI*r),t[2]=o*Math.sin(2*Math.PI*a),t[3]=o*Math.cos(2*Math.PI*a),t},invert:function(t,n){var r=n[0],e=n[1],a=n[2],u=n[3],o=r*r+e*e+a*a+u*u,i=o?1/o:0;return t[0]=-r*i,t[1]=-e*i,t[2]=-a*i,t[3]=u*i,t},conjugate:function(t,n){return t[0]=-n[0],t[1]=-n[1],t[2]=-n[2],t[3]=n[3],t},fromMat3:Bt,fromEuler:function(t,n,r,e){var a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"zyx",u=.5*Math.PI/180;n*=u,e*=u,r*=u;var o=Math.sin(n),i=Math.cos(n),c=Math.sin(r),s=Math.cos(r),f=Math.sin(e),h=Math.cos(e);switch("string"!=typeof a&&(a="zyx"),a.toLowerCase()){case"xyz":t[0]=o*s*h+i*c*f,t[1]=i*c*h-o*s*f,t[2]=i*s*f+o*c*h,t[3]=i*s*h-o*c*f;break;case"xzy":t[0]=o*s*h-i*c*f,t[1]=i*c*h-o*s*f,t[2]=i*s*f+o*c*h,t[3]=i*s*h+o*c*f;break;case"yxz":t[0]=o*s*h+i*c*f,t[1]=i*c*h-o*s*f,t[2]=i*s*f-o*c*h,t[3]=i*s*h+o*c*f;break;case"yzx":t[0]=o*s*h+i*c*f,t[1]=i*c*h+o*s*f,t[2]=i*s*f-o*c*h,t[3]=i*s*h-o*c*f;break;case"zxy":t[0]=o*s*h-i*c*f,t[1]=i*c*h+o*s*f,t[2]=i*s*f+o*c*h,t[3]=i*s*h-o*c*f;break;case"zyx":default:t[0]=o*s*h-i*c*f,t[1]=i*c*h+o*s*f,t[2]=i*s*f-o*c*h,t[3]=i*s*h+o*c*f}return t},str:function(t){return"quat("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+")"},clone:Yt,fromValues:Ht,copy:Qt,set:Xt,add:Gt,mul:Kt,scale:Zt,dot:Jt,lerp:Wt,length:$t,len:tn,squaredLength:nn,sqrLen:rn,normalize:en,exactEquals:an,equals:un,rotationTo:on,sqlerp:cn,setAxes:sn});function hn(t,n,r){var e=.5*r[0],a=.5*r[1],u=.5*r[2],o=n[0],i=n[1],c=n[2],s=n[3];return t[0]=o,t[1]=i,t[2]=c,t[3]=s,t[4]=e*s+a*c-u*i,t[5]=a*s+u*o-e*c,t[6]=u*s+e*i-a*o,t[7]=-e*o-a*i-u*c,t}function ln(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t}var Mn=Qt,mn=Qt;function vn(t,n,r){var e=n[0],a=n[1],u=n[2],o=n[3],i=r[4],c=r[5],s=r[6],f=r[7],h=n[4],l=n[5],M=n[6],m=n[7],v=r[0],p=r[1],d=r[2],b=r[3];return t[0]=e*b+o*v+a*d-u*p,t[1]=a*b+o*p+u*v-e*d,t[2]=u*b+o*d+e*p-a*v,t[3]=o*b-e*v-a*p-u*d,t[4]=e*f+o*i+a*s-u*c+h*b+m*v+l*d-M*p,t[5]=a*f+o*c+u*i-e*s+l*b+m*p+M*v-h*d,t[6]=u*f+o*s+e*c-a*i+M*b+m*d+h*p-l*v,t[7]=o*f-e*i-a*c-u*s+m*b-h*v-l*p-M*d,t}var pn=vn,dn=Jt,bn=$t,yn=bn,gn=nn,xn=gn,An=Object.freeze({__proto__:null,create:function(){var t=new r(8);return r!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0),t[3]=1,t},clone:function(t){var n=new r(8);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n[4]=t[4],n[5]=t[5],n[6]=t[6],n[7]=t[7],n},fromValues:function(t,n,e,a,u,o,i,c){var s=new r(8);return s[0]=t,s[1]=n,s[2]=e,s[3]=a,s[4]=u,s[5]=o,s[6]=i,s[7]=c,s},fromRotationTranslationValues:function(t,n,e,a,u,o,i){var c=new r(8);c[0]=t,c[1]=n,c[2]=e,c[3]=a;var s=.5*u,f=.5*o,h=.5*i;return c[4]=s*a+f*e-h*n,c[5]=f*a+h*t-s*e,c[6]=h*a+s*n-f*t,c[7]=-s*t-f*n-h*e,c},fromRotationTranslation:hn,fromTranslation:function(t,n){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t[4]=.5*n[0],t[5]=.5*n[1],t[6]=.5*n[2],t[7]=0,t},fromRotation:function(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=0,t[5]=0,t[6]=0,t[7]=0,t},fromMat4:function(t,n){var e=Ot();S(e,n);var a=new r(3);return T(a,n),hn(t,e,a),t},copy:ln,identity:function(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t},set:function(t,n,r,e,a,u,o,i,c){return t[0]=n,t[1]=r,t[2]=e,t[3]=a,t[4]=u,t[5]=o,t[6]=i,t[7]=c,t},getReal:Mn,getDual:function(t,n){return t[0]=n[4],t[1]=n[5],t[2]=n[6],t[3]=n[7],t},setReal:mn,setDual:function(t,n){return t[4]=n[0],t[5]=n[1],t[6]=n[2],t[7]=n[3],t},getTranslation:function(t,n){var r=n[4],e=n[5],a=n[6],u=n[7],o=-n[0],i=-n[1],c=-n[2],s=n[3];return t[0]=2*(r*s+u*o+e*c-a*i),t[1]=2*(e*s+u*i+a*o-r*c),t[2]=2*(a*s+u*c+r*i-e*o),t},translate:function(t,n,r){var e=n[0],a=n[1],u=n[2],o=n[3],i=.5*r[0],c=.5*r[1],s=.5*r[2],f=n[4],h=n[5],l=n[6],M=n[7];return t[0]=e,t[1]=a,t[2]=u,t[3]=o,t[4]=o*i+a*s-u*c+f,t[5]=o*c+u*i-e*s+h,t[6]=o*s+e*c-a*i+l,t[7]=-e*i-a*c-u*s+M,t},rotateX:function(t,n,r){var e=-n[0],a=-n[1],u=-n[2],o=n[3],i=n[4],c=n[5],s=n[6],f=n[7],h=i*o+f*e+c*u-s*a,l=c*o+f*a+s*e-i*u,M=s*o+f*u+i*a-c*e,m=f*o-i*e-c*a-s*u;return Lt(t,n,r),e=t[0],a=t[1],u=t[2],o=t[3],t[4]=h*o+m*e+l*u-M*a,t[5]=l*o+m*a+M*e-h*u,t[6]=M*o+m*u+h*a-l*e,t[7]=m*o-h*e-l*a-M*u,t},rotateY:function(t,n,r){var e=-n[0],a=-n[1],u=-n[2],o=n[3],i=n[4],c=n[5],s=n[6],f=n[7],h=i*o+f*e+c*u-s*a,l=c*o+f*a+s*e-i*u,M=s*o+f*u+i*a-c*e,m=f*o-i*e-c*a-s*u;return Ct(t,n,r),e=t[0],a=t[1],u=t[2],o=t[3],t[4]=h*o+m*e+l*u-M*a,t[5]=l*o+m*a+M*e-h*u,t[6]=M*o+m*u+h*a-l*e,t[7]=m*o-h*e-l*a-M*u,t},rotateZ:function(t,n,r){var e=-n[0],a=-n[1],u=-n[2],o=n[3],i=n[4],c=n[5],s=n[6],f=n[7],h=i*o+f*e+c*u-s*a,l=c*o+f*a+s*e-i*u,M=s*o+f*u+i*a-c*e,m=f*o-i*e-c*a-s*u;return It(t,n,r),e=t[0],a=t[1],u=t[2],o=t[3],t[4]=h*o+m*e+l*u-M*a,t[5]=l*o+m*a+M*e-h*u,t[6]=M*o+m*u+h*a-l*e,t[7]=m*o-h*e-l*a-M*u,t},rotateByQuatAppend:function(t,n,r){var e=r[0],a=r[1],u=r[2],o=r[3],i=n[0],c=n[1],s=n[2],f=n[3];return t[0]=i*o+f*e+c*u-s*a,t[1]=c*o+f*a+s*e-i*u,t[2]=s*o+f*u+i*a-c*e,t[3]=f*o-i*e-c*a-s*u,i=n[4],c=n[5],s=n[6],f=n[7],t[4]=i*o+f*e+c*u-s*a,t[5]=c*o+f*a+s*e-i*u,t[6]=s*o+f*u+i*a-c*e,t[7]=f*o-i*e-c*a-s*u,t},rotateByQuatPrepend:function(t,n,r){var e=n[0],a=n[1],u=n[2],o=n[3],i=r[0],c=r[1],s=r[2],f=r[3];return t[0]=e*f+o*i+a*s-u*c,t[1]=a*f+o*c+u*i-e*s,t[2]=u*f+o*s+e*c-a*i,t[3]=o*f-e*i-a*c-u*s,i=r[4],c=r[5],s=r[6],f=r[7],t[4]=e*f+o*i+a*s-u*c,t[5]=a*f+o*c+u*i-e*s,t[6]=u*f+o*s+e*c-a*i,t[7]=o*f-e*i-a*c-u*s,t},rotateAroundAxis:function(t,r,e,a){if(Math.abs(a)<n)return ln(t,r);var u=Math.hypot(e[0],e[1],e[2]);a*=.5;var o=Math.sin(a),i=o*e[0]/u,c=o*e[1]/u,s=o*e[2]/u,f=Math.cos(a),h=r[0],l=r[1],M=r[2],m=r[3];t[0]=h*f+m*i+l*s-M*c,t[1]=l*f+m*c+M*i-h*s,t[2]=M*f+m*s+h*c-l*i,t[3]=m*f-h*i-l*c-M*s;var v=r[4],p=r[5],d=r[6],b=r[7];return t[4]=v*f+b*i+p*s-d*c,t[5]=p*f+b*c+d*i-v*s,t[6]=d*f+b*s+v*c-p*i,t[7]=b*f-v*i-p*c-d*s,t},add:function(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t[3]=n[3]+r[3],t[4]=n[4]+r[4],t[5]=n[5]+r[5],t[6]=n[6]+r[6],t[7]=n[7]+r[7],t},multiply:vn,mul:pn,scale:function(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=n[3]*r,t[4]=n[4]*r,t[5]=n[5]*r,t[6]=n[6]*r,t[7]=n[7]*r,t},dot:dn,lerp:function(t,n,r,e){var a=1-e;return dn(n,r)<0&&(e=-e),t[0]=n[0]*a+r[0]*e,t[1]=n[1]*a+r[1]*e,t[2]=n[2]*a+r[2]*e,t[3]=n[3]*a+r[3]*e,t[4]=n[4]*a+r[4]*e,t[5]=n[5]*a+r[5]*e,t[6]=n[6]*a+r[6]*e,t[7]=n[7]*a+r[7]*e,t},invert:function(t,n){var r=gn(n);return t[0]=-n[0]/r,t[1]=-n[1]/r,t[2]=-n[2]/r,t[3]=n[3]/r,t[4]=-n[4]/r,t[5]=-n[5]/r,t[6]=-n[6]/r,t[7]=n[7]/r,t},conjugate:function(t,n){return t[0]=-n[0],t[1]=-n[1],t[2]=-n[2],t[3]=n[3],t[4]=-n[4],t[5]=-n[5],t[6]=-n[6],t[7]=n[7],t},length:bn,len:yn,squaredLength:gn,sqrLen:xn,normalize:function(t,n){var r=gn(n);if(r>0){r=Math.sqrt(r);var e=n[0]/r,a=n[1]/r,u=n[2]/r,o=n[3]/r,i=n[4],c=n[5],s=n[6],f=n[7],h=e*i+a*c+u*s+o*f;t[0]=e,t[1]=a,t[2]=u,t[3]=o,t[4]=(i-e*h)/r,t[5]=(c-a*h)/r,t[6]=(s-u*h)/r,t[7]=(f-o*h)/r}return t},str:function(t){return"quat2("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+")"},exactEquals:function(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]&&t[4]===n[4]&&t[5]===n[5]&&t[6]===n[6]&&t[7]===n[7]},equals:function(t,r){var e=t[0],a=t[1],u=t[2],o=t[3],i=t[4],c=t[5],s=t[6],f=t[7],h=r[0],l=r[1],M=r[2],m=r[3],v=r[4],p=r[5],d=r[6],b=r[7];return Math.abs(e-h)<=n*Math.max(1,Math.abs(e),Math.abs(h))&&Math.abs(a-l)<=n*Math.max(1,Math.abs(a),Math.abs(l))&&Math.abs(u-M)<=n*Math.max(1,Math.abs(u),Math.abs(M))&&Math.abs(o-m)<=n*Math.max(1,Math.abs(o),Math.abs(m))&&Math.abs(i-v)<=n*Math.max(1,Math.abs(i),Math.abs(v))&&Math.abs(c-p)<=n*Math.max(1,Math.abs(c),Math.abs(p))&&Math.abs(s-d)<=n*Math.max(1,Math.abs(s),Math.abs(d))&&Math.abs(f-b)<=n*Math.max(1,Math.abs(f),Math.abs(b))}});function En(){var t=new r(2);return r!=Float32Array&&(t[0]=0,t[1]=0),t}function wn(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t}function Tn(t,n,r){return t[0]=n[0]*r[0],t[1]=n[1]*r[1],t}function _n(t,n,r){return t[0]=n[0]/r[0],t[1]=n[1]/r[1],t}function Sn(t,n){var r=n[0]-t[0],e=n[1]-t[1];return Math.hypot(r,e)}function On(t,n){var r=n[0]-t[0],e=n[1]-t[1];return r*r+e*e}function Vn(t){var n=t[0],r=t[1];return Math.hypot(n,r)}function qn(t){var n=t[0],r=t[1];return n*n+r*r}var Ln=Vn,Cn=wn,In=Tn,Fn=_n,Rn=Sn,Pn=On,Bn=qn,Dn=function(){var t=En();return function(n,r,e,a,u,o){var i,c;for(r||(r=2),e||(e=0),c=a?Math.min(a*r+e,n.length):n.length,i=e;i<c;i+=r)t[0]=n[i],t[1]=n[i+1],u(t,t,o),n[i]=t[0],n[i+1]=t[1];return n}}(),Nn=Object.freeze({__proto__:null,create:En,clone:function(t){var n=new r(2);return n[0]=t[0],n[1]=t[1],n},fromValues:function(t,n){var e=new r(2);return e[0]=t,e[1]=n,e},copy:function(t,n){return t[0]=n[0],t[1]=n[1],t},set:function(t,n,r){return t[0]=n,t[1]=r,t},add:function(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t},subtract:wn,multiply:Tn,divide:_n,ceil:function(t,n){return t[0]=Math.ceil(n[0]),t[1]=Math.ceil(n[1]),t},floor:function(t,n){return t[0]=Math.floor(n[0]),t[1]=Math.floor(n[1]),t},min:function(t,n,r){return t[0]=Math.min(n[0],r[0]),t[1]=Math.min(n[1],r[1]),t},max:function(t,n,r){return t[0]=Math.max(n[0],r[0]),t[1]=Math.max(n[1],r[1]),t},round:function(t,n){return t[0]=Math.round(n[0]),t[1]=Math.round(n[1]),t},scale:function(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t},scaleAndAdd:function(t,n,r,e){return t[0]=n[0]+r[0]*e,t[1]=n[1]+r[1]*e,t},distance:Sn,squaredDistance:On,length:Vn,squaredLength:qn,negate:function(t,n){return t[0]=-n[0],t[1]=-n[1],t},inverse:function(t,n){return t[0]=1/n[0],t[1]=1/n[1],t},normalize:function(t,n){var r=n[0],e=n[1],a=r*r+e*e;return a>0&&(a=1/Math.sqrt(a)),t[0]=n[0]*a,t[1]=n[1]*a,t},dot:function(t,n){return t[0]*n[0]+t[1]*n[1]},cross:function(t,n,r){var e=n[0]*r[1]-n[1]*r[0];return t[0]=t[1]=0,t[2]=e,t},lerp:function(t,n,r,e){var a=n[0],u=n[1];return t[0]=a+e*(r[0]-a),t[1]=u+e*(r[1]-u),t},random:function(t,n){n=n||1;var r=2*e()*Math.PI;return t[0]=Math.cos(r)*n,t[1]=Math.sin(r)*n,t},transformMat2:function(t,n,r){var e=n[0],a=n[1];return t[0]=r[0]*e+r[2]*a,t[1]=r[1]*e+r[3]*a,t},transformMat2d:function(t,n,r){var e=n[0],a=n[1];return t[0]=r[0]*e+r[2]*a+r[4],t[1]=r[1]*e+r[3]*a+r[5],t},transformMat3:function(t,n,r){var e=n[0],a=n[1];return t[0]=r[0]*e+r[3]*a+r[6],t[1]=r[1]*e+r[4]*a+r[7],t},transformMat4:function(t,n,r){var e=n[0],a=n[1];return t[0]=r[0]*e+r[4]*a+r[12],t[1]=r[1]*e+r[5]*a+r[13],t},rotate:function(t,n,r,e){var a=n[0]-r[0],u=n[1]-r[1],o=Math.sin(e),i=Math.cos(e);return t[0]=a*i-u*o+r[0],t[1]=a*o+u*i+r[1],t},angle:function(t,n){var r=t[0],e=t[1],a=n[0],u=n[1],o=Math.sqrt(r*r+e*e)*Math.sqrt(a*a+u*u),i=o&&(r*a+e*u)/o;return Math.acos(Math.min(Math.max(i,-1),1))},zero:function(t){return t[0]=0,t[1]=0,t},str:function(t){return"vec2("+t[0]+", "+t[1]+")"},exactEquals:function(t,n){return t[0]===n[0]&&t[1]===n[1]},equals:function(t,r){var e=t[0],a=t[1],u=r[0],o=r[1];return Math.abs(e-u)<=n*Math.max(1,Math.abs(e),Math.abs(u))&&Math.abs(a-o)<=n*Math.max(1,Math.abs(a),Math.abs(o))},len:Ln,sub:Cn,mul:In,div:Fn,dist:Rn,sqrDist:Pn,sqrLen:Bn,forEach:Dn});t.glMatrix=u,t.mat2=f,t.mat2d=v,t.mat3=x,t.mat4=L,t.quat=fn,t.quat2=An,t.vec2=Nn,t.vec3=$,t.vec4=St,Object.defineProperty(t,"__esModule",{value:!0})}(n)},function(t,n,r){"use strict";r.r(n);var e,a=function(){function t(t){this.context=t,this.buffer=t.createBuffer()}return t.prototype.setValue=function(t){this.context.bindBuffer(this.context.ELEMENT_ARRAY_BUFFER,this.buffer),this.context.bufferData(this.context.ELEMENT_ARRAY_BUFFER,new Uint16Array(t),this.context.STATIC_DRAW)},t.prototype.setIndexBuffer=function(){this.context.bindBuffer(this.context.ELEMENT_ARRAY_BUFFER,this.buffer)},t.prototype.deleteBuffer=function(){this.context.deleteBuffer(this.buffer),this.buffer=null},t}(),u="SHADERS",o=function(){return(o=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var a in n=arguments[r])Object.prototype.hasOwnProperty.call(n,a)&&(t[a]=n[a]);return t}).apply(this,arguments)},i=function(){for(var t=0,n=0,r=arguments.length;n<r;n++)t+=arguments[n].length;var e=Array(t),a=0;for(n=0;n<r;n++)for(var u=arguments[n],o=0,i=u.length;o<i;o++,a++)e[a]=u[o];return e},c={emptyItem:!0},s=function(t,n,r){var e=o(o({},c),r),a=document.createElement("select");a.className="dropdown-base "+n;var u=null,s=[],f=function(n){t(u=n)};a.onchange=function(){var t=s.find((function(t){return t.item.id===a.value}));t.item.id?f(t.item):f(null)};var h=function(t){f(null),s.forEach((function(n){n.item.id===t?(n.element.selected=!0,f(n.item)):n.element.selected=!1}))};return[a,{setItems:function(t){a.innerHTML="",s.length=0,t.find((function(t){return t.id===(null==u?void 0:u.id)}))||f(null),(e.emptyItem?i([{id:"",display:""}],t):i(t)).forEach((function(t){var n=document.createElement("option");n.value=t.id,n.textContent=t.display,n.selected=t.id===(null==u?void 0:u.id),a.appendChild(n),s.push({element:n,item:t})}))},getItems:function(){return s.map((function(t){return t.item}))},setSelectedItemById:h,setSelectedItemByIndex:function(t){return h(s[t].item.id)},getSelectedItem:function(){return u},clearSelection:function(){s.forEach((function(t){return t.element.selected=!1})),f(null)}}]},f=function(t,n){var r=s((function(r){r?(t.forEach((function(t){return t.element.classList.add("hidden")})),t.find((function(t){return t.id===r.id})).element.classList.remove("hidden"),null==n||n(r.id)):null==n||n(null)}),"",{emptyItem:!1}),e=r[0],a=r[1];return a.setItems(t.map((function(t){return{id:t.id,display:t.display}}))),a.setSelectedItemByIndex(0),e},h=function(t){return{id:"custom",display:"Custom",element:t}},l=function(t,n,r){var e=document.createElement("button");return e.onclick=r,e.className=n,e.textContent=t,{element:e}},M=function(t,n,r){var e=document.createElement("div");e.className=(null!=r?r:"")+" options-wrapper";var a=document.createElement("label");return a.className="options-label",a.textContent=n,t.className=t.className+" options-content",e.appendChild(a),e.appendChild(t),e},m=function(t,n){var r=document.createElement("div");return r.className=t,null==n||n.forEach((function(t){return r.appendChild(t)})),r},v=function(t,n,r,e,a){var u=document.createElement("div");u.className="edit-input-grid";for(var o=[],i=function(){return o.map((function(t){return t.value}))},c=0;c<r;c++){var s=document.createElement("div");s.className="edit-input-row";for(var f=function(r){var u=c*e+r,f=t[u],h=document.createElement("input"),l={element:h,value:f};Object.assign(h,a),h.className="edit-input",h.type="number",h.value=null==f?void 0:f.toString(),h.oninput=function(){o[u].value=Number(h.value),null==n||n(i())},o.push(l),s.appendChild(h)},h=0;h<e;h++)f(h);u.appendChild(s)}return[u,{setValues:function(t){return o.forEach((function(n,r){n.value=t[r],n.element.value=n.value.toString()}))},getValues:i,setReadonly:function(t){return o.forEach((function(n){return n.element.readOnly=t}))}}]},p=function(t){return v([0,0,0],t,1,3)},d=function(){return(d=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var a in n=arguments[r])Object.prototype.hasOwnProperty.call(n,a)&&(t[a]=n[a]);return t}).apply(this,arguments)},b={min:"0",max:"1",step:"0.1"},y=function(t,n){return t.hasOwnProperty(n)},g=function(t){throw new Error("Unhandled union member: "+JSON.stringify(t))},x=function(){for(var t=0,n=0,r=arguments.length;n<r;n++)t+=arguments[n].length;var e=Array(t),a=0;for(n=0;n<r;n++)for(var u=arguments[n],o=0,i=u.length;o<i;o++,a++)e[a]=u[o];return e};!function(t){t[t.FLOAT_VEC2=35664]="FLOAT_VEC2",t[t.FLOAT_VEC3=35665]="FLOAT_VEC3",t[t.FLOAT_VEC4=35666]="FLOAT_VEC4",t[t.FLOAT_MAT4=35676]="FLOAT_MAT4",t[t.SAMPLER_2D=35678]="SAMPLER_2D"}(e||(e={}));var A,E=function(){function t(t,n,r,e){this.context=t,this.name=r,this.type=e,this.attachToProgram(n)}return t.prototype.attachToProgram=function(t){var n=this.context.getUniformLocation(t,this.name);this.setter=w(this.type,this.context,n)},t.prototype.setValue=function(t){this.value=t},t.prototype.setUniform=function(){null!==this.value&&this.setter(this.value)},t.prototype.getUniformType=function(){return this.type},t.prototype.getUniformName=function(){return this.name},t.prototype.dispose=function(){},t}(),w=function(t,n,r){switch(t){case e.FLOAT_VEC2:return function(t){return n.uniform2f.apply(n,x([r],t))};case e.FLOAT_VEC3:return function(t){return n.uniform3f.apply(n,x([r],t))};case e.FLOAT_VEC4:return function(t){return n.uniform4f.apply(n,x([r],t))};case e.FLOAT_MAT4:return function(t){return n.uniformMatrix4fv(r,!1,t)};case e.SAMPLER_2D:return function(t){};default:g(t)}},T=function(){function t(t){this.keySelector=t,this.map=new Map}return t.prototype.get=function(t){return this.map.get(this.keySelector(t))},t.prototype.set=function(t,n){this.map.set(this.keySelector(t),n)},t.prototype.has=function(t){return this.map.has(this.keySelector(t))},t.prototype.entriesStrKey=function(){return Array.from(this.map.entries())},t.prototype.deleteStrKey=function(t){this.map.delete(t)},t.prototype.delete=function(t){this.map.delete(this.keySelector(t))},t.prototype.clear=function(){this.map.clear()},t}(),_=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(t){var n=16*Math.random()|0;return("x"==t?n:3&n|8).toString(16)}))},S=function(){return(S=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var a in n=arguments[r])Object.prototype.hasOwnProperty.call(n,a)&&(t[a]=n[a]);return t}).apply(this,arguments)},O=new T((function(t){return t.name+";"+t.type})),V=function(t){switch(t.getUniformType()){case e.FLOAT_VEC2:return L((function(n){return t.setValue(n)}));case e.FLOAT_VEC3:return I((function(n){return t.setValue(n)}));case e.FLOAT_VEC4:var n=[1,0,0,1];return t.setValue(n),F(n,(function(n){return t.setValue(n)}));case e.SAMPLER_2D:return C((function(n){_();t.setValue({slot:n.slot,textureData:!0})}));default:return q()}},q=function(){var t=document.createElement("div");return t.className="unsupported-error",t.innerText="Not supported uniform",t},L=function(t){var n=v([0,0],t,1,2),r=n[0];return n[1].setValues([0,0]),r},C=function(t){var n=p(),r=n[0];return n[1].setValues([0,0,0]),r},I=function(t){var n=p(t),r=n[0];n[1].setValues([0,0,0]);var e=function(t){var n=[.5,.5,.5],r=document.createElement("div");r.className="edit-input-color";var e=function(t){r.style.background="rgb("+255*t[0]+","+255*t[1]+","+255*t[2]+",1)"};e(n);var a=m("row-with-gap"),u=v(n,(function(n){e(n),null==t||t(n)}),1,3,b),o=u[0],i=u[1];return a.appendChild(o),a.appendChild(r),[a,d(d({},i),{setValues:function(t){i.setValues(t),e(t)}})]}(t),a=e[0];e[1].setValues([1,0,0]);var u=f([{id:"custom",display:"Custom",element:r},{id:"color",display:"Color",element:a}]);return m("column-with-gap",[u,r,a])},F=function(t,n){var r=v([0,0,0,0],n,1,4),e=r[0];r[1].setValues(t);var a=function(t){var n=[.5,.5,.5,1],r=document.createElement("div");r.className="edit-input-color";var e=function(t){r.style.background="rgb("+255*t[0]+","+255*t[1]+","+255*t[2]+","+t[3]+")"};e(n);var a=m("row-with-gap"),u=v(n,(function(n){e(n),null==t||t(n)}),1,4,b),o=u[0],i=u[1];return a.appendChild(o),a.appendChild(r),[a,d(d({},i),{setValues:function(t){i.setValues(t),e(t)}})]}(n),u=a[0];a[1].setValues(t);var o=f([{id:"custom",display:"Custom",element:e},{id:"color",display:"Color",element:u}]);return m("column-with-gap",[o,e,u])},R=function(t,n){var r=t.indexOf(n);r>-1&&t.splice(r,1)},P=function(t,n){return t.substring(0,t.length-n)},B=function(t,n,r){var e=t.createShader(n);if(t.shaderSource(e,r),t.compileShader(e),t.getShaderParameter(e,t.COMPILE_STATUS))return e;var a=t.getShaderInfoLog(e);return t.deleteShader(e),{error:a}},D=function(t,n,r){var e=t.createProgram();if(t.attachShader(e,n),t.attachShader(e,r),t.linkProgram(e),t.getProgramParameter(e,t.LINK_STATUS))return e;throw t.deleteProgram(e),new Error("Creating program failed: "+t.getProgramInfoLog(e))};!function(t){t[t.FLOAT_VEC3=35665]="FLOAT_VEC3",t[t.FLOAT_VEC4=35666]="FLOAT_VEC4"}(A||(A={}));var N=function(){function t(t,n,r,e){this.context=t,this.name=r,this.type=e,this.numElements=0,this.attachToProgram(n),this.buffer=t.createBuffer()}return t.prototype.attachToProgram=function(t){this.location=this.context.getAttribLocation(t,this.name)},t.prototype.setValue=function(t){this.numElements=t.length,this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffer);var n=[].concat.apply([],t);console.log("setting value",n),this.context.bufferData(this.context.ARRAY_BUFFER,new Float32Array(n),this.context.STATIC_DRAW)},t.prototype.setAttributeBuffer=function(){if(null!==this.buffer){this.context.enableVertexAttribArray(this.location),this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffer);var t=j(this.type),n=this.context.FLOAT;this.context.vertexAttribPointer(this.location,t,n,!1,0,0)}},t.prototype.getAttributeBufferType=function(){return this.type},t.prototype.getNumElements=function(){return this.numElements},t.prototype.deleteBuffer=function(){this.context.deleteBuffer(this.buffer),this.buffer=null},t}(),j=function(t){switch(t){case A.FLOAT_VEC3:return 3;case A.FLOAT_VEC4:return 4;default:g(t)}},z=function(){function t(t){this.value=t,this.observers=[]}return t.prototype.attach=function(t){this.observers.push(t)},t.prototype.detach=function(t){R(this.observers,t)},t.prototype.detachAll=function(){this.observers.length=0},t.prototype.setValue=function(t){this.value=t,this.notify()},t.prototype.getValue=function(){return this.value},t.prototype.forceNotify=function(){this.notify()},t.prototype.notify=function(){if(null!==this.value){var t=this.value;this.observers.forEach((function(n){return n(t)}))}},t}(),k=function(){return(k=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var a in n=arguments[r])Object.prototype.hasOwnProperty.call(n,a)&&(t[a]=n[a]);return t}).apply(this,arguments)},U=function(){for(var t=0,n=0,r=arguments.length;n<r;n++)t+=arguments[n].length;var e=Array(t),a=0;for(n=0;n<r;n++)for(var u=arguments[n],o=0,i=u.length;o<i;o++,a++)e[a]=u[o];return e},Y=function(t){return t.name+";"+t.type},H=new T(Y),Q=function(t,n,r,e){var a,u,o=r.map((function(r){var a=k({},r),u=H.get(a);if(u)return u.attributeBufferInfo.attachToProgram(n),{key:a,value:u};var o=new N(t,n,r.name,r.type),i=e.filter((function(t){return t.type===o.getAttributeBufferType()})),c=i.length?Z(o,i):K(o),s=c.element,f=c.dispose;return{key:a,value:{component:M(s,r.name),attributeBufferInfo:o,dispose:function(){o.deleteBuffer(),null==f||f()}}}}));return u=(a=o).map((function(t){return Y(t.key)})),H.entriesStrKey().filter((function(t){return!u.includes(t[0])})).forEach((function(t){t[1].dispose(),H.deleteStrKey(t[0])})),a.forEach((function(t){H.has(t.key)||H.set(t.key,t.value)})),o.map((function(t){return t.value}))},X=function(t,n,r){switch(t){case A.FLOAT_VEC4:return J(r,n);default:return G()}},G=function(){var t=document.createElement("div");return t.className="unsupported-error",t.innerText="Not supported attribute buffer",t},K=function(t){var n=new z((t.getAttributeBufferType(),[[0,0,0,1],[0,.5,0,1],[.9,0,0,1],[0,.5,0,1],[.7,0,0,1],[.7,.5,0,1]]));return n.attach((function(n){t.setValue(n)})),{element:X(t.getAttributeBufferType(),!0,n),dispose:function(){return n.detachAll()}}},Z=function(t,n){var r=n.map((function(n){var r=X(t.getAttributeBufferType(),!1,n.value);return{id:_(),element:r,display:n.name,value:n.value}})),e=new z((t.getAttributeBufferType(),[[0,0,0,1],[0,.5,0,1],[.9,0,0,1],[0,.5,0,1],[.7,0,0,1],[.7,.5,0,1]]));e.attach((function(n){return t.setValue(n)}));var a=X(t.getAttributeBufferType(),!0,e),u=void 0;return{element:m("column-with-gap",U([f(U([h(a)],r),(function(n){null==u||u();var a=r.find((function(t){return t.id===n}));if(a){var o=function(n){return t.setValue(n)};a.value.attach(o),o(a.value.getValue()),u=function(){return a.value.detach(o)}}else e.forceNotify()})),a],r.map((function(t){return t.element})))),dispose:function(){null==u||u(),e.detachAll()}}},J=function(t,n){var r=document.createElement("input");if(r.className="edit-input",r.disabled=!n,!n){t.attach((function(t){return r.value=JSON.stringify(t)}))}return r.value=JSON.stringify(t.getValue()),r.oninput=function(){try{var n=JSON.parse(r.value);if(Array.isArray(n))n.every((function(t){return!!Array.isArray(t)&&4===t.length}));else;t.setValue(n)}catch(t){console.log("this is not a json")}},r},W=function(t){var n=document.createElement("canvas");n.className=t;var r,e,a=n.getContext("webgl");if(r=n,e=function(t){n.width=t.width,n.height=t.height},new ResizeObserver((function(t){var n=t.find((function(t){return t.target===r}));if(n){var a=n.target.getBoundingClientRect();e({x:a.x,y:a.y,width:a.width,height:a.height})}})).observe(r),!a)throw new Error("Unable to create webgl context");return[n,{context:a}]},$=acquireVsCodeApi(),tt=function(){function t(){var t=this;this.eventListeners=[],window.addEventListener("message",(function(n){t.eventListeners.forEach((function(t){return t(n.data)}))}))}return t.prototype.getShaderDocuments=function(){var t=this,n=_();return $.postMessage({type:"getShaderDocuments",id:n}),new Promise((function(r){var e=function(a){"getShaderDocuments"===a.type&&a.id===n&&(r(a.payload.files),t.removeListener(e))};t.eventListeners.push(e)}))},t.prototype.getDocumentText=function(t){var n=this,r=_();return $.postMessage({type:"getDocumentText",id:r,payload:{fileName:t}}),new Promise((function(t){var e=function(a){"getDocumentText"===a.type&&a.id===r&&(t(a.payload.text),n.removeListener(e))};n.eventListeners.push(e)}))},t.prototype.subscribeToDocumentSave=function(t,n){var r=this;$.postMessage({type:"subscribeToDocumentTextChange",payload:{fileName:t}});var e=function(r){"onDocumentTextChange"===r.type&&r.payload.filePath===t&&n(r.payload.text)};return this.eventListeners.push(e),function(){r.removeListener(e),$.postMessage({type:"unsubscribeToDocumentTextChange",payload:{fileName:t}})}},t.prototype.removeListener=function(t){R(this.eventListeners,t)},t}(),nt=function(t){return[].concat(t,t,t,t)},rt=new Map([["cube",{display:"Cube",positions:[[-.5,-.5,.5,1],[.5,-.5,.5,1],[.5,.5,.5,1],[-.5,.5,.5,1],[-.5,-.5,-.5,1],[-.5,.5,-.5,1],[.5,.5,-.5,1],[.5,-.5,-.5,1],[-.5,.5,-.5,1],[-.5,.5,.5,1],[.5,.5,.5,1],[.5,.5,-.5,1],[-.5,-.5,-.5,1],[.5,-.5,-.5,1],[.5,-.5,.5,1],[-.5,-.5,.5,1],[.5,-.5,-.5,1],[.5,.5,-.5,1],[.5,.5,.5,1],[.5,-.5,.5,1],[-.5,-.5,-.5,1],[-.5,-.5,.5,1],[-.5,.5,.5,1],[-.5,.5,-.5,1]],colors:function(){for(var t=0,n=0,r=arguments.length;n<r;n++)t+=arguments[n].length;var e=Array(t),a=0;for(n=0;n<r;n++)for(var u=arguments[n],o=0,i=u.length;o<i;o++,a++)e[a]=u[o];return e}(nt([1,1,1,1]),nt([1,0,0,1]),nt([0,1,0,1]),nt([0,0,1,1]),nt([1,1,0,1]),nt([1,0,1,1])),indices:[0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23]}]]);console.log(rt);var et=r(0),at=function(t,n,r,e){return new(r||(r=Promise))((function(a,u){function o(t){try{c(e.next(t))}catch(t){u(t)}}function i(t){try{c(e.throw(t))}catch(t){u(t)}}function c(t){var n;t.done?a(t.value):(n=t.value,n instanceof r?n:new r((function(t){t(n)}))).then(o,i)}c((e=e.apply(t,n||[])).next())}))},ut=function(t,n){var r,e,a,u,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return u={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(u[Symbol.iterator]=function(){return this}),u;function i(u){return function(i){return function(u){if(r)throw new TypeError("Generator is already executing.");for(;o;)try{if(r=1,e&&(a=2&u[0]?e.return:u[0]?e.throw||((a=e.return)&&a.call(e),0):e.next)&&!(a=a.call(e,u[1])).done)return a;switch(e=0,a&&(u=[2&u[0],a.value]),u[0]){case 0:case 1:a=u;break;case 4:return o.label++,{value:u[1],done:!1};case 5:o.label++,e=u[1],u=[0];continue;case 7:u=o.ops.pop(),o.trys.pop();continue;default:if(!(a=o.trys,(a=a.length>0&&a[a.length-1])||6!==u[0]&&2!==u[0])){o=0;continue}if(3===u[0]&&(!a||u[1]>a[0]&&u[1]<a[3])){o.label=u[1];break}if(6===u[0]&&o.label<a[1]){o.label=a[1],a=u;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(u);break}a[2]&&o.ops.pop(),o.trys.pop();continue}u=n.call(t,o)}catch(t){u=[6,t],e=0}finally{r=a=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,i])}}};at(void 0,void 0,void 0,(function(){var t,n,r,e,o,i,c,f,h,v,p,d,b,g,x,w,T,_,q,L,C,I,F,R,N,j,k,U,Y,H;return ut(this,(function(X){var G,K,Z;return t=new tt,n=document.getElementById("viewer"),r=m("viewer-options"),e=m("viewer-shader-options"),o=m("viewer-content shader-errors"),i=W("viewer-content"),c=i[0],f=i[1],h=new Map([["positions",{name:"Binding - Mesh positions",type:A.FLOAT_VEC4,value:new z([])}],["colors",{name:"Binding - Mesh colors",type:A.FLOAT_VEC4,value:new z([])}]]),v={drawMode:"arrays"},n.appendChild(c),n.appendChild(o),n.appendChild(r),p=function(t){c.style.visibility="canvas"===t?"visible":"collapse",o.style.visibility="errors"===t?"visible":"collapse"},d=function(){t.getShaderDocuments().then((function(t){var n=t.map((function(t){return{id:t.filePath,display:t.fileName}}));I.setItems(n),N.setItems(n)}))},T=null,_=function(t){var n=rt.get(t),r=n.positions,e=n.colors;h.get("positions").value.setValue(r),h.get("colors").value.setValue(e)},q=function(){e.innerHTML="";var t=f.context;if(w&&x){var n=function(t,n,r){var e=B(t,t.VERTEX_SHADER,n),a=B(t,t.FRAGMENT_SHADER,r),u=void 0;y(e,"error")&&(u=P(e.error,1));var o=void 0;return y(a,"error")&&(o=P(a.error,1)),u||o?[u,o]:D(t,e,a)}(t,x,w);if(Array.isArray(n))p("errors"),o.innerText=function(t){var n=t[0],r=t[1],e=[];return n&&e.push("VERTEX SHADER:",n),r&&e.push("FRAGMENT SHADER:",r),e.join("\r\n")}(n);else{p("canvas");var r=n,u=function(t,n){for(var r=t.getProgramParameter(n,t.ACTIVE_UNIFORMS),e=[],a=0;a<r;++a){var u=t.getActiveUniform(n,a);e.push({name:u.name,type:u.type})}return e}(t,r),i=function(t,n){for(var r=t.getProgramParameter(n,t.ACTIVE_ATTRIBUTES),e=[],a=0;a<r;++a){var u=t.getActiveAttrib(n,a);e.push({name:u.name,type:u.type})}return e}(t,r),c=function(t,n,r){var e=r.map((function(r){var e=S({},r),a=O.get(e);if(a)return a.uniformInfo.attachToProgram(n),{key:e,value:a};var u=new E(t,n,r.name,r.type);return{key:e,value:{component:M(V(u),r.name),uniformInfo:u}}}));return O.clear(),e.forEach((function(t){return O.set(t.key,t.value)})),e.map((function(t){return t.value}))}(t,r,u);c.forEach((function(t){return e.appendChild(t.component)}));var s=Q(t,r,i,Array.from(h.values()));s.forEach((function(t){return e.appendChild(t.component)}));var l=c.map((function(t){return t.uniformInfo})),m=s.map((function(t){return t.attributeBufferInfo})),d=new a(t);d.setValue([0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23]),null!==T&&cancelAnimationFrame(T);var b=0,g=l.find((function(t){return"uModelViewMatrix"===t.getUniformName()})),A=l.find((function(t){return"uProjectionMatrix"===t.getUniformName()})),_=0,q=function(n){var e=(n*=.001)-_;_=n;var a=45*Math.PI/180,u=t.canvas,o=u.clientWidth/u.clientHeight,i=et.mat4.create();et.mat4.perspective(i,a,o,.1,100);var c=et.mat4.create();et.mat4.translate(c,c,[-0,0,-6]),et.mat4.rotate(c,c,b,[0,0,1]),et.mat4.rotate(c,c,.7*b,[0,1,0]),A.setValue(i),g.setValue(c),function(t,n,r,e){t.useProgram(n),t.viewport(0,0,t.canvas.width,t.canvas.height),t.clearColor(0,0,0,1),t.clearDepth(1),t.enable(t.DEPTH_TEST),t.depthFunc(t.LEQUAL),t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT),r.uniformInfos.forEach((function(t){return t.setUniform()})),r.attributeBufferInfos.forEach((function(t){return t.setAttributeBuffer()}));var a=Math.min.apply(Math,r.attributeBufferInfos.map((function(t){return t.getNumElements()}))),u=t.TRIANGLES;"arrays"===e.drawMode?t.drawArrays(u,0,a):(r.indexBufferInfo.setIndexBuffer(),t.drawElements(u,36,t.UNSIGNED_SHORT,0))}(t,r,{uniformInfos:l,attributeBufferInfos:m,indexBufferInfo:d},v),b+=e,T=requestAnimationFrame(q)};q(0)}}else p("none")},r.appendChild(m("viewer-shaders-title",[(G=u,K="",Z=document.createElement("h3"),Z.textContent=G,Z.className=K+" section-title",{element:Z}).element,l("Sync","viewer-refresh-button",d).element])),L=s((function(n){return at(void 0,void 0,void 0,(function(){var r;return ut(this,(function(e){switch(e.label){case 0:return null==b||b(),n&&(b=t.subscribeToDocumentSave(n.id,(function(t){x=t,q()}))),n?[4,t.getDocumentText(n.id)]:[3,2];case 1:return r=e.sent(),[3,3];case 2:r="",e.label=3;case 3:return x=r,q(),[2]}}))}))})),C=L[0],I=L[1],r.appendChild(M(C,"Vertex Shader")),F=s((function(n){return at(void 0,void 0,void 0,(function(){var r;return ut(this,(function(e){switch(e.label){case 0:return null==g||g(),n&&(g=t.subscribeToDocumentSave(n.id,(function(t){w=t,q()}))),n?[4,t.getDocumentText(n.id)]:[3,2];case 1:return r=e.sent(),[3,3];case 2:r="",e.label=3;case 3:return w=r,q(),[2]}}))}))})),R=F[0],N=F[1],r.appendChild(M(R,"Fragment Shader")),j=s((function(t){return t&&_(t.id)}),void 0,{emptyItem:!1}),k=j[0],(U=j[1]).setItems(Array.from(rt.entries()).map((function(t){return{id:t[0],display:t[1].display}}))),U.setSelectedItemByIndex(0),r.appendChild(M(k,"Mesh")),Y=s((function(t){return t&&(v.drawMode=t.id)}),void 0,{emptyItem:!1}),H=Y[0],Y[1].setItems([{id:"arrays",display:"Arrays"},{id:"elements",display:"Elements"}]),r.appendChild(M(H,"Draw mode")),r.appendChild(e),d(),[2]}))}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,