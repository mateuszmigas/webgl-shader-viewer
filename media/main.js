!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t),n.d(t,"createUniformBindings",(function(){return pe}));var r,i=function(){return(i=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)},o=function(e){return Math.min(Math.max(e,1),10)},a=function(){function e(e,t,n){var r=this;this.element=e,this.positionProvider=t,this.onPositionChange=n,this.pointerPosition={x:0,y:0},this.eventListeners=new Map,this.isMoving=!1,this.dispatchAction=function(e){var t=function(e,t){switch(t.type){case"orbitRotate":return i(i({},e),{latitude:(r=e.latitude+t.deltaLatitude,Math.min(Math.max(r,-Math.PI/2+.1),Math.PI/2-.1)),longitude:(n=e.longitude+t.deltaLongitude,n>Math.PI?n-2*Math.PI:n<-Math.PI?n+2*Math.PI:n)});case"zoomInAt":return i(i({},e),{radius:o(e.radius-.1)});case"zoomOutAt":return i(i({},e),{radius:o(e.radius+.1)});default:return e}var n,r}(r.positionProvider(),e);r.onPositionChange(t)},this.onMouseDown=function(e){0===e.button&&(r.pointerPosition={x:e.offsetX,y:e.offsetY},r.isMoving=!0)},this.onMouseMove=function(e){if(r.isMoving){r.dispatchAction({type:"orbitRotate",deltaLongitude:.01*-(e.offsetX-r.pointerPosition.x),deltaLatitude:.01*(e.offsetY-r.pointerPosition.y)})}r.pointerPosition={x:e.offsetX,y:e.offsetY}},this.onMouseUp=function(){r.isMoving=!1},this.onMouseLeave=function(){r.isMoving=!1},this.onWheel=function(e){var t=e.deltaY<0?"zoomInAt":"zoomOutAt";r.dispatchAction({type:t})},this.registerEvent("mousedown",this.onMouseDown),this.registerEvent("mousemove",this.onMouseMove),this.registerEvent("mouseup",this.onMouseUp),this.registerEvent("mouseleave",this.onMouseLeave),this.registerEvent("wheel",this.onWheel)}return e.prototype.dispose=function(){var e=this;this.eventListeners.forEach((function(t,n){return e.element.removeEventListener(n,t)}))},e.prototype.registerEvent=function(e,t){this.element.addEventListener(e,t),this.eventListeners.set(e,t)},e}(),u=acquireVsCodeApi(),s={vertexFilePath:null,fragmentFilePath:null,drawMode:"elements",meshId:"cube"},c=function(){var e;return null!==(e=u.getState())&&void 0!==e?e:s},l=function(e){return u.setState(Object.assign(c(),e))},f=function(){function e(e){this.context=e,this.count=0,this.buffer=e.createBuffer()}return e.prototype.setValue=function(e){this.count=e.length,this.context.bindBuffer(this.context.ELEMENT_ARRAY_BUFFER,this.buffer),this.context.bufferData(this.context.ELEMENT_ARRAY_BUFFER,new Uint16Array(e),this.context.STATIC_DRAW)},e.prototype.setIndexBuffer=function(){this.context.bindBuffer(this.context.ELEMENT_ARRAY_BUFFER,this.buffer)},e.prototype.getCount=function(){return this.count},e.prototype.deleteBuffer=function(){this.context.deleteBuffer(this.buffer),this.buffer=null},e}(),h="SHADERS",d=function(){return(d=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)},p=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),i=0;for(t=0;t<n;t++)for(var o=arguments[t],a=0,u=o.length;a<u;a++,i++)r[i]=o[a];return r},m={emptyItem:!1},v=function(e,t,n){var r=d(d({},m),n),i=document.createElement("select");i.className="dropdown-base "+t;var o=null,a=[],u=function(t){e(o=t)};i.onchange=function(){var e=a.find((function(e){return e.item.id===i.value}));e.item.id?u(e.item):u(null)};var s=function(e){a.forEach((function(t){t.item.id===e?(t.element.selected=!0,u(t.item)):t.element.selected=!1}))};return[i,{setItems:function(e){i.innerHTML="",a.length=0,(r.emptyItem?p([{id:"",display:""}],e):p(e)).forEach((function(e){var t=document.createElement("option");t.value=e.id,t.textContent=e.display,t.selected=e.id===(null==o?void 0:o.id),i.appendChild(t),a.push({element:t,item:e})}))},getItems:function(){return a.map((function(e){return e.item}))},setSelectedItemById:s,setSelectedItemByIndex:function(e){return s(a[e].item.id)},getSelectedItem:function(){return o},clearSelection:function(){a.forEach((function(e){return e.element.selected=!1})),u(null)}}]},y=function(e,t){var n=v((function(n){n?(e.forEach((function(e){return e.element.classList.add("hidden")})),e.find((function(e){return e.id===n.id})).element.classList.remove("hidden"),null==t||t(n.id)):null==t||t(null)})),r=n[0],i=n[1];return i.setItems(e.map((function(e){return{id:e.id,display:e.display}}))),i.setSelectedItemByIndex(0),r},g=function(e,t){var n=document.createElement("h3");return n.textContent=e,n.className=t+" section-title",{element:n}},A=function(e,t,n){var r=document.createElement("div");r.className=(null!=n?n:"")+" options-wrapper";var i=document.createElement("label");return i.className="options-label",i.textContent=t,e.className=e.className+" options-content",r.appendChild(i),r.appendChild(e),r},b=function(e,t){var n=document.createElement("div");return n.className=e,null==t||t.forEach((function(e){return n.appendChild(e)})),n},x=function(e,t){return e.hasOwnProperty(t)},E=function(e){throw new Error("Unhandled union member: "+JSON.stringify(e))},T=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),i=0;for(t=0;t<n;t++)for(var o=arguments[t],a=0,u=o.length;a<u;a++,i++)r[i]=o[a];return r};!function(e){e[e.FLOAT_VEC2=35664]="FLOAT_VEC2",e[e.FLOAT_VEC3=35665]="FLOAT_VEC3",e[e.FLOAT_VEC4=35666]="FLOAT_VEC4",e[e.FLOAT_MAT4=35676]="FLOAT_MAT4"}(r||(r={}));var w,M=function(){function e(e,t,n,r){this.context=e,this.name=n,this.type=r,this.attachToProgram(t)}return e.prototype.attachToProgram=function(e){var t=this.context.getUniformLocation(e,this.name);this.setter=C(this.type,this.context,t)},e.prototype.setValue=function(e){this.value=e},e.prototype.prepareForRender=function(){null!==this.value&&this.setter(this.value)},e.prototype.getUniformType=function(){return this.type},e.prototype.getUniformName=function(){return this.name},e.prototype.dispose=function(){},e}(),C=function(e,t,n){switch(e){case r.FLOAT_VEC2:return function(e){return t.uniform2f.apply(t,T([n],e))};case r.FLOAT_VEC3:return function(e){return t.uniform3f.apply(t,T([n],e))};case r.FLOAT_VEC4:return function(e){return t.uniform4f.apply(t,T([n],e))};case r.FLOAT_MAT4:return function(e){return t.uniformMatrix4fv(n,!1,e)};default:E(e)}},S=function(){function e(e){this.keySelector=e,this.map=new Map}return e.prototype.get=function(e){return this.map.get(this.keySelector(e))},e.prototype.set=function(e,t){this.map.set(this.keySelector(e),t)},e.prototype.has=function(e){return this.map.has(this.keySelector(e))},e.prototype.entriesStrKey=function(){return Array.from(this.map.entries())},e.prototype.deleteStrKey=function(e){this.map.delete(e)},e.prototype.delete=function(e){this.map.delete(this.keySelector(e))},e.prototype.clear=function(){this.map.clear()},e}(),F=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){var t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}))},L=function(e,t){var n=e.indexOf(t);n>-1&&e.splice(n,1)},I=function(e,t){return e.substring(0,e.length-t)},O=function(){function e(e){this.value=e,this.observers=[]}return e.prototype.attach=function(e){this.observers.push(e)},e.prototype.detach=function(e){L(this.observers,e)},e.prototype.detachAll=function(){this.observers.length=0},e.prototype.setValue=function(e){this.value=e,this.notify()},e.prototype.getValue=function(){return this.value},e.prototype.forceNotify=function(){this.notify()},e.prototype.notify=function(){if(null!==this.value){var e=this.value;this.observers.forEach((function(t){return t(e)}))}},e}(),P=function(e,t,n){var r=document.createElement("div");r.className="edit-input-grid";for(var i=[],o=function(){return i.map((function(e){return e.value}))},a=0;a<e;a++){var u=document.createElement("div");u.className="edit-input-row";for(var s=function(e){var r=a*t+e,s=document.createElement("input"),c={element:s,value:0};s.className="edit-input",s.type="number",s.value=(0).toString(),s.disabled=!n,s.oninput=function(){i[r].value=Number(s.value),console.log("calling on change"),null==n||n(o())},i.push(c),u.appendChild(s)},c=0;c<t;c++)s(c);r.appendChild(u)}return[r,{setValues:function(e){return i.forEach((function(t,n){t.value=e[n],t.element.value=t.value.toString()}))},getValues:o,setReadonly:function(e){return i.forEach((function(t){return t.element.readOnly=e}))}}]},_=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),i=0;for(t=0;t<n;t++)for(var o=arguments[t],a=0,u=o.length;a<u;a++,i++)r[i]=o[a];return r},V=function(){var e=document.createElement("div");return e.className="unsupported-error",e.innerText="Not supported uniform",e},B=function(e,t){var n=null;return{element:b("column-with-gap",_([y(e,(function(r){null==n||n();var i=e.find((function(e){return e.id===r})),o=function(e){return t(e)};i.value.attach(o),o(i.value.getValue()),n=function(){return i.value.detach(o)}}))],e.map((function(e){return e.element})))),dispose:function(){return null==n?void 0:n()}}},R=function(e,t,n){var r=P(1,e,(function(e){t.setValue(e)})),i=r[0],o=r[1];if(o.setValues(t.getValue()),!n){t.attach((function(e){return o.setValues(e)}))}return i},N=function(e,t,n){var r=function(e,t){return P(e,e,t)}(e,n?function(e){t.setValue(e)}:void 0),i=r[0],o=r[1];if(o.setValues(t.getValue()),!n){t.attach((function(e){return o.setValues(e)}))}return i},U=function(e,t,n){var r=document.createElement("input");if(r.className="edit-input",r.disabled=!n,!n){t.attach((function(e){return r.value=JSON.stringify(e)}))}return r.value=JSON.stringify(t.getValue()),r.oninput=function(){try{var n=JSON.parse(r.value);if(Array.isArray(n))n.every((function(t){return!!Array.isArray(t)&&t.length===e}))||console.log("not every element id the arra is same size");else 1!==e&&console.log("this is not an array type");t.setValue(n)}catch(e){console.log("this is not a json")}},r},D=function(){return(D=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)},k=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),i=0;for(t=0;t<n;t++)for(var o=arguments[t],a=0,u=o.length;a<u;a++,i++)r[i]=o[a];return r},j=function(e){return e.name+";"+e.type},z=new S(j),H=function(e,t,n,r){var i,o,a=n.map((function(n){var i=D({},n),o=z.get(i);if(o)return o.uniformInfo.attachToProgram(t),{key:i,value:o};var a=new M(e,t,n.name,n.type),u=r.filter((function(e){return e.type===a.getUniformType()})),s=function(e){return a.setValue(e)},c=u.length?B(k([Y(a)],K(u,a)),s):G(a,s),l=c.element,f=c.dispose;return{key:i,value:{component:A(l,n.name),uniformInfo:a,dispose:function(){null==f||f()}}}}));return o=(i=a).map((function(e){return j(e.key)})),z.entriesStrKey().filter((function(e){return!o.includes(e[0])})).forEach((function(e){z.deleteStrKey(e[0])})),i.forEach((function(e){z.has(e.key)||z.set(e.key,e.value)})),a.map((function(e){return e.value}))},Y=function(e){return D({id:"custom",display:"Custom"},G(e))},K=function(e,t){return e.map((function(e){var n=W(t.getUniformType(),!1,e.value);return{id:F(),element:n,display:e.name,value:e.value}}))},G=function(e,t){var n=function(e){switch(e){case r.FLOAT_VEC2:return[1,1];case r.FLOAT_VEC3:return[1,1,1];case r.FLOAT_VEC4:return[1,1,1,1];case r.FLOAT_MAT4:return[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];default:E(e)}}(e.getUniformType()),i=new O(n);return t&&(i.attach((function(e){return t(e)})),t(n)),{element:W(e.getUniformType(),!0,i),value:i,dispose:function(){return i.detachAll()}}},W=function(e,t,n){switch(e){case r.FLOAT_VEC2:return R(2,n,t);case r.FLOAT_VEC3:return R(3,n,t);case r.FLOAT_VEC4:return R(4,n,t);case r.FLOAT_MAT4:return N(4,n,t);default:return V()}},X=function(e,t,n){var r=e.createShader(t);if(e.shaderSource(r,n),e.compileShader(r),e.getShaderParameter(r,e.COMPILE_STATUS))return r;var i=e.getShaderInfoLog(r);return e.deleteShader(r),{error:i}},J=function(e,t,n){var r=e.createProgram();if(e.attachShader(r,t),e.attachShader(r,n),e.linkProgram(r),e.getProgramParameter(r,e.LINK_STATUS))return r;var i=e.getProgramInfoLog(r);throw e.deleteProgram(r),new Error("Creating program failed: "+i)};!function(e){e[e.FLOAT_VEC2=35664]="FLOAT_VEC2",e[e.FLOAT_VEC3=35665]="FLOAT_VEC3",e[e.FLOAT_VEC4=35666]="FLOAT_VEC4"}(w||(w={}));var q=function(){function e(e,t,n,r){this.context=e,this.name=n,this.type=r,this.count=0,this.attachToProgram(t),this.buffer=e.createBuffer()}return e.prototype.attachToProgram=function(e){this.location=this.context.getAttribLocation(e,this.name)},e.prototype.setValue=function(e){this.count=e.length,this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffer);var t=[].concat.apply([],e);this.context.bufferData(this.context.ARRAY_BUFFER,new Float32Array(t),this.context.STATIC_DRAW)},e.prototype.setAttributeBuffer=function(){if(null!==this.buffer){this.context.enableVertexAttribArray(this.location),this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffer);var e=Q(this.type),t=this.context.FLOAT;this.context.vertexAttribPointer(this.location,e,t,!1,0,0)}},e.prototype.getAttributeBufferType=function(){return this.type},e.prototype.getCount=function(){return this.count},e.prototype.deleteBuffer=function(){this.context.deleteBuffer(this.buffer),this.buffer=null},e}(),Q=function(e){switch(e){case w.FLOAT_VEC2:return 2;case w.FLOAT_VEC3:return 3;case w.FLOAT_VEC4:return 4;default:E(e)}},Z=function(){return(Z=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)},$=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),i=0;for(t=0;t<n;t++)for(var o=arguments[t],a=0,u=o.length;a<u;a++,i++)r[i]=o[a];return r},ee=function(e){return e.name+";"+e.type},te=new S(ee),ne=function(e,t,n,r){var i,o,a=n.map((function(n){var i=Z({},n),o=te.get(i);if(o)return o.attributeBufferInfo.attachToProgram(t),{key:i,value:o};var a=new q(e,t,n.name,n.type),u=r.filter((function(e){return e.type===a.getAttributeBufferType()})),s=function(e){return a.setValue(e)},c=u.length?B($([re(a)],ie(u,a)),s):oe(a,s),l=c.element,f=c.dispose;return{key:i,value:{component:A(l,n.name),attributeBufferInfo:a,dispose:function(){a.deleteBuffer(),null==f||f()}}}}));return o=(i=a).map((function(e){return ee(e.key)})),te.entriesStrKey().filter((function(e){return!o.includes(e[0])})).forEach((function(e){e[1].dispose(),te.deleteStrKey(e[0])})),i.forEach((function(e){te.has(e.key)||te.set(e.key,e.value)})),a.map((function(e){return e.value}))},re=function(e){return Z({id:"custom",display:"Custom"},oe(e))},ie=function(e,t){return e.map((function(e){var n=ae(t.getAttributeBufferType(),!1,e.value);return{id:F(),element:n,display:e.name,value:e.value}}))},oe=function(e,t){var n=(e.getAttributeBufferType(),[[0,0,0,1],[0,.5,0,1],[.9,0,0,1],[0,.5,0,1],[.7,0,0,1],[.7,.5,0,1]]),r=new O(n);return t&&(r.attach((function(e){return t(e)})),t(n)),{element:ae(e.getAttributeBufferType(),!0,r),value:r,dispose:function(){return r.detachAll()}}},ae=function(e,t,n){switch(e){case w.FLOAT_VEC2:return U(2,n,t);case w.FLOAT_VEC3:return U(3,n,t);case w.FLOAT_VEC4:return U(4,n,t);default:return V()}},ue=function(e){var t=document.createElement("canvas");t.className=e;var n,r,i=t.getContext("webgl"),o=0,a=0;if(n=t,r=function(e){t.width=e.width,t.height=e.height,o=e.width,a=e.height},new ResizeObserver((function(e){var t=e.find((function(e){return e.target===n}));if(t){var i=t.target.getBoundingClientRect();r({x:i.x,y:i.y,width:i.width,height:i.height})}})).observe(n),!i)throw new Error("Unable to create webgl context");return[t,{context:i,getSize:function(){return{width:o,height:a}}}]},se=function(){function e(){var e=this;this.eventListeners=[],window.addEventListener("message",(function(t){e.eventListeners.forEach((function(e){return e(t.data)}))}))}return e.prototype.getShaderDocuments=function(){var e=this,t=F();return u.postMessage({type:"getShaderDocuments",id:t}),new Promise((function(n){var r=function(i){"getShaderDocuments"===i.type&&i.id===t&&(n(i.payload.files),e.removeListener(r))};e.eventListeners.push(r)}))},e.prototype.getDocumentText=function(e){var t=this,n=F();return u.postMessage({type:"getDocumentText",id:n,payload:{fileName:e}}),new Promise((function(e){var r=function(i){"getDocumentText"===i.type&&i.id===n&&(e(i.payload.text),t.removeListener(r))};t.eventListeners.push(r)}))},e.prototype.subscribeToDocumentSave=function(e,t){var n=this;u.postMessage({type:"subscribeToDocumentTextChange",payload:{fileName:e}});var r=function(n){"onDocumentTextChange"===n.type&&n.payload.filePath===e&&t(n.payload.text)};return this.eventListeners.push(r),function(){n.removeListener(r),u.postMessage({type:"unsubscribeToDocumentTextChange",payload:{fileName:e}})}},e.prototype.removeListener=function(e){L(this.eventListeners,e)},e}(),ce=function(e){return[].concat(e,e,e,e)},le=new Map([["cube",{display:"Cube",positions:[[-.5,-.5,.5,1],[.5,-.5,.5,1],[.5,.5,.5,1],[-.5,.5,.5,1],[-.5,-.5,-.5,1],[-.5,.5,-.5,1],[.5,.5,-.5,1],[.5,-.5,-.5,1],[-.5,.5,-.5,1],[-.5,.5,.5,1],[.5,.5,.5,1],[.5,.5,-.5,1],[-.5,-.5,-.5,1],[.5,-.5,-.5,1],[.5,-.5,.5,1],[-.5,-.5,.5,1],[.5,-.5,-.5,1],[.5,.5,-.5,1],[.5,.5,.5,1],[.5,-.5,.5,1],[-.5,-.5,-.5,1],[-.5,-.5,.5,1],[-.5,.5,.5,1],[-.5,.5,-.5,1]],colors:function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),i=0;for(t=0;t<n;t++)for(var o=arguments[t],a=0,u=o.length;a<u;a++,i++)r[i]=o[a];return r}(ce([1,1,1,1]),ce([1,0,0,1]),ce([0,1,0,1]),ce([0,0,1,1]),ce([1,1,0,1]),ce([1,0,1,1])),indices:[0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23]}],["plane",{display:"Plane",positions:[[-.5,-.5,0,1],[.5,-.5,0,1],[.5,.5,0,1],[-.5,.5,0,1]],colors:ce([1,1,1,1]),indices:[0,1,2,0,2,3]}]]);console.log(le);var fe;!function(e){e.create=function(){var e=new Float32Array(16);return e[0]=1,e[5]=1,e[10]=1,e[15]=1,e},e.perspective=function(e,t,n,r,i){var o,a=1/Math.tan(t/2);return e[0]=a/n,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=a,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,null!=i&&i!==1/0?(o=1/(r-i),e[10]=(i+r)*o,e[14]=2*i*r*o):(e[10]=-1,e[14]=-2*r),e},e.lookAt=function(e,t,n,r){var i,o,a,u,s,c,l,f,h,d,p=t[0],m=t[1],v=t[2],y=r[0],g=r[1],A=r[2],b=n[0],x=n[1],E=n[2];return Math.abs(p-b)<1e-6&&Math.abs(m-x)<1e-6&&Math.abs(v-E)<1e-6?function(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}(e):(l=p-b,f=m-x,h=v-E,i=g*(h*=d=1/Math.hypot(l,f,h))-A*(f*=d),o=A*(l*=d)-y*h,a=y*f-g*l,(d=Math.hypot(i,o,a))?(i*=d=1/d,o*=d,a*=d):(i=0,o=0,a=0),u=f*a-h*o,s=h*i-l*a,c=l*o-f*i,(d=Math.hypot(u,s,c))?(u*=d=1/d,s*=d,c*=d):(u=0,s=0,c=0),e[0]=i,e[1]=u,e[2]=l,e[3]=0,e[4]=o,e[5]=s,e[6]=f,e[7]=0,e[8]=a,e[9]=c,e[10]=h,e[11]=0,e[12]=-(i*p+o*m+a*v),e[13]=-(u*p+s*m+c*v),e[14]=-(l*p+f*m+h*v),e[15]=1,e)},e.multiply=function(e,t,n){var r=t[0],i=t[1],o=t[2],a=t[3],u=t[4],s=t[5],c=t[6],l=t[7],f=t[8],h=t[9],d=t[10],p=t[11],m=t[12],v=t[13],y=t[14],g=t[15],A=n[0],b=n[1],x=n[2],E=n[3];return e[0]=A*r+b*u+x*f+E*m,e[1]=A*i+b*s+x*h+E*v,e[2]=A*o+b*c+x*d+E*y,e[3]=A*a+b*l+x*p+E*g,A=n[4],b=n[5],x=n[6],E=n[7],e[4]=A*r+b*u+x*f+E*m,e[5]=A*i+b*s+x*h+E*v,e[6]=A*o+b*c+x*d+E*y,e[7]=A*a+b*l+x*p+E*g,A=n[8],b=n[9],x=n[10],E=n[11],e[8]=A*r+b*u+x*f+E*m,e[9]=A*i+b*s+x*h+E*v,e[10]=A*o+b*c+x*d+E*y,e[11]=A*a+b*l+x*p+E*g,A=n[12],b=n[13],x=n[14],E=n[15],e[12]=A*r+b*u+x*f+E*m,e[13]=A*i+b*s+x*h+E*v,e[14]=A*o+b*c+x*d+E*y,e[15]=A*a+b*l+x*p+E*g,e}}(fe||(fe={}));var he=function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{s(r.next(e))}catch(e){o(e)}}function u(e){try{s(r.throw(e))}catch(e){o(e)}}function s(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,u)}s((r=r.apply(e,t||[])).next())}))},de=function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}},pe=function(){return new Map([["localToProjected",{name:"Binding - Camera LocalToProjected",type:r.FLOAT_MAT4,value:new O([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1])}]])};he(void 0,void 0,void 0,(function(){var e,t,n,r,i,o,u,s,d,p,m,y,E,T,M,C,S,F,L,P,_,V,R,N,D,k,j,z,Y,K,G,W,q,Q,Z,$,ee,te;return de(this,(function(re){var ie,oe,ae,ce,me,ve,ye;return e=new se,t=c(),n=document.getElementById("viewer"),r=b("viewer-options"),i=b("viewer-shader-options"),o=b("viewer-content shader-errors"),u=ue("viewer-content"),s=u[0],d=u[1],p=new Map([["positions",{name:"Binding - Mesh positions",type:w.FLOAT_VEC4,value:new O([])}],["colors",{name:"Binding - Mesh colors",type:w.FLOAT_VEC4,value:new O([])}]]),m=pe(),y=new f(d.context),E=new O([]),T={drawMode:"arrays"},M={longitude:1,latitude:1,radius:2},new a(s,(function(){return M}),(function(e){M=e;var t=45*Math.PI/180,n=d.getSize(),r=n.width/n.height,i=fe.create();fe.perspective(i,t,r,.1,100);var o=fe.create(),a=function(e){var t=e.radius*Math.sin(e.latitude),n=e.radius*Math.cos(e.latitude),r=n*Math.cos(e.longitude);return{x:n*Math.sin(e.longitude),y:t,z:r}}(M);fe.lookAt(o,[a.x,a.y,a.z],[0,0,0],[0,1,0]);var u=fe.create();fe.multiply(u,i,o),m.get("localToProjected").value.setValue(u)})),n.appendChild(s),n.appendChild(o),n.appendChild(r),C=function(e){s.style.visibility="canvas"===e?"visible":"collapse",o.style.visibility="errors"===e?"visible":"collapse"},S=function(){e.getShaderDocuments().then((function(e){var n=e.map((function(e){return{id:e.filePath,display:e.fileName}}));j.setItems(n),t.vertexFilePath&&n.some((function(e){return e.id===t.vertexFilePath}))&&j.setSelectedItemById(t.vertexFilePath),K.setItems(n),t.fragmentFilePath&&n.some((function(e){return e.id===t.fragmentFilePath}))&&K.setSelectedItemById(t.fragmentFilePath)}))},V=null,R=function(e){var t=le.get(e),n=t.positions,r=t.colors,i=t.indices;p.get("positions").value.setValue(n),p.get("colors").value.setValue(r),E.setValue(i)},N=function(){i.innerHTML="";var e=d.context;if(_&&P){var t=function(e,t,n){var r=X(e,e.VERTEX_SHADER,t),i=X(e,e.FRAGMENT_SHADER,n),o=void 0;x(r,"error")&&(o=I(r.error,1));var a=void 0;return x(i,"error")&&(a=I(i.error,1)),o||a?[o,a]:J(e,r,i)}(e,P,_);if(Array.isArray(t))C("errors"),o.innerText=function(e){var t=e[0],n=e[1],r=[];return t&&r.push("VERTEX SHADER:",t),n&&r.push("FRAGMENT SHADER:",n),r.join("\r\n")}(t);else{C("canvas");var n=t,r=function(e,t){for(var n=e.getProgramParameter(t,e.ACTIVE_UNIFORMS),r=[],i=[],o=0;o<n;++o){var a=e.getActiveUniform(t,o);35678===a.type?i.push({name:a.name,unit:i.length}):r.push({name:a.name,type:a.type})}return{dataUniforms:r,textureUniforms:i}}(e,n),a=function(e,t){for(var n=e.getProgramParameter(t,e.ACTIVE_ATTRIBUTES),r=[],i=0;i<n;++i){var o=e.getActiveAttrib(t,i);r.push({name:o.name,type:o.type})}return r}(e,n),u=H(e,n,r.dataUniforms,Array.from(m.values()));u.length>0&&i.appendChild(b("viewer-shaders-title",[g("UNIFORMS","").element])),u.forEach((function(e){return i.appendChild(e.component)}));var s=ne(e,n,a,Array.from(p.values()));s.length>0&&i.appendChild(b("viewer-shaders-title",[g("ATTRIBUTE BUFFERS","").element])),s.forEach((function(e){return i.appendChild(e.component)}));var c=u.map((function(e){return e.uniformInfo})),l=s.map((function(e){return e.attributeBufferInfo}));null!==V&&cancelAnimationFrame(V);var f=function(){!function(e,t,n,r){e.useProgram(t),e.viewport(0,0,e.canvas.width,e.canvas.height),e.clearColor(0,0,0,1),e.clearDepth(1),e.enable(e.DEPTH_TEST),e.depthFunc(e.LEQUAL),e.clear(e.COLOR_BUFFER_BIT|e.DEPTH_BUFFER_BIT),n.uniformInfos.forEach((function(e){return e.prepareForRender()})),n.attributeBufferInfos.forEach((function(e){return e.setAttributeBuffer()}));var i=e.TRIANGLES;if("arrays"===r.drawMode){var o=Math.min.apply(Math,n.attributeBufferInfos.map((function(e){return e.getCount()})));e.drawArrays(i,0,o)}else n.indexBufferInfo.setIndexBuffer(),e.drawElements(i,n.indexBufferInfo.getCount(),e.UNSIGNED_SHORT,0)}(e,n,{uniformInfos:c,attributeBufferInfos:l,indexBufferInfo:y},T),V=requestAnimationFrame(f)};f()}}else C("none")},r.appendChild(b("viewer-shaders-title",[g(h,"").element,(ie="Sync",oe="viewer-refresh-button",ae=S,ce=document.createElement("button"),ce.onclick=ae,ce.className=oe,ce.textContent=ie,{element:ce}).element])),D=v((function(t){return he(void 0,void 0,void 0,(function(){var n;return de(this,(function(r){switch(r.label){case 0:return null==F||F(),t&&(F=e.subscribeToDocumentSave(t.id,(function(e){P=e,N()}))),t?[4,e.getDocumentText(t.id)]:[3,2];case 1:return n=r.sent(),[3,3];case 2:n="",r.label=3;case 3:return P=n,l({vertexFilePath:t?t.id:null}),N(),[2]}}))}))})),k=D[0],(j=D[1]).setSelectedItemById(t.vertexFilePath),r.appendChild(A(k,"Vertex Shader")),z=v((function(t){return he(void 0,void 0,void 0,(function(){var n;return de(this,(function(r){switch(r.label){case 0:return null==L||L(),t&&(L=e.subscribeToDocumentSave(t.id,(function(e){_=e,N()}))),t?[4,e.getDocumentText(t.id)]:[3,2];case 1:return n=r.sent(),[3,3];case 2:n="",r.label=3;case 3:return _=n,l({fragmentFilePath:t?t.id:null}),N(),[2]}}))}))})),Y=z[0],(K=z[1]).setSelectedItemById(t.fragmentFilePath),r.appendChild(A(Y,"Fragment Shader")),r.appendChild(b("viewer-shaders-title",[g("DRAW OPTIONS","").element])),G=v((function(e){e&&(R(e.id),l({meshId:e.id}))})),W=G[0],(q=G[1]).setItems(Array.from(le.entries()).map((function(e){return{id:e[0],display:e[1].display}}))),q.setSelectedItemById(t.meshId),r.appendChild(A(W,"Mesh")),Q=(me=E,ve=function(e){return y.setValue(e)},ye=new O([0,1,2]),B([{id:"custom",display:"Custom",value:ye,element:U(1,ye,!0)},{id:"binding",display:"Binding - Mesh indices",value:me,element:U(1,me,!1)}],ve)).element,Z=A(Q,"Indices"),$=v((function(e){var t,n;e&&(T.drawMode=e.id,t=Z,n="elements"===T.drawMode,t.style.display=n?"inherit":"none",l({drawMode:e.id}))})),ee=$[0],(te=$[1]).setItems([{id:"arrays",display:"Arrays"},{id:"elements",display:"Elements"}]),te.setSelectedItemById(t.drawMode),r.appendChild(A(ee,"Draw mode")),r.appendChild(Z),r.appendChild(i),S(),[2]}))}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,